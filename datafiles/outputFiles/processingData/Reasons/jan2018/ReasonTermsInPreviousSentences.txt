PEP 11| proposal | The growing amount of these fragments poses the risk of unmaintainability without having experts for a large number of platforms , it is not possible to determine whether a certain change to the Python source code will work on all supported platforms . | To reduce this risk , this PEP proposes a procedure to remove code for platforms with no Python users . | support | The growing amount of these fragments poses the risk of unmaintainability without having experts for a large number of platforms , it is not possible to determine whether a certain change to the Python source code will work on all supported platforms .
PEP 11| updated | Under PEP 11 , we have to keep the support code in Python 2.3 , and can only start removing it in Python 2.4 . | I 've updated PEP 11 accordingly . | support | Under PEP 11 , we have to keep the support code in Python 2.3 , and can only start removing it in Python 2.4 .
PEP 11| updated | Under PEP 11 , we have to keep the support Martin code in Python 2.3 , and can only start removing it in Python Martin 2.4 . | I 've updated PEP 11 accordingly . | support | Under PEP 11 , we have to keep the support Martin code in Python 2.3 , and can only start removing it in Python Martin 2.4 .
PEP 234| decided_bdfl_consensus | There is still discussion about whether 334,403 and found that the latter is only about 7 faster . | Resolved Issues The following topics have been decided by consensus or BDFL pronouncement . | discussion | There is still discussion about whether 334,403 and found that the latter is only about 7 faster .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 246| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 250| proposal | py module distributed with Python includes support for locating other modules in the site packages directory . | This PEP proposes that the site packages directory should be used uniformly across all platforms for locally installed modules . | support | py module distributed with Python includes support for locating other modules in the site packages directory .
PEP 258| accepted | There 's no support for PEP processing yet . | Assuming that this part of the PEP is accepted , | support | There 's no support for PEP processing yet .
PEP 258| accepted | There 's no support for PEP processing yet . | Assuming that this part of the PEP is accepted , | support | There 's no support for PEP processing yet .
PEP 269| proposal | personally I have the following concerns about PEP 269 if it 's purpose is to offer a framework for small languages support , there are already modules around that support that SPARK , PLY ... , the only advantage of PEP 269 being speed wrt to the pure python solutions , because of the use of the internal CPython parser , OTOH the other solutions are more flexible ... or if 's purpose is to help experimenting with the grammar unless support for adding keywords is added is a quite unfinished tool . | Further the PEP propose to use the actual AST format of parser module as output format . | support | personally I have the following concerns about PEP 269 if it 's purpose is to offer a framework for small languages support , there are already modules around that support that SPARK , PLY ... , the only advantage of PEP 269 being speed wrt to the pure python solutions , because of the use of the internal CPython parser , OTOH the other solutions are more flexible ... or if 's purpose is to help experimenting with the grammar unless support for adding keywords is added is a quite unfinished tool .
PEP 269| proposal | personally I have the following concerns about PEP 269 if it 's purpose is to offer a framework for small languages support , there are already modules around that support that SPARK , PLY ... , the only advantage of PEP 269 being speed wrt to the pure python solutions , because of the use of the internal CPython parser , OTOH the other solutions are more flexible ... or if 's purpose is to help experimenting with the grammar unless support for adding keywords is added is a quite unfinished tool . | Further the PEP propose to use the actual AST format of parser module as output format . | support | personally I have the following concerns about PEP 269 if it 's purpose is to offer a framework for small languages support , there are already modules around that support that SPARK , PLY ... , the only advantage of PEP 269 being speed wrt to the pure python solutions , because of the use of the internal CPython parser , OTOH the other solutions are more flexible ... or if 's purpose is to help experimenting with the grammar unless support for adding keywords is added is a quite unfinished tool .
PEP 273| proposal | In case you ca n't figure it out from the title of all of the splnter threads , there was an immense discussion about PEP 273 and getting an import mechanism for zipped modules . | To give a little back story , PEP 273 proposes allowing modules to be put into a zip file for easy distribution . | discussion | In case you ca n't figure it out from the title of all of the splnter threads , there was an immense discussion about PEP 273 and getting an import mechanism for zipped modules .
PEP 273| proposal | In case you ca n't figure it out from the title of all of the splnter threads , there was an immense discussion about PEP 273 and getting an import mechanism for zipped modules . | To give a little back story , PEP 273 proposes allowing modules to be put into a zip file for easy distribution . | discussion | In case you ca n't figure it out from the title of all of the splnter threads , there was an immense discussion about PEP 273 and getting an import mechanism for zipped modules .
PEP 273| proposal | In case you ca n't figure it out from the title of all of the splnter threads , there was an immense discussion about PEP 273 and getting an import mechanism for zipped modules . | To give a little back story , PEP 273 proposes allowing modules to be put into a zip file for easy distribution . | discussion | In case you ca n't figure it out from the title of all of the splnter threads , there was an immense discussion about PEP 273 and getting an import mechanism for zipped modules .
PEP 285| accepted | There were several lengthy threads that cropped up in response to Guido 's original posting of the PEP which in turn followed a lengthy discussion on the python dev list . | The ACCEPTED thread was just Guido 's final decision , so it 's unlikely it would automatically duplicate much of the prior discussion . | discussion | There were several lengthy threads that cropped up in response to Guido 's original posting of the PEP which in turn followed a lengthy discussion on the python dev list .
PEP 287| accepted | There 's no support for PEP processing yet . | Assuming that this part of the PEP is accepted , | support | There 's no support for PEP processing yet .
PEP 287| accepted | There 's no support for PEP processing yet . | Assuming that this part of the PEP is accepted , | support | There 's no support for PEP processing yet .
PEP 288| proposal | pre pep resource release support for generators . | This PEP proposes that generators should grow such a close method snip | support | pre pep resource release support for generators .
PEP 288| proposal | Stackless Python in PEP 219220 presents a mechanism by which a large number micro threads could be efficiently supported , thus allowing for a realistic manifestation of a deep generator based software pipeline . | Additionally , this PEP 's sibling , XXX , proposes that the execution order of list comprehensions be made non deterministic to permit future parallel implementations . | support | Stackless Python in PEP 219220 presents a mechanism by which a large number micro threads could be efficiently supported , thus allowing for a realistic manifestation of a deep generator based software pipeline .
PEP 291| accepted | Guido We had some discussion about this when neal wrote the pep , and I suggested to list modulefinder there . | Neal finally wrote the requirement into the PEP , and it was my impression that you accepted it , although you were not very happy with it . | discussion | Guido We had some discussion about this when neal wrote the pep , and I suggested to list modulefinder there .
PEP 291| accepted | Guido We had some discussion about this when neal wrote the pep , and I suggested to list modulefinder there . | Neal finally wrote the requirement into the PEP , and it was my impression that you accepted it , although you were not very happy with it . | discussion | Guido We had some discussion about this when neal wrote the pep , and I suggested to list modulefinder there .
PEP 291| accepted | Guido We had some discussion about this when neal wrote the pep , and I suggested to list modulefinder there . | Neal finally wrote the requirement into the PEP , and it was my impression that you accepted it , although you were not very happy with it . | discussion | Guido We had some discussion about this when neal wrote the pep , and I suggested to list modulefinder there .
PEP 291| accepted | Guido We had some discussion about this when neal wrote the pep , and I suggested to list modulefinder there . | Neal finally wrote the requirement into the PEP , and it was my impression that you accepted it , although you were not very happy with it . | discussion | Guido We had some discussion about this when neal wrote the pep , and I suggested to list modulefinder there .
PEP 291| accepted | Guido We had some discussion about this when neal wrote the pep , and I suggested to list modulefinder there . | Neal finally wrote the requirement into the PEP , and it was my impression that you accepted it , although you were not very happy with it . | discussion | Guido We had some discussion about this when neal wrote the pep , and I suggested to list modulefinder there .
PEP 291| accepted | Guido We had some discussion about this when neal wrote the pep , and I suggested to list modulefinder there . | Neal finally wrote the requirement into the PEP , and it was my impression that you accepted it , although you were not very happy with it . | discussion | Guido We had some discussion about this when neal wrote the pep , and I suggested to list modulefinder there .
PEP 291| accepted | Guido We had some discussion about this when neal wrote the pep , and I suggested to list modulefinder there . | Neal finally wrote the requirement into the PEP , and it was my impression that you accepted it , although you were not very happy with it . | discussion | Guido We had some discussion about this when neal wrote the pep , and I suggested to list modulefinder there .
PEP 292| accepted | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | discussion | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks .
PEP 292| accepted | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | discussion | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks .
PEP 292| accepted | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | discussion | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks .
PEP 296| proposal | Legacy features can still be phased out when appropriate that is , when the majority of the user base has migrated to the newer Python version . | This PEP merely proposes to shift the emphasis of the development effort directed at compatibility from 100 forwards to at least 50 backwards . | majority | Legacy features can still be phased out when appropriate that is , when the majority of the user base has migrated to the newer Python version .
PEP 302| accepted | SF patch 643835 The codecs support module for codecs . | py was turned into a builtin module to assure that at least the builtin codecs are available PEP 302 has been accepted . | support | SF patch 643835 The codecs support module for codecs .
PEP 302| accepted | SF patch 643835 The codecs support module for codecs . | py was turned into a builtin module to assure that at least the builtin codecs are available PEP 302 has been accepted . | support | SF patch 643835 The codecs support module for codecs .
PEP 303| rejected | Rejection of PEP 303 Extend divmod for Multiple Divisors '' was proposed on the grounds that it has been open for two and half years and has n't generated discussion or support , is unpersuasive , and unnecessary . | No one spoke up for it and some against , so it is now rejected . | discussion | Rejection of PEP 303 Extend divmod for Multiple Divisors '' was proposed on the grounds that it has been open for two and half years and has n't generated discussion or support , is unpersuasive , and unnecessary .
PEP 303| rejected | Rejection of PEP 303 Extend divmod for Multiple Divisors '' was proposed on the grounds that it has been open for two and half years and has n't generated discussion or support , is unpersuasive , and unnecessary . | No one spoke up for it and some against , so it is now rejected . | support | Rejection of PEP 303 Extend divmod for Multiple Divisors '' was proposed on the grounds that it has been open for two and half years and has n't generated discussion or support , is unpersuasive , and unnecessary .
PEP 303| rejected | Rejection of PEP 303 Extend divmod for Multiple Divisors '' was proposed on the grounds that it has been open for two and half years and has n't generated discussion or support , is unpersuasive , and unnecessary . | No one spoke up for it and some against , so it is now rejected . | discussion | Rejection of PEP 303 Extend divmod for Multiple Divisors '' was proposed on the grounds that it has been open for two and half years and has n't generated discussion or support , is unpersuasive , and unnecessary .
PEP 303| rejected | Rejection of PEP 303 Extend divmod for Multiple Divisors '' was proposed on the grounds that it has been open for two and half years and has n't generated discussion or support , is unpersuasive , and unnecessary . | No one spoke up for it and some against , so it is now rejected . | support | Rejection of PEP 303 Extend divmod for Multiple Divisors '' was proposed on the grounds that it has been open for two and half years and has n't generated discussion or support , is unpersuasive , and unnecessary .
PEP 303| rejected | Rejection of PEP 303 Extend divmod for Multiple Divisors '' was proposed on the grounds that it has been open for two and half years and has n't generated discussion or support , is unpersuasive , and unnecessary . | No one spoke up for it and some against , so it is now rejected . | discussion | Rejection of PEP 303 Extend divmod for Multiple Divisors '' was proposed on the grounds that it has been open for two and half years and has n't generated discussion or support , is unpersuasive , and unnecessary .
PEP 303| rejected | Rejection of PEP 303 Extend divmod for Multiple Divisors '' was proposed on the grounds that it has been open for two and half years and has n't generated discussion or support , is unpersuasive , and unnecessary . | No one spoke up for it and some against , so it is now rejected . | support | Rejection of PEP 303 Extend divmod for Multiple Divisors '' was proposed on the grounds that it has been open for two and half years and has n't generated discussion or support , is unpersuasive , and unnecessary .
PEP 308| accepted | If you want to summarise them as yesnoundecided , then set required majority levels , but to some extent that 's just another chance for people to complain . | To some extent , anything else does n't match the oficial PEP process where the PEP is modified to match the proposed solution , and then the PEP is accepted or rejected once it 's finalized and ready for a decision . | majority | If you want to summarise them as yesnoundecided , then set required majority levels , but to some extent that 's just another chance for people to complain .
PEP 308| accepted | If you want to summarise them as yesnoundecided , then set required majority levels , but to some extent that 's just another chance for people to complain . | To some extent , anything else does n't match the oficial PEP process where the PEP is modified to match the proposed solution , and then the PEP is accepted or rejected once it 's finalized and ready for a decision . | majority | If you want to summarise them as yesnoundecided , then set required majority levels , but to some extent that 's just another chance for people to complain .
PEP 308| rejected | If you want to summarise them as yesnoundecided , then set required majority levels , but to some extent that 's just another chance for people to complain . | To some extent , anything else does n't match the oficial PEP process where the PEP is modified to match the proposed solution , and then the PEP is accepted or rejected once it 's finalized and ready for a decision . | majority | If you want to summarise them as yesnoundecided , then set required majority levels , but to some extent that 's just another chance for people to complain .
PEP 308| rejected | If you want to summarise them as yesnoundecided , then set required majority levels , but to some extent that 's just another chance for people to complain . | To some extent , anything else does n't match the oficial PEP process where the PEP is modified to match the proposed solution , and then the PEP is accepted or rejected once it 's finalized and ready for a decision . | majority | If you want to summarise them as yesnoundecided , then set required majority levels , but to some extent that 's just another chance for people to complain .
PEP 308| vote | Status Rejected Type Standards Track Content Type textplain 31,34 31,41 discussion , and a discussion of short circuit behavior . | Following the discussion , a vote was held . | discussion | Status Rejected Type Standards Track Content Type textplain 31,34 31,41 discussion , and a discussion of short circuit behavior .
PEP 308| vote | Status Rejected Type Standards Track Content Type textplain 31,34 31,41 discussion , and a discussion of short circuit behavior . | Following the discussion , a vote was held . | discussion | Status Rejected Type Standards Track Content Type textplain 31,34 31,41 discussion , and a discussion of short circuit behavior .
PEP 308| vote_after_discussion | Status Rejected Type Standards Track Content Type textplain 31,34 31,41 discussion , and a discussion of short circuit behavior . | Following the discussion , a vote was held . | discussion | Status Rejected Type Standards Track Content Type textplain 31,34 31,41 discussion , and a discussion of short circuit behavior .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | support | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | support | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | support | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | support | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| bdfl_pronouncement | 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax .
PEP 308| bdfl_pronouncement | 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax .
PEP 308| updated | 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax .
PEP 308| bdfl_pronouncement | txt 30 Sep 2005 13 41 34 0000 1.22 9,6 9,7 Created 7 Feb 2003 Post History 7 Feb 2003 , 11 Feb 2003 Adding a conditional expression On 9292005 , Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | txt 30 Sep 2005 13 41 34 0000 1.22 9,6 9,7 Created 7 Feb 2003 Post History 7 Feb 2003 , 11 Feb 2003 Adding a conditional expression On 9292005 , Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax .
PEP 308| bdfl_pronouncement | txt 30 Sep 2005 13 41 34 0000 1.22 9,6 9,7 Created 7 Feb 2003 Post History 7 Feb 2003 , 11 Feb 2003 Adding a conditional expression On 9292005 , Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | txt 30 Sep 2005 13 41 34 0000 1.22 9,6 9,7 Created 7 Feb 2003 Post History 7 Feb 2003 , 11 Feb 2003 Adding a conditional expression On 9292005 , Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax .
PEP 308| updated | txt 30 Sep 2005 13 41 34 0000 1.22 9,6 9,7 Created 7 Feb 2003 Post History 7 Feb 2003 , 11 Feb 2003 Adding a conditional expression On 9292005 , Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | txt 30 Sep 2005 13 41 34 0000 1.22 9,6 9,7 Created 7 Feb 2003 Post History 7 Feb 2003 , 11 Feb 2003 Adding a conditional expression On 9292005 , Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax .
PEP 310| proposal | Apologies if this has been discovered and rejected already I 've had to skip most of the discussions but this though wo n't leave my head ... | So PEP 310 proposes this | discussion | Apologies if this has been discovered and rejected already I 've had to skip most of the discussions but this though wo n't leave my head ...
PEP 318| proposal | Most of the discussion has focused on syntax . | I would like to see some clarification of the purpose and meaning of a decoration . | discussion | Most of the discussion has focused on syntax .
PEP 318| proposal | Most of the discussion has focused on syntax . | I would like to see some clarification of the purpose and meaning of a decoration . | discussion | Most of the discussion has focused on syntax .
PEP 321| proposal | There 's no support for parsing strings in various formats and returning a corresponding instance of one of the types . | This PEP proposes adding a family of predefined parsing function for several commonly used date and time formats , and a facility for generic parsing . | support | There 's no support for parsing strings in various formats and returning a corresponding instance of one of the types .
PEP 321| proposal | There 's no support for parsing strings in various formats and returning a corresponding instance of one of the types . | This PEP proposes adding a family of predefined parsing function for several commonly used date and time formats , and a facility for generic parsing . | support | There 's no support for parsing strings in various formats and returning a corresponding instance of one of the types .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 328| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 335| proposal | To properly support logical negation of circuit breakers , a new not protocol method would also be introduced allowing objects to control the result of not obj expressions . | As shown in the basic example above , the PEP further proposes the addition of builtin exists and missing circuit breakers that provide conditional branching based on whether or not an object is None , but return the original object rather than the existence checking wrapper when the expression evaluation short circuits . | support | To properly support logical negation of circuit breakers , a new not protocol method would also be introduced allowing objects to control the result of not obj expressions .
PEP 336| bdfl_pronouncement | Rejection of PEP 336 Make None Callable '' was proposed on the grounds that no support has grown beyond the original poster , and that it fails the tests of obviousness , necessity , clarity , and explicitness . | Many people , including Guido , agreed , and the PEP was rejected . | support | Rejection of PEP 336 Make None Callable '' was proposed on the grounds that no support has grown beyond the original poster , and that it fails the tests of obviousness , necessity , clarity , and explicitness .
PEP 336| consensus_including_bdfl | Rejection of PEP 336 Make None Callable '' was proposed on the grounds that no support has grown beyond the original poster , and that it fails the tests of obviousness , necessity , clarity , and explicitness . | Many people , including Guido , agreed , and the PEP was rejected . | support | Rejection of PEP 336 Make None Callable '' was proposed on the grounds that no support has grown beyond the original poster , and that it fails the tests of obviousness , necessity , clarity , and explicitness .
PEP 336| rejected | Rejection of PEP 336 Make None Callable '' was proposed on the grounds that no support has grown beyond the original poster , and that it fails the tests of obviousness , necessity , clarity , and explicitness . | Many people , including Guido , agreed , and the PEP was rejected . | support | Rejection of PEP 336 Make None Callable '' was proposed on the grounds that no support has grown beyond the original poster , and that it fails the tests of obviousness , necessity , clarity , and explicitness .
PEP 336| rejected | Rejection of PEP 336 Make None Callable '' was proposed on the grounds that no support has grown beyond the original poster , and that it fails the tests of obviousness , necessity , clarity , and explicitness . | Many people , including Guido , agreed , and the PEP was rejected . | support | Rejection of PEP 336 Make None Callable '' was proposed on the grounds that no support has grown beyond the original poster , and that it fails the tests of obviousness , necessity , clarity , and explicitness .
PEP 336| bdfl_pronouncement | Rejection of PEP 336 Make None Callable '' was proposed on the grounds that no support has grown beyond the original poster , and that it fails the tests of obviousness , necessity , clarity , and explicitness . | Many people , including Guido , agreed , and the PEP was rejected . | support | Rejection of PEP 336 Make None Callable '' was proposed on the grounds that no support has grown beyond the original poster , and that it fails the tests of obviousness , necessity , clarity , and explicitness .
PEP 336| consensus_including_bdfl | Rejection of PEP 336 Make None Callable '' was proposed on the grounds that no support has grown beyond the original poster , and that it fails the tests of obviousness , necessity , clarity , and explicitness . | Many people , including Guido , agreed , and the PEP was rejected . | support | Rejection of PEP 336 Make None Callable '' was proposed on the grounds that no support has grown beyond the original poster , and that it fails the tests of obviousness , necessity , clarity , and explicitness .
PEP 336| rejected | Rejection of PEP 336 Make None Callable '' was proposed on the grounds that no support has grown beyond the original poster , and that it fails the tests of obviousness , necessity , clarity , and explicitness . | Many people , including Guido , agreed , and the PEP was rejected . | support | Rejection of PEP 336 Make None Callable '' was proposed on the grounds that no support has grown beyond the original poster , and that it fails the tests of obviousness , necessity , clarity , and explicitness .
PEP 336| rejected | Rejection of PEP 336 Make None Callable '' was proposed on the grounds that no support has grown beyond the original poster , and that it fails the tests of obviousness , necessity , clarity , and explicitness . | Many people , including Guido , agreed , and the PEP was rejected . | support | Rejection of PEP 336 Make None Callable '' was proposed on the grounds that no support has grown beyond the original poster , and that it fails the tests of obviousness , necessity , clarity , and explicitness .
PEP 336| bdfl_pronouncement | Rejection of PEP 336 Make None Callable '' was proposed on the grounds that no support has grown beyond the original poster , and that it fails the tests of obviousness , necessity , clarity , and explicitness . | Many people , including Guido , agreed , and the PEP was rejected . | support | Rejection of PEP 336 Make None Callable '' was proposed on the grounds that no support has grown beyond the original poster , and that it fails the tests of obviousness , necessity , clarity , and explicitness .
PEP 336| consensus_including_bdfl | Rejection of PEP 336 Make None Callable '' was proposed on the grounds that no support has grown beyond the original poster , and that it fails the tests of obviousness , necessity , clarity , and explicitness . | Many people , including Guido , agreed , and the PEP was rejected . | support | Rejection of PEP 336 Make None Callable '' was proposed on the grounds that no support has grown beyond the original poster , and that it fails the tests of obviousness , necessity , clarity , and explicitness .
PEP 336| rejected | Rejection of PEP 336 Make None Callable '' was proposed on the grounds that no support has grown beyond the original poster , and that it fails the tests of obviousness , necessity , clarity , and explicitness . | Many people , including Guido , agreed , and the PEP was rejected . | support | Rejection of PEP 336 Make None Callable '' was proposed on the grounds that no support has grown beyond the original poster , and that it fails the tests of obviousness , necessity , clarity , and explicitness .
PEP 336| rejected | Rejection of PEP 336 Make None Callable '' was proposed on the grounds that no support has grown beyond the original poster , and that it fails the tests of obviousness , necessity , clarity , and explicitness . | Many people , including Guido , agreed , and the PEP was rejected . | support | Rejection of PEP 336 Make None Callable '' was proposed on the grounds that no support has grown beyond the original poster , and that it fails the tests of obviousness , necessity , clarity , and explicitness .
PEP 338| proposal | Using that functionality and the exec statement , PEP 338 could easily be modified to support any module accessed via a loader which supports get code and it could probably also get rid of all of the current cruft dealing with normal filesystem packages . | So with that in mind , I 'm thinking of updating PEP 338 to propose the following | support | Using that functionality and the exec statement , PEP 338 could easily be modified to support any module accessed via a loader which supports get code and it could probably also get rid of all of the current cruft dealing with normal filesystem packages .
PEP 338| proposal | Using that functionality and the exec statement , PEP 338 could easily be modified to support any module accessed via a loader which supports get code and it could probably also get rid of all of the current cruft dealing with normal filesystem packages . | So with that in mind , I 'm thinking of updating PEP 338 to propose the following | support | Using that functionality and the exec statement , PEP 338 could easily be modified to support any module accessed via a loader which supports get code and it could probably also get rid of all of the current cruft dealing with normal filesystem packages .
PEP 340| proposal | If there 's no community support , I 'll let it die a natural death , because it 's ultimately a purity '' question rather than a practical one , though I think that other people who teach Python programming should weigh in on this . | Specifically , I propose that PEP 340 not allow the use of normal '' iterators . | support | If there 's no community support , I 'll let it die a natural death , because it 's ultimately a purity '' question rather than a practical one , though I think that other people who teach Python programming should weigh in on this .
PEP 344| proposal | I 've tried to summarize the applications for chaining mentioned in these discussions , survey what 's available in other languages , and come up with a precise specification . | PEP 344 proposes three standard attributes on traceback objects | discussion | I 've tried to summarize the applications for chaining mentioned in these discussions , survey what 's available in other languages , and come up with a precise specification .
PEP 345| accepted | This enhancement was driven by the discussions about the ratingcomment system at PyPI on catalog sig . | We believe that having PEP 376 and PEP 345 accepted will be a major improvement for the Python packaging eco system . | discussion | This enhancement was driven by the discussions about the ratingcomment system at PyPI on catalog sig .
PEP 345| accepted | This enhancement was driven by the discussions about the ratingcomment system at PyPI on catalog sig . | We believe that having PEP 386 and PEP 345 accepted will be a major improvement for the Python packaging eco system . | discussion | This enhancement was driven by the discussions about the ratingcomment system at PyPI on catalog sig .
PEP 345| accepted | This enhancement was driven by the discussions about the ratingcomment system at PyPI on catalog sig . | We believe that having PEP 376 and PEP 345 accepted will be a major improvement for the Python packaging eco system . | discussion | This enhancement was driven by the discussions about the ratingcomment system at PyPI on catalog sig .
PEP 345| accepted | This enhancement was driven by the discussions about the ratingcomment system at PyPI on catalog sig . | We believe that having PEP 386 and PEP 345 accepted will be a major improvement for the Python packaging eco system . | discussion | This enhancement was driven by the discussions about the ratingcomment system at PyPI on catalog sig .
PEP 358| proposal | This week mostly wrapped up the bytes type discussion from the last fortnight , with the introduction of PEP 358 The bytes '' Object . | The PEP proposes a bytes type which | discussion | This week mostly wrapped up the bytes type discussion from the last fortnight , with the introduction of PEP 358 The bytes '' Object .
PEP 358| proposal | This week mostly wrapped up the bytes type discussion from the last fortnight , with the introduction of PEP 358 The bytes '' Object . | The PEP proposes a bytes type which | discussion | This week mostly wrapped up the bytes type discussion from the last fortnight , with the introduction of PEP 358 The bytes '' Object .
PEP 358| proposal | This week mostly wrapped up the bytes type discussion from the last fortnight , with the introduction of PEP 358 The bytes '' Object . | The PEP proposes a bytes type which | discussion | This week mostly wrapped up the bytes type discussion from the last fortnight , with the introduction of PEP 358 The bytes '' Object .
PEP 363| updated | wrapping up dynamic attribute ' discussion . | I 've sent an updated version of PEP 363 to the editors , which includes the following summary of the discussion . | discussion | wrapping up dynamic attribute ' discussion .
PEP 365| rejected | After reading all this , I really do n't believe that adding egg support to the stdlib at this time is the right thing to do . | I am therefore rejecting the PEP . | support | After reading all this , I really do n't believe that adding egg support to the stdlib at this time is the right thing to do .
PEP 365| rejected | After reading all this , I really do n't believe that adding egg support to the stdlib at this time is the right thing to do . | I am therefore rejecting the PEP . | support | After reading all this , I really do n't believe that adding egg support to the stdlib at this time is the right thing to do .
PEP 365| proposal | package index or something like it , bundle it with pkg resources , and have a nice little core support for dependency handling , downloading , and local package queries . | Then , you could put it in the stdlib ... kind of like I proposed in PEP 365 . | support | package index or something like it , bundle it with pkg resources , and have a nice little core support for dependency handling , downloading , and local package queries .
PEP 366| accepted | I must say , this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name '' main '' blocks . | Brett 's rejected PEP 3122 and my own accepted PEP 366 were both a direct result of the interpreter lying about the real value of name . | discussion | I must say , this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name '' main '' blocks .
PEP 366| accepted | I must say , this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name '' main '' blocks . | Brett 's rejected PEP 3122 and my own accepted PEP 366 were both a direct result of the interpreter lying about the real value of name . | discussion | I must say , this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name '' main '' blocks .
PEP 368| deferred | txt 3,7 3,7 Version Revision Last Modified Date Author Lino Mastrodomenico l.mastrodomenico at gmail.com Status Draft Status Deferred Type Standards Track Content Type textx rst Created 28 Jun 2007 39,6 39,13 also proposed , together with a mixin class that helps adding support for the protocol to existing image classes . | PEP Deferral Further exploration of the concepts covered in this PEP has been deferred for lack of a current champion interested in promoting the goals of the PEP and collecting and incorporating feedback , and with sufficient available time to do so effectively . | support | txt 3,7 3,7 Version Revision Last Modified Date Author Lino Mastrodomenico l.mastrodomenico at gmail.com Status Draft Status Deferred Type Standards Track Content Type textx rst Created 28 Jun 2007 39,6 39,13 also proposed , together with a mixin class that helps adding support for the protocol to existing image classes .
PEP 376| accepted | This enhancement was driven by the discussions about the ratingcomment system at PyPI on catalog sig . | We believe that having PEP 376 and PEP 345 accepted will be a major improvement for the Python packaging eco system . | discussion | This enhancement was driven by the discussions about the ratingcomment system at PyPI on catalog sig .
PEP 383| proposal | In the discussion , the transition from the example of alternative use of python escape ' to discussion of the error handler interface extension is a bit abrupt . | I suggest rewriting as '' '' The extension to the encode error handler interface proposed by this PEP is necessary to implement the utf8b ' error handler , because there are required byte sequences which can not be generated from replacement Unicode . | discussion | In the discussion , the transition from the example of alternative use of python escape ' to discussion of the error handler interface extension is a bit abrupt .
PEP 383| proposal | A solution that allowed any path representing object to declare that is was a path and a way to extract a low level representation that all path objects could support was desired . | This PEP then proposes to introduce a new protocol to be followed by objects which represent file system paths . | support | A solution that allowed any path representing object to declare that is was a path and a way to extract a low level representation that all path objects could support was desired .
PEP 383| proposal | A solution that allows any path representing object to declare that it is a path and a way to extract a low level representation that all path objects could support is desired . | This PEP then proposes to introduce a new protocol to be followed by objects which represent file system paths . | support | A solution that allows any path representing object to declare that it is a path and a way to extract a low level representation that all path objects could support is desired .
PEP 383| proposal | A solution that allows any path representing object to declare that it is a path and a way to extract a low level representation that all path objects could support is desired . | This PEP then proposes to introduce a new protocol to be followed by objects which represent file system paths . | support | A solution that allows any path representing object to declare that it is a path and a way to extract a low level representation that all path objects could support is desired .
PEP 383| proposal | A solution that allows any path representing object to declare that it is a path and a way to extract a low level representation that all path objects could support is desired . | This PEP then proposes to introduce a new protocol to be followed by objects which represent file system paths . | support | A solution that allows any path representing object to declare that it is a path and a way to extract a low level representation that all path objects could support is desired .
PEP 384| accepted | Hi , Since discussion has trailed off without any blocking objections , I 'm accepting PEP 384 . | Martin , you may mark the PEP accepted and proceed with merging the implementation for the beta on Saturday . | discussion | Hi , Since discussion has trailed off without any blocking objections , I 'm accepting PEP 384 .
PEP 383| proposal | In the discussion , the transition from the example of alternative use of python escape ' to discussion of the error handler interface extension is a bit abrupt . | I suggest rewriting as '' '' The extension to the encode error handler interface proposed by this PEP is necessary to implement the utf8b ' error handler , because there are required byte sequences which can not be generated from replacement Unicode . | discussion | In the discussion , the transition from the example of alternative use of python escape ' to discussion of the error handler interface extension is a bit abrupt .
PEP 383| proposal | A solution that allowed any path representing object to declare that is was a path and a way to extract a low level representation that all path objects could support was desired . | This PEP then proposes to introduce a new protocol to be followed by objects which represent file system paths . | support | A solution that allowed any path representing object to declare that is was a path and a way to extract a low level representation that all path objects could support was desired .
PEP 383| proposal | A solution that allows any path representing object to declare that it is a path and a way to extract a low level representation that all path objects could support is desired . | This PEP then proposes to introduce a new protocol to be followed by objects which represent file system paths . | support | A solution that allows any path representing object to declare that it is a path and a way to extract a low level representation that all path objects could support is desired .
PEP 383| proposal | A solution that allows any path representing object to declare that it is a path and a way to extract a low level representation that all path objects could support is desired . | This PEP then proposes to introduce a new protocol to be followed by objects which represent file system paths . | support | A solution that allows any path representing object to declare that it is a path and a way to extract a low level representation that all path objects could support is desired .
PEP 383| proposal | A solution that allows any path representing object to declare that it is a path and a way to extract a low level representation that all path objects could support is desired . | This PEP then proposes to introduce a new protocol to be followed by objects which represent file system paths . | support | A solution that allows any path representing object to declare that it is a path and a way to extract a low level representation that all path objects could support is desired .
PEP 384| accepted | Hi , Since discussion has trailed off without any blocking objections , I 'm accepting PEP 384 . | Martin , you may mark the PEP accepted and proceed with merging the implementation for the beta on Saturday . | discussion | Hi , Since discussion has trailed off without any blocking objections , I 'm accepting PEP 384 .
PEP 386| accepted | This enhancement was driven by the discussions about the ratingcomment system at PyPI on catalog sig . | We believe that having PEP 386 and PEP 345 accepted will be a major improvement for the Python packaging eco system . | discussion | This enhancement was driven by the discussions about the ratingcomment system at PyPI on catalog sig .
PEP 386| proposal | Notice that , from current feedback about the PEP , I understand that the avoid deep nesting '' rule sounds more valuable than the standard pattern for contributions '' . | About naming pattern for contribs , the draft PEP proposes | feedback | Notice that , from current feedback about the PEP , I understand that the avoid deep nesting '' rule sounds more valuable than the standard pattern for contributions '' .
PEP 389| proposal | Sorry for the delay , but I 've finally updated PEP 389 , the argparse PEP , based on all the feedback from python dev . | The full PEP is below , but in short , the important changes are | feedback | Sorry for the delay , but I 've finally updated PEP 389 , the argparse PEP , based on all the feedback from python dev .
PEP 391| inviting_votes | I 've not asked for a vote and so I do n't know the state of community consensus regarding this PEP . | So , can you please indicate your vote for or against incorporating PEP 391 into Python ? | consensus | I 've not asked for a vote and so I do n't know the state of community consensus regarding this PEP .
PEP 391| inviting_votes | I 've not asked for a vote and so I do n't know the state of community consensus regarding this PEP . | So , can you please indicate your vote for or against incorporating PEP 391 into Python ? | consensus | I 've not asked for a vote and so I do n't know the state of community consensus regarding this PEP .
PEP 391| inviting_votes | I 've not asked for a vote and so I do n't know the state of community consensus regarding this PEP . | So , can you please indicate your vote for or against incorporating PEP 391 into Python ? | consensus | I 've not asked for a vote and so I do n't know the state of community consensus regarding this PEP .
PEP 391| inviting_votes | I 've not asked for a vote and so I do n't know the state of community consensus regarding this PEP . | So , can you please indicate your vote for or against incorporating PEP 391 into Python ? | consensus | I 've not asked for a vote and so I do n't know the state of community consensus regarding this PEP .
PEP 391| inviting_votes | I 've not asked for a vote and so I do n't know the state of community consensus regarding this PEP . | So , can you please indicate your vote for or against incorporating PEP 391 into Python ? | consensus | I 've not asked for a vote and so I do n't know the state of community consensus regarding this PEP .
PEP 391| inviting_votes | I 've not asked for a vote and so I do n't know the state of community consensus regarding this PEP . | So , can you please indicate your vote for or against incorporating PEP 391 into Python ? | consensus | I 've not asked for a vote and so I do n't know the state of community consensus regarding this PEP .
PEP 391| inviting_votes | I 've not asked for a vote and so I do n't know the state of community consensus regarding this PEP . | So , can you please indicate your vote for or against incorporating PEP 391 into Python ? | consensus | I 've not asked for a vote and so I do n't know the state of community consensus regarding this PEP .
PEP 391| inviting_votes | I 've not asked for a vote and so I do n't know the state of community consensus regarding this PEP . | So , can you please indicate your vote for or against incorporating PEP 391 into Python ? | consensus | I 've not asked for a vote and so I do n't know the state of community consensus regarding this PEP .
PEP 391| inviting_votes | I 've not asked for a vote and so I do n't know the state of community consensus regarding this PEP . | So , can you please indicate your vote for or against incorporating PEP 391 into Python ? | consensus | I 've not asked for a vote and so I do n't know the state of community consensus regarding this PEP .
PEP 391| inviting_votes | I 've not asked for a vote and so I do n't know the state of community consensus regarding this PEP . | So , can you please indicate your vote for or against incorporating PEP 391 into Python ? | consensus | I 've not asked for a vote and so I do n't know the state of community consensus regarding this PEP .
PEP 405| proposal | This is a maintenance burden , as separate activation scripts need to be provided and maintained for every supported shell . | For this reason , this PEP proposes to leave such scripts to be provided by third party extensions virtual environments created by the core functionality would be used by directly invoking the environment 's Python binary or scripts . | support | This is a maintenance burden , as separate activation scripts need to be provided and maintained for every supported shell .
PEP 405| proposal | This is a maintenance burden , as separate activation scripts need to be provided and maintained for every supported shell . | For this reason , this PEP proposes to leave such scripts to be provided by third party extensions virtual environments created by the core functionality would be used by directly invoking the environment 's Python binary or scripts . | support | This is a maintenance burden , as separate activation scripts need to be provided and maintained for every supported shell .
PEP 405| proposal | This is a maintenance burden , as separate activation scripts need to be provided and maintained for every supported shell . | For this reason , this PEP proposes to leave such scripts to be provided by third party extensions virtual environments created by the core functionality would be used by directly invoking the environment 's Python binary or scripts . | support | This is a maintenance burden , as separate activation scripts need to be provided and maintained for every supported shell .
PEP 409| proposal | I have n't seen any further discussion here or in the bug tracker . | Below is the latest version of this PEP , now with a section on Language Details . | discussion | I have n't seen any further discussion here or in the bug tracker .
PEP 414| accepted | Indeed , the wrangling has gone too far already . | I 'm accepting the PEP . | wrangling | Indeed , the wrangling has gone too far already .
PEP 414| proposal | The view based APIs that were added to Python 2.7 do n't actually help with the transition process , as they do n't exist in Python 3 and hence are n't part of the common subset of Python 2 and Python 3 , and also are n't supported by most Python 2 mappings including the collection ABCs . | This PEP proposes to just eliminate all that annoyance by making the iterator based APIs work again in Python 3.5 . | support | The view based APIs that were added to Python 2.7 do n't actually help with the transition process , as they do n't exist in Python 3 and hence are n't part of the common subset of Python 2 and Python 3 , and also are n't supported by most Python 2 mappings including the collection ABCs .
PEP 414| proposal | By contrast , users that actually want the increased efficiency will have faced a three phase migration process by the time they have fully migrated to Python 3 original migration to the iterator based APIs after they were added in Python 2.2 migration to a separate function based API in order to run in the common subset of Python 2 and 3 eventual migration back to unprefixed method APIs when eventually dropping Python 2.7 support The view based APIs that were added to Python 2.7 do n't actually help with the transition process , as they do n't exist in Python 3 and hence are n't part of the common subset of Python 2 and Python 3 , and also are n't supported by most Python 2 mappings including the collection ABCs . | This PEP proposes to just eliminate all that annoyance by making the iterator based APIs work again in Python 3.5 . | support | By contrast , users that actually want the increased efficiency will have faced a three phase migration process by the time they have fully migrated to Python 3 original migration to the iterator based APIs after they were added in Python 2.2 migration to a separate function based API in order to run in the common subset of Python 2 and 3 eventual migration back to unprefixed method APIs when eventually dropping Python 2.7 support The view based APIs that were added to Python 2.7 do n't actually help with the transition process , as they do n't exist in Python 3 and hence are n't part of the common subset of Python 2 and Python 3 , and also are n't supported by most Python 2 mappings including the collection ABCs .
PEP 415| replaced | The implementation of PEP 492 asyncawait , for example , underwent some fundamental changes during the beta process , as developers ' feedback showed that some of the design decisions we made in the original version were quite problematic . | The original exception suppression mechanism in PEP 409 which made clever but idiosyncratic use of Ellipsis , was replaced with the simpler mechanism in PEP 415 which instead uses a more conventional setter with side effects on other attributes approach . | feedback | The implementation of PEP 492 asyncawait , for example , underwent some fundamental changes during the beta process , as developers ' feedback showed that some of the design decisions we made in the original version were quite problematic .
PEP 421| member_volunteers_bdfl_delegate | I 've mentioned this in private to a few folks , with generally positive feedback . | I am formally volunteering to be PEP czar for PEP 421 , sys. implementation . | feedback | I 've mentioned this in private to a few folks , with generally positive feedback .
PEP 423| proposal | Notice that , from current feedback about the PEP , I understand that the avoid deep nesting '' rule sounds more valuable than the standard pattern for contributions '' . | About naming pattern for contribs , the draft PEP proposes | feedback | Notice that , from current feedback about the PEP , I understand that the avoid deep nesting '' rule sounds more valuable than the standard pattern for contributions '' .
PEP 428| rejected | Concerns have been raised isdoor about platform specific stat flags such as S ISDOOR on Solaris that Python does not currently support , and which could be added as part of this proposal . | The author has rejected such proposals , yet again in order to keep the PEP focused . | support | Concerns have been raised isdoor about platform specific stat flags such as S ISDOOR on Solaris that Python does not currently support , and which could be added as part of this proposal .
PEP 428| rejected | Concerns have been raised isdoor about platform specific stat flags such as S ISDOOR on Solaris that Python does not currently support , and which could be added as part of this proposal . | The author has rejected such proposals , yet again in order to keep the PEP focused . | support | Concerns have been raised isdoor about platform specific stat flags such as S ISDOOR on Solaris that Python does not currently support , and which could be added as part of this proposal .
PEP 428| rejected_by_author | Concerns have been raised isdoor about platform specific stat flags such as S ISDOOR on Solaris that Python does not currently support , and which could be added as part of this proposal . | The author has rejected such proposals , yet again in order to keep the PEP focused . | support | Concerns have been raised isdoor about platform specific stat flags such as S ISDOOR on Solaris that Python does not currently support , and which could be added as part of this proposal .
PEP 438| accepted | Thanks everyone who 's been involved in the formulation and discussion of PEP 438 Transitioning to release file hosting on PyPI '' . | I have today accepted the PEP and the first phase of implementation is now underway , spearheaded by Donald Stufft . | discussion | Thanks everyone who 's been involved in the formulation and discussion of PEP 438 Transitioning to release file hosting on PyPI '' .
PEP 438| proposal | In addition to adding discovery information to make explicit multiple repositories easy to use , this PEP also deprecates and removes the implicit multiple repository support which currently functions through directly or indirectly linking offsite via the simple API . | Finally this PEP also proposes deprecating and removing the functionality added by PEP 438 , particularly the additional rel information and the meta tag to indicate the API version . | support | In addition to adding discovery information to make explicit multiple repositories easy to use , this PEP also deprecates and removes the implicit multiple repository support which currently functions through directly or indirectly linking offsite via the simple API .
PEP 438| proposal | txt 1,5 1,5 PEP 470 Title Using Multi Index Support for External to PyPI Package File Hosting Title Using Multi Repository Support for External to PyPI Package File Hosting Version Revision Last Modified Date Author Donald Stufft donald at stufft.io , 9,192 9,212 Type Process Content Type textx rst Created 12 May 2014 Post History 14 May 2014 , 05 Jun 2014 Post History 14 May 2014 , 05 Jun 2014 , 03 Oct 2014 Replaces 438 Abstract This PEP proposes that the official means of having an installer locate and find package files which are hosted externally to PyPI become the use of multi index support instead of the practice of using external links on the simple installer API . | This PEP proposes a mechanism for project authors to register with PyPI an external repository where their project 's downloads can be located . | support | txt 1,5 1,5 PEP 470 Title Using Multi Index Support for External to PyPI Package File Hosting Title Using Multi Repository Support for External to PyPI Package File Hosting Version Revision Last Modified Date Author Donald Stufft donald at stufft.io , 9,192 9,212 Type Process Content Type textx rst Created 12 May 2014 Post History 14 May 2014 , 05 Jun 2014 Post History 14 May 2014 , 05 Jun 2014 , 03 Oct 2014 Replaces 438 Abstract This PEP proposes that the official means of having an installer locate and find package files which are hosted externally to PyPI become the use of multi index support instead of the practice of using external links on the simple installer API .
PEP 438| proposal | In addition to adding discovery information to make explicit multiple repositories easy to use , this PEP also deprecates and removes the implicit multiple repository support which currently functions through directly or indirectly linking offsite via the simple API . | Finally this PEP also proposes deprecating and removing the functionality added by PEP 438 , particularly the additional rel information and the meta tag to indicate the API version . | support | In addition to adding discovery information to make explicit multiple repositories easy to use , this PEP also deprecates and removes the implicit multiple repository support which currently functions through directly or indirectly linking offsite via the simple API .
PEP 438| proposal | In addition to adding discovery information to make explicit multiple repositories easy to use , this PEP also deprecates and removes the implicit multiple repository support which currently functions through directly or indirectly linking off site via the simple API . | Finally this PEP also proposes deprecating and removing the functionality added by PEP 438 , particularly the additional rel information and the meta tag to indicate the API version . | support | In addition to adding discovery information to make explicit multiple repositories easy to use , this PEP also deprecates and removes the implicit multiple repository support which currently functions through directly or indirectly linking off site via the simple API .
PEP 438| proposal | txt 24,7 24,7 addition to adding discovery information to make explicit multiple repositories easy to use , this PEP also deprecates and removes the implicit multiple repository support which currently functions through directly or indirectly linking offsite via the simple API . | Finally this PEP also proposes deprecating linking off site via the simple API . | support | txt 24,7 24,7 addition to adding discovery information to make explicit multiple repositories easy to use , this PEP also deprecates and removes the implicit multiple repository support which currently functions through directly or indirectly linking offsite via the simple API .
PEP 438| proposal | In addition to adding discovery information to make explicit multiple repositories easy to use , this PEP also deprecates and removes the implicit multiple repository support which currently functions through directly or indirectly linking off site via the simple API . | Finally this PEP also proposes deprecating and removing the functionality added by PEP 438 , particularly the additional rel information and the meta tag to indicate the API version . | support | In addition to adding discovery information to make explicit multiple repositories easy to use , this PEP also deprecates and removes the implicit multiple repository support which currently functions through directly or indirectly linking off site via the simple API .
PEP 438| proposal | In addition to adding discovery information to make explicit multiple repositories easy to use , this PEP also deprecates and removes the implicit multiple repository support which currently functions through directly or indirectly linking off site via the simple API . | Finally this PEP also proposes deprecating and removing the functionality added by PEP 438 , particularly the additional rel information and the meta tag to indicate the API version . | support | In addition to adding discovery information to make explicit multiple repositories easy to use , this PEP also deprecates and removes the implicit multiple repository support which currently functions through directly or indirectly linking off site via the simple API .
PEP 458| proposal | That is , this PEP delineates the expected cryptographic key type and signature format included in metadata that MUST be uploaded by developers in order to support end to end verification of distributions . | Rationale PEP 458 1 proposes how PyPI should be integrated with The Update Framework TUF 2 . | support | That is , this PEP delineates the expected cryptographic key type and signature format included in metadata that MUST be uploaded by developers in order to support end to end verification of distributions .
PEP 462| proposal | These supporting repositories could benefit greatly from user the simple pull request '' style workflow made popular by code hosting sites like GitHub and BitBucket . | This PEP proposes introducing a more sophisticated approach to repository management that includes more self service '' features , including support for pull requests . | support | These supporting repositories could benefit greatly from user the simple pull request '' style workflow made popular by code hosting sites like GitHub and BitBucket .
PEP 462| proposal | These supporting repositories could benefit greatly from user the simple pull request '' style workflow made popular by code hosting sites like GitHub and BitBucket . | This PEP proposes introducing a more sophisticated approach to repository management that includes more self service '' features , including support for pull requests . | support | These supporting repositories could benefit greatly from user the simple pull request '' style workflow made popular by code hosting sites like GitHub and BitBucket .
PEP 470| proposal | It turns out the link spidering system is not only overly complicated and relatively hard to both understand and implement , but also largely redundant given the support for multiple indexes in the installation tools . | Since the multiple index support is the more powerful and flexible of the two systems , while also being simpler to implement and easier to understand , PEP 470 now proposes to standardise on that system for PyPI 's external hosting support , with a few additional enhancements to address the discoverability issues that would otherwise arise . | support | It turns out the link spidering system is not only overly complicated and relatively hard to both understand and implement , but also largely redundant given the support for multiple indexes in the installation tools .
PEP 474| proposal | These supporting repositories could benefit greatly from user the simple pull request '' style workflow made popular by code hosting sites like GitHub and BitBucket . | This PEP proposes introducing a more sophisticated approach to repository management that includes more self service '' features , including support for pull requests . | support | These supporting repositories could benefit greatly from user the simple pull request '' style workflow made popular by code hosting sites like GitHub and BitBucket .
PEP 476| accepted | True , but this is a repeat of the PEP 476 discussion . | Something has changed in the meantime PEP 476 was accepted and its code has shipped in an official release . | discussion | True , but this is a repeat of the PEP 476 discussion .
PEP 479| accepted | The intention is not to restart the debate . | PEP is approved , it 's done ... but ... | debate | The intention is not to restart the debate .
PEP 479| proposal | And regardless of how much discussion coroutines generate the fact remains that 99 of generators are used purely for iteration . | I propose to abolish this notion that generators are not iterators and to amend the text of the PEP to unambiguously state that generators are iterators regardless of any changes to the way they propagate StopIteration from the executing frame . | discussion | And regardless of how much discussion coroutines generate the fact remains that 99 of generators are used purely for iteration .
PEP 505| proposal | To properly support logical negation of circuit breakers , a new not protocol method would also be introduced allowing objects to control the result of not obj expressions . | As shown in the basic example above , the PEP further proposes the addition of builtin exists and missing circuit breakers that provide conditional branching based on whether or not an object is None , but return the original object rather than the existence checking wrapper when the expression evaluation short circuits . | support | To properly support logical negation of circuit breakers , a new not protocol method would also be introduced allowing objects to control the result of not obj expressions .
PEP 506| deferred | PEP Withdrawal During discussion of this PEP , Steven D'Aprano proposed the simpler alternative of offering a standardised secrets module that provides one obvious way '' to handle security sensitive tasks like generating default passwords and other tokens . | Steven 's proposal has the desired effect of aligning the easy way to generate such tokens and the right way to generate them , without introducing any compatibility risks for the existing random module API , so this PEP has been deferred in favor of further work on refining Steven 's proposal as PEP 506 . | discussion | PEP Withdrawal During discussion of this PEP , Steven D'Aprano proposed the simpler alternative of offering a standardised secrets module that provides one obvious way '' to handle security sensitive tasks like generating default passwords and other tokens .
PEP 520| proposal | This section needs to be tweaked a bit to defer to PEP 520 for discussion of the 3rd case . | As long as the PEP still proposes phased integration into the standard library and builtins more on that below I 'd suggest being explicit here in the proposal section that the non default metaclasses in the standard library abc . | discussion | This section needs to be tweaked a bit to defer to PEP 520 for discussion of the 3rd case .
PEP 520| updated | Thanks for the feedback . | I 've updated the PEP to resolve the open questions . | feedback | Thanks for the feedback .
PEP 525| proposal | PEP 492 and PEP 525 introduce support for native coroutines and asynchronous generators using async await syntax . | This PEP proposes to add asynchronous versions of list , set , dict comprehensions and generator expressions . | support | PEP 492 and PEP 525 introduce support for native coroutines and asynchronous generators using async await syntax .
PEP 530| proposal | PEP 492 and PEP 525 introduce support for native coroutines and asynchronous generators using async await syntax . | This PEP proposes to add asynchronous versions of list , set , dict comprehensions and generator expressions . | support | PEP 492 and PEP 525 introduce support for native coroutines and asynchronous generators using async await syntax .
PEP 531| proposal | To properly support logical negation of circuit breakers , a new not protocol method would also be introduced allowing objects to control the result of not obj expressions . | As shown in the basic example above , the PEP further proposes the addition of builtin exists and missing circuit breakers that provide conditional branching based on whether or not an object is None , but return the original object rather than the existence checking wrapper when the expression evaluation short circuits . | support | To properly support logical negation of circuit breakers , a new not protocol method would also be introduced allowing objects to control the result of not obj expressions .
PEP 532| proposal | To properly support logical negation of circuit breakers , a new not protocol method would also be introduced allowing objects to control the result of not obj expressions . | As shown in the basic example above , the PEP further proposes the addition of builtin exists and missing circuit breakers that provide conditional branching based on whether or not an object is None , but return the original object rather than the existence checking wrapper when the expression evaluation short circuits . | support | To properly support logical negation of circuit breakers , a new not protocol method would also be introduced allowing objects to control the result of not obj expressions .
PEP 540| proposal | It also requires changes to the internals of how CPython itself works , rather than using existing configuration settings that are supported by Python versions prior to Python 3.7 . | Accordingly , this PEP proposes that independently of the UTF 8 mode proposed in PEP 540 , the way the CPython implementation handles the default C locale be changed such that | support | It also requires changes to the internals of how CPython itself works , rather than using existing configuration settings that are supported by Python versions prior to Python 3.7 .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3000| bdfl_pronouncement | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations . | Guido agreed , indicating that args will continue to be sequences in Python 3.0 . | discussion | I pointed him to a previous discussion Raymond Hettinger and I had about the subject that indicated that for args , sequences were preferable to iterators in a number of situations .
PEP 3103| rejected | txt Mon Feb 26 01 35 06 2007 3,7 3,7 Version Revision Last Modified Date Author guido at python.org Guido van Rossum Status Draft Status Rejected Type Standards Track Python Version 3.0 Content Type textx rst 11,6 11,13 Post History 26 Jun 2006 Rejection Notice A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support . | I therefore reject it . | support | txt Mon Feb 26 01 35 06 2007 3,7 3,7 Version Revision Last Modified Date Author guido at python.org Guido van Rossum Status Draft Status Rejected Type Standards Track Python Version 3.0 Content Type textx rst 11,6 11,13 Post History 26 Jun 2006 Rejection Notice A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support .
PEP 3103| rejected | txt Mon Feb 26 01 35 06 2007 3,7 3,7 Version Revision Last Modified Date Author guido at python.org Guido van Rossum Status Draft Status Rejected Type Standards Track Python Version 3.0 Content Type textx rst 11,6 11,13 Post History 26 Jun 2006 Rejection Notice A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support . | I therefore reject it . | no_popular_support | txt Mon Feb 26 01 35 06 2007 3,7 3,7 Version Revision Last Modified Date Author guido at python.org Guido van Rossum Status Draft Status Rejected Type Standards Track Python Version 3.0 Content Type textx rst 11,6 11,13 Post History 26 Jun 2006 Rejection Notice A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support .
PEP 3103| rejected | https www.python.orgdevpepspep 3103 A SwitchCase Statement '' by Guido van Rossum , Rejection Notice A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support . | I therefore reject it '' . | support | https www.python.orgdevpepspep 3103 A SwitchCase Statement '' by Guido van Rossum , Rejection Notice A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support .
PEP 3103| rejected | https www.python.orgdevpepspep 3103 A SwitchCase Statement '' by Guido van Rossum , Rejection Notice A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support . | I therefore reject it '' . | no_popular_support | https www.python.orgdevpepspep 3103 A SwitchCase Statement '' by Guido van Rossum , Rejection Notice A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support .
PEP 3103| bdfl_pronouncement | There the poll indicated no specific proposal had a majority , so for each specific proposal one could say it did n't have popular support , but the majority still prefered to have a conditional expression . | But at that time Guido used that poll as an indication there was not enough support . | support | There the poll indicated no specific proposal had a majority , so for each specific proposal one could say it did n't have popular support , but the majority still prefered to have a conditional expression .
PEP 3103| bdfl_pronouncement | There the poll indicated no specific proposal had a majority , so for each specific proposal one could say it did n't have popular support , but the majority still prefered to have a conditional expression . | But at that time Guido used that poll as an indication there was not enough support . | majority | There the poll indicated no specific proposal had a majority , so for each specific proposal one could say it did n't have popular support , but the majority still prefered to have a conditional expression .
PEP 3106| proposal | The view based APIs that were added to Python 2.7 do n't actually help with the transition process , as they do n't exist in Python 3 and hence are n't part of the common subset of Python 2 and Python 3 , and also are n't supported by most Python 2 mappings including the collection ABCs . | This PEP proposes to just eliminate all that annoyance by making the iterator based APIs work again in Python 3.5 . | support | The view based APIs that were added to Python 2.7 do n't actually help with the transition process , as they do n't exist in Python 3 and hence are n't part of the common subset of Python 2 and Python 3 , and also are n't supported by most Python 2 mappings including the collection ABCs .
PEP 3106| proposal | By contrast , users that actually want the increased efficiency will have faced a three phase migration process by the time they have fully migrated to Python 3 original migration to the iterator based APIs after they were added in Python 2.2 migration to a separate function based API in order to run in the common subset of Python 2 and 3 eventual migration back to unprefixed method APIs when eventually dropping Python 2.7 support The view based APIs that were added to Python 2.7 do n't actually help with the transition process , as they do n't exist in Python 3 and hence are n't part of the common subset of Python 2 and Python 3 , and also are n't supported by most Python 2 mappings including the collection ABCs . | This PEP proposes to just eliminate all that annoyance by making the iterator based APIs work again in Python 3.5 . | support | By contrast , users that actually want the increased efficiency will have faced a three phase migration process by the time they have fully migrated to Python 3 original migration to the iterator based APIs after they were added in Python 2.2 migration to a separate function based API in order to run in the common subset of Python 2 and 3 eventual migration back to unprefixed method APIs when eventually dropping Python 2.7 support The view based APIs that were added to Python 2.7 do n't actually help with the transition process , as they do n't exist in Python 3 and hence are n't part of the common subset of Python 2 and Python 3 , and also are n't supported by most Python 2 mappings including the collection ABCs .
PEP 3107| proposal | Jython could implement this use of function annotations without python supporting it , but that would make the code incompatible between python and Jython , which would be highly unfortunate . | Therefore i propose that python adds support for function annotations in version 2.6 via from future import function annotations This would make the change as compatible as for example decorators or the with statement . | support | Jython could implement this use of function annotations without python supporting it , but that would make the code incompatible between python and Jython , which would be highly unfortunate .
PEP 3115| proposal | This lead to a major discussion about PEP 422 , where I discussed some possible changes to PEP 422 . | Nick proposed I write a competing PEP , so that the community may decide . | discussion | This lead to a major discussion about PEP 422 , where I discussed some possible changes to PEP 422 .
PEP 3122| accepted | I must say , this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name '' main '' blocks . | Brett 's rejected PEP 3122 and my own accepted PEP 366 were both a direct result of the interpreter lying about the real value of name . | discussion | I must say , this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name '' main '' blocks .
PEP 3122| accepted | I must say , this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name '' main '' blocks . | Brett 's rejected PEP 3122 and my own accepted PEP 366 were both a direct result of the interpreter lying about the real value of name . | discussion | I must say , this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name '' main '' blocks .
PEP 3135| proposal | This PEP proposes to instead support a wide range of customisation scenarios through a new namespace parameter in the class header , and a new init class hook in the class body . | This PEP proposes a mechanism that will once again allow the body of a class definition to more directly influence the way a class is created albeit in a more constrained fashion , as well as replacing some current uses of metaclasses with a simpler , easier to understand alternative . | support | This PEP proposes to instead support a wide range of customisation scenarios through a new namespace parameter in the class header , and a new init class hook in the class body .
PEP 3135| proposal | This lead to a major discussion about PEP 422 , where I discussed some possible changes to PEP 422 . | Nick proposed I write a competing PEP , so that the community may decide . | discussion | This lead to a major discussion about PEP 422 , where I discussed some possible changes to PEP 422 .
PEP 308| accepted | If you want to summarise them as yesnoundecided , then set required majority levels , but to some extent that 's just another chance for people to complain . | To some extent , anything else does n't match the oficial PEP process where the PEP is modified to match the proposed solution , and then the PEP is accepted or rejected once it 's finalized and ready for a decision . | majority | If you want to summarise them as yesnoundecided , then set required majority levels , but to some extent that 's just another chance for people to complain .
PEP 308| accepted | If you want to summarise them as yesnoundecided , then set required majority levels , but to some extent that 's just another chance for people to complain . | To some extent , anything else does n't match the oficial PEP process where the PEP is modified to match the proposed solution , and then the PEP is accepted or rejected once it 's finalized and ready for a decision . | majority | If you want to summarise them as yesnoundecided , then set required majority levels , but to some extent that 's just another chance for people to complain .
PEP 308| rejected | If you want to summarise them as yesnoundecided , then set required majority levels , but to some extent that 's just another chance for people to complain . | To some extent , anything else does n't match the oficial PEP process where the PEP is modified to match the proposed solution , and then the PEP is accepted or rejected once it 's finalized and ready for a decision . | majority | If you want to summarise them as yesnoundecided , then set required majority levels , but to some extent that 's just another chance for people to complain .
PEP 308| rejected | If you want to summarise them as yesnoundecided , then set required majority levels , but to some extent that 's just another chance for people to complain . | To some extent , anything else does n't match the oficial PEP process where the PEP is modified to match the proposed solution , and then the PEP is accepted or rejected once it 's finalized and ready for a decision . | majority | If you want to summarise them as yesnoundecided , then set required majority levels , but to some extent that 's just another chance for people to complain .
PEP 308| vote | Status Rejected Type Standards Track Content Type textplain 31,34 31,41 discussion , and a discussion of short circuit behavior . | Following the discussion , a vote was held . | discussion | Status Rejected Type Standards Track Content Type textplain 31,34 31,41 discussion , and a discussion of short circuit behavior .
PEP 308| vote | Status Rejected Type Standards Track Content Type textplain 31,34 31,41 discussion , and a discussion of short circuit behavior . | Following the discussion , a vote was held . | discussion | Status Rejected Type Standards Track Content Type textplain 31,34 31,41 discussion , and a discussion of short circuit behavior .
PEP 308| vote_after_discussion | Status Rejected Type Standards Track Content Type textplain 31,34 31,41 discussion , and a discussion of short circuit behavior . | Following the discussion , a vote was held . | discussion | Status Rejected Type Standards Track Content Type textplain 31,34 31,41 discussion , and a discussion of short circuit behavior .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | support | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | support | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | support | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | support | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| bdfl_pronouncement | 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax .
PEP 308| bdfl_pronouncement | 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax .
PEP 308| updated | 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax .
PEP 308| bdfl_pronouncement | txt 30 Sep 2005 13 41 34 0000 1.22 9,6 9,7 Created 7 Feb 2003 Post History 7 Feb 2003 , 11 Feb 2003 Adding a conditional expression On 9292005 , Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | txt 30 Sep 2005 13 41 34 0000 1.22 9,6 9,7 Created 7 Feb 2003 Post History 7 Feb 2003 , 11 Feb 2003 Adding a conditional expression On 9292005 , Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax .
PEP 308| bdfl_pronouncement | txt 30 Sep 2005 13 41 34 0000 1.22 9,6 9,7 Created 7 Feb 2003 Post History 7 Feb 2003 , 11 Feb 2003 Adding a conditional expression On 9292005 , Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | txt 30 Sep 2005 13 41 34 0000 1.22 9,6 9,7 Created 7 Feb 2003 Post History 7 Feb 2003 , 11 Feb 2003 Adding a conditional expression On 9292005 , Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax .
PEP 308| updated | txt 30 Sep 2005 13 41 34 0000 1.22 9,6 9,7 Created 7 Feb 2003 Post History 7 Feb 2003 , 11 Feb 2003 Adding a conditional expression On 9292005 , Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | txt 30 Sep 2005 13 41 34 0000 1.22 9,6 9,7 Created 7 Feb 2003 Post History 7 Feb 2003 , 11 Feb 2003 Adding a conditional expression On 9292005 , Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax .
PEP 308| accepted | If you want to summarise them as yesnoundecided , then set required majority levels , but to some extent that 's just another chance for people to complain . | To some extent , anything else does n't match the oficial PEP process where the PEP is modified to match the proposed solution , and then the PEP is accepted or rejected once it 's finalized and ready for a decision . | majority | If you want to summarise them as yesnoundecided , then set required majority levels , but to some extent that 's just another chance for people to complain .
PEP 308| accepted | If you want to summarise them as yesnoundecided , then set required majority levels , but to some extent that 's just another chance for people to complain . | To some extent , anything else does n't match the oficial PEP process where the PEP is modified to match the proposed solution , and then the PEP is accepted or rejected once it 's finalized and ready for a decision . | majority | If you want to summarise them as yesnoundecided , then set required majority levels , but to some extent that 's just another chance for people to complain .
PEP 308| rejected | If you want to summarise them as yesnoundecided , then set required majority levels , but to some extent that 's just another chance for people to complain . | To some extent , anything else does n't match the oficial PEP process where the PEP is modified to match the proposed solution , and then the PEP is accepted or rejected once it 's finalized and ready for a decision . | majority | If you want to summarise them as yesnoundecided , then set required majority levels , but to some extent that 's just another chance for people to complain .
PEP 308| rejected | If you want to summarise them as yesnoundecided , then set required majority levels , but to some extent that 's just another chance for people to complain . | To some extent , anything else does n't match the oficial PEP process where the PEP is modified to match the proposed solution , and then the PEP is accepted or rejected once it 's finalized and ready for a decision . | majority | If you want to summarise them as yesnoundecided , then set required majority levels , but to some extent that 's just another chance for people to complain .
PEP 308| accepted | If you want to summarise them as yes no undecided , then set required majority levels , but to some extent that 's just another chance for people to complain . | To some extent , anything else does n't match the oficial PEP process where the PEP is modified to match the proposed solution , and then the PEP is accepted or rejected once it 's finalised and ready for a decision . | majority | If you want to summarise them as yes no undecided , then set required majority levels , but to some extent that 's just another chance for people to complain .
PEP 308| vote | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior . | Following the discussion , a vote was held . | discussion | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior .
PEP 308| vote | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior . | Following the discussion , a vote was held . | discussion | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior .
PEP 308| vote_after_discussion | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior . | Following the discussion , a vote was held . | discussion | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | support | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | support | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | support | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | support | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| bdfl_pronouncement | LSB 2 RSB Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | LSB 2 RSB Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax .
PEP 308| bdfl_pronouncement | LSB 2 RSB Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | LSB 2 RSB Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax .
PEP 308| updated | LSB 2 RSB Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | LSB 2 RSB Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax .
PEP 308| bdfl_pronouncement | txt , v retrieving revision 1.21 retrieving revision 1.22 diff u d r1 .21 r1 .22 pep 0308.txt 30 Sep 2005 01 51 58 0000 1.21 pep 0308.txt 30 Sep 2005 13 41 34 0000 1.22 9,6 9,7 Created 7 Feb 2003 Post History 7 Feb 2003 , 11 Feb 2003 Adding a conditional expression On 9 29 2005 , Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | txt , v retrieving revision 1.21 retrieving revision 1.22 diff u d r1 .21 r1 .22 pep 0308.txt 30 Sep 2005 01 51 58 0000 1.21 pep 0308.txt 30 Sep 2005 13 41 34 0000 1.22 9,6 9,7 Created 7 Feb 2003 Post History 7 Feb 2003 , 11 Feb 2003 Adding a conditional expression On 9 29 2005 , Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax .
PEP 308| bdfl_pronouncement | txt , v retrieving revision 1.21 retrieving revision 1.22 diff u d r1 .21 r1 .22 pep 0308.txt 30 Sep 2005 01 51 58 0000 1.21 pep 0308.txt 30 Sep 2005 13 41 34 0000 1.22 9,6 9,7 Created 7 Feb 2003 Post History 7 Feb 2003 , 11 Feb 2003 Adding a conditional expression On 9 29 2005 , Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | txt , v retrieving revision 1.21 retrieving revision 1.22 diff u d r1 .21 r1 .22 pep 0308.txt 30 Sep 2005 01 51 58 0000 1.21 pep 0308.txt 30 Sep 2005 13 41 34 0000 1.22 9,6 9,7 Created 7 Feb 2003 Post History 7 Feb 2003 , 11 Feb 2003 Adding a conditional expression On 9 29 2005 , Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax .
PEP 308| updated | txt , v retrieving revision 1.21 retrieving revision 1.22 diff u d r1 .21 r1 .22 pep 0308.txt 30 Sep 2005 01 51 58 0000 1.21 pep 0308.txt 30 Sep 2005 13 41 34 0000 1.22 9,6 9,7 Created 7 Feb 2003 Post History 7 Feb 2003 , 11 Feb 2003 Adding a conditional expression On 9 29 2005 , Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | txt , v retrieving revision 1.21 retrieving revision 1.22 diff u d r1 .21 r1 .22 pep 0308.txt 30 Sep 2005 01 51 58 0000 1.21 pep 0308.txt 30 Sep 2005 13 41 34 0000 1.22 9,6 9,7 Created 7 Feb 2003 Post History 7 Feb 2003 , 11 Feb 2003 Adding a conditional expression On 9 29 2005 , Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax .
PEP 308| vote | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior . | Following the discussion , a vote was held . | discussion | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior .
PEP 308| vote | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior . | Following the discussion , a vote was held . | discussion | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior .
PEP 308| vote_after_discussion | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior . | Following the discussion , a vote was held . | discussion | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | support | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | support | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | support | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | support | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| bdfl_pronouncement | LSB 2 RSB Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | LSB 2 RSB Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax .
PEP 308| bdfl_pronouncement | LSB 2 RSB Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | LSB 2 RSB Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax .
PEP 308| updated | LSB 2 RSB Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | LSB 2 RSB Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax .
PEP 308| bdfl_pronouncement | txt , v retrieving revision 1.21 retrieving revision 1.22 diff u d r1 .21 r1 .22 pep 0308.txt 30 Sep 2005 01 51 58 0000 1.21 pep 0308.txt 30 Sep 2005 13 41 34 0000 1.22 9,6 9,7 Created 7 Feb 2003 Post History 7 Feb 2003 , 11 Feb 2003 Adding a conditional expression On 9 29 2005 , Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | txt , v retrieving revision 1.21 retrieving revision 1.22 diff u d r1 .21 r1 .22 pep 0308.txt 30 Sep 2005 01 51 58 0000 1.21 pep 0308.txt 30 Sep 2005 13 41 34 0000 1.22 9,6 9,7 Created 7 Feb 2003 Post History 7 Feb 2003 , 11 Feb 2003 Adding a conditional expression On 9 29 2005 , Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax .
PEP 308| bdfl_pronouncement | txt , v retrieving revision 1.21 retrieving revision 1.22 diff u d r1 .21 r1 .22 pep 0308.txt 30 Sep 2005 01 51 58 0000 1.21 pep 0308.txt 30 Sep 2005 13 41 34 0000 1.22 9,6 9,7 Created 7 Feb 2003 Post History 7 Feb 2003 , 11 Feb 2003 Adding a conditional expression On 9 29 2005 , Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | txt , v retrieving revision 1.21 retrieving revision 1.22 diff u d r1 .21 r1 .22 pep 0308.txt 30 Sep 2005 01 51 58 0000 1.21 pep 0308.txt 30 Sep 2005 13 41 34 0000 1.22 9,6 9,7 Created 7 Feb 2003 Post History 7 Feb 2003 , 11 Feb 2003 Adding a conditional expression On 9 29 2005 , Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax .
PEP 308| updated | txt , v retrieving revision 1.21 retrieving revision 1.22 diff u d r1 .21 r1 .22 pep 0308.txt 30 Sep 2005 01 51 58 0000 1.21 pep 0308.txt 30 Sep 2005 13 41 34 0000 1.22 9,6 9,7 Created 7 Feb 2003 Post History 7 Feb 2003 , 11 Feb 2003 Adding a conditional expression On 9 29 2005 , Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | txt , v retrieving revision 1.21 retrieving revision 1.22 diff u d r1 .21 r1 .22 pep 0308.txt 30 Sep 2005 01 51 58 0000 1.21 pep 0308.txt 30 Sep 2005 13 41 34 0000 1.22 9,6 9,7 Created 7 Feb 2003 Post History 7 Feb 2003 , 11 Feb 2003 Adding a conditional expression On 9 29 2005 , Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax .
PEP 308| vote | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior . | Following the discussion , a vote was held . | discussion | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior .
PEP 308| vote | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior . | Following the discussion , a vote was held . | discussion | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior .
PEP 308| vote_after_discussion | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior . | Following the discussion , a vote was held . | discussion | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | support | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | support | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | support | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | support | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| bdfl_pronouncement | LSB 2 RSB Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | LSB 2 RSB Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax .
PEP 308| bdfl_pronouncement | LSB 2 RSB Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | LSB 2 RSB Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax .
PEP 308| updated | LSB 2 RSB Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | LSB 2 RSB Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax .
PEP 308| bdfl_pronouncement | txt , v retrieving revision 1.21 retrieving revision 1.22 diff u d r1 .21 r1 .22 pep 0308.txt 30 Sep 2005 01 51 58 0000 1.21 pep 0308.txt 30 Sep 2005 13 41 34 0000 1.22 9,6 9,7 Created 7 Feb 2003 Post History 7 Feb 2003 , 11 Feb 2003 Adding a conditional expression On 9 29 2005 , Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | txt , v retrieving revision 1.21 retrieving revision 1.22 diff u d r1 .21 r1 .22 pep 0308.txt 30 Sep 2005 01 51 58 0000 1.21 pep 0308.txt 30 Sep 2005 13 41 34 0000 1.22 9,6 9,7 Created 7 Feb 2003 Post History 7 Feb 2003 , 11 Feb 2003 Adding a conditional expression On 9 29 2005 , Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax .
PEP 308| bdfl_pronouncement | txt , v retrieving revision 1.21 retrieving revision 1.22 diff u d r1 .21 r1 .22 pep 0308.txt 30 Sep 2005 01 51 58 0000 1.21 pep 0308.txt 30 Sep 2005 13 41 34 0000 1.22 9,6 9,7 Created 7 Feb 2003 Post History 7 Feb 2003 , 11 Feb 2003 Adding a conditional expression On 9 29 2005 , Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | txt , v retrieving revision 1.21 retrieving revision 1.22 diff u d r1 .21 r1 .22 pep 0308.txt 30 Sep 2005 01 51 58 0000 1.21 pep 0308.txt 30 Sep 2005 13 41 34 0000 1.22 9,6 9,7 Created 7 Feb 2003 Post History 7 Feb 2003 , 11 Feb 2003 Adding a conditional expression On 9 29 2005 , Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax .
PEP 308| updated | txt , v retrieving revision 1.21 retrieving revision 1.22 diff u d r1 .21 r1 .22 pep 0308.txt 30 Sep 2005 01 51 58 0000 1.21 pep 0308.txt 30 Sep 2005 13 41 34 0000 1.22 9,6 9,7 Created 7 Feb 2003 Post History 7 Feb 2003 , 11 Feb 2003 Adding a conditional expression On 9 29 2005 , Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | txt , v retrieving revision 1.21 retrieving revision 1.22 diff u d r1 .21 r1 .22 pep 0308.txt 30 Sep 2005 01 51 58 0000 1.21 pep 0308.txt 30 Sep 2005 13 41 34 0000 1.22 9,6 9,7 Created 7 Feb 2003 Post History 7 Feb 2003 , 11 Feb 2003 Adding a conditional expression On 9 29 2005 , Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax .
