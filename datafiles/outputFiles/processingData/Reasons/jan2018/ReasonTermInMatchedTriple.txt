PEP 318 | proposal | discussion | My humble hope is that this document helps to improve the quality of the ongoing discussion . | Knowing we want something ' , but not spelling it out . | 2 .
PEP 322 | bdfl_pronouncement_accepted | bdfl pronouncement | Status Accepted Type Standards Track Content Type textx rst 79,82 79,89 A C implementation and unit tests are at http www.python.orgsf834422 BDFL Pronouncement This PEP has been conditionally accepted for Py2 .4 . | Status Draft Type Standards Track Content Type textx rst 4,8 Last Modified Date Author Raymond Hettinger python rcn.com ! | 
PEP 414 | bdfl_pronouncement_accepted | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | txt 3,10 3,11 Version Revision Last Modified Date Author Armin Ronacher armin.ronacher at active 4.com Status Draft Status Accepted Type Standards Track Content Type textx rst Created 15 Feb 2012 Post History 28 Feb 2012 Abstract 18,6 19,12 without the need for an explicit 2to3 run . | 
PEP 414 | bdfl_pronouncement_accepted | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | reduce the volume of changes needed when porting Unicode aware Python 2 applications to Python 3 . | 
PEP 239 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | This PEP suggests no literals for rational numbers that is left for another PEP 1 . | 
PEP 239 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 21 38 02 0000 1.8 3,7 3,7 Version Revision Author Christopher A. Craig python pep at ccraig.org , Moshe Zadka pep at zadka.site.co.il Status Draft Status Rejected Type Standards Track Created 11 Mar 2001 Python Version 2.2 17,6 17,13 rational in Python , and modifying non integer division to return it . | 
PEP 240 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | This PEP suggests no literals for rational numbers that is left for another PEP 1 . | 
PEP 240 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 21 38 02 0000 1.8 3,7 3,7 Version Revision Author Christopher A. Craig python pep at ccraig.org , Moshe Zadka pep at zadka.site.co.il Status Draft Status Rejected Type Standards Track Created 11 Mar 2001 Python Version 2.2 17,6 17,13 rational in Python , and modifying non integer division to return it . | 
PEP 245 | bdfl_pronouncement_rejected | bdfl pronouncement | PEP 245 was rejected by BDFL pronouncement . | It then depends on the details . | This is how things are ultimately decided   by BDFL pronouncement .
PEP 276 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP was rejected on 17 June 2005 with a note to python dev . | Such an iterator would simplify the coding of certain for loops in Python . | 
PEP 313 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 17 33 18 0000 1.5 3,7 3,7 Version Revision Last Modified Date Author Mike Meyer mwm at mired.org Status Draft Status Rejected Type Standards Track Content Type textplain Created 01 Apr 2003 19,6 19,17 converts the integer to a string that is the Roman numeral literal equivalent to the integer . | 
PEP 336 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None . | 
PEP 2 | superseded | superseded | txt 2,13 2,18 Title Procedure for Adding New Modules Version Revision Last Modified Date Author faassen at infrae.com Martijn Faassen Status Active Author Martijn Faassen faassen at infrae.com Status Final Type Process Created 07 Jul 2001 Post History 07 Jul 2001 , 09 Mar 2002 PEP Replacement This PEP has been superseded by the updated material in the Python Developer 's Guide 1 . | txt bpep 0002 . | 
PEP 287 | superseded | superseded | It has been superseded by PEP 287 . | txt PEP 287 Title reStructuredText Standard Docstring Format Version Revision 1.1 Last Modified Date 20020401 15 57 27 Author goodger users.sourceforge.net David Goodger Discussions To doc sig python.org Status Draft Type Informational Created 25 Mar 2002 Post History Replaced By PEP 287 Notice This PEP is rejected by the author . | Abstract
PEP 344 | superseded | superseded | PEP 344 Exception Chaining and Embedded Tracebacks superseded http legacy.python.orgdevpepspep 0344 | PEP 3134 Exception Chaining and Embedded Tracebacks final http legacy.python.orgdevpepspep 3134 | 
PEP 344 | superseded | superseded | PEP 344 Exception Chaining and Embedded Tracebacks superseded http legacy.python.orgdevpepspep 0344 | PEP 3134 Exception Chaining and Embedded Tracebacks final http legacy.python.orgdevpepspep 3134 | 
PEP 354 | superseded | superseded | Todo Mark PEP 354 superseded by '' this one New package name within stdlib from enum import make creates a not very descriptive make '' name . | http mail.python.orgpipermailpython ideas2013 February019373.html Copyright This document has been placed in the public domain . | 
PEP 354 | superseded | superseded | Mark PEP 354 superseded by '' this one , if accepted | Todo | 
PEP 354 | superseded | superseded | 8 http pythonhosted.orgflufl.enum Copyright 608,7 556,8 Todo Mark PEP 354 superseded by '' this one , if accepted Mark PEP 354 superseded by '' this one , if accepted The last revision where flufl . | 7 http mail.python.orgpipermailpython dev2013 May125859.html . . | 
PEP 354 | superseded | superseded | Mark PEP 354 superseded by '' this one , if accepted The last revision where flufl . | Todo | 
PEP 354 | superseded | superseded | Marked PEP 354 as superseded by PEP 435 . | http hg.python.orgpepsrevbd3de993d6e2 changeset 4881 bd3de993d6e2 user Eli Bendersky eliben at gmail.com date Fri May 10 05 45 20 2013 0700 summary | files   pep 0354 .
PEP 354 | superseded | superseded | Todo Mark PEP 354 superseded by '' this one , if accepted In docs describe the detailed extension API i.e. new . | 9 http docs.python.org3howtodescriptor.html Copyright This document has been placed in the public domain . | 
PEP 354 | superseded | superseded | Todo Mark PEP 354 superseded by '' this one , if accepted In docs describe the detailed extension API i.e. new . | 9 http docs.python.org3howtodescriptor.html Copyright This document has been placed in the public domain . | 
PEP 409 | superseded | superseded | Appendix PEPs PEP 3134 Exception Chaining and Embedded Tracebacks https www.python.org dev peps pep 3134 Python 3.0 new context and cause attributes for exceptions PEP 415 Implement context suppression with exception attributes https www.python.org dev peps pep 0415 Python 3.3 raise exc from None PEP 409 Suppressing exception context https www.python.org dev peps pep 0409 superseded by the PEP 415 Python C API The header file Includepyerror . | The generic PyErr ChainExceptions exc type , exc value , exc tb should be used to chain exceptions with these helper functions . | 
PEP 409 | superseded | superseded | PEP 3134 Exception Chaining and Embedded Tracebacks https www.python.org dev peps pep 3134 Python 3.0 new context and cause attributes for exceptions PEP 415 Implement context suppression with exception attributes https www.python.org dev peps pep 0415 Python 3.3 raise exc from None PEP 409 Suppressing exception context https www.python.org dev peps pep 0409 superseded by the PEP 415 | PEPs | 
PEP 409 | superseded | superseded | Appendix PEPs PEP 3134 Exception Chaining and Embedded Tracebacks https www.python.org dev peps pep 3134 Python 3.0 new context and cause attributes for exceptions PEP 415 Implement context suppression with exception attributes https www.python.org dev peps pep 0415 Python 3.3 raise exc from None PEP 409 Suppressing exception context https www.python.org dev peps pep 0409 superseded by the PEP 415 Python C API The header file Includepyerror . | The generic PyErr ChainExceptions exc type , exc value , exc tb should be used to chain exceptions with these helper functions . | 
PEP 409 | superseded | superseded | PEP 3134 Exception Chaining and Embedded Tracebacks https www.python.org dev peps pep 3134 Python 3.0 new context and cause attributes for exceptions PEP 415 Implement context suppression with exception attributes https www.python.org dev peps pep 0415 Python 3.3 raise exc from None PEP 409 Suppressing exception context https www.python.org dev peps pep 0409 superseded by the PEP 415 | PEPs | 
PEP 415 | superseded | superseded | Appendix PEPs PEP 3134 Exception Chaining and Embedded Tracebacks https www.python.org dev peps pep 3134 Python 3.0 new context and cause attributes for exceptions PEP 415 Implement context suppression with exception attributes https www.python.org dev peps pep 0415 Python 3.3 raise exc from None PEP 409 Suppressing exception context https www.python.org dev peps pep 0409 superseded by the PEP 415 Python C API The header file Includepyerror . | The generic PyErr ChainExceptions exc type , exc value , exc tb should be used to chain exceptions with these helper functions . | 
PEP 415 | superseded | superseded | PEP 3134 Exception Chaining and Embedded Tracebacks https www.python.org dev peps pep 3134 Python 3.0 new context and cause attributes for exceptions PEP 415 Implement context suppression with exception attributes https www.python.org dev peps pep 0415 Python 3.3 raise exc from None PEP 409 Suppressing exception context https www.python.org dev peps pep 0409 superseded by the PEP 415 | PEPs | 
PEP 415 | superseded | superseded | Appendix PEPs PEP 3134 Exception Chaining and Embedded Tracebacks https www.python.org dev peps pep 3134 Python 3.0 new context and cause attributes for exceptions PEP 415 Implement context suppression with exception attributes https www.python.org dev peps pep 0415 Python 3.3 raise exc from None PEP 409 Suppressing exception context https www.python.org dev peps pep 0409 superseded by the PEP 415 Python C API The header file Includepyerror . | The generic PyErr ChainExceptions exc type , exc value , exc tb should be used to chain exceptions with these helper functions . | 
PEP 415 | superseded | superseded | PEP 3134 Exception Chaining and Embedded Tracebacks https www.python.org dev peps pep 3134 Python 3.0 new context and cause attributes for exceptions PEP 415 Implement context suppression with exception attributes https www.python.org dev peps pep 0415 Python 3.3 raise exc from None PEP 409 Suppressing exception context https www.python.org dev peps pep 0409 superseded by the PEP 415 | PEPs | 
PEP 524 | superseded | superseded | This idea is the PEP 522 which was superseded by the PEP 524 accepted in Python 3.6 which proposed to make os . | STINNER Victor added the comment | 
PEP 255 | updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form . | The bracketed yield syntax left something to be desired the performance gains had not been demonstrated and the range of use cases had not been shown . | The impetus for the discussion was an innovative proposal from Peter Norvig .
PEP 255 | updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form . | The bracketed yield syntax left something to be desired the performance gains had not been demonstrated and the range of use cases had not been shown . | The impetus for the discussion was an innovative proposal from Peter Norvig    3  )    .
PEP 289 | updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form . | The bracketed yield syntax left something to be desired the performance gains had not been demonstrated and the range of use cases had not been shown . | The impetus for the discussion was an innovative proposal from Peter Norvig .
PEP 289 | updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form . | The bracketed yield syntax left something to be desired the performance gains had not been demonstrated and the range of use cases had not been shown . | The impetus for the discussion was an innovative proposal from Peter Norvig    3  )    .
PEP 289 | updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form . | The bracketed yield syntax left something to be desired the performance gains had not been demonstrated and the range of use cases had not been shown . | The impetus for the discussion was an innovative proposal from Peter Norvig    3  )    .
PEP 322 | updated | feedback | Based on your extensive feedback , PEP 322 has been completely revised . | pep 322 reverse iteration revised , please comment . | The response was strongly positive , but almost everyone preferred having a function instead of multiple object methods .
PEP 308 | vote_result | vote result | As long as , as I 've said before , the full results of the everyone 's vote is disclosed at the close of voting this is n't a secret ballot , after all , but people should n't see each other 's votes while the vote is in progress , I do n't see a big problem , so long as everybody agrees on the process . | I do n't think such an circuitous procedure is necessary at all if anything , it is just going to turn off more voters who wo n't think the extra work is worth the effort . | 
PEP 308 | vote_after_discussion | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type textplain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | vote_after_discussion | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 3103 | poll_result_no_support | support | https www.python.orgdevpepspep 3103 A SwitchCase Statement '' by Guido van Rossum , Rejection Notice A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support . | 4602a32c 5109 47dd 95bb b9723738f07f googlegroups.com 55E8E09A.3080309 gmail.com | 
PEP 3103 | poll_result_no_support | no popular support | https www.python.orgdevpepspep 3103 A SwitchCase Statement '' by Guido van Rossum , Rejection Notice A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support . | 4602a32c 5109 47dd 95bb b9723738f07f googlegroups.com 55E8E09A.3080309 gmail.com | 
PEP 3103 | poll_result | majority | There the poll indicated no specific proposal had a majority , so for each specific proposal one could say it did n't have popular support , but the majority still prefered to have a conditional expression . | Op 04 09 15 om 02 47 schreef Mark Lawrence Were those polls , like the poll he once did for the condtional expression ? | But at that time Guido used that poll as an indication there was not enough support .
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | proposal | support | No changes to finderloader interfaces Rather than attempting to update the PEP 302 APIs to accept additional state , this PEP proposes that ImportEngine support the content management protocol similar to the context substitution mechanisms in the decimal module . | from engine sysengine to start with a copy of the process global import state . | 
PEP 2 | proposal | support | No changes to finderloader interfaces Rather than attempting to update the PEP 302 APIs to accept additional state , this PEP proposes that ImportEngine support the content management protocol similar to the context substitution mechanisms in the decimal module . | from engine sysengine to start with a copy of the process global import state . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 2 | proposal | support | No changes to finderloader interfaces Rather than attempting to update the PEP 302 APIs to accept additional state , this PEP proposes that ImportEngine support the content management protocol similar to the context substitution mechanisms in the decimal module . | from engine sysengine to start with a copy of the process global import state . | 
PEP 2 | proposal | support | No changes to finderloader interfaces Rather than attempting to update the PEP 302 APIs to accept additional state , this PEP proposes that ImportEngine support the content management protocol similar to the context substitution mechanisms in the decimal module . | from engine sysengine to start with a copy of the process global import state . | 
PEP 8 | proposal | consensus | This PEP proposes a generic Docstring Processing System DPS framework , which separates out the components program and conceptual , enabling the resolution of individual issues either through consensus one solution or through divergence many . | The issues surrounding docstring processing have been contentious and difficult to resolve . | 
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 8 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 9 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 9 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 9 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 9 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 9 | null | discussion | PEP pep number Title pep title Version cvs version string Last Modified cvs date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Final Replaced Type Informational Standards Track Requires pep numbers Created date created on, in dd mmm yyyy format Python Version version number Post History dates of postings to python list and python dev Replaces pep number Replaced By pep number | All other headers are required . | 
PEP 9 | null | discussion | PEP pep number Title pep title Version cvs version string Last Modified cvs date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Final Replaced Type Informational Standards Track Requires pep numbers Created date created on, in dd mmm yyyy format Python Version version number Post History dates of postings to python list and python dev Replaces pep number Replaced By pep number | All other headers are required . | 
PEP 9 | null | discussion | PEP pep number Title pep title Version cvs version string Last Modified cvs date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Final Replaced Type Informational Standards Track Requires pep numbers Created date created on, in dd mmm yyyy format Python Version version number Post History dates of postings to python list and python dev Replaces pep number Replaced By pep number | All other headers are required . | 
PEP 9 | null | discussion | PEP pep number Title pep title Version cvs version string Last Modified cvs date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Final Replaced Type Informational Standards Track Requires pep numbers Created date created on, in dd mmm yyyy format Python Version version number Post History dates of postings to python list and python dev Replaces pep number Replaced By pep number | All other headers are required . | 
PEP 9 | null | discussion | PEP pep number Title pep title Version cvs version string Last Modified cvs date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Final Replaced Type Informational Standards Track Requires pep numbers Created date created on, in dd mmm yyyy format Python Version version number Post History dates of postings to python list and python dev Replaces pep number Replaced By pep number | All other headers are required . | 
PEP 9 | null | discussion | PEP pep number Title pep title Version cvs version string Last Modified cvs date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Final Replaced Type Informational Standards Track Requires pep numbers Created date created on, in dd mmm yyyy format Python Version version number Post History dates of postings to python list and python dev Replaces pep number Replaced By pep number | All other headers are required . | 
PEP 9 | null | discussion | PEP pep number Title pep title Version cvs version string Last Modified cvs date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Final Replaced Type Informational Standards Track Requires pep numbers Created date created on, in dd mmm yyyy format Python Version version number Post History dates of postings to python list and python dev Replaces pep number Replaced By pep number | All other headers are required . | 
PEP 9 | null | discussion | PEP pep number Title pep title Version cvs version string Last Modified cvs date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Final Replaced Type Informational Standards Track Requires pep numbers Created date created on, in dd mmm yyyy format Python Version version number Post History dates of postings to python list and python dev Replaces pep number Replaced By pep number | All other headers are required . | 
PEP 9 | null | discussion | PEP pep number Title pep title Version cvs version string Last Modified cvs date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Final Replaced Type Informational Standards Track Requires pep numbers Created date created on, in dd mmm yyyy format Python Version version number Post History dates of postings to python list and python dev Replaces pep number Replaced By pep number | All other headers are required . | 
PEP 9 | null | discussion | PEP pep number Title pep title Version cvs version string Last Modified cvs date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Final Replaced Type Informational Standards Track Requires pep numbers Created date created on, in dd mmm yyyy format Python Version version number Post History dates of postings to python list and python dev Replaces pep number Replaced By pep number | All other headers are required . | 
PEP 9 | null | discussion | PEP pep number Title pep title Version cvs version string Last Modified cvs date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Final Replaced Type Informational Standards Track Requires pep numbers Created date created on, in dd mmm yyyy format Python Version version number Post History dates of postings to python list and python dev Replaces pep number Replaced By pep number | All other headers are required . | 
PEP 9 | null | discussion | PEP pep number Title pep title Version cvs version string Last Modified cvs date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Final Replaced Type Informational Standards Track Requires pep numbers Created date created on, in dd mmm yyyy format Python Version version number Post History dates of postings to python list and python dev Replaces pep number Replaced By pep number | All other headers are required . | 
PEP 9 | null | discussion | PEP pep number Title pep title Version cvs version string Last Modified cvs date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Final Replaced Type Informational Standards Track Requires pep numbers Created date created on, in dd mmm yyyy format Python Version version number Post History dates of postings to python list and python dev Replaces pep number Replaced By pep number | All other headers are required . | 
PEP 9 | null | discussion | PEP pep number Title pep title Version cvs version string Last Modified cvs date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Final Replaced Type Informational Standards Track Requires pep numbers Created date created on, in dd mmm yyyy format Python Version version number Post History dates of postings to python list and python dev Replaces pep number Replaced By pep number | All other headers are required . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 12 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 12 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 12 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 12 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 12 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 12 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 12 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 12 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 12 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 12 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 12 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 12 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 12 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 12 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 12 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 12 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 12 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 12 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 12 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 12 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 12 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 12 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 12 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 12 | null | discussion | Standards Track PEPs consist of two parts , a design document and a 255,8 255,8 PEP pep number Title pep title Version cvs version string Last Modified cvs date string Version svn version string Last Modified svn date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 351,17 351,7 with the PEP author andor PEP editor . | As updates are necessary , the PEP author can check in new versions if they have CVS commit permissions , or can email new PEP versions to the PEP SVN commit permissions , or can email new PEP versions to the PEP editor for committing . | 
PEP 202 | null | discussion | But closed discussions are not the way to build a PEP it 's a PEP champion 's job to summarize significant opposing viewpoints in the rationale , but there 's no way to judge significant '' without intense community involvement . | Barry A. Warsaw | 
PEP 202 | null | discussion | A PEP is n't a dumping ground for every random suggestion that comes along , either open discussion is needed to narrow things down to the truly serious alternatives . | In this case I happen to think Moshe is trying to solve a problem '' likely nobody else sees as a problem , but I ca n't tell without seeing how others react to his bizarre wink suggestion . | 
PEP 202 | null | discussion | A PEP is n't a dumping ground for every random suggestion that comes along , either open discussion is needed to narrow things down to the truly serious alternatives . | In this case I happen to think Moshe is trying to solve a problem '' likely nobody else sees as a problem , but I ca n't tell without seeing how others react to his bizarre wink suggestion . | 
PEP 202 | null | discussion | But closed discussions are not the way to build a PEP it 's a PEP champion 's job to summarize significant opposing viewpoints in the rationale , but there 's no way to judge significant '' without intense community involvement . | Barry A. Warsaw | 
PEP 202 | null | discussion | A PEP is n't a dumping ground for every random suggestion that comes along , either open discussion is needed to narrow things down to the truly serious alternatives . | In this case I happen to think Moshe is trying to solve a problem '' likely nobody else sees as a problem , but I ca n't tell without seeing how others react to his bizarre wink suggestion . | 
PEP 202 | null | discussion | A PEP is n't a dumping ground for every random suggestion that comes along , either open discussion is needed to narrow things down to the truly serious alternatives . | In this case I happen to think Moshe is trying to solve a problem '' likely nobody else sees as a problem , but I ca n't tell without seeing how others react to his bizarre wink suggestion . | 
PEP 202 | null | discussion | But closed discussions are not the way to build a PEP it 's a PEP champion 's job to summarize significant opposing viewpoints in the rationale , but there 's no way to judge significant '' without intense community involvement . | Barry A. Warsaw | 
PEP 202 | null | discussion | A PEP is n't a dumping ground for every random suggestion that comes along , either open discussion is needed to narrow things down to the truly serious alternatives . | In this case I happen to think Moshe is trying to solve a problem '' likely nobody else sees as a problem , but I ca n't tell without seeing how others react to his bizarre wink suggestion . | 
PEP 202 | null | discussion | A PEP is n't a dumping ground for every random suggestion that comes along , either open discussion is needed to narrow things down to the truly serious alternatives . | In this case I happen to think Moshe is trying to solve a problem '' likely nobody else sees as a problem , but I ca n't tell without seeing how others react to his bizarre wink suggestion . | 
PEP 208 | null | support | I am trying to implement an extension class which should support the PEP 208 notion of NEWSTYLENUMBER , i.e. a the fundamental arithmetic operations should accept different types without coercion . | Hello , | However when I define my object as  
PEP 208 | null | support | I am trying to implement an extension class which should support the PEP 208 notion of NEWSTYLENUMBER , i.e. a the fundamental arithmetic operations should accept different types without coercion . | Hello , | However when I define my object as  
PEP 208 | null | support | I am trying to implement an extension class which should support the PEP 208 notion of NEWSTYLENUMBER , i.e. a the fundamental arithmetic operations should accept different types without coercion . | Hello , | However when I define my object as  
PEP 214 | accepted | bdfl pronouncement | PEP 214 and 221 are accepted , as per recent BDFL pronouncements . | txt ,1.24,1.25 . | S 214 pep 0214 .
PEP 214 | bdfl_pronouncement_accepted | bdfl pronouncement | PEP 214 and 221 are accepted , as per recent BDFL pronouncements . | txt ,1.24,1.25 . | S 214 pep 0214 .
PEP 214 | bdfl_pronouncement_accepted | bdfl pronouncement | PEP 214 and 221 are accepted , as per recent BDFL pronouncements . | txt ,1.24,1.25 . | S 214 pep 0214 .
PEP 214 | bdfl_pronouncement_accepted | bdfl pronouncement | PEP 214 and 221 are accepted , as per recent BDFL pronouncements . | txt ,1.24,1.25 . | S 214 pep 0214 .
PEP 214 | bdfl_pronouncement_accepted | bdfl pronouncement | PEP 214 and 221 are accepted , as per recent BDFL pronouncements . | txt ,1.24,1.25 . | S 214 pep 0214 .
PEP 214 | co_bdfl_delegate_accepted_pep | bdfl pronouncement | PEP 214 and 221 are accepted , as per recent BDFL pronouncements . | txt ,1.24,1.25 . | S 214 pep 0214 .
PEP 214 | co_bdfl_delegate_accepted_pep | bdfl pronouncement | PEP 214 and 221 are accepted , as per recent BDFL pronouncements . | txt ,1.24,1.25 . | S 214 pep 0214 .
PEP 214 | accepted | bdfl pronouncement | PEP 214 and 221 are accepted , as per recent BDFL pronouncements . | txt ,1.24,1.25 . | S 214 pep 0214 .
PEP 214 | bdfl_pronouncement_accepted | bdfl pronouncement | PEP 214 and 221 are accepted , as per recent BDFL pronouncements . | txt ,1.24,1.25 . | S 214 pep 0214 .
PEP 214 | bdfl_pronouncement_accepted | bdfl pronouncement | PEP 214 and 221 are accepted , as per recent BDFL pronouncements . | txt ,1.24,1.25 . | S 214 pep 0214 .
PEP 214 | bdfl_pronouncement_accepted | bdfl pronouncement | PEP 214 and 221 are accepted , as per recent BDFL pronouncements . | txt ,1.24,1.25 . | S 214 pep 0214 .
PEP 214 | bdfl_pronouncement_accepted | bdfl pronouncement | PEP 214 and 221 are accepted , as per recent BDFL pronouncements . | txt ,1.24,1.25 . | S 214 pep 0214 .
PEP 214 | co_bdfl_delegate_accepted_pep | bdfl pronouncement | PEP 214 and 221 are accepted , as per recent BDFL pronouncements . | txt ,1.24,1.25 . | S 214 pep 0214 .
PEP 214 | co_bdfl_delegate_accepted_pep | bdfl pronouncement | PEP 214 and 221 are accepted , as per recent BDFL pronouncements . | txt ,1.24,1.25 . | S 214 pep 0214 .
PEP 214 | accepted | bdfl pronouncement | PEP 214 and 221 are accepted , as per recent BDFL pronouncements . | peps pep 202 , change tim 's email address to tpeters we really need a key . |   S 214 pep 0214 .
PEP 214 | bdfl_pronouncement_accepted | bdfl pronouncement | PEP 214 and 221 are accepted , as per recent BDFL pronouncements . | peps pep 202 , change tim 's email address to tpeters we really need a key . |   S 214 pep 0214 .
PEP 214 | bdfl_pronouncement_accepted | bdfl pronouncement | PEP 214 and 221 are accepted , as per recent BDFL pronouncements . | peps pep 202 , change tim 's email address to tpeters we really need a key . |   S 214 pep 0214 .
PEP 214 | bdfl_pronouncement_accepted | bdfl pronouncement | PEP 214 and 221 are accepted , as per recent BDFL pronouncements . | peps pep 202 , change tim 's email address to tpeters we really need a key . |   S 214 pep 0214 .
PEP 214 | bdfl_pronouncement_accepted | bdfl pronouncement | PEP 214 and 221 are accepted , as per recent BDFL pronouncements . | peps pep 202 , change tim 's email address to tpeters we really need a key . |   S 214 pep 0214 .
PEP 214 | co_bdfl_delegate_accepted_pep | bdfl pronouncement | PEP 214 and 221 are accepted , as per recent BDFL pronouncements . | peps pep 202 , change tim 's email address to tpeters we really need a key . |   S 214 pep 0214 .
PEP 214 | co_bdfl_delegate_accepted_pep | bdfl pronouncement | PEP 214 and 221 are accepted , as per recent BDFL pronouncements . | peps pep 202 , change tim 's email address to tpeters we really need a key . |   S 214 pep 0214 .
PEP 215 | null | support | What Alexander proposes and I support is not to do string interpolation , but to simply change the syntax because the ' ' is redundant it 's a much smaller change | PEP 215 does not do what I want . | 
PEP 215 | proposal | support | To address that problem and a number of other concerns , this PEP proposes an alternative approach to compiler supported interpolation , based on a new interpolate magic method , and using a substitution syntax inspired by that used in string . | system call . | 
PEP 215 | proposal | support | To address that problem and a number of other concerns , this PEP proposes an alternative approach to compiler supported interpolation , based on a new interpolate magic method , and using a substitution syntax inspired by that used in string . | system call . | 
PEP 219 | null | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | final | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | null | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | null | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | final | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | null | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | null | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | final | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | null | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | null | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | final | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | null | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | null | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | final | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | null | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | null | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | final | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | null | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | null | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | final | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | null | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | null | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | final | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | null | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | null | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | final | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | null | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | null | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | final | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | null | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | null | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | final | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | null | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 234 | decided_bdfl_consensus | bdfl pronouncement | iterkeys ... Resolved Issues The following topics have been decided by consensus or BDFL pronouncement . | itervalues ... for key in dict . | 
PEP 234 | decided_bdfl_consensus | consensus | iterkeys ... Resolved Issues The following topics have been decided by consensus or BDFL pronouncement . | itervalues ... for key in dict . | 
PEP 234 | decided_bdfl_consensus | bdfl pronouncement | The following topics have been decided by consensus or BDFL pronouncement . | Resolved Issues |   Two alternative spellings for next     )  have been proposed but rejected     next       )  , because it corresponds to a type object slot    tp iternext  )    and   call       )  , because this is the only operation .
PEP 234 | decided_bdfl_consensus | consensus | The following topics have been decided by consensus or BDFL pronouncement . | Resolved Issues |   Two alternative spellings for next     )  have been proposed but rejected     next       )  , because it corresponds to a type object slot    tp iternext  )    and   call       )  , because this is the only operation .
PEP 234 | decided_bdfl_consensus | consensus | The following topics have been decided by consensus or BDFL ! | Resolved Issues ! | pronouncement . ! !
PEP 234 | decided_bdfl_consensus | bdfl pronouncement | Resolved Issues The following topics have been decided by consensus or BDFL pronouncement . | There is still discussion about whether 334,403 and found that the latter is only about 7 faster . | 
PEP 234 | decided_bdfl_consensus | consensus | Resolved Issues The following topics have been decided by consensus or BDFL pronouncement . | There is still discussion about whether 334,403 and found that the latter is only about 7 faster . | 
PEP 234 | null | support | The idea proposed here was supported by the BDFL on python dev 1 and is even mentioned in the original iterator PEP , PEP 234 In retrospect , it might have been better to go for next and have a new built in , next it , which calls it . | This creates a nice duality between iter and next iter function , sentinel next iterator , sentinel Previous Proposals This proposal is not a new idea . | 
PEP 234 | null | support | The idea proposed here was supported by the BDFL on python dev 1 and is even mentioned in the original iterator PEP , PEP 234 In retrospect , it might have been better to go for next and have a new built in , next it , which calls it . | This creates a nice duality between iter and next iter function , sentinel next iterator , sentinel Previous Proposals This proposal is not a new idea . | 
PEP 234 | null | support | The idea proposed here was supported by the BDFL on python dev 1 and is even mentioned in the original iterator PEP , PEP 234 In retrospect , it might have been better to go for next and have a new built in , next it , which calls it . | This creates a nice duality between iter and next iter function , sentinel next iterator , sentinel Previous Proposals This proposal is not a new idea . | 
PEP 234 | null | support | The idea proposed here was supported by the BDFL on python dev 1 and is even mentioned in the original iterator PEP , PEP 234 In retrospect , it might have been better to go for next and have a new built in , next it , which calls it . | This creates a nice duality between iter and next iter function , sentinel next iterator , sentinel Previous Proposals This proposal is not a new idea . | 
PEP 234 | null | support | The idea proposed here was supported by the BDFL on python dev 1 and is even mentioned in the original iterator PEP , PEP 234 In retrospect , it might have been better to go for next and have a new built in , next it , which calls it . | This creates a nice duality between iter and next iter function , sentinel next iterator , sentinel Previous Proposals This proposal is not a new idea . | 
PEP 234 | null | support | The idea proposed here was supported by the BDFL on python dev 1 and is even mentioned in the original iterator PEP , PEP 234 In retrospect , it might have been better to go for next and have a new built in , next it , which calls it . | This creates a nice duality between iter and next iter function , sentinel next iterator , sentinel Previous Proposals This proposal is not a new idea . | 
PEP 234 | null | support | The idea proposed here was supported by the BDFL on python dev 1 and is even mentioned in the original iterator PEP , PEP 234 In retrospect , it might have been better to go for next and have a new built in , next it , which calls it . | This creates a nice duality between iter and next iter function , sentinel next iterator , sentinel Previous Proposals This proposal is not a new idea . | 
PEP 234 | null | support | The idea proposed here was supported by the BDFL on python dev 1 and is even mentioned in the original iterator PEP , PEP 234 In retrospect , it might have been better to go for next and have a new built in , next it , which calls it . | This creates a nice duality between iter and next iter function , sentinel next iterator , sentinel Previous Proposals This proposal is not a new idea . | 
PEP 238 | null | support | The wrongness does n't come out immediately , and you can argue about it so in a sense it is a religious point but I am not a cultural relativist , and I find the proposed new semantics better than the old ones otherwise I would never have supported the PEP . | They are very subtly wrong , just as C 's int division semantics are subtly wrong they give a less useful result for negative numbers . | 
PEP 238 | null | discussion | Given all the other discussion that 's gone on , I sha n't whine if my proposal does n't get accepted , but I think the PEP still needs a clear statement about the silent breakage that 's possible under the current plan . | Because this is a hook that does n't affect the rest of the interpreter , maintaining it should be simpler , and there is n't anywhere near the baggage effect . |     Aahz       )     Copyright 2001 by aahz at pobox.com  ) 
PEP 238 | null | discussion | Given all the other discussion that 's gone on , I sha n't whine if my proposal does n't get accepted , but I think the PEP still needs a clear statement about the silent breakage that 's possible under the current plan . | Because this is a hook that does n't affect the rest of the interpreter , maintaining it should be simpler , and there is n't anywhere near the baggage effect . |     Aahz       )     Copyright 2001 by aahz at pobox.com  ) 
PEP 238 | null | discussion | Given all the other discussion that 's gone on , I sha n't whine if my proposal does n't get accepted , but I think the PEP still needs a clear statement about the silent breakage that 's possible under the current plan . | Because this is a hook that does n't affect the rest of the interpreter , maintaining it should be simpler , and there is n't anywhere near the baggage effect . |     Aahz       )     Copyright 2001 by aahz at pobox.com  ) 
PEP 239 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | This PEP suggests no literals for rational numbers that is left for another PEP 1 . | 
PEP 239 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | This PEP suggests no literals for rational numbers that is left for another PEP 1 . | 
PEP 239 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | This PEP suggests no literals for rational numbers that is left for another PEP 1 . | 
PEP 239 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | This PEP suggests no literals for rational numbers that is left for another PEP 1 . | 
PEP 239 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | This PEP suggests no literals for rational numbers that is left for another PEP 1 . | 
PEP 239 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | This PEP suggests no literals for rational numbers that is left for another PEP 1 . | 
PEP 239 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | This PEP suggests no literals for rational numbers that is left for another PEP 1 . | 
PEP 239 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | This PEP suggests no literals for rational numbers that is left for another PEP 1 . | 
PEP 239 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | This PEP suggests no literals for rational numbers that is left for another PEP 1 . | 
PEP 239 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | This PEP suggests no literals for rational numbers that is left for another PEP 1 . | 
PEP 239 | rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | This PEP suggests no literals for rational numbers that is left for another PEP 1 . | 
PEP 239 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | This PEP suggests no literals for rational numbers that is left for another PEP 1 . | 
PEP 239 | rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | This PEP suggests no literals for rational numbers that is left for another PEP 1 . | 
PEP 239 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 21 38 02 0000 1.8 3,7 3,7 Version Revision Author Christopher A. Craig python pep at ccraig.org , Moshe Zadka pep at zadka.site.co.il Status Draft Status Rejected Type Standards Track Created 11 Mar 2001 Python Version 2.2 17,6 17,13 rational in Python , and modifying non integer division to return it . | 
PEP 239 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 21 38 02 0000 1.8 3,7 3,7 Version Revision Author Christopher A. Craig python pep at ccraig.org , Moshe Zadka pep at zadka.site.co.il Status Draft Status Rejected Type Standards Track Created 11 Mar 2001 Python Version 2.2 17,6 17,13 rational in Python , and modifying non integer division to return it . | 
PEP 239 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 21 38 02 0000 1.8 3,7 3,7 Version Revision Author Christopher A. Craig python pep at ccraig.org , Moshe Zadka pep at zadka.site.co.il Status Draft Status Rejected Type Standards Track Created 11 Mar 2001 Python Version 2.2 17,6 17,13 rational in Python , and modifying non integer division to return it . | 
PEP 239 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 21 38 02 0000 1.8 3,7 3,7 Version Revision Author Christopher A. Craig python pep at ccraig.org , Moshe Zadka pep at zadka.site.co.il Status Draft Status Rejected Type Standards Track Created 11 Mar 2001 Python Version 2.2 17,6 17,13 rational in Python , and modifying non integer division to return it . | 
PEP 239 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 21 38 02 0000 1.8 3,7 3,7 Version Revision Author Christopher A. Craig python pep at ccraig.org , Moshe Zadka pep at zadka.site.co.il Status Draft Status Rejected Type Standards Track Created 11 Mar 2001 Python Version 2.2 17,6 17,13 rational in Python , and modifying non integer division to return it . | 
PEP 239 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 21 38 02 0000 1.8 3,7 3,7 Version Revision Author Christopher A. Craig python pep at ccraig.org , Moshe Zadka pep at zadka.site.co.il Status Draft Status Rejected Type Standards Track Created 11 Mar 2001 Python Version 2.2 17,6 17,13 rational in Python , and modifying non integer division to return it . | 
PEP 239 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 21 38 02 0000 1.8 3,7 3,7 Version Revision Author Christopher A. Craig python pep at ccraig.org , Moshe Zadka pep at zadka.site.co.il Status Draft Status Rejected Type Standards Track Created 11 Mar 2001 Python Version 2.2 17,6 17,13 rational in Python , and modifying non integer division to return it . | 
PEP 239 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 21 38 02 0000 1.8 3,7 3,7 Version Revision Author Christopher A. Craig python pep at ccraig.org , Moshe Zadka pep at zadka.site.co.il Status Draft Status Rejected Type Standards Track Created 11 Mar 2001 Python Version 2.2 17,6 17,13 rational in Python , and modifying non integer division to return it . | 
PEP 239 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 21 38 02 0000 1.8 3,7 3,7 Version Revision Author Christopher A. Craig python pep at ccraig.org , Moshe Zadka pep at zadka.site.co.il Status Draft Status Rejected Type Standards Track Created 11 Mar 2001 Python Version 2.2 17,6 17,13 rational in Python , and modifying non integer division to return it . | 
PEP 239 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 21 38 02 0000 1.8 3,7 3,7 Version Revision Author Christopher A. Craig python pep at ccraig.org , Moshe Zadka pep at zadka.site.co.il Status Draft Status Rejected Type Standards Track Created 11 Mar 2001 Python Version 2.2 17,6 17,13 rational in Python , and modifying non integer division to return it . | 
PEP 239 | rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 21 38 02 0000 1.8 3,7 3,7 Version Revision Author Christopher A. Craig python pep at ccraig.org , Moshe Zadka pep at zadka.site.co.il Status Draft Status Rejected Type Standards Track Created 11 Mar 2001 Python Version 2.2 17,6 17,13 rational in Python , and modifying non integer division to return it . | 
PEP 239 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 21 38 02 0000 1.8 3,7 3,7 Version Revision Author Christopher A. Craig python pep at ccraig.org , Moshe Zadka pep at zadka.site.co.il Status Draft Status Rejected Type Standards Track Created 11 Mar 2001 Python Version 2.2 17,6 17,13 rational in Python , and modifying non integer division to return it . | 
PEP 239 | rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 21 38 02 0000 1.8 3,7 3,7 Version Revision Author Christopher A. Craig python pep at ccraig.org , Moshe Zadka pep at zadka.site.co.il Status Draft Status Rejected Type Standards Track Created 11 Mar 2001 Python Version 2.2 17,6 17,13 rational in Python , and modifying non integer division to return it . | 
PEP 240 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | This PEP suggests no literals for rational numbers that is left for another PEP 1 . | 
PEP 240 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | This PEP suggests no literals for rational numbers that is left for another PEP 1 . | 
PEP 240 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | This PEP suggests no literals for rational numbers that is left for another PEP 1 . | 
PEP 240 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | This PEP suggests no literals for rational numbers that is left for another PEP 1 . | 
PEP 240 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | This PEP suggests no literals for rational numbers that is left for another PEP 1 . | 
PEP 240 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | This PEP suggests no literals for rational numbers that is left for another PEP 1 . | 
PEP 240 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | This PEP suggests no literals for rational numbers that is left for another PEP 1 . | 
PEP 240 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | This PEP suggests no literals for rational numbers that is left for another PEP 1 . | 
PEP 240 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | This PEP suggests no literals for rational numbers that is left for another PEP 1 . | 
PEP 240 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | This PEP suggests no literals for rational numbers that is left for another PEP 1 . | 
PEP 240 | rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | This PEP suggests no literals for rational numbers that is left for another PEP 1 . | 
PEP 240 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | This PEP suggests no literals for rational numbers that is left for another PEP 1 . | 
PEP 240 | rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | This PEP suggests no literals for rational numbers that is left for another PEP 1 . | 
PEP 240 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 21 38 02 0000 1.8 3,7 3,7 Version Revision Author Christopher A. Craig python pep at ccraig.org , Moshe Zadka pep at zadka.site.co.il Status Draft Status Rejected Type Standards Track Created 11 Mar 2001 Python Version 2.2 17,6 17,13 rational in Python , and modifying non integer division to return it . | 
PEP 240 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 21 38 02 0000 1.8 3,7 3,7 Version Revision Author Christopher A. Craig python pep at ccraig.org , Moshe Zadka pep at zadka.site.co.il Status Draft Status Rejected Type Standards Track Created 11 Mar 2001 Python Version 2.2 17,6 17,13 rational in Python , and modifying non integer division to return it . | 
PEP 240 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 21 38 02 0000 1.8 3,7 3,7 Version Revision Author Christopher A. Craig python pep at ccraig.org , Moshe Zadka pep at zadka.site.co.il Status Draft Status Rejected Type Standards Track Created 11 Mar 2001 Python Version 2.2 17,6 17,13 rational in Python , and modifying non integer division to return it . | 
PEP 240 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 21 38 02 0000 1.8 3,7 3,7 Version Revision Author Christopher A. Craig python pep at ccraig.org , Moshe Zadka pep at zadka.site.co.il Status Draft Status Rejected Type Standards Track Created 11 Mar 2001 Python Version 2.2 17,6 17,13 rational in Python , and modifying non integer division to return it . | 
PEP 240 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 21 38 02 0000 1.8 3,7 3,7 Version Revision Author Christopher A. Craig python pep at ccraig.org , Moshe Zadka pep at zadka.site.co.il Status Draft Status Rejected Type Standards Track Created 11 Mar 2001 Python Version 2.2 17,6 17,13 rational in Python , and modifying non integer division to return it . | 
PEP 240 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 21 38 02 0000 1.8 3,7 3,7 Version Revision Author Christopher A. Craig python pep at ccraig.org , Moshe Zadka pep at zadka.site.co.il Status Draft Status Rejected Type Standards Track Created 11 Mar 2001 Python Version 2.2 17,6 17,13 rational in Python , and modifying non integer division to return it . | 
PEP 240 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 21 38 02 0000 1.8 3,7 3,7 Version Revision Author Christopher A. Craig python pep at ccraig.org , Moshe Zadka pep at zadka.site.co.il Status Draft Status Rejected Type Standards Track Created 11 Mar 2001 Python Version 2.2 17,6 17,13 rational in Python , and modifying non integer division to return it . | 
PEP 240 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 21 38 02 0000 1.8 3,7 3,7 Version Revision Author Christopher A. Craig python pep at ccraig.org , Moshe Zadka pep at zadka.site.co.il Status Draft Status Rejected Type Standards Track Created 11 Mar 2001 Python Version 2.2 17,6 17,13 rational in Python , and modifying non integer division to return it . | 
PEP 240 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 21 38 02 0000 1.8 3,7 3,7 Version Revision Author Christopher A. Craig python pep at ccraig.org , Moshe Zadka pep at zadka.site.co.il Status Draft Status Rejected Type Standards Track Created 11 Mar 2001 Python Version 2.2 17,6 17,13 rational in Python , and modifying non integer division to return it . | 
PEP 240 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 21 38 02 0000 1.8 3,7 3,7 Version Revision Author Christopher A. Craig python pep at ccraig.org , Moshe Zadka pep at zadka.site.co.il Status Draft Status Rejected Type Standards Track Created 11 Mar 2001 Python Version 2.2 17,6 17,13 rational in Python , and modifying non integer division to return it . | 
PEP 240 | rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 21 38 02 0000 1.8 3,7 3,7 Version Revision Author Christopher A. Craig python pep at ccraig.org , Moshe Zadka pep at zadka.site.co.il Status Draft Status Rejected Type Standards Track Created 11 Mar 2001 Python Version 2.2 17,6 17,13 rational in Python , and modifying non integer division to return it . | 
PEP 240 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 21 38 02 0000 1.8 3,7 3,7 Version Revision Author Christopher A. Craig python pep at ccraig.org , Moshe Zadka pep at zadka.site.co.il Status Draft Status Rejected Type Standards Track Created 11 Mar 2001 Python Version 2.2 17,6 17,13 rational in Python , and modifying non integer division to return it . | 
PEP 240 | rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 21 38 02 0000 1.8 3,7 3,7 Version Revision Author Christopher A. Craig python pep at ccraig.org , Moshe Zadka pep at zadka.site.co.il Status Draft Status Rejected Type Standards Track Created 11 Mar 2001 Python Version 2.2 17,6 17,13 rational in Python , and modifying non integer division to return it . | 
PEP 241 | null | discussion | txt Log Message After discussions w Andrew , we 've decided to mark this PEP as Final . | Modified Files pep 0241 . | 
PEP 241 | null | discussion | txt Log Message After discussions w Andrew , we 've decided to mark this PEP as Final . | Modified Files pep 0241 . | 
PEP 245 | bdfl_pronouncement_rejected | bdfl pronouncement | PEP 245 was rejected by BDFL pronouncement . | It then depends on the details . | This is how things are ultimately decided   by BDFL pronouncement .
PEP 245 | bdfl_pronouncement_rejected | bdfl pronouncement | PEP 245 was rejected by BDFL pronouncement . | It then depends on the details . | This is how things are ultimately decided   by BDFL pronouncement .
PEP 245 | bdfl_pronouncement_rejected | bdfl pronouncement | PEP 245 was rejected by BDFL pronouncement . | It then depends on the details . | This is how things are ultimately decided   by BDFL pronouncement .
PEP 245 | bdfl_pronouncement_rejected | bdfl pronouncement | PEP 245 was rejected by BDFL pronouncement . | It then depends on the details . | This is how things are ultimately decided   by BDFL pronouncement .
PEP 245 | rejected | bdfl pronouncement | PEP 245 was rejected by BDFL pronouncement . | It then depends on the details . | This is how things are ultimately decided   by BDFL pronouncement .
PEP 245 | rejected | bdfl pronouncement | PEP 245 was rejected by BDFL pronouncement . | It then depends on the details . | This is how things are ultimately decided   by BDFL pronouncement .
PEP 246 | null | support | PEP 246 without an open protocols '' protocol , does n't support this latter requirement . | This is why one of my requirements for PyProtocols was that it absolutely had to support declaring adapters for built in types , and why another one was that it should be possible for two people to independently declare equivalent or overlapping protocols , and then have a third party glue them together . | 
PEP 246 | null | support | Clark and Alex have proposed changes to PEP 246 that would support these proposals within the scope of the adapt ' system , and I have pre PEPped an add on to their system that allows extenders to be automatically assembled from '' like '' decorators sprinkled over methods or extension routines . | Meanwhile , no adapt call should adapt an extender it should instead adapt the extended object . | 
PEP 246 | null | support | Clark and Alex have proposed changes to PEP 246 that would support these proposals within the scope of the adapt ' system , and I have pre PEPped an add on to their system that allows extenders to be automatically assembled from '' like '' decorators sprinkled over methods or extension routines . | Meanwhile , no adapt call should adapt an extender it should instead adapt the extended object . | 
PEP 250 | proposal | support | In this PEP , I propose to phase out the second API in favor of supporting the class instance introspection API for all types . | Digital Creations 's ExtensionClasses ignore the second introspection API , and instead emulate the class instance introspection API , which is more powerful . | One argument in favor of the class instance introspection API is that it does n't require you to create an instance in order to find out which attributes a type supports   this in turn is useful for documentation processors .
PEP 250 | proposal | support | In this PEP , I propose to phase out the second API in favor of supporting the class instance introspection API for all types . | Digital Creations 's ExtensionClasses ignore the second introspection API , and instead emulate the class instance introspection API , which is more powerful . | One argument in favor of the class instance introspection API is that it does n't require you to create an instance in order to find out which attributes a type supports   this in turn is useful for documentation processors .
PEP 251 | proposal | support | In this PEP , I propose to phase out the second API in favor of supporting the class instance introspection API for all types . | Digital Creations 's ExtensionClasses ignore the second introspection API , and instead emulate the class instance introspection API , which is more powerful . | One argument in favor of the class instance introspection API is that it does n't require you to create an instance in order to find out which attributes a type supports   this in turn is useful for documentation processors .
PEP 251 | proposal | support | In this PEP , I propose to phase out the second API in favor of supporting the class instance introspection API for all types . | Digital Creations 's ExtensionClasses ignore the second introspection API , and instead emulate the class instance introspection API , which is more powerful . | One argument in favor of the class instance introspection API is that it does n't require you to create an instance in order to find out which attributes a type supports   this in turn is useful for documentation processors .
PEP 255 | proposal | support | PEP 255 proposes both a mechanism and concrete syntax to support it . | I was discussing mechanisms . | I pointed out that the proposed mechanism had important limitations    well , important to me I suppose   I like it when abstractions can commute   this is not the case with the generators of PEP 255  )  and I offered a more general mechanism , but I did not suggest convenient concrete syntax for it .
PEP 255 | proposal | support | This PEP proposes that generators support a close method and destruction semantics , such that the restriction can be lifted , expanding the applicability of generators . | The finally clause execution can not be either guaranteed or enforced . | Rationale
PEP 255 | proposal | support | This PEP proposes that generators support a close method and destruction semantics , such that the restriction can be lifted , expanding the applicability of generators . | The finally clause execution can not be either guaranteed or enforced . | Rationale
PEP 255 | updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form . | The bracketed yield syntax left something to be desired the performance gains had not been demonstrated and the range of use cases had not been shown . | The impetus for the discussion was an innovative proposal from Peter Norvig .
PEP 255 | updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form . | The bracketed yield syntax left something to be desired the performance gains had not been demonstrated and the range of use cases had not been shown . | The impetus for the discussion was an innovative proposal from Peter Norvig .
PEP 255 | updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form . | The bracketed yield syntax left something to be desired the performance gains had not been demonstrated and the range of use cases had not been shown . | The impetus for the discussion was an innovative proposal from Peter Norvig    3  )    .
PEP 255 | updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form . | The bracketed yield syntax left something to be desired the performance gains had not been demonstrated and the range of use cases had not been shown . | The impetus for the discussion was an innovative proposal from Peter Norvig    3  )    .
PEP 255 | null | support | There is a reference implementation 2 that supports everything that the PEP proposes to add . | The PEP is also available at 1 . | 
PEP 255 | null | support | There is a reference implementation 2 that supports everything that the PEP proposes to add . | The PEP is also available at 1 . | 
PEP 256 | null | consensus | To establish a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 256 | null | consensus | To establish a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 256 | null | consensus | To establish a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | The goals of this PEP are as follows 1 . | 
PEP 256 | null | consensus | To establish a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | The goals of this PEP are as follows 1 . | 
PEP 256 | proposal | consensus | This PEP proposes a generic Docstring Processing System DPS framework , which separates out the components program and conceptual , enabling the resolution of individual issues either through consensus one solution or through divergence many . | The issues surrounding docstring processing have been contentious and difficult to resolve . | 
PEP 257 | null | consensus | To establish a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 257 | null | consensus | To establish a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 258 | proposal | consensus | This PEP proposes a generic Docstring Processing System DPS framework , which separates out the components program and conceptual , enabling the resolution of individual issues either through consensus one solution or through divergence many . | The issues surrounding docstring processing have been contentious and difficult to resolve . | 
PEP 259 | null | support | txt Support for wide '' Unicode characters Prescod Py in the sky PEPs not ready may become active yet 191,195 SR 259 pep 0259 . | txt Simplify xrange van Rossum S 261 pep 0261 . | 
PEP 263 | updated | discussion | So after discussion with MAL , I have updated the PEP to reflect this strategy . | Still , providing the transitional warning of phase 1 is desirable , and indeed possible with this implementation . | There are only minimal user visible changes     more encodings can be supported even in phase 1 , in particular those based on ISO 2022    provided that the proper codecs are available  )    it is now an error if the declared encoding and the text do not match .
PEP 263 | null | support | Category IDLE Group None Status Open Priority 5 Submitted By Martin v. L wis loewis Summary PEP 263 support in IDLE | Patches item 590913 , was opened at 2002 08 04 19 56 You can respond by visiting https sourceforge.nettracker?func detail atid 305470 aid 590913 group id 5470 | 
PEP 263 | null | support | Category IDLE Group None Status Open Priority 5 Submitted By Martin v. L wis loewis Summary PEP 263 support in IDLE | Patches item 590913 , was opened at 2002 08 04 19 56 You can respond by visiting https sourceforge.nettracker?func detail atid 305470 aid 590913 group id 5470 | 
PEP 263 | proposal | discussion | In the discussion of PEP 263 , I proposed that the external encoding of Python scripts themselves be fixed as UTF 8 , and other encodings would have to be pretranslated by an appropriate codec . | I think it would be reasonable to make UTF 8 the default encoding on all platforms , except for internal OS functions , where Windows will presumably continue to use UTF 16 and nix distros will probably continue to agree to disagree about whether on disk format is NFD or NFC and the Python language as yet does n't know about NFC v. NFD , although the library does . | That was shouted down by the European contingent , who wanted to continue using Latin 1 and Latin 2 without codecs or a wrapper to call them transparently .
PEP 272 | null | discussion | There was a bunch of subsequent discussion on Python crypto that led up to the current proposal , and that seems to have done a better job . | In fact , I do n't think any module implementing PEP 272 has ever been written , and the interface it describes is n't that great , so I would n't call the PEP process a big success where block ciphers are concerned . | That 's reasonable for modules written in Python , but I do n't subscribe to that idea for modules written in C. I ca n't expect the users to have C compilers , and I do n't have the dev tools to compile binaries of the module for every platform people might want to use it on .
PEP 276 | null | discussion | The recent discussions around PEP 276 suggests that some people like the idea of a Haskell esque syntax whereby one specifies a list of numbers using a closed interval notation that includes a starting number , a secondary number that helps to establish the step size , an ellipsis style notation , and an ending number or variants on the above . | As PEP 276 notes , there appears to be interest in the Python community for inventing new syntax or other mechanisms that makes it easier and more natural to specify a list of numbers for clarity of indexed for loop based algorithms and other scenarios . | 
PEP 276 | null | majority | The majority of disagreement with PEP 276 came from those who favor much larger changes to Python to address the more general problem of specifying a sequence of integers where such a specification is general enough to handle the starting value , ending value , and stepping value of the sequence and also addresses variations of open , closed , and half open half closed integer intervals . | index item | 
PEP 276 | null | majority | The majority of disagreement with PEP 276 came from those who favor much larger changes to Python to address the more general problem of specifying a sequence of integers where such a specification is general enough to handle the starting value , ending value , and stepping value of the sequence and also addresses variations of open , closed , and half open half closed integer intervals . | index item | 
PEP 276 | null | majority | The majority of disagreement with PEP 276 came from those who favor much larger changes to Python to address the more general problem of specifying a sequence of integers where such a specification is general enough to handle the starting value , ending value , and stepping value of the sequence and also addresses variations of open , closed , and half open half closed integer intervals . | Why not propose even bigger changes ? | 
PEP 276 | null | majority | The majority of disagreement with PEP 276 came from those who favor much larger changes to Python to address the more general problem of specifying a sequence of integers where such a specification is general enough to handle the starting value , ending value , and stepping value of the sequence and also addresses variations of open , closed , and half open half closed integer intervals . | Why not propose even bigger changes ? | 
PEP 276 | null | bdfl pronouncement | BDFL Pronouncement This PEP was rejected on 17 June 2005 with a note to python dev . | Such an iterator would simplify the coding of certain for loops in Python . | 
PEP 276 | null | bdfl pronouncement | BDFL Pronouncement This PEP was rejected on 17 June 2005 with a note to python dev . | Such an iterator would simplify the coding of certain for loops in Python . | 
PEP 276 | null | bdfl pronouncement | BDFL Pronouncement This PEP was rejected on 17 June 2005 with a note to python dev . | Such an iterator would simplify the coding of certain for loops in Python . | 
PEP 276 | null | bdfl pronouncement | BDFL Pronouncement This PEP was rejected on 17 June 2005 with a note to python dev . | Such an iterator would simplify the coding of certain for loops in Python . | 
PEP 276 | null | bdfl pronouncement | BDFL Pronouncement This PEP was rejected on 17 June 2005 with a note to python dev . | Such an iterator would simplify the coding of certain for loops in Python . | 
PEP 276 | null | bdfl pronouncement | BDFL Pronouncement This PEP was rejected on 17 June 2005 with a note to python dev . | Such an iterator would simplify the coding of certain for loops in Python . | 
PEP 276 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP was rejected on 17 June 2005 with a note to python dev . | Such an iterator would simplify the coding of certain for loops in Python . | 
PEP 276 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP was rejected on 17 June 2005 with a note to python dev . | Such an iterator would simplify the coding of certain for loops in Python . | 
PEP 276 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP was rejected on 17 June 2005 with a note to python dev . | Such an iterator would simplify the coding of certain for loops in Python . | 
PEP 276 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP was rejected on 17 June 2005 with a note to python dev . | Such an iterator would simplify the coding of certain for loops in Python . | 
PEP 276 | null | bdfl pronouncement | BDFL Pronouncement This PEP was rejected on 17 June 2005 with a note to python dev . | Such an iterator would simplify the coding of certain for loops in Python . | 
PEP 276 | null | bdfl pronouncement | BDFL Pronouncement This PEP was rejected on 17 June 2005 with a note to python dev . | Such an iterator would simplify the coding of certain for loops in Python . | 
PEP 276 | null | bdfl pronouncement | BDFL Pronouncement This PEP was rejected on 17 June 2005 with a note to python dev . | Such an iterator would simplify the coding of certain for loops in Python . | 
PEP 276 | null | bdfl pronouncement | BDFL Pronouncement This PEP was rejected on 17 June 2005 with a note to python dev . | Such an iterator would simplify the coding of certain for loops in Python . | 
PEP 276 | null | bdfl pronouncement | BDFL Pronouncement This PEP was rejected on 17 June 2005 with a note to python dev . | Such an iterator would simplify the coding of certain for loops in Python . | 
PEP 276 | null | bdfl pronouncement | BDFL Pronouncement This PEP was rejected on 17 June 2005 with a note to python dev . | Such an iterator would simplify the coding of certain for loops in Python . | 
PEP 276 | rejected | bdfl pronouncement | BDFL Pronouncement This PEP was rejected on 17 June 2005 with a note to python dev . | Such an iterator would simplify the coding of certain for loops in Python . | 
PEP 276 | null | bdfl pronouncement | BDFL Pronouncement This PEP was rejected on 17 June 2005 with a note to python dev . | Such an iterator would simplify the coding of certain for loops in Python . | 
PEP 276 | null | bdfl pronouncement | BDFL Pronouncement This PEP was rejected on 17 June 2005 with a note to python dev . | Such an iterator would simplify the coding of certain for loops in Python . | 
PEP 276 | null | bdfl pronouncement | BDFL Pronouncement This PEP was rejected on 17 June 2005 with a note to python dev . | Such an iterator would simplify the coding of certain for loops in Python . | 
PEP 276 | null | bdfl pronouncement | BDFL Pronouncement This PEP was rejected on 17 June 2005 with a note to python dev . | Such an iterator would simplify the coding of certain for loops in Python . | 
PEP 276 | null | bdfl pronouncement | BDFL Pronouncement This PEP was rejected on 17 June 2005 with a note to python dev . | Such an iterator would simplify the coding of certain for loops in Python . | 
PEP 276 | null | bdfl pronouncement | BDFL Pronouncement This PEP was rejected on 17 June 2005 with a note to python dev . | Such an iterator would simplify the coding of certain for loops in Python . | 
PEP 276 | rejected | bdfl pronouncement | BDFL Pronouncement This PEP was rejected on 17 June 2005 with a note to python dev . | Such an iterator would simplify the coding of certain for loops in Python . | 
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 277 | null | discussion | There was an explicit discussion about this aspect of PEP 277 , and this interface was accepted as The Right Thing . | On Win32 , as a result of PEP 277 , Unicode file names are only returned for Unicode directory names . | So I think Unix should follow here   return byte string file names for byte string directory names , and Unicode file names for Unicode directory names .
PEP 278 | null | support | There is no special support for output to file with a different 41,47 parameter can also be t '' , meaning open for input as a text file with universal newline interpretation '' . | combined with other mode flags such as '' '' . | 
PEP 278 | null | support | In a Python with universal newline support open the mode ! | calls . | 
PEP 278 | null | support | In a Python with universal newline support open the mode ! | calls . | 
PEP 278 | null | support | In a Python with universal newline support open the mode ! | There is no special support for eval or exec . | 
PEP 278 | null | support | In a Python with universal newline support open the mode ! | There is no special support for eval or exec . | 
PEP 278 | null | support | There is no special support for output to file with a different 41,47 parameter can also be t '' , meaning open for input as a text file with universal newline interpretation '' . | combined with other mode flags such as '' '' . | 
PEP 278 | null | support | In a Python with universal newline support open the mode ! | calls . | 
PEP 278 | null | support | In a Python with universal newline support open the mode ! | calls . | 
PEP 278 | null | support | In a Python with universal newline support open the mode ! | There is no special support for eval or exec . | 
PEP 278 | null | support | In a Python with universal newline support open the mode ! | There is no special support for eval or exec . | 
PEP 278 | null | support | Since Python 2.3 many open like functions supports Universal line mode '' PEP 278 1 . | deprecating u '' open mode . | 
PEP 278 | null | support | Since Python 2.3 many open like functions supports Universal line mode '' PEP 278 1 . | deprecating u '' open mode . | 
PEP 285 | null | discussion | The first round of discussion on python dev brought up some contentious issues where people disagreed strongly with particular details proposed in the PEP , and I put those contentious issues at the top of the review list . |  | 
PEP 285 | null | discussion | The first round of discussion on python dev brought up some contentious issues where people disagreed strongly with particular details proposed in the PEP , and I put those contentious issues at the top of the review list . |  | 
PEP 285 | accepted | discussion | The ACCEPTED thread was just Guido 's final decision , so it 's unlikely it would automatically duplicate much of the prior discussion . | There were several lengthy threads that cropped up in response to Guido 's original posting of the PEP which in turn followed a lengthy discussion on the python dev list . | I 'm not sure any angry comments were called for    hope you did n't take mine in that vein  )  , but I do think that in a case like this , it 's a good idea to review prior threads    e.g. , with google for the newsgroup  )  and perhaps python dev archives .
PEP 285 | accepted | discussion | The ACCEPTED thread was just Guido 's final decision , so it 's unlikely it would automatically duplicate much of the prior discussion . | There were several lengthy threads that cropped up in response to Guido 's original posting of the PEP which in turn followed a lengthy discussion on the python dev list . | I 'm not sure any angry comments were called for    hope you did n't take mine in that vein  )  , but I do think that in a case like this , it 's a good idea to review prior threads    e.g. , with google for the newsgroup  )  and perhaps python dev archives .
PEP 285 | accepted | discussion | The ACCEPTED thread was just Guido 's final decision , so it 's unlikely it would automatically duplicate much of the prior discussion . | There were several lengthy threads that cropped up in response to Guido 's original posting of the PEP which in turn followed a lengthy discussion on the python dev list . | I 'm not sure any angry comments were called for    hope you did n't take mine in that vein  )  , but I do think that in a case like this , it 's a good idea to review prior threads    e.g. , with google for the newsgroup  )  and perhaps python dev archives .
PEP 285 | accepted | discussion | The ACCEPTED thread was just Guido 's final decision , so it 's unlikely it would automatically duplicate much of the prior discussion . | There were several lengthy threads that cropped up in response to Guido 's original posting of the PEP which in turn followed a lengthy discussion on the python dev list . | I 'm not sure any angry comments were called for    hope you did n't take mine in that vein  )  , but I do think that in a case like this , it 's a good idea to review prior threads    e.g. , with google for the newsgroup  )  and perhaps python dev archives .
PEP 285 | accepted | discussion | The ACCEPTED thread was just Guido 's final decision , so it 's unlikely it would automatically duplicate much of the prior discussion . | There were several lengthy threads that cropped up in response to Guido 's original posting of the PEP which in turn followed a lengthy discussion on the python dev list . | I 'm not sure any angry comments were called for    hope you did n't take mine in that vein  )  , but I do think that in a case like this , it 's a good idea to review prior threads    e.g. , with google for the newsgroup  )  and perhaps python dev archives .
PEP 286 | deferred | feedback | PEP Deferral Further exploration of the concepts covered in this PEP has been deferred for lack of a current champion interested in promoting the goals of the PEP and collecting and incorporating feedback , and with sufficient available time to do so effectively . | To deal with these cases , a specialized argument type is proposed . | 
PEP 287 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 287 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 287 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 287 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 287 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 287 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 287 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 287 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 287 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 287 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 287 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 287 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 287 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 287 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 287 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 287 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 287 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 287 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 287 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 287 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 287 | proposal | discussion | The PEP proposes to solve a specific problem docstring formats without any discussion of the problem domain or its requirements . | I think this is backwards . | 
PEP 287 | null | consensus | To establish a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 287 | null | consensus | To establish a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 288 | proposal | support | This PEP proposes that generators support a close method and destruction semantics , such that the restriction can be lifted , expanding the applicability of generators . | The finally clause execution can not be either guaranteed or enforced . | Rationale
PEP 288 | proposal | support | This PEP proposes that generators support a close method and destruction semantics , such that the restriction can be lifted , expanding the applicability of generators . | The finally clause execution can not be either guaranteed or enforced . | Rationale
PEP 288 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 288 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 288 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 288 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 288 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 288 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 288 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 288 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 288 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 288 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 288 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 288 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 288 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 288 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 288 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 288 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 288 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 288 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 288 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 288 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 288 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 288 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 288 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 288 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 288 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 288 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 288 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 288 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 288 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 288 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 289 | updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form . | The bracketed yield syntax left something to be desired the performance gains had not been demonstrated and the range of use cases had not been shown . | The impetus for the discussion was an innovative proposal from Peter Norvig .
PEP 289 | updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form . | The bracketed yield syntax left something to be desired the performance gains had not been demonstrated and the range of use cases had not been shown . | The impetus for the discussion was an innovative proposal from Peter Norvig .
PEP 289 | updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form . | The bracketed yield syntax left something to be desired the performance gains had not been demonstrated and the range of use cases had not been shown . | The impetus for the discussion was an innovative proposal from Peter Norvig    3  )    .
PEP 289 | updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form . | The bracketed yield syntax left something to be desired the performance gains had not been demonstrated and the range of use cases had not been shown . | The impetus for the discussion was an innovative proposal from Peter Norvig    3  )    .
PEP 289 | updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form . | The bracketed yield syntax left something to be desired the performance gains had not been demonstrated and the range of use cases had not been shown . | The impetus for the discussion was an innovative proposal from Peter Norvig    3  )    .
PEP 289 | updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form . | The bracketed yield syntax left something to be desired the performance gains had not been demonstrated and the range of use cases had not been shown . | The impetus for the discussion was an innovative proposal from Peter Norvig    3  )    .
PEP 289 | null | discussion | much discussion on the python dev list , the PEP has been resurrected ! | After , ! | its present form .
PEP 289 | null | discussion | much discussion on the python dev list , the PEP has been resurrected ! | After , ! | its present form .
PEP 289 | bdfl_pronouncement_accepted | feedback | Based on the favorable feedback here and on python dev , Guido has accepted the PEP for Py2 .4 . | Thanks to everyone for the comments on PEP 289 . | Raymond Hettinger
PEP 289 | bdfl_pronouncement_accepted | favorable feedback | Based on the favorable feedback here and on python dev , Guido has accepted the PEP for Py2 .4 . | Thanks to everyone for the comments on PEP 289 . | Raymond Hettinger
PEP 289 | bdfl_pronouncement_accepted | feedback | Based on the favorable feedback here and on python dev , Guido has accepted the PEP for Py2 .4 . | Thanks to everyone for the comments on PEP 289 . | Raymond Hettinger
PEP 289 | bdfl_pronouncement_accepted | favorable feedback | Based on the favorable feedback here and on python dev , Guido has accepted the PEP for Py2 .4 . | Thanks to everyone for the comments on PEP 289 . | Raymond Hettinger
PEP 292 | null | discussion | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | 
PEP 292 | null | discussion | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | 
PEP 292 | accepted | discussion | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | 
PEP 292 | accepted | consensus | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | 
PEP 292 | accepted | discussion | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | 
PEP 292 | accepted | consensus | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | 
PEP 292 | accepted | discussion | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | 
PEP 292 | accepted | discussion | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | 
PEP 292 | updated | support | This issue was resolved by no longer subclassing unicode but making it easy to subclass Template so as to add direct Unicode support with ease . | That would be too surprising and lead to inconsistent usage thanks to sudden mixing of strings and Unicode objects in code . | The second issue was other the design of the API .
PEP 292 | updated | support | This issue was resolved by no longer subclassing unicode but making it easy to subclass Template so as to add direct Unicode support with ease . | That would be too surprising and lead to inconsistent usage thanks to sudden mixing of strings and Unicode objects in code . | The second issue was other the design of the API .
PEP 292 | updated | support | This issue was resolved by no longer subclassing unicode but making it easy to subclass Template so as to add direct Unicode support with ease . | That would be too surprising and lead to inconsistent usage thanks to sudden mixing of strings and Unicode objects in code . | The second issue was other the design of the API .
PEP 292 | null | discussion | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | 
PEP 292 | null | discussion | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | 
PEP 292 | accepted | discussion | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | 
PEP 292 | accepted | consensus | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | 
PEP 292 | accepted | discussion | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | 
PEP 292 | accepted | consensus | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | 
PEP 292 | accepted | discussion | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | 
PEP 292 | accepted | discussion | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | 
PEP 292 | updated | support | This issue was resolved by no longer subclassing unicode but making it easy to subclass Template so as to add direct Unicode support with ease . | That would be too surprising and lead to inconsistent usage thanks to sudden mixing of strings and Unicode objects in code . | The second issue was other the design of the API .
PEP 292 | updated | support | This issue was resolved by no longer subclassing unicode but making it easy to subclass Template so as to add direct Unicode support with ease . | That would be too surprising and lead to inconsistent usage thanks to sudden mixing of strings and Unicode objects in code . | The second issue was other the design of the API .
PEP 292 | updated | support | This issue was resolved by no longer subclassing unicode but making it easy to subclass Template so as to add direct Unicode support with ease . | That would be too surprising and lead to inconsistent usage thanks to sudden mixing of strings and Unicode objects in code . | The second issue was other the design of the API .
PEP 292 | null | discussion | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | 
PEP 292 | null | discussion | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | 
PEP 292 | accepted | discussion | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | 
PEP 292 | accepted | consensus | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | 
PEP 292 | accepted | discussion | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | 
PEP 292 | accepted | consensus | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | 
PEP 292 | accepted | discussion | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | 
PEP 292 | accepted | discussion | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | 
PEP 292 | updated | support | This issue was resolved by no longer subclassing unicode but making it easy to subclass Template so as to add direct Unicode support with ease . | That would be too surprising and lead to inconsistent usage thanks to sudden mixing of strings and Unicode objects in code . | The second issue was other the design of the API .
PEP 292 | updated | support | This issue was resolved by no longer subclassing unicode but making it easy to subclass Template so as to add direct Unicode support with ease . | That would be too surprising and lead to inconsistent usage thanks to sudden mixing of strings and Unicode objects in code . | The second issue was other the design of the API .
PEP 292 | updated | support | This issue was resolved by no longer subclassing unicode but making it easy to subclass Template so as to add direct Unicode support with ease . | That would be too surprising and lead to inconsistent usage thanks to sudden mixing of strings and Unicode objects in code . | The second issue was other the design of the API .
PEP 292 | proposal | support | To address that problem and a number of other concerns , this PEP proposes an alternative approach to compiler supported interpolation , based on a new interpolate magic method , and using a substitution syntax inspired by that used in string . | system call . | 
PEP 292 | proposal | support | To address that problem and a number of other concerns , this PEP proposes an alternative approach to compiler supported interpolation , based on a new interpolate magic method , and using a substitution syntax inspired by that used in string . | system call . | 
PEP 292 | proposal | support | To address that problem and a number of other concerns , this PEP proposes an alternative approach to compiler supported interpolation , based on a new binary operator with a syntactically constrained right hand side , a new interpolate magic method , and a substitution syntax inspired by that used in string . | system call . | 
PEP 292 | proposal | support | To address that problem and a number of other concerns , this PEP proposes an alternative approach to compiler supported interpolation , using i for interpolation '' as the new string prefix and a substitution syntax inspired by that used in string . | system call . | 
PEP 292 | proposal | support | To address that problem and a number of other concerns , this PEP proposes an alternative approach to compiler supported interpolation , using i for interpolation '' as the new string prefix and a substitution syntax inspired by that used in string . | system call . | 
PEP 299 | null | discussion | I must say , this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name '' main '' blocks . | Obscuring that by treating them as equivalent in some contexts such as name shadowing while they remain different in other significant ways is unlikely to help overall . | 
PEP 299 | null | discussion | I must say , this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name '' main '' blocks . | Obscuring that by treating them as equivalent in some contexts such as name shadowing while they remain different in other significant ways is unlikely to help overall . | 
PEP 299 | null | discussion | I must say , this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name '' main '' blocks . | Obscuring that by treating them as equivalent in some contexts such as name shadowing while they remain different in other significant ways is unlikely to help overall . | 
PEP 299 | null | discussion | I must say , this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name '' main '' blocks . | Obscuring that by treating them as equivalent in some contexts such as name shadowing while they remain different in other significant ways is unlikely to help overall . | 
PEP 299 | null | discussion | I must say , this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name '' main '' blocks . | Obscuring that by treating them as equivalent in some contexts such as name shadowing while they remain different in other significant ways is unlikely to help overall . | 
PEP 299 | null | discussion | I must say , this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name '' main '' blocks . | Obscuring that by treating them as equivalent in some contexts such as name shadowing while they remain different in other significant ways is unlikely to help overall . | 
PEP 299 | null | discussion | I must say , this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name '' main '' blocks . | Obscuring that by treating them as equivalent in some contexts such as name shadowing while they remain different in other significant ways is unlikely to help overall . | 
PEP 299 | null | discussion | I must say , this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name '' main '' blocks . | Obscuring that by treating them as equivalent in some contexts such as name shadowing while they remain different in other significant ways is unlikely to help overall . | 
PEP 299 | null | discussion | I must say , this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name '' main '' blocks . | Obscuring that by treating them as equivalent in some contexts such as name shadowing while they remain different in other significant ways is unlikely to help overall . | 
PEP 308 | null | support | Maybe this proves that it 's simply hard to think correctly in terms of conditional expressions , and they should not be used and hence , that language support for them should be rejected . | I 've seen a few posts by now getting the proposed conditional expression the wrong way round . | 
PEP 308 | null | support | Maybe this proves that it 's simply hard to think correctly in terms of conditional expressions , and they should not be used and hence , that language support for them should be rejected . | I 've seen a few posts by now getting the proposed conditional expression the wrong way round . | 
PEP 308 | null | majority | A vote was held , a majority said no change '' , and suddenly now you 're claiming that obviously a vote is n't the important thing '' ? | Um , huh ? | 
PEP 308 | null | vote result | According to this interpretation , the vote resulted in do n't change '' . | semantics on the results , an arguably sane position considering other free software projects use this voting method . | 
PEP 308 | null | vote result | According to this interpretation , the vote resulted in do n't change '' . | semantics on the results , an arguably sane position considering other free software projects use this voting method . | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type textplain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type textplain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | vote_after_discussion | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type textplain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | 
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 308 | vote_after_discussion | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | OTOH , in a different context I might be all for this approach  
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | OTOH , in a different context I might be all for this approach  
PEP 308 | null | majority | The PEP 308 mess has left a rather sour taste in a lot of people 's mouths there was a clear majority in favor of doing something , but the voting was rigged although I doubt if it was done deliberately to make certain that no single proposal would get a majority . | Clearly , I 'm not ominiscient , so that does n't mean it has n't , though . | 
PEP 308 | null | discussion | There was some discussion of whether the language should require surrounding conditional expressions with parentheses . | I doubt I will use conditional expressions very often where there is n't a clear common and uncommon case . | 
PEP 308 | accepted | support | So not only is this system not democratic in the obvious sense of majority rules '' if you get more votes than , the PEP is approved , it 's also almost never even about gathering numerical support which is what this would be able to show . | This does n't strictly equate to number of signatures '' , which is how these sorts of petitions are often treated in modern politics it 's more about strength of argument . | 
PEP 308 | accepted | support | So not only is this system not democratic in the obvious sense of majority rules '' if you get more votes than , the PEP is approved , it 's also almost never even about gathering numerical support which is what this would be able to show . | This does n't strictly equate to number of signatures '' , which is how these sorts of petitions are often treated in modern politics it 's more about strength of argument . | 
PEP 309 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 309 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 309 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 309 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 309 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 309 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 309 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 309 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 309 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 309 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 309 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 309 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 309 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 309 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 309 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 309 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 309 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 309 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 309 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 309 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 309 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 309 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 309 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 309 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 309 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 309 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 309 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 309 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 309 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 309 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 309 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 309 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 309 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 309 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 309 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 309 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 309 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 309 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 309 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 309 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 309 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 309 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 310 | proposal | discussion | Some waxings on PEP 310 PEP 310 proposes the with ' syntax that came up a while back that sparked an immense discussion on python dev . | Contributing threads Unification of logging in Python 's Standard Library | 
PEP 310 | proposal | discussion | Some waxings on PEP 310 PEP 310 proposes the with ' syntax that came up a while back that sparked an immense discussion on python dev . | Contributing threads Unification of logging in Python 's Standard Library | 
PEP 310 | proposal | discussion | Some waxings on PEP 310 PEP 310 proposes the with ' syntax that came up a while back that sparked an immense discussion on python dev . | Contributing threads Unification of logging in Python 's Standard Library | 
PEP 310 | proposal | discussion | Some waxings on PEP 310 PEP 310 proposes the with ' syntax that came up a while back that sparked an immense discussion on python dev . | Contributing threads Unification of logging in Python 's Standard Library | 
PEP 310 | proposal | discussion | Some waxings on PEP 310 PEP 310 proposes the with ' syntax that came up a while back that 20 sparked an immense discussion on python dev . | Contributing threads Unification of logging in Python 's Standard Library 20 | 
PEP 310 | proposal | discussion | Some waxings on PEP 310 PEP 310 proposes the with ' syntax that came up a while back that 20 sparked an immense discussion on python dev . | Contributing threads Unification of logging in Python 's Standard Library 20 | 
PEP 310 | proposal | discussion | Some waxings on PEP 310 PEP 310 proposes the with ' syntax that came up a while back that 20 sparked an immense discussion on python dev . | Contributing threads Unification of logging in Python 's Standard Library 20 | 
PEP 310 | proposal | discussion | Some waxings on PEP 310 PEP 310 proposes the with ' syntax that came up a while back that 20 sparked an immense discussion on python dev . | Contributing threads Unification of logging in Python 's Standard Library 20 | 
PEP 310 | proposal | discussion | Some waxings on PEP 310 PEP 310 proposes the with ' syntax that came up a while back that sparked an immense discussion on python dev . | Contributing threads Unification of logging in Python 's Standard Library | 
PEP 310 | proposal | discussion | Some waxings on PEP 310 PEP 310 proposes the with ' syntax that came up a while back that sparked an immense discussion on python dev . | Contributing threads Unification of logging in Python 's Standard Library | 
PEP 310 | proposal | discussion | Some waxings on PEP 310 PEP 310 proposes the with ' syntax that came up a while back that sparked an immense discussion on python dev . | Contributing threads Unification of logging in Python 's Standard Library | 
PEP 310 | proposal | discussion | Some waxings on PEP 310 PEP 310 proposes the with ' syntax that came up a while back that sparked an immense discussion on python dev . | Contributing threads Unification of logging in Python 's Standard Library | 
PEP 310 | proposal | discussion | Some waxings on PEP 310 PEP 310 proposes the with ' syntax that came up a while back that sparked an immense discussion on python dev . | Contributing threads Unification of logging in Python 's Standard Library | 
PEP 310 | proposal | discussion | Some waxings on PEP 310 PEP 310 proposes the with ' syntax that came up a while back that sparked an immense discussion on python dev . | Contributing threads Unification of logging in Python 's Standard Library | 
PEP 310 | proposal | discussion | Some waxings on PEP 310 PEP 310 proposes the with ' syntax that came up a while back that 20 sparked an immense discussion on python dev . | Contributing threads Unification of logging in Python 's Standard Library 20 | 
PEP 310 | proposal | discussion | Some waxings on PEP 310 PEP 310 proposes the with ' syntax that came up a while back that 20 sparked an immense discussion on python dev . | Contributing threads Unification of logging in Python 's Standard Library 20 | 
PEP 310 | proposal | discussion | Some waxings on PEP 310 PEP 310 proposes the with ' syntax that came up a while back that 20 sparked an immense discussion on python dev . | Contributing threads Unification of logging in Python 's Standard Library 20 | 
PEP 310 | proposal | discussion | Some waxings on PEP 310 PEP 310 proposes the with ' syntax that came up a while back that 20 sparked an immense discussion on python dev . | Contributing threads Unification of logging in Python 's Standard Library 20 | 
PEP 310 | proposal | discussion | Some waxings on PEP 310 PEP 310 proposes the with ' syntax that came up a while back that sparked an immense discussion on python dev . | Contributing threads Unification of logging in Python 's Standard Library | 
PEP 310 | proposal | discussion | Some waxings on PEP 310 PEP 310 proposes the with ' syntax that came up a while back that sparked an immense discussion on python dev . | Contributing threads Unification of logging in Python 's Standard Library | 
PEP 311 | proposal | support | This PEP proposes a new API , for platforms built with threading support , to manage the Python thread state . | Specifically , it provides a solution for authors of complex multi threaded extensions , where the current state of Python i.e. , the state of the GIL is unknown . | An implementation strategy is proposed , along with an initial , platform independent implementation .
PEP 311 | proposal | support | This PEP proposes a new API , for platforms built with threading support , to manage the Python thread state . | Specifically , it provides a solution for authors of complex multi threaded extensions , where the current state of Python i.e. , the state of the GIL is unknown . | An implementation strategy is proposed , along with an initial , platform independent implementation .
PEP 311 | proposal | support | This PEP proposes a new API , for platforms built with threading support , to manage the Python thread state . | Specifically , it provides a solution for authors of complex multi threaded extensions , where the current state of Python i.e. , the state of the GIL is unknown . | An implementation strategy is proposed , along with an initial , platform independent implementation .
PEP 313 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 17 33 18 0000 1.5 3,7 3,7 Version Revision Last Modified Date Author Mike Meyer mwm at mired.org Status Draft Status Rejected Type Standards Track Content Type textplain Created 01 Apr 2003 19,6 19,17 converts the integer to a string that is the Roman numeral literal equivalent to the integer . | 
PEP 313 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 17 33 18 0000 1.5 3,7 3,7 Version Revision Last Modified Date Author Mike Meyer mwm at mired.org Status Draft Status Rejected Type Standards Track Content Type textplain Created 01 Apr 2003 19,6 19,17 converts the integer to a string that is the Roman numeral literal equivalent to the integer . | 
PEP 313 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 17 33 18 0000 1.5 3,7 3,7 Version Revision Last Modified Date Author Mike Meyer mwm at mired.org Status Draft Status Rejected Type Standards Track Content Type textplain Created 01 Apr 2003 19,6 19,17 converts the integer to a string that is the Roman numeral literal equivalent to the integer . | 
PEP 313 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 17 33 18 0000 1.5 3,7 3,7 Version Revision Last Modified Date Author Mike Meyer mwm at mired.org Status Draft Status Rejected Type Standards Track Content Type textplain Created 01 Apr 2003 19,6 19,17 converts the integer to a string that is the Roman numeral literal equivalent to the integer . | 
PEP 313 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 17 33 18 0000 1.5 3,7 3,7 Version Revision Last Modified Date Author Mike Meyer mwm at mired.org Status Draft Status Rejected Type Standards Track Content Type textplain Created 01 Apr 2003 19,6 19,17 converts the integer to a string that is the Roman numeral literal equivalent to the integer . | 
PEP 313 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 17 33 18 0000 1.5 3,7 3,7 Version Revision Last Modified Date Author Mike Meyer mwm at mired.org Status Draft Status Rejected Type Standards Track Content Type textplain Created 01 Apr 2003 19,6 19,17 converts the integer to a string that is the Roman numeral literal equivalent to the integer . | 
PEP 313 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 17 33 18 0000 1.5 3,7 3,7 Version Revision Last Modified Date Author Mike Meyer mwm at mired.org Status Draft Status Rejected Type Standards Track Content Type textplain Created 01 Apr 2003 19,6 19,17 converts the integer to a string that is the Roman numeral literal equivalent to the integer . | 
PEP 313 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 17 33 18 0000 1.5 3,7 3,7 Version Revision Last Modified Date Author Mike Meyer mwm at mired.org Status Draft Status Rejected Type Standards Track Content Type textplain Created 01 Apr 2003 19,6 19,17 converts the integer to a string that is the Roman numeral literal equivalent to the integer . | 
PEP 313 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 17 33 18 0000 1.5 3,7 3,7 Version Revision Last Modified Date Author Mike Meyer mwm at mired.org Status Draft Status Rejected Type Standards Track Content Type textplain Created 01 Apr 2003 19,6 19,17 converts the integer to a string that is the Roman numeral literal equivalent to the integer . | 
PEP 313 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 17 33 18 0000 1.5 3,7 3,7 Version Revision Last Modified Date Author Mike Meyer mwm at mired.org Status Draft Status Rejected Type Standards Track Content Type textplain Created 01 Apr 2003 19,6 19,17 converts the integer to a string that is the Roman numeral literal equivalent to the integer . | 
PEP 313 | rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 17 33 18 0000 1.5 3,7 3,7 Version Revision Last Modified Date Author Mike Meyer mwm at mired.org Status Draft Status Rejected Type Standards Track Content Type textplain Created 01 Apr 2003 19,6 19,17 converts the integer to a string that is the Roman numeral literal equivalent to the integer . | 
PEP 313 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 17 33 18 0000 1.5 3,7 3,7 Version Revision Last Modified Date Author Mike Meyer mwm at mired.org Status Draft Status Rejected Type Standards Track Content Type textplain Created 01 Apr 2003 19,6 19,17 converts the integer to a string that is the Roman numeral literal equivalent to the integer . | 
PEP 313 | rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 17 33 18 0000 1.5 3,7 3,7 Version Revision Last Modified Date Author Mike Meyer mwm at mired.org Status Draft Status Rejected Type Standards Track Content Type textplain Created 01 Apr 2003 19,6 19,17 converts the integer to a string that is the Roman numeral literal equivalent to the integer . | 
PEP 314 | replaced | support | txt Log Message Correct of PEP being replaced Remove sentence about extensibility make punctuation change Specify Supported Platform as multiple use | Modified Files pep 0314 . | 
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 316 | null | support | No , it 's not officially supported and there are currently no plans to support it , though as PEP 316 is Deferred and not Rejected , it 's theoretically possible that it could be Accepted and added to the language some day . | contracts for python . | At any rate , there are several third party libraries available that allow you to use Design by Contract in Python , albeit without language level support .
PEP 318 | proposal | discussion | But it seems reasonable to me to take their meaning to be defined by some combination of 1 the PEP that proposes their introduction , 2 the discussion that preceded and followed the writing of that PEP , and 3 the actual implementations people have produced . | Now , doubtless analytic philosophers could spend hours arguing about what it actually means to make such a statement when decorators are n't currently part of the language spec . | 
PEP 318 | proposal | discussion | But it seems reasonable to me to take their meaning to be defined by some combination of 1 the PEP that proposes their introduction , 2 the discussion that preceded and followed the writing of that PEP , and 3 the actual implementations people have produced . | Now , doubtless analytic philosophers could spend hours arguing about what it actually means to make such a statement when decorators are n't currently part of the language spec . | 
PEP 318 | proposal | discussion | But it seems reasonable to me to take their meaning to be defined by some combination of 1 the PEP that proposes their introduction , 2 the discussion that preceded and followed the writing of that PEP , and 3 the actual implementations people have produced . | Now , doubtless analytic philosophers could spend hours arguing about what it actually means to make such a statement when decorators are n't currently part of the language spec . | 
PEP 319 | null | discussion | Condition Standard Terminology Discussions about iterators and iterables are aided by the standard 384,7 399,7 This PEP proposes that the protocol used by the with statement be known as the context management protocol '' , and that objects that implement that protocol be known as context managers '' . | RLock threading . | 
PEP 322 | null | bdfl pronouncement | Status Accepted Type Standards Track Content Type textx rst 79,82 79,89 A C implementation and unit tests are at http www.python.orgsf834422 BDFL Pronouncement This PEP has been conditionally accepted for Py2 .4 . | Status Draft Type Standards Track Content Type textx rst 4,8 Last Modified Date Author Raymond Hettinger python rcn.com ! | 
PEP 322 | null | bdfl pronouncement | Status Accepted Type Standards Track Content Type textx rst 79,82 79,89 A C implementation and unit tests are at http www.python.orgsf834422 BDFL Pronouncement This PEP has been conditionally accepted for Py2 .4 . | Status Draft Type Standards Track Content Type textx rst 4,8 Last Modified Date Author Raymond Hettinger python rcn.com ! | 
PEP 322 | accepted | bdfl pronouncement | Status Accepted Type Standards Track Content Type textx rst 79,82 79,89 A C implementation and unit tests are at http www.python.orgsf834422 BDFL Pronouncement This PEP has been conditionally accepted for Py2 .4 . | Status Draft Type Standards Track Content Type textx rst 4,8 Last Modified Date Author Raymond Hettinger python rcn.com ! | 
PEP 322 | accepted | bdfl pronouncement | Status Accepted Type Standards Track Content Type textx rst 79,82 79,89 A C implementation and unit tests are at http www.python.orgsf834422 BDFL Pronouncement This PEP has been conditionally accepted for Py2 .4 . | Status Draft Type Standards Track Content Type textx rst 4,8 Last Modified Date Author Raymond Hettinger python rcn.com ! | 
PEP 322 | null | bdfl pronouncement | Status Accepted Type Standards Track Content Type textx rst 79,82 79,89 A C implementation and unit tests are at http www.python.orgsf834422 BDFL Pronouncement This PEP has been conditionally accepted for Py2 .4 . | Status Draft Type Standards Track Content Type textx rst 4,8 Last Modified Date Author Raymond Hettinger python rcn.com ! | 
PEP 322 | null | bdfl pronouncement | Status Accepted Type Standards Track Content Type textx rst 79,82 79,89 A C implementation and unit tests are at http www.python.orgsf834422 BDFL Pronouncement This PEP has been conditionally accepted for Py2 .4 . | Status Draft Type Standards Track Content Type textx rst 4,8 Last Modified Date Author Raymond Hettinger python rcn.com ! | 
PEP 322 | null | bdfl pronouncement | Status Accepted Type Standards Track Content Type textx rst 79,82 79,89 A C implementation and unit tests are at http www.python.orgsf834422 BDFL Pronouncement This PEP has been conditionally accepted for Py2 .4 . | Status Draft Type Standards Track Content Type textx rst 4,8 Last Modified Date Author Raymond Hettinger python rcn.com ! | 
PEP 322 | null | bdfl pronouncement | Status Accepted Type Standards Track Content Type textx rst 79,82 79,89 A C implementation and unit tests are at http www.python.orgsf834422 BDFL Pronouncement This PEP has been conditionally accepted for Py2 .4 . | Status Draft Type Standards Track Content Type textx rst 4,8 Last Modified Date Author Raymond Hettinger python rcn.com ! | 
PEP 322 | null | bdfl pronouncement | Status Accepted Type Standards Track Content Type textx rst 79,82 79,89 A C implementation and unit tests are at http www.python.orgsf834422 BDFL Pronouncement This PEP has been conditionally accepted for Py2 .4 . | Status Draft Type Standards Track Content Type textx rst 4,8 Last Modified Date Author Raymond Hettinger python rcn.com ! | 
PEP 322 | null | bdfl pronouncement | Status Accepted Type Standards Track Content Type textx rst 79,82 79,89 A C implementation and unit tests are at http www.python.orgsf834422 BDFL Pronouncement This PEP has been conditionally accepted for Py2 .4 . | Status Draft Type Standards Track Content Type textx rst 4,8 Last Modified Date Author Raymond Hettinger python rcn.com ! | 
PEP 322 | null | bdfl pronouncement | Status Accepted Type Standards Track Content Type textx rst 79,82 79,89 A C implementation and unit tests are at http www.python.orgsf834422 BDFL Pronouncement This PEP has been conditionally accepted for Py2 .4 . | Status Draft Type Standards Track Content Type textx rst 4,8 Last Modified Date Author Raymond Hettinger python rcn.com ! | 
PEP 322 | null | bdfl pronouncement | Status Accepted Type Standards Track Content Type textx rst 79,82 79,89 A C implementation and unit tests are at http www.python.orgsf834422 BDFL Pronouncement This PEP has been conditionally accepted for Py2 .4 . | Status Draft Type Standards Track Content Type textx rst 4,8 Last Modified Date Author Raymond Hettinger python rcn.com ! | 
PEP 322 | bdfl_pronouncement_accepted | bdfl pronouncement | Status Accepted Type Standards Track Content Type textx rst 79,82 79,89 A C implementation and unit tests are at http www.python.orgsf834422 BDFL Pronouncement This PEP has been conditionally accepted for Py2 .4 . | Status Draft Type Standards Track Content Type textx rst 4,8 Last Modified Date Author Raymond Hettinger python rcn.com ! | 
PEP 322 | bdfl_pronouncement_accepted | bdfl pronouncement | Status Accepted Type Standards Track Content Type textx rst 79,82 79,89 A C implementation and unit tests are at http www.python.orgsf834422 BDFL Pronouncement This PEP has been conditionally accepted for Py2 .4 . | Status Draft Type Standards Track Content Type textx rst 4,8 Last Modified Date Author Raymond Hettinger python rcn.com ! | 
PEP 322 | bdfl_pronouncement_accepted | bdfl pronouncement | Status Accepted Type Standards Track Content Type textx rst 79,82 79,89 A C implementation and unit tests are at http www.python.orgsf834422 BDFL Pronouncement This PEP has been conditionally accepted for Py2 .4 . | Status Draft Type Standards Track Content Type textx rst 4,8 Last Modified Date Author Raymond Hettinger python rcn.com ! | 
PEP 322 | bdfl_pronouncement_accepted | bdfl pronouncement | Status Accepted Type Standards Track Content Type textx rst 79,82 79,89 A C implementation and unit tests are at http www.python.orgsf834422 BDFL Pronouncement This PEP has been conditionally accepted for Py2 .4 . | Status Draft Type Standards Track Content Type textx rst 4,8 Last Modified Date Author Raymond Hettinger python rcn.com ! | 
PEP 322 | null | bdfl pronouncement | Status Accepted Type Standards Track Content Type textx rst 79,82 79,89 A C implementation and unit tests are at http www.python.orgsf834422 BDFL Pronouncement This PEP has been conditionally accepted for Py2 .4 . | Status Draft Type Standards Track Content Type textx rst 4,8 Last Modified Date Author Raymond Hettinger python rcn.com ! | 
PEP 322 | null | bdfl pronouncement | Status Accepted Type Standards Track Content Type textx rst 79,82 79,89 A C implementation and unit tests are at http www.python.orgsf834422 BDFL Pronouncement This PEP has been conditionally accepted for Py2 .4 . | Status Draft Type Standards Track Content Type textx rst 4,8 Last Modified Date Author Raymond Hettinger python rcn.com ! | 
PEP 322 | null | bdfl pronouncement | Status Accepted Type Standards Track Content Type textx rst 79,82 79,89 A C implementation and unit tests are at http www.python.orgsf834422 BDFL Pronouncement This PEP has been conditionally accepted for Py2 .4 . | Status Draft Type Standards Track Content Type textx rst 4,8 Last Modified Date Author Raymond Hettinger python rcn.com ! | 
PEP 322 | null | bdfl pronouncement | Status Accepted Type Standards Track Content Type textx rst 79,82 79,89 A C implementation and unit tests are at http www.python.orgsf834422 BDFL Pronouncement This PEP has been conditionally accepted for Py2 .4 . | Status Draft Type Standards Track Content Type textx rst 4,8 Last Modified Date Author Raymond Hettinger python rcn.com ! | 
PEP 322 | null | bdfl pronouncement | Status Accepted Type Standards Track Content Type textx rst 79,82 79,89 A C implementation and unit tests are at http www.python.orgsf834422 BDFL Pronouncement This PEP has been conditionally accepted for Py2 .4 . | Status Draft Type Standards Track Content Type textx rst 4,8 Last Modified Date Author Raymond Hettinger python rcn.com ! | 
PEP 322 | null | bdfl pronouncement | Status Accepted Type Standards Track Content Type textx rst 79,82 79,89 A C implementation and unit tests are at http www.python.orgsf834422 BDFL Pronouncement This PEP has been conditionally accepted for Py2 .4 . | Status Draft Type Standards Track Content Type textx rst 4,8 Last Modified Date Author Raymond Hettinger python rcn.com ! | 
PEP 322 | null | bdfl pronouncement | Status Accepted Type Standards Track Content Type textx rst 79,82 79,89 A C implementation and unit tests are at http www.python.orgsf834422 BDFL Pronouncement This PEP has been conditionally accepted for Py2 .4 . | Status Draft Type Standards Track Content Type textx rst 4,8 Last Modified Date Author Raymond Hettinger python rcn.com ! | 
PEP 322 | null | bdfl pronouncement | Status Accepted Type Standards Track Content Type textx rst 79,82 79,89 A C implementation and unit tests are at http www.python.orgsf834422 BDFL Pronouncement This PEP has been conditionally accepted for Py2 .4 . | Status Draft Type Standards Track Content Type textx rst 4,8 Last Modified Date Author Raymond Hettinger python rcn.com ! | 
PEP 322 | null | bdfl pronouncement | Status Accepted Type Standards Track Content Type textx rst 79,82 79,89 A C implementation and unit tests are at http www.python.orgsf834422 BDFL Pronouncement This PEP has been conditionally accepted for Py2 .4 . | Status Draft Type Standards Track Content Type textx rst 4,8 Last Modified Date Author Raymond Hettinger python rcn.com ! | 
PEP 322 | null | bdfl pronouncement | Status Accepted Type Standards Track Content Type textx rst 79,82 79,89 A C implementation and unit tests are at http www.python.orgsf834422 BDFL Pronouncement This PEP has been conditionally accepted for Py2 .4 . | Status Draft Type Standards Track Content Type textx rst 4,8 Last Modified Date Author Raymond Hettinger python rcn.com ! | 
PEP 322 | null | bdfl pronouncement | Status Accepted Type Standards Track Content Type textx rst 79,82 79,89 A C implementation and unit tests are at http www.python.orgsf834422 BDFL Pronouncement This PEP has been conditionally accepted for Py2 .4 . | Status Draft Type Standards Track Content Type textx rst 4,8 Last Modified Date Author Raymond Hettinger python rcn.com ! | 
PEP 322 | null | bdfl pronouncement | Status Accepted Type Standards Track Content Type textx rst 79,82 79,89 A C implementation and unit tests are at http www.python.orgsf834422 BDFL Pronouncement This PEP has been conditionally accepted for Py2 .4 . | Status Draft Type Standards Track Content Type textx rst 4,8 Last Modified Date Author Raymond Hettinger python rcn.com ! | 
PEP 335 | null | majority | It provides a clean solution it was rejected because it adds an extra byte code to all code using those operators the majority of which do n't need it . | To everyone claiming that you ca n't overload andor because they are shortcut operators , please re read PEP 335 . | 
PEP 336 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None . | 
PEP 336 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None . | 
PEP 336 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None . | 
PEP 336 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None . | 
PEP 336 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None . | 
PEP 336 | bdfl_pronouncement_rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None . | 
PEP 336 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None . | 
PEP 336 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None . | 
PEP 336 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None . | 
PEP 336 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None . | 
PEP 336 | rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None . | 
PEP 336 | null | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None . | 
PEP 336 | rejected | bdfl pronouncement | BDFL Pronouncement This PEP is rejected . | txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None . | 
PEP 337 | deferred | feedback | FATAL PEP Deferral Further exploration of the concepts covered in this PEP has been deferred for lack of a current champion interested in promoting the goals of the PEP and collecting and incorporating feedback , and with sufficient available time to do so effectively . | setLevel logging . | 
PEP 338 | updated | feedback | I 've updated the PEP to incorporate the feedback from this thread . | 20070706080601.8C3B.JCARLSON uci.edu | The new version is below , and should show up on the website shortly .
PEP 338 | updated | feedback | I 've updated the PEP to incorporate the feedback from this thread . | 20070706080601.8C3B.JCARLSON uci.edu | The new version is below , and should show up on the website shortly .
PEP 338 | updated | feedback | I 've updated the PEP to incorporate the feedback from this thread . | 20070706080601.8C3B.JCARLSON uci.edu | The new version is below , and should show up on the website shortly .
PEP 340 | proposal | discussion | I proposed this at some point during the discussion leading up to the PEP and it was boohed away as too fragile and I agree . | 17015.39213.522060.873605 montanaro.dyndns.org ca471dc20505031013287a2e92 mail.gmail.com 17015.48830.223391.390538 montanaro.dyndns.org ca471dc2050503113127f938b0 mail.gmail.com d58tkb fvp 1 sea.gmane.org | 
PEP 340 | proposal | discussion | I proposed this at some point during the discussion leading up to the PEP and it was boohed away as too fragile and I agree . | 17015.39213.522060.873605 montanaro.dyndns.org ca471dc20505031013287a2e92 mail.gmail.com 17015.48830.223391.390538 montanaro.dyndns.org ca471dc2050503113127f938b0 mail.gmail.com d58tkb fvp 1 sea.gmane.org | 
PEP 340 | null | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | 3 . | 
PEP 340 | null | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | 3 . | 
PEP 340 | null | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | 3 . | 
PEP 340 | null | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | 3 . | 
PEP 340 | null | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | 3 . | 
PEP 340 | null | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | 3 . | 
PEP 340 | accepted | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | 3 . | 
PEP 340 | accepted | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | 3 . | 
PEP 340 | accepted | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | 3 . | 
PEP 342 | null | discussion | Flesh out arguments for TerminatingException Reorganize discussion of hierarchy difference compared to 2.4 Strip out unneeded Rejected Idea sections based on other discussions in the PEP | Minor changes | 
PEP 342 | null | discussion | Flesh out arguments for TerminatingException Reorganize discussion of hierarchy difference compared to 2.4 Strip out unneeded Rejected Idea sections based on other discussions in the PEP | Minor changes | 
PEP 342 | null | discussion | Flesh out arguments for TerminatingException Reorganize discussion of hierarchy difference compared to 2.4 Strip out unneeded Rejected Idea sections based on other discussions in the PEP | Minor changes | 
PEP 342 | null | discussion | Flesh out arguments for TerminatingException Reorganize discussion of hierarchy difference compared to 2.4 Strip out unneeded Rejected Idea sections based on other discussions in the PEP | Minor changes | 
PEP 342 | null | discussion | Flesh out arguments for TerminatingException Reorganize discussion of hierarchy difference compared to 2.4 Strip out unneeded Rejected Idea sections based on other discussions in the PEP | Minor changes | 
PEP 342 | null | discussion | Flesh out arguments for TerminatingException Reorganize discussion of hierarchy difference compared to 2.4 Strip out unneeded Rejected Idea sections based on other discussions in the PEP | Minor changes | 
PEP 342 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 342 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 342 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 342 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 342 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 342 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 342 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 342 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 342 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 342 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 342 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 342 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 342 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 342 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 342 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 342 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 342 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 342 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 342 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 342 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 342 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 342 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 342 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 342 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 342 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 342 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 342 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 342 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 342 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 342 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 342 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 342 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 342 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 342 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 342 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 342 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 342 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 342 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 342 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 342 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 342 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 342 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 342 | null | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | 2 . | 
PEP 342 | null | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | 2 . | 
PEP 342 | null | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | 2 . | 
PEP 342 | null | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | 2 . | 
PEP 342 | null | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | 2 . | 
PEP 342 | null | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | 2 . | 
PEP 342 | accepted | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | 2 . | 
PEP 342 | accepted | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | 2 . | 
PEP 342 | accepted | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | 2 . | 
PEP 342 | null | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | 3 . | 
PEP 342 | null | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | 3 . | 
PEP 342 | null | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | 3 . | 
PEP 342 | null | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | 3 . | 
PEP 342 | null | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | 3 . | 
PEP 342 | null | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | 3 . | 
PEP 342 | accepted | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | 3 . | 
PEP 342 | accepted | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | 3 . | 
PEP 342 | accepted | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | 3 . | 
PEP 342 | null | discussion | Condition Standard Terminology Discussions about iterators and iterables are aided by the standard 384,7 399,7 This PEP proposes that the protocol used by the with statement be known as the context management protocol '' , and that objects that implement that protocol be known as context managers '' . | RLock threading . | 
PEP 342 | null | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | Open Issues 1 . | 
PEP 342 | null | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | Open Issues 1 . | 
PEP 342 | null | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | Open Issues 1 . | 
PEP 342 | null | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | Open Issues 1 . | 
PEP 342 | null | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | Open Issues 1 . | 
PEP 342 | null | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | Open Issues 1 . | 
PEP 342 | accepted | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | Open Issues 1 . | 
PEP 342 | accepted | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | Open Issues 1 . | 
PEP 342 | accepted | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | Open Issues 1 . | 
PEP 342 | null | support | There is a reference implementation 2 that supports everything that the PEP proposes to add . | The PEP is also available at 1 . | 
PEP 342 | null | support | There is a reference implementation 2 that supports everything that the PEP proposes to add . | The PEP is also available at 1 . | 
PEP 344 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 344 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 344 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 344 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 344 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 344 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 344 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 344 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 344 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 344 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 344 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 344 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 344 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 344 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 344 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 344 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 344 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 344 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 344 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 344 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 344 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 344 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 344 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 344 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 344 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 344 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 344 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 344 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 344 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 344 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 344 | null | discussion | Flesh out arguments for TerminatingException Reorganize discussion of hierarchy difference compared to 2.4 Strip out unneeded Rejected Idea sections based on other discussions in the PEP | Minor changes | 
PEP 344 | null | discussion | Flesh out arguments for TerminatingException Reorganize discussion of hierarchy difference compared to 2.4 Strip out unneeded Rejected Idea sections based on other discussions in the PEP | Minor changes | 
PEP 344 | null | discussion | Flesh out arguments for TerminatingException Reorganize discussion of hierarchy difference compared to 2.4 Strip out unneeded Rejected Idea sections based on other discussions in the PEP | Minor changes | 
PEP 344 | null | discussion | Flesh out arguments for TerminatingException Reorganize discussion of hierarchy difference compared to 2.4 Strip out unneeded Rejected Idea sections based on other discussions in the PEP | Minor changes | 
PEP 344 | null | discussion | Flesh out arguments for TerminatingException Reorganize discussion of hierarchy difference compared to 2.4 Strip out unneeded Rejected Idea sections based on other discussions in the PEP | Minor changes | 
PEP 344 | null | discussion | Flesh out arguments for TerminatingException Reorganize discussion of hierarchy difference compared to 2.4 Strip out unneeded Rejected Idea sections based on other discussions in the PEP | Minor changes | 
PEP 345 | updated | discussion | I 've updated the PEP accordingly , and also made some changes after the discussions we had with Martin on Distutils SIG on how versions are defined . | Packages 1.2 4B325C50.6040902 v.loewis.de 94bdd2610912231107p6fbfe13ei7ef2e77a00dc14fe mail.gmail.com 75d5dd69b850e9bd793b43618327e655 preisshare.net 871vilqhsy.fsf uwakimon.sk.tsukuba.ac.jp e626d66af534e03f22749f3dd4a6ff73 preisshare.net 4B3333DF.40705 v.loewis.de 94bdd2610912240152r6131ec9ay2ada83f66aa17b35 mail.gmail.com 4B334109.2060708 v.loewis.de 4B346ACE.2030400 gmail.com | FYI we have introduced a range operator , so one may define a range of versions .
PEP 345 | updated | discussion | I 've updated the PEP accordingly , and also made some changes after the discussions we had with Martin on Distutils SIG on how versions are defined . | Packages 1.2 4B325C50.6040902 v.loewis.de 94bdd2610912231107p6fbfe13ei7ef2e77a00dc14fe mail.gmail.com 75d5dd69b850e9bd793b43618327e655 preisshare.net 871vilqhsy.fsf uwakimon.sk.tsukuba.ac.jp e626d66af534e03f22749f3dd4a6ff73 preisshare.net 4B3333DF.40705 v.loewis.de 94bdd2610912240152r6131ec9ay2ada83f66aa17b35 mail.gmail.com 4B334109.2060708 v.loewis.de 4B346ACE.2030400 gmail.com | FYI we have introduced a range operator , so one may define a range of versions .
PEP 345 | updated | discussion | I 've updated the PEP accordingly , and also made some changes after the discussions we had with Martin on Distutils SIG on how versions are defined . | Packages 1.2 4B325C50.6040902 v.loewis.de 94bdd2610912231107p6fbfe13ei7ef2e77a00dc14fe mail.gmail.com 75d5dd69b850e9bd793b43618327e655 preisshare.net 871vilqhsy.fsf uwakimon.sk.tsukuba.ac.jp e626d66af534e03f22749f3dd4a6ff73 preisshare.net 4B3333DF.40705 v.loewis.de 94bdd2610912240152r6131ec9ay2ada83f66aa17b35 mail.gmail.com 4B334109.2060708 v.loewis.de 4B346ACE.2030400 gmail.com | FYI we have introduced a range operator , so one may define a range of versions .
PEP 345 | updated | feedback | I 've updated PEP 345 with this feedback . | 4B3266CF.7030705 v.loewis.de 94bdd2610912231123o6d3236c7j289df78391083ac5 mail.gmail.com 4B3279E9.4010507 v.loewis.de 94bdd2610912231311h44e5563bn98fab09cab3c37f1 mail.gmail.com 4B3324B2.3030708 v.loewis.de 94bdd2610912240132t345b4d8bnc1bc81d5ae82b194 mail.gmail.com 4B334626.6040505 v.loewis.de 94bdd2610912250412m4402a238j741ce6c3bc7ba53d mail.gmail.com 4B353C81.1080702 v.loewis.de | I 've made the range         )  operator the default one , and added more details on how versions works .
PEP 345 | updated | discussion | I 've updated the PEP accordingly , and also made some changes after the discussions we had with Martin on Distutils SIG on how versions are defined . | Packages 1.2 4B325C50.6040902 v.loewis.de 94bdd2610912231107p6fbfe13ei7ef2e77a00dc14fe mail.gmail.com 75d5dd69b850e9bd793b43618327e655 preisshare.net 871vilqhsy.fsf uwakimon.sk.tsukuba.ac.jp e626d66af534e03f22749f3dd4a6ff73 preisshare.net 4B3333DF.40705 v.loewis.de 94bdd2610912240152r6131ec9ay2ada83f66aa17b35 mail.gmail.com 4B334109.2060708 v.loewis.de 4B346ACE.2030400 gmail.com | FYI we have introduced a range operator , so one may define a range of versions .
PEP 345 | updated | discussion | I 've updated the PEP accordingly , and also made some changes after the discussions we had with Martin on Distutils SIG on how versions are defined . | Packages 1.2 4B325C50.6040902 v.loewis.de 94bdd2610912231107p6fbfe13ei7ef2e77a00dc14fe mail.gmail.com 75d5dd69b850e9bd793b43618327e655 preisshare.net 871vilqhsy.fsf uwakimon.sk.tsukuba.ac.jp e626d66af534e03f22749f3dd4a6ff73 preisshare.net 4B3333DF.40705 v.loewis.de 94bdd2610912240152r6131ec9ay2ada83f66aa17b35 mail.gmail.com 4B334109.2060708 v.loewis.de 4B346ACE.2030400 gmail.com | FYI we have introduced a range operator , so one may define a range of versions .
PEP 345 | updated | discussion | I 've updated the PEP accordingly , and also made some changes after the discussions we had with Martin on Distutils SIG on how versions are defined . | Packages 1.2 4B325C50.6040902 v.loewis.de 94bdd2610912231107p6fbfe13ei7ef2e77a00dc14fe mail.gmail.com 75d5dd69b850e9bd793b43618327e655 preisshare.net 871vilqhsy.fsf uwakimon.sk.tsukuba.ac.jp e626d66af534e03f22749f3dd4a6ff73 preisshare.net 4B3333DF.40705 v.loewis.de 94bdd2610912240152r6131ec9ay2ada83f66aa17b35 mail.gmail.com 4B334109.2060708 v.loewis.de 4B346ACE.2030400 gmail.com | FYI we have introduced a range operator , so one may define a range of versions .
PEP 345 | updated | feedback | I 've updated PEP 345 with this feedback . | 4B3266CF.7030705 v.loewis.de 94bdd2610912231123o6d3236c7j289df78391083ac5 mail.gmail.com 4B3279E9.4010507 v.loewis.de 94bdd2610912231311h44e5563bn98fab09cab3c37f1 mail.gmail.com 4B3324B2.3030708 v.loewis.de 94bdd2610912240132t345b4d8bnc1bc81d5ae82b194 mail.gmail.com 4B334626.6040505 v.loewis.de 94bdd2610912250412m4402a238j741ce6c3bc7ba53d mail.gmail.com 4B353C81.1080702 v.loewis.de | I 've made the range         )  operator the default one , and added more details on how versions works .
PEP 346 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 346 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 346 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 346 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 346 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 346 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 346 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 346 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 346 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 346 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 346 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 346 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 346 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 346 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 346 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 346 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 346 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 346 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 346 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 346 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 346 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 346 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 346 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 346 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 346 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 346 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 346 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 346 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 346 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 346 | null | discussion | A lot of discussion about the specifics of the PEP took place , and Ka Ping is working these into a revised version . | Guido likes the motivation and rationale , but feels that the specification needs more work . | One of the major questions was whether there is no need for both   context   and   cause      to differentiate between explicit and implicit chaining  )  .
PEP 347 | null | discussion | The PEP evolution and discussion are still continuing in August , and since this is for Python 3.0 , are likely to be considered open for some time yet . | The PEP contains the current status for each of these exceptions . | . .
PEP 347 | null | discussion | The PEP evolution and discussion are still continuing in August , and since this is for Python 3.0 , are likely to be considered open for some time yet . | The PEP contains the current status for each of these exceptions . | . .
PEP 347 | null | discussion | The PEP evolution and discussion are still continuing in August , and since this is for Python 3.0 , are likely to be considered open for some time yet . | The PEP contains the current status for each of these exceptions . | . .
PEP 347 | null | discussion | The PEP evolution and discussion are still continuing in August , and since this is for Python 3.0 , are likely to be considered open for some time yet . | The PEP contains the current status for each of these exceptions . | . .
PEP 347 | null | discussion | The PEP evolution and discussion are still continuing in August , and since this is for Python 3.0 , are likely to be considered open for some time yet . | The PEP contains the current status for each of these exceptions . | . .
PEP 347 | null | discussion | The PEP evolution and discussion are still continuing in August , and since this is for Python 3.0 , are likely to be considered open for some time yet . | The PEP contains the current status for each of these exceptions . | . .
PEP 347 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 347 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 347 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 347 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 347 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 347 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 347 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 347 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 347 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 347 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 347 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 347 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 347 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 347 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 347 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 347 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 347 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 347 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 347 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 347 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 347 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 347 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 347 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 347 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 347 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 347 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 347 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 347 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 347 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 347 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 347 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 347 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 347 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 347 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 347 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 347 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 347 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 347 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 347 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 347 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 347 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 347 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 348 | null | discussion | The PEP evolution and discussion are still continuing in August , and since this is for Python 3.0 , are likely to be considered open for some time yet . | The PEP contains the current status for each of these exceptions . | . .
PEP 348 | null | discussion | The PEP evolution and discussion are still continuing in August , and since this is for Python 3.0 , are likely to be considered open for some time yet . | The PEP contains the current status for each of these exceptions . | . .
PEP 348 | null | discussion | Flesh out arguments for TerminatingException Reorganize discussion of hierarchy difference compared to 2.4 Strip out unneeded Rejected Idea sections based on other discussions in the PEP | Minor changes | 
PEP 348 | null | discussion | Flesh out arguments for TerminatingException Reorganize discussion of hierarchy difference compared to 2.4 Strip out unneeded Rejected Idea sections based on other discussions in the PEP | Minor changes | 
PEP 348 | null | discussion | Flesh out arguments for TerminatingException Reorganize discussion of hierarchy difference compared to 2.4 Strip out unneeded Rejected Idea sections based on other discussions in the PEP | Minor changes | 
PEP 348 | null | discussion | Flesh out arguments for TerminatingException Reorganize discussion of hierarchy difference compared to 2.4 Strip out unneeded Rejected Idea sections based on other discussions in the PEP | Minor changes | 
PEP 348 | null | discussion | Flesh out arguments for TerminatingException Reorganize discussion of hierarchy difference compared to 2.4 Strip out unneeded Rejected Idea sections based on other discussions in the PEP | Minor changes | 
PEP 348 | null | discussion | Flesh out arguments for TerminatingException Reorganize discussion of hierarchy difference compared to 2.4 Strip out unneeded Rejected Idea sections based on other discussions in the PEP | Minor changes | 
PEP 348 | null | discussion | The PEP evolution and discussion are still continuing in August , and since this is for Python 3.0 , are likely to be considered open for some time yet . | The PEP contains the current status for each of these exceptions . | . .
PEP 348 | null | discussion | The PEP evolution and discussion are still continuing in August , and since this is for Python 3.0 , are likely to be considered open for some time yet . | The PEP contains the current status for each of these exceptions . | . .
PEP 348 | null | discussion | The PEP evolution and discussion are still continuing in August , and since this is for Python 3.0 , are likely to be considered open for some time yet . | The PEP contains the current status for each of these exceptions . | . .
PEP 348 | null | discussion | The PEP evolution and discussion are still continuing in August , and since this is for Python 3.0 , are likely to be considered open for some time yet . | The PEP contains the current status for each of these exceptions . | . .
PEP 348 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 348 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 348 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 348 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 348 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 348 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 348 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 348 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 348 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 348 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 348 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 348 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 348 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 348 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 348 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 348 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 348 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 348 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 348 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 348 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 348 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 348 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 348 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 348 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 348 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 348 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 348 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 348 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 348 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 348 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 348 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 348 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 348 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 348 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 348 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 348 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 348 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 348 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 348 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 348 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 348 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 348 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 349 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 349 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 349 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 349 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 349 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 349 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 349 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 349 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 349 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 349 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 349 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 349 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 349 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 349 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 349 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 349 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 349 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 349 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 349 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 349 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 349 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 349 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 349 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 349 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 349 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 349 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 349 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 349 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 349 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 349 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 349 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 349 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 349 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 349 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 349 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 349 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 349 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 349 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 349 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 349 | null | discussion | There was a brief discussion about consistency between this proposal and the operator module 's itemgetter and attrgetter which , unlike Martin 's proposal , use argument strings instead of attributes to determine the appropriate function to produce . | where the virtual '' object would serve as a virtual instance so that the self '' argument to the lower '' method could be supplied later . | 
PEP 349 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 349 | null | feedback | There was a little feedback on the proposal , with a few people wanting to go back to the text builtin instead of changing str , but no final decisions were made . | Otherwise subclasses of unicode would likely get UnicodeEncodeErrors when their str methods were called . | 
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 353 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 363 | updated | discussion | I 've sent an updated version of PEP 363 to the editors , which includes the following summary of the discussion . | wrapping up dynamic attribute ' discussion . | I hope I 've captured the important points , but please let me know if there 's something important I 've left out or misrepresented .
PEP 365 | proposal | support | It 's a runtime the PEP actually merely proposes that a further addition to be made to support bootstrapping , also . | Which , these days , is , well , almost any large Python project , from Chandler to Enthought to Zope . | 
PEP 365 | proposal | support | It 's a runtime the PEP actually merely proposes that a further addition to be made to support bootstrapping , also . | Which , these days , is , well , almost any large Python project , from Chandler to Enthought to Zope . | 
PEP 365 | proposal | support | It 's a runtime the PEP actually merely proposes that a further addition to be made to support bootstrapping , also . | Which , these days , is , well , almost any large Python project , from Chandler to Enthought to Zope . | 
PEP 365 | proposal | support | It 's a runtime the PEP actually merely proposes that a further addition to be made to support bootstrapping , also . | Which , these days , is , well , almost any large Python project , from Chandler to Enthought to Zope . | 
PEP 365 | proposal | support | It 's a runtime the PEP actually merely proposes that a further addition to be made to support bootstrapping , also . | Which , these days , is , well , almost any large Python project , from Chandler to Enthought to Zope . | 
PEP 365 | proposal | support | It 's a runtime the PEP actually merely proposes that a further addition to be made to support bootstrapping , also . | Which , these days , is , well , almost any large Python project , from Chandler to Enthought to Zope . | 
PEP 366 | updated | feedback | I 've updated the PEP to incorporate the feedback from this thread . | 20070706080601.8C3B.JCARLSON uci.edu | The new version is below , and should show up on the website shortly .
PEP 366 | updated | feedback | I 've updated the PEP to incorporate the feedback from this thread . | 20070706080601.8C3B.JCARLSON uci.edu | The new version is below , and should show up on the website shortly .
PEP 366 | updated | feedback | I 've updated the PEP to incorporate the feedback from this thread . | 20070706080601.8C3B.JCARLSON uci.edu | The new version is below , and should show up on the website shortly .
PEP 368 | deferred | feedback | PEP Deferral Further exploration of the concepts covered in this PEP has been deferred for lack of a current champion interested in promoting the goals of the PEP and collecting and incorporating feedback , and with sufficient available time to do so effectively . | txt 3,7 3,7 Version Revision Last Modified Date Author Lino Mastrodomenico l.mastrodomenico at gmail.com Status Draft Status Deferred Type Standards Track Content Type textx rst Created 28 Jun 2007 39,6 39,13 also proposed , together with a mixin class that helps adding support for the protocol to existing image classes . | 
PEP 376 | proposal | support | PEP 376 proposes a stdlib replacement for a portion of this functionality , but the status of whether it 's actually going to support anything other than distutils , pip , and setuptools ' backward compatibility mode is apparently still up for grabs . | Right '' is relative , but right now it is certainly the only way to read a list of installed packages , that 's compatible with both distutils and setuptools based ways of installing packages including of course pip , enstaller , and buildout . | From ben   python at benfinney .
PEP 376 | proposal | support | PEP 376 proposes a stdlib replacement for a portion of this functionality , but the status of whether it 's actually going to support anything other than distutils , pip , and setuptools ' backward compatibility mode is apparently still up for grabs . | Right '' is relative , but right now it is certainly the only way to read a list of installed packages , that 's compatible with both distutils and setuptools based ways of installing packages including of course pip , enstaller , and buildout . | From ben   python at benfinney .
PEP 376 | proposal | support | PEP 376 proposes a stdlib replacement for a portion of this functionality , but the status of whether it 's actually going to support anything other than distutils , pip , and setuptools ' backward compatibility mode is apparently still up for grabs . | Right '' is relative , but right now it is certainly the only way to read a list of installed packages , that 's compatible with both distutils and setuptools based ways of installing packages including of course pip , enstaller , and buildout . | From ben   python at benfinney .
PEP 376 | proposal | support | PEP 376 proposes a stdlib replacement for a portion of this functionality , but the status of whether it 's actually going to support anything other than distutils , pip , and setuptools ' backward compatibility mode is apparently still up for grabs . | Right '' is relative , but right now it is certainly the only way to read a list of installed packages , that 's compatible with both distutils and setuptools based ways of installing packages including of course pip , enstaller , and buildout . | From ben   python at benfinney .
PEP 376 | proposal | support | PEP 376 proposes a stdlib replacement for a portion of this functionality , but the status of whether it 's actually going to support anything other than distutils , pip , and setuptools ' backward compatibility mode is apparently still up for grabs . | Right '' is relative , but right now it is certainly the only way to read a list of installed packages , that 's compatible with both distutils and setuptools based ways of installing packages including of course pip , enstaller , and buildout . | From ben   python at benfinney .
PEP 376 | proposal | support | PEP 376 proposes a stdlib replacement for a portion of this functionality , but the status of whether it 's actually going to support anything other than distutils , pip , and setuptools ' backward compatibility mode is apparently still up for grabs . | Right '' is relative , but right now it is certainly the only way to read a list of installed packages , that 's compatible with both distutils and setuptools based ways of installing packages including of course pip , enstaller , and buildout . | From ben   python at benfinney .
PEP 376 | proposal | support | PEP 376 proposes a stdlib replacement for a portion of this functionality , but the status of whether it 's actually going to support anything other than distutils , pip , and setuptools ' backward compatibility mode is apparently still up for grabs . | Right '' is relative , but right now it is certainly the only way to read a list of installed packages , that 's compatible with both distutils and setuptools based ways of installing packages including of course pip , enstaller , and buildout . | From ben   python at benfinney .
PEP 376 | null | feedback | As a matter of fact , there 's already great feedback from Active State on PEP 376 because they want to be early adopters of the upcoming standard and make sure we do the right choices in there . | That 's for example what we are getting from projects like PyPM or Enthought Enstaller . | Enthought also started to use the prototype we have written for PEP 386    version comparisons  )  IIRC .
PEP 376 | null | feedback | As a matter of fact , there 's already great feedback from Active State on PEP 376 because they want to be early adopters of the upcoming standard and make sure we do the right choices in there . | That 's for example what we are getting from projects like PyPM or Enthought Enstaller . | Enthought also started to use the prototype we have written for PEP 386    version comparisons  )  IIRC .
PEP 376 | null | feedback | As a matter of fact , there 's already great feedback from Active State on PEP 376 because they want to be early adopters of the upcoming standard and make sure we do the right choices in there . | That 's for example what we are getting from projects like PyPM or Enthought Enstaller . | Enthought also started to use the prototype we have written for PEP 386    version comparisons  )  IIRC .
PEP 376 | null | feedback | As a matter of fact , there 's already great feedback from Active State on PEP 376 because they want to be early adopters of the upcoming standard and make sure we do the right choices in there . | That 's for example what we are getting from projects like PyPM or Enthought Enstaller . | Enthought also started to use the prototype we have written for PEP 386    version comparisons  )  IIRC .
PEP 376 | proposal | support | I propose an extension to PEP 376 to support the development of projects such that | extension to pep 376 develop '' installation . | 
PEP 376 | proposal | support | I propose an extension to PEP 376 to support the development of projects such that | extension to pep 376 develop '' installation . | 
PEP 376 | proposal | support | I propose an extension to PEP 376 to support the development of projects such that | extension to pep 376 develop '' installation . | 
PEP 381 | null | support | araujo , kelseyhightower , tarek priority normal severity normal status open title Add support for PEP 381 Mirror Authenticity type feature request versions 3rd party , Python 2.5 , Python 2.6 , Python 2.7 , Python 3.1 , Python 3.2 , Python 3.3 | assignee tarek components Distutils2 messages 129736 nosy alexis , eric . | 
PEP 381 | null | support | araujo , kelseyhightower , tarek priority normal severity normal status open title Add support for PEP 381 Mirror Authenticity type feature request versions 3rd party , Python 2.5 , Python 2.6 , Python 2.7 , Python 3.1 , Python 3.2 , Python 3.3 | assignee tarek components Distutils2 messages 129736 nosy alexis , eric . | 
PEP 381 | null | support | araujo , kelseyhightower , tarek priority normal severity normal status open title Add support for PEP 381 Mirror Authenticity type feature request versions 3rd party , Python 2.5 , Python 2.6 , Python 2.7 , Python 3.1 , Python 3.2 , Python 3.3 | assignee tarek components Distutils2 messages 129736 nosy alexis , eric . | 
PEP 381 | null | support | araujo , kelseyhightower , tarek priority normal severity normal status open title Add support for PEP 381 Mirror Authenticity type feature request versions 3rd party , Python 2.5 , Python 2.6 , Python 2.7 , Python 3.1 , Python 3.2 , Python 3.3 | assignee tarek components Distutils2 messages 129736 nosy alexis , eric . | 
PEP 381 | null | support | araujo , kelseyhightower , tarek priority normal severity normal status open title Add support for PEP 381 Mirror Authenticity type feature request versions 3rd party , Python 2.5 , Python 2.6 , Python 2.7 , Python 3.1 , Python 3.2 , Python 3.3 | assignee tarek components Distutils2 messages 129736 nosy alexis , eric . | 
PEP 381 | null | support | araujo , kelseyhightower , tarek priority normal severity normal status open title Add support for PEP 381 Mirror Authenticity type feature request versions 3rd party , Python 2.5 , Python 2.6 , Python 2.7 , Python 3.1 , Python 3.2 , Python 3.3 | assignee tarek components Distutils2 messages 129736 nosy alexis , eric . | 
PEP 382 | null | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | null | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | null | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | null | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | accepted | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | accepted | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | null | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | null | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | accepted | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | accepted | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | null | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | null | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | null | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | null | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | accepted | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | accepted | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | null | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | null | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | accepted | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | accepted | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 384 | null | discussion | Hi , Since discussion has trailed off without any blocking objections , I 'm accepting PEP 384 . | pep 384 accepted . | Martin , you may mark the PEP accepted and proceed with merging the implementation for the beta on Saturday .
PEP 384 | accepted | discussion | Hi , Since discussion has trailed off without any blocking objections , I 'm accepting PEP 384 . | pep 384 accepted . | Martin , you may mark the PEP accepted and proceed with merging the implementation for the beta on Saturday .
PEP 382 | null | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | null | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | null | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | null | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | accepted | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | accepted | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | null | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | null | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | accepted | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | accepted | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 384 | null | discussion | Hi , Since discussion has trailed off without any blocking objections , I 'm accepting PEP 384 . | pep 384 accepted . | Martin , you may mark the PEP accepted and proceed with merging the implementation for the beta on Saturday .
PEP 384 | accepted | discussion | Hi , Since discussion has trailed off without any blocking objections , I 'm accepting PEP 384 . | pep 384 accepted . | Martin , you may mark the PEP accepted and proceed with merging the implementation for the beta on Saturday .
PEP 386 | null | feedback | I 'll update the PEP then , and if there 's no more feedback here , I 'll propose it at python dev | http bitbucket.orgtarekdistutilsversion ? | Regards Tarek
PEP 386 | null | feedback | I 'll update the PEP then , and if there 's no more feedback here , I 'll propose it at python dev | http bitbucket.orgtarekdistutilsversion ? | Regards Tarek
PEP 386 | null | feedback | I 'll update the PEP then , and if there 's no more feedback here , I 'll propose it at python dev | http bitbucket.orgtarekdistutilsversion ? | Regards Tarek
PEP 386 | null | feedback | I 'll update the PEP then , and if there 's no more feedback here , I 'll propose it at python dev | http bitbucket.orgtarekdistutilsversion ? | Regards Tarek
PEP 386 | proposal | discussion | On behalf of the Distutils SIG , I would like to propose PEP 386 for inclusion in the sdtlib , and have a final discussion here on Python dev . | This is the email I will send to python dev , so everyone can review it before it is sent | http www.python.org dev peps pep 0386
PEP 386 | proposal | discussion | On behalf of the Distutils SIG , I would like to propose PEP 386 for inclusion in the sdtlib , and have a final discussion here on Python dev . | This is the email I will send to python dev , so everyone can review it before it is sent | http www.python.org dev peps pep 0386
PEP 386 | proposal | discussion | On behalf of the Distutils SIG , I would like to propose PEP 386 for inclusion in the sdtlib , and have a final discussion here on Python dev . | This is the email I will send to python dev , so everyone can review it before it is sent | http www.python.org dev peps pep 0386
PEP 386 | proposal | discussion | On behalf of the Distutils SIG , I would like to propose PEP 386 for inclusion in the sdtlib , and have a final discussion here on Python dev . | This is the email I will send to python dev , so everyone can review it before it is sent | http www.python.org dev peps pep 0386
PEP 386 | proposal | discussion | On behalf of the Distutils SIG , I would like to propose PEP 386 for inclusion in the sdtlib , and have a final discussion here on Python dev . | Hello , | http www.python.org dev peps pep 0386
PEP 386 | proposal | discussion | On behalf of the Distutils SIG , I would like to propose PEP 386 for inclusion in the sdtlib , and have a final discussion here on Python dev . | Hello , | http www.python.org dev peps pep 0386
PEP 386 | proposal | discussion | On behalf of the Distutils SIG , I would like to propose PEP 386 for inclusion in the sdtlib , and have a final discussion here on Python dev . | Hello , | http www.python.org dev peps pep 0386
PEP 386 | proposal | discussion | On behalf of the Distutils SIG , I would like to propose PEP 386 for inclusion in the sdtlib , and have a final discussion here on Python dev . | Hello , | http www.python.org dev peps pep 0386
PEP 389 | proposal | discussion | Below is a new PEP based on discussions from the stdlib sig , which proposes to add the argparse module to the standard library in Python 2.7 and 3.2 . | pep 389 argparse new command line parsing module . | Looking forward to your feedback !
PEP 389 | proposal | discussion | Below is a new PEP based on discussions from the stdlib sig , which proposes to add the argparse module to the standard library in Python 2.7 and 3.2 . | pep 389 argparse new command line parsing module . | Looking forward to your feedback !
PEP 389 | proposal | discussion | Below is a new PEP based on discussions from the stdlib sig , which proposes to add the argparse module to the standard library in Python 2.7 and 3.2 . | pep 389 argparse new command line parsing module . | Looking forward to your feedback !
PEP 390 | null | discussion | tarek at ziade.org Status Draft BDFL Delegate Nick Coghlan Discussions To distutils sig at python.org Status Rejected Type Standards Track Content Type textx rst Created 10 October 2009 Python Version 2.7 and 3.2 Post History Resolution http mail.python.orgpipermaildistutils sig2013 April020597.html Abstract 16,6 19,18 This PEP describes a new section and a new format for the setup . | txt 3,12 3,15 Version Revision Last Modified Date Author Tarek Ziad ? | 
PEP 390 | null | discussion | tarek at ziade.org Status Draft BDFL Delegate Nick Coghlan Discussions To distutils sig at python.org Status Rejected Type Standards Track Content Type textx rst Created 10 October 2009 Python Version 2.7 and 3.2 Post History Resolution http mail.python.orgpipermaildistutils sig2013 April020597.html Abstract 16,6 19,18 This PEP describes a new section and a new format for the setup . | txt 3,12 3,15 Version Revision Last Modified Date Author Tarek Ziad ? | 
PEP 390 | null | discussion | tarek at ziade.org Status Draft BDFL Delegate Nick Coghlan Discussions To distutils sig at python.org Status Rejected Type Standards Track Content Type textx rst Created 10 October 2009 Python Version 2.7 and 3.2 Post History Resolution http mail.python.orgpipermaildistutils sig2013 April020597.html Abstract 16,6 19,18 This PEP describes a new section and a new format for the setup . | txt 3,12 3,15 Version Revision Last Modified Date Author Tarek Ziad ? | 
PEP 390 | null | discussion | tarek at ziade.org Status Draft BDFL Delegate Nick Coghlan Discussions To distutils sig at python.org Status Rejected Type Standards Track Content Type textx rst Created 10 October 2009 Python Version 2.7 and 3.2 Post History Resolution http mail.python.orgpipermaildistutils sig2013 April020597.html Abstract 16,6 19,18 This PEP describes a new section and a new format for the setup . | txt 3,12 3,15 Version Revision Last Modified Date Author Tarek Ziad ? | 
PEP 390 | null | discussion | tarek at ziade.org Status Draft BDFL Delegate Nick Coghlan Discussions To distutils sig at python.org Status Rejected Type Standards Track Content Type textx rst Created 10 October 2009 Python Version 2.7 and 3.2 Post History Resolution http mail.python.orgpipermaildistutils sig2013 April020597.html Abstract 16,6 19,18 This PEP describes a new section and a new format for the setup . | txt 3,12 3,15 Version Revision Last Modified Date Author Tarek Ziad ? | 
PEP 390 | null | discussion | tarek at ziade.org Status Draft BDFL Delegate Nick Coghlan Discussions To distutils sig at python.org Status Rejected Type Standards Track Content Type textx rst Created 10 October 2009 Python Version 2.7 and 3.2 Post History Resolution http mail.python.orgpipermaildistutils sig2013 April020597.html Abstract 16,6 19,18 This PEP describes a new section and a new format for the setup . | txt 3,12 3,15 Version Revision Last Modified Date Author Tarek Ziad ? | 
PEP 390 | null | discussion | tarek at ziade.org Status Draft BDFL Delegate Nick Coghlan Discussions To distutils sig at python.org Status Rejected Type Standards Track Content Type textx rst Created 10 October 2009 Python Version 2.7 and 3.2 Post History Resolution http mail.python.orgpipermaildistutils sig2013 April020597.html Abstract 16,6 19,18 This PEP describes a new section and a new format for the setup . | txt 3,12 3,15 Version Revision Last Modified Date Author Tarek Ziad ? | 
PEP 390 | null | discussion | tarek at ziade.org Status Draft BDFL Delegate Nick Coghlan Discussions To distutils sig at python.org Status Rejected Type Standards Track Content Type textx rst Created 10 October 2009 Python Version 2.7 and 3.2 Post History Resolution http mail.python.orgpipermaildistutils sig2013 April020597.html Abstract 16,6 19,18 This PEP describes a new section and a new format for the setup . | txt 3,12 3,15 Version Revision Last Modified Date Author Tarek Ziad ? | 
PEP 390 | null | discussion | tarek at ziade.org Status Draft BDFL Delegate Nick Coghlan Discussions To distutils sig at python.org Status Rejected Type Standards Track Content Type textx rst Created 10 October 2009 Python Version 2.7 and 3.2 Post History Resolution http mail.python.orgpipermaildistutils sig2013 April020597.html Abstract 16,6 19,18 This PEP describes a new section and a new format for the setup . | txt 3,12 3,15 Version Revision Last Modified Date Author Tarek Ziad ? | 
PEP 390 | null | discussion | tarek at ziade.org Status Draft BDFL Delegate Nick Coghlan Discussions To distutils sig at python.org Status Rejected Type Standards Track Content Type textx rst Created 10 October 2009 Python Version 2.7 and 3.2 Post History Resolution http mail.python.orgpipermaildistutils sig2013 April020597.html Abstract 16,6 19,18 This PEP describes a new section and a new format for the setup . | txt 3,12 3,15 Version Revision Last Modified Date Author Tarek Ziad ? | 
PEP 390 | null | discussion | tarek at ziade.org Status Draft BDFL Delegate Nick Coghlan Discussions To distutils sig at python.org Status Rejected Type Standards Track Content Type textx rst Created 10 October 2009 Python Version 2.7 and 3.2 Post History Resolution http mail.python.orgpipermaildistutils sig2013 April020597.html Abstract 16,6 19,18 This PEP describes a new section and a new format for the setup . | txt 3,12 3,15 Version Revision Last Modified Date Author Tarek Ziad ? | 
PEP 390 | null | discussion | tarek at ziade.org Status Draft BDFL Delegate Nick Coghlan Discussions To distutils sig at python.org Status Rejected Type Standards Track Content Type textx rst Created 10 October 2009 Python Version 2.7 and 3.2 Post History Resolution http mail.python.orgpipermaildistutils sig2013 April020597.html Abstract 16,6 19,18 This PEP describes a new section and a new format for the setup . | txt 3,12 3,15 Version Revision Last Modified Date Author Tarek Ziad ? | 
PEP 393 | null | discussion | I 've only read the PEP and not followed the discussion due to lack of time , so if any of this is no longer valid , that 's probably because the PEP was n't updated | Here goes anyway ... | 
PEP 393 | null | discussion | I 've only read the PEP and not followed the discussion due to lack of time , so if any of this is no longer valid , that 's probably because the PEP was n't updated | Here goes anyway ... | 
PEP 397 | null | support | Of course PEP 397 does not support pythonw ' in shebang lines , but the pythonw '' I am suggesting here will not appear in the final output script anyway . | If the PEP 397 launcher is available , then of course we should use that . | 
PEP 397 | null | support | Of course PEP 397 does not support pythonw ' in shebang lines , but the pythonw '' I am suggesting here will not appear in the final output script anyway . | If the PEP 397 launcher is available , then of course we should use that . | 
PEP 397 | null | support | Of course PEP 397 does not support pythonw ' in shebang lines , but the pythonw '' I am suggesting here will not appear in the final output script anyway . | If the PEP 397 launcher is available , then of course we should use that . | 
PEP 397 | null | support | Of course PEP 397 does not support pythonw ' in shebang lines , but the pythonw '' I am suggesting here will not appear in the final output script anyway . | If the PEP 397 launcher is available , then of course we should use that . | 
PEP 397 | null | support | Of course PEP 397 does not support pythonw ' in shebang lines , but the pythonw '' I am suggesting here will not appear in the final output script anyway . | If the PEP 397 launcher is available , then of course we should use that . | 
PEP 397 | null | support | Of course PEP 397 does not support pythonw ' in shebang lines , but the pythonw '' I am suggesting here will not appear in the final output script anyway . | If the PEP 397 launcher is available , then of course we should use that . | 
PEP 397 | updated | discussion | I 've updated PEP 397 Python launcher for Windows '' based on recent discussions and Vinay 's implementation . | new update to pep397 python launcher for windows . | 
PEP 400 | deferred | feedback | PEP Deferral Further exploration of the concepts covered in this PEP has been deferred for lack of a current champion interested in promoting the goals of the PEP and collecting and incorporating feedback , and with sufficient available time to do so effectively . | txt 3,7 3,7 Version Revision Last Modified Date Author Victor Stinner victor.stinner at gmail.com Status Draft Status Deferred Type Standards Track Content Type textx rst Created 28 May 2011 25,6 25,13 http www.python.org dev peps pep 3116 , and reimplemented in C in Python 2.7 and 3.1 . | 
PEP 414 | null | support | Support 2.5 or earlier , where you would have to use u xxx ' in place of u xxx ' , unless PEP 414 is accepted but you would still have the exception syntax hacks to upset you . | 2 . | 
PEP 414 | null | support | Support 2.5 or earlier , where you would have to use u xxx ' in place of u xxx ' , unless PEP 414 is accepted but you would still have the exception syntax hacks to upset you . | 2 . | 
PEP 414 | null | support | Support 2.5 or earlier , where you would have to use u xxx ' in place of u xxx ' , unless PEP 414 is accepted but you would still have the exception syntax hacks to upset you . | 2 . | 
PEP 414 | null | support | Support 2.5 or earlier , where you would have to use u xxx ' in place of u xxx ' , unless PEP 414 is accepted but you would still have the exception syntax hacks to upset you . | 2 . | 
PEP 414 | null | support | Support 2.5 or earlier , where you would have to use u xxx ' in place of u xxx ' , unless PEP 414 is accepted but you would still have the exception syntax hacks to upset you . | 2 . | 
PEP 414 | null | support | Support 2.5 or earlier , where you would have to use u xxx ' in place of u xxx ' , unless PEP 414 is accepted but you would still have the exception syntax hacks to upset you . | 2 . | 
PEP 414 | null | support | Support 2.5 or earlier , where you would have to use u xxx ' in place of u xxx ' , unless PEP 414 is accepted but you would still have the exception syntax hacks to upset you . | 2 . | 
PEP 414 | null | support | Support 2.5 or earlier , where you would have to use u xxx ' in place of u xxx ' , unless PEP 414 is accepted but you would still have the exception syntax hacks to upset you . | 2 . | 
PEP 414 | proposal | support | Armin , I propose that you correct the factual deficits of the PEP i.e. remove all claims that can not be supported by facts , or are otherwise incorrect or misleading . | CAP7 vJ DPuvA p cC g0cA Gh4a N0Ob2xtiNDXvWMgSrY uA mail.gmail.com CADiSq7fAqcwiwghW OFjvfLO2Jn Y Tfqt1m HeYrynD8Nza3A mail.gmail.com 4F4B5634.3020609 v.loewis.de 4F4BB7F2.4070804 stoneleaf.us 20120227174110.96AFA2500E4 webabinitio.net 1330365662.12046.72.camel thinko jigiut 9cf 1 dough.gmane.org 1330372221.12046.119.camel thinko 20120227202335.ACAFD25009E webabinitio.net 1330375169.12046.133.camel thinko loom.20120227T215225 116 post.gmane.org 1330377399.12046.158.camel thinko 20120227215829.1DF3B2500E4 webabinitio.net 4F4BFF98.2080007 active 4.com | 
PEP 414 | null | support | Armin , I propose that you correct the factual deficits of the PEP i.e. remove all claims that can not be supported by facts , or are otherwise incorrect or misleading . | CAP7 vJ DPuvA p cC g0cA Gh4a N0Ob2xtiNDXvWMgSrY uA mail.gmail.com CADiSq7fAqcwiwghW OFjvfLO2Jn Y Tfqt1m HeYrynD8Nza3A mail.gmail.com 4F4B5634.3020609 v.loewis.de 4F4BB7F2.4070804 stoneleaf.us 20120227174110.96AFA2500E4 webabinitio.net 1330365662.12046.72.camel thinko jigiut 9cf 1 dough.gmane.org 1330372221.12046.119.camel thinko 20120227202335.ACAFD25009E webabinitio.net 1330375169.12046.133.camel thinko loom.20120227T215225 116 post.gmane.org 1330377399.12046.158.camel thinko 20120227215829.1DF3B2500E4 webabinitio.net 4F4BFF98.2080007 active 4.com | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | txt 3,10 3,11 Version Revision Last Modified Date Author Armin Ronacher armin.ronacher at active 4.com Status Draft Status Accepted Type Standards Track Content Type textx rst Created 15 Feb 2012 Post History 28 Feb 2012 Abstract 18,6 19,12 without the need for an explicit 2to3 run . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | txt 3,10 3,11 Version Revision Last Modified Date Author Armin Ronacher armin.ronacher at active 4.com Status Draft Status Accepted Type Standards Track Content Type textx rst Created 15 Feb 2012 Post History 28 Feb 2012 Abstract 18,6 19,12 without the need for an explicit 2to3 run . | 
PEP 414 | accepted | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | txt 3,10 3,11 Version Revision Last Modified Date Author Armin Ronacher armin.ronacher at active 4.com Status Draft Status Accepted Type Standards Track Content Type textx rst Created 15 Feb 2012 Post History 28 Feb 2012 Abstract 18,6 19,12 without the need for an explicit 2to3 run . | 
PEP 414 | accepted | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | txt 3,10 3,11 Version Revision Last Modified Date Author Armin Ronacher armin.ronacher at active 4.com Status Draft Status Accepted Type Standards Track Content Type textx rst Created 15 Feb 2012 Post History 28 Feb 2012 Abstract 18,6 19,12 without the need for an explicit 2to3 run . | 
PEP 414 | accepted | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | txt 3,10 3,11 Version Revision Last Modified Date Author Armin Ronacher armin.ronacher at active 4.com Status Draft Status Accepted Type Standards Track Content Type textx rst Created 15 Feb 2012 Post History 28 Feb 2012 Abstract 18,6 19,12 without the need for an explicit 2to3 run . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | txt 3,10 3,11 Version Revision Last Modified Date Author Armin Ronacher armin.ronacher at active 4.com Status Draft Status Accepted Type Standards Track Content Type textx rst Created 15 Feb 2012 Post History 28 Feb 2012 Abstract 18,6 19,12 without the need for an explicit 2to3 run . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | txt 3,10 3,11 Version Revision Last Modified Date Author Armin Ronacher armin.ronacher at active 4.com Status Draft Status Accepted Type Standards Track Content Type textx rst Created 15 Feb 2012 Post History 28 Feb 2012 Abstract 18,6 19,12 without the need for an explicit 2to3 run . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | txt 3,10 3,11 Version Revision Last Modified Date Author Armin Ronacher armin.ronacher at active 4.com Status Draft Status Accepted Type Standards Track Content Type textx rst Created 15 Feb 2012 Post History 28 Feb 2012 Abstract 18,6 19,12 without the need for an explicit 2to3 run . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | txt 3,10 3,11 Version Revision Last Modified Date Author Armin Ronacher armin.ronacher at active 4.com Status Draft Status Accepted Type Standards Track Content Type textx rst Created 15 Feb 2012 Post History 28 Feb 2012 Abstract 18,6 19,12 without the need for an explicit 2to3 run . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | txt 3,10 3,11 Version Revision Last Modified Date Author Armin Ronacher armin.ronacher at active 4.com Status Draft Status Accepted Type Standards Track Content Type textx rst Created 15 Feb 2012 Post History 28 Feb 2012 Abstract 18,6 19,12 without the need for an explicit 2to3 run . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | txt 3,10 3,11 Version Revision Last Modified Date Author Armin Ronacher armin.ronacher at active 4.com Status Draft Status Accepted Type Standards Track Content Type textx rst Created 15 Feb 2012 Post History 28 Feb 2012 Abstract 18,6 19,12 without the need for an explicit 2to3 run . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | txt 3,10 3,11 Version Revision Last Modified Date Author Armin Ronacher armin.ronacher at active 4.com Status Draft Status Accepted Type Standards Track Content Type textx rst Created 15 Feb 2012 Post History 28 Feb 2012 Abstract 18,6 19,12 without the need for an explicit 2to3 run . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | txt 3,10 3,11 Version Revision Last Modified Date Author Armin Ronacher armin.ronacher at active 4.com Status Draft Status Accepted Type Standards Track Content Type textx rst Created 15 Feb 2012 Post History 28 Feb 2012 Abstract 18,6 19,12 without the need for an explicit 2to3 run . | 
PEP 414 | bdfl_pronouncement_accepted | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | txt 3,10 3,11 Version Revision Last Modified Date Author Armin Ronacher armin.ronacher at active 4.com Status Draft Status Accepted Type Standards Track Content Type textx rst Created 15 Feb 2012 Post History 28 Feb 2012 Abstract 18,6 19,12 without the need for an explicit 2to3 run . | 
PEP 414 | bdfl_pronouncement_accepted | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | txt 3,10 3,11 Version Revision Last Modified Date Author Armin Ronacher armin.ronacher at active 4.com Status Draft Status Accepted Type Standards Track Content Type textx rst Created 15 Feb 2012 Post History 28 Feb 2012 Abstract 18,6 19,12 without the need for an explicit 2to3 run . | 
PEP 414 | bdfl_pronouncement_accepted | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | txt 3,10 3,11 Version Revision Last Modified Date Author Armin Ronacher armin.ronacher at active 4.com Status Draft Status Accepted Type Standards Track Content Type textx rst Created 15 Feb 2012 Post History 28 Feb 2012 Abstract 18,6 19,12 without the need for an explicit 2to3 run . | 
PEP 414 | bdfl_pronouncement_accepted | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | txt 3,10 3,11 Version Revision Last Modified Date Author Armin Ronacher armin.ronacher at active 4.com Status Draft Status Accepted Type Standards Track Content Type textx rst Created 15 Feb 2012 Post History 28 Feb 2012 Abstract 18,6 19,12 without the need for an explicit 2to3 run . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | txt 3,10 3,11 Version Revision Last Modified Date Author Armin Ronacher armin.ronacher at active 4.com Status Draft Status Accepted Type Standards Track Content Type textx rst Created 15 Feb 2012 Post History 28 Feb 2012 Abstract 18,6 19,12 without the need for an explicit 2to3 run . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | txt 3,10 3,11 Version Revision Last Modified Date Author Armin Ronacher armin.ronacher at active 4.com Status Draft Status Accepted Type Standards Track Content Type textx rst Created 15 Feb 2012 Post History 28 Feb 2012 Abstract 18,6 19,12 without the need for an explicit 2to3 run . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | txt 3,10 3,11 Version Revision Last Modified Date Author Armin Ronacher armin.ronacher at active 4.com Status Draft Status Accepted Type Standards Track Content Type textx rst Created 15 Feb 2012 Post History 28 Feb 2012 Abstract 18,6 19,12 without the need for an explicit 2to3 run . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | txt 3,10 3,11 Version Revision Last Modified Date Author Armin Ronacher armin.ronacher at active 4.com Status Draft Status Accepted Type Standards Track Content Type textx rst Created 15 Feb 2012 Post History 28 Feb 2012 Abstract 18,6 19,12 without the need for an explicit 2to3 run . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | txt 3,10 3,11 Version Revision Last Modified Date Author Armin Ronacher armin.ronacher at active 4.com Status Draft Status Accepted Type Standards Track Content Type textx rst Created 15 Feb 2012 Post History 28 Feb 2012 Abstract 18,6 19,12 without the need for an explicit 2to3 run . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | txt 3,10 3,11 Version Revision Last Modified Date Author Armin Ronacher armin.ronacher at active 4.com Status Draft Status Accepted Type Standards Track Content Type textx rst Created 15 Feb 2012 Post History 28 Feb 2012 Abstract 18,6 19,12 without the need for an explicit 2to3 run . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | txt 3,10 3,11 Version Revision Last Modified Date Author Armin Ronacher armin.ronacher at active 4.com Status Draft Status Accepted Type Standards Track Content Type textx rst Created 15 Feb 2012 Post History 28 Feb 2012 Abstract 18,6 19,12 without the need for an explicit 2to3 run . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | txt 3,10 3,11 Version Revision Last Modified Date Author Armin Ronacher armin.ronacher at active 4.com Status Draft Status Accepted Type Standards Track Content Type textx rst Created 15 Feb 2012 Post History 28 Feb 2012 Abstract 18,6 19,12 without the need for an explicit 2to3 run . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | reduce the volume of changes needed when porting Unicode aware Python 2 applications to Python 3 . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | reduce the volume of changes needed when porting Unicode aware Python 2 applications to Python 3 . | 
PEP 414 | accepted | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | reduce the volume of changes needed when porting Unicode aware Python 2 applications to Python 3 . | 
PEP 414 | accepted | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | reduce the volume of changes needed when porting Unicode aware Python 2 applications to Python 3 . | 
PEP 414 | accepted | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | reduce the volume of changes needed when porting Unicode aware Python 2 applications to Python 3 . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | reduce the volume of changes needed when porting Unicode aware Python 2 applications to Python 3 . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | reduce the volume of changes needed when porting Unicode aware Python 2 applications to Python 3 . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | reduce the volume of changes needed when porting Unicode aware Python 2 applications to Python 3 . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | reduce the volume of changes needed when porting Unicode aware Python 2 applications to Python 3 . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | reduce the volume of changes needed when porting Unicode aware Python 2 applications to Python 3 . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | reduce the volume of changes needed when porting Unicode aware Python 2 applications to Python 3 . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | reduce the volume of changes needed when porting Unicode aware Python 2 applications to Python 3 . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | reduce the volume of changes needed when porting Unicode aware Python 2 applications to Python 3 . | 
PEP 414 | bdfl_pronouncement_accepted | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | reduce the volume of changes needed when porting Unicode aware Python 2 applications to Python 3 . | 
PEP 414 | bdfl_pronouncement_accepted | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | reduce the volume of changes needed when porting Unicode aware Python 2 applications to Python 3 . | 
PEP 414 | bdfl_pronouncement_accepted | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | reduce the volume of changes needed when porting Unicode aware Python 2 applications to Python 3 . | 
PEP 414 | bdfl_pronouncement_accepted | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | reduce the volume of changes needed when porting Unicode aware Python 2 applications to Python 3 . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | reduce the volume of changes needed when porting Unicode aware Python 2 applications to Python 3 . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | reduce the volume of changes needed when porting Unicode aware Python 2 applications to Python 3 . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | reduce the volume of changes needed when porting Unicode aware Python 2 applications to Python 3 . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | reduce the volume of changes needed when porting Unicode aware Python 2 applications to Python 3 . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | reduce the volume of changes needed when porting Unicode aware Python 2 applications to Python 3 . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | reduce the volume of changes needed when porting Unicode aware Python 2 applications to Python 3 . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | reduce the volume of changes needed when porting Unicode aware Python 2 applications to Python 3 . | 
PEP 414 | null | bdfl pronouncement | BDFL Pronouncement This PEP has been formally accepted for Python 3.3 . | reduce the volume of changes needed when porting Unicode aware Python 2 applications to Python 3 . | 
PEP 414 | proposal | support | This PEP proposes that Python 3.3 restore support for Python 2 's Unicode literal syntax , substantially increasing the number of lines of existing Python 2 code in Unicode aware applications that will run without modification on Python 3 . | Many thought that the unicode literals future import might make a common source possible , but it turns out that it 's doing more harm than good . | 
PEP 414 | proposal | support | This PEP proposes that Python 3.3 restore support for Python 2 's Unicode literal syntax , substantially increasing the number of lines of existing Python 2 code in Unicode aware applications that will run without modification on Python 3 . | Many thought that the unicode literals future import might make a common source possible , but it turns out that it 's doing more harm than good . | 
PEP 414 | proposal | support | This PEP proposes that Python 3.3 restore support for Python 2 's Unicode literal syntax , substantially increasing the number of lines of existing Python 2 code in Unicode aware applications that will run without modification on Python 3 . | Many thought that the unicode literals future import might make a common source possible , but it turns out that it 's doing more harm than good . | 
PEP 418 | proposal | discussion | The PEP proposes cross platform functions with consistent semantics , which is where a discussion was needed . | As a thin wrapper , adding it to the time module was pretty much uncontroversial , I think . | Regards
PEP 418 | proposal | discussion | The PEP proposes cross platform functions with consistent semantics , which is where a discussion was needed . | As a thin wrapper , adding it to the time module was pretty much uncontroversial , I think . | Regards
PEP 418 | proposal | discussion | The PEP proposes cross platform functions with consistent semantics , which is where a discussion was needed . | As a thin wrapper , adding it to the time module was pretty much uncontroversial , I think . | Regards
PEP 419 | deferred | feedback | PEP Deferral Further exploration of the concepts covered in this PEP has been deferred for lack of a current champion interested in promoting the goals of the PEP and collecting and incorporating feedback , and with sufficient available time to do so effectively . | txt 3,7 3,7 Version Revision Last Modified Date Author Paul Colomiets paul at colomiets.name Status Draft Status Deferred Type Standards Track Content Type textx rst Created 06 Apr 2012 16,6 16,14 This PEP proposes a way to protect Python code from being interrupted inside a finally clause or during context manager cleanup . | 
PEP 424 | updated | discussion | I 've updated the PEP to reflect the discussion . | ju0gaq mci 1 dough.gmane.org CAP1 2W7wjbBU0z10Y CZsADUhDXWmBU5sjbd6shtdX8CqPgqpw mail.gmail.com | There are two major changes  
PEP 424 | updated | discussion | I 've updated the PEP to reflect the discussion . | ju0gaq mci 1 dough.gmane.org CAP1 2W7wjbBU0z10Y CZsADUhDXWmBU5sjbd6shtdX8CqPgqpw mail.gmail.com | There are two major changes  
PEP 428 | call_for_poll | controversy | Since there has been some controversy about the joining syntax used in PEP 428 filesystem path objects , I would like to run an informal poll about it . | Hello , | 
PEP 428 | updated | discussion | I 've updated PEP 428 following the previous discussion . | Hello , | Highlights  
PEP 428 | null | discussion | Discussion Division operator The division operator came out first in a poll about the path joining operator . | txt 656,6 656,42 provided , for example some of the functionality of the shutil module . | 
PEP 431 | proposal | support | This PEP proposes the implementation of concrete time zone support in the Python standard library , and also improvements to the time zone API to deal with ambiguous time specifications during DST changes . | Abstract | Proposal
PEP 431 | proposal | support | This PEP proposes the implementation of concrete time zone support in the Python standard library , and also improvements to the time zone API to deal with ambiguous time specifications during DST changes . | Abstract | Proposal
PEP 433 | null | consensus | Alternatives Rejected Alternatives The PEP 433 is a previous attempt proposing various other alternatives , but no consensus could be reached . | The file descriptor is not expected to be inherited by child processes . | 
PEP 433 | null | no consensus | Alternatives Rejected Alternatives The PEP 433 is a previous attempt proposing various other alternatives , but no consensus could be reached . | The file descriptor is not expected to be inherited by child processes . | 
PEP 433 | null | consensus | Alternatives Rejected Alternatives The PEP 433 is a previous attempt proposing various other alternatives , but no consensus could be reached . | The file descriptor is not expected to be inherited by child processes . | 
PEP 433 | null | no consensus | Alternatives Rejected Alternatives The PEP 433 is a previous attempt proposing various other alternatives , but no consensus could be reached . | The file descriptor is not expected to be inherited by child processes . | 
PEP 433 | null | consensus | Alternatives Rejected Alternatives The PEP 433 is a previous attempt proposing various other alternatives , but no consensus could be reached . | The file descriptor is not expected to be inherited by child processes . | 
PEP 433 | null | no consensus | Alternatives Rejected Alternatives The PEP 433 is a previous attempt proposing various other alternatives , but no consensus could be reached . | The file descriptor is not expected to be inherited by child processes . | 
PEP 433 | null | consensus | Alternatives Rejected Alternatives The PEP 433 is a previous attempt proposing various other alternatives , but no consensus could be reached . | The file descriptor is not expected to be inherited by child processes . | 
PEP 433 | null | no consensus | Alternatives Rejected Alternatives The PEP 433 is a previous attempt proposing various other alternatives , but no consensus could be reached . | The file descriptor is not expected to be inherited by child processes . | 
PEP 433 | null | consensus | Alternatives Rejected Alternatives The PEP 433 is a previous attempt proposing various other alternatives , but no consensus could be reached . | The file descriptor is not expected to be inherited by child processes . | 
PEP 433 | null | no consensus | Alternatives Rejected Alternatives The PEP 433 is a previous attempt proposing various other alternatives , but no consensus could be reached . | The file descriptor is not expected to be inherited by child processes . | 
PEP 433 | null | consensus | Alternatives Rejected Alternatives The PEP 433 is a previous attempt proposing various other alternatives , but no consensus could be reached . | The file descriptor is not expected to be inherited by child processes . | 
PEP 433 | null | no consensus | Alternatives Rejected Alternatives The PEP 433 is a previous attempt proposing various other alternatives , but no consensus could be reached . | The file descriptor is not expected to be inherited by child processes . | 
PEP 438 | proposal | support | This PEP proposes that the official means of having an installer locate and find package files which are hosted externally to PyPI become the use of multi index support instead of the practice of using external links on the simple installer API . | Abstract | It is important to remember that this is   not   about forcing anyone to host their files on PyPI .
PEP 438 | proposal | support | This PEP proposes that the official means of having an installer locate and find package files which are hosted externally to PyPI become the use of multi index support instead of the practice of using external links on the simple installer API . | Abstract | It is important to remember that this is   not   about forcing anyone to host their files on PyPI .
PEP 438 | proposal | support | I 've put forward a PEP that proposes a way to resolve the problems with reliability and implicitness of the current method of not hosting PyPI with centralizing around the multiple indexURL support . | That being said , nobody is trying to mandate that everyone must upload to PyPI . | 
PEP 438 | null | consensus | This has always been a major difficulty with the PEP process , and any similar consensus approach the huge majority of users simply are n't active in the community '' . | pip and allow external CACac1F8mioHi9qY3vYXMfk8ZMBmWeOatcZ3E sgF aiP1ygkAQ mail.gmail.com 20140513111610.GA21030 sleipnir.bytereef.org 8B08D49C 13C7 40B7 923B 1D80034F6361 stufft.io 5373C79F.4080708 egenix.com 674E3135 B812 44AF 94BB BF3629EA02EF coderanger.net 5373D174.1090808 egenix.com E2B7EBFE 72D4 4B81 9506 6151C332267D coderanger.net 20140515104103.GB13554 sleipnir.bytereef.org CADiSq7fr5KmVnV K6NENEkzQqFfjG68KMrjknA zRnnvZHEYA mail.gmail.com 20140515113847.GA14004 sleipnir.bytereef.org | 
PEP 438 | proposal | support | This PEP proposes that the official means of having an installer locate and find package files which are hosted externally to PyPI become the use of multi index support instead of the practice of using external links on the simple installer API . | Abstract | It is important to remember that this is   not   about forcing anyone to host their files on PyPI .
PEP 438 | proposal | support | This PEP proposes that the official means of having an installer locate and find package files which are hosted externally to PyPI become the use of multi index support instead of the practice of using external links on the simple installer API . | Abstract | It is important to remember that this is   not   about forcing anyone to host their files on PyPI .
PEP 438 | proposal | support | This PEP proposes the deprecation and removal of support for hosting files externally to PyPI as well as the deprecation and removal of the functionality added by PEP 438 , particularly rel information to classify different types of links and the meta tag to indicate API version . | Abstract | Rationale
PEP 438 | proposal | support | This PEP proposes the deprecation and removal of support for hosting files externally to PyPI as well as the deprecation and removal of the functionality added by PEP 438 , particularly rel information to classify different types of links and the meta tag to indicate API version . | This PEP does not propose mandating that all authors upload their projects to PyPI in order to exist in the index nor does it propose any change to the human facing elements of PyPI . | 
PEP 438 | proposal | support | This PEP proposes the deprecation and removal of support for hosting files externally to PyPI as well as the deprecation and removal of the functionality added by PEP 438 , particularly rel information to classify different types of links and the meta tag to indicate API version . | This PEP does not propose mandating that all authors upload their projects to PyPI in order to exist in the index nor does it propose any change to the human facing elements of PyPI . | 
PEP 439 | updated | discussion | I 've updated PEP 439 to note the outcome of the recent discussion regarding setuptools dependencies and a couple of other minor things . | Hi all , | The changes are viewable here   http hg.python.org peps diff 0d57c70eff91 pep 0439.txt
PEP 439 | updated | discussion | I 've updated PEP 439 to note the outcome of the recent discussion regarding setuptools dependencies and a couple of other minor things . | Hi all , | The changes are viewable here   http hg.python.org peps diff 0d57c70eff91 pep 0439.txt
PEP 446 | proposal | feedback | I propose that we wait for one more day for any feedback from others in response to this post , and then accept the PEP . | Wow , that was quick ! |     Guido van Rossum    python.org guido  )    next part   An HTML attachment was scrubbed ... URL    http mail.python.org pipermail python dev attachments 20130826 87a8daeb attachment 0001.html 
PEP 446 | proposal | feedback | I propose that we wait for one more day for any feedback from others in response to this post , and then accept the PEP . | Wow , that was quick ! |     Guido van Rossum    python.org guido  )    next part   An HTML attachment was scrubbed ... URL    http mail.python.org pipermail python dev attachments 20130826 87a8daeb attachment 0001.html 
PEP 446 | proposal | feedback | I propose that we wait for one more day for any feedback from others in response to this post , and then accept the PEP . | Wow , that was quick ! |     Guido van Rossum    python.org guido  )    next part   An HTML attachment was scrubbed ... URL    http mail.python.org pipermail python dev attachments 20130826 87a8daeb attachment 0001.html 
PEP 453 | proposal | support | This PEP proposes that the Installing Python Modules http docs.python.org 3 install guide be updated to officially recommend the use of pip as the default installer for Python packages , and that appropriate technical changes be made in Python 2.7 , 3.3 and 3.4 to provide pip by default in support of that recommendation . | Instead , pip will be a bundled application provided along with CPython for the convenience of Python users , but subject to its own development life cycle and able to be upgraded independently of the core interpreter and standard library . | 
PEP 453 | proposal | support | This PEP proposes that the Installing Python Modules http docs.python.org 3 install guide be updated to officially recommend the use of pip as the default installer for Python packages , and that appropriate technical changes be made in Python 2.7 , 3.3 and 3.4 to provide pip by default in support of that recommendation . | Instead , pip will be a bundled application provided along with CPython for the convenience of Python users , but subject to its own development life cycle and able to be upgraded independently of the core interpreter and standard library . | 
PEP 453 | proposal | support | This PEP proposes that the Installing Python Modules http docs.python.org 3 install guide be updated to officially recommend the use of pip as the default installer for Python packages , and that appropriate technical changes be made in Python 2.7 , 3.3 and 3.4 to provide pip by default in support of that recommendation . | Instead , pip will be a bundled application provided along with CPython for the convenience of Python users , but subject to its own development life cycle and able to be upgraded independently of the core interpreter and standard library . | 
PEP 453 | proposal | support | To support that end , this PEP proposes the inclusion of an ensurepip bootstrapping module in Python 3.4 along with the upcoming maintenance releases of Python 2.7 and 3.3 , as well as changes to the way Python installed scripts are handled on Windows . | However , to avoid recommending a tool that CPython does not provide , it is further proposed that the pip package manager be made available by default when installing CPython and when creating virtual environments using the standard library 's venv module via the pyvenv command line utility . | 
PEP 453 | proposal | support | This PEP proposes that the Installing Python Modules http docs.python.org 3 install guide be updated to officially recommend the use of pip as the default installer for Python packages , and that appropriate technical changes be made in Python 2.7 , 3.3 and 3.4 to provide pip by default in support of that recommendation . | Abstract | 
PEP 453 | proposal | support | This PEP proposes that the Installing Python Modules http docs.python.org 3 install guide be updated to officially recommend the use of pip as the default installer for Python packages , and that appropriate technical changes be made in Python 2.7 , 3.3 and 3.4 to provide pip by default in support of that recommendation . | Abstract | 
PEP 453 | proposal | support | This PEP proposes that the Installing Python Modules http docs.python.org 3 install guide be updated to officially recommend the use of pip as the default installer for Python packages , and that appropriate technical changes be made in Python 2.7 , 3.3 and 3.4 to provide pip by default in support of that recommendation . | Abstract | 
PEP 453 | proposal | support | To support that end , this PEP proposes the inclusion of an ensurepip bootstrapping module in Python 3.4 along with the upcoming maintenance releases of Python 2.7 and 3.3 , as well as changes to the way Python installed scripts are handled on Windows for Python 3.4 only . | However , to avoid recommending a tool that CPython does not provide , it is further proposed that the pip package manager be made available by default when installing CPython and when creating virtual environments using the standard library 's venv module via the pyvenv command line utility . | 
PEP 462 | proposal | support | This PEP also proposes changes to the way certain supporting repositories such as the repository for Python Enhancement Proposals are managed to make them more accessible to new contributors , and easier to manage for core developers . | This proposal is intended to allow core developers to make more effective use of the time they have available to contribute to CPython , which should also result in an improved experience for other contributors that are reliant on the core team to get their changes incorporated . | 
PEP 462 | proposal | support | This PEP also proposes changes to the way certain supporting repositories such as the repository for Python Enhancement Proposals are managed to make them more accessible to new contributors , and easier to manage for core developers . | This proposal is intended to allow core developers to make more effective use of the time they have available to contribute to CPython , which should also result in an improved experience for other contributors that are reliant on the core team to get their changes incorporated . | 
PEP 462 | proposal | support | This PEP also proposes changes to the way certain supporting repositories such as the repository for Python Enhancement Proposals are managed to make them more accessible to new contributors , and easier to manage for core developers . | This proposal is intended to allow core developers to make more effective use of the time they have available to contribute to CPython , which should also result in an improved experience for other contributors that are reliant on the core team to get their changes incorporated . | 
PEP 462 | proposal | support | This PEP also proposes changes to the way certain supporting repositories such as the repository for Python Enhancement Proposals are managed to make them more accessible to new contributors , and easier to manage for core developers . | This proposal is intended to allow core developers to make more effective use of the time they have available to contribute to CPython , which should also result in an improved experience for other contributors that are reliant on the core team to get their changes incorporated . | 
PEP 462 | proposal | support | This PEP also proposes changes to the way certain supporting repositories such as the repository for Python Enhancement Proposals are managed to make them more accessible to new contributors , and easier to manage for core developers . | This proposal is intended to allow core developers to make more effective use of the time they have available to contribute to CPython , which should also result in an improved experience for other contributors that are reliant on the core team to get their changes incorporated . | 
PEP 462 | proposal | support | This PEP proposes introducing a more sophisticated approach to repository management that includes more self service '' features , including support for pull requests . | These supporting repositories could benefit greatly from user the simple pull request '' style workflow made popular by code hosting sites like GitHub and BitBucket . | 
PEP 462 | proposal | support | This PEP also proposes changes to the way certain supporting repositories such as the repository for Python Enhancement Proposals are managed to make them more accessible to new contributors , and easier to manage for core developers . | txt 21,11 21,6 experience for other contributors that are reliant on the core team to get their changes incorporated . | 
PEP 462 | proposal | support | This PEP also proposes changes to the way certain supporting repositories such as the repository for Python Enhancement Proposals are managed to make them more accessible to new contributors , and easier to manage for core developers . | txt 21,11 21,6 experience for other contributors that are reliant on the core team to get their changes incorporated . | 
PEP 462 | proposal | support | This PEP also proposes changes to the way certain supporting repositories such as the repository for Python Enhancement Proposals are managed to make them more accessible to new contributors , and easier to manage for core developers . | txt 21,11 21,6 experience for other contributors that are reliant on the core team to get their changes incorporated . | 
PEP 462 | proposal | support | This PEP also proposes changes to the way certain supporting repositories such as the repository for Python Enhancement Proposals are managed to make them more accessible to new contributors , and easier to manage for core developers . | txt 21,11 21,6 experience for other contributors that are reliant on the core team to get their changes incorporated . | 
PEP 462 | proposal | support | This PEP also proposes changes to the way certain supporting repositories such as the repository for Python Enhancement Proposals are managed to make them more accessible to new contributors , and easier to manage for core developers . | txt 21,11 21,6 experience for other contributors that are reliant on the core team to get their changes incorporated . | 
PEP 462 | proposal | support | This PEP proposes introducing a more sophisticated approach to repository management that includes more self service '' features , including support for pull requests . | These supporting repositories could benefit greatly from user the simple pull request '' style workflow made popular by code hosting sites like GitHub and BitBucket . | 
PEP 462 | proposal | support | This PEP proposes migrating the repository hosting of CPython and the supporting repositories to Git and Github . | In particular this PEP proposes changes to the following repositories https hg.python.orgdevguide https hg.python.orgdevinabox https hg.python.orgpeps This PEP does not propose any changes to the core development workflow for CPython itself . | 
PEP 462 | null | support | This particular PEP is offered as an alternative to PEP 474 and PEP 462 which aims to achieve the same overall benefits but restricts itself to tools that support Mercurial and are completely Open Source . | It also proposes adding Phabricator as an alternative to Github Pull Requests to handle reviewing changes . | 
PEP 465 | proposal | support | To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in bytecode repository directory i.e. , the pycache directory . | This PEP proposes eliminating the concept of PYO files from Python . | 
PEP 465 | proposal | support | To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in bytecode repository directory i.e. , the pycache directory . | txt 0,0 1,303 PEP 488 Title Elimination of PYO files Version Revision Last Modified Date Author Brett Cannon brett at python.org Status Draft Type Standards Track Content Type textx rst Created 20 Feb 2015 Post History 2015 03 06 Abstract This PEP proposes eliminating the concept of PYO files from Python . | 
PEP 465 | call_for_poll | poll result | I have closed the issue of file name formatting thanks to the informal poll results being very clear on the preferred format and also closed the idea of embedding the optimization level in the bytecode file metadata that can be another PEP if someone cares to write that one . | Here is the latest draft of the PEP . | 
PEP 465 | call_for_poll | poll result | I have closed the issue of file name formatting thanks to the informal poll results being very clear on the preferred format and also closed the idea of embedding the optimization level in the bytecode file metadata that can be another PEP if someone cares to write that one . | Here is the latest draft of the PEP . | 
PEP 465 | call_for_poll | poll result | I have closed the issue of file name formatting thanks to the informal poll results being very clear on the preferred format and also closed the idea of embedding the optimization level in the bytecode file metadata that can be another PEP if someone cares to write that one . | Here is the latest draft of the PEP . | 
PEP 465 | call_for_poll | poll result | I have closed the issue of file name formatting thanks to the informal poll results being very clear on the preferred format and also closed the idea of embedding the optimization level in the bytecode file metadata that can be another PEP if someone cares to write that one . | Here is the latest draft of the PEP . | 
PEP 465 | proposal | support | To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in bytecode repository directory i.e. , the pycache directory . | This PEP proposes eliminating the concept of PYO files from Python . | 
PEP 465 | proposal | support | To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in the bytecode repository directory when it 's called for i.e. , the pycache directory . | This PEP proposes eliminating the concept of PYO files from Python . | 
PEP 470 | proposal | support | This PEP proposes that the official means of having an installer locate and find package files which are hosted externally to PyPI become the use of multi index support instead of the practice of using external links on the simple installer API . | Abstract | It is important to remember that this is   not   about forcing anyone to host their files on PyPI .
PEP 470 | proposal | support | This PEP proposes that the official means of having an installer locate and find package files which are hosted externally to PyPI become the use of multi index support instead of the practice of using external links on the simple installer API . | Abstract | It is important to remember that this is   not   about forcing anyone to host their files on PyPI .
PEP 470 | proposal | support | I 've put forward a PEP that proposes a way to resolve the problems with reliability and implicitness of the current method of not hosting PyPI with centralizing around the multiple indexURL support . | That being said , nobody is trying to mandate that everyone must upload to PyPI . | 
PEP 470 | null | support | Since the multiple index support is the more powerful and flexible of the two systems , while also being simpler to implement and easier to understand , PEP 470 now proposes to standardise on that system for PyPI 's external hosting support , with a few additional enhancements to address the discoverability issues that would otherwise arise . | It turns out the link spidering system is not only overly complicated and relatively hard to both understand and implement , but also largely redundant given the support for multiple indexes in the installation tools . | The link spidering system will eventually go away and we 'll then be left with a fairly conventional   multiple repository '' model , plus a few nice repository discovery features that most other such systems do n't have .
PEP 470 | null | support | Since the multiple index support is the more powerful and flexible of the two systems , while also being simpler to implement and easier to understand , PEP 470 now proposes to standardise on that system for PyPI 's external hosting support , with a few additional enhancements to address the discoverability issues that would otherwise arise . | It turns out the link spidering system is not only overly complicated and relatively hard to both understand and implement , but also largely redundant given the support for multiple indexes in the installation tools . | The link spidering system will eventually go away and we 'll then be left with a fairly conventional   multiple repository '' model , plus a few nice repository discovery features that most other such systems do n't have .
PEP 470 | null | support | Since the multiple index support is the more powerful and flexible of the two systems , while also being simpler to implement and easier to understand , PEP 470 now proposes to standardise on that system for PyPI 's external hosting support , with a few additional enhancements to address the discoverability issues that would otherwise arise . | It turns out the link spidering system is not only overly complicated and relatively hard to both understand and implement , but also largely redundant given the support for multiple indexes in the installation tools . | The link spidering system will eventually go away and we 'll then be left with a fairly conventional   multiple repository '' model , plus a few nice repository discovery features that most other such systems do n't have .
PEP 470 | proposal | support | Since the multiple index support is the more powerful and flexible of the two systems , while also being simpler to implement and easier to understand , PEP 470 now proposes to standardise on that system for PyPI 's external hosting support , with a few additional enhancements to address the discoverability issues that would otherwise arise . | It turns out the link spidering system is not only overly complicated and relatively hard to both understand and implement , but also largely redundant given the support for multiple indexes in the installation tools . | The link spidering system will eventually go away and we 'll then be left with a fairly conventional   multiple repository '' model , plus a few nice repository discovery features that most other such systems do n't have .
PEP 471 | updated | feedback | After some very good python dev feedback on my first version of PEP 471 , I 've updated the PEP to clarify a few things and added various Rejected ideas '' subsections . | Hi folks , | 
PEP 471 | updated | feedback | After some very good python dev feedback on my first version of PEP 471 , I 've updated the PEP to clarify a few things and added various Rejected ideas '' subsections . | Hi folks , | 
PEP 471 | null | discussion | The discussions around PEP 471 deferred discussions of bytes and file descriptor support to their own RFEs not needing a PEP , they did n't decide definitively not to support them . | Yes . | 
PEP 471 | null | discussion | The discussions around PEP 471 deferred discussions of bytes and file descriptor support to their own RFEs not needing a PEP , they did n't decide definitively not to support them . | Yes . | 
PEP 471 | null | discussion | The discussions around PEP 471 deferred discussions of bytes and file descriptor support to their own RFEs not needing a PEP , they did n't decide definitively not to support them . | Yes . | 
PEP 472 | proposal | discussion | txt 0,0 1,653 PEP 472 Title Support for indexing with keyword arguments Version Revision Last Modified Date Author Stefano Borini , Joseph Martinot Lagarde Discussion To python ideas at python.org Status Draft Type Standards Track Content Type textx rst Created 24 Jun 2014 Python Version 3.6 Post History 02 Jul 2014 Abstract This PEP proposes an extension of the indexing operation to support keyword arguments . | txt new file mode 100644 devnull bpep 0472 . | 
PEP 472 | proposal | support | txt 0,0 1,653 PEP 472 Title Support for indexing with keyword arguments Version Revision Last Modified Date Author Stefano Borini , Joseph Martinot Lagarde Discussion To python ideas at python.org Status Draft Type Standards Track Content Type textx rst Created 24 Jun 2014 Python Version 3.6 Post History 02 Jul 2014 Abstract This PEP proposes an extension of the indexing operation to support keyword arguments . | txt new file mode 100644 devnull bpep 0472 . | 
PEP 472 | proposal | support | txt 0,0 1,653 PEP 472 Title Support for indexing with keyword arguments Version Revision Last Modified Date Author Stefano Borini , Joseph Martinot Lagarde Discussion To python ideas at python.org Status Draft Type Standards Track Content Type textx rst Created 24 Jun 2014 Python Version 3.6 Post History 02 Jul 2014 Abstract This PEP proposes an extension of the indexing operation to support keyword arguments . | txt new file mode 100644 devnull bpep 0472 . | 
PEP 472 | null | discussion | txt 0,0 1,653 PEP 472 Title Support for indexing with keyword arguments Version Revision Last Modified Date Author Stefano Borini , Joseph Martinot Lagarde Discussion To python ideas at python.org Status Draft Type Standards Track Content Type textx rst Created 24 Jun 2014 Python Version 3.6 Post History 02 Jul 2014 Abstract This PEP proposes an extension of the indexing operation to support keyword arguments . | txt new file mode 100644 devnull bpep 0472 . | 
PEP 474 | proposal | support | This PEP also proposes changes to the way certain supporting repositories such as the repository for Python Enhancement Proposals are managed to make them more accessible to new contributors , and easier to manage for core developers . | txt 21,11 21,6 experience for other contributors that are reliant on the core team to get their changes incorporated . | 
PEP 474 | proposal | support | This PEP also proposes changes to the way certain supporting repositories such as the repository for Python Enhancement Proposals are managed to make them more accessible to new contributors , and easier to manage for core developers . | txt 21,11 21,6 experience for other contributors that are reliant on the core team to get their changes incorporated . | 
PEP 474 | proposal | support | This PEP also proposes changes to the way certain supporting repositories such as the repository for Python Enhancement Proposals are managed to make them more accessible to new contributors , and easier to manage for core developers . | txt 21,11 21,6 experience for other contributors that are reliant on the core team to get their changes incorporated . | 
PEP 474 | proposal | support | This PEP also proposes changes to the way certain supporting repositories such as the repository for Python Enhancement Proposals are managed to make them more accessible to new contributors , and easier to manage for core developers . | txt 21,11 21,6 experience for other contributors that are reliant on the core team to get their changes incorporated . | 
PEP 474 | proposal | support | This PEP also proposes changes to the way certain supporting repositories such as the repository for Python Enhancement Proposals are managed to make them more accessible to new contributors , and easier to manage for core developers . | txt 21,11 21,6 experience for other contributors that are reliant on the core team to get their changes incorporated . | 
PEP 474 | proposal | support | This PEP proposes introducing a more sophisticated approach to repository management that includes more self service '' features , including support for pull requests . | These supporting repositories could benefit greatly from user the simple pull request '' style workflow made popular by code hosting sites like GitHub and BitBucket . | 
PEP 474 | proposal | support | This PEP proposes migrating to Git and Github for certain supporting repositories such as the repository for Python Enhancement Proposals in a way that is more accessible to new contributors , and easier to manage for core developers . | Abstract | 
PEP 474 | updated | support | I 've now updated PEP 474 to cover my current proposal for the support repositories , as well as some of the preparatory work that is already being undertaken https www.python.orgdevpepspep 0474 | my thinking about the development process . | 
PEP 474 | updated | support | I 've now updated PEP 474 to cover my current proposal for the support repositories , as well as some of the preparatory work that is already being undertaken https www.python.orgdevpepspep 0474 | my thinking about the development process . | 
PEP 474 | updated | support | I 've now updated PEP 474 to cover my current proposal for the support repositories , as well as some of the preparatory work that is already being undertaken https www.python.orgdevpepspep 0474 | my thinking about the development process . | 
PEP 474 | proposal | support | This PEP proposes migrating the repository hosting of CPython and the supporting repositories to Git and Github . | In particular this PEP proposes changes to the following repositories https hg.python.orgdevguide https hg.python.orgdevinabox https hg.python.orgpeps This PEP does not propose any changes to the core development workflow for CPython itself . | 
PEP 474 | null | support | This particular PEP is offered as an alternative to PEP 474 and PEP 462 which aims to achieve the same overall benefits but restricts itself to tools that support Mercurial and are completely Open Source . | It also proposes adding Phabricator as an alternative to Github Pull Requests to handle reviewing changes . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . |    Suggestions for clarifying edits are still welcome   unlike IETF RFCs , the text of a PEP is not cast in stone after its acceptance , although the core design plan specification should not change after acceptance .  ) 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . |    Suggestions for clarifying edits are still welcome   unlike IETF RFCs , the text of a PEP is not cast in stone after its acceptance , although the core design plan specification should not change after acceptance .  ) 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . |    Suggestions for clarifying edits are still welcome   unlike IETF RFCs , the text of a PEP is not cast in stone after its acceptance , although the core design plan specification should not change after acceptance .  ) 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . |    Suggestions for clarifying edits are still welcome   unlike IETF RFCs , the text of a PEP is not cast in stone after its acceptance , although the core design plan specification should not change after acceptance .  ) 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . |    Suggestions for clarifying edits are still welcome   unlike IETF RFCs , the text of a PEP is not cast in stone after its acceptance , although the core design plan specification should not change after acceptance .  ) 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . |    Suggestions for clarifying edits are still welcome   unlike IETF RFCs , the text of a PEP is not cast in stone after its acceptance , although the core design plan specification should not change after acceptance .  ) 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . |    Suggestions for clarifying edits are still welcome   unlike IETF RFCs , the text of a PEP is not cast in stone after its acceptance , although the core design plan specification should not change after acceptance .  ) 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . |    Suggestions for clarifying edits are still welcome   unlike IETF RFCs , the text of a PEP is not cast in stone after its acceptance , although the core design plan specification should not change after acceptance .  ) 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . |    Suggestions for clarifying edits are still welcome   unlike IETF RFCs , the text of a PEP is not cast in stone after its acceptance , although the core design plan specification should not change after acceptance .  ) 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . |    Suggestions for clarifying edits are still welcome   unlike IETF RFCs , the text of a PEP is not cast in stone after its acceptance , although the core design plan specification should not change after acceptance .  ) 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . |    Suggestions for clarifying edits are still welcome   unlike IETF RFCs , the text of a PEP is not cast in stone after its acceptance , although the core design plan specification should not change after acceptance .  ) 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . |    Suggestions for clarifying edits are still welcome   unlike IETF RFCs , the text of a PEP is not cast in stone after its acceptance , although the core design plan specification should not change after acceptance .  ) 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . |    Suggestions for clarifying edits are still welcome   unlike IETF RFCs , the text of a PEP is not cast in stone after its acceptance , although the core design plan specification should not change after acceptance .  ) 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . |    Suggestions for clarifying edits are still welcome   unlike IETF RFCs , the text of a PEP is not cast in stone after its acceptance , although the core design plan specification should not change after acceptance .  ) 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | The problem you think PEP 479 is trying to solve is the one where the discussion started , but it is not the one where it ended when Guido accepted PEP 479 . | It even managed to introduce obscure bugs around the use of generators to write context managers , where factoring out part of the context manager to a subgenerator may implicitly suppress a StopIteration exception raised in the body of the with statement . | 
PEP 479 | null | discussion | The problem you think PEP 479 is trying to solve is the one where the discussion started , but it is not the one where it ended when Guido accepted PEP 479 . | It even managed to introduce obscure bugs around the use of generators to write context managers , where factoring out part of the context manager to a subgenerator may implicitly suppress a StopIteration exception raised in the body of the with statement . | 
PEP 479 | null | discussion | The problem you think PEP 479 is trying to solve is the one where the discussion started , but it is not the one where it ended when Guido accepted PEP 479 . | It even managed to introduce obscure bugs around the use of generators to write context managers , where factoring out part of the context manager to a subgenerator may implicitly suppress a StopIteration exception raised in the body of the with statement . | 
PEP 479 | null | discussion | The problem you think PEP 479 is trying to solve is the one where the discussion started , but it is not the one where it ended when Guido accepted PEP 479 . | It even managed to introduce obscure bugs around the use of generators to write context managers , where factoring out part of the context manager to a subgenerator may implicitly suppress a StopIteration exception raised in the body of the with statement . | 
PEP 479 | null | discussion | The problem you think PEP 479 is trying to solve is the one where the discussion started , but it is not the one where it ended when Guido accepted PEP 479 . | In another thread , Nick wrote to Oscar | 
PEP 479 | null | discussion | The problem you think PEP 479 is trying to solve is the one where the discussion started , but it is not the one where it ended when Guido accepted PEP 479 . | In another thread , Nick wrote to Oscar | 
PEP 479 | null | discussion | The problem you think PEP 479 is trying to solve is the one where the discussion started , but it is not the one where it ended when Guido accepted PEP 479 . | In another thread , Nick wrote to Oscar | 
PEP 479 | null | discussion | The problem you think PEP 479 is trying to solve is the one where the discussion started , but it is not the one where it ended when Guido accepted PEP 479 . | In another thread , Nick wrote to Oscar | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 481 | proposal | support | This PEP proposes migrating to Git and Github for certain supporting repositories such as the repository for Python Enhancement Proposals in a way that is more accessible to new contributors , and easier to manage for core developers . | Abstract | 
PEP 481 | proposal | support | This PEP proposes migrating the repository hosting of CPython and the supporting repositories to Git and Github . | In particular this PEP proposes changes to the following repositories https hg.python.orgdevguide https hg.python.orgdevinabox https hg.python.orgpeps This PEP does not propose any changes to the core development workflow for CPython itself . | 
PEP 481 | proposal | support | This PEP proposes migrating the repository hosting of CPython and the supporting repositories to Git and Github . | note This PEP has been withdrawn , if you 're looking for the PEP documenting the move to Github , please refer to PEP 512 . | 
PEP 483 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 484 | null | support | The comment based syntax I proposed for Python 2.7 does support exactly the same functionality as the official PEP 484 syntax the only thing it does n't allow is selectively leaving out types for some arguments you must use Any ' to fill those positions . | I have a hard time following the rest of Agustin 's comments . | 
PEP 484 | null | support | The comment based syntax I proposed for Python 2.7 does support exactly the same functionality as the official PEP 484 syntax the only thing it does n't allow is selectively leaving out types for some arguments you must use Any ' to fill those positions . | I have a hard time following the rest of Agustin 's comments . | 
PEP 485 | updated | consensus | I have updated the code and PEP on gitHub with changes that were no brainers or seemed to have clear consensus . | I 've gone through all the messages in this thread since I posted the draft PEP . | 
PEP 488 | proposal | support | To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in bytecode repository directory i.e. , the pycache directory . | This PEP proposes eliminating the concept of PYO files from Python . | 
PEP 488 | proposal | support | To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in bytecode repository directory i.e. , the pycache directory . | txt 0,0 1,303 PEP 488 Title Elimination of PYO files Version Revision Last Modified Date Author Brett Cannon brett at python.org Status Draft Type Standards Track Content Type textx rst Created 20 Feb 2015 Post History 2015 03 06 Abstract This PEP proposes eliminating the concept of PYO files from Python . | 
PEP 488 | call_for_poll | poll result | I have closed the issue of file name formatting thanks to the informal poll results being very clear on the preferred format and also closed the idea of embedding the optimization level in the bytecode file metadata that can be another PEP if someone cares to write that one . | Here is the latest draft of the PEP . | 
PEP 488 | call_for_poll | poll result | I have closed the issue of file name formatting thanks to the informal poll results being very clear on the preferred format and also closed the idea of embedding the optimization level in the bytecode file metadata that can be another PEP if someone cares to write that one . | Here is the latest draft of the PEP . | 
PEP 488 | call_for_poll | poll result | I have closed the issue of file name formatting thanks to the informal poll results being very clear on the preferred format and also closed the idea of embedding the optimization level in the bytecode file metadata that can be another PEP if someone cares to write that one . | Here is the latest draft of the PEP . | 
PEP 488 | call_for_poll | poll result | I have closed the issue of file name formatting thanks to the informal poll results being very clear on the preferred format and also closed the idea of embedding the optimization level in the bytecode file metadata that can be another PEP if someone cares to write that one . | Here is the latest draft of the PEP . | 
PEP 488 | proposal | support | To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in bytecode repository directory i.e. , the pycache directory . | This PEP proposes eliminating the concept of PYO files from Python . | 
PEP 488 | proposal | support | To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in the bytecode repository directory when it 's called for i.e. , the pycache directory . | This PEP proposes eliminating the concept of PYO files from Python . | 
PEP 488 | proposal | support | To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in bytecode repository directory i.e. , the pycache directory . | txt 17,8 17,8 This PEP proposes eliminating the concept of PYO files from Python . | 
PEP 492 | null | discussion | txt 2,7 2,7 Title Coroutines with async and await syntax Version Revision Last Modified Date Author Yury Selivanov yselivanov at sprymix.com Author Yury Selivanov yury at magic.io Discussions To python dev at python.org Status Final Type Standards Track 125,7 125,7 Internally , two new code object flags were introduced CO COROUTINE is used to mark native coroutines defined with new syntax . | txt bpep 0492 . | 
PEP 492 | null | discussion | txt 2,7 2,7 Title Coroutines with async and await syntax Version Revision Last Modified Date Author Yury Selivanov yselivanov at sprymix.com Author Yury Selivanov yury at magic.io Discussions To python dev at python.org Status Final Type Standards Track 125,7 125,7 Internally , two new code object flags were introduced CO COROUTINE is used to mark native coroutines defined with new syntax . | txt bpep 0492 . | 
PEP 492 | null | discussion | txt 2,7 2,7 Title Coroutines with async and await syntax Version Revision Last Modified Date Author Yury Selivanov yselivanov at sprymix.com Author Yury Selivanov yury at magic.io Discussions To python dev at python.org Status Final Type Standards Track 125,7 125,7 Internally , two new code object flags were introduced CO COROUTINE is used to mark native coroutines defined with new syntax . | txt bpep 0492 . | 
PEP 492 | null | discussion | txt 2,7 2,7 Title Coroutines with async and await syntax Version Revision Last Modified Date Author Yury Selivanov yselivanov at sprymix.com Author Yury Selivanov yury at magic.io Discussions To python dev at python.org Status Final Type Standards Track 125,7 125,7 Internally , two new code object flags were introduced CO COROUTINE is used to mark native coroutines defined with new syntax . | txt bpep 0492 . | 
PEP 492 | null | discussion | txt 2,7 2,7 Title Coroutines with async and await syntax Version Revision Last Modified Date Author Yury Selivanov yselivanov at sprymix.com Author Yury Selivanov yury at magic.io Discussions To python dev at python.org Status Final Type Standards Track 125,7 125,7 Internally , two new code object flags were introduced CO COROUTINE is used to mark native coroutines defined with new syntax . | txt bpep 0492 . | 
PEP 492 | null | discussion | txt 2,7 2,7 Title Coroutines with async and await syntax Version Revision Last Modified Date Author Yury Selivanov yselivanov at sprymix.com Author Yury Selivanov yury at magic.io Discussions To python dev at python.org Status Final Type Standards Track 125,7 125,7 Internally , two new code object flags were introduced CO COROUTINE is used to mark native coroutines defined with new syntax . | txt bpep 0492 . | 
PEP 498 | proposal | support | PEP 498 proposes new syntactic support for string interpolation that is transparent to the compiler , allow name references from the interpolation operation full access to containing namespaces as with any other expression , rather than being limited to explicitly name references . | . | 
PEP 498 | proposal | support | PEP 498 proposes new syntactic support for string interpolation that is transparent to the compiler , allow name references from the interpolation operation full access to containing namespaces as with any other expression , rather than being limited to explicitly name references . | . | 
PEP 498 | proposal | support | PEP 498 proposes new syntactic support for string interpolation that is transparent to the compiler , allow name references from the interpolation operation full access to containing namespaces as with any other expression , rather than being limited to explicitly name references . | . | 
PEP 498 | proposal | support | PEP 498 proposes new syntactic support for string interpolation that is transparent to the compiler , allow name references from the interpolation operation full access to containing namespaces as with any other expression , rather than being limited to explicitly name references . | . | 
PEP 498 | proposal | support | PEP 498 proposes new syntactic support for string interpolation that is transparent to the compiler , allow name references from the interpolation operation full access to containing namespaces as with any other expression , rather than being limited to explicitly name references . | . | 
PEP 498 | proposal | support | To address that problem and a number of other concerns , this PEP proposes an alternative approach to compiler supported interpolation , based on a new interpolate magic method , and using a substitution syntax inspired by that used in string . | system call . | 
PEP 498 | proposal | support | To address that problem and a number of other concerns , this PEP proposes an alternative approach to compiler supported interpolation , based on a new interpolate magic method , and using a substitution syntax inspired by that used in string . | system call . | 
PEP 498 | proposal | support | This is a new kind of expression , consisting of This PEP proposes the introduction of as a new binary operator designed specifically to support interpolation of template strings ! | . | 
PEP 498 | proposal | support | This is a new kind of expression , consisting of This PEP proposes the introduction of as a new binary operator designed specifically to support interpolation of template strings ! | . | 
PEP 498 | proposal | support | To address that problem and a number of other concerns , this PEP proposes an alternative approach to compiler supported interpolation , based on a new binary operator with a syntactically constrained right hand side , a new interpolate magic method , and a substitution syntax inspired by that used in string . | system call . | 
PEP 498 | proposal | support | To address that problem and a number of other concerns , this PEP proposes an alternative approach to compiler supported interpolation , using i for interpolation '' as the new string prefix and a substitution syntax inspired by that used in string . | system call . | 
PEP 498 | proposal | support | To address that problem and a number of other concerns , this PEP proposes an alternative approach to compiler supported interpolation , using i for interpolation '' as the new string prefix and a substitution syntax inspired by that used in string . | system call . | 
PEP 501 | proposal | support | To address that problem and a number of other concerns , this PEP proposes an alternative approach to compiler supported interpolation , based on a new interpolate magic method , and using a substitution syntax inspired by that used in string . | system call . | 
PEP 501 | proposal | support | To address that problem and a number of other concerns , this PEP proposes an alternative approach to compiler supported interpolation , based on a new interpolate magic method , and using a substitution syntax inspired by that used in string . | system call . | 
PEP 501 | proposal | support | This is a new kind of expression , consisting of This PEP proposes the introduction of as a new binary operator designed specifically to support interpolation of template strings ! | . | 
PEP 501 | proposal | support | This is a new kind of expression , consisting of This PEP proposes the introduction of as a new binary operator designed specifically to support interpolation of template strings ! | . | 
PEP 501 | proposal | support | To address that problem and a number of other concerns , this PEP proposes an alternative approach to compiler supported interpolation , based on a new binary operator with a syntactically constrained right hand side , a new interpolate magic method , and a substitution syntax inspired by that used in string . | system call . | 
PEP 501 | proposal | support | To address that problem and a number of other concerns , this PEP proposes an alternative approach to compiler supported interpolation , using i for interpolation '' as the new string prefix and a substitution syntax inspired by that used in string . | system call . | 
PEP 501 | proposal | support | To address that problem and a number of other concerns , this PEP proposes an alternative approach to compiler supported interpolation , using i for interpolation '' as the new string prefix and a substitution syntax inspired by that used in string . | system call . | 
PEP 503 | updated | support | I 've updated the PEP with the typo corrections , clarifications , and the missing GPG signature support that Marc Andre and Marius pointed out . | 55EAB949.6030603 egenix.com etPan.55eb1453.33e83f77.19bd Draupnir.home | It should be live on the PEP site soon , but the diff can be viewed online at https hg.python.org peps rev a314911efa10
PEP 505 | null | debate | I was debated , and rejected , but I feel like mentioning it again because it has some strong benefits . | val do thing except ThingError default '' | First , it handles the null coalescing very quite well  
PEP 511 | null | support | txt 1,5 1,5 PEP 511 Title API for AST transformers Title API for code transformers Version Revision Last Modified Date Author Victor Stinner victor.stinner at gmail.com 12,12 12,12 Abstract Propose an API to support AST transformers . | txt bpep 0511 . | 
PEP 511 | null | support | txt 1,5 1,5 PEP 511 Title API for AST transformers Title API for code transformers Version Revision Last Modified Date Author Victor Stinner victor.stinner at gmail.com 12,12 12,12 Abstract Propose an API to support AST transformers . | txt bpep 0511 . | 
PEP 512 | proposal | support | This PEP proposes migrating the repository hosting of CPython and the supporting repositories to Git and Github . | note This PEP has been withdrawn , if you 're looking for the PEP documenting the move to Github , please refer to PEP 512 . | 
PEP 515 | updated | feedback | based on the feedback so far , I revised the PEP . | Hey all , | There is now a much simpler rule for allowed underscores , with no exceptions .
PEP 515 | null | discussion | There was one point of discussion in the tracker issue that should be resolved before acceptance the Decimal constructor is listed as getting updated to allow underscores , but its syntax is specified in the Decimal spec http speleotrove.comdecimaldaconvs.html | I 'll update the text so that the format gets promoted from optional to specified . | 
PEP 515 | null | support | pep 515 PEP 515 Underscores in Numeric Literals Prior to PEP 515 , there was no support for writing long numeric literals with some form of separator to improve readability . | rst 124,6 124,29 New Features . . | 
PEP 515 | null | support | pep 515 PEP 515 Underscores in Numeric Literals Prior to PEP 515 , there was no support for writing long numeric literals with some form of separator to improve readability . | rst 124,6 124,29 New Features . . | 
PEP 515 | null | support | pep 515 PEP 515 Underscores in Numeric Literals Prior to PEP 515 , there was no support for writing long numeric literals with some form of separator to improve readability . | rst 124,6 124,29 New Features . . | 
PEP 515 | null | support | PEP 515 Underscores in Numeric Literals PEP 515 Underscores in Numeric Literals Prior to PEP 515 , there was no support for writing long numeric literals with some form of separator to improve readability . | ref PEP 515 whatsnew36 pep515 , underscores in numeric literals . | 
PEP 515 | null | support | PEP 515 Underscores in Numeric Literals PEP 515 Underscores in Numeric Literals Prior to PEP 515 , there was no support for writing long numeric literals with some form of separator to improve readability . | ref PEP 515 whatsnew36 pep515 , underscores in numeric literals . | 
PEP 515 | null | support | PEP 515 Underscores in Numeric Literals PEP 515 Underscores in Numeric Literals Prior to PEP 515 , there was no support for writing long numeric literals with some form of separator to improve readability . | ref PEP 515 whatsnew36 pep515 , underscores in numeric literals . | 
PEP 515 | null | support | PEP 515 Underscores in Numeric Literals PEP 515 Underscores in Numeric Literals Prior to PEP 515 , there was no support for writing long numeric literals with some form of separator to improve readability . | ref PEP 515 whatsnew36 pep515 , underscores in numeric literals . | 
PEP 515 | null | support | PEP 515 Underscores in Numeric Literals PEP 515 Underscores in Numeric Literals Prior to PEP 515 , there was no support for writing long numeric literals with some form of separator to improve readability . | ref PEP 515 whatsnew36 pep515 , underscores in numeric literals . | 
PEP 515 | null | support | PEP 515 Underscores in Numeric Literals PEP 515 Underscores in Numeric Literals Prior to PEP 515 , there was no support for writing long numeric literals with some form of separator to improve readability . | ref PEP 515 whatsnew36 pep515 , underscores in numeric literals . | 
PEP 515 | null | support | PEP 515 Underscores in Numeric Literals PEP 515 Underscores in Numeric Literals Prior to PEP 515 , there was no support for writing long numeric literals with some form of separator to improve readability . | ref PEP 515 whatsnew36 pep515 , underscores in numeric literals . | 
PEP 515 | null | support | PEP 515 Underscores in Numeric Literals PEP 515 Underscores in Numeric Literals Prior to PEP 515 , there was no support for writing long numeric literals with some form of separator to improve readability . | ref PEP 515 whatsnew36 pep515 , underscores in numeric literals . | 
PEP 520 | updated | feedback | I 've updated the PEP to reflect feedback up to this point . | pep 520 ordered class definition namespace round 3 . | The reception has been positive .
PEP 520 | updated | feedback | I 've updated the PEP to reflect feedback up to this point . | pep 520 ordered class definition namespace round 3 . | The reception has been positive .
PEP 520 | updated | feedback | I 've updated the PEP to reflect feedback up to this point . | pep 520 ordered class definition namespace round 3 . | The reception has been positive .
PEP 520 | proposal | support | This PEP proposes to instead support a wide range of customisation scenarios through a new init subclass hook in the class body , a hook to initialize attributes , and a way to keep the order in which attributes are defined . | This custom metaclass then persists for the entire lifecycle of the class , creating the potential for spurious metaclass conflicts . | 
PEP 520 | proposal | support | This PEP proposes to instead support a wide range of customisation scenarios through a new init subclass hook in the class body , a hook to initialize attributes . | This custom metaclass then persists for the entire lifecycle of the class , creating the potential for spurious metaclass conflicts . | 
PEP 520 | proposal | support | This PEP proposes to instead support a wide range of customisation scenarios through a new init subclass hook in the class body , and a hook to initialize attributes . | This custom metaclass then persists for the entire lifecycle of the class , creating the potential for spurious metaclass conflicts . | 
PEP 520 | proposal | support | This PEP proposes to instead support a wide range of customisation scenarios through a new init subclass hook in the class body , and a hook to initialize attributes . | This custom metaclass then persists for the entire lifecycle of the class , creating the potential for spurious metaclass conflicts . | 
PEP 525 | null | support | There is a reference implementation 2 that supports everything that the PEP proposes to add . | The PEP is also available at 1 . | 
PEP 525 | null | support | There is a reference implementation 2 that supports everything that the PEP proposes to add . | The PEP is also available at 1 . | 
PEP 525 | proposal | support | Below is a proposal to add support for asynchronous comprehensions and asynchronous generator expressions in Python 3.6 . | Hi , | I have a half working implementation of the proposal which fully implements all required grammar and AST changes .
PEP 530 | proposal | support | Below is a proposal to add support for asynchronous comprehensions and asynchronous generator expressions in Python 3.6 . | Hi , | I have a half working implementation of the proposal which fully implements all required grammar and AST changes .
PEP 754 | proposal | support | This PEP proposes a standard Python API and provides a reference module implementation which allows for consistent handling of IEEE 754 special values on all supported platforms . | Due to the many platform and library inconsistencies in handling IEEE special values , it is impossible to consistently set or detect IEEE 754 floating point values in normal Python code without resorting to directly manipulating bit patterns . | API Definition                            
PEP 754 | proposal | support | This PEP proposes a standard Python API and provides a reference module implementation which allows for consistent handling of IEEE 754 special values on all supported platforms . | Due to the many platform and library inconsistencies in handling IEEE special values , it is impossible to consistently set or detect IEEE 754 floating point values in normal Python code without resorting to directly manipulating bit patterns . | API Definition                            
PEP 754 | proposal | support | This PEP proposes a standard Python API and provides a reference module implementation which allows for consistent handling of IEEE 754 special values on all supported platforms . | Due to the many platform and library inconsistencies in handling IEEE special values , it is impossible to consistently set or detect IEEE 754 floating point values in normal Python code without resorting to directly manipulating bit patterns . | API Definition                            
PEP 754 | proposal | support | This PEP proposes a standard Python API and provides a reference module implementation which allows for consistent handling of IEEE 754 special values on all supported platforms . | Due to the many platform and library inconsistencies in handling IEEE special values , it is impossible to consistently set or detect IEEE 754 floating point values in normal Python code without resorting to directly manipulating bit patterns . | API Definition
PEP 754 | proposal | support | This PEP proposes a standard Python API and provides a reference module implementation which allows for consistent handling of IEEE 754 special values on all supported platforms . | Due to the many platform and library inconsistencies in handling IEEE special values , it is impossible to consistently set or detect IEEE 754 floating point values in normal Python code without resorting to directly manipulating bit patterns . | API Definition
PEP 754 | proposal | support | This PEP proposes a standard Python API and provides a reference module implementation which allows for consistent handling of IEEE 754 special values on all supported platforms . | Due to the many platform and library inconsistencies in handling IEEE special values , it is impossible to consistently set or detect IEEE 754 floating point values in normal Python code without resorting to directly manipulating bit patterns . | API Definition
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3000 | null | support | There was no opposition to this proposal , and some support . | As an aside to this patch , Martin suggested that the build number should be dropped , as it stopped working on Windows some time ago and no longer provides any useful information . | . .
PEP 3003 | proposal | support | This PEP proposes that the Installing Python Modules http docs.python.org 3 install guide be updated to officially recommend the use of pip as the default installer for Python packages , and that appropriate technical changes be made in Python 2.7 , 3.3 and 3.4 to provide pip by default in support of that recommendation . | Instead , pip will be a bundled application provided along with CPython for the convenience of Python users , but subject to its own development life cycle and able to be upgraded independently of the core interpreter and standard library . | 
PEP 3003 | proposal | support | This PEP proposes that the Installing Python Modules http docs.python.org 3 install guide be updated to officially recommend the use of pip as the default installer for Python packages , and that appropriate technical changes be made in Python 2.7 , 3.3 and 3.4 to provide pip by default in support of that recommendation . | Instead , pip will be a bundled application provided along with CPython for the convenience of Python users , but subject to its own development life cycle and able to be upgraded independently of the core interpreter and standard library . | 
PEP 3003 | proposal | support | This PEP proposes that the Installing Python Modules http docs.python.org 3 install guide be updated to officially recommend the use of pip as the default installer for Python packages , and that appropriate technical changes be made in Python 2.7 , 3.3 and 3.4 to provide pip by default in support of that recommendation . | Instead , pip will be a bundled application provided along with CPython for the convenience of Python users , but subject to its own development life cycle and able to be upgraded independently of the core interpreter and standard library . | 
PEP 3003 | proposal | support | To support that end , this PEP proposes the inclusion of an ensurepip bootstrapping module in Python 3.4 along with the upcoming maintenance releases of Python 2.7 and 3.3 , as well as changes to the way Python installed scripts are handled on Windows . | However , to avoid recommending a tool that CPython does not provide , it is further proposed that the pip package manager be made available by default when installing CPython and when creating virtual environments using the standard library 's venv module via the pyvenv command line utility . | 
PEP 3003 | proposal | support | This PEP proposes that the Installing Python Modules http docs.python.org 3 install guide be updated to officially recommend the use of pip as the default installer for Python packages , and that appropriate technical changes be made in Python 2.7 , 3.3 and 3.4 to provide pip by default in support of that recommendation . | Abstract | 
PEP 3003 | proposal | support | This PEP proposes that the Installing Python Modules http docs.python.org 3 install guide be updated to officially recommend the use of pip as the default installer for Python packages , and that appropriate technical changes be made in Python 2.7 , 3.3 and 3.4 to provide pip by default in support of that recommendation . | Abstract | 
PEP 3003 | proposal | support | This PEP proposes that the Installing Python Modules http docs.python.org 3 install guide be updated to officially recommend the use of pip as the default installer for Python packages , and that appropriate technical changes be made in Python 2.7 , 3.3 and 3.4 to provide pip by default in support of that recommendation . | Abstract | 
PEP 3003 | proposal | support | To support that end , this PEP proposes the inclusion of an ensurepip bootstrapping module in Python 3.4 along with the upcoming maintenance releases of Python 2.7 and 3.3 , as well as changes to the way Python installed scripts are handled on Windows for Python 3.4 only . | However , to avoid recommending a tool that CPython does not provide , it is further proposed that the pip package manager be made available by default when installing CPython and when creating virtual environments using the standard library 's venv module via the pyvenv command line utility . | 
PEP 3003 | proposal | support | To support that end , this PEP proposes the inclusion of an ensurepip bootstrapping module in Python 3.4 along with the upcoming maintenance releases of Python 2.7 and 3.3 , as well as automatic invocation of that module from pyvenv for Python 3.4 only , and changes to the way Python installed scripts are handled on Windows also for Python 3.4 only . | default when installing CPython 3.4 or later and when creating virtual environments using the standard library 's venv module via the pyvenv command line utility . | 
PEP 3101 | updated | feedback | I 've updated PEP 3101 based on the feedback collected so far . | pep 3101 update . |   PEP   3101 Title   Advanced String Formatting Version     Revision   45928   Last Modified     Date   2006 05 06 18 49 43  0700    Sat , 06 May 2006  )    Author   Talin  talin at acm.org  Status   Draft Content Type   text plain Created   16 Apr 2006 Python Version   3.0 Post History   28 Apr 2006 , 6 May 2006
PEP 3101 | updated | feedback | I 've updated PEP 3101 based on the feedback collected so far . | pep 3101 update . |   PEP   3101 Title   Advanced String Formatting Version     Revision   45928   Last Modified     Date   2006 05 06 18 49 43  0700    Sat , 06 May 2006  )    Author   Talin  talin at acm.org  Status   Draft Content Type   text plain Created   16 Apr 2006 Python Version   3.0 Post History   28 Apr 2006 , 6 May 2006
PEP 3101 | proposal | support | To address that problem and a number of other concerns , this PEP proposes an alternative approach to compiler supported interpolation , using i for interpolation '' as the new string prefix and a substitution syntax inspired by that used in string . | system call . | 
PEP 3101 | proposal | support | To address that problem and a number of other concerns , this PEP proposes an alternative approach to compiler supported interpolation , using i for interpolation '' as the new string prefix and a substitution syntax inspired by that used in string . | system call . | 
PEP 3102 | bdfl_pronouncement | discussion | Note After much discussion of alternative syntax proposals , the BDFL has pronounced in favor of this single star ' syntax for indicating the end of positional parameters . | As a convenient shortcut , we can simply omit the ignore ' name , meaning do n't allow any positional arguments beyond this point ' . | 
PEP 3102 | bdfl_pronouncement | discussion | Note After much discussion of alternative syntax proposals , the BDFL has pronounced in favor of this single star ' syntax for indicating the end of positional parameters . | The meaning of this is to allow for keyword only arguments for functions that would not otherwise take a varargs argument def compare a , b , , key None ... 95,7 97,11 As a convenient shortcut , we can simply omit the ignore ' name , meaning do n't allow any positional arguments beyond this point ' . | 
PEP 3102 | proposal | support | Talin introduced PEP 3102 which proposes support for keyword only '' arguments , that is , arguments that must be specified with the name value keyword syntax , not as positional arguments . | PEP 3102 Keyword only arguments | 
PEP 3102 | proposal | support | Talin introduced PEP 3102 which proposes support for keyword only '' arguments , that is , arguments that must be specified with the name value keyword syntax , not as positional arguments . | PEP 3102 Keyword only arguments | 
PEP 3102 | proposal | support | Talin introduced PEP 3102 which proposes support for keyword only '' arguments , that is , arguments that must be specified with the name value keyword syntax , not as positional arguments . | PEP 3102 Keyword only arguments | 
PEP 3103 | poll_result_no_support | support | https www.python.orgdevpepspep 3103 A SwitchCase Statement '' by Guido van Rossum , Rejection Notice A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support . | 4602a32c 5109 47dd 95bb b9723738f07f googlegroups.com 55E8E09A.3080309 gmail.com | 
PEP 3103 | poll_result_no_support | no popular support | https www.python.orgdevpepspep 3103 A SwitchCase Statement '' by Guido van Rossum , Rejection Notice A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support . | 4602a32c 5109 47dd 95bb b9723738f07f googlegroups.com 55E8E09A.3080309 gmail.com | 
PEP 3103 | poll_result_no_support | support | https www.python.orgdevpepspep 3103 A SwitchCase Statement '' by Guido van Rossum , Rejection Notice A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support . | 4602a32c 5109 47dd 95bb b9723738f07f googlegroups.com 55E8E09A.3080309 gmail.com | 
PEP 3103 | poll_result_no_support | no popular support | https www.python.orgdevpepspep 3103 A SwitchCase Statement '' by Guido van Rossum , Rejection Notice A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support . | 4602a32c 5109 47dd 95bb b9723738f07f googlegroups.com 55E8E09A.3080309 gmail.com | 
PEP 3103 | poll_result | support | There the poll indicated no specific proposal had a majority , so for each specific proposal one could say it did n't have popular support , but the majority still prefered to have a conditional expression . | Op 04 09 15 om 02 47 schreef Mark Lawrence Were those polls , like the poll he once did for the condtional expression ? | But at that time Guido used that poll as an indication there was not enough support .
PEP 3103 | poll_result | majority | There the poll indicated no specific proposal had a majority , so for each specific proposal one could say it did n't have popular support , but the majority still prefered to have a conditional expression . | Op 04 09 15 om 02 47 schreef Mark Lawrence Were those polls , like the poll he once did for the condtional expression ? | But at that time Guido used that poll as an indication there was not enough support .
PEP 3103 | poll_result | majority | There the poll indicated no specific proposal had a majority , so for each specific proposal one could say it did n't have popular support , but the majority still prefered to have a conditional expression . | Op 04 09 15 om 02 47 schreef Mark Lawrence Were those polls , like the poll he once did for the condtional expression ? | But at that time Guido used that poll as an indication there was not enough support .
PEP 3103 | poll_result | support | There the poll indicated no specific proposal had a majority , so for each specific proposal one could say it did n't have popular support , but the majority still prefered to have a conditional expression . | Op 04 09 15 om 02 47 schreef Mark Lawrence Were those polls , like the poll he once did for the condtional expression ? | But at that time Guido used that poll as an indication there was not enough support .
PEP 3103 | poll_result | support | There the poll indicated no specific proposal had a majority , so for each specific proposal one could say it did n't have popular support , but the majority still prefered to have a conditional expression . | Op 04 09 15 om 02 47 schreef Mark Lawrence Were those polls , like the poll he once did for the condtional expression ? | But at that time Guido used that poll as an indication there was not enough support .
PEP 3103 | poll_result | majority | There the poll indicated no specific proposal had a majority , so for each specific proposal one could say it did n't have popular support , but the majority still prefered to have a conditional expression . | Op 04 09 15 om 02 47 schreef Mark Lawrence Were those polls , like the poll he once did for the condtional expression ? | But at that time Guido used that poll as an indication there was not enough support .
PEP 3103 | poll_result | majority | There the poll indicated no specific proposal had a majority , so for each specific proposal one could say it did n't have popular support , but the majority still prefered to have a conditional expression . | Op 04 09 15 om 02 47 schreef Mark Lawrence Were those polls , like the poll he once did for the condtional expression ? | But at that time Guido used that poll as an indication there was not enough support .
PEP 3103 | bdfl_pronouncement | support | But at that time Guido used that poll as an indication there was not enough support . | There the poll indicated no specific proposal had a majority , so for each specific proposal one could say it did n't have popular support , but the majority still prefered to have a conditional expression . | So color me a bit sceptical when Guido comes with such a poll .
PEP 3103 | bdfl_pronouncement | support | But at that time Guido used that poll as an indication there was not enough support . | There the poll indicated no specific proposal had a majority , so for each specific proposal one could say it did n't have popular support , but the majority still prefered to have a conditional expression . | So color me a bit sceptical when Guido comes with such a poll .
PEP 3103 | bdfl_pronouncement | support | But at that time Guido used that poll as an indication there was not enough support . | There the poll indicated no specific proposal had a majority , so for each specific proposal one could say it did n't have popular support , but the majority still prefered to have a conditional expression . | So color me a bit sceptical when Guido comes with such a poll .
PEP 3107 | proposal | support | Therefore i propose that python adds support for function annotations in version 2.6 via from future import function annotations This would make the change as compatible as for example decorators or the with statement . | Jython could implement this use of function annotations without python supporting it , but that would make the code incompatible between python and Jython , which would be highly unfortunate . | 
PEP 3107 | proposal | support | Therefore i propose that python adds support for function annotations in version 2.6 via from future import function annotations This would make the change as compatible as for example decorators or the with statement . | Jython could implement this use of function annotations without python supporting it , but that would make the code incompatible between python and Jython , which would be highly unfortunate . | 
PEP 3107 | proposal | support | Therefore i propose that python adds support for function annotations in version 2.6 via from future import function annotations This would make the change as compatible as for example decorators or the with statement . | Jython could implement this use of function annotations without python supporting it , but that would make the code incompatible between python and Jython , which would be highly unfortunate . | 
PEP 3107 | null | discussion | The discussion for PEP 3107 said the use and interpretation of function type annotations was being left open for third party developers to use as they see fit some may use strings , other ABCs , others concrete types , or tuples of types or some other structure . | New submission from Raymond Hettinger rhettinger at users.sourceforge.net | 
PEP 3107 | null | discussion | The discussion for PEP 3107 said the use and interpretation of function type annotations was being left open for third party developers to use as they see fit some may use strings , other ABCs , others concrete types , or tuples of types or some other structure . | New submission from Raymond Hettinger rhettinger at users.sourceforge.net | 
PEP 3107 | null | support | My Alternative Proposal As an alternative , I would like to propose a syntax that Pycharm already supports http www.jetbrains.compycharmwebhelpusing docstrings to specify types.html | Things get too messy too quickly . | 
PEP 3107 | null | support | My Alternative Proposal As an alternative , I would like to propose a syntax that Pycharm already supports http www.jetbrains.compycharmwebhelpusing docstrings to specify types.html | Things get too messy too quickly . | 
PEP 3115 | null | discussion | I actually had this idea a week or so ago , but packaging discussions and moving meant I had postponed writing it up and posting it . | I prefer the approach of adding the namespace '' argument to PEP 422 , though , since it makes init class a far more powerful and compelling idea , and between them the two ideas should cover every metaclass use case that only customises creation rather than ongoing behavior . | Cheers , Nick .
PEP 3115 | proposal | support | This PEP proposes to instead support a wide range of customisation scenarios through a new namespace parameter in the class header , and a new init subclass hook in the class body . | This custom metaclass then persists for the entire lifecycle of the class , creating the potential for spurious metaclass conflicts . | 
PEP 3115 | proposal | support | This PEP proposes to instead support a wide range of customisation scenarios through a new namespace parameter in the class header , and a new init subclass hook in the class body . | This custom metaclass then persists for the entire lifecycle of the class , creating the potential for spurious metaclass conflicts . | 
PEP 3115 | proposal | support | This PEP proposes to instead support a wide range of customisation scenarios through a new namespace parameter in the class header , and a new init subclass hook in the class body . | txt 7,8 7,8 Type Standards Track Content Type textx rst Created 27 Feb 2015 Python Version 3.5 Post History 27 Feb 2015 Python Version 3.6 Post History 27 Feb 2015 , 5 Feb 2016 Replaces 422 20,127 20,80 creating the potential for spurious metaclass conflicts . | 
PEP 3115 | proposal | majority | Proposal This PEP proposes that a new mechanism to customise class creation be added to Python 3.5 that meets the following criteria While there are many possible ways to use a metaclass , the vast majority of use cases falls into just three categories some initialization code running after class creation , the initalization of descriptors and keeping the order in which class attributes were defined . | While the library itself continues to work perfectly , suddenly every code combining those classes with classes from another library fails . | 
PEP 3115 | proposal | majority | Proposal This PEP proposes that a new mechanism to customise class creation be added to Python 3.5 that meets the following criteria While there are many possible ways to use a metaclass , the vast majority of use cases falls into just three categories some initialization code running after class creation , the initalization of descriptors and keeping the order in which class attributes were defined . | While the library itself continues to work perfectly , suddenly every code combining those classes with classes from another library fails . | 
PEP 3115 | proposal | majority | Proposal This PEP proposes that a new mechanism to customise class creation be added to Python 3.5 that meets the following criteria While there are many possible ways to use a metaclass , the vast majority of use cases falls into just three categories some initialization code running after class creation , the initalization of descriptors and keeping the order in which class attributes were defined . | While the library itself continues to work perfectly , suddenly every code combining those classes with classes from another library fails . | 
PEP 3122 | updated | feedback | I 've updated the PEP to incorporate the feedback from this thread . | 20070706080601.8C3B.JCARLSON uci.edu | The new version is below , and should show up on the website shortly .
PEP 3122 | updated | feedback | I 've updated the PEP to incorporate the feedback from this thread . | 20070706080601.8C3B.JCARLSON uci.edu | The new version is below , and should show up on the website shortly .
PEP 3122 | updated | feedback | I 've updated the PEP to incorporate the feedback from this thread . | 20070706080601.8C3B.JCARLSON uci.edu | The new version is below , and should show up on the website shortly .
PEP 3132 | accepted | discussion | After a short discussion on the python 3000 list 1 , the PEP was accepted by Guido in its current form . | Open Issues Acceptance Should the catch all expression be assigned a list or a tuple of items ? | 
PEP 3132 | bdfl_pronouncement_accepted | discussion | After a short discussion on the python 3000 list 1 , the PEP was accepted by Guido in its current form . | Open Issues Acceptance Should the catch all expression be assigned a list or a tuple of items ? | 
PEP 3132 | bdfl_pronouncement_accepted | discussion | After a short discussion on the python 3000 list 1 , the PEP was accepted by Guido in its current form . | Open Issues Acceptance Should the catch all expression be assigned a list or a tuple of items ? | 
PEP 3135 | proposal | support | This PEP proposes to instead support a wide range of customisation scenarios through a new namespace parameter in the class header , and a new init class hook in the class body . | Instead , the class creation process is fully defined by the class header , before the class body even begins executing . | 
PEP 3135 | proposal | support | This PEP proposes to instead support a wide range of customisation scenarios through a new namespace parameter in the class header , and a new init subclass hook in the class body . | This custom metaclass then persists for the entire lifecycle of the class , creating the potential for spurious metaclass conflicts . | 
PEP 3135 | proposal | support | This PEP proposes to instead support a wide range of customisation scenarios through a new namespace parameter in the class header , and a new init subclass hook in the class body . | This custom metaclass then persists for the entire lifecycle of the class , creating the potential for spurious metaclass conflicts . | 
PEP 3135 | proposal | support | This PEP proposes to instead support a wide range of customisation scenarios through a new namespace parameter in the class header , and a new init subclass hook in the class body . | txt 7,8 7,8 Type Standards Track Content Type textx rst Created 27 Feb 2015 Python Version 3.5 Post History 27 Feb 2015 Python Version 3.6 Post History 27 Feb 2015 , 5 Feb 2016 Replaces 422 20,127 20,80 creating the potential for spurious metaclass conflicts . | 
PEP 3135 | proposal | majority | Proposal This PEP proposes that a new mechanism to customise class creation be added to Python 3.5 that meets the following criteria While there are many possible ways to use a metaclass , the vast majority of use cases falls into just three categories some initialization code running after class creation , the initalization of descriptors and keeping the order in which class attributes were defined . | While the library itself continues to work perfectly , suddenly every code combining those classes with classes from another library fails . | 
PEP 3135 | proposal | majority | Proposal This PEP proposes that a new mechanism to customise class creation be added to Python 3.5 that meets the following criteria While there are many possible ways to use a metaclass , the vast majority of use cases falls into just three categories some initialization code running after class creation , the initalization of descriptors and keeping the order in which class attributes were defined . | While the library itself continues to work perfectly , suddenly every code combining those classes with classes from another library fails . | 
PEP 3135 | proposal | majority | Proposal This PEP proposes that a new mechanism to customise class creation be added to Python 3.5 that meets the following criteria While there are many possible ways to use a metaclass , the vast majority of use cases falls into just three categories some initialization code running after class creation , the initalization of descriptors and keeping the order in which class attributes were defined . | While the library itself continues to work perfectly , suddenly every code combining those classes with classes from another library fails . | 
PEP 3137 | proposal | support | This PEP proposes to deprecate that behavior in Python 3.6 , but to leave it in place for at least as long as Python 2.7 is supported , possibly indefinitely . | bytes 3 b ' x00 x00 x00 ' bytearray 3 bytearray b ' x00 x00 x00 ' | No other changes are proposed to the existing constructors .
PEP 3137 | proposal | support | This PEP proposes to deprecate that behavior in Python 3.6 , but to leave it in place for at least as long as Python 2.7 is supported , possibly indefinitely . | bytes 3 b ' x00 x00 x00 ' bytearray 3 bytearray b ' x00 x00 x00 ' | No other changes are proposed to the existing constructors .
PEP 3137 | proposal | support | This PEP proposes to deprecate that behavior in Python 3.6 , but to leave it in place for at least as long as Python 2.7 is supported , possibly indefinitely . | bytes 3 b ' x00 x00 x00 ' bytearray 3 bytearray b ' x00 x00 x00 ' | No other changes are proposed to the existing constructors .
PEP 3137 | proposal | support | This PEP proposes to deprecate that behavior in Python 3.6 , but to leave it in place for at least as long as Python 2.7 is supported , possibly indefinitely . | bytes 3 b ' x00 x00 x00 ' bytearray 3 bytearray b ' x00 x00 x00 ' | No other changes are proposed to the existing constructors .
PEP 3142 | rejected | support | It was merely deferred due to only garnering lukewarm support and lack of a reference implementation rather than actually being rejected http mail.python.orgpipermailpython dev2006 February060718.html | Adding a do while construct to Python has already been proposed http www.python.orgdevpepspep 0315 | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 308 | null | majority | The PEP 308 mess has left a rather sour taste in a lot of people 's mouths there was a clear majority in favor of doing something , but the voting was rigged although I doubt if it was done deliberately to make certain that no single proposal would get a majority . | Clearly , I 'm not ominiscient , so that does n't mean it has n't , though . | 
PEP 308 | null | support | Maybe this proves that it 's simply hard to think correctly in terms of conditional expressions , and they should not be used and hence , that language support for them should be rejected . | I 've seen a few posts by now getting the proposed conditional expression the wrong way round . | 
PEP 308 | null | support | Maybe this proves that it 's simply hard to think correctly in terms of conditional expressions , and they should not be used and hence , that language support for them should be rejected . | I 've seen a few posts by now getting the proposed conditional expression the wrong way round . | 
PEP 308 | null | majority | A vote was held , a majority said no change '' , and suddenly now you 're claiming that obviously a vote is n't the important thing '' ? | Um , huh ? | 
PEP 308 | null | vote result | According to this interpretation , the vote resulted in do n't change '' . | semantics on the results , an arguably sane position considering other free software projects use this voting method . | 
PEP 308 | null | vote result | According to this interpretation , the vote resulted in do n't change '' . | semantics on the results , an arguably sane position considering other free software projects use this voting method . | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type textplain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type textplain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | vote_after_discussion | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type textplain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | 
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 308 | vote_after_discussion | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | OTOH , in a different context I might be all for this approach  
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | OTOH , in a different context I might be all for this approach  
PEP 308 | null | majority | The PEP 308 mess has left a rather sour taste in a lot of people 's mouths there was a clear majority in favor of doing something , but the voting was rigged although I doubt if it was done deliberately to make certain that no single proposal would get a majority . | Clearly , I 'm not ominiscient , so that does n't mean it has n't , though . | 
PEP 308 | null | discussion | There was some discussion of whether the language should require surrounding conditional expressions with parentheses . | I doubt I will use conditional expressions very often where there is n't a clear common and uncommon case . | 
PEP 308 | accepted | support | So not only is this system not democratic in the obvious sense of majority rules '' if you get more votes than , the PEP is approved , it 's also almost never even about gathering numerical support which is what this would be able to show . | This does n't strictly equate to number of signatures '' , which is how these sorts of petitions are often treated in modern politics it 's more about strength of argument . | 
PEP 308 | accepted | support | So not only is this system not democratic in the obvious sense of majority rules '' if you get more votes than , the PEP is approved , it 's also almost never even about gathering numerical support which is what this would be able to show . | This does n't strictly equate to number of signatures '' , which is how these sorts of petitions are often treated in modern politics it 's more about strength of argument . | 
PEP 9 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 9 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 9 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 9 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 9 | null | discussion | PEP pep number Title pep title Version cvs version string Last Modified cvs date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Final Replaced Type Informational Standards Track Requires pep numbers Created date created on, in dd mmm yyyy format Python Version version number Post History dates of postings to python list and python dev Replaces pep number Replaced By pep number | All other headers are required . | 
PEP 9 | null | discussion | PEP pep number Title pep title Version cvs version string Last Modified cvs date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Final Replaced Type Informational Standards Track Requires pep numbers Created date created on, in dd mmm yyyy format Python Version version number Post History dates of postings to python list and python dev Replaces pep number Replaced By pep number | All other headers are required . | 
PEP 9 | null | discussion | PEP pep number Title pep title Version cvs version string Last Modified cvs date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Final Replaced Type Informational Standards Track Requires pep numbers Created date created on, in dd mmm yyyy format Python Version version number Post History dates of postings to python list and python dev Replaces pep number Replaced By pep number | All other headers are required . | 
PEP 9 | null | discussion | PEP pep number Title pep title Version cvs version string Last Modified cvs date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Final Replaced Type Informational Standards Track Requires pep numbers Created date created on, in dd mmm yyyy format Python Version version number Post History dates of postings to python list and python dev Replaces pep number Replaced By pep number | All other headers are required . | 
PEP 9 | null | discussion | PEP pep number Title pep title Version cvs version string Last Modified cvs date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Final Replaced Type Informational Standards Track Requires pep numbers Created date created on, in dd mmm yyyy format Python Version version number Post History dates of postings to python list and python dev Replaces pep number Replaced By pep number | All other headers are required . | 
PEP 9 | null | discussion | PEP pep number Title pep title Version cvs version string Last Modified cvs date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Final Replaced Type Informational Standards Track Requires pep numbers Created date created on, in dd mmm yyyy format Python Version version number Post History dates of postings to python list and python dev Replaces pep number Replaced By pep number | All other headers are required . | 
PEP 9 | null | discussion | PEP pep number Title pep title Version cvs version string Last Modified cvs date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Final Replaced Type Informational Standards Track Requires pep numbers Created date created on, in dd mmm yyyy format Python Version version number Post History dates of postings to python list and python dev Replaces pep number Replaced By pep number | All other headers are required . | 
PEP 9 | null | discussion | PEP pep number Title pep title Version cvs version string Last Modified cvs date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Final Replaced Type Informational Standards Track Requires pep numbers Created date created on, in dd mmm yyyy format Python Version version number Post History dates of postings to python list and python dev Replaces pep number Replaced By pep number | All other headers are required . | 
PEP 9 | null | discussion | PEP pep number Title pep title Version cvs version string Last Modified cvs date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Final Replaced Type Informational Standards Track Requires pep numbers Created date created on, in dd mmm yyyy format Python Version version number Post History dates of postings to python list and python dev Replaces pep number Replaced By pep number | All other headers are required . | 
PEP 9 | null | discussion | PEP pep number Title pep title Version cvs version string Last Modified cvs date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Final Replaced Type Informational Standards Track Requires pep numbers Created date created on, in dd mmm yyyy format Python Version version number Post History dates of postings to python list and python dev Replaces pep number Replaced By pep number | All other headers are required . | 
PEP 9 | null | discussion | PEP pep number Title pep title Version cvs version string Last Modified cvs date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Final Replaced Type Informational Standards Track Requires pep numbers Created date created on, in dd mmm yyyy format Python Version version number Post History dates of postings to python list and python dev Replaces pep number Replaced By pep number | All other headers are required . | 
PEP 9 | null | discussion | PEP pep number Title pep title Version cvs version string Last Modified cvs date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Final Replaced Type Informational Standards Track Requires pep numbers Created date created on, in dd mmm yyyy format Python Version version number Post History dates of postings to python list and python dev Replaces pep number Replaced By pep number | All other headers are required . | 
PEP 9 | null | discussion | PEP pep number Title pep title Version cvs version string Last Modified cvs date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Final Replaced Type Informational Standards Track Requires pep numbers Created date created on, in dd mmm yyyy format Python Version version number Post History dates of postings to python list and python dev Replaces pep number Replaced By pep number | All other headers are required . | 
PEP 9 | null | discussion | PEP pep number Title pep title Version cvs version string Last Modified cvs date string Author list of authors' real names and optionally, email addrs Discussions To email address Status Draft Active Accepted Deferred Final Replaced Type Informational Standards Track Requires pep numbers Created date created on, in dd mmm yyyy format Python Version version number Post History dates of postings to python list and python dev Replaces pep number Replaced By pep number | All other headers are required . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 308 | null | support | Maybe this proves that it 's simply hard to think correctly in terms of conditional expressions , and they should not be used and hence , that language support for them should be rejected . | I 've seen a few posts by now getting the proposed conditional expression the wrong way round . | 
PEP 308 | null | support | Maybe this proves that it 's simply hard to think correctly in terms of conditional expressions , and they should not be used and hence , that language support for them should be rejected . | I 've seen a few posts by now getting the proposed conditional expression the wrong way round . | 
PEP 9 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 9 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 9 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 9 | null | consensus | To establish reStructuredText as a standard docstring format by attaining accepted '' status Python community consensus BDFL pronouncement . | 1 . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | null | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 308 | null | support | Maybe this proves that it 's simply hard to think correctly in terms of conditional expressions , and they should not be used and hence , that language support for them should be rejected . | I 've seen a few posts by now getting the proposed conditional expression the wrong way round . | 
PEP 308 | null | support | Maybe this proves that it 's simply hard to think correctly in terms of conditional expressions , and they should not be used and hence , that language support for them should be rejected . | I 've seen a few posts by now getting the proposed conditional expression the wrong way round . | 
PEP 308 | null | majority | A vote was held , a majority said no change '' , and suddenly now you 're claiming that obviously a vote is n't the important thing '' ? | Um , huh ? | 
PEP 308 | null | vote result | According to this interpretation , the vote resulted in do n't change '' . | semantics on the results , an arguably sane position considering other free software projects use this voting method . | 
PEP 308 | null | vote result | According to this interpretation , the vote resulted in do n't change '' . | semantics on the results , an arguably sane position considering other free software projects use this voting method . | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | vote_after_discussion | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | 
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 308 | vote_after_discussion | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | OTOH , in a different context I might be all for this approach  
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | OTOH , in a different context I might be all for this approach  
PEP 308 | null | majority | The PEP 308 mess has left a rather sour taste in a lot of people 's mouths there was a clear majority in favor of doing something , but the voting was rigged although I doubt if it was done deliberately to make certain that no single proposal would get a majority . | Clearly , I 'm not ominiscient , so that does n't mean it has n't , though . | 
PEP 308 | null | discussion | There was some discussion of whether the language should require surrounding conditional expressions with parentheses . | I doubt I will use conditional expressions very often where there is n't a clear common and uncommon case . | 
PEP 308 | null | support | Maybe this proves that it 's simply hard to think correctly in terms of conditional expressions , and they should not be used and hence , that language support for them should be rejected . | I 've seen a few posts by now getting the proposed conditional expression the wrong way round . | 
PEP 308 | null | support | Maybe this proves that it 's simply hard to think correctly in terms of conditional expressions , and they should not be used and hence , that language support for them should be rejected . | I 've seen a few posts by now getting the proposed conditional expression the wrong way round . | 
PEP 308 | null | majority | A vote was held , a majority said no change '' , and suddenly now you 're claiming that obviously a vote is n't the important thing '' ? | Um , huh ? | 
PEP 308 | null | vote result | According to this interpretation , the vote resulted in do n't change '' . | semantics on the results , an arguably sane position considering other free software projects use this voting method . | 
PEP 308 | null | vote result | According to this interpretation , the vote resulted in do n't change '' . | semantics on the results , an arguably sane position considering other free software projects use this voting method . | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | vote_after_discussion | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | 
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 308 | vote_after_discussion | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | OTOH , in a different context I might be all for this approach  
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | OTOH , in a different context I might be all for this approach  
PEP 308 | null | majority | The PEP 308 mess has left a rather sour taste in a lot of people 's mouths there was a clear majority in favor of doing something , but the voting was rigged although I doubt if it was done deliberately to make certain that no single proposal would get a majority . | Clearly , I 'm not ominiscient , so that does n't mean it has n't , though . | 
PEP 308 | null | support | Maybe this proves that it 's simply hard to think correctly in terms of conditional expressions , and they should not be used and hence , that language support for them should be rejected . | I 've seen a few posts by now getting the proposed conditional expression the wrong way round . | 
PEP 308 | null | support | Maybe this proves that it 's simply hard to think correctly in terms of conditional expressions , and they should not be used and hence , that language support for them should be rejected . | I 've seen a few posts by now getting the proposed conditional expression the wrong way round . | 
PEP 308 | null | majority | A vote was held , a majority said no change '' , and suddenly now you 're claiming that obviously a vote is n't the important thing '' ? | Um , huh ? | 
PEP 308 | null | vote result | According to this interpretation , the vote resulted in do n't change '' . | semantics on the results , an arguably sane position considering other free software projects use this voting method . | 
PEP 308 | null | vote result | According to this interpretation , the vote resulted in do n't change '' . | semantics on the results , an arguably sane position considering other free software projects use this voting method . | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | vote_after_discussion | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | 
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 308 | vote_after_discussion | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | OTOH , in a different context I might be all for this approach  
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | OTOH , in a different context I might be all for this approach  
PEP 308 | null | majority | The PEP 308 mess has left a rather sour taste in a lot of people 's mouths there was a clear majority in favor of doing something , but the voting was rigged although I doubt if it was done deliberately to make certain that no single proposal would get a majority . | Clearly , I 'm not ominiscient , so that does n't mean it has n't , though . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | null | discussion | PEPs are reviewed by the BDFL and his 266,8 265,8 PEP pep number Title pep title Version svn version string Last Modified svn date string Version version string Last Modified date string Author list of authors ' real names and optionally , email addrs Discussions To email address Status Draft Active Accepted Deferred Rejected 366,7 365,7 with the PEP author and or PEP editor . | Once the authors have completed a PEP , they must inform the PEP editor that it is ready for review . | 
PEP 2 | proposal | support | No changes to finder loader interfaces Rather than attempting to update the PEP 302 APIs to accept additional state , this PEP proposes that ImportEngine support the content management protocol similar to the context substitution mechanisms in the decimal module . | Intended for use by importers and loaders that have been updated to accept optional engine parameters and with ImportEngine.from engine sysengine to start with a copy of the process global import state . | 
PEP 2 | proposal | support | No changes to finder loader interfaces Rather than attempting to update the PEP 302 APIs to accept additional state , this PEP proposes that ImportEngine support the content management protocol similar to the context substitution mechanisms in the decimal module . | Intended for use by importers and loaders that have been updated to accept optional engine parameters and with ImportEngine.from engine sysengine to start with a copy of the process global import state . | 
PEP 8 | proposal | consensus | This PEP proposes a generic Docstring Processing System DPS framework , which separates out the components program and conceptual , enabling the resolution of individual issues either through consensus one solution or through divergence many . | The issues surrounding docstring processing have been contentious and difficult to resolve . | 
