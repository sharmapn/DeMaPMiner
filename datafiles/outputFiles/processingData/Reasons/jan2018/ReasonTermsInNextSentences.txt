PEP 11| proposal | support | To reduce this risk , this PEP proposes a procedure to remove code for platforms with no Python users .| Unsupporting platforms | Unsupporting platforms
PEP 11| updated | support | I 've updated PEP 11 accordingly .| So , one of the first things we should do after 2.3 is released is make a pass through PEP 11 and unsupport a bunch of stuff . | So , one of the first things we should do after 2.3 is released is make a pass through PEP 11 and unsupport a bunch of stuff .
PEP 234| proposal | feedback | This PEP proposes several ways to fix this wart .| The problem was discussed repeatedly but the specific solutions proposed in this PEP need more feedback . | The problem was discussed repeatedly but the specific solutions proposed in this PEP need more feedback .
PEP 246| rejected | discussion | The PEP was eventually rejected and has the details of why it was rejected in the end .| Part of this discussion forked off to discuss exception masking . | Part of this discussion forked off to discuss exception masking .
PEP 246| rejected | discussion | The PEP was eventually rejected and has the details of why it was rejected in the end .| Part of this discussion forked off to discuss exception masking . | Part of this discussion forked off to discuss exception masking .
PEP 250| proposal | support | In this PEP , I propose to phase out the second API in favor of supporting the class instance introspection API for all types .| One argument in favor of the class instance introspection API is that it does n't require you to create an instance in order to find out which attributes a type supports   this in turn is useful for documentation processors . | One argument in favor of the class instance introspection API is that it does n't require you to create an instance in order to find out which attributes a type supports   this in turn is useful for documentation processors .
PEP 251| proposal | support | In this PEP , I propose to phase out the second API in favor of supporting the class instance introspection API for all types .| One argument in favor of the class instance introspection API is that it does n't require you to create an instance in order to find out which attributes a type supports   this in turn is useful for documentation processors . | One argument in favor of the class instance introspection API is that it does n't require you to create an instance in order to find out which attributes a type supports   this in turn is useful for documentation processors .
PEP 255| updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form .| The impetus for the discussion was an innovative proposal from Peter Norvig . | The impetus for the discussion was an innovative proposal from Peter Norvig .
PEP 255| updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form .| The impetus for the discussion was an innovative proposal from Peter Norvig . | The impetus for the discussion was an innovative proposal from Peter Norvig .
PEP 255| updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form .| The impetus for the discussion was an innovative proposal from Peter Norvig    3  )    . | The impetus for the discussion was an innovative proposal from Peter Norvig    3  )    .
PEP 255| updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form .| The impetus for the discussion was an innovative proposal from Peter Norvig    3  )    . | The impetus for the discussion was an innovative proposal from Peter Norvig    3  )    .
PEP 263| updated | support | So after discussion with MAL , I have updated the PEP to reflect this strategy .| There are only minimal user visible changes     more encodings can be supported even in phase 1 , in particular those based on ISO 2022    provided that the proper codecs are available  )    it is now an error if the declared encoding and the text do not match . | There are only minimal user visible changes     more encodings can be supported even in phase 1 , in particular those based on ISO 2022    provided that the proper codecs are available  )    it is now an error if the declared encoding and the text do not match .
PEP 280| rejected | discussion | The PEP was eventually rejected and has the details of why it was rejected in the end .| Part of this discussion forked off to discuss exception masking . | Part of this discussion forked off to discuss exception masking .
PEP 280| rejected | discussion | The PEP was eventually rejected and has the details of why it was rejected in the end .| Part of this discussion forked off to discuss exception masking . | Part of this discussion forked off to discuss exception masking .
PEP 287| accepted | consensus | I would n't object to seeing this PEP approved as an informational PEP that described reST as an optional format for docstrings .|    I 'm assuming that there is consensus in the doc sig that reST is the right solution .  )  |    I 'm assuming that there is consensus in the doc sig that reST is the right solution .  ) 
PEP 287| accepted | consensus | I would n't object to seeing this PEP approved as an informational PEP that described reST as an optional format for docstrings .|    I 'm assuming that there is consensus in the doc sig that reST is the right solution .  )  |    I 'm assuming that there is consensus in the doc sig that reST is the right solution .  ) 
PEP 289| updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form .| The impetus for the discussion was an innovative proposal from Peter Norvig . | The impetus for the discussion was an innovative proposal from Peter Norvig .
PEP 289| updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form .| The impetus for the discussion was an innovative proposal from Peter Norvig . | The impetus for the discussion was an innovative proposal from Peter Norvig .
PEP 289| updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form .| The impetus for the discussion was an innovative proposal from Peter Norvig    3  )    . | The impetus for the discussion was an innovative proposal from Peter Norvig    3  )    .
PEP 289| updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form .| The impetus for the discussion was an innovative proposal from Peter Norvig    3  )    . | The impetus for the discussion was an innovative proposal from Peter Norvig    3  )    .
PEP 289| updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form .| The impetus for the discussion was an innovative proposal from Peter Norvig    3  )    . | The impetus for the discussion was an innovative proposal from Peter Norvig    3  )    .
PEP 289| updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form .| The impetus for the discussion was an innovative proposal from Peter Norvig    3  )    . | The impetus for the discussion was an innovative proposal from Peter Norvig    3  )    .
PEP 308| updated | feedback | I 've now updated the PEP to the current state of play , which is pretty much done .| If there 's no significant feedback , I 'll post this to c.l. py tomorrow . | If there 's no significant feedback , I 'll post this to c.l. py tomorrow .
PEP 317| rejected | discussion | The PEP was eventually rejected and has the details of why it was rejected in the end .| Part of this discussion forked off to discuss exception masking . | Part of this discussion forked off to discuss exception masking .
PEP 317| rejected | discussion | The PEP was eventually rejected and has the details of why it was rejected in the end .| Part of this discussion forked off to discuss exception masking . | Part of this discussion forked off to discuss exception masking .
PEP 318| updated | support | I 'm working on changes to PEP 318 which incorporate class decorators .| Michael Hudson 's latest patch supports them . | Michael Hudson 's latest patch supports them .
PEP 321| proposal | discussion | PEP 0321 proposes a number of extensions to it .| A few weeks ago , c.l. py carried a discussion on PEP 0321 . | A few weeks ago , c.l. py carried a discussion on PEP 0321 .
PEP 340| proposal | discussion | It is , in fact , what PEP 340 already proposes .| Let us take a step back for a moment and realize that this entire discussion is going around in circles . | Let us take a step back for a moment and realize that this entire discussion is going around in circles .
PEP 376| updated | feedback | We have polished out PEP 376 and its code prototype at Distutils SIG .| It seems to fullfill now all the requirements , so I am mailing it here again , for a new round of feedback , if needed . | It seems to fullfill now all the requirements , so I am mailing it here again , for a new round of feedback , if needed .
PEP 383| proposal | support | This PEP then proposes to introduce a new protocol to be followed by objects which represent file system paths .| Providing a protocol allows for clear signalling of what objects represent file system paths as well as a way to extract a lower level representation that can be used with older APIs which only support strings or bytes . | Providing a protocol allows for clear signalling of what objects represent file system paths as well as a way to extract a lower level representation that can be used with older APIs which only support strings or bytes .
PEP 383| proposal | support | This PEP then proposes to introduce a new protocol to be followed by objects which represent file system paths .| Providing a protocol allows for explicit signaling of what objects represent file system paths as well as a way to extract a lower level representation that can be used with older APIs which only support strings or bytes . | Providing a protocol allows for explicit signaling of what objects represent file system paths as well as a way to extract a lower level representation that can be used with older APIs which only support strings or bytes .
PEP 383| proposal | support | This PEP then proposes to introduce a new protocol to be followed by objects which represent file system paths .| Providing a protocol allows for explicit signaling of what objects represent file system paths as well as a way to extract a lower level representation that can be used with older APIs which only support strings or bytes . | Providing a protocol allows for explicit signaling of what objects represent file system paths as well as a way to extract a lower level representation that can be used with older APIs which only support strings or bytes .
PEP 383| proposal | support | This PEP then proposes to introduce a new protocol to be followed by objects which represent file system paths .| Providing a protocol allows for clear signalling of what objects represent file system paths as well as a way to extract a lower level representation that can be used with older APIs which only support strings or bytes . | Providing a protocol allows for clear signalling of what objects represent file system paths as well as a way to extract a lower level representation that can be used with older APIs which only support strings or bytes .
PEP 383| proposal | support | This PEP then proposes to introduce a new protocol to be followed by objects which represent file system paths .| Providing a protocol allows for explicit signaling of what objects represent file system paths as well as a way to extract a lower level representation that can be used with older APIs which only support strings or bytes . | Providing a protocol allows for explicit signaling of what objects represent file system paths as well as a way to extract a lower level representation that can be used with older APIs which only support strings or bytes .
PEP 383| proposal | support | This PEP then proposes to introduce a new protocol to be followed by objects which represent file system paths .| Providing a protocol allows for explicit signaling of what objects represent file system paths as well as a way to extract a lower level representation that can be used with older APIs which only support strings or bytes . | Providing a protocol allows for explicit signaling of what objects represent file system paths as well as a way to extract a lower level representation that can be used with older APIs which only support strings or bytes .
PEP 389| proposal | feedback | Below is a new PEP based on discussions from the stdlib sig , which proposes to add the argparse module to the standard library in Python 2.7 and 3.2 .| Looking forward to your feedback ! | Looking forward to your feedback !
PEP 393| bdfl_pronouncement | feedback | Guido has agreed to eventually pronounce on PEP 393 .| Before that can happen , I 'd like to collect feedback on it . | Before that can happen , I 'd like to collect feedback on it .
PEP 393| bdfl_pronouncement | feedback | Guido has agreed to eventually pronounce on PEP 393 .| Before that can happen , I 'd like to collect feedback on it . | Before that can happen , I 'd like to collect feedback on it .
PEP 393| bdfl_pronouncement_rejected | feedback | Guido has agreed to eventually pronounce on PEP 393 .| Before that can happen , I 'd like to collect feedback on it . | Before that can happen , I 'd like to collect feedback on it .
PEP 393| bdfl_pronouncement_rejected | feedback | Guido has agreed to eventually pronounce on PEP 393 .| Before that can happen , I 'd like to collect feedback on it . | Before that can happen , I 'd like to collect feedback on it .
PEP 414| bdfl_pronouncement_accepted | discussion | It describes in detail a lot more of the historical background that was taken as read when Guido accepted the PEP .| Can we let the interminable discussion die now ? | Can we let the interminable discussion die now ?
PEP 414| bdfl_pronouncement_accepted | discussion | It describes in detail a lot more of the historical background that was taken as read when Guido accepted the PEP .| Can we let the interminable discussion die now ? | Can we let the interminable discussion die now ?
PEP 433| proposal | support | This PEP proposes to make all file descriptors created by Python non inheritable by default to reduces the risk of these issues .| This PEP fixes also a race condition in multithreaded applications on operating systems supporting atomic flags to create non inheritable file descriptors . | This PEP fixes also a race condition in multithreaded applications on operating systems supporting atomic flags to create non inheritable file descriptors .
PEP 433| proposal | support | This PEP proposes to make all file descriptors created by Python non inheritable by default to reduce the risk of these issues .| This PEP   fixes also a race condition in multithreaded applications on operating   fixes also a race condition in multi threaded applications on operating systems supporting atomic flags to create non inheritable file descriptors . | This PEP   fixes also a race condition in multithreaded applications on operating   fixes also a race condition in multi threaded applications on operating systems supporting atomic flags to create non inheritable file descriptors .
PEP 446| proposal | support | This PEP proposes to make all file descriptors created by Python non inheritable by default to reduces the risk of these issues .| This PEP fixes also a race condition in multithreaded applications on operating systems supporting atomic flags to create non inheritable file descriptors . | This PEP fixes also a race condition in multithreaded applications on operating systems supporting atomic flags to create non inheritable file descriptors .
PEP 446| proposal | support | This PEP proposes to make all file descriptors created by Python non inheritable by default to reduce the risk of these issues .| This PEP   fixes also a race condition in multithreaded applications on operating   fixes also a race condition in multi threaded applications on operating systems supporting atomic flags to create non inheritable file descriptors . | This PEP   fixes also a race condition in multithreaded applications on operating   fixes also a race condition in multi threaded applications on operating systems supporting atomic flags to create non inheritable file descriptors .
PEP 465| proposal | support | This PEP proposes eliminating the concept of PYO files from Python .| To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in bytecode repository directory    i.e. , the     pycache     directory  )  . | To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in bytecode repository directory    i.e. , the     pycache     directory  )  .
PEP 465| proposal | support | This PEP proposes eliminating the concept of PYO files from Python .| To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in bytecode repository directory    i.e. , the     pycache     directory  )  . | To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in bytecode repository directory    i.e. , the     pycache     directory  )  .
PEP 465| proposal | support | This PEP proposes eliminating the concept of PYO files from Python .| To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in the bytecode repository directory when it 's called for    i.e. , the     pycache     directory  )  . | To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in the bytecode repository directory when it 's called for    i.e. , the     pycache     directory  )  .
PEP 465| bdfl_allocated | discussion | I am willing to be the BDFL for this PEP .| I have tried to skim the recent discussion    only python dev  )  and I do n't see much remaining controversy . | I have tried to skim the recent discussion    only python dev  )  and I do n't see much remaining controversy .
PEP 465| bdfl_allocated | controversy | I am willing to be the BDFL for this PEP .| I have tried to skim the recent discussion    only python dev  )  and I do n't see much remaining controversy . | I have tried to skim the recent discussion    only python dev  )  and I do n't see much remaining controversy .
PEP 465| willing_bdfl | discussion | I am willing to be the BDFL for this PEP .| I have tried to skim the recent discussion    only python dev  )  and I do n't see much remaining controversy . | I have tried to skim the recent discussion    only python dev  )  and I do n't see much remaining controversy .
PEP 465| willing_bdfl | controversy | I am willing to be the BDFL for this PEP .| I have tried to skim the recent discussion    only python dev  )  and I do n't see much remaining controversy . | I have tried to skim the recent discussion    only python dev  )  and I do n't see much remaining controversy .
PEP 476| proposal | discussion | This PEP proposes using the system provided certificate database .| Previous discussions have suggested bundling Mozilla 's certificate database and using that by default . | Previous discussions have suggested bundling Mozilla 's certificate database and using that by default .
PEP 476| rejected | discussion | PEP 476 rejected providing a public indefinitely maintained API for this , so PEP 493 is specifically about helping commercial redistributors offer a smoother transition plan to customers without affecting the public Python level API , and without encouraging a plethora of mutually incompatible transition schemes .| PEP 493 is n't about attempting to rehash the PEP 476 discussions in search of a different conclusion , so this would need to be a different PEP , preferably one that targets Python 3.6 first and covers more than just HTTPS . | PEP 493 is n't about attempting to rehash the PEP 476 discussions in search of a different conclusion , so this would need to be a different PEP , preferably one that targets Python 3.6 first and covers more than just HTTPS .
PEP 476| rejected | discussion | PEP 476 rejected providing a public indefinitely maintained API for this , so PEP 493 is specifically about helping commercial redistributors offer a smoother transition plan to customers without affecting the public Python level API , and without encouraging a plethora of mutually incompatible transition schemes .| PEP 493 is n't about attempting to rehash the PEP 476 discussions in search of a different conclusion , so this would need to be a different PEP , preferably one that targets Python 3.6 first and covers more than just HTTPS . | PEP 493 is n't about attempting to rehash the PEP 476 discussions in search of a different conclusion , so this would need to be a different PEP , preferably one that targets Python 3.6 first and covers more than just HTTPS .
PEP 480| proposal | support | PEP 480 also proposes an easy to use key management solution for developers , how to interface with a potential build farm on PyPI infrastructure , and discusses the security benefits of end to end signing .| The second stage of the proposal simultaneously supports real time project registration and developer signatures , and when configured to maximize security on PyPI , less than 1   of end users will be at risk even if an attacker controls PyPI and goes undetected for a month . | The second stage of the proposal simultaneously supports real time project registration and developer signatures , and when configured to maximize security on PyPI , less than 1   of end users will be at risk even if an attacker controls PyPI and goes undetected for a month .
PEP 485| accepted | discussion | However , those are just minor edits , and I hereby approve the PEP .| Thanks Chris and everyone else for the fruitful discussion    and thanks especially to Chris for eventually ending the bikeshedding and writing a PEP that explains each of the choices  )  . | Thanks Chris and everyone else for the fruitful discussion    and thanks especially to Chris for eventually ending the bikeshedding and writing a PEP that explains each of the choices  )  .
PEP 488| proposal | support | This PEP proposes eliminating the concept of PYO files from Python .| To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in bytecode repository directory    i.e. , the     pycache     directory  )  . | To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in bytecode repository directory    i.e. , the     pycache     directory  )  .
PEP 488| proposal | support | This PEP proposes eliminating the concept of PYO files from Python .| To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in bytecode repository directory    i.e. , the     pycache     directory  )  . | To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in bytecode repository directory    i.e. , the     pycache     directory  )  .
PEP 488| proposal | support | This PEP proposes eliminating the concept of PYO files from Python .| To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in the bytecode repository directory when it 's called for    i.e. , the     pycache     directory  )  . | To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in the bytecode repository directory when it 's called for    i.e. , the     pycache     directory  )  .
PEP 488| bdfl_allocated | discussion | I am willing to be the BDFL for this PEP .| I have tried to skim the recent discussion    only python dev  )  and I do n't see much remaining controversy . | I have tried to skim the recent discussion    only python dev  )  and I do n't see much remaining controversy .
PEP 488| bdfl_allocated | controversy | I am willing to be the BDFL for this PEP .| I have tried to skim the recent discussion    only python dev  )  and I do n't see much remaining controversy . | I have tried to skim the recent discussion    only python dev  )  and I do n't see much remaining controversy .
PEP 488| willing_bdfl | discussion | I am willing to be the BDFL for this PEP .| I have tried to skim the recent discussion    only python dev  )  and I do n't see much remaining controversy . | I have tried to skim the recent discussion    only python dev  )  and I do n't see much remaining controversy .
PEP 488| willing_bdfl | controversy | I am willing to be the BDFL for this PEP .| I have tried to skim the recent discussion    only python dev  )  and I do n't see much remaining controversy . | I have tried to skim the recent discussion    only python dev  )  and I do n't see much remaining controversy .
PEP 492| proposal | discussion | PEP 492 proposes a quite simple and elegant solution for these issues .| Most of the technical discussion about the PEP is on getting the details right so that users wo n't have to worry about them , and can instead just continue to write   almost   sequential code when using the asyncio package    or some other framework that offers an event loop integrated with coroutines  )  . | Most of the technical discussion about the PEP is on getting the details right so that users wo n't have to worry about them , and can instead just continue to write   almost   sequential code when using the asyncio package    or some other framework that offers an event loop integrated with coroutines  )  .
PEP 493| rejected | discussion | PEP 476 rejected providing a public indefinitely maintained API for this , so PEP 493 is specifically about helping commercial redistributors offer a smoother transition plan to customers without affecting the public Python level API , and without encouraging a plethora of mutually incompatible transition schemes .| PEP 493 is n't about attempting to rehash the PEP 476 discussions in search of a different conclusion , so this would need to be a different PEP , preferably one that targets Python 3.6 first and covers more than just HTTPS . | PEP 493 is n't about attempting to rehash the PEP 476 discussions in search of a different conclusion , so this would need to be a different PEP , preferably one that targets Python 3.6 first and covers more than just HTTPS .
PEP 493| rejected | discussion | PEP 476 rejected providing a public indefinitely maintained API for this , so PEP 493 is specifically about helping commercial redistributors offer a smoother transition plan to customers without affecting the public Python level API , and without encouraging a plethora of mutually incompatible transition schemes .| PEP 493 is n't about attempting to rehash the PEP 476 discussions in search of a different conclusion , so this would need to be a different PEP , preferably one that targets Python 3.6 first and covers more than just HTTPS . | PEP 493 is n't about attempting to rehash the PEP 476 discussions in search of a different conclusion , so this would need to be a different PEP , preferably one that targets Python 3.6 first and covers more than just HTTPS .
PEP 515| proposal | discussion | This PEP currently only proposes changing the literal syntax .| The following extensions are open for discussion   | The following extensions are open for discussion  
PEP 3101| proposal | support | I propose that the PEP not provide any means to pass format specifiers as arguments .| After all , one PEP need not support everything anyone would ever want to do with string interpolation . | After all , one PEP need not support everything anyone would ever want to do with string interpolation .
PEP 3103| poll_result | support | There the poll indicated no specific proposal had a majority , so for each specific proposal one could say it did n't have popular support , but the majority still prefered to have a conditional expression .| But at that time Guido used that poll as an indication there was not enough support . | But at that time Guido used that poll as an indication there was not enough support .
PEP 3107| accepted | support | Function annotations PEP is accepted and code has been checked in to p3yk .| I do n't think there would be much support for the syntax in 2.6 , but I could be wrong . | I do n't think there would be much support for the syntax in 2.6 , but I could be wrong .
PEP 3107| accepted | support | Function annotations PEP is accepted and code has been checked in to p3yk .| I do n't think there would be much support for the syntax in 2.6 , but I could be wrong . | I do n't think there would be much support for the syntax in 2.6 , but I could be wrong .
PEP 3107| accepted | support | Function annotations PEP is accepted and code has been checked in to p3yk .| I do n't think there would be much support for the syntax in 2.6 , but I could be wrong . | I do n't think there would be much support for the syntax in 2.6 , but I could be wrong .
PEP 3107| accepted | support | Function annotations PEP is accepted and code has been checked in to p3yk .| I do n't think there would be much support for the syntax in 2.6 , but I could be wrong . | I do n't think there would be much support for the syntax in 2.6 , but I could be wrong .
PEP 308| updated | feedback | I 've now updated the PEP to the current state of play , which is pretty much done .| If there 's no significant feedback , I 'll post this to c.l. py tomorrow . | If there 's no significant feedback , I 'll post this to c.l. py tomorrow .
PEP 308| updated | feedback | I 've now updated the PEP to the current state of play , which is pretty much done .| If there 's no significant feedback , I 'll post this to c.l.py tomorrow . | If there 's no significant feedback , I 'll post this to c.l.py tomorrow .
PEP 308| updated | feedback | I 've now updated the PEP to the current state of play , which is pretty much done .| If there 's no significant feedback , I 'll post this to c.l.py tomorrow . | If there 's no significant feedback , I 'll post this to c.l.py tomorrow .
