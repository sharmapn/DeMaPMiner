PEP 2 | proposal | support | No changes to finderloader interfaces Rather than attempting to update the PEP 302 APIs to accept additional state , this PEP proposes that ImportEngine support the content management protocol similar to the context substitution mechanisms in the decimal module . | from engine sysengine to start with a copy of the process global import state . | 
PEP 8 | proposal | consensus | This PEP proposes a generic Docstring Processing System DPS framework , which separates out the components program and conceptual , enabling the resolution of individual issues either through consensus one solution or through divergence many . | The issues surrounding docstring processing have been contentious and difficult to resolve . | 
PEP 9 | accepted | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | accepted | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | final | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 215 | proposal | support | To address that problem and a number of other concerns , this PEP proposes an alternative approach to compiler supported interpolation , based on a new interpolate magic method , and using a substitution syntax inspired by that used in string . | system call . | 
PEP 219 | final | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | final | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | final | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | final | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | final | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | final | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | final | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | final | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | final | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | final | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 219 | final | support | A final option is to use the Stackless 2 3 variant implementation of Python instead , which supports lightweight coroutines . | This does n't work on platforms without threads , though , and is very slow on platforms that do compared to what is achievable without threads . | 
PEP 234 | decided_bdfl_consensus | consensus | iterkeys ... Resolved Issues The following topics have been decided by consensus or BDFL pronouncement . | itervalues ... for key in dict . | 
PEP 234 | decided_bdfl_consensus | consensus | The following topics have been decided by consensus or BDFL pronouncement . | Resolved Issues |   Two alternative spellings for next     )  have been proposed but rejected     next       )  , because it corresponds to a type object slot    tp iternext  )    and   call       )  , because this is the only operation .
PEP 234 | decided_bdfl_consensus | consensus | The following topics have been decided by consensus or BDFL ! | Resolved Issues ! | pronouncement . ! !
PEP 234 | decided_bdfl_consensus | consensus | Resolved Issues The following topics have been decided by consensus or BDFL pronouncement . | There is still discussion about whether 334,403 and found that the latter is only about 7 faster . | 
PEP 250 | proposal | support | In this PEP , I propose to phase out the second API in favor of supporting the class instance introspection API for all types . | Digital Creations 's ExtensionClasses ignore the second introspection API , and instead emulate the class instance introspection API , which is more powerful . | One argument in favor of the class instance introspection API is that it does n't require you to create an instance in order to find out which attributes a type supports   this in turn is useful for documentation processors .
PEP 251 | proposal | support | In this PEP , I propose to phase out the second API in favor of supporting the class instance introspection API for all types . | Digital Creations 's ExtensionClasses ignore the second introspection API , and instead emulate the class instance introspection API , which is more powerful . | One argument in favor of the class instance introspection API is that it does n't require you to create an instance in order to find out which attributes a type supports   this in turn is useful for documentation processors .
PEP 255 | proposal | support | PEP 255 proposes both a mechanism and concrete syntax to support it . | I was discussing mechanisms . | I pointed out that the proposed mechanism had important limitations    well , important to me I suppose   I like it when abstractions can commute   this is not the case with the generators of PEP 255  )  and I offered a more general mechanism , but I did not suggest convenient concrete syntax for it .
PEP 255 | proposal | support | This PEP proposes that generators support a close method and destruction semantics , such that the restriction can be lifted , expanding the applicability of generators . | The finally clause execution can not be either guaranteed or enforced . | Rationale
PEP 255 | updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form . | The bracketed yield syntax left something to be desired the performance gains had not been demonstrated and the range of use cases had not been shown . | The impetus for the discussion was an innovative proposal from Peter Norvig .
PEP 255 | updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form . | The bracketed yield syntax left something to be desired the performance gains had not been demonstrated and the range of use cases had not been shown . | The impetus for the discussion was an innovative proposal from Peter Norvig .
PEP 255 | updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form . | The bracketed yield syntax left something to be desired the performance gains had not been demonstrated and the range of use cases had not been shown . | The impetus for the discussion was an innovative proposal from Peter Norvig    3  )    .
PEP 255 | updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form . | The bracketed yield syntax left something to be desired the performance gains had not been demonstrated and the range of use cases had not been shown . | The impetus for the discussion was an innovative proposal from Peter Norvig    3  )    .
PEP 255 | proposal | support | There is a reference implementation 2 that supports everything that the PEP proposes to add . | The PEP is also available at 1 . | 
PEP 255 | proposal | support | There is a reference implementation 2 that supports everything that the PEP proposes to add . | The PEP is also available at 1 . | 
PEP 256 | proposal | consensus | This PEP proposes a generic Docstring Processing System DPS framework , which separates out the components program and conceptual , enabling the resolution of individual issues either through consensus one solution or through divergence many . | The issues surrounding docstring processing have been contentious and difficult to resolve . | 
PEP 258 | proposal | consensus | This PEP proposes a generic Docstring Processing System DPS framework , which separates out the components program and conceptual , enabling the resolution of individual issues either through consensus one solution or through divergence many . | The issues surrounding docstring processing have been contentious and difficult to resolve . | 
PEP 263 | updated | discussion | So after discussion with MAL , I have updated the PEP to reflect this strategy . | Still , providing the transitional warning of phase 1 is desirable , and indeed possible with this implementation . | There are only minimal user visible changes     more encodings can be supported even in phase 1 , in particular those based on ISO 2022    provided that the proper codecs are available  )    it is now an error if the declared encoding and the text do not match .
PEP 263 | proposal | discussion | In the discussion of PEP 263 , I proposed that the external encoding of Python scripts themselves be fixed as UTF 8 , and other encodings would have to be pretranslated by an appropriate codec . | I think it would be reasonable to make UTF 8 the default encoding on all platforms , except for internal OS functions , where Windows will presumably continue to use UTF 16 and nix distros will probably continue to agree to disagree about whether on disk format is NFD or NFC and the Python language as yet does n't know about NFC v. NFD , although the library does . | That was shouted down by the European contingent , who wanted to continue using Latin 1 and Latin 2 without codecs or a wrapper to call them transparently .
PEP 285 | proposal | discussion | The first round of discussion on python dev brought up some contentious issues where people disagreed strongly with particular details proposed in the PEP , and I put those contentious issues at the top of the review list . |  | 
PEP 285 | proposal | discussion | The first round of discussion on python dev brought up some contentious issues where people disagreed strongly with particular details proposed in the PEP , and I put those contentious issues at the top of the review list . |  | 
PEP 285 | accepted | discussion | The ACCEPTED thread was just Guido 's final decision , so it 's unlikely it would automatically duplicate much of the prior discussion . | There were several lengthy threads that cropped up in response to Guido 's original posting of the PEP which in turn followed a lengthy discussion on the python dev list . | I 'm not sure any angry comments were called for    hope you did n't take mine in that vein  )  , but I do think that in a case like this , it 's a good idea to review prior threads    e.g. , with google for the newsgroup  )  and perhaps python dev archives .
PEP 286 | deferred | feedback | PEP Deferral Further exploration of the concepts covered in this PEP has been deferred for lack of a current champion interested in promoting the goals of the PEP and collecting and incorporating feedback , and with sufficient available time to do so effectively . | To deal with these cases , a specialized argument type is proposed . | 
PEP 287 | proposal | discussion | The PEP proposes to solve a specific problem docstring formats without any discussion of the problem domain or its requirements . | I think this is backwards . | 
PEP 288 | proposal | support | This PEP proposes that generators support a close method and destruction semantics , such that the restriction can be lifted , expanding the applicability of generators . | The finally clause execution can not be either guaranteed or enforced . | Rationale
PEP 289 | updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form . | The bracketed yield syntax left something to be desired the performance gains had not been demonstrated and the range of use cases had not been shown . | The impetus for the discussion was an innovative proposal from Peter Norvig .
PEP 289 | updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form . | The bracketed yield syntax left something to be desired the performance gains had not been demonstrated and the range of use cases had not been shown . | The impetus for the discussion was an innovative proposal from Peter Norvig .
PEP 289 | updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form . | The bracketed yield syntax left something to be desired the performance gains had not been demonstrated and the range of use cases had not been shown . | The impetus for the discussion was an innovative proposal from Peter Norvig    3  )    .
PEP 289 | updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form . | The bracketed yield syntax left something to be desired the performance gains had not been demonstrated and the range of use cases had not been shown . | The impetus for the discussion was an innovative proposal from Peter Norvig    3  )    .
PEP 289 | updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form . | The bracketed yield syntax left something to be desired the performance gains had not been demonstrated and the range of use cases had not been shown . | The impetus for the discussion was an innovative proposal from Peter Norvig    3  )    .
PEP 289 | updated | discussion | After , much discussion on the python dev list , the PEP has been resurrected its present form . | The bracketed yield syntax left something to be desired the performance gains had not been demonstrated and the range of use cases had not been shown . | The impetus for the discussion was an innovative proposal from Peter Norvig    3  )    .
PEP 289 | bdfl_pronouncement_accepted | feedback | Based on the favorable feedback here and on python dev , Guido has accepted the PEP for Py2 .4 . | Thanks to everyone for the comments on PEP 289 . | Raymond Hettinger
PEP 289 | bdfl_pronouncement_accepted | favorable_feedback | Based on the favorable feedback here and on python dev , Guido has accepted the PEP for Py2 .4 . | Thanks to everyone for the comments on PEP 289 . | Raymond Hettinger
PEP 289 | bdfl_pronouncement_accepted | feedback | Based on the favorable feedback here and on python dev , Guido has accepted the PEP for Py2 .4 . | Thanks to everyone for the comments on PEP 289 . | Raymond Hettinger
PEP 289 | bdfl_pronouncement_accepted | favorable_feedback | Based on the favorable feedback here and on python dev , Guido has accepted the PEP for Py2 .4 . | Thanks to everyone for the comments on PEP 289 . | Raymond Hettinger
PEP 292 | accepted | discussion | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | 
PEP 292 | accepted | consensus | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | 
PEP 292 | updated | support | This issue was resolved by no longer subclassing unicode but making it easy to subclass Template so as to add direct Unicode support with ease . | That would be too surprising and lead to inconsistent usage thanks to sudden mixing of strings and Unicode objects in code . | The second issue was other the design of the API .
PEP 292 | accepted | discussion | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | 
PEP 292 | accepted | consensus | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | 
PEP 292 | updated | support | This issue was resolved by no longer subclassing unicode but making it easy to subclass Template so as to add direct Unicode support with ease . | That would be too surprising and lead to inconsistent usage thanks to sudden mixing of strings and Unicode objects in code . | The second issue was other the design of the API .
PEP 292 | accepted | discussion | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | 
PEP 292 | accepted | consensus | Ignoring the syntax discussions that was decided long ago before the PEP was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed . | PEP 292 Simpler String Substitutions got a huge amount of discussion this past two weeks . | 
PEP 292 | updated | support | This issue was resolved by no longer subclassing unicode but making it easy to subclass Template so as to add direct Unicode support with ease . | That would be too surprising and lead to inconsistent usage thanks to sudden mixing of strings and Unicode objects in code . | The second issue was other the design of the API .
PEP 292 | proposal | support | To address that problem and a number of other concerns , this PEP proposes an alternative approach to compiler supported interpolation , based on a new interpolate magic method , and using a substitution syntax inspired by that used in string . | system call . | 
PEP 292 | proposal | support | To address that problem and a number of other concerns , this PEP proposes an alternative approach to compiler supported interpolation , based on a new binary operator with a syntactically constrained right hand side , a new interpolate magic method , and a substitution syntax inspired by that used in string . | system call . | 
PEP 292 | proposal | support | To address that problem and a number of other concerns , this PEP proposes an alternative approach to compiler supported interpolation , using i for interpolation '' as the new string prefix and a substitution syntax inspired by that used in string . | system call . | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type textplain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type textplain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | vote_after_discussion | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type textplain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | 
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 308 | vote_after_discussion | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | OTOH , in a different context I might be all for this approach  
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | OTOH , in a different context I might be all for this approach  
PEP 308 | accepted | support | So not only is this system not democratic in the obvious sense of majority rules '' if you get more votes than , the PEP is approved , it 's also almost never even about gathering numerical support which is what this would be able to show . | This does n't strictly equate to number of signatures '' , which is how these sorts of petitions are often treated in modern politics it 's more about strength of argument . | 
PEP 308 | accepted | majority | So not only is this system not democratic in the obvious sense of majority rules '' if you get more votes than , the PEP is approved , it 's also almost never even about gathering numerical support which is what this would be able to show . | This does n't strictly equate to number of signatures '' , which is how these sorts of petitions are often treated in modern politics it 's more about strength of argument . | 
PEP 310 | proposal | discussion | Some waxings on PEP 310 PEP 310 proposes the with ' syntax that came up a while back that sparked an immense discussion on python dev . | Contributing threads Unification of logging in Python 's Standard Library | 
PEP 310 | proposal | discussion | Some waxings on PEP 310 PEP 310 proposes the with ' syntax that came up a while back that sparked an immense discussion on python dev . | Contributing threads Unification of logging in Python 's Standard Library | 
PEP 310 | proposal | discussion | Some waxings on PEP 310 PEP 310 proposes the with ' syntax that came up a while back that 20 sparked an immense discussion on python dev . | Contributing threads Unification of logging in Python 's Standard Library 20 | 
PEP 310 | proposal | discussion | Some waxings on PEP 310 PEP 310 proposes the with ' syntax that came up a while back that sparked an immense discussion on python dev . | Contributing threads Unification of logging in Python 's Standard Library | 
PEP 310 | proposal | discussion | Some waxings on PEP 310 PEP 310 proposes the with ' syntax that came up a while back that sparked an immense discussion on python dev . | Contributing threads Unification of logging in Python 's Standard Library | 
PEP 310 | proposal | discussion | Some waxings on PEP 310 PEP 310 proposes the with ' syntax that came up a while back that sparked an immense discussion on python dev . | Contributing threads Unification of logging in Python 's Standard Library | 
PEP 310 | proposal | discussion | Some waxings on PEP 310 PEP 310 proposes the with ' syntax that came up a while back that 20 sparked an immense discussion on python dev . | Contributing threads Unification of logging in Python 's Standard Library 20 | 
PEP 310 | proposal | discussion | Some waxings on PEP 310 PEP 310 proposes the with ' syntax that came up a while back that sparked an immense discussion on python dev . | Contributing threads Unification of logging in Python 's Standard Library | 
PEP 311 | proposal | support | This PEP proposes a new API , for platforms built with threading support , to manage the Python thread state . | Specifically , it provides a solution for authors of complex multi threaded extensions , where the current state of Python i.e. , the state of the GIL is unknown . | An implementation strategy is proposed , along with an initial , platform independent implementation .
PEP 318 | proposal | discussion | But it seems reasonable to me to take their meaning to be defined by some combination of 1 the PEP that proposes their introduction , 2 the discussion that preceded and followed the writing of that PEP , and 3 the actual implementations people have produced . | Now , doubtless analytic philosophers could spend hours arguing about what it actually means to make such a statement when decorators are n't currently part of the language spec . | 
PEP 337 | deferred | feedback | FATAL PEP Deferral Further exploration of the concepts covered in this PEP has been deferred for lack of a current champion interested in promoting the goals of the PEP and collecting and incorporating feedback , and with sufficient available time to do so effectively . | setLevel logging . | 
PEP 338 | updated | feedback | I 've updated the PEP to incorporate the feedback from this thread . | 20070706080601.8C3B.JCARLSON uci.edu | The new version is below , and should show up on the website shortly .
PEP 340 | proposal | discussion | I proposed this at some point during the discussion leading up to the PEP and it was boohed away as too fragile and I agree . | 17015.39213.522060.873605 montanaro.dyndns.org ca471dc20505031013287a2e92 mail.gmail.com 17015.48830.223391.390538 montanaro.dyndns.org ca471dc2050503113127f938b0 mail.gmail.com d58tkb fvp 1 sea.gmane.org | 
PEP 340 | accepted | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | 3 . | 
PEP 342 | accepted | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | 2 . | 
PEP 342 | accepted | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | 3 . | 
PEP 342 | accepted | discussion | After this PEP was originally approved , a subsequent discussion on python dev 4 settled on the term context manager '' for objects which provide enter and exit methods , and context management protocol '' for the protocol itself . | Open Issues 1 . | 
PEP 342 | proposal | support | There is a reference implementation 2 that supports everything that the PEP proposes to add . | The PEP is also available at 1 . | 
PEP 342 | proposal | support | There is a reference implementation 2 that supports everything that the PEP proposes to add . | The PEP is also available at 1 . | 
PEP 345 | updated | discussion | I 've updated the PEP accordingly , and also made some changes after the discussions we had with Martin on Distutils SIG on how versions are defined . | Packages 1.2 4B325C50.6040902 v.loewis.de 94bdd2610912231107p6fbfe13ei7ef2e77a00dc14fe mail.gmail.com 75d5dd69b850e9bd793b43618327e655 preisshare.net 871vilqhsy.fsf uwakimon.sk.tsukuba.ac.jp e626d66af534e03f22749f3dd4a6ff73 preisshare.net 4B3333DF.40705 v.loewis.de 94bdd2610912240152r6131ec9ay2ada83f66aa17b35 mail.gmail.com 4B334109.2060708 v.loewis.de 4B346ACE.2030400 gmail.com | FYI we have introduced a range operator , so one may define a range of versions .
PEP 345 | updated | feedback | I 've updated PEP 345 with this feedback . | 4B3266CF.7030705 v.loewis.de 94bdd2610912231123o6d3236c7j289df78391083ac5 mail.gmail.com 4B3279E9.4010507 v.loewis.de 94bdd2610912231311h44e5563bn98fab09cab3c37f1 mail.gmail.com 4B3324B2.3030708 v.loewis.de 94bdd2610912240132t345b4d8bnc1bc81d5ae82b194 mail.gmail.com 4B334626.6040505 v.loewis.de 94bdd2610912250412m4402a238j741ce6c3bc7ba53d mail.gmail.com 4B353C81.1080702 v.loewis.de | I 've made the range         )  operator the default one , and added more details on how versions works .
PEP 345 | updated | discussion | I 've updated the PEP accordingly , and also made some changes after the discussions we had with Martin on Distutils SIG on how versions are defined . | Packages 1.2 4B325C50.6040902 v.loewis.de 94bdd2610912231107p6fbfe13ei7ef2e77a00dc14fe mail.gmail.com 75d5dd69b850e9bd793b43618327e655 preisshare.net 871vilqhsy.fsf uwakimon.sk.tsukuba.ac.jp e626d66af534e03f22749f3dd4a6ff73 preisshare.net 4B3333DF.40705 v.loewis.de 94bdd2610912240152r6131ec9ay2ada83f66aa17b35 mail.gmail.com 4B334109.2060708 v.loewis.de 4B346ACE.2030400 gmail.com | FYI we have introduced a range operator , so one may define a range of versions .
PEP 345 | updated | feedback | I 've updated PEP 345 with this feedback . | 4B3266CF.7030705 v.loewis.de 94bdd2610912231123o6d3236c7j289df78391083ac5 mail.gmail.com 4B3279E9.4010507 v.loewis.de 94bdd2610912231311h44e5563bn98fab09cab3c37f1 mail.gmail.com 4B3324B2.3030708 v.loewis.de 94bdd2610912240132t345b4d8bnc1bc81d5ae82b194 mail.gmail.com 4B334626.6040505 v.loewis.de 94bdd2610912250412m4402a238j741ce6c3bc7ba53d mail.gmail.com 4B353C81.1080702 v.loewis.de | I 've made the range         )  operator the default one , and added more details on how versions works .
PEP 349 | deferred | support | PEP 349 currently deferred , although I do n't recall why discusses some of the issues involved in making code unicode safe , while still supporting non unicode safe applications as clients . | There 's never been a concerted effort to make even the standard library work under U. Maybe that should be a goal for Python 2.6 figure out what tools or changes are needed to make code U safe , add them , and then update the standard library to use them . | 
PEP 363 | updated | discussion | I 've sent an updated version of PEP 363 to the editors , which includes the following summary of the discussion . | wrapping up dynamic attribute ' discussion . | I hope I 've captured the important points , but please let me know if there 's something important I 've left out or misrepresented .
PEP 365 | proposal | support | It 's a runtime the PEP actually merely proposes that a further addition to be made to support bootstrapping , also . | Which , these days , is , well , almost any large Python project , from Chandler to Enthought to Zope . | 
PEP 365 | proposal | support | It 's a runtime the PEP actually merely proposes that a further addition to be made to support bootstrapping , also . | Which , these days , is , well , almost any large Python project , from Chandler to Enthought to Zope . | 
PEP 366 | updated | feedback | I 've updated the PEP to incorporate the feedback from this thread . | 20070706080601.8C3B.JCARLSON uci.edu | The new version is below , and should show up on the website shortly .
PEP 368 | deferred | feedback | PEP Deferral Further exploration of the concepts covered in this PEP has been deferred for lack of a current champion interested in promoting the goals of the PEP and collecting and incorporating feedback , and with sufficient available time to do so effectively . | txt 3,7 3,7 Version Revision Last Modified Date Author Lino Mastrodomenico l.mastrodomenico at gmail.com Status Draft Status Deferred Type Standards Track Content Type textx rst Created 28 Jun 2007 39,6 39,13 also proposed , together with a mixin class that helps adding support for the protocol to existing image classes . | 
PEP 376 | proposal | support | PEP 376 proposes a stdlib replacement for a portion of this functionality , but the status of whether it 's actually going to support anything other than distutils , pip , and setuptools ' backward compatibility mode is apparently still up for grabs . | Right '' is relative , but right now it is certainly the only way to read a list of installed packages , that 's compatible with both distutils and setuptools based ways of installing packages including of course pip , enstaller , and buildout . | From ben   python at benfinney .
PEP 376 | proposal | support | I propose an extension to PEP 376 to support the development of projects such that | extension to pep 376 develop '' installation . | 
PEP 382 | accepted | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | accepted | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | accepted | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | accepted | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 384 | accepted | discussion | Hi , Since discussion has trailed off without any blocking objections , I 'm accepting PEP 384 . | pep 384 accepted . | Martin , you may mark the PEP accepted and proceed with merging the implementation for the beta on Saturday .
PEP 382 | accepted | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 382 | accepted | support | s nothing we can do now , and when PEP 382 is accepted , support will be added to d2 . | ll close this bug There ? |   title   State of PEP 382 or How does distutils2 handle namespaces ?
PEP 384 | accepted | discussion | Hi , Since discussion has trailed off without any blocking objections , I 'm accepting PEP 384 . | pep 384 accepted . | Martin , you may mark the PEP accepted and proceed with merging the implementation for the beta on Saturday .
PEP 386 | proposal | discussion | On behalf of the Distutils SIG , I would like to propose PEP 386 for inclusion in the sdtlib , and have a final discussion here on Python dev . | This is the email I will send to python dev , so everyone can review it before it is sent | http www.python.org dev peps pep 0386
PEP 386 | proposal | discussion | On behalf of the Distutils SIG , I would like to propose PEP 386 for inclusion in the sdtlib , and have a final discussion here on Python dev . | Hello , | http www.python.org dev peps pep 0386
PEP 389 | proposal | discussion | Below is a new PEP based on discussions from the stdlib sig , which proposes to add the argparse module to the standard library in Python 2.7 and 3.2 . | pep 389 argparse new command line parsing module . | Looking forward to your feedback !
PEP 389 | updated | feedback | Sorry for the delay , but I 've finally updated PEP 389 , the argparse PEP , based on all the feedback from python dev . | updated pep 389 argparse . | The full PEP is below , but in short , the important changes are  
PEP 397 | updated | discussion | I 've updated PEP 397 Python launcher for Windows '' based on recent discussions and Vinay 's implementation . | new update to pep397 python launcher for windows . | 
PEP 399 | proposal | support | And before anyone asks , I have already run this past the lead devs of PyPy , Jython , and IronPython and they all support what this PEP proposes . | Since this has come up before and this was discussed so much at the summits I have gone ahead and checked this in so that even if this PEP gets rejected there can be a written record as to why . | And with the devs of the other VMs gaining push privileges there should n't be an added developer burden on everyone to make this PEP happen .
PEP 400 | deferred | feedback | PEP Deferral Further exploration of the concepts covered in this PEP has been deferred for lack of a current champion interested in promoting the goals of the PEP and collecting and incorporating feedback , and with sufficient available time to do so effectively . | txt 3,7 3,7 Version Revision Last Modified Date Author Victor Stinner victor.stinner at gmail.com Status Draft Status Deferred Type Standards Track Content Type textx rst Created 28 May 2011 25,6 25,13 http www.python.org dev peps pep 3116 , and reimplemented in C in Python 2.7 and 3.1 . | 
PEP 414 | proposal | support | Armin , I propose that you correct the factual deficits of the PEP i.e. remove all claims that can not be supported by facts , or are otherwise incorrect or misleading . | CAP7 vJ DPuvA p cC g0cA Gh4a N0Ob2xtiNDXvWMgSrY uA mail.gmail.com CADiSq7fAqcwiwghW OFjvfLO2Jn Y Tfqt1m HeYrynD8Nza3A mail.gmail.com 4F4B5634.3020609 v.loewis.de 4F4BB7F2.4070804 stoneleaf.us 20120227174110.96AFA2500E4 webabinitio.net 1330365662.12046.72.camel thinko jigiut 9cf 1 dough.gmane.org 1330372221.12046.119.camel thinko 20120227202335.ACAFD25009E webabinitio.net 1330375169.12046.133.camel thinko loom.20120227T215225 116 post.gmane.org 1330377399.12046.158.camel thinko 20120227215829.1DF3B2500E4 webabinitio.net 4F4BFF98.2080007 active 4.com | 
PEP 414 | proposal | support | This PEP proposes that Python 3.3 restore support for Python 2 's Unicode literal syntax , substantially increasing the number of lines of existing Python 2 code in Unicode aware applications that will run without modification on Python 3 . | Many thought that the unicode literals future import might make a common source possible , but it turns out that it 's doing more harm than good . | 
PEP 418 | proposal | discussion | The PEP proposes cross platform functions with consistent semantics , which is where a discussion was needed . | As a thin wrapper , adding it to the time module was pretty much uncontroversial , I think . | Regards
PEP 419 | deferred | feedback | PEP Deferral Further exploration of the concepts covered in this PEP has been deferred for lack of a current champion interested in promoting the goals of the PEP and collecting and incorporating feedback , and with sufficient available time to do so effectively . | txt 3,7 3,7 Version Revision Last Modified Date Author Paul Colomiets paul at colomiets.name Status Draft Status Deferred Type Standards Track Content Type textx rst Created 06 Apr 2012 16,6 16,14 This PEP proposes a way to protect Python code from being interrupted inside a finally clause or during context manager cleanup . | 
PEP 424 | updated | discussion | I 've updated the PEP to reflect the discussion . | ju0gaq mci 1 dough.gmane.org CAP1 2W7wjbBU0z10Y CZsADUhDXWmBU5sjbd6shtdX8CqPgqpw mail.gmail.com | There are two major changes  
PEP 428 | call_for_poll | controversy | Since there has been some controversy about the joining syntax used in PEP 428 filesystem path objects , I would like to run an informal poll about it . | Hello , | 
PEP 428 | updated | discussion | I 've updated PEP 428 following the previous discussion . | Hello , | Highlights  
PEP 431 | proposal | support | This PEP proposes the implementation of concrete time zone support in the Python standard library , and also improvements to the time zone API to deal with ambiguous time specifications during DST changes . | Abstract | Proposal
PEP 431 | proposal | support | This PEP proposes the implementation of concrete time zone support in the Python standard library , and also improvements to the time zone API to deal with ambiguous time specifications during DST changes . | Abstract | Proposal
PEP 438 | proposal | support | This PEP proposes that the official means of having an installer locate and find package files which are hosted externally to PyPI become the use of multi index support instead of the practice of using external links on the simple installer API . | Abstract | It is important to remember that this is   not   about forcing anyone to host their files on PyPI .
PEP 438 | proposal | support | I 've put forward a PEP that proposes a way to resolve the problems with reliability and implicitness of the current method of not hosting PyPI with centralizing around the multiple indexURL support . | That being said , nobody is trying to mandate that everyone must upload to PyPI . | 
PEP 438 | proposal | support | This PEP proposes that the official means of having an installer locate and find package files which are hosted externally to PyPI become the use of multi index support instead of the practice of using external links on the simple installer API . | Abstract | It is important to remember that this is   not   about forcing anyone to host their files on PyPI .
PEP 438 | proposal | support | This PEP proposes the deprecation and removal of support for hosting files externally to PyPI as well as the deprecation and removal of the functionality added by PEP 438 , particularly rel information to classify different types of links and the meta tag to indicate API version . | Abstract | Rationale
PEP 438 | proposal | support | This PEP proposes the deprecation and removal of support for hosting files externally to PyPI as well as the deprecation and removal of the functionality added by PEP 438 , particularly rel information to classify different types of links and the meta tag to indicate API version . | This PEP does not propose mandating that all authors upload their projects to PyPI in order to exist in the index nor does it propose any change to the human facing elements of PyPI . | 
PEP 438 | proposal | support | This PEP proposes the deprecation and removal of support for hosting files externally to PyPI as well as the deprecation and removal of the functionality added by PEP 438 , particularly rel information to classify different types of links and the meta tag to indicate API version . | This PEP does not propose mandating that all authors upload their projects to PyPI in order to exist in the index nor does it propose any change to the human facing elements of PyPI . | 
PEP 439 | updated | discussion | I 've updated PEP 439 to note the outcome of the recent discussion regarding setuptools dependencies and a couple of other minor things . | Hi all , | The changes are viewable here   http hg.python.org peps diff 0d57c70eff91 pep 0439.txt
PEP 446 | proposal | feedback | I propose that we wait for one more day for any feedback from others in response to this post , and then accept the PEP . | Wow , that was quick ! |     Guido van Rossum    python.org guido  )    next part   An HTML attachment was scrubbed ... URL    http mail.python.org pipermail python dev attachments 20130826 87a8daeb attachment 0001.html 
PEP 453 | proposal | support | This PEP proposes that the Installing Python Modules http docs.python.org 3 install guide be updated to officially recommend the use of pip as the default installer for Python packages , and that appropriate technical changes be made in Python 2.7 , 3.3 and 3.4 to provide pip by default in support of that recommendation . | Instead , pip will be a bundled application provided along with CPython for the convenience of Python users , but subject to its own development life cycle and able to be upgraded independently of the core interpreter and standard library . | 
PEP 453 | proposal | support | To support that end , this PEP proposes the inclusion of an ensurepip bootstrapping module in Python 3.4 along with the upcoming maintenance releases of Python 2.7 and 3.3 , as well as changes to the way Python installed scripts are handled on Windows . | However , to avoid recommending a tool that CPython does not provide , it is further proposed that the pip package manager be made available by default when installing CPython and when creating virtual environments using the standard library 's venv module via the pyvenv command line utility . | 
PEP 453 | proposal | support | This PEP proposes that the Installing Python Modules http docs.python.org 3 install guide be updated to officially recommend the use of pip as the default installer for Python packages , and that appropriate technical changes be made in Python 2.7 , 3.3 and 3.4 to provide pip by default in support of that recommendation . | Abstract | 
PEP 453 | proposal | support | To support that end , this PEP proposes the inclusion of an ensurepip bootstrapping module in Python 3.4 along with the upcoming maintenance releases of Python 2.7 and 3.3 , as well as changes to the way Python installed scripts are handled on Windows for Python 3.4 only . | However , to avoid recommending a tool that CPython does not provide , it is further proposed that the pip package manager be made available by default when installing CPython and when creating virtual environments using the standard library 's venv module via the pyvenv command line utility . | 
PEP 462 | proposal | support | This PEP also proposes changes to the way certain supporting repositories such as the repository for Python Enhancement Proposals are managed to make them more accessible to new contributors , and easier to manage for core developers . | This proposal is intended to allow core developers to make more effective use of the time they have available to contribute to CPython , which should also result in an improved experience for other contributors that are reliant on the core team to get their changes incorporated . | 
PEP 462 | proposal | support | This PEP proposes introducing a more sophisticated approach to repository management that includes more self service '' features , including support for pull requests . | These supporting repositories could benefit greatly from user the simple pull request '' style workflow made popular by code hosting sites like GitHub and BitBucket . | 
PEP 462 | proposal | support | This PEP also proposes changes to the way certain supporting repositories such as the repository for Python Enhancement Proposals are managed to make them more accessible to new contributors , and easier to manage for core developers . | txt 21,11 21,6 experience for other contributors that are reliant on the core team to get their changes incorporated . | 
PEP 462 | proposal | support | This PEP proposes introducing a more sophisticated approach to repository management that includes more self service '' features , including support for pull requests . | These supporting repositories could benefit greatly from user the simple pull request '' style workflow made popular by code hosting sites like GitHub and BitBucket . | 
PEP 462 | proposal | support | This PEP proposes migrating the repository hosting of CPython and the supporting repositories to Git and Github . | In particular this PEP proposes changes to the following repositories https hg.python.orgdevguide https hg.python.orgdevinabox https hg.python.orgpeps This PEP does not propose any changes to the core development workflow for CPython itself . | 
PEP 465 | proposal | support | To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in bytecode repository directory i.e. , the pycache directory . | This PEP proposes eliminating the concept of PYO files from Python . | 
PEP 465 | proposal | support | To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in bytecode repository directory i.e. , the pycache directory . | txt 0,0 1,303 PEP 488 Title Elimination of PYO files Version Revision Last Modified Date Author Brett Cannon brett at python.org Status Draft Type Standards Track Content Type textx rst Created 20 Feb 2015 Post History 2015 03 06 Abstract This PEP proposes eliminating the concept of PYO files from Python . | 
PEP 465 | call_for_poll | poll_result | I have closed the issue of file name formatting thanks to the informal poll results being very clear on the preferred format and also closed the idea of embedding the optimization level in the bytecode file metadata that can be another PEP if someone cares to write that one . | Here is the latest draft of the PEP . | 
PEP 465 | proposal | support | To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in bytecode repository directory i.e. , the pycache directory . | This PEP proposes eliminating the concept of PYO files from Python . | 
PEP 465 | proposal | support | To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in the bytecode repository directory when it 's called for i.e. , the pycache directory . | This PEP proposes eliminating the concept of PYO files from Python . | 
PEP 470 | proposal | support | This PEP proposes that the official means of having an installer locate and find package files which are hosted externally to PyPI become the use of multi index support instead of the practice of using external links on the simple installer API . | Abstract | It is important to remember that this is   not   about forcing anyone to host their files on PyPI .
PEP 470 | proposal | support | I 've put forward a PEP that proposes a way to resolve the problems with reliability and implicitness of the current method of not hosting PyPI with centralizing around the multiple indexURL support . | That being said , nobody is trying to mandate that everyone must upload to PyPI . | 
PEP 470 | proposal | support | Since the multiple index support is the more powerful and flexible of the two systems , while also being simpler to implement and easier to understand , PEP 470 now proposes to standardise on that system for PyPI 's external hosting support , with a few additional enhancements to address the discoverability issues that would otherwise arise . | It turns out the link spidering system is not only overly complicated and relatively hard to both understand and implement , but also largely redundant given the support for multiple indexes in the installation tools . | The link spidering system will eventually go away and we 'll then be left with a fairly conventional   multiple repository '' model , plus a few nice repository discovery features that most other such systems do n't have .
PEP 471 | updated | feedback | After some very good python dev feedback on my first version of PEP 471 , I 've updated the PEP to clarify a few things and added various Rejected ideas '' subsections . | Hi folks , | 
PEP 472 | proposal | support | txt 0,0 1,653 PEP 472 Title Support for indexing with keyword arguments Version Revision Last Modified Date Author Stefano Borini , Joseph Martinot Lagarde Discussion To python ideas at python.org Status Draft Type Standards Track Content Type textx rst Created 24 Jun 2014 Python Version 3.6 Post History 02 Jul 2014 Abstract This PEP proposes an extension of the indexing operation to support keyword arguments . | txt new file mode 100644 devnull bpep 0472 . | 
PEP 474 | proposal | support | This PEP also proposes changes to the way certain supporting repositories such as the repository for Python Enhancement Proposals are managed to make them more accessible to new contributors , and easier to manage for core developers . | txt 21,11 21,6 experience for other contributors that are reliant on the core team to get their changes incorporated . | 
PEP 474 | proposal | support | This PEP proposes introducing a more sophisticated approach to repository management that includes more self service '' features , including support for pull requests . | These supporting repositories could benefit greatly from user the simple pull request '' style workflow made popular by code hosting sites like GitHub and BitBucket . | 
PEP 474 | proposal | support | This PEP proposes migrating to Git and Github for certain supporting repositories such as the repository for Python Enhancement Proposals in a way that is more accessible to new contributors , and easier to manage for core developers . | Abstract | 
PEP 474 | updated | support | I 've now updated PEP 474 to cover my current proposal for the support repositories , as well as some of the preparatory work that is already being undertaken https www.python.orgdevpepspep 0474 | my thinking about the development process . | 
PEP 474 | proposal | support | This PEP proposes migrating the repository hosting of CPython and the supporting repositories to Git and Github . | In particular this PEP proposes changes to the following repositories https hg.python.orgdevguide https hg.python.orgdevinabox https hg.python.orgpeps This PEP does not propose any changes to the core development workflow for CPython itself . | 
PEP 479 | accepted | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . |    Suggestions for clarifying edits are still welcome   unlike IETF RFCs , the text of a PEP is not cast in stone after its acceptance , although the core design plan specification should not change after acceptance .  ) 
PEP 479 | accepted | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . |    Suggestions for clarifying edits are still welcome   unlike IETF RFCs , the text of a PEP is not cast in stone after its acceptance , although the core design plan specification should not change after acceptance .  ) 
PEP 479 | final | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . |    Suggestions for clarifying edits are still welcome   unlike IETF RFCs , the text of a PEP is not cast in stone after its acceptance , although the core design plan specification should not change after acceptance .  ) 
PEP 479 | accepted | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | accepted | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | final | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | accepted | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | accepted | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | final | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | accepted | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | accepted | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 479 | final | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 481 | proposal | support | This PEP proposes migrating to Git and Github for certain supporting repositories such as the repository for Python Enhancement Proposals in a way that is more accessible to new contributors , and easier to manage for core developers . | Abstract | 
PEP 481 | proposal | support | This PEP proposes migrating the repository hosting of CPython and the supporting repositories to Git and Github . | In particular this PEP proposes changes to the following repositories https hg.python.orgdevguide https hg.python.orgdevinabox https hg.python.orgpeps This PEP does not propose any changes to the core development workflow for CPython itself . | 
PEP 481 | proposal | support | This PEP proposes migrating the repository hosting of CPython and the supporting repositories to Git and Github . | note This PEP has been withdrawn , if you 're looking for the PEP documenting the move to Github , please refer to PEP 512 . | 
PEP 483 | accepted | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | accepted | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | final | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | accepted | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | accepted | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 483 | final | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 485 | updated | consensus | I have updated the code and PEP on gitHub with changes that were no brainers or seemed to have clear consensus . | I 've gone through all the messages in this thread since I posted the draft PEP . | 
PEP 488 | proposal | support | To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in bytecode repository directory i.e. , the pycache directory . | This PEP proposes eliminating the concept of PYO files from Python . | 
PEP 488 | proposal | support | To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in bytecode repository directory i.e. , the pycache directory . | txt 0,0 1,303 PEP 488 Title Elimination of PYO files Version Revision Last Modified Date Author Brett Cannon brett at python.org Status Draft Type Standards Track Content Type textx rst Created 20 Feb 2015 Post History 2015 03 06 Abstract This PEP proposes eliminating the concept of PYO files from Python . | 
PEP 488 | call_for_poll | poll_result | I have closed the issue of file name formatting thanks to the informal poll results being very clear on the preferred format and also closed the idea of embedding the optimization level in the bytecode file metadata that can be another PEP if someone cares to write that one . | Here is the latest draft of the PEP . | 
PEP 488 | proposal | support | To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in bytecode repository directory i.e. , the pycache directory . | This PEP proposes eliminating the concept of PYO files from Python . | 
PEP 488 | proposal | support | To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in the bytecode repository directory when it 's called for i.e. , the pycache directory . | This PEP proposes eliminating the concept of PYO files from Python . | 
PEP 488 | proposal | support | To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in bytecode repository directory i.e. , the pycache directory . | txt 17,8 17,8 This PEP proposes eliminating the concept of PYO files from Python . | 
PEP 488 | proposal | support | txt 19,7 19,7 To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in the bytecode repository directory when it 's called for i.e. , the pycache directory . | txt bpep 0488 . | 
PEP 498 | proposal | support | PEP 498 proposes new syntactic support for string interpolation that is transparent to the compiler , allow name references from the interpolation operation full access to containing namespaces as with any other expression , rather than being limited to explicitly name references . | . | 
PEP 498 | proposal | support | To address that problem and a number of other concerns , this PEP proposes an alternative approach to compiler supported interpolation , based on a new interpolate magic method , and using a substitution syntax inspired by that used in string . | system call . | 
PEP 498 | proposal | support | This is a new kind of expression , consisting of This PEP proposes the introduction of as a new binary operator designed specifically to support interpolation of template strings ! | . | 
PEP 498 | proposal | support | To address that problem and a number of other concerns , this PEP proposes an alternative approach to compiler supported interpolation , based on a new binary operator with a syntactically constrained right hand side , a new interpolate magic method , and a substitution syntax inspired by that used in string . | system call . | 
PEP 498 | proposal | support | To address that problem and a number of other concerns , this PEP proposes an alternative approach to compiler supported interpolation , using i for interpolation '' as the new string prefix and a substitution syntax inspired by that used in string . | system call . | 
PEP 501 | proposal | support | To address that problem and a number of other concerns , this PEP proposes an alternative approach to compiler supported interpolation , based on a new interpolate magic method , and using a substitution syntax inspired by that used in string . | system call . | 
PEP 501 | proposal | support | This is a new kind of expression , consisting of This PEP proposes the introduction of as a new binary operator designed specifically to support interpolation of template strings ! | . | 
PEP 501 | proposal | support | To address that problem and a number of other concerns , this PEP proposes an alternative approach to compiler supported interpolation , based on a new binary operator with a syntactically constrained right hand side , a new interpolate magic method , and a substitution syntax inspired by that used in string . | system call . | 
PEP 501 | proposal | support | To address that problem and a number of other concerns , this PEP proposes an alternative approach to compiler supported interpolation , using i for interpolation '' as the new string prefix and a substitution syntax inspired by that used in string . | system call . | 
PEP 503 | updated | support | I 've updated the PEP with the typo corrections , clarifications , and the missing GPG signature support that Marc Andre and Marius pointed out . | 55EAB949.6030603 egenix.com etPan.55eb1453.33e83f77.19bd Draupnir.home | It should be live on the PEP site soon , but the diff can be viewed online at https hg.python.org peps rev a314911efa10
PEP 512 | proposal | support | This PEP proposes migrating the repository hosting of CPython and the supporting repositories to Git and Github . | note This PEP has been withdrawn , if you 're looking for the PEP documenting the move to Github , please refer to PEP 512 . | 
PEP 515 | updated | feedback | based on the feedback so far , I revised the PEP . | Hey all , | There is now a much simpler rule for allowed underscores , with no exceptions .
PEP 520 | updated | feedback | I 've updated the PEP to reflect feedback up to this point . | pep 520 ordered class definition namespace round 3 . | The reception has been positive .
PEP 520 | proposal | support | This PEP proposes to instead support a wide range of customisation scenarios through a new init subclass hook in the class body , a hook to initialize attributes , and a way to keep the order in which attributes are defined . | This custom metaclass then persists for the entire lifecycle of the class , creating the potential for spurious metaclass conflicts . | 
PEP 520 | proposal | support | This PEP proposes to instead support a wide range of customisation scenarios through a new init subclass hook in the class body , a hook to initialize attributes . | This custom metaclass then persists for the entire lifecycle of the class , creating the potential for spurious metaclass conflicts . | 
PEP 520 | proposal | support | This PEP proposes to instead support a wide range of customisation scenarios through a new init subclass hook in the class body , and a hook to initialize attributes . | This custom metaclass then persists for the entire lifecycle of the class , creating the potential for spurious metaclass conflicts . | 
PEP 520 | proposal | support | This PEP proposes to instead support a wide range of customisation scenarios through a new init subclass hook in the class body , and a hook to initialize attributes . | This custom metaclass then persists for the entire lifecycle of the class , creating the potential for spurious metaclass conflicts . | 
PEP 525 | proposal | support | There is a reference implementation 2 that supports everything that the PEP proposes to add . | The PEP is also available at 1 . | 
PEP 525 | proposal | support | There is a reference implementation 2 that supports everything that the PEP proposes to add . | The PEP is also available at 1 . | 
PEP 525 | proposal | support | Below is a proposal to add support for asynchronous comprehensions and asynchronous generator expressions in Python 3.6 . | Hi , | I have a half working implementation of the proposal which fully implements all required grammar and AST changes .
PEP 530 | proposal | support | Below is a proposal to add support for asynchronous comprehensions and asynchronous generator expressions in Python 3.6 . | Hi , | I have a half working implementation of the proposal which fully implements all required grammar and AST changes .
PEP 754 | proposal | support | This PEP proposes a standard Python API and provides a reference module implementation which allows for consistent handling of IEEE 754 special values on all supported platforms . | Due to the many platform and library inconsistencies in handling IEEE special values , it is impossible to consistently set or detect IEEE 754 floating point values in normal Python code without resorting to directly manipulating bit patterns . | API Definition                            
PEP 754 | proposal | support | This PEP proposes a standard Python API and provides a reference module implementation which allows for consistent handling of IEEE 754 special values on all supported platforms . | Due to the many platform and library inconsistencies in handling IEEE special values , it is impossible to consistently set or detect IEEE 754 floating point values in normal Python code without resorting to directly manipulating bit patterns . | API Definition
PEP 3003 | proposal | support | This PEP proposes that the Installing Python Modules http docs.python.org 3 install guide be updated to officially recommend the use of pip as the default installer for Python packages , and that appropriate technical changes be made in Python 2.7 , 3.3 and 3.4 to provide pip by default in support of that recommendation . | Instead , pip will be a bundled application provided along with CPython for the convenience of Python users , but subject to its own development life cycle and able to be upgraded independently of the core interpreter and standard library . | 
PEP 3003 | proposal | support | To support that end , this PEP proposes the inclusion of an ensurepip bootstrapping module in Python 3.4 along with the upcoming maintenance releases of Python 2.7 and 3.3 , as well as changes to the way Python installed scripts are handled on Windows . | However , to avoid recommending a tool that CPython does not provide , it is further proposed that the pip package manager be made available by default when installing CPython and when creating virtual environments using the standard library 's venv module via the pyvenv command line utility . | 
PEP 3003 | proposal | support | This PEP proposes that the Installing Python Modules http docs.python.org 3 install guide be updated to officially recommend the use of pip as the default installer for Python packages , and that appropriate technical changes be made in Python 2.7 , 3.3 and 3.4 to provide pip by default in support of that recommendation . | Abstract | 
PEP 3003 | proposal | support | To support that end , this PEP proposes the inclusion of an ensurepip bootstrapping module in Python 3.4 along with the upcoming maintenance releases of Python 2.7 and 3.3 , as well as changes to the way Python installed scripts are handled on Windows for Python 3.4 only . | However , to avoid recommending a tool that CPython does not provide , it is further proposed that the pip package manager be made available by default when installing CPython and when creating virtual environments using the standard library 's venv module via the pyvenv command line utility . | 
PEP 3003 | proposal | support | To support that end , this PEP proposes the inclusion of an ensurepip bootstrapping module in Python 3.4 along with the upcoming maintenance releases of Python 2.7 and 3.3 , as well as automatic invocation of that module from pyvenv for Python 3.4 only , and changes to the way Python installed scripts are handled on Windows also for Python 3.4 only . | default when installing CPython 3.4 or later and when creating virtual environments using the standard library 's venv module via the pyvenv command line utility . | 
PEP 3101 | updated | feedback | I 've updated PEP 3101 based on the feedback collected so far . | pep 3101 update . |   PEP   3101 Title   Advanced String Formatting Version     Revision   45928   Last Modified     Date   2006 05 06 18 49 43  0700    Sat , 06 May 2006  )    Author   Talin  talin at acm.org  Status   Draft Content Type   text plain Created   16 Apr 2006 Python Version   3.0 Post History   28 Apr 2006 , 6 May 2006
PEP 3101 | proposal | support | To address that problem and a number of other concerns , this PEP proposes an alternative approach to compiler supported interpolation , using i for interpolation '' as the new string prefix and a substitution syntax inspired by that used in string . | system call . | 
PEP 3102 | bdfl_pronouncement | discussion | Note After much discussion of alternative syntax proposals , the BDFL has pronounced in favor of this single star ' syntax for indicating the end of positional parameters . | As a convenient shortcut , we can simply omit the ignore ' name , meaning do n't allow any positional arguments beyond this point ' . | 
PEP 3102 | bdfl_pronouncement | discussion | Note After much discussion of alternative syntax proposals , the BDFL has pronounced in favor of this single star ' syntax for indicating the end of positional parameters . | The meaning of this is to allow for keyword only arguments for functions that would not otherwise take a varargs argument def compare a , b , , key None ... 95,7 97,11 As a convenient shortcut , we can simply omit the ignore ' name , meaning do n't allow any positional arguments beyond this point ' . | 
PEP 3102 | proposal | support | Talin introduced PEP 3102 which proposes support for keyword only '' arguments , that is , arguments that must be specified with the name value keyword syntax , not as positional arguments . | PEP 3102 Keyword only arguments | 
PEP 3102 | proposal | support | Talin introduced PEP 3102 which proposes support for keyword only '' arguments , that is , arguments that must be specified with the name value keyword syntax , not as positional arguments . | PEP 3102 Keyword only arguments | 
PEP 3102 | proposal | support | Talin introduced PEP 3102 which proposes support for keyword only '' arguments , that is , arguments that must be specified with the name value keyword syntax , not as positional arguments . | PEP 3102 Keyword only arguments | 
PEP 3103 | poll_result_no_support | support | https www.python.orgdevpepspep 3103 A SwitchCase Statement '' by Guido van Rossum , Rejection Notice A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support . | 4602a32c 5109 47dd 95bb b9723738f07f googlegroups.com 55E8E09A.3080309 gmail.com | 
PEP 3103 | poll_result_no_support | no_popular_support | https www.python.orgdevpepspep 3103 A SwitchCase Statement '' by Guido van Rossum , Rejection Notice A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support . | 4602a32c 5109 47dd 95bb b9723738f07f googlegroups.com 55E8E09A.3080309 gmail.com | 
PEP 3103 | poll_result | support | There the poll indicated no specific proposal had a majority , so for each specific proposal one could say it did n't have popular support , but the majority still prefered to have a conditional expression . | Op 04 09 15 om 02 47 schreef Mark Lawrence Were those polls , like the poll he once did for the condtional expression ? | But at that time Guido used that poll as an indication there was not enough support .
PEP 3103 | poll_result | majority | There the poll indicated no specific proposal had a majority , so for each specific proposal one could say it did n't have popular support , but the majority still prefered to have a conditional expression . | Op 04 09 15 om 02 47 schreef Mark Lawrence Were those polls , like the poll he once did for the condtional expression ? | But at that time Guido used that poll as an indication there was not enough support .
PEP 3103 | bdfl_pronouncement | support | But at that time Guido used that poll as an indication there was not enough support . | There the poll indicated no specific proposal had a majority , so for each specific proposal one could say it did n't have popular support , but the majority still prefered to have a conditional expression . | So color me a bit sceptical when Guido comes with such a poll .
PEP 3107 | proposal | support | Therefore i propose that python adds support for function annotations in version 2.6 via from future import function annotations This would make the change as compatible as for example decorators or the with statement . | Jython could implement this use of function annotations without python supporting it , but that would make the code incompatible between python and Jython , which would be highly unfortunate . | 
PEP 3107 | open | discussion | The discussion for PEP 3107 said the use and interpretation of function type annotations was being left open for third party developers to use as they see fit some may use strings , other ABCs , others concrete types , or tuples of types or some other structure . | New submission from Raymond Hettinger rhettinger at users.sourceforge.net | 
PEP 3115 | proposal | support | This PEP proposes to instead support a wide range of customisation scenarios through a new namespace parameter in the class header , and a new init subclass hook in the class body . | This custom metaclass then persists for the entire lifecycle of the class , creating the potential for spurious metaclass conflicts . | 
PEP 3115 | proposal | support | This PEP proposes to instead support a wide range of customisation scenarios through a new namespace parameter in the class header , and a new init subclass hook in the class body . | This custom metaclass then persists for the entire lifecycle of the class , creating the potential for spurious metaclass conflicts . | 
PEP 3115 | proposal | support | This PEP proposes to instead support a wide range of customisation scenarios through a new namespace parameter in the class header , and a new init subclass hook in the class body . | txt 7,8 7,8 Type Standards Track Content Type textx rst Created 27 Feb 2015 Python Version 3.5 Post History 27 Feb 2015 Python Version 3.6 Post History 27 Feb 2015 , 5 Feb 2016 Replaces 422 20,127 20,80 creating the potential for spurious metaclass conflicts . | 
PEP 3115 | proposal | majority | Proposal This PEP proposes that a new mechanism to customise class creation be added to Python 3.5 that meets the following criteria While there are many possible ways to use a metaclass , the vast majority of use cases falls into just three categories some initialization code running after class creation , the initalization of descriptors and keeping the order in which class attributes were defined . | While the library itself continues to work perfectly , suddenly every code combining those classes with classes from another library fails . | 
PEP 3122 | updated | feedback | I 've updated the PEP to incorporate the feedback from this thread . | 20070706080601.8C3B.JCARLSON uci.edu | The new version is below , and should show up on the website shortly .
PEP 3132 | accepted | discussion | After a short discussion on the python 3000 list 1 , the PEP was accepted by Guido in its current form . | Open Issues Acceptance Should the catch all expression be assigned a list or a tuple of items ? | 
PEP 3132 | bdfl_pronouncement_accepted | discussion | After a short discussion on the python 3000 list 1 , the PEP was accepted by Guido in its current form . | Open Issues Acceptance Should the catch all expression be assigned a list or a tuple of items ? | 
PEP 3132 | bdfl_pronouncement_accepted | discussion | After a short discussion on the python 3000 list 1 , the PEP was accepted by Guido in its current form . | Open Issues Acceptance Should the catch all expression be assigned a list or a tuple of items ? | 
PEP 3135 | proposal | support | This PEP proposes to instead support a wide range of customisation scenarios through a new namespace parameter in the class header , and a new init class hook in the class body . | Instead , the class creation process is fully defined by the class header , before the class body even begins executing . | 
PEP 3135 | proposal | support | This PEP proposes to instead support a wide range of customisation scenarios through a new namespace parameter in the class header , and a new init subclass hook in the class body . | This custom metaclass then persists for the entire lifecycle of the class , creating the potential for spurious metaclass conflicts . | 
PEP 3135 | proposal | support | This PEP proposes to instead support a wide range of customisation scenarios through a new namespace parameter in the class header , and a new init subclass hook in the class body . | This custom metaclass then persists for the entire lifecycle of the class , creating the potential for spurious metaclass conflicts . | 
PEP 3135 | proposal | support | This PEP proposes to instead support a wide range of customisation scenarios through a new namespace parameter in the class header , and a new init subclass hook in the class body . | txt 7,8 7,8 Type Standards Track Content Type textx rst Created 27 Feb 2015 Python Version 3.5 Post History 27 Feb 2015 Python Version 3.6 Post History 27 Feb 2015 , 5 Feb 2016 Replaces 422 20,127 20,80 creating the potential for spurious metaclass conflicts . | 
PEP 3135 | proposal | majority | Proposal This PEP proposes that a new mechanism to customise class creation be added to Python 3.5 that meets the following criteria While there are many possible ways to use a metaclass , the vast majority of use cases falls into just three categories some initialization code running after class creation , the initalization of descriptors and keeping the order in which class attributes were defined . | While the library itself continues to work perfectly , suddenly every code combining those classes with classes from another library fails . | 
PEP 3137 | proposal | support | This PEP proposes to deprecate that behavior in Python 3.6 , but to leave it in place for at least as long as Python 2.7 is supported , possibly indefinitely . | bytes 3 b ' x00 x00 x00 ' bytearray 3 bytearray b ' x00 x00 x00 ' | No other changes are proposed to the existing constructors .
PEP 3137 | proposal | support | This PEP proposes to deprecate that behavior in Python 3.6 , but to leave it in place for at least as long as Python 2.7 is supported , possibly indefinitely . | bytes 3 b ' x00 x00 x00 ' bytearray 3 bytearray b ' x00 x00 x00 ' | No other changes are proposed to the existing constructors .
PEP 3142 | rejected | support | It was merely deferred due to only garnering lukewarm support and lack of a reference implementation rather than actually being rejected http mail.python.orgpipermailpython dev2006 February060718.html | Adding a do while construct to Python has already been proposed http www.python.orgdevpepspep 0315 | 
PEP 9 | accepted | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type textplain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type textplain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | vote_after_discussion | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type textplain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | 
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 308 | vote_after_discussion | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | OTOH , in a different context I might be all for this approach  
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | OTOH , in a different context I might be all for this approach  
PEP 308 | accepted | support | So not only is this system not democratic in the obvious sense of majority rules '' if you get more votes than , the PEP is approved , it 's also almost never even about gathering numerical support which is what this would be able to show . | This does n't strictly equate to number of signatures '' , which is how these sorts of petitions are often treated in modern politics it 's more about strength of argument . | 
PEP 308 | accepted | majority | So not only is this system not democratic in the obvious sense of majority rules '' if you get more votes than , the PEP is approved , it 's also almost never even about gathering numerical support which is what this would be able to show . | This does n't strictly equate to number of signatures '' , which is how these sorts of petitions are often treated in modern politics it 's more about strength of argument . | 
PEP 9 | accepted | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | accepted | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | final | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | accepted | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | accepted | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 9 | final | discussion | However , none of the discussion changed the BDFL 's mind and the PEP 's acceptance is now final . | Because of the exceptionally short period from first draft to acceptance , the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals '' section below . | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | vote_after_discussion | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | 
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 308 | vote_after_discussion | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | OTOH , in a different context I might be all for this approach  
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | OTOH , in a different context I might be all for this approach  
PEP 308 | vote | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | vote_after_discussion | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | 
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 308 | vote_after_discussion | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | OTOH , in a different context I might be all for this approach  
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | OTOH , in a different context I might be all for this approach  
PEP 308 | vote | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | vote_after_discussion | discussion | Following the discussion , a vote was held . | Status Rejected Type Standards Track Content Type text plain 31,34 31,41 discussion , and a discussion of short circuit behavior . | 
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | 
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 308 | vote | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 308 | vote_after_discussion | discussion | Following the discussion , a vote was held . | My first reaction on reading this statement in the introduction was that it seemed disingenuous but I 'm sure it was not intentionally so | 
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | OTOH , in a different context I might be all for this approach  
PEP 308 | rejected | majority | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . '' | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | OTOH , in a different context I might be all for this approach  
PEP 2 | proposal | support | No changes to finder loader interfaces Rather than attempting to update the PEP 302 APIs to accept additional state , this PEP proposes that ImportEngine support the content management protocol similar to the context substitution mechanisms in the decimal module . | Intended for use by importers and loaders that have been updated to accept optional engine parameters and with ImportEngine.from engine sysengine to start with a copy of the process global import state . | 
PEP 8 | proposal | consensus | This PEP proposes a generic Docstring Processing System DPS framework , which separates out the components program and conceptual , enabling the resolution of individual issues either through consensus one solution or through divergence many . | The issues surrounding docstring processing have been contentious and difficult to resolve . | 
