PEP 279| draft | list itemize amap enumerate does what is says . | four syllables is a little long enum pithy less clear than enumerate too similar to enum in other languages where it has a different meaning | say | list itemize amap enumerate does what is says .
PEP 279| accepted | Pronouncement In commenting on PEP 279 's enumerate function , this PEP 's author offered , I 'm quite happy to have it make PEP 281 obsolete . '' | Subsequently , PEP 279 was accepted into Python 2.3 . | obsolete | Pronouncement In commenting on PEP 279 's enumerate function , this PEP 's author offered , I 'm quite happy to have it make PEP 281 obsolete . ''
PEP 279| accepted | Pronouncement In commenting on PEP 279 's enumerate function , this PEP 's author offered , I 'm quite happy to have it make PEP 281 obsolete . '' | Subsequently , PEP 279 was accepted into Python 2.3 . | _comment | Pronouncement In commenting on PEP 279 's enumerate function , this PEP 's author offered , I 'm quite happy to have it make PEP 281 obsolete . ''
PEP 279| accepted | Pronouncement In commenting on PEP 279 's enumerate function , this PEP 's author offered , I 'm quite happy to have it make PEP 281 obsolete . '' | Subsequently , PEP 279 was accepted into Python 2.3 . | obsolete | Pronouncement In commenting on PEP 279 's enumerate function , this PEP 's author offered , I 'm quite happy to have it make PEP 281 obsolete . ''
PEP 279| accepted | Pronouncement In commenting on PEP 279 's enumerate function , this PEP 's author offered , I 'm quite happy to have it make PEP 281 obsolete . '' | Subsequently , PEP 279 was accepted into Python 2.3 . | _comment | Pronouncement In commenting on PEP 279 's enumerate function , this PEP 's author offered , I 'm quite happy to have it make PEP 281 obsolete . ''
PEP 279| accepted | Pronouncement In commenting on PEP 279 's enumerate function , this PEP 's author offered , I 'm quite happy to have it make PEP 281 obsolete . '' | Subsequently , PEP 279 was accepted into Python 2.3 . | obsolete | Pronouncement In commenting on PEP 279 's enumerate function , this PEP 's author offered , I 'm quite happy to have it make PEP 281 obsolete . ''
PEP 279| accepted | Pronouncement In commenting on PEP 279 's enumerate function , this PEP 's author offered , I 'm quite happy to have it make PEP 281 obsolete . '' | Subsequently , PEP 279 was accepted into Python 2.3 . | _comment | Pronouncement In commenting on PEP 279 's enumerate function , this PEP 's author offered , I 'm quite happy to have it make PEP 281 obsolete . ''
PEP 279| accepted | Pronouncement In commenting on PEP 279 's enumerate function , this PEP 's author offered , I 'm quite happy to have it make PEP 281 obsolete . '' | Subsequently , PEP 279 was accepted into Python 2.3 . | obsolete | Pronouncement In commenting on PEP 279 's enumerate function , this PEP 's author offered , I 'm quite happy to have it make PEP 281 obsolete . ''
PEP 279| accepted | Pronouncement In commenting on PEP 279 's enumerate function , this PEP 's author offered , I 'm quite happy to have it make PEP 281 obsolete . '' | Subsequently , PEP 279 was accepted into Python 2.3 . | _comment | Pronouncement In commenting on PEP 279 's enumerate function , this PEP 's author offered , I 'm quite happy to have it make PEP 281 obsolete . ''
PEP 279| accepted | Pronouncement In commenting on PEP 279 's enumerate function , this PEP 's author offered , I 'm quite happy to have it make PEP 281 obsolete . '' | Subsequently , PEP 279 was accepted into Python 2.3 . | obsolete | Pronouncement In commenting on PEP 279 's enumerate function , this PEP 's author offered , I 'm quite happy to have it make PEP 281 obsolete . ''
PEP 279| accepted | Pronouncement In commenting on PEP 279 's enumerate function , this PEP 's author offered , I 'm quite happy to have it make PEP 281 obsolete . '' | Subsequently , PEP 279 was accepted into Python 2.3 . | _comment | Pronouncement In commenting on PEP 279 's enumerate function , this PEP 's author offered , I 'm quite happy to have it make PEP 281 obsolete . ''
PEP 279| accepted | Pronouncement In commenting on PEP 279 's enumerate function , this PEP 's author offered , I 'm quite happy to have it make PEP 281 obsolete . '' | Subsequently , PEP 279 was accepted into Python 2.3 . | obsolete | Pronouncement In commenting on PEP 279 's enumerate function , this PEP 's author offered , I 'm quite happy to have it make PEP 281 obsolete . ''
PEP 279| accepted | Pronouncement In commenting on PEP 279 's enumerate function , this PEP 's author offered , I 'm quite happy to have it make PEP 281 obsolete . '' | Subsequently , PEP 279 was accepted into Python 2.3 . | _comment | Pronouncement In commenting on PEP 279 's enumerate function , this PEP 's author offered , I 'm quite happy to have it make PEP 281 obsolete . ''
PEP 279| accepted | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete. | Subsequently, PEP 279 was accepted into Python 2.3. | obsolete | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete.
PEP 279| accepted | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete. | Subsequently, PEP 279 was accepted into Python 2.3. | _comment | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete.
PEP 279| accepted | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete. | Subsequently, PEP 279 was accepted into Python 2.3. | obsolete | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete.
PEP 279| accepted | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete. | Subsequently, PEP 279 was accepted into Python 2.3. | _comment | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete.
PEP 279| accepted | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete. | Subsequently, PEP 279 was accepted into Python 2.3. | obsolete | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete.
PEP 279| accepted | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete. | Subsequently, PEP 279 was accepted into Python 2.3. | _comment | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete.
PEP 279| accepted | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete. | Subsequently, PEP 279 was accepted into Python 2.3. | obsolete | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete.
PEP 279| accepted | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete. | Subsequently, PEP 279 was accepted into Python 2.3. | _comment | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete.
PEP 279| accepted | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete. | Subsequently, PEP 279 was accepted into Python 2.3. | obsolete | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete.
PEP 279| accepted | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete. | Subsequently, PEP 279 was accepted into Python 2.3. | _comment | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete.
PEP 279| accepted | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete. | Subsequently, PEP 279 was accepted into Python 2.3. | obsolete | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete.
PEP 279| accepted | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete. | Subsequently, PEP 279 was accepted into Python 2.3. | _comment | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete.
PEP 279| accepted | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete. | Subsequently, PEP 279 was accepted into Python 2.3. | obsolete | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete.
PEP 279| accepted | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete. | Subsequently, PEP 279 was accepted into Python 2.3. | _comment | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete.
PEP 279| accepted | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete. | Subsequently, PEP 279 was accepted into Python 2.3. | obsolete | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete.
PEP 279| accepted | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete. | Subsequently, PEP 279 was accepted into Python 2.3. | _comment | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete.
PEP 279| accepted | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete. | Subsequently, PEP 279 was accepted into Python 2.3. | obsolete | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete.
PEP 279| accepted | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete. | Subsequently, PEP 279 was accepted into Python 2.3. | _comment | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete.
PEP 1| draft | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made. | While a PEP is in private discussions usually during the initial Draft phase , a Discussions To header will indicate the mailing list or URL where the PEP is being discussed. | pronounce | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made.
PEP 1| draft | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made. | While a PEP is in private discussions usually during the initial Draft phase , a Discussions To header will indicate the mailing list or URL where the PEP is being discussed. | _pronouncement | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made.
PEP 1| draft | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made. | While a PEP is in private discussions usually during the initial Draft phase , a Discussions To header will indicate the mailing list or URL where the PEP is being discussed. | pronounce | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made.
PEP 1| draft | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made. | While a PEP is in private discussions usually during the initial Draft phase , a Discussions To header will indicate the mailing list or URL where the PEP is being discussed. | _pronouncement | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made.
PEP 1| draft | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made. | While a PEP is in private discussions usually during the initial Draft phase , a Discussions To header will indicate the mailing list or URL where the PEP is being discussed. | pronounce | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made.
PEP 1| draft | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made. | While a PEP is in private discussions usually during the initial Draft phase , a Discussions To header will indicate the mailing list or URL where the PEP is being discussed. | _pronouncement | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made.
PEP 1| draft | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made. | While a PEP is in private discussions usually during the initial Draft phase , a Discussions To header will indicate the mailing list or URL where the PEP is being discussed. | pronounce | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made.
PEP 1| draft | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made. | While a PEP is in private discussions usually during the initial Draft phase , a Discussions To header will indicate the mailing list or URL where the PEP is being discussed. | _pronouncement | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made.
PEP 11| updated | We both thought that it was reasonable to stop supporting Win9x including WinME in Python 2.6. | I updated PEP 11 to reflect this. | reason | We both thought that it was reasonable to stop supporting Win9x including WinME in Python 2.6.
PEP 11| updated | We both thought that it was reasonable to stop supporting Win9x including WinME in Python 2.6. | I updated PEP 11 to reflect this. | reason | We both thought that it was reasonable to stop supporting Win9x including WinME in Python 2.6.
PEP 101| updated | Ned Deily added the comment | Larry, I updated PEP 101 to reflect I think are the steps required for this with the new website the doc upload instructions are already in PEP 101. | _comment | Ned Deily added the comment
PEP 101| updated | Ned Deily added the comment | Larry, I updated PEP 101 to reflect I think are the steps required for this with the new website the doc upload instructions are already in PEP 101. | _comment | Ned Deily added the comment
PEP 203| wrote_pep | I believe that PEP 302 is more or less up to date there is discussion of a Phase 2 rationalisation in the PEP, which hasn't been implemented, but IIRC that is mainly an internal detail and doesn't affect the user visible interface . | I'll do a quick check of the PEP against reality, but if there are mismatches, I can't offer to fix them Just was the coding wizard, I just wrote some of the blurb . | discussion | I believe that PEP 302 is more or less up to date there is discussion of a Phase 2 rationalisation in the PEP, which hasn't been implemented, but IIRC that is mainly an internal detail and doesn't affect the user visible interface .
PEP 211| draft | And at least this way, if it gets rejected, we'll know that it was rejected for the right reasons... | You'll notice that this draft is rather more developed than the average first round PEP posting, because it's already been the rounds of all the various numerical package mailing lists to build consensus no point in asking for the wrong thing. | reason | And at least this way, if it gets rejected, we'll know that it was rejected for the right reasons...
PEP 211| draft | And at least this way, if it gets rejected, we'll know that it was rejected for the right reasons... | You'll notice that this draft is rather more developed than the average first round PEP posting, because it's already been the rounds of all the various numerical package mailing lists to build consensus no point in asking for the wrong thing. | _reasons | And at least this way, if it gets rejected, we'll know that it was rejected for the right reasons...
PEP 214| accepted | peps bdfl pronounces this pep accepted for inclusion in python 2.0. | From python checkins at python org georg brandl Subject Python checkins peps BDFL pronounces this PEP accepted for inclusion in Python 2.0 Message ID E1Q2Ucj 0000CM 8C dinsdale python org | pronounce | peps bdfl pronounces this pep accepted for inclusion in python 2.0.
PEP 214| accepted | peps bdfl pronounces this pep accepted for inclusion in python 2.0. | From python checkins at python org georg brandl Subject Python checkins peps BDFL pronounces this PEP accepted for inclusion in Python 2.0 Message ID E1Q2Ucj 0000CM 8C dinsdale python org | pronounce | peps bdfl pronounces this pep accepted for inclusion in python 2.0.
PEP 214| accepted | From python checkins at python org georg brandl Subject Python checkins peps BDFL pronounces this PEP accepted for inclusion in Python 2.0 Message ID E1Q2Ucj 0000CM 8C dinsdale python org | http hg python org peps rev 010bb1fd7d45 changeset 121 010bb1fd7d45 user Barry Warsaw barry at python org date Mon Aug 21 13 36 22 2000 0000 summary BDFL pronounces this PEP accepted for inclusion in Python 2.0 | pronounce | From python checkins at python org georg brandl Subject Python checkins peps BDFL pronounces this PEP accepted for inclusion in Python 2.0 Message ID E1Q2Ucj 0000CM 8C dinsdale python org
PEP 214| accepted | From python checkins at python org georg brandl Subject Python checkins peps BDFL pronounces this PEP accepted for inclusion in Python 2.0 Message ID E1Q2Ucj 0000CM 8C dinsdale python org | http hg python org peps rev 010bb1fd7d45 changeset 121 010bb1fd7d45 user Barry Warsaw barry at python org date Mon Aug 21 13 36 22 2000 0000 summary BDFL pronounces this PEP accepted for inclusion in Python 2.0 | pronounce | From python checkins at python org georg brandl Subject Python checkins peps BDFL pronounces this PEP accepted for inclusion in Python 2.0 Message ID E1Q2Ucj 0000CM 8C dinsdale python org
PEP 214| accepted | peps bdfl pronounces this pep accepted for inclusion in python 2.0. | From python checkins at python org georg brandl Subject Python checkins peps BDFL pronounces this PEP accepted for inclusion in Python 2.0 Message ID E1Q2Ucj 0000CM 8C dinsdale python org | pronounce | peps bdfl pronounces this pep accepted for inclusion in python 2.0.
PEP 214| accepted | peps bdfl pronounces this pep accepted for inclusion in python 2.0. | From python checkins at python org georg brandl Subject Python checkins peps BDFL pronounces this PEP accepted for inclusion in Python 2.0 Message ID E1Q2Ucj 0000CM 8C dinsdale python org | pronounce | peps bdfl pronounces this pep accepted for inclusion in python 2.0.
PEP 214| accepted | From python checkins at python org georg brandl Subject Python checkins peps BDFL pronounces this PEP accepted for inclusion in Python 2.0 Message ID E1Q2Ucj 0000CM 8C dinsdale python org | http hg python org peps rev 010bb1fd7d45 changeset 121 010bb1fd7d45 user Barry Warsaw barry at python org date Mon Aug 21 13 36 22 2000 0000 summary BDFL pronounces this PEP accepted for inclusion in Python 2.0 | pronounce | From python checkins at python org georg brandl Subject Python checkins peps BDFL pronounces this PEP accepted for inclusion in Python 2.0 Message ID E1Q2Ucj 0000CM 8C dinsdale python org
PEP 214| accepted | From python checkins at python org georg brandl Subject Python checkins peps BDFL pronounces this PEP accepted for inclusion in Python 2.0 Message ID E1Q2Ucj 0000CM 8C dinsdale python org | http hg python org peps rev 010bb1fd7d45 changeset 121 010bb1fd7d45 user Barry Warsaw barry at python org date Mon Aug 21 13 36 22 2000 0000 summary BDFL pronounces this PEP accepted for inclusion in Python 2.0 | pronounce | From python checkins at python org georg brandl Subject Python checkins peps BDFL pronounces this PEP accepted for inclusion in Python 2.0 Message ID E1Q2Ucj 0000CM 8C dinsdale python org
PEP 225| draft | And at least this way, if it gets rejected, we'll know that it was rejected for the right reasons... | You'll notice that this draft is rather more developed than the average first round PEP posting, because it's already been the rounds of all the various numerical package mailing lists to build consensus no point in asking for the wrong thing. | reason | And at least this way, if it gets rejected, we'll know that it was rejected for the right reasons...
PEP 225| draft | And at least this way, if it gets rejected, we'll know that it was rejected for the right reasons... | You'll notice that this draft is rather more developed than the average first round PEP posting, because it's already been the rounds of all the various numerical package mailing lists to build consensus no point in asking for the wrong thing. | _reasons | And at least this way, if it gets rejected, we'll know that it was rejected for the right reasons...
PEP 226| closed | If Paul can control his urge to want to solve everything at once, I see no reason whi this one couldn't find its way into 2.1. | Now, officially the PEP deadline is closed today the schedule says 16 Dec 2000 2.1 PEPs ready for review . | reason | If Paul can control his urge to want to solve everything at once, I see no reason whi this one couldn't find its way into 2.1.
PEP 226| closed | If Paul can control his urge to want to solve everything at once, I see no reason whi this one couldn't find its way into 2.1. | Now, officially the PEP deadline is closed today the schedule says 16 Dec 2000 2.1 PEPs ready for review . | reason | If Paul can control his urge to want to solve everything at once, I see no reason whi this one couldn't find its way into 2.1.
PEP 226| closed | If Paul can control his urge to want to solve everything at once, I see no reason whi this one couldn't find its way into 2.1. | Now, officially the PEP deadline is closed today the schedule says 16 Dec 2000 2.1 PEPs ready for review . | reason | If Paul can control his urge to want to solve everything at once, I see no reason whi this one couldn't find its way into 2.1.
PEP 234| withdrawn | It is still open for discussion. | Some of the more esoteric proposals in the original version of this PEP have been withdrawn for now these may be the subject of a separate PEP in the future. | discussion | It is still open for discussion.
PEP 234| withdrawn | It is still open for discussion. | Some of the more esoteric proposals in the original version of this PEP have been withdrawn for now these may be the subject of a separate PEP in the future. | discussion | It is still open for discussion.
PEP 236| wrote_pep | If the champion merely records negative feedback without actually changing the proposal, you can come up with a counter proposal, as a separate PEP. | For example, I wrote PEP 244 to counter PEP 236. | feedback | If the champion merely records negative feedback without actually changing the proposal, you can come up with a counter proposal, as a separate PEP.
PEP 234| withdrawn | It is still open for discussion. | Some of the more esoteric proposals in the original version of this PEP have been withdrawn for now these may be the subject of a separate PEP in the future. | discussion | It is still open for discussion.
PEP 234| withdrawn | It is still open for discussion. | Some of the more esoteric proposals in the original version of this PEP have been withdrawn for now these may be the subject of a separate PEP in the future. | discussion | It is still open for discussion.
PEP 236| wrote_pep | If the champion merely records negative feedback without actually changing the proposal, you can come up with a counter proposal, as a separate PEP. | For example, I wrote PEP 244 to counter PEP 236. | feedback | If the champion merely records negative feedback without actually changing the proposal, you can come up with a counter proposal, as a separate PEP.
PEP 238| draft | And at least this way, if it gets rejected, we'll know that it was rejected for the right reasons... | You'll notice that this draft is rather more developed than the average first round PEP posting, because it's already been the rounds of all the various numerical package mailing lists to build consensus no point in asking for the wrong thing. | reason | And at least this way, if it gets rejected, we'll know that it was rejected for the right reasons...
PEP 238| draft | And at least this way, if it gets rejected, we'll know that it was rejected for the right reasons... | You'll notice that this draft is rather more developed than the average first round PEP posting, because it's already been the rounds of all the various numerical package mailing lists to build consensus no point in asking for the wrong thing. | _reasons | And at least this way, if it gets rejected, we'll know that it was rejected for the right reasons...
PEP 242| closed | No open issues have been raised at this time. | This PEP has been closed by the author. | open_issues | No open issues have been raised at this time.
PEP 242| closed | No open issues have been raised at this time. | This PEP has been closed by the author. | open_issues | No open issues have been raised at this time.
PEP 242| closed | No open issues have been raised at this time. | This PEP has been closed by the author. | open_issues | No open issues have been raised at this time.
PEP 242| closed | No open issues have been raised at this time. | This PEP has been closed by the author. | issues | No open issues have been raised at this time.
PEP 244| wrote_pep | If the champion merely records negative feedback without actually changing the proposal, you can come up with a counter proposal, as a separate PEP. | For example, I wrote PEP 244 to counter PEP 236. | feedback | If the champion merely records negative feedback without actually changing the proposal, you can come up with a counter proposal, as a separate PEP.
PEP 273| wrote_pep | I believe that PEP 302 is more or less up to date there is discussion of a Phase 2 rationalisation in the PEP, which hasn't been implemented, but IIRC that is mainly an internal detail and doesn't affect the user visible interface . | I'll do a quick check of the PEP against reality, but if there are mismatches, I can't offer to fix them Just was the coding wizard, I just wrote some of the blurb . | discussion | I believe that PEP 302 is more or less up to date there is discussion of a Phase 2 rationalisation in the PEP, which hasn't been implemented, but IIRC that is mainly an internal detail and doesn't affect the user visible interface .
PEP 279| accepted | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete. | Subsequently, PEP 279 was accepted into Python 2.3. | obsolete | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete.
PEP 279| accepted | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete. | Subsequently, PEP 279 was accepted into Python 2.3. | _comment | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete.
PEP 282| draft | I would appreciate any comments you might have on this proposal for adding a logging system to the Python Standard Library. | This PEP is still an early draft so please forward your comments just to me directly for now. | comments | I would appreciate any comments you might have on this proposal for adding a logging system to the Python Standard Library.
PEP 282| draft | I would appreciate any comments you might have on this proposal for adding a logging system to the Python Standard Library. | This PEP is still an early draft so please forward your comments just to me directly for now. | _comment | I would appreciate any comments you might have on this proposal for adding a logging system to the Python Standard Library.
PEP 282| draft | I would appreciate any comments you might have on this proposal for adding a logging system to the Python Standard Library. | This PEP is still an early draft so please forward your comments just to me directly for now. | comments | I would appreciate any comments you might have on this proposal for adding a logging system to the Python Standard Library.
PEP 282| draft | I would appreciate any comments you might have on this proposal for adding a logging system to the Python Standard Library. | This PEP is still an early draft so please forward your comments just to me directly for now. | _comment | I would appreciate any comments you might have on this proposal for adding a logging system to the Python Standard Library.
PEP 286| deferred | to deal with these cases, a specialized argument type is proposed. | further exploration of the concepts covered in this pep has been deferred for lack of a current champion interested in promoting the goals of the pep and collecting and incorporating feedback, and with sufficient available time to do so effectively. | _argument | to deal with these cases, a specialized argument type is proposed.
PEP 286| deferred | to deal with these cases, a specialized argument type is proposed. | further exploration of the concepts covered in this pep has been deferred for lack of a current champion interested in promoting the goals of the pep and collecting and incorporating feedback, and with sufficient available time to do so effectively. | _argument | to deal with these cases, a specialized argument type is proposed.
PEP 286| deferred | to deal with these cases, a specialized argument type is proposed. | further exploration of the concepts covered in this pep has been deferred for lack of a current champion interested in promoting the goals of the pep and collecting and incorporating feedback, and with sufficient available time to do so effectively. | _argument | to deal with these cases, a specialized argument type is proposed.
PEP 286| deferred | to deal with these cases, a specialized argument type is proposed. | further exploration of the concepts covered in this pep has been deferred for lack of a current champion interested in promoting the goals of the pep and collecting and incorporating feedback, and with sufficient available time to do so effectively. | _argument | to deal with these cases, a specialized argument type is proposed.
PEP 286| deferred | To deal with these cases, a specialized argument type is proposed. | Further exploration of the concepts covered in this PEP has been deferred for lack of a current champion interested in promoting the goals of the PEP and collecting and incorporating feedback, and with sufficient available time to do so effectively. | _argument | To deal with these cases, a specialized argument type is proposed.
PEP 286| deferred | To deal with these cases, a specialized argument type is proposed. | Further exploration of the concepts covered in this PEP has been deferred for lack of a current champion interested in promoting the goals of the PEP and collecting and incorporating feedback, and with sufficient available time to do so effectively. | _argument | To deal with these cases, a specialized argument type is proposed.
PEP 289| bdfl_pronouncement_accepted | Thanks to everyone for the comments on PEP 289. | Based on the favorable feedback here and on python dev, Guido has accepted the PEP for Py2.4. | comments | Thanks to everyone for the comments on PEP 289.
PEP 289| bdfl_pronouncement_accepted | Thanks to everyone for the comments on PEP 289. | Based on the favorable feedback here and on python dev, Guido has accepted the PEP for Py2.4. | _comment | Thanks to everyone for the comments on PEP 289.
PEP 291| accepted | Guido We had some discussion about this when neal wrote the pep, and I suggested to list modulefinder there. | Neal finally wrote the requirement into the PEP, and it was my impression that you accepted it, although you were not very happy with it. | discussion | Guido We had some discussion about this when neal wrote the pep, and I suggested to list modulefinder there.
PEP 291| accepted | Guido We had some discussion about this when neal wrote the pep, and I suggested to list modulefinder there. | Neal finally wrote the requirement into the PEP, and it was my impression that you accepted it, although you were not very happy with it. | discussion | Guido We had some discussion about this when neal wrote the pep, and I suggested to list modulefinder there.
PEP 291| accepted | Guido We had some discussion about this when neal wrote the pep, and I suggested to list modulefinder there. | Neal finally wrote the requirement into the PEP, and it was my impression that you accepted it, although you were not very happy with it. | discussion | Guido We had some discussion about this when neal wrote the pep, and I suggested to list modulefinder there.
PEP 291| accepted | Guido We had some discussion about this when neal wrote the pep, and I suggested to list modulefinder there. | Neal finally wrote the requirement into the PEP, and it was my impression that you accepted it, although you were not very happy with it. | discussion | Guido We had some discussion about this when neal wrote the pep, and I suggested to list modulefinder there.
PEP 291| accepted | Guido We had some discussion about this when neal wrote the pep, and I suggested to list modulefinder there. | Neal finally wrote the requirement into the PEP, and it was my impression that you accepted it, although you were not very happy with it. | discussion | Guido We had some discussion about this when neal wrote the pep, and I suggested to list modulefinder there.
PEP 291| accepted | Guido We had some discussion about this when neal wrote the pep, and I suggested to list modulefinder there. | Neal finally wrote the requirement into the PEP, and it was my impression that you accepted it, although you were not very happy with it. | discussion | Guido We had some discussion about this when neal wrote the pep, and I suggested to list modulefinder there.
PEP 291| accepted | Guido We had some discussion about this when neal wrote the pep, and I suggested to list modulefinder there. | Neal finally wrote the requirement into the PEP, and it was my impression that you accepted it, although you were not very happy with it. | discussion | Guido We had some discussion about this when neal wrote the pep, and I suggested to list modulefinder there.
PEP 292| accepted | pep 292 simpler string substitutions got a huge amount of discussion this past two weeks. | ignoring the syntax discussions that was decided long ago before the pep was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed. | discussion | pep 292 simpler string substitutions got a huge amount of discussion this past two weeks.
PEP 292| accepted | pep 292 simpler string substitutions got a huge amount of discussion this past two weeks. | ignoring the syntax discussions that was decided long ago before the pep was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed. | discussion | pep 292 simpler string substitutions got a huge amount of discussion this past two weeks.
PEP 292| accepted | pep 292 simpler string substitutions got a huge amount of discussion this past two weeks. | ignoring the syntax discussions that was decided long ago before the pep was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed. | discussion | pep 292 simpler string substitutions got a huge amount of discussion this past two weeks.
PEP 299| rejected | Revisiting PEP 299 The general consensus recently has been that the if name ' main ' idiom for modules that can be both support modules and main modules is both ugly and unintuitive. | PEP 299 main functions was rejected for the 2 x series due to backward compatibility concerns in particular, with modules that include the line import main . | consensus | Revisiting PEP 299 The general consensus recently has been that the if name ' main ' idiom for modules that can be both support modules and main modules is both ugly and unintuitive.
PEP 299| rejected | Revisiting PEP 299 The general consensus recently has been that the if name ' main ' idiom for modules that can be both support modules and main modules is both ugly and unintuitive. | PEP 299 main functions was rejected for the 2 x series due to backward compatibility concerns in particular, with modules that include the line import main . | consensus | Revisiting PEP 299 The general consensus recently has been that the if name ' main ' idiom for modules that can be both support modules and main modules is both ugly and unintuitive.
PEP 302| wrote_pep | I believe that PEP 302 is more or less up to date there is discussion of a Phase 2 rationalisation in the PEP, which hasn't been implemented, but IIRC that is mainly an internal detail and doesn't affect the user visible interface . | I'll do a quick check of the PEP against reality, but if there are mismatches, I can't offer to fix them Just was the coding wizard, I just wrote some of the blurb . | discussion | I believe that PEP 302 is more or less up to date there is discussion of a Phase 2 rationalisation in the PEP, which hasn't been implemented, but IIRC that is mainly an internal detail and doesn't affect the user visible interface .
PEP 308| accepted | This doesn't strictly equate to number of signatures , which is how these sorts of petitions are often treated in modern politics it's more about strength of argument. | So not only is this system not democratic in the obvious sense of majority rules if you get more votes than , the PEP is approved , it's also almost never even about gathering numerical support which is what this would be able to show . | _argument | This doesn't strictly equate to number of signatures , which is how these sorts of petitions are often treated in modern politics it's more about strength of argument.
PEP 308| accepted | This doesn't strictly equate to number of signatures , which is how these sorts of petitions are often treated in modern politics it's more about strength of argument. | So not only is this system not democratic in the obvious sense of majority rules if you get more votes than , the PEP is approved , it's also almost never even about gathering numerical support which is what this would be able to show . | _argument | This doesn't strictly equate to number of signatures , which is how these sorts of petitions are often treated in modern politics it's more about strength of argument.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | interest | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | interest | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | interest | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | interest | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | interest | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | interest | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| updated | Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax. | That issue was resolved by simply deferring to a BDFL best judgment call. | consensus | Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax.
PEP 308| updated | Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax. | That issue was resolved by simply deferring to a BDFL best judgment call. | consensus | Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | interest | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | interest | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 315| bdfl_pronouncement_rejected | There are plenty of other arguments against the proposed syntactic structure ambiguity, etc but they've been well argued. | I vote that the BDFL immediately reject this PEP so that we can put this issue to rest once and for all. | _argument | There are plenty of other arguments against the proposed syntactic structure ambiguity, etc but they've been well argued.
PEP 315| bdfl_pronouncement_rejected | There are plenty of other arguments against the proposed syntactic structure ambiguity, etc but they've been well argued. | I vote that the BDFL immediately reject this PEP so that we can put this issue to rest once and for all. | _argument | There are plenty of other arguments against the proposed syntactic structure ambiguity, etc but they've been well argued.
PEP 315| bdfl_pronouncement_rejected | There are plenty of other arguments against the proposed syntactic structure ambiguity, etc but they've been well argued. | I vote that the BDFL immediately reject this PEP so that we can put this issue to rest once and for all. | arguments | There are plenty of other arguments against the proposed syntactic structure ambiguity, etc but they've been well argued.
PEP 315| rejected | Here are my responses to the ideas discussed since I posted PEP 315. | PEP was submitted to be rejected | response | Here are my responses to the ideas discussed since I posted PEP 315.
PEP 315| rejected | Here are my responses to the ideas discussed since I posted PEP 315. | PEP was submitted to be rejected | _discussed | Here are my responses to the ideas discussed since I posted PEP 315.
PEP 338| wrote_pep | I'm actually becoming more and more in favour of reverting run module back to its 2.5 semantics and adding a separate function that does the right thing for the m switch. | It is really starting to look like the useful behaviour for a module namespace based execfile equivalent and the m switch aren't as closely aligned as I thought they were back when I wrote PEP 338. | in_favour | I'm actually becoming more and more in favour of reverting run module back to its 2.5 semantics and adding a separate function that does the right thing for the m switch.
PEP 338| wrote_pep | I'm actually becoming more and more in favour of reverting run module back to its 2.5 semantics and adding a separate function that does the right thing for the m switch. | It is really starting to look like the useful behaviour for a module namespace based execfile equivalent and the m switch aren't as closely aligned as I thought they were back when I wrote PEP 338. | in_favour | I'm actually becoming more and more in favour of reverting run module back to its 2.5 semantics and adding a separate function that does the right thing for the m switch.
PEP 338| wrote_pep | I'm actually becoming more and more in favour of reverting run module back to its 2.5 semantics and adding a separate function that does the right thing for the m switch. | It is really starting to look like the useful behaviour for a module namespace based execfile equivalent and the m switch aren't as closely aligned as I thought they were back when I wrote PEP 338. | right_thing | I'm actually becoming more and more in favour of reverting run module back to its 2.5 semantics and adding a separate function that does the right thing for the m switch.
PEP 342| accepted | additionally, phillip's patch addressed some garbage collection issues, having generators set their gi frame to none when they finish, and modifying gcmodule c to check for tp del methods on instance objects instead of just on heap types so that the close methods of generators would be properly invoked. | the revised pep was accepted by guido at europython. | addressed | additionally, phillip's patch addressed some garbage collection issues, having generators set their gi frame to none when they finish, and modifying gcmodule c to check for tp del methods on instance objects instead of just on heap types so that the close methods of generators would be properly invoked.
PEP 342| accepted | additionally, phillip's patch addressed some garbage collection issues, having generators set their gi frame to none when they finish, and modifying gcmodule c to check for tp del methods on instance objects instead of just on heap types so that the close methods of generators would be properly invoked. | the revised pep was accepted by guido at europython. | issues | additionally, phillip's patch addressed some garbage collection issues, having generators set their gi frame to none when they finish, and modifying gcmodule c to check for tp del methods on instance objects instead of just on heap types so that the close methods of generators would be properly invoked.
PEP 342| bdfl_pronouncement_accepted | additionally, phillip's patch addressed some garbage collection issues, having generators set their gi frame to none when they finish, and modifying gcmodule c to check for tp del methods on instance objects instead of just on heap types so that the close methods of generators would be properly invoked. | the revised pep was accepted by guido at europython. | addressed | additionally, phillip's patch addressed some garbage collection issues, having generators set their gi frame to none when they finish, and modifying gcmodule c to check for tp del methods on instance objects instead of just on heap types so that the close methods of generators would be properly invoked.
PEP 342| bdfl_pronouncement_accepted | additionally, phillip's patch addressed some garbage collection issues, having generators set their gi frame to none when they finish, and modifying gcmodule c to check for tp del methods on instance objects instead of just on heap types so that the close methods of generators would be properly invoked. | the revised pep was accepted by guido at europython. | issues | additionally, phillip's patch addressed some garbage collection issues, having generators set their gi frame to none when they finish, and modifying gcmodule c to check for tp del methods on instance objects instead of just on heap types so that the close methods of generators would be properly invoked.
PEP 343| accepted | These names are clear, they do match, and as Fred says the namespace has lots of room. | Also, the PEP was accepted with these names. | say | These names are clear, they do match, and as Fred says the namespace has lots of room.
PEP 343| wrote_pep | That's like saying we should describe the result of calling a generator function as a generator iterable because it has an iter method. | The longer name made sense when context manager was the term for the object with enter and exit methods the way I originally wrote it when updating the PEP after the addition of the context method . | say | That's like saying we should describe the result of calling a generator function as a generator iterable because it has an iter method.
PEP 345| accepted | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig. | We believe that having PEP 386 and PEP 345 accepted will be a major improvement for the Python packaging eco system. | discussion | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig.
PEP 345| accepted | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig. | We believe that having PEP 386 and PEP 345 accepted will be a major improvement for the Python packaging eco system. | _discussions | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig.
PEP 345| accepted | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig. | We believe that having PEP 386 and PEP 345 accepted will be a major improvement for the Python packaging eco system. | _comment | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig.
PEP 345| accepted | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig. | We believe that having PEP 376 and PEP 345 accepted will be a major improvement for the Python packaging eco system. | discussion | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig.
PEP 345| accepted | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig. | We believe that having PEP 376 and PEP 345 accepted will be a major improvement for the Python packaging eco system. | _discussions | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig.
PEP 345| accepted | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig. | We believe that having PEP 376 and PEP 345 accepted will be a major improvement for the Python packaging eco system. | _comment | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig.
PEP 349| rejected | STINNER Victor victor stinner at haypocalc com added the comment | PEP 349 was rejected because it breaks backward compatibility, eg. it breaks the assomption that str u x converts unicode to byte string. | _comment | STINNER Victor victor stinner at haypocalc com added the comment
PEP 349| rejected | STINNER Victor victor stinner at haypocalc com added the comment | PEP 349 was rejected because it breaks backward compatibility, eg. it breaks the assomption that str u x converts unicode to byte string. | _comment | STINNER Victor victor stinner at haypocalc com added the comment
PEP 362| accepted | I suggest that's a separate discussion please see issue 14626. | I can suggest two ways 1 Attempt to use it and catch NotImplementedError. 2 Check the is implemented flag for that parameter in the function's signature, assuming that detail is accepted as part of PEP 362. | discussion | I suggest that's a separate discussion please see issue 14626.
PEP 366| accepted | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks . | Brett's rejected PEP 3122 and my own accepted PEP 366 were both a direct result of the interpreter lying about the real value of name . | discussion | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks .
PEP 366| accepted | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks . | Brett's rejected PEP 3122 and my own accepted PEP 366 were both a direct result of the interpreter lying about the real value of name . | say | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks .
PEP 366| accepted | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks . | Brett's rejected PEP 3122 and my own accepted PEP 366 were both a direct result of the interpreter lying about the real value of name . | discussion | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks .
PEP 366| accepted | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks . | Brett's rejected PEP 3122 and my own accepted PEP 366 were both a direct result of the interpreter lying about the real value of name . | say | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks .
PEP 369| withdrawn | This PEP is rejected by its author, because it has been superseded by the new importlib. | This PEP is withdrawn by its author, because it has been superseded by the new importlib. | _superseded | This PEP is rejected by its author, because it has been superseded by the new importlib.
PEP 369| withdrawn | This PEP is rejected by its author, because it has been superseded by the new importlib. | This PEP is withdrawn by its author, because it has been superseded by the new importlib. | _superseded | This PEP is rejected by its author, because it has been superseded by the new importlib.
PEP 369| withdrawn | This PEP is rejected by its author, because it has been superseded by the new importlib. | This PEP is withdrawn by its author, because it has been superseded by the new importlib. | _superseded | This PEP is rejected by its author, because it has been superseded by the new importlib.
PEP 369| withdrawn | This PEP is withdrawn by its author, because it has been superseded by the new importlib. | This PEP has been withdrawn by its author, as much of the detailed design is no longer valid following the migration to importlib in Python 3.3. | _superseded | This PEP is withdrawn by its author, because it has been superseded by the new importlib.
PEP 369| withdrawn | This PEP is withdrawn by its author, because it has been superseded by the new importlib. | This PEP has been withdrawn by its author, as much of the detailed design is no longer valid following the migration to importlib in Python 3.3. | _superseded | This PEP is withdrawn by its author, because it has been superseded by the new importlib.
PEP 369| withdrawn | This PEP is withdrawn by its author, because it has been superseded by the new importlib. | This PEP has been withdrawn by its author, as much of the detailed design is no longer valid following the migration to importlib in Python 3.3. | _superseded | This PEP is withdrawn by its author, because it has been superseded by the new importlib.
PEP 369| withdrawn | This PEP is rejected by its author, because it has been superseded by the new importlib. | This PEP has been withdrawn by its author, as much of the detailed design is no longer valid following the migration to importlib in Python 3.3. | _superseded | This PEP is rejected by its author, because it has been superseded by the new importlib.
PEP 369| withdrawn | This PEP is rejected by its author, because it has been superseded by the new importlib. | This PEP has been withdrawn by its author, as much of the detailed design is no longer valid following the migration to importlib in Python 3.3. | _superseded | This PEP is rejected by its author, because it has been superseded by the new importlib.
PEP 370| updated | ?ric Araujo merwok at netwok org added the comment | FYI, I have updated the site module and distutils packaging docs to document the PEP 370 features. | _comment | ?ric Araujo merwok at netwok org added the comment
PEP 370| updated | ?ric Araujo merwok at netwok org added the comment | FYI, I have updated the site module and distutils packaging docs to document the PEP 370 features. | _comment | ?ric Araujo merwok at netwok org added the comment
PEP 376| accepted | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig. | We believe that having PEP 376 and PEP 345 accepted will be a major improvement for the Python packaging eco system. | discussion | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig.
PEP 376| accepted | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig. | We believe that having PEP 376 and PEP 345 accepted will be a major improvement for the Python packaging eco system. | _discussions | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig.
PEP 376| accepted | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig. | We believe that having PEP 376 and PEP 345 accepted will be a major improvement for the Python packaging eco system. | _comment | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig.
PEP 378| updated | Eric Smith eric at trueblade com added the comment | I updated the PEP in r71686. | _comment | Eric Smith eric at trueblade com added the comment
PEP 378| updated | Eric Smith eric at trueblade com added the comment | I updated the PEP in r71686. | _comment | Eric Smith eric at trueblade com added the comment
PEP 382| wrote_pep | I had announced this to import sig already now python dev. | I have now written an implementation of PEP 382, and fixed some details of the PEP in the process. | announce | I had announced this to import sig already now python dev.
PEP 382| rejected | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs. | As of Monday at the PyCon sprints, both PEPs have been rejected see the Rejection Notice at the top of each PEP . | discussion | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs.
PEP 382| rejected | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs. | As of Monday at the PyCon sprints, both PEPs have been rejected see the Rejection Notice at the top of each PEP . | discussion | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs.
PEP 391| updated | Thanks for your helpful comments. | I have checked in some changes to the PEP r76533 which take into account the comments you made. | comments | Thanks for your helpful comments.
PEP 391| updated | Thanks for your helpful comments. | I have checked in some changes to the PEP r76533 which take into account the comments you made. | _comment | Thanks for your helpful comments.
PEP 391| updated | Thanks for your helpful comments. | I have checked in some changes to the PEP r76533 which take into account the comments you made. | comments | Thanks for your helpful comments.
PEP 391| updated | Thanks for your helpful comments. | I have checked in some changes to the PEP r76533 which take into account the comments you made. | _comment | Thanks for your helpful comments.
PEP 393| draft | Martin v. L?wis martin at v loewis de added the comment | A PEP 393 draft implementation is available at https bitbucket org t0rsten pep 393 branch pep 393 if this gets into 3.3, this issue will be outdated there won't be narrow builds of Python anymore nor will there be wide builds . | _comment | Martin v. L?wis martin at v loewis de added the comment
PEP 393| accepted | STINNER Victor victor stinner at haypocalc com added the comment | The PEP 393 has been accepted strings are now stored as PyUCS1 , PyUCS2 or PyUCS4 . | _comment | STINNER Victor victor stinner at haypocalc com added the comment
PEP 393| accepted | STINNER Victor victor stinner at haypocalc com added the comment | The PEP 393 has been accepted strings are now stored as PyUCS1 , PyUCS2 or PyUCS4 . | _comment | STINNER Victor victor stinner at haypocalc com added the comment
PEP 393| accepted | STINNER Victor victor stinner at haypocalc com added the comment | The PEP 393 has been accepted strings are now stored as PyUCS1 , PyUCS2 or PyUCS4 . | _comment | STINNER Victor victor stinner at haypocalc com added the comment
PEP 393| accepted | STINNER Victor victor stinner at haypocalc com added the comment | The PEP 393 has been accepted and merge into Python 3.3. | _comment | STINNER Victor victor stinner at haypocalc com added the comment
PEP 393| accepted | STINNER Victor victor stinner at haypocalc com added the comment | The PEP 393 has been accepted and merge into Python 3.3. | _comment | STINNER Victor victor stinner at haypocalc com added the comment
PEP 393| accepted | STINNER Victor victor stinner at haypocalc com added the comment | PEP 393 has been accepted and merged into Python 3.3. | _comment | STINNER Victor victor stinner at haypocalc com added the comment
PEP 393| accepted | STINNER Victor victor stinner at haypocalc com added the comment | PEP 393 has been accepted and merged into Python 3.3. | _comment | STINNER Victor victor stinner at haypocalc com added the comment
PEP 394| updated | The relevant comment | Also, I updated the PEP with the clarification that commands like python3 should be hard links because they'll be invoked from code and are more efficient also, hard links are just as flexible as symlinks here , while commands like python should be soft links because this makes it clear to sysadmins that they can be switched , and it's needed for flexibility if python3 changes . | _comment | The relevant comment
PEP 394| updated | The relevant comment | Also, I updated the PEP with the clarification that commands like python3 should be hard links because they'll be invoked from code and are more efficient also, hard links are just as flexible as symlinks here , while commands like python should be soft links because this makes it clear to sysadmins that they can be switched , and it's needed for flexibility if python3 changes . | _comment | The relevant comment
PEP 394| accepted | The main problem is that, again by default, Distutils packaged scripts are installed into the framework bin directory. | This means there is no ambiguity or conflict among the same package script installed in different versions of Python a good thing but it also means the proper way to manage which Python is invoked by python or by python3 and python2 in the future when PEP 394 is approved and implemented is by ensuring the desired primary version's framework bin directory comes first on the shell PATH environment variable. | stalled | The main problem is that, again by default, Distutils packaged scripts are installed into the framework bin directory.
PEP 397| rejected | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs. | As of Monday at the PyCon sprints, both PEPs have been rejected see the Rejection Notice at the top of each PEP . | discussion | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs.
PEP 397| rejected | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs. | As of Monday at the PyCon sprints, both PEPs have been rejected see the Rejection Notice at the top of each PEP . | discussion | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs.
PEP 402| rejected | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs. | As of Monday at the PyCon sprints, both PEPs have been rejected see the Rejection Notice at the top of each PEP . | discussion | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs.
PEP 402| rejected | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs. | As of Monday at the PyCon sprints, both PEPs have been rejected see the Rejection Notice at the top of each PEP . | discussion | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs.
PEP 410| accepted | STINNER Victor victor stinner at gmail com added the comment | TODO the conversion from Decimal to PyTime t does still use a cast to float and so lose precision the PEP must be accepted | _comment | STINNER Victor victor stinner at gmail com added the comment
PEP 410| rejected | STINNER Victor victor stinner at gmail com added the comment | A tuple is not the preferred type for a timestamp Python uses float and is not going to use something different the PEP 410 was just rejected . | _comment | STINNER Victor victor stinner at gmail com added the comment
PEP 410| rejected | STINNER Victor victor stinner at gmail com added the comment | A tuple is not the preferred type for a timestamp Python uses float and is not going to use something different the PEP 410 was just rejected . | _comment | STINNER Victor victor stinner at gmail com added the comment
PEP 410| rejected | R. David Murray rdmurray at bitdance com added the comment | Victor proposed deprecating it as part of PEP 410 see issue 13882 , but the PEP was rejected for other reasons. | _comment | R. David Murray rdmurray at bitdance com added the comment
PEP 410| rejected | R. David Murray rdmurray at bitdance com added the comment | Victor proposed deprecating it as part of PEP 410 see issue 13882 , but the PEP was rejected for other reasons. | _comment | R. David Murray rdmurray at bitdance com added the comment
PEP 410| idea_rejected | STINNER Victor added the comment | This idea was rejected see the PEP 410 | _comment | STINNER Victor added the comment
PEP 411| rejected | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs. | As of Monday at the PyCon sprints, both PEPs have been rejected see the Rejection Notice at the top of each PEP . | discussion | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs.
PEP 411| rejected | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs. | As of Monday at the PyCon sprints, both PEPs have been rejected see the Rejection Notice at the top of each PEP . | discussion | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs.
PEP 415| replaced | The implementation of PEP 492 async await , for example, underwent some fundamental changes during the beta process, as developers' feedback showed that some of the design decisions we made in the original version were quite problematic. | The original exception suppression mechanism in PEP 409 which made clever but idiosyncratic use of Ellipsis , was replaced with the simpler mechanism in PEP 415 which instead uses a more conventional setter with side effects on other attributes approach . | feedback | The implementation of PEP 492 async await , for example, underwent some fundamental changes during the beta process, as developers' feedback showed that some of the design decisions we made in the original version were quite problematic.
PEP 418| draft | I started to write the PEP 418 to clarify the notions of monotonic and steady clocks. | The PEP is a draft and everyone is invited to contribute! | _steady | I started to write the PEP 418 to clarify the notions of monotonic and steady clocks.
PEP 418| accepted | STINNER Victor victor stinner at gmail com added the comment | The PEP 418 has been accepted read it to understand why time clock is now deprecated. | _comment | STINNER Victor victor stinner at gmail com added the comment
PEP 418| accepted | STINNER Victor victor stinner at gmail com added the comment | The PEP 418 has been accepted read it to understand why time clock is now deprecated. | _comment | STINNER Victor victor stinner at gmail com added the comment
PEP 418| accepted | STINNER Victor victor stinner at gmail com added the comment | The PEP 418 has been accepted read it to understand why time clock is now deprecated. | _comment | STINNER Victor victor stinner at gmail com added the comment
PEP 419| deferred | Mark Lawrence added the comment | FTR PEP 419 has been deferred as there's no champion. | _comment | Mark Lawrence added the comment
PEP 421| withdrawn | This PEP is rejected by its author, because it has been superseded by the new importlib. | This PEP has been withdrawn by its author, as much of the detailed design is no longer valid following the migration to importlib in Python 3.3. | _superseded | This PEP is rejected by its author, because it has been superseded by the new importlib.
PEP 423| deferred | diff git a pep 0423 txt b pep 0423 txt b pep 0423 txt 4,7 4,7 last modified date author benoit bryon benoit at marmelune net discussions to distutils sig at python org status draft status deferred type informational content type text x rst created 24 may 2012 28,6 28,11 specific recipes for existing projects how to apply naming guidelines on existing projects . | further consideration of this pep has been deferred at least until after | discussion | diff git a pep 0423 txt b pep 0423 txt b pep 0423 txt 4,7 4,7 last modified date author benoit bryon benoit at marmelune net discussions to distutils sig at python org status draft status deferred type informational content type text x rst created 24 may 2012 28,6 28,11 specific recipes for existing projects how to apply naming guidelines on existing projects .
PEP 423| deferred | diff git a pep 0423 txt b pep 0423 txt b pep 0423 txt 4,7 4,7 last modified date author benoit bryon benoit at marmelune net discussions to distutils sig at python org status draft status deferred type informational content type text x rst created 24 may 2012 28,6 28,11 specific recipes for existing projects how to apply naming guidelines on existing projects . | further consideration of this pep has been deferred at least until after | _discussions | diff git a pep 0423 txt b pep 0423 txt b pep 0423 txt 4,7 4,7 last modified date author benoit bryon benoit at marmelune net discussions to distutils sig at python org status draft status deferred type informational content type text x rst created 24 may 2012 28,6 28,11 specific recipes for existing projects how to apply naming guidelines on existing projects .
PEP 423| deferred | pep 0423 txt 7 pankajdiff git a pep 0423 txt b pep 0423 txt b pep 0423 txt 4,7 4,7 last modified date author benoit bryon benoit at marmelune net discussions to distutils sig at python org status draft status deferred type informational content type text x rst created 24 may 2012 28,6 28,11 specific recipes for existing projects how to apply naming guidelines on existing projects . | further consideration of this pep has been deferred at least until after | discussion | pep 0423 txt 7 pankajdiff git a pep 0423 txt b pep 0423 txt b pep 0423 txt 4,7 4,7 last modified date author benoit bryon benoit at marmelune net discussions to distutils sig at python org status draft status deferred type informational content type text x rst created 24 may 2012 28,6 28,11 specific recipes for existing projects how to apply naming guidelines on existing projects .
PEP 423| deferred | pep 0423 txt 7 pankajdiff git a pep 0423 txt b pep 0423 txt b pep 0423 txt 4,7 4,7 last modified date author benoit bryon benoit at marmelune net discussions to distutils sig at python org status draft status deferred type informational content type text x rst created 24 may 2012 28,6 28,11 specific recipes for existing projects how to apply naming guidelines on existing projects . | further consideration of this pep has been deferred at least until after | _discussions | pep 0423 txt 7 pankajdiff git a pep 0423 txt b pep 0423 txt b pep 0423 txt 4,7 4,7 last modified date author benoit bryon benoit at marmelune net discussions to distutils sig at python org status draft status deferred type informational content type text x rst created 24 may 2012 28,6 28,11 specific recipes for existing projects how to apply naming guidelines on existing projects .
PEP 434| updated | Terry J. Reedy added the comment | Benjamim, I made idlever update from sys version until removed, so remove it from release process. | _comment | Terry J. Reedy added the comment
PEP 434| updated | Terry J. Reedy added the comment | Benjamim, I made idlever update from sys version until removed, so remove it from release process. | _comment | Terry J. Reedy added the comment
PEP 435| accepted | Guido has pronounced a decision on this issue 5 , as well as related issues of not allowing to subclass enums 6 , unless they define no enumeration members 7 . | The PEP was accepted by Guido on May 10th, 2013 1 . | pronounce | Guido has pronounced a decision on this issue 5 , as well as related issues of not allowing to subclass enums 6 , unless they define no enumeration members 7 .
PEP 435| accepted | Guido has pronounced a decision on this issue 5 , as well as related issues of not allowing to subclass enums 6 , unless they define no enumeration members 7 . | The PEP was accepted by Guido on May 10th, 2013 1 . | issues | Guido has pronounced a decision on this issue 5 , as well as related issues of not allowing to subclass enums 6 , unless they define no enumeration members 7 .
PEP 435| accepted | Guido has pronounced a decision on this issue 5 , as well as related issues of not allowing to subclass enums 6 , unless they define no enumeration members 7 . | The PEP was accepted by Guido on May 10th, 2013 1 . | pronounced | Guido has pronounced a decision on this issue 5 , as well as related issues of not allowing to subclass enums 6 , unless they define no enumeration members 7 .
PEP 435| bdfl_pronouncement_accepted | Guido has pronounced a decision on this issue 5 , as well as related issues of not allowing to subclass enums 6 , unless they define no enumeration members 7 . | The PEP was accepted by Guido on May 10th, 2013 1 . | pronounce | Guido has pronounced a decision on this issue 5 , as well as related issues of not allowing to subclass enums 6 , unless they define no enumeration members 7 .
PEP 435| bdfl_pronouncement_accepted | Guido has pronounced a decision on this issue 5 , as well as related issues of not allowing to subclass enums 6 , unless they define no enumeration members 7 . | The PEP was accepted by Guido on May 10th, 2013 1 . | issues | Guido has pronounced a decision on this issue 5 , as well as related issues of not allowing to subclass enums 6 , unless they define no enumeration members 7 .
PEP 435| bdfl_pronouncement_accepted | Guido has pronounced a decision on this issue 5 , as well as related issues of not allowing to subclass enums 6 , unless they define no enumeration members 7 . | The PEP was accepted by Guido on May 10th, 2013 1 . | pronounced | Guido has pronounced a decision on this issue 5 , as well as related issues of not allowing to subclass enums 6 , unless they define no enumeration members 7 .
PEP 438| accepted | Thanks everyone who's been involved in the formulation and discussion of PEP 438 Transitioning to release file hosting on PyPI . | I have today accepted the PEP and the first phase of implementation is now underway, spearheaded by Donald Stufft. | discussion | Thanks everyone who's been involved in the formulation and discussion of PEP 438 Transitioning to release file hosting on PyPI .
PEP 440| updated | If that long term approach sounds reasonable to folks, we should probably promote packaging from Donald's personal repo, include it in the PyPA project list and tweak the description of distlib accordingly. | just down to my current workload I'm busy with consultancy work Note that I have recently updated distlib to reflect changes in PEP 440, though this functionality has not been officially released it's available in the public repos, though . | reason | If that long term approach sounds reasonable to folks, we should probably promote packaging from Donald's personal repo, include it in the PyPA project list and tweak the description of distlib accordingly.
PEP 440| updated | If that long term approach sounds reasonable to folks, we should probably promote packaging from Donald's personal repo, include it in the PyPA project list and tweak the description of distlib accordingly. | just down to my current workload I'm busy with consultancy work Note that I have recently updated distlib to reflect changes in PEP 440, though this functionality has not been officially released it's available in the public repos, though . | reason | If that long term approach sounds reasonable to folks, we should probably promote packaging from Donald's personal repo, include it in the PyPA project list and tweak the description of distlib accordingly.
PEP 444| deferred | diff git a pep 0444 txt b pep 0444 txt b pep 0444 txt 5,7 5,7 author chris mcdonough chrism at plope com , armin ronacher armin ronacher at active 4 com discussions to python web sig web sig at python org status draft status deferred type informational content type text x rst created 19 jul 2010 18,6 18,18 interface between web servers and python web applications or frameworks. | further exploration of the concepts covered in this pep has been deferred for lack of a current champion interested in promoting the goals of the pep and collecting and incorporating feedback, and with sufficient available time to do so effectively. | discussion | diff git a pep 0444 txt b pep 0444 txt b pep 0444 txt 5,7 5,7 author chris mcdonough chrism at plope com , armin ronacher armin ronacher at active 4 com discussions to python web sig web sig at python org status draft status deferred type informational content type text x rst created 19 jul 2010 18,6 18,18 interface between web servers and python web applications or frameworks.
PEP 444| deferred | diff git a pep 0444 txt b pep 0444 txt b pep 0444 txt 5,7 5,7 author chris mcdonough chrism at plope com , armin ronacher armin ronacher at active 4 com discussions to python web sig web sig at python org status draft status deferred type informational content type text x rst created 19 jul 2010 18,6 18,18 interface between web servers and python web applications or frameworks. | further exploration of the concepts covered in this pep has been deferred for lack of a current champion interested in promoting the goals of the pep and collecting and incorporating feedback, and with sufficient available time to do so effectively. | _discussions | diff git a pep 0444 txt b pep 0444 txt b pep 0444 txt 5,7 5,7 author chris mcdonough chrism at plope com , armin ronacher armin ronacher at active 4 com discussions to python web sig web sig at python org status draft status deferred type informational content type text x rst created 19 jul 2010 18,6 18,18 interface between web servers and python web applications or frameworks.
PEP 444| deferred | pep 0444 txt 14 pankajdiff git a pep 0444 txt b pep 0444 txt b pep 0444 txt 5,7 5,7 author chris mcdonough chrism at plope com , armin ronacher armin ronacher at active 4 com discussions to python web sig web sig at python org status draft status deferred type informational content type text x rst created 19 jul 2010 18,6 18,18 interface between web servers and python web applications or frameworks. | further exploration of the concepts covered in this pep has been deferred for lack of a current champion interested in promoting the goals of the pep and collecting and incorporating feedback, and with sufficient available time to do so effectively. | discussion | pep 0444 txt 14 pankajdiff git a pep 0444 txt b pep 0444 txt b pep 0444 txt 5,7 5,7 author chris mcdonough chrism at plope com , armin ronacher armin ronacher at active 4 com discussions to python web sig web sig at python org status draft status deferred type informational content type text x rst created 19 jul 2010 18,6 18,18 interface between web servers and python web applications or frameworks.
PEP 444| deferred | pep 0444 txt 14 pankajdiff git a pep 0444 txt b pep 0444 txt b pep 0444 txt 5,7 5,7 author chris mcdonough chrism at plope com , armin ronacher armin ronacher at active 4 com discussions to python web sig web sig at python org status draft status deferred type informational content type text x rst created 19 jul 2010 18,6 18,18 interface between web servers and python web applications or frameworks. | further exploration of the concepts covered in this pep has been deferred for lack of a current champion interested in promoting the goals of the pep and collecting and incorporating feedback, and with sufficient available time to do so effectively. | _discussions | pep 0444 txt 14 pankajdiff git a pep 0444 txt b pep 0444 txt b pep 0444 txt 5,7 5,7 author chris mcdonough chrism at plope com , armin ronacher armin ronacher at active 4 com discussions to python web sig web sig at python org status draft status deferred type informational content type text x rst created 19 jul 2010 18,6 18,18 interface between web servers and python web applications or frameworks.
PEP 451| accepted | As an example that hopefully helps illustrate the two different cases, the shift to enabling proper SSL TLS verification by default would qualify as a worthy use of programmatic deprecation since the current insecure by default behaviour is a genuine bug magnet that leads to security flaws , but I'm not yet convinced that we actually gain any significant benefit from deprecating the legacy import plugin APIs. | While PEP 451 nominally approved deprecating the latter, on the basis that deprecating them will make importlib easier to maintain, they received a stay of execution in 3.4 because the extension module import system currently still needs them, and there are other valid use cases that PEP 451 doesn't currently cover, At this point, I have come to believe that retaining the existing strictly more powerful but also harder to use correctly plugin API is a better way to handle those more complex use cases rather than inventing something new on top of PEP 451, as the latter approach would make things harder to maintain due to increased complexity and needing to manage the deprecation process , and provide a worse experience for users implementing custom import hooks that need to support multiple versions due to the introduction of new cross version compatibility issues . | bug_magnet | As an example that hopefully helps illustrate the two different cases, the shift to enabling proper SSL TLS verification by default would qualify as a worthy use of programmatic deprecation since the current insecure by default behaviour is a genuine bug magnet that leads to security flaws , but I'm not yet convinced that we actually gain any significant benefit from deprecating the legacy import plugin APIs.
PEP 453| accepted | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed. | Personally, I'm going to focus on the implied virtualenv change, on the assumption taht PEP 453 is accepted with the Scripts bin change included which is not to say that I won't read that thread, just that I don't personally have any means to change the PEP itself . | addressed | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed.
PEP 453| accepted | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed. | Personally, I'm going to focus on the implied virtualenv change, on the assumption taht PEP 453 is accepted with the Scripts bin change included which is not to say that I won't read that thread, just that I don't personally have any means to change the PEP itself . | issues | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed.
PEP 453| accepted | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed. | Personally, I'm going to focus on the implied virtualenv change, on the assumption taht PEP 453 is accepted with the Scripts bin change included which is not to say that I won't read that thread, just that I don't personally have any means to change the PEP itself . | addressed | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed.
PEP 453| accepted | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed. | Personally, I'm going to focus on the implied virtualenv change, on the assumption taht PEP 453 is accepted with the Scripts bin change included which is not to say that I won't read that thread, just that I don't personally have any means to change the PEP itself . | issues | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed.
PEP 453| accepted | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed. | Personally, I'm going to focus on the implied virtualenv change, on the assumption taht PEP 453 is accepted with the Scripts bin change included which is not to say that I won't read that thread, just that I don't personally have any means to change the PEP itself . | addressed | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed.
PEP 453| accepted | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed. | Personally, I'm going to focus on the implied virtualenv change, on the assumption taht PEP 453 is accepted with the Scripts bin change included which is not to say that I won't read that thread, just that I don't personally have any means to change the PEP itself . | issues | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed.
PEP 453| accepted | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed. | Personally, I'm going to focus on the implied virtualenv change, on the assumption taht PEP 453 is accepted with the Scripts bin change included which is not to say that I won't read that thread, just that I don't personally have any means to change the PEP itself . | addressed | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed.
PEP 453| accepted | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed. | Personally, I'm going to focus on the implied virtualenv change, on the assumption taht PEP 453 is accepted with the Scripts bin change included which is not to say that I won't read that thread, just that I don't personally have any means to change the PEP itself . | issues | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed.
PEP 453| draft | Donald Stufft added the comment | Attached is an initial rough draft of the ensurepip module. | _comment | Donald Stufft added the comment
PEP 456| accepted | Christian has indicated he now considers PEP 456, which adds an updated and configurable hash algorithm ready for pronouncement http www python org dev peps pep 0456 | I am happy the PEP and the associated implementation represent a desirable improvement to CPython, and approve of the proposal to experiment further with the small string optimisation during the beta period, before either enabling it or removing it entirely in beta 2. | pronounce | Christian has indicated he now considers PEP 456, which adds an updated and configurable hash algorithm ready for pronouncement http www python org dev peps pep 0456
PEP 456| accepted | Christian has indicated he now considers PEP 456, which adds an updated and configurable hash algorithm ready for pronouncement http www python org dev peps pep 0456 | I am happy the PEP and the associated implementation represent a desirable improvement to CPython, and approve of the proposal to experiment further with the small string optimisation during the beta period, before either enabling it or removing it entirely in beta 2. | _pronouncement | Christian has indicated he now considers PEP 456, which adds an updated and configurable hash algorithm ready for pronouncement http www python org dev peps pep 0456
PEP 459| draft | That's the timeline for the formal definition, in practice drop pydist json in the existing directory as PEP 426 suggests is a fairly safe bet as to what those specs are going to say. | The don't rely on it unless the container version says it's OK to do so caution in the PEP is primarily because wheels already ship with pydist json metadata emitted based on an earlier draft version of the spec from before I gutted it and moved the optional sections out to PEP 459 as standard extension modules, which is also the change that did the most damage when it came to invalidating the current jsonschema definition . | say | That's the timeline for the formal definition, in practice drop pydist json in the existing directory as PEP 426 suggests is a fairly safe bet as to what those specs are going to say.
PEP 465| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 465| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 465| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 465| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 470| accepted | IMO all responses from Brett, Donald, Nathaniel and ?ukasz were reasonable and I haven't accused them of conspiring in the slightest. | I see that the PEP was accepted by Paul Moore. | response | IMO all responses from Brett, Donald, Nathaniel and ?ukasz were reasonable and I haven't accused them of conspiring in the slightest.
PEP 470| accepted | IMO all responses from Brett, Donald, Nathaniel and ?ukasz were reasonable and I haven't accused them of conspiring in the slightest. | I see that the PEP was accepted by Paul Moore. | reason | IMO all responses from Brett, Donald, Nathaniel and ?ukasz were reasonable and I haven't accused them of conspiring in the slightest.
PEP 475| updated | STINNER Victor added the comment | I updated the list of modified functions in the PEP 475. | _comment | STINNER Victor added the comment
PEP 475| updated | STINNER Victor added the comment | I updated the list of modified functions in the PEP 475. | _comment | STINNER Victor added the comment
PEP 479| accepted | The intention is not to restart the debate . | PEP is approved , it's done ... but ... | debate | The intention is not to restart the debate .
PEP 484| rejected | It was proposed a year and half ago, when PEP 484 was discussed. | At that time it was abandoned, it reappeared during the discussion of this PEP, but many people including me didn't like this, so that we decided to put it in the list of rejected ideas to this PEP. | _discussed | It was proposed a year and half ago, when PEP 484 was discussed.
PEP 488| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 488| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 488| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 488| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 488| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | Open Issues This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 488| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | Open Issues This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 488| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | Open Issues This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 488| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | Open Issues This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 488| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | Open Issues This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 488| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | Open Issues This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 488| accepted | Brett Cannon added the comment | The closing of this issue inspired me to think of a better way to do this, and I think providing something in importlib util that accepted a NodeTransformer as an argument to a function that compiled source files to bytecode files would fill this issue thanks to PEP 488. | _comment | Brett Cannon added the comment
PEP 488| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 488| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 498| accepted | Terry J. Reedy added the comment | Much of this discussion seems to duplicate and effectively re open of 25179, wherein it was decided accepted that true, non degenerate, non trivial, non constant, f strings that actually do formatting are not constants and do not and should not become docstrings. | _comment | Terry J. Reedy added the comment
PEP 504| withdrawn | during discussion of this pep, steven d'aprano proposed the simpler alternative of offering a standardised secrets module that provides one obvious way to handle security sensitive tasks like generating default passwords and other tokens. | steven's proposal has the desired effect of aligning the easy way to generate such tokens and the right way to generate them, without introducing any compatibility risks for the existing random module api, so this pep has been withdrawn in favour of further work on refining steven's proposal as | discussion | during discussion of this pep, steven d'aprano proposed the simpler alternative of offering a standardised secrets module that provides one obvious way to handle security sensitive tasks like generating default passwords and other tokens.
PEP 504| withdrawn | during discussion of this pep, steven d'aprano proposed the simpler alternative of offering a standardised secrets module that provides one obvious way to handle security sensitive tasks like generating default passwords and other tokens. | steven's proposal has the desired effect of aligning the easy way to generate such tokens and the right way to generate them, without introducing any compatibility risks for the existing random module api, so this pep has been withdrawn in favour of further work on refining steven's proposal as .. 14 http legacy python org dev peps pep 0504 | discussion | during discussion of this pep, steven d'aprano proposed the simpler alternative of offering a standardised secrets module that provides one obvious way to handle security sensitive tasks like generating default passwords and other tokens.
PEP 506| deferred | During discussion of this PEP, Steven D'Aprano proposed the simpler alternative of offering a standardised secrets module that provides one obvious way to handle security sensitive tasks like generating default passwords and other tokens. | Steven's proposal has the desired effect of aligning the easy way to generate such tokens and the right way to generate them, without introducing any compatibility risks for the existing random module API, so this PEP has been deferred in favour of further work on refining Steven's proposal as PEP 506. | discussion | During discussion of this PEP, Steven D'Aprano proposed the simpler alternative of offering a standardised secrets module that provides one obvious way to handle security sensitive tasks like generating default passwords and other tokens.
PEP 509| accepted | STINNER Victor added the comment | The PEP 509 has been approved by Guido, I just pushed the implementation. | _comment | STINNER Victor added the comment
PEP 520| accepted | STINNER Victor added the comment | You should reopen the discussion on python dev, since the PEP 520 has been accepted with | _comment | STINNER Victor added the comment
PEP 520| accepted | STINNER Victor added the comment | You should reopen the discussion on python dev, since the PEP 520 has been accepted with | _comment | STINNER Victor added the comment
PEP 522| accepted | STINNER Victor added the comment | This idea is the PEP 522 which was superseded by the PEP 524 accepted in Python 3.6 which proposed to make os urandom blocking. | _comment | STINNER Victor added the comment
PEP 524| updated | For the remainder, I either wasn't clear on whether they could be closed or not in which case I posted a comment asking Victor to take a look at them , or else they were clearly still valid and I posted a relevant status update. | Doing a similar search for urandom , I checked the ones where the titles seemed relevant and commented where a status update and possible closure seemed appropriate. | _comment | For the remainder, I either wasn't clear on whether they could be closed or not in which case I posted a comment asking Victor to take a look at them , or else they were clearly still valid and I posted a relevant status update.
PEP 524| updated | For the remainder, I either wasn't clear on whether they could be closed or not in which case I posted a comment asking Victor to take a look at them , or else they were clearly still valid and I posted a relevant status update. | Doing a similar search for urandom , I checked the ones where the titles seemed relevant and commented where a status update and possible closure seemed appropriate. | _comment | For the remainder, I either wasn't clear on whether they could be closed or not in which case I posted a comment asking Victor to take a look at them , or else they were clearly still valid and I posted a relevant status update.
PEP 524| accepted | STINNER Victor added the comment | This idea is the PEP 522 which was superseded by the PEP 524 accepted in Python 3.6 which proposed to make os urandom blocking. | _comment | STINNER Victor added the comment
PEP 524| rejected | Dustin Spicuzza added the comment | Crap, after reading more carefully, I see that PEP was rejected in favor of PEP 524. | _comment | Dustin Spicuzza added the comment
PEP 524| rejected | Dustin Spicuzza added the comment | Crap, after reading more carefully, I see that PEP was rejected in favor of PEP 524. | _comment | Dustin Spicuzza added the comment
PEP 524| rejected | Dustin Spicuzza added the comment | Crap, after reading more carefully, I see that PEP was rejected in favor of PEP 524. | _comment | Dustin Spicuzza added the comment
PEP 524| rejected | Dustin Spicuzza added the comment | Crap, after reading more carefully, I see that PEP was rejected in favor of PEP 524. | _comment | Dustin Spicuzza added the comment
PEP 525| accepted | This is mostly motivated by thinking about the issues around async generators and cleanup. | Unfortunately even though PEP 525 was accepted I found myself unable to stop pondering this, and the more I've pondered the more convinced I've become that the GC hooks added in PEP 525 are really not enough, and that we'll regret it if we stick with them, or at least with them alone . | issues | This is mostly motivated by thinking about the issues around async generators and cleanup.
PEP 530| updated | Yury Selivanov added the comment | Closing this one, the issue was resolved as part of 28091. | _comment | Yury Selivanov added the comment
PEP 530| updated | Yury Selivanov added the comment | Closing this one, the issue was resolved as part of 28091. | _comment | Yury Selivanov added the comment
PEP 538| wrote_pep | STINNER Victor added the comment | Ok, same players play again as PEP 522 524 with Nick and me, I just wrote the PEP 540 Add a new UTF 8 mode and Nick wrote the PEP 538 D | _comment | STINNER Victor added the comment
PEP 540| wrote_pep | STINNER Victor added the comment | Ok, same players play again as PEP 522 524 with Nick and me, I just wrote the PEP 540 Add a new UTF 8 mode and Nick wrote the PEP 538 D | _comment | STINNER Victor added the comment
PEP 754| accepted | So, my response to the original question would be sort of since it's there, but it's not particularly reliable. | Let's just hope that PEP 754 or something similar is accepted infinity is certainly useful... | response | So, my response to the original question would be sort of since it's there, but it's not particularly reliable.
PEP 754| accepted | So, my response to the original question would be sort of since it's there, but it's not particularly reliable. | Let's just hope that PEP 754 or something similar is accepted infinity is certainly useful... | response | So, my response to the original question would be sort of since it's there, but it's not particularly reliable.
PEP 3103| rejected | https www python org dev peps pep 3103 A Switch Case Statement by Guido van Rossum, Rejection Notice A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support. | I therefore reject it . | no_popular_support | https www python org dev peps pep 3103 A Switch Case Statement by Guido van Rossum, Rejection Notice A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support.
PEP 3103| rejected | https www python org dev peps pep 3103 A Switch Case Statement by Guido van Rossum, Rejection Notice A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support. | I therefore reject it . | quick_poll | https www python org dev peps pep 3103 A Switch Case Statement by Guido van Rossum, Rejection Notice A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support.
PEP 3103| rejected | https www python org dev peps pep 3103 A Switch Case Statement by Guido van Rossum, Rejection Notice A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support. | I therefore reject it . | no_popular_support | https www python org dev peps pep 3103 A Switch Case Statement by Guido van Rossum, Rejection Notice A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support.
PEP 3106| accepted | I also did some other cleanup in PEP 0 marked PEP 3102 keyword only arguments , PEP 3104 nonlocal , and 3107 annotations as finished. | Made PEP 3106 dict views as accepted but left as not implemented as there is still an Open Issues section. | _argument | I also did some other cleanup in PEP 0 marked PEP 3102 keyword only arguments , PEP 3104 nonlocal , and 3107 annotations as finished.
PEP 3106| accepted | I also did some other cleanup in PEP 0 marked PEP 3102 keyword only arguments , PEP 3104 nonlocal , and 3107 annotations as finished. | Made PEP 3106 dict views as accepted but left as not implemented as there is still an Open Issues section. | _argument | I also did some other cleanup in PEP 0 marked PEP 3102 keyword only arguments , PEP 3104 nonlocal , and 3107 annotations as finished.
PEP 3106| accepted | I also did some other cleanup in PEP 0 marked PEP 3102 keyword only arguments , PEP 3104 nonlocal , and 3107 annotations as finished. | Made PEP 3106 dict views as accepted but left as not implemented as there is still an Open Issues section. | arguments | I also did some other cleanup in PEP 0 marked PEP 3102 keyword only arguments , PEP 3104 nonlocal , and 3107 annotations as finished.
PEP 3107| rejected | Needless to say, the idea of deprecating uses of parameter and return annotations that aren't this particular way of typechecking is upsetting to me. | On to the most formal of formal complaints PEP 3107 6 rejected standardizing typing related annotations. | say | Needless to say, the idea of deprecating uses of parameter and return annotations that aren't this particular way of typechecking is upsetting to me.
PEP 3107| rejected | Sorry for the long rant. | 1 Clize on PyPI https pypi python org pypi clize 2 Old clize API https github com epsy clize blob e84637a631574e793719114ad7e40d0b36df1a78 README rst using clize in your programs 3 New clize API involving annotations http clize readthedocs org en latest basics html converting arguments 4 Inspect signature compatible backport of annotations http sigtools readthedocs org en latest sigtools modifiers annotate 5 Backport of inspect signature https pypi python org pypi funcsigs 0.4 6 Rejected proposals from Function Annotations PEP http legacy python org dev peps pep 3107 rejected proposals 7 Warnings for Beginners Learn Python the Hard Way http learnpythonthehardway org book ex0 html warnings for beginners | rant | Sorry for the long rant.
PEP 3111| accepted | I've been following the Py3k discussions for several months, and I find myself frequently feeling very bewildered about the new features being proposed, even though I'm hardly a newbie. | FWIW one of my favorite accepted PEPs is PEP 3111, Simple input built in in Python 3000. | discussion | I've been following the Py3k discussions for several months, and I find myself frequently feeling very bewildered about the new features being proposed, even though I'm hardly a newbie.
PEP 3111| accepted | I've been following the Py3k discussions for several months, and I find myself frequently feeling very bewildered about the new features being proposed, even though I'm hardly a newbie. | FWIW one of my favorite accepted PEPs is PEP 3111, Simple input built in in Python 3000. | _discussions | I've been following the Py3k discussions for several months, and I find myself frequently feeling very bewildered about the new features being proposed, even though I'm hardly a newbie.
PEP 3122| accepted | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks . | Brett's rejected PEP 3122 and my own accepted PEP 366 were both a direct result of the interpreter lying about the real value of name . | discussion | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks .
PEP 3122| accepted | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks . | Brett's rejected PEP 3122 and my own accepted PEP 366 were both a direct result of the interpreter lying about the real value of name . | say | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks .
PEP 3122| accepted | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks . | Brett's rejected PEP 3122 and my own accepted PEP 366 were both a direct result of the interpreter lying about the real value of name . | discussion | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks .
PEP 3122| accepted | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks . | Brett's rejected PEP 3122 and my own accepted PEP 366 were both a direct result of the interpreter lying about the real value of name . | say | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks .
PEP 3130| rejected | I would say the most obvious place is in a decorator, using the function object or a copy as the namespace. | Doing this properly would require some variant of PEP 3130, which was rejected largely for insufficient use. | say | I would say the most obvious place is in a decorator, using the function object or a copy as the namespace.
PEP 3130| rejected | I would say the most obvious place is in a decorator, using the function object or a copy as the namespace. | Doing this properly would require some variant of PEP 3130, which was rejected largely for insufficient use. | say | I would say the most obvious place is in a decorator, using the function object or a copy as the namespace.
PEP 3131| accepted | I don't think the feature is open for debate anymore. | PEP 3131 has been accepted after long debates , and I'll pronounce that supporting non ASCII module names is a direct consequence of having it accepted. | debate | I don't think the feature is open for debate anymore.
PEP 3131| accepted | I don't think the feature is open for debate anymore. | PEP 3131 has been accepted after long debates , and I'll pronounce that supporting non ASCII module names is a direct consequence of having it accepted. | debate | I don't think the feature is open for debate anymore.
PEP 3140| bdfl_pronouncement_rejected | Having str container calling str item and not repr item sounds like the right thing to do. | However, PEP 3140 was rejected on the basis of the following statement of Guido | right_thing | Having str container calling str item and not repr item sounds like the right thing to do.
PEP 3140| rejected | Having str container calling str item and not repr item sounds like the right thing to do. | However, PEP 3140 was rejected on the basis of the following statement of Guido | right_thing | Having str container calling str item and not repr item sounds like the right thing to do.
PEP 3140| rejected | Having str container calling str item and not repr item sounds like the right thing to do. | However, PEP 3140 was rejected on the basis of the following statement of Guido | right_thing | Having str container calling str item and not repr item sounds like the right thing to do.
PEP 3140| rejected | Having str container calling str item and not repr item sounds like the right thing to do. | However, PEP 3140 was rejected on the basis of the following statement of Guido | right_thing | Having str container calling str item and not repr item sounds like the right thing to do.
PEP 3147| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 3147| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 3147| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 3147| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 3147| draft | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made. | While a PEP is in private discussions usually during the initial Draft phase , a Discussions To header will indicate the mailing list or URL where the PEP is being discussed. | pronounce | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made.
PEP 3147| draft | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made. | While a PEP is in private discussions usually during the initial Draft phase , a Discussions To header will indicate the mailing list or URL where the PEP is being discussed. | _pronouncement | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made.
PEP 3147| draft | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made. | While a PEP is in private discussions usually during the initial Draft phase , a Discussions To header will indicate the mailing list or URL where the PEP is being discussed. | pronounce | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made.
PEP 3147| draft | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made. | While a PEP is in private discussions usually during the initial Draft phase , a Discussions To header will indicate the mailing list or URL where the PEP is being discussed. | _pronouncement | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made.
PEP 3147| updated | As many tests use the linecache module, it makes sense to skip the installation of the test suite aas well since the patch removes all py files except those installed by ensurepip in site packages . | This can be done when issue 27640 is resolved by using ' disable test suite'. | stalled | As many tests use the linecache module, it makes sense to skip the installation of the test suite aas well since the patch removes all py files except those installed by ensurepip in site packages .
PEP 3147| updated | As many tests use the linecache module, it makes sense to skip the installation of the test suite aas well since the patch removes all py files except those installed by ensurepip in site packages . | This can be done when issue 27640 is resolved by using ' disable test suite'. | stalled | As many tests use the linecache module, it makes sense to skip the installation of the test suite aas well since the patch removes all py files except those installed by ensurepip in site packages .
PEP 3150| draft | As suggested by Eric's change to the subject line, I've now withdrawn the short lived PEP 403, revived PEP 3150 statement local namespaces and updated it based on the feedback received in relation to PEP 403. | The current draft of PEP 3150 is available on python org http www python org dev peps pep 3150 | feedback | As suggested by Eric's change to the subject line, I've now withdrawn the short lived PEP 403, revived PEP 3150 statement local namespaces and updated it based on the feedback received in relation to PEP 403.
PEP 3150| draft | As suggested by Eric's change to the subject line, I've now withdrawn the short lived PEP 403, revived PEP 3150 statement local namespaces and updated it based on the feedback received in relation to PEP 403. | The current draft of PEP 3150 is available on python org http www python org dev peps pep 3150 | withdrawn | As suggested by Eric's change to the subject line, I've now withdrawn the short lived PEP 403, revived PEP 3150 statement local namespaces and updated it based on the feedback received in relation to PEP 403.
PEP 3155| accepted | ?ric Araujo merwok at netwok org added the comment | PEP 3155 is accepted and makes str cls and str function as well as repr cls and repr function return the qualified name, which obsoletes part of this request. | _comment | ?ric Araujo merwok at netwok org added the comment
PEP 3155| accepted | ?ric Araujo merwok at netwok org added the comment | PEP 3155 is accepted and makes str cls and str function as well as repr cls and repr function return the qualified name, which obsoletes part of this request. | _comment | ?ric Araujo merwok at netwok org added the comment
PEP 3333| accepted | Guido has pronounced that I cannot change PEP 333 in any way, so even if I agreed with the requests in this thread, there is simply no way that wsgiref is changing in 2 x. | PEP 3333 has just been approved as well, so the odds of even a 3 x change are low. | pronounce | Guido has pronounced that I cannot change PEP 333 in any way, so even if I agreed with the requests in this thread, there is simply no way that wsgiref is changing in 2 x.
PEP 3333| accepted | Guido has pronounced that I cannot change PEP 333 in any way, so even if I agreed with the requests in this thread, there is simply no way that wsgiref is changing in 2 x. | PEP 3333 has just been approved as well, so the odds of even a 3 x change are low. | pronounced | Guido has pronounced that I cannot change PEP 333 in any way, so even if I agreed with the requests in this thread, there is simply no way that wsgiref is changing in 2 x.
PEP 308| accepted | This doesn't strictly equate to number of signatures  , which is how these sorts of petitions are often treated in modern politics it's more about strength of argument . | So not only is this system not democratic in the obvious sense of majority rules if you get more votes than  , the PEP is approved  , it's also almost never even about gathering numerical support which is what this would be able to show  . | _argument | This doesn't strictly equate to number of signatures  , which is how these sorts of petitions are often treated in modern politics it's more about strength of argument .
PEP 308| accepted | This doesn't strictly equate to number of signatures  , which is how these sorts of petitions are often treated in modern politics it's more about strength of argument . | So not only is this system not democratic in the obvious sense of majority rules if you get more votes than  , the PEP is approved  , it's also almost never even about gathering numerical support which is what this would be able to show  . | _argument | This doesn't strictly equate to number of signatures  , which is how these sorts of petitions are often treated in modern politics it's more about strength of argument .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | interest | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | interest | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | interest | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | interest | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | interest | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | interest | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| updated | 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax .
PEP 308| updated | 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax .
PEP 308| updated | 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax .
PEP 308| updated | 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax .
PEP 308| updated | On 9 29 2005 , Guido decided to add conditional expressions in the 21 ,11 22 ,12 stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | On 9 29 2005 , Guido decided to add conditional expressions in the 21 ,11 22 ,12 stymied by a lack of consensus on the best syntax .
PEP 308| updated | On 9 29 2005 , Guido decided to add conditional expressions in the 21 ,11 22 ,12 stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | On 9 29 2005 , Guido decided to add conditional expressions in the 21 ,11 22 ,12 stymied by a lack of consensus on the best syntax .
PEP 308| updated | On 9 29 2005 , Guido decided to add conditional expressions in the 21 ,11 22 ,12 stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | On 9 29 2005 , Guido decided to add conditional expressions in the 21 ,11 22 ,12 stymied by a lack of consensus on the best syntax .
PEP 308| updated | On 9 29 2005 , Guido decided to add conditional expressions in the 21 ,11 22 ,12 stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | On 9 29 2005 , Guido decided to add conditional expressions in the 21 ,11 22 ,12 stymied by a lack of consensus on the best syntax .
PEP 308| accepted | If you want to summarise them as yes no undecided , then set required majority levels , but to some extent that's just another chance for people to complain  . | To some extent , anything else doesn't match the oficial PEP process where the PEP is modified to match the proposed solution , and then the PEP is accepted or rejected once it's finalised and ready for a decision  . | majority | If you want to summarise them as yes no undecided , then set required majority levels , but to some extent that's just another chance for people to complain  .
PEP 308| accepted | If you want to summarise them as yes no undecided , then set required majority levels , but to some extent that's just another chance for people to complain  . | To some extent , anything else doesn't match the oficial PEP process where the PEP is modified to match the proposed solution , and then the PEP is accepted or rejected once it's finalised and ready for a decision  . | majority | If you want to summarise them as yes no undecided , then set required majority levels , but to some extent that's just another chance for people to complain  .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | interest | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | interest | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| updated | Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax .
PEP 308| updated | Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | interest | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | interest | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| updated | Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax .
PEP 308| accepted | This doesn't strictly equate to number of signatures  , which is how these sorts of petitions are often treated in modern politics it's more about strength of argument . | So not only is this system not democratic in the obvious sense of majority rules if you get more votes than  , the PEP is approved  , it's also almost never even about gathering numerical support which is what this would be able to show  . | _argument | This doesn't strictly equate to number of signatures  , which is how these sorts of petitions are often treated in modern politics it's more about strength of argument .
PEP 308| accepted | This doesn't strictly equate to number of signatures  , which is how these sorts of petitions are often treated in modern politics it's more about strength of argument . | So not only is this system not democratic in the obvious sense of majority rules if you get more votes than  , the PEP is approved  , it's also almost never even about gathering numerical support which is what this would be able to show  . | _argument | This doesn't strictly equate to number of signatures  , which is how these sorts of petitions are often treated in modern politics it's more about strength of argument .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | interest | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | interest | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | interest | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | interest | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | interest | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | interest | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support . | Accordingly , the PEP was rejected due to the lack of an overwhelming majority for change . | majority | While there was an overall interest in having some form of if then else expressions , no one format was able to draw majority support .
PEP 308| updated | 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax .
PEP 308| updated | 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax .
PEP 308| updated | 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax .
PEP 308| updated | 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax .
PEP 308| updated | On 9 29 2005 , Guido decided to add conditional expressions in the 21 ,11 22 ,12 stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | On 9 29 2005 , Guido decided to add conditional expressions in the 21 ,11 22 ,12 stymied by a lack of consensus on the best syntax .
PEP 308| updated | On 9 29 2005 , Guido decided to add conditional expressions in the 21 ,11 22 ,12 stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | On 9 29 2005 , Guido decided to add conditional expressions in the 21 ,11 22 ,12 stymied by a lack of consensus on the best syntax .
PEP 308| updated | On 9 29 2005 , Guido decided to add conditional expressions in the 21 ,11 22 ,12 stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | On 9 29 2005 , Guido decided to add conditional expressions in the 21 ,11 22 ,12 stymied by a lack of consensus on the best syntax .
PEP 308| updated | On 9 29 2005 , Guido decided to add conditional expressions in the 21 ,11 22 ,12 stymied by a lack of consensus on the best syntax . | That issue was resolved by simply deferring to a BDFL best judgment call . | consensus | On 9 29 2005 , Guido decided to add conditional expressions in the 21 ,11 22 ,12 stymied by a lack of consensus on the best syntax .
PEP 8| rejected | The BDFL has pronounced vanrossum 2 that no API renaming is to occur in the unittest module. | This PEP is therefore rejected. | pronounce | The BDFL has pronounced vanrossum 2 that no API renaming is to occur in the unittest module.
PEP 8| rejected | The BDFL has pronounced vanrossum 2 that no API renaming is to occur in the unittest module. | This PEP is therefore rejected. | pronounced | The BDFL has pronounced vanrossum 2 that no API renaming is to occur in the unittest module.
PEP 8| rejected | The BDFL has pronounced vanrossum 2 that no API renaming is to occur in the unittest module. | This PEP is therefore rejected. | pronounce | The BDFL has pronounced vanrossum 2 that no API renaming is to occur in the unittest module.
PEP 8| rejected | The BDFL has pronounced vanrossum 2 that no API renaming is to occur in the unittest module. | This PEP is therefore rejected. | pronounced | The BDFL has pronounced vanrossum 2 that no API renaming is to occur in the unittest module.
PEP 8| accepted | Let's not start another bikeshed color debate. | The PEP has been discussed, discussed again, and accepted. | debate | Let's not start another bikeshed color debate.
PEP 8| accepted | Let's not start another bikeshed color debate. | The PEP has been discussed, discussed again, and accepted. | debate | Let's not start another bikeshed color debate.
PEP 9| accepted | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below. | However, none of the discussion changed the BDFL's mind and the PEP's acceptance is now final. | objections | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below.
PEP 9| accepted | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below. | However, none of the discussion changed the BDFL's mind and the PEP's acceptance is now final. | _objection | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below.
PEP 9| accepted | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below. | However, none of the discussion changed the BDFL's mind and the PEP's acceptance is now final. | objections | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below.
PEP 11| updated | We both thought that it was reasonable to stop supporting Win9x including WinME in Python 2.6. | I updated PEP 11 to reflect this. | reason | We both thought that it was reasonable to stop supporting Win9x including WinME in Python 2.6.
PEP 11| updated | We both thought that it was reasonable to stop supporting Win9x including WinME in Python 2.6. | I updated PEP 11 to reflect this. | reason | We both thought that it was reasonable to stop supporting Win9x including WinME in Python 2.6.
PEP 20| rejected | The BDFL has pronounced vanrossum 2 that no API renaming is to occur in the unittest module. | This PEP is therefore rejected. | pronounce | The BDFL has pronounced vanrossum 2 that no API renaming is to occur in the unittest module.
PEP 20| rejected | The BDFL has pronounced vanrossum 2 that no API renaming is to occur in the unittest module. | This PEP is therefore rejected. | pronounced | The BDFL has pronounced vanrossum 2 that no API renaming is to occur in the unittest module.
PEP 20| rejected | The BDFL has pronounced vanrossum 2 that no API renaming is to occur in the unittest module. | This PEP is therefore rejected. | pronounce | The BDFL has pronounced vanrossum 2 that no API renaming is to occur in the unittest module.
PEP 20| rejected | The BDFL has pronounced vanrossum 2 that no API renaming is to occur in the unittest module. | This PEP is therefore rejected. | pronounced | The BDFL has pronounced vanrossum 2 that no API renaming is to occur in the unittest module.
PEP 101| accepted | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification . | Reliability considerations 408,44 413,49 If this PEP is accepted, the proposed time frame for integration of pip into the CPython release is as follows | reviewing | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification .
PEP 101| accepted | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification . | Reliability considerations 408,44 413,49 If this PEP is accepted, the proposed time frame for integration of pip into the CPython release is as follows | issues | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification .
PEP 101| accepted | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification . | Reliability considerations 408,44 413,49 If this PEP is accepted, the proposed time frame for integration of pip into the CPython release is as follows | reviewing | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification .
PEP 101| accepted | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification . | Reliability considerations 408,44 413,49 If this PEP is accepted, the proposed time frame for integration of pip into the CPython release is as follows | issues | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification .
PEP 101| updated | Ned Deily added the comment | Larry, I updated PEP 101 to reflect I think are the steps required for this with the new website the doc upload instructions are already in PEP 101. | _comment | Ned Deily added the comment
PEP 101| updated | Ned Deily added the comment | Larry, I updated PEP 101 to reflect I think are the steps required for this with the new website the doc upload instructions are already in PEP 101. | _comment | Ned Deily added the comment
PEP 202| accepted | What I like best about generator comprehensions is that I can design using list comprehensions and then easily switch to a generator by adding yield in response to scalability requirements when the list comprehension produces too large of an intermediate result . | Had generators already been in place when list comprehensions were accepted, the yield option might have been incorporated from the start. | response | What I like best about generator comprehensions is that I can design using list comprehensions and then easily switch to a generator by adding yield in response to scalability requirements when the list comprehension produces too large of an intermediate result .
PEP 203| wrote_pep | I believe that PEP 302 is more or less up to date there is discussion of a Phase 2 rationalisation in the PEP, which hasn't been implemented, but IIRC that is mainly an internal detail and doesn't affect the user visible interface . | I'll do a quick check of the PEP against reality, but if there are mismatches, I can't offer to fix them Just was the coding wizard, I just wrote some of the blurb . | discussion | I believe that PEP 302 is more or less up to date there is discussion of a Phase 2 rationalisation in the PEP, which hasn't been implemented, but IIRC that is mainly an internal detail and doesn't affect the user visible interface .
PEP 204| rejected | This has been discussed to death at least once a year for the three years I've been here I happen to think it's a good idea, but I have no illusions of it ever being implemented wink | PEP 204 http python sourceforge net peps pep 0204 html Allready rejected. | _discussed | This has been discussed to death at least once a year for the three years I've been here I happen to think it's a good idea, but I have no illusions of it ever being implemented wink
PEP 211| draft | And at least this way, if it gets rejected, we'll know that it was rejected for the right reasons... | You'll notice that this draft is rather more developed than the average first round PEP posting, because it's already been the rounds of all the various numerical package mailing lists to build consensus no point in asking for the wrong thing. | reason | And at least this way, if it gets rejected, we'll know that it was rejected for the right reasons...
PEP 211| draft | And at least this way, if it gets rejected, we'll know that it was rejected for the right reasons... | You'll notice that this draft is rather more developed than the average first round PEP posting, because it's already been the rounds of all the various numerical package mailing lists to build consensus no point in asking for the wrong thing. | _reasons | And at least this way, if it gets rejected, we'll know that it was rejected for the right reasons...
PEP 214| accepted | From python checkins at python org georg brandl Subject Python checkins peps BDFL pronounces this PEP accepted for inclusion in Python 2.0 Message ID E1Q2Ucj 0000CM 8C dinsdale python org | http hg python org peps rev 010bb1fd7d45 changeset 121 010bb1fd7d45 user Barry Warsaw barry at python org date Mon Aug 21 13 36 22 2000 0000 summary BDFL pronounces this PEP accepted for inclusion in Python 2.0 | pronounce | From python checkins at python org georg brandl Subject Python checkins peps BDFL pronounces this PEP accepted for inclusion in Python 2.0 Message ID E1Q2Ucj 0000CM 8C dinsdale python org
PEP 214| accepted | From python checkins at python org georg brandl Subject Python checkins peps BDFL pronounces this PEP accepted for inclusion in Python 2.0 Message ID E1Q2Ucj 0000CM 8C dinsdale python org | http hg python org peps rev 010bb1fd7d45 changeset 121 010bb1fd7d45 user Barry Warsaw barry at python org date Mon Aug 21 13 36 22 2000 0000 summary BDFL pronounces this PEP accepted for inclusion in Python 2.0 | pronounce | From python checkins at python org georg brandl Subject Python checkins peps BDFL pronounces this PEP accepted for inclusion in Python 2.0 Message ID E1Q2Ucj 0000CM 8C dinsdale python org
PEP 214| accepted | From python checkins at python org georg brandl Subject Python checkins peps BDFL pronounces this PEP accepted for inclusion in Python 2.0 Message ID E1Q2Ucj 0000CM 8C dinsdale python org | http hg python org peps rev 010bb1fd7d45 changeset 121 010bb1fd7d45 user Barry Warsaw barry at python org date Mon Aug 21 13 36 22 2000 0000 summary BDFL pronounces this PEP accepted for inclusion in Python 2.0 | pronounce | From python checkins at python org georg brandl Subject Python checkins peps BDFL pronounces this PEP accepted for inclusion in Python 2.0 Message ID E1Q2Ucj 0000CM 8C dinsdale python org
PEP 214| accepted | From python checkins at python org georg brandl Subject Python checkins peps BDFL pronounces this PEP accepted for inclusion in Python 2.0 Message ID E1Q2Ucj 0000CM 8C dinsdale python org | http hg python org peps rev 010bb1fd7d45 changeset 121 010bb1fd7d45 user Barry Warsaw barry at python org date Mon Aug 21 13 36 22 2000 0000 summary BDFL pronounces this PEP accepted for inclusion in Python 2.0 | pronounce | From python checkins at python org georg brandl Subject Python checkins peps BDFL pronounces this PEP accepted for inclusion in Python 2.0 Message ID E1Q2Ucj 0000CM 8C dinsdale python org
PEP 225| draft | And at least this way, if it gets rejected, we'll know that it was rejected for the right reasons... | You'll notice that this draft is rather more developed than the average first round PEP posting, because it's already been the rounds of all the various numerical package mailing lists to build consensus no point in asking for the wrong thing. | reason | And at least this way, if it gets rejected, we'll know that it was rejected for the right reasons...
PEP 225| draft | And at least this way, if it gets rejected, we'll know that it was rejected for the right reasons... | You'll notice that this draft is rather more developed than the average first round PEP posting, because it's already been the rounds of all the various numerical package mailing lists to build consensus no point in asking for the wrong thing. | _reasons | And at least this way, if it gets rejected, we'll know that it was rejected for the right reasons...
PEP 226| closed | If Paul can control his urge to want to solve everything at once, I see no reason whi this one couldn't find its way into 2.1. | Now, officially the PEP deadline is closed today the schedule says 16 Dec 2000 2.1 PEPs ready for review . | reason | If Paul can control his urge to want to solve everything at once, I see no reason whi this one couldn't find its way into 2.1.
PEP 226| closed | If Paul can control his urge to want to solve everything at once, I see no reason whi this one couldn't find its way into 2.1. | Now, officially the PEP deadline is closed today the schedule says 16 Dec 2000 2.1 PEPs ready for review . | reason | If Paul can control his urge to want to solve everything at once, I see no reason whi this one couldn't find its way into 2.1.
PEP 226| closed | If Paul can control his urge to want to solve everything at once, I see no reason whi this one couldn't find its way into 2.1. | Now, officially the PEP deadline is closed today the schedule says 16 Dec 2000 2.1 PEPs ready for review . | reason | If Paul can control his urge to want to solve everything at once, I see no reason whi this one couldn't find its way into 2.1.
PEP 227| updated | There has been renewed discussion of backwards compatibility issues introduced by nested scopes. | Following some discussion on python dev, I have updated the discussion of these issues in the PEP. | discussion | There has been renewed discussion of backwards compatibility issues introduced by nested scopes.
PEP 227| updated | There has been renewed discussion of backwards compatibility issues introduced by nested scopes. | Following some discussion on python dev, I have updated the discussion of these issues in the PEP. | issues | There has been renewed discussion of backwards compatibility issues introduced by nested scopes.
PEP 227| updated | There has been renewed discussion of backwards compatibility issues introduced by nested scopes. | Following some discussion on python dev, I have updated the discussion of these issues in the PEP. | discussion | There has been renewed discussion of backwards compatibility issues introduced by nested scopes.
PEP 227| updated | There has been renewed discussion of backwards compatibility issues introduced by nested scopes. | Following some discussion on python dev, I have updated the discussion of these issues in the PEP. | issues | There has been renewed discussion of backwards compatibility issues introduced by nested scopes.
PEP 227| updated | There has been renewed discussion of backwards compatibility issues introduced by nested scopes. | Following some discussion on python dev, I have updated the discussion of these issues in the PEP. | discussion | There has been renewed discussion of backwards compatibility issues introduced by nested scopes.
PEP 227| updated | There has been renewed discussion of backwards compatibility issues introduced by nested scopes. | Following some discussion on python dev, I have updated the discussion of these issues in the PEP. | issues | There has been renewed discussion of backwards compatibility issues introduced by nested scopes.
PEP 227| updated | There has been renewed discussion of backwards compatibility issues introduced by nested scopes. | Following some discussion on python dev, I have updated the discussion of these issues in the PEP. | discussion | There has been renewed discussion of backwards compatibility issues introduced by nested scopes.
PEP 227| updated | There has been renewed discussion of backwards compatibility issues introduced by nested scopes. | Following some discussion on python dev, I have updated the discussion of these issues in the PEP. | issues | There has been renewed discussion of backwards compatibility issues introduced by nested scopes.
PEP 227| updated | There has been renewed discussion of backwards compatibility issues introduced by nested scopes. | Following some discussion on python dev, I have updated the discussion of these issues in the PEP. | discussion | There has been renewed discussion of backwards compatibility issues introduced by nested scopes.
PEP 227| updated | There has been renewed discussion of backwards compatibility issues introduced by nested scopes. | Following some discussion on python dev, I have updated the discussion of these issues in the PEP. | issues | There has been renewed discussion of backwards compatibility issues introduced by nested scopes.
PEP 227| updated | There has been renewed discussion of backwards compatibility issues introduced by nested scopes. | Following some discussion on python dev, I have updated the discussion of these issues in the PEP. | discussion | There has been renewed discussion of backwards compatibility issues introduced by nested scopes.
PEP 227| updated | There has been renewed discussion of backwards compatibility issues introduced by nested scopes. | Following some discussion on python dev, I have updated the discussion of these issues in the PEP. | issues | There has been renewed discussion of backwards compatibility issues introduced by nested scopes.
PEP 227| updated | There has been renewed discussion of backwards compatibility issues introduced by nested scopes. | Following some discussion on python dev, I have updated the discussion of these issues in the PEP. | discussion | There has been renewed discussion of backwards compatibility issues introduced by nested scopes.
PEP 227| updated | There has been renewed discussion of backwards compatibility issues introduced by nested scopes. | Following some discussion on python dev, I have updated the discussion of these issues in the PEP. | issues | There has been renewed discussion of backwards compatibility issues introduced by nested scopes.
PEP 227| updated | There has been renewed discussion of backwards compatibility issues introduced by nested scopes. | Following some discussion on python dev, I have updated the discussion of these issues in the PEP. | discussion | There has been renewed discussion of backwards compatibility issues introduced by nested scopes.
PEP 227| updated | There has been renewed discussion of backwards compatibility issues introduced by nested scopes. | Following some discussion on python dev, I have updated the discussion of these issues in the PEP. | issues | There has been renewed discussion of backwards compatibility issues introduced by nested scopes.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | concerns_raised | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | consensus | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | discussion | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | objections | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | _objection | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | objections | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | _concerns | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | concerns_raised | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | consensus | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | discussion | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | objections | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | _objection | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | objections | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | _concerns | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | concerns_raised | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | consensus | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | discussion | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | objections | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | _objection | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | objections | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | _concerns | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | concerns_raised | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | consensus | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | discussion | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | objections | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | _objection | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | objections | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | _concerns | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | concerns_raised | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | consensus | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | discussion | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | objections | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | _objection | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | objections | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | _concerns | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | concerns_raised | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | consensus | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | discussion | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | objections | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | _objection | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | objections | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | _concerns | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | concerns_raised | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | consensus | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | discussion | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | objections | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | _objection | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | objections | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | _concerns | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | concerns_raised | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | consensus | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | discussion | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | objections | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | _objection | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | objections | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 228| accepted | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion. | 7. Reference Implementation The reference implementation must be completed before any PEP is given status 'final,' but it need not be completed before the PEP is accepted. | _concerns | The rationale should provide evidence of consensus within the community and discuss important objections or concerns raised during discussion.
PEP 232| draft | After some internal discussions amongst the Pythonlabbers, we've had to make some updates to PEP 232, Function Attributes. | Attached is the complete current PEP draft, also available at | discussion | After some internal discussions amongst the Pythonlabbers, we've had to make some updates to PEP 232, Function Attributes.
PEP 232| draft | After some internal discussions amongst the Pythonlabbers, we've had to make some updates to PEP 232, Function Attributes. | Attached is the complete current PEP draft, also available at | _discussions | After some internal discussions amongst the Pythonlabbers, we've had to make some updates to PEP 232, Function Attributes.
PEP 232| draft | After some internal discussions amongst the Pythonlabbers, we've had to make some updates to PEP 232, Function Attributes. | Attached is the complete current PEP draft, also available at | discussion | After some internal discussions amongst the Pythonlabbers, we've had to make some updates to PEP 232, Function Attributes.
PEP 232| draft | After some internal discussions amongst the Pythonlabbers, we've had to make some updates to PEP 232, Function Attributes. | Attached is the complete current PEP draft, also available at | _discussions | After some internal discussions amongst the Pythonlabbers, we've had to make some updates to PEP 232, Function Attributes.
PEP 232| draft | After some internal discussions amongst the Pythonlabbers, we've had to make some updates to PEP 232, Function Attributes. | Attached is the complete current PEP draft, also available at | discussion | After some internal discussions amongst the Pythonlabbers, we've had to make some updates to PEP 232, Function Attributes.
PEP 232| draft | After some internal discussions amongst the Pythonlabbers, we've had to make some updates to PEP 232, Function Attributes. | Attached is the complete current PEP draft, also available at | _discussions | After some internal discussions amongst the Pythonlabbers, we've had to make some updates to PEP 232, Function Attributes.
PEP 232| draft | After some internal discussions amongst the Pythonlabbers, we've had to make some updates to PEP 232, Function Attributes. | Attached is the complete current PEP draft, also available at | discussion | After some internal discussions amongst the Pythonlabbers, we've had to make some updates to PEP 232, Function Attributes.
PEP 232| draft | After some internal discussions amongst the Pythonlabbers, we've had to make some updates to PEP 232, Function Attributes. | Attached is the complete current PEP draft, also available at | _discussions | After some internal discussions amongst the Pythonlabbers, we've had to make some updates to PEP 232, Function Attributes.
PEP 234| withdrawn | It is still open for discussion. | Some of the more esoteric proposals in the original version of this PEP have been withdrawn for now these may be the subject of a separate PEP in the future. | discussion | It is still open for discussion.
PEP 236| wrote_pep | If the champion merely records negative feedback without actually changing the proposal, you can come up with a counter proposal, as a separate PEP. | For example, I wrote PEP 244 to counter PEP 236. | feedback | If the champion merely records negative feedback without actually changing the proposal, you can come up with a counter proposal, as a separate PEP.
PEP 238| draft | And at least this way, if it gets rejected, we'll know that it was rejected for the right reasons... | You'll notice that this draft is rather more developed than the average first round PEP posting, because it's already been the rounds of all the various numerical package mailing lists to build consensus no point in asking for the wrong thing. | reason | And at least this way, if it gets rejected, we'll know that it was rejected for the right reasons...
PEP 238| draft | And at least this way, if it gets rejected, we'll know that it was rejected for the right reasons... | You'll notice that this draft is rather more developed than the average first round PEP posting, because it's already been the rounds of all the various numerical package mailing lists to build consensus no point in asking for the wrong thing. | _reasons | And at least this way, if it gets rejected, we'll know that it was rejected for the right reasons...
PEP 239| rejected | See the python dev discussion on 17 June 2005. | This PEP is rejected. | discussion | See the python dev discussion on 17 June 2005.
PEP 239| rejected | See the python dev discussion on 17 June 2005. | This PEP is rejected. | discussion | See the python dev discussion on 17 June 2005.
PEP 239| rejected | See the python dev discussion on 17 June 2005. | This PEP is rejected. | discussion | See the python dev discussion on 17 June 2005.
PEP 239| rejected | See the python dev discussion on 17 June 2005. | This PEP is rejected. | discussion | See the python dev discussion on 17 June 2005.
PEP 240| rejected | See the python dev discussion on 17 June 2005. | This PEP is rejected. | discussion | See the python dev discussion on 17 June 2005.
PEP 240| rejected | See the python dev discussion on 17 June 2005. | This PEP is rejected. | discussion | See the python dev discussion on 17 June 2005.
PEP 242| closed | Status Rejected Created 17 Mar 2001 208,211 No open issues have been raised at this time. | This PEP has been closed by the author. | open_issues | Status Rejected Created 17 Mar 2001 208,211 No open issues have been raised at this time.
PEP 242| closed | Status Rejected Created 17 Mar 2001 208,211 No open issues have been raised at this time. | This PEP has been closed by the author. | open_issues | Status Rejected Created 17 Mar 2001 208,211 No open issues have been raised at this time.
PEP 242| closed | Status Rejected Created 17 Mar 2001 208,211 No open issues have been raised at this time. | This PEP has been closed by the author. | open_issues | Status Rejected Created 17 Mar 2001 208,211 No open issues have been raised at this time.
PEP 242| closed | Status Rejected Created 17 Mar 2001 208,211 No open issues have been raised at this time. | This PEP has been closed by the author. | issues | Status Rejected Created 17 Mar 2001 208,211 No open issues have been raised at this time.
PEP 242| closed | Status Rejected Created 17 Mar 2001 208,211 No open issues have been raised at this time. | This PEP has been closed by the author. | open_issues | Status Rejected Created 17 Mar 2001 208,211 No open issues have been raised at this time.
PEP 242| closed | Status Rejected Created 17 Mar 2001 208,211 No open issues have been raised at this time. | This PEP has been closed by the author. | open_issues | Status Rejected Created 17 Mar 2001 208,211 No open issues have been raised at this time.
PEP 242| closed | Status Rejected Created 17 Mar 2001 208,211 No open issues have been raised at this time. | This PEP has been closed by the author. | open_issues | Status Rejected Created 17 Mar 2001 208,211 No open issues have been raised at this time.
PEP 242| closed | Status Rejected Created 17 Mar 2001 208,211 No open issues have been raised at this time. | This PEP has been closed by the author. | issues | Status Rejected Created 17 Mar 2001 208,211 No open issues have been raised at this time.
PEP 242| closed | Status Rejected Created 17 Mar 2001 208,211 No open issues have been raised at this time. | This PEP has been closed by the author. | open_issues | Status Rejected Created 17 Mar 2001 208,211 No open issues have been raised at this time.
PEP 242| closed | Status Rejected Created 17 Mar 2001 208,211 No open issues have been raised at this time. | This PEP has been closed by the author. | open_issues | Status Rejected Created 17 Mar 2001 208,211 No open issues have been raised at this time.
PEP 242| closed | Status Rejected Created 17 Mar 2001 208,211 No open issues have been raised at this time. | This PEP has been closed by the author. | open_issues | Status Rejected Created 17 Mar 2001 208,211 No open issues have been raised at this time.
PEP 242| closed | Status Rejected Created 17 Mar 2001 208,211 No open issues have been raised at this time. | This PEP has been closed by the author. | issues | Status Rejected Created 17 Mar 2001 208,211 No open issues have been raised at this time.
PEP 244| wrote_pep | If the champion merely records negative feedback without actually changing the proposal, you can come up with a counter proposal, as a separate PEP. | For example, I wrote PEP 244 to counter PEP 236. | feedback | If the champion merely records negative feedback without actually changing the proposal, you can come up with a counter proposal, as a separate PEP.
PEP 244| rejected | No. I dearly hope that there won't be any further smart comments . | I once asked for the introduction of a directive statement as proper syntax, but that PEP was rejected. | comments | No. I dearly hope that there won't be any further smart comments .
PEP 244| rejected | No. I dearly hope that there won't be any further smart comments . | I once asked for the introduction of a directive statement as proper syntax, but that PEP was rejected. | _comment | No. I dearly hope that there won't be any further smart comments .
PEP 244| rejected | No. I dearly hope that there won't be any further smart comments . | I once asked for the introduction of a directive statement as proper syntax, but that PEP was rejected. | comments | No. I dearly hope that there won't be any further smart comments .
PEP 244| rejected | No. I dearly hope that there won't be any further smart comments . | I once asked for the introduction of a directive statement as proper syntax, but that PEP was rejected. | _comment | No. I dearly hope that there won't be any further smart comments .
PEP 258| accepted | There's no support for PEP processing yet. | Assuming that this part of the PEP is accepted, | no_support | There's no support for PEP processing yet.
PEP 258| accepted | There's no support for PEP processing yet. | Assuming that this part of the PEP is accepted, | no_support | There's no support for PEP processing yet.
PEP 263| rejected | No. I dearly hope that there won't be any further smart comments . | I once asked for the introduction of a directive statement as proper syntax, but that PEP was rejected. | comments | No. I dearly hope that there won't be any further smart comments .
PEP 263| rejected | No. I dearly hope that there won't be any further smart comments . | I once asked for the introduction of a directive statement as proper syntax, but that PEP was rejected. | _comment | No. I dearly hope that there won't be any further smart comments .
PEP 263| rejected | No. I dearly hope that there won't be any further smart comments . | I once asked for the introduction of a directive statement as proper syntax, but that PEP was rejected. | comments | No. I dearly hope that there won't be any further smart comments .
PEP 263| rejected | No. I dearly hope that there won't be any further smart comments . | I once asked for the introduction of a directive statement as proper syntax, but that PEP was rejected. | _comment | No. I dearly hope that there won't be any further smart comments .
PEP 273| wrote_pep | I believe that PEP 302 is more or less up to date there is discussion of a Phase 2 rationalisation in the PEP, which hasn't been implemented, but IIRC that is mainly an internal detail and doesn't affect the user visible interface . | I'll do a quick check of the PEP against reality, but if there are mismatches, I can't offer to fix them Just was the coding wizard, I just wrote some of the blurb . | discussion | I believe that PEP 302 is more or less up to date there is discussion of a Phase 2 rationalisation in the PEP, which hasn't been implemented, but IIRC that is mainly an internal detail and doesn't affect the user visible interface .
PEP 279| accepted | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete. | Subsequently, PEP 279 was accepted into Python 2.3. | obsolete | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete.
PEP 279| accepted | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete. | Subsequently, PEP 279 was accepted into Python 2.3. | _comment | In commenting on PEP 279's enumerate function, this PEP's author offered, I'm quite happy to have it make PEP 281 obsolete.
PEP 282| draft | I would appreciate any comments you might have on this proposal for adding a logging system to the Python Standard Library. | This PEP is still an early draft so please forward your comments just to me directly for now. | comments | I would appreciate any comments you might have on this proposal for adding a logging system to the Python Standard Library.
PEP 282| draft | I would appreciate any comments you might have on this proposal for adding a logging system to the Python Standard Library. | This PEP is still an early draft so please forward your comments just to me directly for now. | _comment | I would appreciate any comments you might have on this proposal for adding a logging system to the Python Standard Library.
PEP 282| draft | I would appreciate any comments you might have on this proposal for adding a logging system to the Python Standard Library. | This PEP is still an early draft so please forward your comments just to me directly for now. | comments | I would appreciate any comments you might have on this proposal for adding a logging system to the Python Standard Library.
PEP 282| draft | I would appreciate any comments you might have on this proposal for adding a logging system to the Python Standard Library. | This PEP is still an early draft so please forward your comments just to me directly for now. | _comment | I would appreciate any comments you might have on this proposal for adding a logging system to the Python Standard Library.
PEP 285| accepted | I'm particularly interested in hearing your opinion about the following three issues | 1 Should this PEP be accepted at all. | interest | I'm particularly interested in hearing your opinion about the following three issues
PEP 285| accepted | I'm particularly interested in hearing your opinion about the following three issues | 1 Should this PEP be accepted at all. | issues | I'm particularly interested in hearing your opinion about the following three issues
PEP 285| accepted | I'm particularly interested in hearing your opinion about the following three issues | 1 Should this PEP be accepted at all. | interest | I'm particularly interested in hearing your opinion about the following three issues
PEP 285| accepted | I'm particularly interested in hearing your opinion about the following three issues | 1 Should this PEP be accepted at all. | issues | I'm particularly interested in hearing your opinion about the following three issues
PEP 285| accepted | I'm particularly interested in hearing your opinion about the following three issues | 1 Should this PEP be accepted at all. | interest | I'm particularly interested in hearing your opinion about the following three issues
PEP 285| accepted | I'm particularly interested in hearing your opinion about the following three issues | 1 Should this PEP be accepted at all. | issues | I'm particularly interested in hearing your opinion about the following three issues
PEP 285| accepted | I'm particularly interested in hearing your opinion about the following three issues | 1 Should this PEP be accepted at all. | interest | I'm particularly interested in hearing your opinion about the following three issues
PEP 285| accepted | I'm particularly interested in hearing your opinion about the following three issues | 1 Should this PEP be accepted at all. | issues | I'm particularly interested in hearing your opinion about the following three issues
PEP 285| accepted | I'm particularly interested in hearing your opinion about the following three issues | 1 Should this PEP be accepted at all. | interest | I'm particularly interested in hearing your opinion about the following three issues
PEP 285| accepted | I'm particularly interested in hearing your opinion about the following three issues | 1 Should this PEP be accepted at all. | issues | I'm particularly interested in hearing your opinion about the following three issues
PEP 285| accepted | I'm particularly interested in hearing your opinion about the following three issues | 1 Should this PEP be accepted at all. | interest | I'm particularly interested in hearing your opinion about the following three issues
PEP 285| accepted | I'm particularly interested in hearing your opinion about the following three issues | 1 Should this PEP be accepted at all. | issues | I'm particularly interested in hearing your opinion about the following three issues
PEP 286| deferred | to deal with these cases, a specialized argument type is proposed. | further exploration of the concepts covered in this pep has been deferred for lack of a current champion interested in promoting the goals of the pep and collecting and incorporating feedback, and with sufficient available time to do so effectively. | _argument | to deal with these cases, a specialized argument type is proposed.
PEP 286| deferred | to deal with these cases, a specialized argument type is proposed. | further exploration of the concepts covered in this pep has been deferred for lack of a current champion interested in promoting the goals of the pep and collecting and incorporating feedback, and with sufficient available time to do so effectively. | _argument | to deal with these cases, a specialized argument type is proposed.
PEP 286| deferred | to deal with these cases, a specialized argument type is proposed. | further exploration of the concepts covered in this pep has been deferred for lack of a current champion interested in promoting the goals of the pep and collecting and incorporating feedback, and with sufficient available time to do so effectively. | _argument | to deal with these cases, a specialized argument type is proposed.
PEP 286| deferred | to deal with these cases, a specialized argument type is proposed. | further exploration of the concepts covered in this pep has been deferred for lack of a current champion interested in promoting the goals of the pep and collecting and incorporating feedback, and with sufficient available time to do so effectively. | _argument | to deal with these cases, a specialized argument type is proposed.
PEP 287| accepted | There's no support for PEP processing yet. | Assuming that this part of the PEP is accepted, | no_support | There's no support for PEP processing yet.
PEP 287| accepted | There's no support for PEP processing yet. | Assuming that this part of the PEP is accepted, | no_support | There's no support for PEP processing yet.
PEP 289| bdfl_pronouncement_accepted | Thanks to everyone for the comments on PEP 289. | Based on the favorable feedback here and on python dev, Guido has accepted the PEP for Py2.4. | comments | Thanks to everyone for the comments on PEP 289.
PEP 289| bdfl_pronouncement_accepted | Thanks to everyone for the comments on PEP 289. | Based on the favorable feedback here and on python dev, Guido has accepted the PEP for Py2.4. | _comment | Thanks to everyone for the comments on PEP 289.
PEP 291| accepted | Guido We had some discussion about this when neal wrote the pep, and I suggested to list modulefinder there. | Neal finally wrote the requirement into the PEP, and it was my impression that you accepted it, although you were not very happy with it. | discussion | Guido We had some discussion about this when neal wrote the pep, and I suggested to list modulefinder there.
PEP 291| accepted | Guido We had some discussion about this when neal wrote the pep, and I suggested to list modulefinder there. | Neal finally wrote the requirement into the PEP, and it was my impression that you accepted it, although you were not very happy with it. | discussion | Guido We had some discussion about this when neal wrote the pep, and I suggested to list modulefinder there.
PEP 291| accepted | Guido We had some discussion about this when neal wrote the pep, and I suggested to list modulefinder there. | Neal finally wrote the requirement into the PEP, and it was my impression that you accepted it, although you were not very happy with it. | discussion | Guido We had some discussion about this when neal wrote the pep, and I suggested to list modulefinder there.
PEP 291| accepted | Guido We had some discussion about this when neal wrote the pep, and I suggested to list modulefinder there. | Neal finally wrote the requirement into the PEP, and it was my impression that you accepted it, although you were not very happy with it. | discussion | Guido We had some discussion about this when neal wrote the pep, and I suggested to list modulefinder there.
PEP 291| accepted | Guido We had some discussion about this when neal wrote the pep, and I suggested to list modulefinder there. | Neal finally wrote the requirement into the PEP, and it was my impression that you accepted it, although you were not very happy with it. | discussion | Guido We had some discussion about this when neal wrote the pep, and I suggested to list modulefinder there.
PEP 291| accepted | Guido We had some discussion about this when neal wrote the pep, and I suggested to list modulefinder there. | Neal finally wrote the requirement into the PEP, and it was my impression that you accepted it, although you were not very happy with it. | discussion | Guido We had some discussion about this when neal wrote the pep, and I suggested to list modulefinder there.
PEP 291| accepted | Guido We had some discussion about this when neal wrote the pep, and I suggested to list modulefinder there. | Neal finally wrote the requirement into the PEP, and it was my impression that you accepted it, although you were not very happy with it. | discussion | Guido We had some discussion about this when neal wrote the pep, and I suggested to list modulefinder there.
PEP 292| accepted | pep 292 simpler string substitutions got a huge amount of discussion this past two weeks. | ignoring the syntax discussions that was decided long ago before the pep was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed. | discussion | pep 292 simpler string substitutions got a huge amount of discussion this past two weeks.
PEP 292| accepted | pep 292 simpler string substitutions got a huge amount of discussion this past two weeks. | ignoring the syntax discussions that was decided long ago before the pep was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed. | discussion | pep 292 simpler string substitutions got a huge amount of discussion this past two weeks.
PEP 292| accepted | pep 292 simpler string substitutions got a huge amount of discussion this past two weeks. | ignoring the syntax discussions that was decided long ago before the pep was accepted and had consensus and thus was a moot point and the discussion of whether a trailing at the end of the substitution pattern should be considered an error or not it is , a couple of topics were discussed. | discussion | pep 292 simpler string substitutions got a huge amount of discussion this past two weeks.
PEP 299| rejected | Revisiting PEP 299 The general consensus recently has been that the if name ' main ' idiom for modules that can be both support modules and main modules is both ugly and unintuitive. | PEP 299 main functions was rejected for the 2 x series due to backward compatibility concerns in particular, with modules that include the line import main . | consensus | Revisiting PEP 299 The general consensus recently has been that the if name ' main ' idiom for modules that can be both support modules and main modules is both ugly and unintuitive.
PEP 299| rejected | Revisiting PEP 299 The general consensus recently has been that the if name ' main ' idiom for modules that can be both support modules and main modules is both ugly and unintuitive. | PEP 299 main functions was rejected for the 2 x series due to backward compatibility concerns in particular, with modules that include the line import main . | consensus | Revisiting PEP 299 The general consensus recently has been that the if name ' main ' idiom for modules that can be both support modules and main modules is both ugly and unintuitive.
PEP 302| wrote_pep | I believe that PEP 302 is more or less up to date there is discussion of a Phase 2 rationalisation in the PEP, which hasn't been implemented, but IIRC that is mainly an internal detail and doesn't affect the user visible interface . | I'll do a quick check of the PEP against reality, but if there are mismatches, I can't offer to fix them Just was the coding wizard, I just wrote some of the blurb . | discussion | I believe that PEP 302 is more or less up to date there is discussion of a Phase 2 rationalisation in the PEP, which hasn't been implemented, but IIRC that is mainly an internal detail and doesn't affect the user visible interface .
PEP 303| rejected | rejection of pep 303 extend divmod for multiple divisors was proposed on the grounds that it has been open for two and half years and hasn't generated discussion or support, is unpersuasive, and unnecessary. | no one spoke up for it and some against , so it is now rejected. | discussion | rejection of pep 303 extend divmod for multiple divisors was proposed on the grounds that it has been open for two and half years and hasn't generated discussion or support, is unpersuasive, and unnecessary.
PEP 303| rejected | rejection of pep 303 extend divmod for multiple divisors was proposed on the grounds that it has been open for two and half years and hasn't generated discussion or support, is unpersuasive, and unnecessary. | no one spoke up for it and some against , so it is now rejected. | discussion | rejection of pep 303 extend divmod for multiple divisors was proposed on the grounds that it has been open for two and half years and hasn't generated discussion or support, is unpersuasive, and unnecessary.
PEP 303| rejected | rejection of pep 303 extend divmod for multiple divisors was proposed on the grounds that it has been open for two and half years and hasn't generated discussion or support, is unpersuasive, and unnecessary. | no one spoke up for it and some against , so it is now rejected. | discussion | rejection of pep 303 extend divmod for multiple divisors was proposed on the grounds that it has been open for two and half years and hasn't generated discussion or support, is unpersuasive, and unnecessary.
PEP 308| accepted | This doesn't strictly equate to number of signatures , which is how these sorts of petitions are often treated in modern politics it's more about strength of argument. | So not only is this system not democratic in the obvious sense of majority rules if you get more votes than , the PEP is approved , it's also almost never even about gathering numerical support which is what this would be able to show . | _argument | This doesn't strictly equate to number of signatures , which is how these sorts of petitions are often treated in modern politics it's more about strength of argument.
PEP 308| accepted | This doesn't strictly equate to number of signatures , which is how these sorts of petitions are often treated in modern politics it's more about strength of argument. | So not only is this system not democratic in the obvious sense of majority rules if you get more votes than , the PEP is approved , it's also almost never even about gathering numerical support which is what this would be able to show . | _argument | This doesn't strictly equate to number of signatures , which is how these sorts of petitions are often treated in modern politics it's more about strength of argument.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | interest | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | interest | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | interest | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | interest | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | interest | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | interest | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| updated | The motivating use case was the prevalance of error prone attempts to achieve the same effect using and and or . 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax. | That issue was resolved by simply deferring to a BDFL best judgment call. | consensus | The motivating use case was the prevalance of error prone attempts to achieve the same effect using and and or . 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax.
PEP 308| updated | The motivating use case was the prevalance of error prone attempts to achieve the same effect using and and or . 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax. | That issue was resolved by simply deferring to a BDFL best judgment call. | consensus | The motivating use case was the prevalance of error prone attempts to achieve the same effect using and and or . 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax.
PEP 308| updated | The motivating use case was the prevalance of error prone attempts to achieve the same effect using and and or . 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax. | That issue was resolved by simply deferring to a BDFL best judgment call. | consensus | The motivating use case was the prevalance of error prone attempts to achieve the same effect using and and or . 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax.
PEP 308| updated | The motivating use case was the prevalance of error prone attempts to achieve the same effect using and and or . 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax. | That issue was resolved by simply deferring to a BDFL best judgment call. | consensus | The motivating use case was the prevalance of error prone attempts to achieve the same effect using and and or . 2 Previous community efforts to add a conditional expression were stymied by a lack of consensus on the best syntax.
PEP 308| updated | On 9 29 2005, Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax. | That issue was resolved by simply deferring to a BDFL best judgment call. | consensus | On 9 29 2005, Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax.
PEP 308| updated | On 9 29 2005, Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax. | That issue was resolved by simply deferring to a BDFL best judgment call. | consensus | On 9 29 2005, Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax.
PEP 308| updated | On 9 29 2005, Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax. | That issue was resolved by simply deferring to a BDFL best judgment call. | consensus | On 9 29 2005, Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax.
PEP 308| updated | On 9 29 2005, Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax. | That issue was resolved by simply deferring to a BDFL best judgment call. | consensus | On 9 29 2005, Guido decided to add conditional expressions in the 21,11 22,12 stymied by a lack of consensus on the best syntax.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | interest | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | interest | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support. | Accordingly, the PEP was rejected due to the lack of an overwhelming majority for change. | majority | While there was an overall interest in having some form of if then else expressions, no one format was able to draw majority support.
PEP 308| rejected | The idea has already been discussed to death. | Read PEP 308 to see what was proposed, discussed, and why the PEP was eventually rejected | _discussed | The idea has already been discussed to death.
PEP 308| rejected | The idea has already been discussed to death. | Read PEP 308 to see what was proposed, discussed, and why the PEP was eventually rejected | _discussed | The idea has already been discussed to death.
PEP 314| accepted | The major version is used to indicate potentially backwards incompatible changes to the format. | This PEP was accepted, and the defined wheel version updated to 1.0, by Nick Coghlan on 16th February, 2013 1 | incompatible_change | The major version is used to indicate potentially backwards incompatible changes to the format.
PEP 315| bdfl_pronouncement_rejected | There are plenty of other arguments against the proposed syntactic structure ambiguity, etc but they've been well argued. | I vote that the BDFL immediately reject this PEP so that we can put this issue to rest once and for all. | _argument | There are plenty of other arguments against the proposed syntactic structure ambiguity, etc but they've been well argued.
PEP 315| bdfl_pronouncement_rejected | There are plenty of other arguments against the proposed syntactic structure ambiguity, etc but they've been well argued. | I vote that the BDFL immediately reject this PEP so that we can put this issue to rest once and for all. | _argument | There are plenty of other arguments against the proposed syntactic structure ambiguity, etc but they've been well argued.
PEP 315| bdfl_pronouncement_rejected | There are plenty of other arguments against the proposed syntactic structure ambiguity, etc but they've been well argued. | I vote that the BDFL immediately reject this PEP so that we can put this issue to rest once and for all. | arguments | There are plenty of other arguments against the proposed syntactic structure ambiguity, etc but they've been well argued.
PEP 315| rejected | Here are my responses to the ideas discussed since I posted PEP 315. | PEP was submitted to be rejected | response | Here are my responses to the ideas discussed since I posted PEP 315.
PEP 315| rejected | Here are my responses to the ideas discussed since I posted PEP 315. | PEP was submitted to be rejected | _discussed | Here are my responses to the ideas discussed since I posted PEP 315.
PEP 318| closed | Py CLEAR to implicitly cast its argument to PyObject 2004 09 01 http python org sf 1020185 closed by rhettinger | Implementation for PEP 318 using syntax J2 2004 08 22 http python org sf 1013835 closed by ms | _argument | Py CLEAR to implicitly cast its argument to PyObject 2004 09 01 http python org sf 1020185 closed by rhettinger
PEP 318| closed | Py CLEAR to implicitly cast its argument to PyObject 2004 09 01 http python org sf 1020185 closed by rhettinger | Implementation for PEP 318 using syntax J2 2004 08 22 http python org sf 1013835 closed by ms | _argument | Py CLEAR to implicitly cast its argument to PyObject 2004 09 01 http python org sf 1020185 closed by rhettinger
PEP 318| closed | Py CLEAR to implicitly cast its argument to PyObject 2004 09 01 http python org sf 1020185 closed by rhettinger | Implementation for PEP 318 using syntax J2 2004 08 22 http python org sf 1013835 closed by ms | _argument | Py CLEAR to implicitly cast its argument to PyObject 2004 09 01 http python org sf 1020185 closed by rhettinger
PEP 318| closed | Py CLEAR to implicitly cast its argument to PyObject 2004 09 01 http python org sf 1020185 closed by rhettinger | Implementation for PEP 318 using syntax J2 2004 08 22 http python org sf 1013835 closed by ms | _argument | Py CLEAR to implicitly cast its argument to PyObject 2004 09 01 http python org sf 1020185 closed by rhettinger
PEP 326| accepted | I'll not attempt to analyze the reasons behind this split in opinion, for various reasons. | I will state that the liklihood of it being accepted, with such strong core developer dislike for the PEP, is likely represented by some low probability that is arbitrarily close to 0, but not 'None', not 'not None', perhaps 'not not None', but not any other such foolishness come on, it's a joke, laugh . | reason | I'll not attempt to analyze the reasons behind this split in opinion, for various reasons.
PEP 326| accepted | I'll not attempt to analyze the reasons behind this split in opinion, for various reasons. | I will state that the liklihood of it being accepted, with such strong core developer dislike for the PEP, is likely represented by some low probability that is arbitrarily close to 0, but not 'None', not 'not None', perhaps 'not not None', but not any other such foolishness come on, it's a joke, laugh . | _reasons | I'll not attempt to analyze the reasons behind this split in opinion, for various reasons.
PEP 336| rejected | rejection of pep 336 make none callable was proposed on the grounds that no support has grown beyond the original poster, and that it fails the tests of obviousness, necessity, clarity, and explicitness. | many people, including guido, agreed, and the pep was rejected. | no_support | rejection of pep 336 make none callable was proposed on the grounds that no support has grown beyond the original poster, and that it fails the tests of obviousness, necessity, clarity, and explicitness.
PEP 336| rejected | rejection of pep 336 make none callable was proposed on the grounds that no support has grown beyond the original poster, and that it fails the tests of obviousness, necessity, clarity, and explicitness. | many people, including guido, agreed, and the pep was rejected. | no_support | rejection of pep 336 make none callable was proposed on the grounds that no support has grown beyond the original poster, and that it fails the tests of obviousness, necessity, clarity, and explicitness.
PEP 336| rejected | rejection of pep 336 make none callable was proposed on the grounds that no support has grown beyond the original poster, and that it fails the tests of obviousness, necessity, clarity, and explicitness. | many people, including guido, agreed, and the pep was rejected. | no_support | rejection of pep 336 make none callable was proposed on the grounds that no support has grown beyond the original poster, and that it fails the tests of obviousness, necessity, clarity, and explicitness.
PEP 336| rejected | rejection of pep 336 make none callable was proposed on the grounds that no support has grown beyond the original poster, and that it fails the tests of obviousness, necessity, clarity, and explicitness. | many people, including guido, agreed, and the pep was rejected. | no_support | rejection of pep 336 make none callable was proposed on the grounds that no support has grown beyond the original poster, and that it fails the tests of obviousness, necessity, clarity, and explicitness.
PEP 336| rejected | Index pep 0336 txt RCS file cvsroot python python nondist peps pep 0336 txt,v retrieving revision 1.1 retrieving revision 1.2 diff u d r1.1 r1.2 pep 0336 txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None. | This PEP is rejected. | _argument | Index pep 0336 txt RCS file cvsroot python python nondist peps pep 0336 txt,v retrieving revision 1.1 retrieving revision 1.2 diff u d r1.1 r1.2 pep 0336 txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None.
PEP 336| rejected | Index pep 0336 txt RCS file cvsroot python python nondist peps pep 0336 txt,v retrieving revision 1.1 retrieving revision 1.2 diff u d r1.1 r1.2 pep 0336 txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None. | This PEP is rejected. | _argument | Index pep 0336 txt RCS file cvsroot python python nondist peps pep 0336 txt,v retrieving revision 1.1 retrieving revision 1.2 diff u d r1.1 r1.2 pep 0336 txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None.
PEP 336| rejected | Index pep 0336 txt RCS file cvsroot python python nondist peps pep 0336 txt,v retrieving revision 1.1 retrieving revision 1.2 diff u d r1.1 r1.2 pep 0336 txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None. | This PEP is rejected. | arguments | Index pep 0336 txt RCS file cvsroot python python nondist peps pep 0336 txt,v retrieving revision 1.1 retrieving revision 1.2 diff u d r1.1 r1.2 pep 0336 txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None.
PEP 336| rejected | Index pep 0336 txt RCS file cvsroot python python nondist peps pep 0336 txt,v retrieving revision 1.1 retrieving revision 1.2 diff u d r1.1 r1.2 pep 0336 txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None. | This PEP is rejected. | _argument | Index pep 0336 txt RCS file cvsroot python python nondist peps pep 0336 txt,v retrieving revision 1.1 retrieving revision 1.2 diff u d r1.1 r1.2 pep 0336 txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None.
PEP 336| rejected | Index pep 0336 txt RCS file cvsroot python python nondist peps pep 0336 txt,v retrieving revision 1.1 retrieving revision 1.2 diff u d r1.1 r1.2 pep 0336 txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None. | This PEP is rejected. | _argument | Index pep 0336 txt RCS file cvsroot python python nondist peps pep 0336 txt,v retrieving revision 1.1 retrieving revision 1.2 diff u d r1.1 r1.2 pep 0336 txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None.
PEP 336| rejected | Index pep 0336 txt RCS file cvsroot python python nondist peps pep 0336 txt,v retrieving revision 1.1 retrieving revision 1.2 diff u d r1.1 r1.2 pep 0336 txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None. | This PEP is rejected. | arguments | Index pep 0336 txt RCS file cvsroot python python nondist peps pep 0336 txt,v retrieving revision 1.1 retrieving revision 1.2 diff u d r1.1 r1.2 pep 0336 txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None.
PEP 336| rejected | Index pep 0336 txt RCS file cvsroot python python nondist peps pep 0336 txt,v retrieving revision 1.1 retrieving revision 1.2 diff u d r1.1 r1.2 pep 0336 txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None. | This PEP is rejected. | _argument | Index pep 0336 txt RCS file cvsroot python python nondist peps pep 0336 txt,v retrieving revision 1.1 retrieving revision 1.2 diff u d r1.1 r1.2 pep 0336 txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None.
PEP 336| rejected | Index pep 0336 txt RCS file cvsroot python python nondist peps pep 0336 txt,v retrieving revision 1.1 retrieving revision 1.2 diff u d r1.1 r1.2 pep 0336 txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None. | This PEP is rejected. | _argument | Index pep 0336 txt RCS file cvsroot python python nondist peps pep 0336 txt,v retrieving revision 1.1 retrieving revision 1.2 diff u d r1.1 r1.2 pep 0336 txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None.
PEP 336| rejected | Index pep 0336 txt RCS file cvsroot python python nondist peps pep 0336 txt,v retrieving revision 1.1 retrieving revision 1.2 diff u d r1.1 r1.2 pep 0336 txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None. | This PEP is rejected. | arguments | Index pep 0336 txt RCS file cvsroot python python nondist peps pep 0336 txt,v retrieving revision 1.1 retrieving revision 1.2 diff u d r1.1 r1.2 pep 0336 txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None.
PEP 336| rejected | Index pep 0336 txt RCS file cvsroot python python nondist peps pep 0336 txt,v retrieving revision 1.1 retrieving revision 1.2 diff u d r1.1 r1.2 pep 0336 txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None. | This PEP is rejected. | _argument | Index pep 0336 txt RCS file cvsroot python python nondist peps pep 0336 txt,v retrieving revision 1.1 retrieving revision 1.2 diff u d r1.1 r1.2 pep 0336 txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None.
PEP 336| rejected | Index pep 0336 txt RCS file cvsroot python python nondist peps pep 0336 txt,v retrieving revision 1.1 retrieving revision 1.2 diff u d r1.1 r1.2 pep 0336 txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None. | This PEP is rejected. | _argument | Index pep 0336 txt RCS file cvsroot python python nondist peps pep 0336 txt,v retrieving revision 1.1 retrieving revision 1.2 diff u d r1.1 r1.2 pep 0336 txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None.
PEP 336| rejected | Index pep 0336 txt RCS file cvsroot python python nondist peps pep 0336 txt,v retrieving revision 1.1 retrieving revision 1.2 diff u d r1.1 r1.2 pep 0336 txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None. | This PEP is rejected. | arguments | Index pep 0336 txt RCS file cvsroot python python nondist peps pep 0336 txt,v retrieving revision 1.1 retrieving revision 1.2 diff u d r1.1 r1.2 pep 0336 txt 17 Jun 2005 17 43 00 0000 1.2 15,6 15,14 None should be a callable object that when called with any arguments has no side effect and returns None.
PEP 336| rejected | rejection of pep 336 make none callable was proposed on the grounds that no support has grown beyond the original poster, and that it fails the tests of obviousness, necessity, clarity, and explicitness. | many people, including guido, agreed, and the pep was rejected. | no_support | rejection of pep 336 make none callable was proposed on the grounds that no support has grown beyond the original poster, and that it fails the tests of obviousness, necessity, clarity, and explicitness.
PEP 336| rejected | rejection of pep 336 make none callable was proposed on the grounds that no support has grown beyond the original poster, and that it fails the tests of obviousness, necessity, clarity, and explicitness. | many people, including guido, agreed, and the pep was rejected. | no_support | rejection of pep 336 make none callable was proposed on the grounds that no support has grown beyond the original poster, and that it fails the tests of obviousness, necessity, clarity, and explicitness.
PEP 338| wrote_pep | I'm actually becoming more and more in favour of reverting run module back to its 2.5 semantics and adding a separate function that does the right thing for the m switch. | It is really starting to look like the useful behaviour for a module namespace based execfile equivalent and the m switch aren't as closely aligned as I thought they were back when I wrote PEP 338. | in_favour | I'm actually becoming more and more in favour of reverting run module back to its 2.5 semantics and adding a separate function that does the right thing for the m switch.
PEP 338| wrote_pep | I'm actually becoming more and more in favour of reverting run module back to its 2.5 semantics and adding a separate function that does the right thing for the m switch. | It is really starting to look like the useful behaviour for a module namespace based execfile equivalent and the m switch aren't as closely aligned as I thought they were back when I wrote PEP 338. | in_favour | I'm actually becoming more and more in favour of reverting run module back to its 2.5 semantics and adding a separate function that does the right thing for the m switch.
PEP 338| wrote_pep | I'm actually becoming more and more in favour of reverting run module back to its 2.5 semantics and adding a separate function that does the right thing for the m switch. | It is really starting to look like the useful behaviour for a module namespace based execfile equivalent and the m switch aren't as closely aligned as I thought they were back when I wrote PEP 338. | right_thing | I'm actually becoming more and more in favour of reverting run module back to its 2.5 semantics and adding a separate function that does the right thing for the m switch.
PEP 342| accepted | additionally, phillip's patch addressed some garbage collection issues, having generators set their gi frame to none when they finish, and modifying gcmodule c to check for tp del methods on instance objects instead of just on heap types so that the close methods of generators would be properly invoked. | the revised pep was accepted by guido at europython. | addressed | additionally, phillip's patch addressed some garbage collection issues, having generators set their gi frame to none when they finish, and modifying gcmodule c to check for tp del methods on instance objects instead of just on heap types so that the close methods of generators would be properly invoked.
PEP 342| accepted | additionally, phillip's patch addressed some garbage collection issues, having generators set their gi frame to none when they finish, and modifying gcmodule c to check for tp del methods on instance objects instead of just on heap types so that the close methods of generators would be properly invoked. | the revised pep was accepted by guido at europython. | issues | additionally, phillip's patch addressed some garbage collection issues, having generators set their gi frame to none when they finish, and modifying gcmodule c to check for tp del methods on instance objects instead of just on heap types so that the close methods of generators would be properly invoked.
PEP 342| bdfl_pronouncement_accepted | additionally, phillip's patch addressed some garbage collection issues, having generators set their gi frame to none when they finish, and modifying gcmodule c to check for tp del methods on instance objects instead of just on heap types so that the close methods of generators would be properly invoked. | the revised pep was accepted by guido at europython. | addressed | additionally, phillip's patch addressed some garbage collection issues, having generators set their gi frame to none when they finish, and modifying gcmodule c to check for tp del methods on instance objects instead of just on heap types so that the close methods of generators would be properly invoked.
PEP 342| bdfl_pronouncement_accepted | additionally, phillip's patch addressed some garbage collection issues, having generators set their gi frame to none when they finish, and modifying gcmodule c to check for tp del methods on instance objects instead of just on heap types so that the close methods of generators would be properly invoked. | the revised pep was accepted by guido at europython. | issues | additionally, phillip's patch addressed some garbage collection issues, having generators set their gi frame to none when they finish, and modifying gcmodule c to check for tp del methods on instance objects instead of just on heap types so that the close methods of generators would be properly invoked.
PEP 342| accepted | additionally, phillip's patch addressed some garbage collection issues, having generators set their gi frame to none when they finish, and modifying gcmodule c to check for tp del methods on instance objects instead of just on heap types so that the close methods of generators would be properly invoked. | the revised pep was accepted by guido at europython. | addressed | additionally, phillip's patch addressed some garbage collection issues, having generators set their gi frame to none when they finish, and modifying gcmodule c to check for tp del methods on instance objects instead of just on heap types so that the close methods of generators would be properly invoked.
PEP 342| accepted | additionally, phillip's patch addressed some garbage collection issues, having generators set their gi frame to none when they finish, and modifying gcmodule c to check for tp del methods on instance objects instead of just on heap types so that the close methods of generators would be properly invoked. | the revised pep was accepted by guido at europython. | issues | additionally, phillip's patch addressed some garbage collection issues, having generators set their gi frame to none when they finish, and modifying gcmodule c to check for tp del methods on instance objects instead of just on heap types so that the close methods of generators would be properly invoked.
PEP 342| bdfl_pronouncement_accepted | additionally, phillip's patch addressed some garbage collection issues, having generators set their gi frame to none when they finish, and modifying gcmodule c to check for tp del methods on instance objects instead of just on heap types so that the close methods of generators would be properly invoked. | the revised pep was accepted by guido at europython. | addressed | additionally, phillip's patch addressed some garbage collection issues, having generators set their gi frame to none when they finish, and modifying gcmodule c to check for tp del methods on instance objects instead of just on heap types so that the close methods of generators would be properly invoked.
PEP 342| bdfl_pronouncement_accepted | additionally, phillip's patch addressed some garbage collection issues, having generators set their gi frame to none when they finish, and modifying gcmodule c to check for tp del methods on instance objects instead of just on heap types so that the close methods of generators would be properly invoked. | the revised pep was accepted by guido at europython. | issues | additionally, phillip's patch addressed some garbage collection issues, having generators set their gi frame to none when they finish, and modifying gcmodule c to check for tp del methods on instance objects instead of just on heap types so that the close methods of generators would be properly invoked.
PEP 343| accepted | These names are clear, they do match, and as Fred says the namespace has lots of room. | Also, the PEP was accepted with these names. | say | These names are clear, they do match, and as Fred says the namespace has lots of room.
PEP 343| wrote_pep | That's like saying we should describe the result of calling a generator function as a generator iterable because it has an iter method. | The longer name made sense when context manager was the term for the object with enter and exit methods the way I originally wrote it when updating the PEP after the addition of the context method . | say | That's like saying we should describe the result of calling a generator function as a generator iterable because it has an iter method.
PEP 343| accepted | It will be refined throughout the Python 2.5 release cycle based on user feedback on the usability of the documentation. | After this PEP was originally approved, a subsequent discussion on python dev 4 settled on the term context manager for objects which provide enter and exit methods, and context management protocol for the protocol itself. | feedback | It will be refined throughout the Python 2.5 release cycle based on user feedback on the usability of the documentation.
PEP 343| accepted | It will be refined throughout the Python 2.5 release cycle based on user feedback on the usability of the documentation. | After this PEP was originally approved, a subsequent discussion on python dev 4 settled on the term context manager for objects which provide enter and exit methods, and context management protocol for the protocol itself. | feedback | It will be refined throughout the Python 2.5 release cycle based on user feedback on the usability of the documentation.
PEP 343| accepted | It will be refined throughout the Python 2.5 release cycle based on user feedback on the usability of the documentation. | After this PEP was originally approved, a subsequent discussion on python dev 4 settled on the term context manager for objects which provide enter and exit methods, and context management protocol for the protocol itself. | feedback | It will be refined throughout the Python 2.5 release cycle based on user feedback on the usability of the documentation.
PEP 345| accepted | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig. | We believe that having PEP 386 and PEP 345 accepted will be a major improvement for the Python packaging eco system. | discussion | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig.
PEP 345| accepted | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig. | We believe that having PEP 386 and PEP 345 accepted will be a major improvement for the Python packaging eco system. | _discussions | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig.
PEP 345| accepted | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig. | We believe that having PEP 386 and PEP 345 accepted will be a major improvement for the Python packaging eco system. | _comment | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig.
PEP 345| accepted | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig. | We believe that having PEP 376 and PEP 345 accepted will be a major improvement for the Python packaging eco system. | discussion | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig.
PEP 345| accepted | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig. | We believe that having PEP 376 and PEP 345 accepted will be a major improvement for the Python packaging eco system. | _discussions | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig.
PEP 345| accepted | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig. | We believe that having PEP 376 and PEP 345 accepted will be a major improvement for the Python packaging eco system. | _comment | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig.
PEP 345| accepted | The major version is used to indicate potentially backwards incompatible changes to the format. | This PEP was accepted, and the defined wheel version updated to 1.0, by Nick Coghlan on 16th February, 2013 1 | incompatible_change | The major version is used to indicate potentially backwards incompatible changes to the format.
PEP 347| wrote_pep | I know that when switching to Subversion was discussed, there was opposition on grounds of subversion still being too young, and indeed, it took more than a year from the start of the discussion until the switch was made. | I do think Subversion was mature since 1.0, which was released in Feb 2004 PEP 347 was written in August 2005 the switchover happened in Oct 2005. | discussion | I know that when switching to Subversion was discussed, there was opposition on grounds of subversion still being too young, and indeed, it took more than a year from the start of the discussion until the switch was made.
PEP 347| wrote_pep | I know that when switching to Subversion was discussed, there was opposition on grounds of subversion still being too young, and indeed, it took more than a year from the start of the discussion until the switch was made. | I do think Subversion was mature since 1.0, which was released in Feb 2004 PEP 347 was written in August 2005 the switchover happened in Oct 2005. | _discussed | I know that when switching to Subversion was discussed, there was opposition on grounds of subversion still being too young, and indeed, it took more than a year from the start of the discussion until the switch was made.
PEP 347| wrote_pep | I know that when switching to Subversion was discussed, there was opposition on grounds of subversion still being too young, and indeed, it took more than a year from the start of the discussion until the switch was made. | I do think Subversion was mature since 1.0, which was released in Feb 2004 PEP 347 was written in August 2005 the switchover happened in Oct 2005. | opposition | I know that when switching to Subversion was discussed, there was opposition on grounds of subversion still being too young, and indeed, it took more than a year from the start of the discussion until the switch was made.
PEP 349| rejected | STINNER Victor victor stinner at haypocalc com added the comment | PEP 349 was rejected because it breaks backward compatibility, eg. it breaks the assomption that str u x converts unicode to byte string. | _comment | STINNER Victor victor stinner at haypocalc com added the comment
PEP 349| rejected | STINNER Victor victor stinner at haypocalc com added the comment | PEP 349 was rejected because it breaks backward compatibility, eg. it breaks the assomption that str u x converts unicode to byte string. | _comment | STINNER Victor victor stinner at haypocalc com added the comment
PEP 362| accepted | I suggest that's a separate discussion please see issue 14626. | I can suggest two ways 1 Attempt to use it and catch NotImplementedError. 2 Check the is implemented flag for that parameter in the function's signature, assuming that detail is accepted as part of PEP 362. | discussion | I suggest that's a separate discussion please see issue 14626.
PEP 365| rejected | After reading all this, I really don't believe that adding egg support to the stdlib at this time is the right thing to do. | I am therefore rejecting the PEP. | right_thing | After reading all this, I really don't believe that adding egg support to the stdlib at this time is the right thing to do.
PEP 365| rejected | After reading all this, I really don't believe that adding egg support to the stdlib at this time is the right thing to do. | I am therefore rejecting the PEP. | right_thing | After reading all this, I really don't believe that adding egg support to the stdlib at this time is the right thing to do.
PEP 366| accepted | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks . | Brett's rejected PEP 3122 and my own accepted PEP 366 were both a direct result of the interpreter lying about the real value of name . | discussion | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks .
PEP 366| accepted | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks . | Brett's rejected PEP 3122 and my own accepted PEP 366 were both a direct result of the interpreter lying about the real value of name . | say | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks .
PEP 366| accepted | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks . | Brett's rejected PEP 3122 and my own accepted PEP 366 were both a direct result of the interpreter lying about the real value of name . | discussion | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks .
PEP 366| accepted | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks . | Brett's rejected PEP 3122 and my own accepted PEP 366 were both a direct result of the interpreter lying about the real value of name . | say | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks .
PEP 369| withdrawn | This PEP is rejected by its author, because it has been superseded by the new importlib. | This PEP is withdrawn by its author, because it has been superseded by the new importlib. | _superseded | This PEP is rejected by its author, because it has been superseded by the new importlib.
PEP 369| withdrawn | This PEP is rejected by its author, because it has been superseded by the new importlib. | This PEP is withdrawn by its author, because it has been superseded by the new importlib. | _superseded | This PEP is rejected by its author, because it has been superseded by the new importlib.
PEP 369| withdrawn | This PEP is rejected by its author, because it has been superseded by the new importlib. | This PEP is withdrawn by its author, because it has been superseded by the new importlib. | _superseded | This PEP is rejected by its author, because it has been superseded by the new importlib.
PEP 369| withdrawn | This PEP is withdrawn by its author, because it has been superseded by the new importlib. | This PEP has been withdrawn by its author, as much of the detailed design is no longer valid following the migration to importlib in Python 3.3. | _superseded | This PEP is withdrawn by its author, because it has been superseded by the new importlib.
PEP 369| withdrawn | This PEP is withdrawn by its author, because it has been superseded by the new importlib. | This PEP has been withdrawn by its author, as much of the detailed design is no longer valid following the migration to importlib in Python 3.3. | _superseded | This PEP is withdrawn by its author, because it has been superseded by the new importlib.
PEP 369| withdrawn | This PEP is withdrawn by its author, because it has been superseded by the new importlib. | This PEP has been withdrawn by its author, as much of the detailed design is no longer valid following the migration to importlib in Python 3.3. | _superseded | This PEP is withdrawn by its author, because it has been superseded by the new importlib.
PEP 369| withdrawn | This PEP is rejected by its author, because it has been superseded by the new importlib. | This PEP has been withdrawn by its author, as much of the detailed design is no longer valid following the migration to importlib in Python 3.3. | _superseded | This PEP is rejected by its author, because it has been superseded by the new importlib.
PEP 369| withdrawn | This PEP is rejected by its author, because it has been superseded by the new importlib. | This PEP has been withdrawn by its author, as much of the detailed design is no longer valid following the migration to importlib in Python 3.3. | _superseded | This PEP is rejected by its author, because it has been superseded by the new importlib.
PEP 370| updated | ?ric Araujo merwok at netwok org added the comment | FYI, I have updated the site module and distutils packaging docs to document the PEP 370 features. | _comment | ?ric Araujo merwok at netwok org added the comment
PEP 370| updated | ?ric Araujo merwok at netwok org added the comment | FYI, I have updated the site module and distutils packaging docs to document the PEP 370 features. | _comment | ?ric Araujo merwok at netwok org added the comment
PEP 376| accepted | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig. | We believe that having PEP 376 and PEP 345 accepted will be a major improvement for the Python packaging eco system. | discussion | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig.
PEP 376| accepted | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig. | We believe that having PEP 376 and PEP 345 accepted will be a major improvement for the Python packaging eco system. | _discussions | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig.
PEP 376| accepted | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig. | We believe that having PEP 376 and PEP 345 accepted will be a major improvement for the Python packaging eco system. | _comment | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig.
PEP 378| updated | Eric Smith eric at trueblade com added the comment | I updated the PEP in r71686. | _comment | Eric Smith eric at trueblade com added the comment
PEP 378| updated | Eric Smith eric at trueblade com added the comment | I updated the PEP in r71686. | _comment | Eric Smith eric at trueblade com added the comment
PEP 379| withdrawn | Agreed, this looks reasonable to me. | These are special cases of PEP 379, Adding an Assignment Expression http www python org dev peps pep 0379 from 2009, which has been withdrawn. | reason | Agreed, this looks reasonable to me.
PEP 380| accepted | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below. | However, none of the discussion changed the BDFL's mind and the PEP's acceptance is now final. | objections | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below.
PEP 380| accepted | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below. | However, none of the discussion changed the BDFL's mind and the PEP's acceptance is now final. | _objection | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below.
PEP 380| accepted | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below. | However, none of the discussion changed the BDFL's mind and the PEP's acceptance is now final. | objections | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below.
PEP 380| accepted | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below. | However, none of the discussion changed the BDFL's mind and the PEP's acceptance is now final. | objections | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below.
PEP 380| accepted | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below. | However, none of the discussion changed the BDFL's mind and the PEP's acceptance is now final. | _objection | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below.
PEP 380| accepted | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below. | However, none of the discussion changed the BDFL's mind and the PEP's acceptance is now final. | objections | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below.
PEP 380| accepted | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below. | However, none of the discussion changed the BDFL's mind and the PEP's acceptance is now final. | objections | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below.
PEP 380| accepted | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below. | However, none of the discussion changed the BDFL's mind and the PEP's acceptance is now final. | _objection | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below.
PEP 380| accepted | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below. | However, none of the discussion changed the BDFL's mind and the PEP's acceptance is now final. | objections | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below.
PEP 382| wrote_pep | I had announced this to import sig already now python dev. | I have now written an implementation of PEP 382, and fixed some details of the PEP in the process. | announce | I had announced this to import sig already now python dev.
PEP 382| rejected | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs. | As of Monday at the PyCon sprints, both PEPs have been rejected see the Rejection Notice at the top of each PEP . | discussion | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs.
PEP 382| rejected | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs. | As of Monday at the PyCon sprints, both PEPs have been rejected see the Rejection Notice at the top of each PEP . | discussion | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs.
PEP 382| rejected | At PyCon 2012, we had a discussion about namespace packages at which PEP 382 and PEP 402 were rejected, to be replaced by this PEP 1 . | PEP 382 and PEP 402 were rejected, to be replaced by this PEP 2 . | discussion | At PyCon 2012, we had a discussion about namespace packages at which PEP 382 and PEP 402 were rejected, to be replaced by this PEP 1 .
PEP 382| rejected | At PyCon 2012, we had a discussion about namespace packages at which PEP 382 and PEP 402 were rejected, to be replaced by this PEP 1 . | PEP 382 and PEP 402 were rejected, to be replaced by this PEP 2 . | discussion | At PyCon 2012, we had a discussion about namespace packages at which PEP 382 and PEP 402 were rejected, to be replaced by this PEP 1 .
PEP 382| rejected | At PyCon 2012, we had a discussion about namespace packages at which PEP 382 and PEP 402 were rejected, to be replaced by this PEP 2 . | PEP 382 and PEP 402 were rejected, to be replaced by this PEP 3 . | discussion | At PyCon 2012, we had a discussion about namespace packages at which PEP 382 and PEP 402 were rejected, to be replaced by this PEP 2 .
PEP 382| rejected | At PyCon 2012, we had a discussion about namespace packages at which PEP 382 and PEP 402 were rejected, to be replaced by this PEP 2 . | PEP 382 and PEP 402 were rejected, to be replaced by this PEP 3 . | discussion | At PyCon 2012, we had a discussion about namespace packages at which PEP 382 and PEP 402 were rejected, to be replaced by this PEP 2 .
PEP 383| accepted | I dimly recalled reading some PEPs which addressed alternate approaches in this way and I thought it was part of the process. | Anyway, congratulations on getting the PEP accepted, good luck with the implementation. | addressed | I dimly recalled reading some PEPs which addressed alternate approaches in this way and I thought it was part of the process.
PEP 386| accepted | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig. | We believe that having PEP 386 and PEP 345 accepted will be a major improvement for the Python packaging eco system. | discussion | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig.
PEP 386| accepted | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig. | We believe that having PEP 386 and PEP 345 accepted will be a major improvement for the Python packaging eco system. | _discussions | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig.
PEP 386| accepted | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig. | We believe that having PEP 386 and PEP 345 accepted will be a major improvement for the Python packaging eco system. | _comment | This enhancement was driven by the discussions about the rating comment system at PyPI on catalog sig.
PEP 389| accepted | R. David Murray rdmurray at bitdance com added the comment | PEP 389 has been accepted. | _comment | R. David Murray rdmurray at bitdance com added the comment
PEP 389| accepted | R. David Murray rdmurray at bitdance com added the comment | PEP 389 has been accepted. | _comment | R. David Murray rdmurray at bitdance com added the comment
PEP 391| updated | Thanks for your helpful comments. | I have checked in some changes to the PEP r76533 which take into account the comments you made. | comments | Thanks for your helpful comments.
PEP 391| updated | Thanks for your helpful comments. | I have checked in some changes to the PEP r76533 which take into account the comments you made. | _comment | Thanks for your helpful comments.
PEP 391| updated | Thanks for your helpful comments. | I have checked in some changes to the PEP r76533 which take into account the comments you made. | comments | Thanks for your helpful comments.
PEP 391| updated | Thanks for your helpful comments. | I have checked in some changes to the PEP r76533 which take into account the comments you made. | _comment | Thanks for your helpful comments.
PEP 393| draft | Martin v. L?wis martin at v loewis de added the comment | A PEP 393 draft implementation is available at https bitbucket org t0rsten pep 393 branch pep 393 if this gets into 3.3, this issue will be outdated there won't be narrow builds of Python anymore nor will there be wide builds . | _comment | Martin v. L?wis martin at v loewis de added the comment
PEP 393| accepted | STINNER Victor victor stinner at haypocalc com added the comment | The PEP 393 has been accepted strings are now stored as PyUCS1 , PyUCS2 or PyUCS4 . | _comment | STINNER Victor victor stinner at haypocalc com added the comment
PEP 393| accepted | STINNER Victor victor stinner at haypocalc com added the comment | The PEP 393 has been accepted strings are now stored as PyUCS1 , PyUCS2 or PyUCS4 . | _comment | STINNER Victor victor stinner at haypocalc com added the comment
PEP 393| accepted | STINNER Victor victor stinner at haypocalc com added the comment | The PEP 393 has been accepted strings are now stored as PyUCS1 , PyUCS2 or PyUCS4 . | _comment | STINNER Victor victor stinner at haypocalc com added the comment
PEP 393| accepted | STINNER Victor victor stinner at haypocalc com added the comment | The PEP 393 has been accepted. | _comment | STINNER Victor victor stinner at haypocalc com added the comment
PEP 393| accepted | STINNER Victor victor stinner at haypocalc com added the comment | The PEP 393 has been accepted. | _comment | STINNER Victor victor stinner at haypocalc com added the comment
PEP 393| accepted | STINNER Victor victor stinner at haypocalc com added the comment | The PEP 393 has been accepted and merge into Python 3.3. | _comment | STINNER Victor victor stinner at haypocalc com added the comment
PEP 393| accepted | STINNER Victor victor stinner at haypocalc com added the comment | The PEP 393 has been accepted and merge into Python 3.3. | _comment | STINNER Victor victor stinner at haypocalc com added the comment
PEP 393| accepted | STINNER Victor victor stinner at haypocalc com added the comment | PEP 393 has been accepted and merged into Python 3.3. | _comment | STINNER Victor victor stinner at haypocalc com added the comment
PEP 393| accepted | STINNER Victor victor stinner at haypocalc com added the comment | PEP 393 has been accepted and merged into Python 3.3. | _comment | STINNER Victor victor stinner at haypocalc com added the comment
PEP 394| updated | Although the issue isn't as large with these programs, there's no reason we can't handle them in the same way. | I updated the PEP. | reason | Although the issue isn't as large with these programs, there's no reason we can't handle them in the same way.
PEP 394| updated | Although the issue isn't as large with these programs, there's no reason we can't handle them in the same way. | I updated the PEP. | reason | Although the issue isn't as large with these programs, there's no reason we can't handle them in the same way.
PEP 394| updated | The relevant comment | Also, I updated the PEP with the clarification that commands like python3 should be hard links because they'll be invoked from code and are more efficient also, hard links are just as flexible as symlinks here , while commands like python should be soft links because this makes it clear to sysadmins that they can be switched , and it's needed for flexibility if python3 changes . | _comment | The relevant comment
PEP 394| updated | The relevant comment | Also, I updated the PEP with the clarification that commands like python3 should be hard links because they'll be invoked from code and are more efficient also, hard links are just as flexible as symlinks here , while commands like python should be soft links because this makes it clear to sysadmins that they can be switched , and it's needed for flexibility if python3 changes . | _comment | The relevant comment
PEP 394| accepted | The main problem is that, again by default, Distutils packaged scripts are installed into the framework bin directory. | This means there is no ambiguity or conflict among the same package script installed in different versions of Python a good thing but it also means the proper way to manage which Python is invoked by python or by python3 and python2 in the future when PEP 394 is approved and implemented is by ensuring the desired primary version's framework bin directory comes first on the shell PATH environment variable. | stalled | The main problem is that, again by default, Distutils packaged scripts are installed into the framework bin directory.
PEP 397| updated | Although the issue isn't as large with these programs, there's no reason we can't handle them in the same way. | I updated the PEP. | reason | Although the issue isn't as large with these programs, there's no reason we can't handle them in the same way.
PEP 397| updated | Although the issue isn't as large with these programs, there's no reason we can't handle them in the same way. | I updated the PEP. | reason | Although the issue isn't as large with these programs, there's no reason we can't handle them in the same way.
PEP 397| updated | Although the issue isn't as large with these programs, there's no reason we can't handle them in the same way. | I updated the PEP. | reason | Although the issue isn't as large with these programs, there's no reason we can't handle them in the same way.
PEP 397| updated | Although the issue isn't as large with these programs, there's no reason we can't handle them in the same way. | I updated the PEP. | reason | Although the issue isn't as large with these programs, there's no reason we can't handle them in the same way.
PEP 397| rejected | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs. | As of Monday at the PyCon sprints, both PEPs have been rejected see the Rejection Notice at the top of each PEP . | discussion | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs.
PEP 397| rejected | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs. | As of Monday at the PyCon sprints, both PEPs have been rejected see the Rejection Notice at the top of each PEP . | discussion | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs.
PEP 402| rejected | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs. | As of Monday at the PyCon sprints, both PEPs have been rejected see the Rejection Notice at the top of each PEP . | discussion | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs.
PEP 402| rejected | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs. | As of Monday at the PyCon sprints, both PEPs have been rejected see the Rejection Notice at the top of each PEP . | discussion | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs.
PEP 402| rejected | At PyCon 2012, we had a discussion about namespace packages at which PEP 382 and PEP 402 were rejected, to be replaced by this PEP 1 . | PEP 382 and PEP 402 were rejected, to be replaced by this PEP 2 . | discussion | At PyCon 2012, we had a discussion about namespace packages at which PEP 382 and PEP 402 were rejected, to be replaced by this PEP 1 .
PEP 402| rejected | At PyCon 2012, we had a discussion about namespace packages at which PEP 382 and PEP 402 were rejected, to be replaced by this PEP 1 . | PEP 382 and PEP 402 were rejected, to be replaced by this PEP 2 . | discussion | At PyCon 2012, we had a discussion about namespace packages at which PEP 382 and PEP 402 were rejected, to be replaced by this PEP 1 .
PEP 402| rejected | At PyCon 2012, we had a discussion about namespace packages at which PEP 382 and PEP 402 were rejected, to be replaced by this PEP 2 . | PEP 382 and PEP 402 were rejected, to be replaced by this PEP 3 . | discussion | At PyCon 2012, we had a discussion about namespace packages at which PEP 382 and PEP 402 were rejected, to be replaced by this PEP 2 .
PEP 402| rejected | At PyCon 2012, we had a discussion about namespace packages at which PEP 382 and PEP 402 were rejected, to be replaced by this PEP 2 . | PEP 382 and PEP 402 were rejected, to be replaced by this PEP 3 . | discussion | At PyCon 2012, we had a discussion about namespace packages at which PEP 382 and PEP 402 were rejected, to be replaced by this PEP 2 .
PEP 404| updated | Note that for OS X we have some of the same issues what with Homebrew and Macports, and Apple, and ... there are a lot of potentially binary incompatible builds of PythonX Y out there. | I don't think the issue really is safely resolved, but at a policy level, I THINK the conclusion on the distutils list was to declare that we only support binary wheels on PyPi for the python org builds. | issues | Note that for OS X we have some of the same issues what with Homebrew and Macports, and Apple, and ... there are a lot of potentially binary incompatible builds of PythonX Y out there.
PEP 404| updated | Note that for OS X we have some of the same issues what with Homebrew and Macports, and Apple, and ... there are a lot of potentially binary incompatible builds of PythonX Y out there. | I don't think the issue really is safely resolved, but at a policy level, I THINK the conclusion on the distutils list was to declare that we only support binary wheels on PyPi for the python org builds. | issues | Note that for OS X we have some of the same issues what with Homebrew and Macports, and Apple, and ... there are a lot of potentially binary incompatible builds of PythonX Y out there.
PEP 409| accepted | I read your objection and disagree. | The PEP is fully approved. | _objection | I read your objection and disagree.
PEP 409| accepted | Ethan Furman ethan at stoneleaf us added the comment | PEP 409 has been accepted. | _comment | Ethan Furman ethan at stoneleaf us added the comment
PEP 409| accepted | Ethan Furman ethan at stoneleaf us added the comment | PEP 409 has been accepted. | _comment | Ethan Furman ethan at stoneleaf us added the comment
PEP 409| accepted | Nick Coghlan ncoghlan at gmail com added the comment | I have accepted the PEP. | _comment | Nick Coghlan ncoghlan at gmail com added the comment
PEP 410| accepted | STINNER Victor victor stinner at gmail com added the comment | TODO the conversion from Decimal to PyTime t does still use a cast to float and so lose precision the PEP must be accepted | _comment | STINNER Victor victor stinner at gmail com added the comment
PEP 410| rejected | STINNER Victor victor stinner at gmail com added the comment | The PEP has been rejected, so I close the issue. | _comment | STINNER Victor victor stinner at gmail com added the comment
PEP 410| rejected | STINNER Victor victor stinner at gmail com added the comment | The PEP has been rejected, so I close the issue. | _comment | STINNER Victor victor stinner at gmail com added the comment
PEP 410| rejected | STINNER Victor victor stinner at gmail com added the comment | The PEP 410 has been rejected, so I close the issue. | _comment | STINNER Victor victor stinner at gmail com added the comment
PEP 410| rejected | STINNER Victor victor stinner at gmail com added the comment | The PEP 410 has been rejected, so I close the issue. | _comment | STINNER Victor victor stinner at gmail com added the comment
PEP 410| rejected | STINNER Victor victor stinner at gmail com added the comment | The PEP 410 was rejected. | _comment | STINNER Victor victor stinner at gmail com added the comment
PEP 410| rejected | STINNER Victor victor stinner at gmail com added the comment | The PEP 410 was rejected. | _comment | STINNER Victor victor stinner at gmail com added the comment
PEP 410| rejected | STINNER Victor victor stinner at gmail com added the comment | A tuple is not the preferred type for a timestamp Python uses float and is not going to use something different the PEP 410 was just rejected . | _comment | STINNER Victor victor stinner at gmail com added the comment
PEP 410| rejected | STINNER Victor victor stinner at gmail com added the comment | A tuple is not the preferred type for a timestamp Python uses float and is not going to use something different the PEP 410 was just rejected . | _comment | STINNER Victor victor stinner at gmail com added the comment
PEP 410| rejected | R. David Murray rdmurray at bitdance com added the comment | Victor proposed deprecating it as part of PEP 410 see issue 13882 , but the PEP was rejected for other reasons. | _comment | R. David Murray rdmurray at bitdance com added the comment
PEP 410| rejected | R. David Murray rdmurray at bitdance com added the comment | Victor proposed deprecating it as part of PEP 410 see issue 13882 , but the PEP was rejected for other reasons. | _comment | R. David Murray rdmurray at bitdance com added the comment
PEP 410| idea_rejected | STINNER Victor added the comment | This idea was rejected see the PEP 410 | _comment | STINNER Victor added the comment
PEP 411| rejected | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs. | As of Monday at the PyCon sprints, both PEPs have been rejected see the Rejection Notice at the top of each PEP . | discussion | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs.
PEP 411| rejected | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs. | As of Monday at the PyCon sprints, both PEPs have been rejected see the Rejection Notice at the top of each PEP . | discussion | After some discussion, the decision was ultimately deferred with what appeared to be a want for parts of both PEPs.
PEP 414| bdfl_pronouncement_accepted | I also plan to add a link to Lennart's guide to the various porting strategies that are currently available, more clearly articulate the cases where the new approach can most help i e. when there are project specific reasons to avoid the unicode literals import , as well as name drop Pyramid Chris McDonough , Flask Armin , Django Jacob Kaplan Moss and requests Kenneth Reitz as cases where key developers of web related third party frameworks or libraries have indicated that PEP 414 will help greatly with bringing the sections of the Python ecosystem they're involved with into the Python 3 fold over the next few years. | My aim is for the end result to better reflect the reasons why Guido accepted the PEP, moreso than Armin's own reasons for wanting it. | reason | I also plan to add a link to Lennart's guide to the various porting strategies that are currently available, more clearly articulate the cases where the new approach can most help i e. when there are project specific reasons to avoid the unicode literals import , as well as name drop Pyramid Chris McDonough , Flask Armin , Django Jacob Kaplan Moss and requests Kenneth Reitz as cases where key developers of web related third party frameworks or libraries have indicated that PEP 414 will help greatly with bringing the sections of the Python ecosystem they're involved with into the Python 3 fold over the next few years.
PEP 414| bdfl_pronouncement_accepted | I also plan to add a link to Lennart's guide to the various porting strategies that are currently available, more clearly articulate the cases where the new approach can most help i e. when there are project specific reasons to avoid the unicode literals import , as well as name drop Pyramid Chris McDonough , Flask Armin , Django Jacob Kaplan Moss and requests Kenneth Reitz as cases where key developers of web related third party frameworks or libraries have indicated that PEP 414 will help greatly with bringing the sections of the Python ecosystem they're involved with into the Python 3 fold over the next few years. | My aim is for the end result to better reflect the reasons why Guido accepted the PEP, moreso than Armin's own reasons for wanting it. | _reasons | I also plan to add a link to Lennart's guide to the various porting strategies that are currently available, more clearly articulate the cases where the new approach can most help i e. when there are project specific reasons to avoid the unicode literals import , as well as name drop Pyramid Chris McDonough , Flask Armin , Django Jacob Kaplan Moss and requests Kenneth Reitz as cases where key developers of web related third party frameworks or libraries have indicated that PEP 414 will help greatly with bringing the sections of the Python ecosystem they're involved with into the Python 3 fold over the next few years.
PEP 415| replaced | The implementation of PEP 492 async await , for example, underwent some fundamental changes during the beta process, as developers' feedback showed that some of the design decisions we made in the original version were quite problematic. | The original exception suppression mechanism in PEP 409 which made clever but idiosyncratic use of Ellipsis , was replaced with the simpler mechanism in PEP 415 which instead uses a more conventional setter with side effects on other attributes approach . | feedback | The implementation of PEP 492 async await , for example, underwent some fundamental changes during the beta process, as developers' feedback showed that some of the design decisions we made in the original version were quite problematic.
PEP 416| rejected | STINNER Victor victor stinner at gmail com added the comment | The PEP has been rejected. | _comment | STINNER Victor victor stinner at gmail com added the comment
PEP 416| rejected | STINNER Victor victor stinner at gmail com added the comment | The PEP has been rejected. | _comment | STINNER Victor victor stinner at gmail com added the comment
PEP 418| draft | I started to write the PEP 418 to clarify the notions of monotonic and steady clocks. | The PEP is a draft and everyone is invited to contribute! | _steady | I started to write the PEP 418 to clarify the notions of monotonic and steady clocks.
PEP 418| bdfl_pronouncement_accepted | STINNER Victor victor stinner at gmail com added the comment | Guido van Rossum accepted the PEP, let's commit the implementation. | _comment | STINNER Victor victor stinner at gmail com added the comment
PEP 418| accepted | STINNER Victor victor stinner at gmail com added the comment | The PEP 418 has been accepted read it to understand why time clock is now deprecated. | _comment | STINNER Victor victor stinner at gmail com added the comment
PEP 418| accepted | STINNER Victor victor stinner at gmail com added the comment | The PEP 418 has been accepted read it to understand why time clock is now deprecated. | _comment | STINNER Victor victor stinner at gmail com added the comment
PEP 418| accepted | STINNER Victor victor stinner at gmail com added the comment | The PEP 418 has been accepted read it to understand why time clock is now deprecated. | _comment | STINNER Victor victor stinner at gmail com added the comment
PEP 419| deferred | Mark Lawrence added the comment | FTR PEP 419 has been deferred as there's no champion. | _comment | Mark Lawrence added the comment
PEP 421| withdrawn | This PEP is rejected by its author, because it has been superseded by the new importlib. | This PEP has been withdrawn by its author, as much of the detailed design is no longer valid following the migration to importlib in Python 3.3. | _superseded | This PEP is rejected by its author, because it has been superseded by the new importlib.
PEP 423| deferred | diff git a pep 0423 txt b pep 0423 txt b pep 0423 txt 4,7 4,7 last modified date author benoit bryon benoit at marmelune net discussions to distutils sig at python org status draft status deferred type informational content type text x rst created 24 may 2012 28,6 28,11 specific recipes for existing projects how to apply naming guidelines on existing projects . | further consideration of this pep has been deferred at least until after | discussion | diff git a pep 0423 txt b pep 0423 txt b pep 0423 txt 4,7 4,7 last modified date author benoit bryon benoit at marmelune net discussions to distutils sig at python org status draft status deferred type informational content type text x rst created 24 may 2012 28,6 28,11 specific recipes for existing projects how to apply naming guidelines on existing projects .
PEP 423| deferred | diff git a pep 0423 txt b pep 0423 txt b pep 0423 txt 4,7 4,7 last modified date author benoit bryon benoit at marmelune net discussions to distutils sig at python org status draft status deferred type informational content type text x rst created 24 may 2012 28,6 28,11 specific recipes for existing projects how to apply naming guidelines on existing projects . | further consideration of this pep has been deferred at least until after | _discussions | diff git a pep 0423 txt b pep 0423 txt b pep 0423 txt 4,7 4,7 last modified date author benoit bryon benoit at marmelune net discussions to distutils sig at python org status draft status deferred type informational content type text x rst created 24 may 2012 28,6 28,11 specific recipes for existing projects how to apply naming guidelines on existing projects .
PEP 423| deferred | pep 0423 txt 7 pankajdiff git a pep 0423 txt b pep 0423 txt b pep 0423 txt 4,7 4,7 last modified date author benoit bryon benoit at marmelune net discussions to distutils sig at python org status draft status deferred type informational content type text x rst created 24 may 2012 28,6 28,11 specific recipes for existing projects how to apply naming guidelines on existing projects . | further consideration of this pep has been deferred at least until after | discussion | pep 0423 txt 7 pankajdiff git a pep 0423 txt b pep 0423 txt b pep 0423 txt 4,7 4,7 last modified date author benoit bryon benoit at marmelune net discussions to distutils sig at python org status draft status deferred type informational content type text x rst created 24 may 2012 28,6 28,11 specific recipes for existing projects how to apply naming guidelines on existing projects .
PEP 423| deferred | pep 0423 txt 7 pankajdiff git a pep 0423 txt b pep 0423 txt b pep 0423 txt 4,7 4,7 last modified date author benoit bryon benoit at marmelune net discussions to distutils sig at python org status draft status deferred type informational content type text x rst created 24 may 2012 28,6 28,11 specific recipes for existing projects how to apply naming guidelines on existing projects . | further consideration of this pep has been deferred at least until after | _discussions | pep 0423 txt 7 pankajdiff git a pep 0423 txt b pep 0423 txt b pep 0423 txt 4,7 4,7 last modified date author benoit bryon benoit at marmelune net discussions to distutils sig at python org status draft status deferred type informational content type text x rst created 24 may 2012 28,6 28,11 specific recipes for existing projects how to apply naming guidelines on existing projects .
PEP 426| accepted | I see no reason to not reuse existing core code, but equally I don't particularly intend myself to add metadata 1.3 support to distutils. | I would hope that when PEP 426 is accepted, distutils will be updated to allow writing of Metadata 1.3 format. | reason | I see no reason to not reuse existing core code, but equally I don't particularly intend myself to add metadata 1.3 support to distutils.
PEP 426| accepted | I see no reason to not reuse existing core code, but equally I don't particularly intend myself to add metadata 1.3 support to distutils. | I would hope that when PEP 426 is accepted, distutils will be updated to allow writing of Metadata 1.3 format. | reason | I see no reason to not reuse existing core code, but equally I don't particularly intend myself to add metadata 1.3 support to distutils.
PEP 427| accepted | The major version is used to indicate potentially backwards incompatible changes to the format. | This PEP was accepted, and the defined wheel version updated to 1.0, by Nick Coghlan on 16th February, 2013 1 | incompatible_change | The major version is used to indicate potentially backwards incompatible changes to the format.
PEP 427| accepted | The major version is used to indicate potentially backwards incompatible changes to the format. | This PEP was accepted, and the defined wheel version updated to 1.0, by Nick Coghlan on 16th February, 2013 1 | incompatible_change | The major version is used to indicate potentially backwards incompatible changes to the format.
PEP 427| accepted | The major version is used to indicate potentially backwards incompatible changes to the format. | This PEP was accepted, and the defined wheel version updated to 1.0, by Nick Coghlan on 16th February, 2013 1 | incompatible_change | The major version is used to indicate potentially backwards incompatible changes to the format.
PEP 429| accepted | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification . | Reliability considerations 408,44 413,49 If this PEP is accepted, the proposed time frame for integration of pip into the CPython release is as follows | reviewing | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification .
PEP 429| accepted | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification . | Reliability considerations 408,44 413,49 If this PEP is accepted, the proposed time frame for integration of pip into the CPython release is as follows | issues | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification .
PEP 429| accepted | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification . | Reliability considerations 408,44 413,49 If this PEP is accepted, the proposed time frame for integration of pip into the CPython release is as follows | reviewing | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification .
PEP 429| accepted | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification . | Reliability considerations 408,44 413,49 If this PEP is accepted, the proposed time frame for integration of pip into the CPython release is as follows | issues | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification .
PEP 431| withdrawn | Berker Peksag added the comment | Closing this since the PEP has been withdrawn. | _comment | Berker Peksag added the comment
PEP 433| rejected | STINNER Victor added the comment | The PEP 433 was rejected, replaced with the PEP 446. | _comment | STINNER Victor added the comment
PEP 433| rejected | STINNER Victor added the comment | The PEP 433 was rejected, replaced with the PEP 446. | _comment | STINNER Victor added the comment
PEP 434| updated | Terry J. Reedy added the comment | Benjamim, I made idlever update from sys version until removed, so remove it from release process. | _comment | Terry J. Reedy added the comment
PEP 434| updated | Terry J. Reedy added the comment | Benjamim, I made idlever update from sys version until removed, so remove it from release process. | _comment | Terry J. Reedy added the comment
PEP 435| accepted | I have reviewed the latest version of PEP 435 and I see that it is very good. | I hereby declare PEP 435 as Accepted. | reviewed | I have reviewed the latest version of PEP 435 and I see that it is very good.
PEP 435| accepted | I have reviewed the latest version of PEP 435 and I see that it is very good. | I hereby declare PEP 435 as Accepted. | _reviewed | I have reviewed the latest version of PEP 435 and I see that it is very good.
PEP 435| accepted | I have reviewed the latest version of PEP 435 and I see that it is very good. | I hereby declare PEP 435 as Accepted. | reviewed | I have reviewed the latest version of PEP 435 and I see that it is very good.
PEP 435| accepted | I have reviewed the latest version of PEP 435 and I see that it is very good. | I hereby declare PEP 435 as Accepted. | _reviewed | I have reviewed the latest version of PEP 435 and I see that it is very good.
PEP 438| accepted | Thanks everyone who's been involved in the formulation and discussion of PEP 438 Transitioning to release file hosting on PyPI . | I have today accepted the PEP and the first phase of implementation is now underway, spearheaded by Donald Stufft. | discussion | Thanks everyone who's been involved in the formulation and discussion of PEP 438 Transitioning to release file hosting on PyPI .
PEP 440| updated | If that long term approach sounds reasonable to folks, we should probably promote packaging from Donald's personal repo, include it in the PyPA project list and tweak the description of distlib accordingly. | just down to my current workload I'm busy with consultancy work Note that I have recently updated distlib to reflect changes in PEP 440, though this functionality has not been officially released it's available in the public repos, though . | reason | If that long term approach sounds reasonable to folks, we should probably promote packaging from Donald's personal repo, include it in the PyPA project list and tweak the description of distlib accordingly.
PEP 440| updated | If that long term approach sounds reasonable to folks, we should probably promote packaging from Donald's personal repo, include it in the PyPA project list and tweak the description of distlib accordingly. | just down to my current workload I'm busy with consultancy work Note that I have recently updated distlib to reflect changes in PEP 440, though this functionality has not been officially released it's available in the public repos, though . | reason | If that long term approach sounds reasonable to folks, we should probably promote packaging from Donald's personal repo, include it in the PyPA project list and tweak the description of distlib accordingly.
PEP 444| deferred | diff git a pep 0444 txt b pep 0444 txt b pep 0444 txt 5,7 5,7 author chris mcdonough chrism at plope com , armin ronacher armin ronacher at active 4 com discussions to python web sig web sig at python org status draft status deferred type informational content type text x rst created 19 jul 2010 18,6 18,18 interface between web servers and python web applications or frameworks. | further exploration of the concepts covered in this pep has been deferred for lack of a current champion interested in promoting the goals of the pep and collecting and incorporating feedback, and with sufficient available time to do so effectively. | discussion | diff git a pep 0444 txt b pep 0444 txt b pep 0444 txt 5,7 5,7 author chris mcdonough chrism at plope com , armin ronacher armin ronacher at active 4 com discussions to python web sig web sig at python org status draft status deferred type informational content type text x rst created 19 jul 2010 18,6 18,18 interface between web servers and python web applications or frameworks.
PEP 444| deferred | diff git a pep 0444 txt b pep 0444 txt b pep 0444 txt 5,7 5,7 author chris mcdonough chrism at plope com , armin ronacher armin ronacher at active 4 com discussions to python web sig web sig at python org status draft status deferred type informational content type text x rst created 19 jul 2010 18,6 18,18 interface between web servers and python web applications or frameworks. | further exploration of the concepts covered in this pep has been deferred for lack of a current champion interested in promoting the goals of the pep and collecting and incorporating feedback, and with sufficient available time to do so effectively. | _discussions | diff git a pep 0444 txt b pep 0444 txt b pep 0444 txt 5,7 5,7 author chris mcdonough chrism at plope com , armin ronacher armin ronacher at active 4 com discussions to python web sig web sig at python org status draft status deferred type informational content type text x rst created 19 jul 2010 18,6 18,18 interface between web servers and python web applications or frameworks.
PEP 444| deferred | pep 0444 txt 14 pankajdiff git a pep 0444 txt b pep 0444 txt b pep 0444 txt 5,7 5,7 author chris mcdonough chrism at plope com , armin ronacher armin ronacher at active 4 com discussions to python web sig web sig at python org status draft status deferred type informational content type text x rst created 19 jul 2010 18,6 18,18 interface between web servers and python web applications or frameworks. | further exploration of the concepts covered in this pep has been deferred for lack of a current champion interested in promoting the goals of the pep and collecting and incorporating feedback, and with sufficient available time to do so effectively. | discussion | pep 0444 txt 14 pankajdiff git a pep 0444 txt b pep 0444 txt b pep 0444 txt 5,7 5,7 author chris mcdonough chrism at plope com , armin ronacher armin ronacher at active 4 com discussions to python web sig web sig at python org status draft status deferred type informational content type text x rst created 19 jul 2010 18,6 18,18 interface between web servers and python web applications or frameworks.
PEP 444| deferred | pep 0444 txt 14 pankajdiff git a pep 0444 txt b pep 0444 txt b pep 0444 txt 5,7 5,7 author chris mcdonough chrism at plope com , armin ronacher armin ronacher at active 4 com discussions to python web sig web sig at python org status draft status deferred type informational content type text x rst created 19 jul 2010 18,6 18,18 interface between web servers and python web applications or frameworks. | further exploration of the concepts covered in this pep has been deferred for lack of a current champion interested in promoting the goals of the pep and collecting and incorporating feedback, and with sufficient available time to do so effectively. | _discussions | pep 0444 txt 14 pankajdiff git a pep 0444 txt b pep 0444 txt b pep 0444 txt 5,7 5,7 author chris mcdonough chrism at plope com , armin ronacher armin ronacher at active 4 com discussions to python web sig web sig at python org status draft status deferred type informational content type text x rst created 19 jul 2010 18,6 18,18 interface between web servers and python web applications or frameworks.
PEP 446| rejected | STINNER Victor added the comment | The PEP 433 was rejected, replaced with the PEP 446. | _comment | STINNER Victor added the comment
PEP 446| rejected | STINNER Victor added the comment | The PEP 433 was rejected, replaced with the PEP 446. | _comment | STINNER Victor added the comment
PEP 446| wrote_pep | STINNER Victor added the comment | Yes, and that's why I wrote the whole PEP 446 But we are not going to backport the PEP. | _comment | STINNER Victor added the comment
PEP 451| accepted | As an example that hopefully helps illustrate the two different cases, the shift to enabling proper SSL TLS verification by default would qualify as a worthy use of programmatic deprecation since the current insecure by default behaviour is a genuine bug magnet that leads to security flaws , but I'm not yet convinced that we actually gain any significant benefit from deprecating the legacy import plugin APIs. | While PEP 451 nominally approved deprecating the latter, on the basis that deprecating them will make importlib easier to maintain, they received a stay of execution in 3.4 because the extension module import system currently still needs them, and there are other valid use cases that PEP 451 doesn't currently cover, At this point, I have come to believe that retaining the existing strictly more powerful but also harder to use correctly plugin API is a better way to handle those more complex use cases rather than inventing something new on top of PEP 451, as the latter approach would make things harder to maintain due to increased complexity and needing to manage the deprecation process , and provide a worse experience for users implementing custom import hooks that need to support multiple versions due to the introduction of new cross version compatibility issues . | bug_magnet | As an example that hopefully helps illustrate the two different cases, the shift to enabling proper SSL TLS verification by default would qualify as a worthy use of programmatic deprecation since the current insecure by default behaviour is a genuine bug magnet that leads to security flaws , but I'm not yet convinced that we actually gain any significant benefit from deprecating the legacy import plugin APIs.
PEP 451| wrote_pep | Nick Coghlan added the comment | Turns out I had written up a recap of the PEP 451 C extension support status back in July, so I just resent that to import sig. | _comment | Nick Coghlan added the comment
PEP 453| accepted | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed. | Personally, I'm going to focus on the implied virtualenv change, on the assumption taht PEP 453 is accepted with the Scripts bin change included which is not to say that I won't read that thread, just that I don't personally have any means to change the PEP itself . | addressed | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed.
PEP 453| accepted | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed. | Personally, I'm going to focus on the implied virtualenv change, on the assumption taht PEP 453 is accepted with the Scripts bin change included which is not to say that I won't read that thread, just that I don't personally have any means to change the PEP itself . | issues | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed.
PEP 453| accepted | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed. | Personally, I'm going to focus on the implied virtualenv change, on the assumption taht PEP 453 is accepted with the Scripts bin change included which is not to say that I won't read that thread, just that I don't personally have any means to change the PEP itself . | addressed | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed.
PEP 453| accepted | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed. | Personally, I'm going to focus on the implied virtualenv change, on the assumption taht PEP 453 is accepted with the Scripts bin change included which is not to say that I won't read that thread, just that I don't personally have any means to change the PEP itself . | issues | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed.
PEP 453| accepted | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed. | Personally, I'm going to focus on the implied virtualenv change, on the assumption taht PEP 453 is accepted with the Scripts bin change included which is not to say that I won't read that thread, just that I don't personally have any means to change the PEP itself . | addressed | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed.
PEP 453| accepted | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed. | Personally, I'm going to focus on the implied virtualenv change, on the assumption taht PEP 453 is accepted with the Scripts bin change included which is not to say that I won't read that thread, just that I don't personally have any means to change the PEP itself . | issues | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed.
PEP 453| accepted | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed. | Personally, I'm going to focus on the implied virtualenv change, on the assumption taht PEP 453 is accepted with the Scripts bin change included which is not to say that I won't read that thread, just that I don't personally have any means to change the PEP itself . | addressed | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed.
PEP 453| accepted | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed. | Personally, I'm going to focus on the implied virtualenv change, on the assumption taht PEP 453 is accepted with the Scripts bin change included which is not to say that I won't read that thread, just that I don't personally have any means to change the PEP itself . | issues | As the PEP 453 bundling PIP proposal was originally made by Nick, maybe he would like to check that any issues covered there are addressed.
PEP 453| accepted | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification . | Reliability considerations 408,44 413,49 If this PEP is accepted, the proposed time frame for integration of pip into the CPython release is as follows | reviewing | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification .
PEP 453| accepted | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification . | Reliability considerations 408,44 413,49 If this PEP is accepted, the proposed time frame for integration of pip into the CPython release is as follows | issues | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification .
PEP 453| accepted | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification . | Reliability considerations 408,44 413,49 If this PEP is accepted, the proposed time frame for integration of pip into the CPython release is as follows | reviewing | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification .
PEP 453| accepted | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification . | Reliability considerations 408,44 413,49 If this PEP is accepted, the proposed time frame for integration of pip into the CPython release is as follows | issues | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification .
PEP 453| accepted | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification . | Reliability considerations 408,44 413,49 If this PEP is accepted, the proposed time frame for integration of pip into the CPython release is as follows | reviewing | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification .
PEP 453| accepted | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification . | Reliability considerations 408,44 413,49 If this PEP is accepted, the proposed time frame for integration of pip into the CPython release is as follows | issues | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification .
PEP 453| accepted | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification . | Reliability considerations 408,44 413,49 If this PEP is accepted, the proposed time frame for integration of pip into the CPython release is as follows | reviewing | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification .
PEP 453| accepted | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification . | Reliability considerations 408,44 413,49 If this PEP is accepted, the proposed time frame for integration of pip into the CPython release is as follows | issues | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification .
PEP 453| accepted | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification . | Reliability considerations 408,44 413,49 If this PEP is accepted, the proposed time frame for integration of pip into the CPython release is as follows | reviewing | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification .
PEP 453| accepted | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification . | Reliability considerations 408,44 413,49 If this PEP is accepted, the proposed time frame for integration of pip into the CPython release is as follows | issues | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification .
PEP 453| accepted | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification . | Reliability considerations 408,44 413,49 If this PEP is accepted, the proposed time frame for integration of pip into the CPython release is as follows | reviewing | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification .
PEP 453| accepted | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification . | Reliability considerations 408,44 413,49 If this PEP is accepted, the proposed time frame for integration of pip into the CPython release is as follows | issues | However, the core CPython team will also assist with reviewing and resolving the certificate update management issue https github com kennethreitz requests issues 1659 currently affecting the requests project and hence pip cert verification .
PEP 453| draft | Donald Stufft added the comment | Attached is an initial rough draft of the ensurepip module. | _comment | Donald Stufft added the comment
PEP 456| accepted | Christian has indicated he now considers PEP 456, which adds an updated and configurable hash algorithm ready for pronouncement http www python org dev peps pep 0456 | I am happy the PEP and the associated implementation represent a desirable improvement to CPython, and approve of the proposal to experiment further with the small string optimisation during the beta period, before either enabling it or removing it entirely in beta 2. | pronounce | Christian has indicated he now considers PEP 456, which adds an updated and configurable hash algorithm ready for pronouncement http www python org dev peps pep 0456
PEP 456| accepted | Christian has indicated he now considers PEP 456, which adds an updated and configurable hash algorithm ready for pronouncement http www python org dev peps pep 0456 | I am happy the PEP and the associated implementation represent a desirable improvement to CPython, and approve of the proposal to experiment further with the small string optimisation during the beta period, before either enabling it or removing it entirely in beta 2. | _pronouncement | Christian has indicated he now considers PEP 456, which adds an updated and configurable hash algorithm ready for pronouncement http www python org dev peps pep 0456
PEP 459| draft | That's the timeline for the formal definition, in practice drop pydist json in the existing directory as PEP 426 suggests is a fairly safe bet as to what those specs are going to say. | The don't rely on it unless the container version says it's OK to do so caution in the PEP is primarily because wheels already ship with pydist json metadata emitted based on an earlier draft version of the spec from before I gutted it and moved the optional sections out to PEP 459 as standard extension modules, which is also the change that did the most damage when it came to invalidating the current jsonschema definition . | say | That's the timeline for the formal definition, in practice drop pydist json in the existing directory as PEP 426 suggests is a fairly safe bet as to what those specs are going to say.
PEP 461| accepted | A PEP is under discussion to add interpolation back to the bytes type in Python 3.5. | Assuming the PEP is accepted, what will be added back is | discussion | A PEP is under discussion to add interpolation back to the bytes type in Python 3.5.
PEP 461| accepted | A PEP is under discussion to add interpolation back to the bytes type in Python 3.5. | Assuming the PEP is accepted, what will be added back is | discussion | A PEP is under discussion to add interpolation back to the bytes type in Python 3.5.
PEP 461| accepted | Ethan Furman added the comment | PEP 461 has been accepted. | _comment | Ethan Furman added the comment
PEP 461| accepted | Ethan Furman added the comment | PEP 461 has been accepted. | _comment | Ethan Furman added the comment
PEP 465| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 465| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 465| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 465| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 470| accepted | IMO all responses from Brett, Donald, Nathaniel and ?ukasz were reasonable and I haven't accused them of conspiring in the slightest. | I see that the PEP was accepted by Paul Moore. | response | IMO all responses from Brett, Donald, Nathaniel and ?ukasz were reasonable and I haven't accused them of conspiring in the slightest.
PEP 470| accepted | IMO all responses from Brett, Donald, Nathaniel and ?ukasz were reasonable and I haven't accused them of conspiring in the slightest. | I see that the PEP was accepted by Paul Moore. | reason | IMO all responses from Brett, Donald, Nathaniel and ?ukasz were reasonable and I haven't accused them of conspiring in the slightest.
PEP 471| accepted | Ben Hoyt added the comment | Yes, PEP 471 has been accepted, and I've got a mostly finished C implementation of os scandir for CPython 3.5, as well as tests and docs. | _comment | Ben Hoyt added the comment
PEP 471| accepted | Ben Hoyt added the comment | Yes, PEP 471 has been accepted, and I've got a mostly finished C implementation of os scandir for CPython 3.5, as well as tests and docs. | _comment | Ben Hoyt added the comment
PEP 475| accepted | STINNER Victor added the comment | Something else occurred since 5 years the PEP 475 was accepted, it makes Python more reliable when it receives signals. | _comment | STINNER Victor added the comment
PEP 475| updated | STINNER Victor added the comment | I updated the list of modified functions in the PEP 475. | _comment | STINNER Victor added the comment
PEP 475| updated | STINNER Victor added the comment | I updated the list of modified functions in the PEP 475. | _comment | STINNER Victor added the comment
PEP 476| accepted | True, but this is a repeat of the PEP 476 discussion. | Something has changed in the meantime PEP 476 was accepted and its code has shipped in an official release. | discussion | True, but this is a repeat of the PEP 476 discussion.
PEP 483| accepted | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below. | However, none of the discussion changed the BDFL's mind and the PEP's acceptance is now final. | objections | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below.
PEP 483| accepted | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below. | However, none of the discussion changed the BDFL's mind and the PEP's acceptance is now final. | _objection | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below.
PEP 483| accepted | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below. | However, none of the discussion changed the BDFL's mind and the PEP's acceptance is now final. | objections | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below.
PEP 483| accepted | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below. | However, none of the discussion changed the BDFL's mind and the PEP's acceptance is now final. | objections | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below.
PEP 483| accepted | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below. | However, none of the discussion changed the BDFL's mind and the PEP's acceptance is now final. | _objection | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below.
PEP 483| accepted | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below. | However, none of the discussion changed the BDFL's mind and the PEP's acceptance is now final. | objections | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below.
PEP 483| accepted | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below. | However, none of the discussion changed the BDFL's mind and the PEP's acceptance is now final. | objections | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below.
PEP 483| accepted | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below. | However, none of the discussion changed the BDFL's mind and the PEP's acceptance is now final. | _objection | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below.
PEP 483| accepted | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below. | However, none of the discussion changed the BDFL's mind and the PEP's acceptance is now final. | objections | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below.
PEP 483| accepted | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below. | However, none of the discussion changed the BDFL's mind and the PEP's acceptance is now final. | objections | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below.
PEP 483| accepted | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below. | However, none of the discussion changed the BDFL's mind and the PEP's acceptance is now final. | _objection | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below.
PEP 483| accepted | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below. | However, none of the discussion changed the BDFL's mind and the PEP's acceptance is now final. | objections | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below.
PEP 483| accepted | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below. | However, none of the discussion changed the BDFL's mind and the PEP's acceptance is now final. | objections | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below.
PEP 483| accepted | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below. | However, none of the discussion changed the BDFL's mind and the PEP's acceptance is now final. | _objection | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below.
PEP 483| accepted | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below. | However, none of the discussion changed the BDFL's mind and the PEP's acceptance is now final. | objections | Because of the exceptionally short period from first draft to acceptance, the main objections brought up after acceptance were carefully considered and have been reflected in the Alternate proposals section below.
PEP 484| rejected | It was proposed a year and half ago, when PEP 484 was discussed. | At that time it was abandoned, it reappeared during the discussion of this PEP, but many people including me didn't like this, so that we decided to put it in the list of rejected ideas to this PEP. | _discussed | It was proposed a year and half ago, when PEP 484 was discussed.
PEP 488| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 488| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 488| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 488| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 488| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | Open Issues This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 488| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | Open Issues This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 488| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | Open Issues This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 488| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | Open Issues This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 488| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | Open Issues This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 488| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | Open Issues This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 488| accepted | Brett Cannon added the comment | The closing of this issue inspired me to think of a better way to do this, and I think providing something in importlib util that accepted a NodeTransformer as an argument to a function that compiled source files to bytecode files would fill this issue thanks to PEP 488. | _comment | Brett Cannon added the comment
PEP 498| accepted | Terry J. Reedy added the comment | Much of this discussion seems to duplicate and effectively re open of 25179, wherein it was decided accepted that true, non degenerate, non trivial, non constant, f strings that actually do formatting are not constants and do not and should not become docstrings. | _comment | Terry J. Reedy added the comment
PEP 504| withdrawn | during discussion of this pep, steven d'aprano proposed the simpler alternative of offering a standardised secrets module that provides one obvious way to handle security sensitive tasks like generating default passwords and other tokens. | steven's proposal has the desired effect of aligning the easy way to generate such tokens and the right way to generate them, without introducing any compatibility risks for the existing random module api, so this pep has been withdrawn in favour of further work on refining steven's proposal as | discussion | during discussion of this pep, steven d'aprano proposed the simpler alternative of offering a standardised secrets module that provides one obvious way to handle security sensitive tasks like generating default passwords and other tokens.
PEP 504| withdrawn | during discussion of this pep, steven d'aprano proposed the simpler alternative of offering a standardised secrets module that provides one obvious way to handle security sensitive tasks like generating default passwords and other tokens. | steven's proposal has the desired effect of aligning the easy way to generate such tokens and the right way to generate them, without introducing any compatibility risks for the existing random module api, so this pep has been withdrawn in favour of further work on refining steven's proposal as .. 14 http legacy python org dev peps pep 0504 | discussion | during discussion of this pep, steven d'aprano proposed the simpler alternative of offering a standardised secrets module that provides one obvious way to handle security sensitive tasks like generating default passwords and other tokens.
PEP 506| deferred | During discussion of this PEP, Steven D'Aprano proposed the simpler alternative of offering a standardised secrets module that provides one obvious way to handle security sensitive tasks like generating default passwords and other tokens. | Steven's proposal has the desired effect of aligning the easy way to generate such tokens and the right way to generate them, without introducing any compatibility risks for the existing random module API, so this PEP has been deferred in favour of further work on refining Steven's proposal as PEP 506. | discussion | During discussion of this PEP, Steven D'Aprano proposed the simpler alternative of offering a standardised secrets module that provides one obvious way to handle security sensitive tasks like generating default passwords and other tokens.
PEP 509| accepted | STINNER Victor added the comment | The PEP 509 has been approved by Guido, I just pushed the implementation. | _comment | STINNER Victor added the comment
PEP 520| accepted | That addresses my last concerns. | PEP 520 is now accepted. | _concerns | That addresses my last concerns.
PEP 520| accepted | That addresses my last concerns. | PEP 520 is now accepted. | _concerns | That addresses my last concerns.
PEP 520| accepted | That addresses my last concerns. | PEP 520 is now accepted. | _concerns | That addresses my last concerns.
PEP 520| accepted | STINNER Victor added the comment | You should reopen the discussion on python dev, since the PEP 520 has been accepted with | _comment | STINNER Victor added the comment
PEP 520| accepted | STINNER Victor added the comment | You should reopen the discussion on python dev, since the PEP 520 has been accepted with | _comment | STINNER Victor added the comment
PEP 522| accepted | STINNER Victor added the comment | This idea is the PEP 522 which was superseded by the PEP 524 accepted in Python 3.6 which proposed to make os urandom blocking. | _comment | STINNER Victor added the comment
PEP 524| wrote_pep | The patch was available for review during 19 days 2016 08 18 2016 09 06 and was reviewed by Nick Coghlan. | Since Nick wrote a similar PEP, I trusted him to be able to review my change. | reviewed | The patch was available for review during 19 days 2016 08 18 2016 09 06 and was reviewed by Nick Coghlan.
PEP 524| wrote_pep | The patch was available for review during 19 days 2016 08 18 2016 09 06 and was reviewed by Nick Coghlan. | Since Nick wrote a similar PEP, I trusted him to be able to review my change. | _reviewed | The patch was available for review during 19 days 2016 08 18 2016 09 06 and was reviewed by Nick Coghlan.
PEP 524| updated | For the remainder, I either wasn't clear on whether they could be closed or not in which case I posted a comment asking Victor to take a look at them , or else they were clearly still valid and I posted a relevant status update. | Doing a similar search for urandom , I checked the ones where the titles seemed relevant and commented where a status update and possible closure seemed appropriate. | _comment | For the remainder, I either wasn't clear on whether they could be closed or not in which case I posted a comment asking Victor to take a look at them , or else they were clearly still valid and I posted a relevant status update.
PEP 524| updated | For the remainder, I either wasn't clear on whether they could be closed or not in which case I posted a comment asking Victor to take a look at them , or else they were clearly still valid and I posted a relevant status update. | Doing a similar search for urandom , I checked the ones where the titles seemed relevant and commented where a status update and possible closure seemed appropriate. | _comment | For the remainder, I either wasn't clear on whether they could be closed or not in which case I posted a comment asking Victor to take a look at them , or else they were clearly still valid and I posted a relevant status update.
PEP 524| accepted | STINNER Victor added the comment | This idea is the PEP 522 which was superseded by the PEP 524 accepted in Python 3.6 which proposed to make os urandom blocking. | _comment | STINNER Victor added the comment
PEP 524| rejected | Dustin Spicuzza added the comment | Crap, after reading more carefully, I see that PEP was rejected in favor of PEP 524. | _comment | Dustin Spicuzza added the comment
PEP 524| rejected | Dustin Spicuzza added the comment | Crap, after reading more carefully, I see that PEP was rejected in favor of PEP 524. | _comment | Dustin Spicuzza added the comment
PEP 524| rejected | Dustin Spicuzza added the comment | Crap, after reading more carefully, I see that PEP was rejected in favor of PEP 524. | _comment | Dustin Spicuzza added the comment
PEP 524| rejected | Dustin Spicuzza added the comment | Crap, after reading more carefully, I see that PEP was rejected in favor of PEP 524. | _comment | Dustin Spicuzza added the comment
PEP 525| accepted | This is mostly motivated by thinking about the issues around async generators and cleanup. | Unfortunately even though PEP 525 was accepted I found myself unable to stop pondering this, and the more I've pondered the more convinced I've become that the GC hooks added in PEP 525 are really not enough, and that we'll regret it if we stick with them, or at least with them alone . | issues | This is mostly motivated by thinking about the issues around async generators and cleanup.
PEP 530| updated | Yury Selivanov added the comment | Closing this one, the issue was resolved as part of 28091. | _comment | Yury Selivanov added the comment
PEP 530| updated | Yury Selivanov added the comment | Closing this one, the issue was resolved as part of 28091. | _comment | Yury Selivanov added the comment
PEP 538| wrote_pep | STINNER Victor added the comment | Ok, same players play again as PEP 522 524 with Nick and me, I just wrote the PEP 540 Add a new UTF 8 mode and Nick wrote the PEP 538 D | _comment | STINNER Victor added the comment
PEP 539| draft | Masayuki Yamamoto added the comment | After Erik posted PEP 539 draft, we've discussed features of new API on the Python ideas . | _comment | Masayuki Yamamoto added the comment
PEP 539| draft | Masayuki Yamamoto added the comment | After Erik posted PEP 539 draft, we've discussed features of new API on the Python ideas . | say | Masayuki Yamamoto added the comment
PEP 540| wrote_pep | STINNER Victor added the comment | Ok, same players play again as PEP 522 524 with Nick and me, I just wrote the PEP 540 Add a new UTF 8 mode and Nick wrote the PEP 538 D | _comment | STINNER Victor added the comment
PEP 754| accepted | So, my response to the original question would be sort of since it's there, but it's not particularly reliable. | Let's just hope that PEP 754 or something similar is accepted infinity is certainly useful... | response | So, my response to the original question would be sort of since it's there, but it's not particularly reliable.
PEP 754| accepted | So, my response to the original question would be sort of since it's there, but it's not particularly reliable. | Let's just hope that PEP 754 or something similar is accepted infinity is certainly useful... | response | So, my response to the original question would be sort of since it's there, but it's not particularly reliable.
PEP 3103| rejected | A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support. | I therefore reject it. | no_popular_support | A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support.
PEP 3103| rejected | A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support. | I therefore reject it. | quick_poll | A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support.
PEP 3103| rejected | A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support. | I therefore reject it. | no_popular_support | A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support.
PEP 3103| rejected | A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support. | I therefore reject it. | no_popular_support | A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support.
PEP 3103| rejected | A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support. | I therefore reject it. | quick_poll | A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support.
PEP 3103| rejected | A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support. | I therefore reject it. | no_popular_support | A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support.
PEP 3103| rejected | A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support. | I therefore reject it. | no_popular_support | A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support.
PEP 3103| rejected | A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support. | I therefore reject it. | quick_poll | A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support.
PEP 3103| rejected | A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support. | I therefore reject it. | no_popular_support | A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support.
PEP 3103| rejected | https www python org dev peps pep 3103 A Switch Case Statement by Guido van Rossum, Rejection Notice A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support. | I therefore reject it . | no_popular_support | https www python org dev peps pep 3103 A Switch Case Statement by Guido van Rossum, Rejection Notice A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support.
PEP 3103| rejected | https www python org dev peps pep 3103 A Switch Case Statement by Guido van Rossum, Rejection Notice A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support. | I therefore reject it . | quick_poll | https www python org dev peps pep 3103 A Switch Case Statement by Guido van Rossum, Rejection Notice A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support.
PEP 3103| rejected | https www python org dev peps pep 3103 A Switch Case Statement by Guido van Rossum, Rejection Notice A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support. | I therefore reject it . | no_popular_support | https www python org dev peps pep 3103 A Switch Case Statement by Guido van Rossum, Rejection Notice A quick poll during my keynote presentation at PyCon 2007 shows this proposal has no popular support.
PEP 3106| accepted | I also did some other cleanup in PEP 0 marked PEP 3102 keyword only arguments , PEP 3104 nonlocal , and 3107 annotations as finished. | Made PEP 3106 dict views as accepted but left as not implemented as there is still an Open Issues section. | _argument | I also did some other cleanup in PEP 0 marked PEP 3102 keyword only arguments , PEP 3104 nonlocal , and 3107 annotations as finished.
PEP 3106| accepted | I also did some other cleanup in PEP 0 marked PEP 3102 keyword only arguments , PEP 3104 nonlocal , and 3107 annotations as finished. | Made PEP 3106 dict views as accepted but left as not implemented as there is still an Open Issues section. | _argument | I also did some other cleanup in PEP 0 marked PEP 3102 keyword only arguments , PEP 3104 nonlocal , and 3107 annotations as finished.
PEP 3106| accepted | I also did some other cleanup in PEP 0 marked PEP 3102 keyword only arguments , PEP 3104 nonlocal , and 3107 annotations as finished. | Made PEP 3106 dict views as accepted but left as not implemented as there is still an Open Issues section. | arguments | I also did some other cleanup in PEP 0 marked PEP 3102 keyword only arguments , PEP 3104 nonlocal , and 3107 annotations as finished.
PEP 3107| rejected | Needless to say, the idea of deprecating uses of parameter and return annotations that aren't this particular way of typechecking is upsetting to me. | On to the most formal of formal complaints PEP 3107 6 rejected standardizing typing related annotations. | say | Needless to say, the idea of deprecating uses of parameter and return annotations that aren't this particular way of typechecking is upsetting to me.
PEP 3107| rejected | Sorry for the long rant. | 1 Clize on PyPI https pypi python org pypi clize 2 Old clize API https github com epsy clize blob e84637a631574e793719114ad7e40d0b36df1a78 README rst using clize in your programs 3 New clize API involving annotations http clize readthedocs org en latest basics html converting arguments 4 Inspect signature compatible backport of annotations http sigtools readthedocs org en latest sigtools modifiers annotate 5 Backport of inspect signature https pypi python org pypi funcsigs 0.4 6 Rejected proposals from Function Annotations PEP http legacy python org dev peps pep 3107 rejected proposals 7 Warnings for Beginners Learn Python the Hard Way http learnpythonthehardway org book ex0 html warnings for beginners | rant | Sorry for the long rant.
PEP 3107| rejected | I could say You Aren't Going to Need It, but that gets the tense wrong we're getting along without annotations quite nicely here in the present. | In short I'd like to request that PEP 3107 be rejected as an overly specific, unnecessary addition to the language. | say | I could say You Aren't Going to Need It, but that gets the tense wrong we're getting along without annotations quite nicely here in the present.
PEP 3111| accepted | I've been following the Py3k discussions for several months, and I find myself frequently feeling very bewildered about the new features being proposed, even though I'm hardly a newbie. | FWIW one of my favorite accepted PEPs is PEP 3111, Simple input built in in Python 3000. | discussion | I've been following the Py3k discussions for several months, and I find myself frequently feeling very bewildered about the new features being proposed, even though I'm hardly a newbie.
PEP 3111| accepted | I've been following the Py3k discussions for several months, and I find myself frequently feeling very bewildered about the new features being proposed, even though I'm hardly a newbie. | FWIW one of my favorite accepted PEPs is PEP 3111, Simple input built in in Python 3000. | _discussions | I've been following the Py3k discussions for several months, and I find myself frequently feeling very bewildered about the new features being proposed, even though I'm hardly a newbie.
PEP 3122| accepted | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks . | Brett's rejected PEP 3122 and my own accepted PEP 366 were both a direct result of the interpreter lying about the real value of name . | discussion | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks .
PEP 3122| accepted | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks . | Brett's rejected PEP 3122 and my own accepted PEP 366 were both a direct result of the interpreter lying about the real value of name . | say | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks .
PEP 3122| accepted | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks . | Brett's rejected PEP 3122 and my own accepted PEP 366 were both a direct result of the interpreter lying about the real value of name . | discussion | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks .
PEP 3122| accepted | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks . | Brett's rejected PEP 3122 and my own accepted PEP 366 were both a direct result of the interpreter lying about the real value of name . | say | I must say, this whole discussion is actually making me far more sympathetic to the ideas behind PEP 299 which proposed main functions as a replacement for name main blocks .
PEP 3130| rejected | I would say the most obvious place is in a decorator, using the function object or a copy as the namespace. | Doing this properly would require some variant of PEP 3130, which was rejected largely for insufficient use. | say | I would say the most obvious place is in a decorator, using the function object or a copy as the namespace.
PEP 3130| rejected | I would say the most obvious place is in a decorator, using the function object or a copy as the namespace. | Doing this properly would require some variant of PEP 3130, which was rejected largely for insufficient use. | say | I would say the most obvious place is in a decorator, using the function object or a copy as the namespace.
PEP 3131| accepted | I don't think the feature is open for debate anymore. | PEP 3131 has been accepted after long debates , and I'll pronounce that supporting non ASCII module names is a direct consequence of having it accepted. | debate | I don't think the feature is open for debate anymore.
PEP 3131| accepted | I don't think the feature is open for debate anymore. | PEP 3131 has been accepted after long debates , and I'll pronounce that supporting non ASCII module names is a direct consequence of having it accepted. | debate | I don't think the feature is open for debate anymore.
PEP 3131| accepted | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently. | Not an open issue the PEP has been accepted. | _argument | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently.
PEP 3131| accepted | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently. | Not an open issue the PEP has been accepted. | open_issues | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently.
PEP 3131| accepted | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently. | Not an open issue the PEP has been accepted. | open_issues | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently.
PEP 3131| accepted | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently. | Not an open issue the PEP has been accepted. | open_issues | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently.
PEP 3131| accepted | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently. | Not an open issue the PEP has been accepted. | addressed | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently.
PEP 3131| accepted | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently. | Not an open issue the PEP has been accepted. | _argument | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently.
PEP 3131| accepted | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently. | Not an open issue the PEP has been accepted. | issues | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently.
PEP 3131| accepted | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently. | Not an open issue the PEP has been accepted. | arguments | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently.
PEP 3131| accepted | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently. | Not an open issue the PEP has been accepted. | _argument | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently.
PEP 3131| accepted | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently. | Not an open issue the PEP has been accepted. | open_issues | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently.
PEP 3131| accepted | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently. | Not an open issue the PEP has been accepted. | open_issues | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently.
PEP 3131| accepted | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently. | Not an open issue the PEP has been accepted. | open_issues | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently.
PEP 3131| accepted | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently. | Not an open issue the PEP has been accepted. | addressed | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently.
PEP 3131| accepted | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently. | Not an open issue the PEP has been accepted. | _argument | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently.
PEP 3131| accepted | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently. | Not an open issue the PEP has been accepted. | issues | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently.
PEP 3131| accepted | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently. | Not an open issue the PEP has been accepted. | arguments | Not sure which of these you would consider open issues , or unaddressed arguments I'll indicate below how I see them dealt with by the PEP currently.
PEP 3140| bdfl_pronouncement_rejected | Having str container calling str item and not repr item sounds like the right thing to do. | However, PEP 3140 was rejected on the basis of the following statement of Guido | right_thing | Having str container calling str item and not repr item sounds like the right thing to do.
PEP 3140| rejected | Having str container calling str item and not repr item sounds like the right thing to do. | However, PEP 3140 was rejected on the basis of the following statement of Guido | right_thing | Having str container calling str item and not repr item sounds like the right thing to do.
PEP 3140| rejected | Having str container calling str item and not repr item sounds like the right thing to do. | However, PEP 3140 was rejected on the basis of the following statement of Guido | right_thing | Having str container calling str item and not repr item sounds like the right thing to do.
PEP 3140| rejected | Having str container calling str item and not repr item sounds like the right thing to do. | However, PEP 3140 was rejected on the basis of the following statement of Guido | right_thing | Having str container calling str item and not repr item sounds like the right thing to do.
PEP 3141| accepted | Guido van Rossum added the comment | Sorry, the PEP was approved, just not yet marked as such. | _comment | Guido van Rossum added the comment
PEP 3147| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 3147| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 3147| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 3147| idea_rejected | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations. | This idea is rejected for this PEP as that ignores the fact that there are people who do find the pre existing optimization levels for CPython useful. | _argument | The argument is that significant performance gains would occur from runtime optimizations through something like a JIT and not through pre execution bytecode optimizations.
PEP 3147| draft | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made. | While a PEP is in private discussions usually during the initial Draft phase , a Discussions To header will indicate the mailing list or URL where the PEP is being discussed. | pronounce | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made.
PEP 3147| draft | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made. | While a PEP is in private discussions usually during the initial Draft phase , a Discussions To header will indicate the mailing list or URL where the PEP is being discussed. | _pronouncement | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made.
PEP 3147| draft | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made. | While a PEP is in private discussions usually during the initial Draft phase , a Discussions To header will indicate the mailing list or URL where the PEP is being discussed. | pronounce | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made.
PEP 3147| draft | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made. | While a PEP is in private discussions usually during the initial Draft phase , a Discussions To header will indicate the mailing list or URL where the PEP is being discussed. | _pronouncement | It contains a URL that should point to an email message or other web resource where the pronouncement about the PEP is made.
PEP 3147| updated | As many tests use the linecache module, it makes sense to skip the installation of the test suite aas well since the patch removes all py files except those installed by ensurepip in site packages . | This can be done when issue 27640 is resolved by using ' disable test suite'. | stalled | As many tests use the linecache module, it makes sense to skip the installation of the test suite aas well since the patch removes all py files except those installed by ensurepip in site packages .
PEP 3147| updated | As many tests use the linecache module, it makes sense to skip the installation of the test suite aas well since the patch removes all py files except those installed by ensurepip in site packages . | This can be done when issue 27640 is resolved by using ' disable test suite'. | stalled | As many tests use the linecache module, it makes sense to skip the installation of the test suite aas well since the patch removes all py files except those installed by ensurepip in site packages .
PEP 3149| accepted | issue 665761 functools reduce will no longer mask exceptions other than typeerror raised by the iterator argument. | issue 9193 pep 3149 is accepted. | _argument | issue 665761 functools reduce will no longer mask exceptions other than typeerror raised by the iterator argument.
PEP 3149| accepted | issue 665761 functools reduce will no longer mask exceptions other than typeerror raised by the iterator argument. | issue 9193 pep 3149 is accepted. | _argument | issue 665761 functools reduce will no longer mask exceptions other than typeerror raised by the iterator argument.
PEP 3149| accepted | issue 665761 functools reduce will no longer mask exceptions other than typeerror raised by the iterator argument. | issue 9193 pep 3149 is accepted. | _argument | issue 665761 functools reduce will no longer mask exceptions other than typeerror raised by the iterator argument.
PEP 3149| accepted | issue 665761 functools reduce will no longer mask exceptions other than typeerror raised by the iterator argument. | issue 9193 pep 3149 is accepted. | _argument | issue 665761 functools reduce will no longer mask exceptions other than typeerror raised by the iterator argument.
PEP 3150| draft | As suggested by Eric's change to the subject line, I've now withdrawn the short lived PEP 403, revived PEP 3150 statement local namespaces and updated it based on the feedback received in relation to PEP 403. | The current draft of PEP 3150 is available on python org http www python org dev peps pep 3150 | feedback | As suggested by Eric's change to the subject line, I've now withdrawn the short lived PEP 403, revived PEP 3150 statement local namespaces and updated it based on the feedback received in relation to PEP 403.
PEP 3150| draft | As suggested by Eric's change to the subject line, I've now withdrawn the short lived PEP 403, revived PEP 3150 statement local namespaces and updated it based on the feedback received in relation to PEP 403. | The current draft of PEP 3150 is available on python org http www python org dev peps pep 3150 | withdrawn | As suggested by Eric's change to the subject line, I've now withdrawn the short lived PEP 403, revived PEP 3150 statement local namespaces and updated it based on the feedback received in relation to PEP 403.
PEP 3155| accepted | ?ric Araujo merwok at netwok org added the comment | PEP 3155 is accepted and makes str cls and str function as well as repr cls and repr function return the qualified name, which obsoletes part of this request. | _comment | ?ric Araujo merwok at netwok org added the comment
PEP 3155| accepted | ?ric Araujo merwok at netwok org added the comment | PEP 3155 is accepted and makes str cls and str function as well as repr cls and repr function return the qualified name, which obsoletes part of this request. | _comment | ?ric Araujo merwok at netwok org added the comment
PEP 3333| accepted | Guido has pronounced that I cannot change PEP 333 in any way, so even if I agreed with the requests in this thread, there is simply no way that wsgiref is changing in 2 x. | PEP 3333 has just been approved as well, so the odds of even a 3 x change are low. | pronounce | Guido has pronounced that I cannot change PEP 333 in any way, so even if I agreed with the requests in this thread, there is simply no way that wsgiref is changing in 2 x.
PEP 3333| accepted | Guido has pronounced that I cannot change PEP 333 in any way, so even if I agreed with the requests in this thread, there is simply no way that wsgiref is changing in 2 x. | PEP 3333 has just been approved as well, so the odds of even a 3 x change are low. | pronounced | Guido has pronounced that I cannot change PEP 333 in any way, so even if I agreed with the requests in this thread, there is simply no way that wsgiref is changing in 2 x.
