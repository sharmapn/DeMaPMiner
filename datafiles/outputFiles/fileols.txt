1 	X	note that the syntax for returning values from generators is largely independent of the.
2 	X	guido has pointed out that disallowing the naive return expr in generators is an important learning tool for inexperienced generator users and i think hes.
3 	X	return finally reads pretty well and doesnt add a new keyword while still allowing generator return values to be written.
4 	X	i havent seen other suggestions i particularly like so i figured id run with that one for the revised example.
5 	X	they dont have to be generator methods they could easily be functions in a coroutine.
6 	X	however i definitely prefer the idea of new methods or functions that support a variety of interaction styles over trying to redefine generator finalisation tools i e generatorexit and close to cover this completely different use.
7 	X	why create a potential backwards compatibility problem for ourselves when there are equally clean alternative solutions.
8 	X	i also dont like the idea of imposing a specific coroutine return idiom in the pep better to have a system that supports both sentinel values via next return and send return and sentinel exceptions via send throw.
9 	X	it sounds like it is definitely an issue the pep needs to discuss but i dont currently have an opinion as to what it should.
10 	X	we have a long way to go before we even come close to consuming as many pixels as pep or pep a fact for which greg is probably grateful.
11 	X	nick coghlan ncoghlan at gmail com brisbane australia.
12 	X	i agree that a separate syntax for returning a value from a generator coroutine is propably a good.
13 	X	i am still not convinced we need a separate exception for it but that is a separate discussion.
14 	X	i even think it would be a good idea to deprecate the use of the normal return in generators but that is probably not going to.
15 	X	you can call it whatever you want as long as it works predictably for the use cases we are.
16 	X	here is one possible fix never mind the.
17 	X	we could change the yield from expression from the current.
18 	X	by adding an extra form possibly one of.
19 	X	result yield startexpr from expr result yield from expr with startexpr result yield from expr as name starting with startexpr name.
20 	X	and letting startexpr if given take the place of the initial i next in the expansion s.
21 	X	the point is we need to yield something first before rerouting all send next and throw calls to the.
22 	X	him and everybody else i would.
23 	X	but afaict we are not even close to finished so we may get there.
24 	X	no thats not satisfactory at all because it introduces a spurious value into the stream of yielded values seen by the user of the outer.
25 	X	for refactoring to work correctly the first value yielded by the yield from expression must be the first value yielded by the.
26 	X	theres no way of achieving that when using the beazley decorator because it thinks the first yielded value is of no interest and discards.
27 	X	at least guido will know if someone manages to unsubscribe him from the list he wont be getting messages about yield from every.
28 	X	moving to python ideas where this thread belongs.
29 	X	as with pep the thing missing from function based solutions is lazy evaluation of the.
30 	X	they also tend be seriously ugly as is the case with the above.
31 	X	given guidos reluctance in adding the far more common conditional expressions i suspect this idea isnt ever going to get anywhere but even if that is the case it might be nice to have a rejected pep that makes this.
32 	X	if we were going to do it i would definitely favour the expr except alt expr if exception format but i doubt it is actually going to get that.
33 	X	nick coghlan ncoghlan at gmail com brisbane australia.
34 	X	all components would just be ordinary.
35 	X	the exception definition would be allowed to resolve to a single exception or a tuple of exceptions just as it is in a normal try except.
36 	X	nick coghlan ncoghlan at gmail com brisbane australia.
37 	X	by memory the ieee standard allows for different.
38 	X	back in the s or s sane standard apple numerics environment supported different nans for different errors and im pretty sure that one of them was for failed string to float.
39 	X	in any case the idea seems perfectly sensible to.
40 	X	as for the suggestion im not convinced by the examples given.
41 	X	im not a huge fan of the x if y else z construct i thought i would be but in practice i nearly never use it and i think this is just more of the.
42 	X	seems good in principle but in practice im not sure it is actually that readable and there are usually perfectly adequate.
43 	X	for ieee binary format i count bit patterns representing nans quiet nans and signaling.
44 	X	the exponent bits must all be s the sign bit and the significand bits can be chosen arbitrarily except that two bit patterns are reserved for infinity the top significand bit determines whether youve got a signaling or quiet nan.
45 	X	i agree that that particular example isnt particularly compelling but ive definitely encountered other cases where i would have used this construct if it were.
46 	X	not that that necessarily makes it a good.
47 	X	i wouldnt mix up if word with except there are different.
48 	X	imho seems to be the best of the.
49 	X	id add to it optional as like in present try except exc as exc.
50 	X	else has completely opposite role in present.
51 	X	itd be terribly missleading not only for.
52 	X	jan kaliszewski zuo zuo at chopin edu pl.
53 	X	x float string except valueerror e then float nan e optional.
54 	X	reciprocal float string except valueerror float nan except zerodivisionerror float inf.
55 	X	this proposal has a slim chance of success as it is piling on top isnt going to.
56 	X	imo any syntax that puts something other than the exception class after except has zero.
57 	X	the except then is the most attractive to me but still doesnt read as naturally as if else.
58 	X	thus spake the lord thou shalt indent with four.
59 	X	four shall be the number of spaces thou shalt indent and the number of thy indenting shall be.
60 	X	eight shalt thou not indent nor either indent thou two excepting that thou then proceed to.
61 	X	assuming you avoid the version shouldnt multiple excepts fall out of the grammar naturally.
62 	X	parses as expr except float inf if valueerror where expr is float string except float nan if valueerror.
63 	X	yes its as ugly as nesting if else expressions but those work so these.
64 	X	i dont see a lot of use for it but can see that where it is useful its easier to read than a try except.
65 	X	mike mike meyer mwm at mired org http www mired org consulting html independent network unix perforce consultant email for more.
66 	X	o ascii ribbon campaign stop html mail www asciiribbon org.
67 	X	foo try float string except somethingerror e float nan.
68 	X	this would imply that try blocks have a.
69 	X	foo try float string except something error e float nan.
70 	X	sure it introduces a couple new grammar tweaks but its easy to understand and is backwards.
71 	X	i would like to propose an expression similar to the if else expression that responds to.
72 	X	i had originally posted this probably mistakenly on py.
73 	X	this current posting is a cleaned up version of the idea based on responses i got on from the earlier.
74 	X	abstract proposal for a conditional expression similar to the if else expression that responds to.
75 	X	motivation an expression syntax that responds to exceptions and which reproduces the readability and conciseness of the if else conditional expression would simplify some exception handling cases especially within list.
76 	X	very simple example type coercion current approach try x float string except x float nan.
77 	X	proposed solution using exception based conditional expression x float string except valueerror float nan.
78 	X	simple example type coercion in a list comprehension current approach def safe float string try x float string except valueerror x float nan return x xs safe float string for string in strings.
79 	X	proposed solution using exception based conditional expression xs float string except valueerror float nan for string in strings.
80 	X	discussion in my own python coding i find i make common use of the if else conditional expression especially within list.
81 	X	in one of my packages which has lines of code i found if else expressions in of the.
82 	X	here is a slightly more involved example than the examples presented.
83 	X	in data processing i often string together a sequence of iterable list comprehensions corresponding to a sequence of operations on a given dataset ys to produce a processed dataset x xs operation a x for x in ys xs operation b x for x in xs if filter b x xs operation c x if some condition x else operation d x for x in xs if filter c x final explicit list of values xs x for x in xs this is often a flexible way for me to define processing and filtering sequences which also seems to have good performance on very large.
84 	X	one advantage is that i can quickly mix and match from existing processes like this to make a new.
85 	X	an exception based conditional would go nicely into many of these process sequences keeping them both robust and.
86 	X	xs operation n x except exceptionn operation nprime x for x in xs.
87 	X	i also often have object classes which have some common method or.
88 	X	for instance some of my objects have scope dependent values x y evaluate scope where scope is typically locals globals or some other dictionary like.
89 	X	but to keep my code modular i want to handle in the same lines of code objects which do not have some particular method which leads me to lines of code like x y evaluate locals if evaluate in y dict else y this seems not very pythonic similar to using type testing instead of try.
90 	X	my impression was that there was a long standing trend in the evolution of python to remove tests like this and i thought that was the original motivation for the try except.
91 	X	i would much rather write x y evaluate locals except attributeerror y or in the list comprehension example xs y evaluate locals except attributeerror y for y in ys.
92 	X	clearly this can be handled in several ways with the language as it.
93 	X	one way is to define a new function as in the second simple example above def safe evaluate yscope try x y evaluate scope except attributeerror x y return x xs safe evaluate ylocals for y in ys but this quickly in my packages at least leads to an annoying proliferation of safe.
94 	X	again this seems not to be in the pythonic spirit and is also less concise less.
95 	X	i also suspect but have not verified that this is in general less efficient than in line expressions wasnt that part of the original motivation for list comprehensions.
96 	X	in the thread of my previous post to py dev there were comments questions and suggestions concerning the details of the.
97 	X	having reflected on this for a couple weeks i am now most strongly supportive of what is essentially just an inline compression of the current try except.
98 	X	so the following examples would be allowed x expression except default expression x expression except exception expression except exception expression except default expression.
99 	X	or more generally x expression except exception expression except exception expression except exceptioni expressioni except default expression in this last example the behaviour would be as follows evaluate.
100 	X	if no exception is encountered return the.
101 	X	if an exception is encountered search for the matching exception in the except.
102 	X	if a matching exception exceptioni is found evaluate the corresponding expression expressioni and return the.
103 	X	if no matching exception is found and a default except clause i one without and exception is given evaluate default expression and return the.
104 	X	if no matching exception is found and no default except clause if given pass the exception on to the.
105 	X	if a new exception is encountered while evaluating an an except expression expressioni pass the exception on to the.
106 	X	i hope i have made a convincing case.
107 	X	this seems to me to be a natural pythonic addition to the.
108 	X	jeffrey e mcaninch phd physicist x ifd los alamos national laboratory email mcaninch at lanl gov.
109 	X	an html attachment was url http mail python org pipermail python ideas attachments ea attachment html.
110 	X	im not fully competent to comment on the details but a big for something like this if not.
111 	X	tennessee leeuwenburg http myownhat blogspot com dont believe everything you think an html attachment was url http mail python org pipermail python ideas attachments f attachment html.
112 	X	on colons in the expression like.
113 	X	i like the idea of were able to handle an exception in generator expressions and the like but ive never seen a syntax i.
114 	X	i think ive favored the idea of something like float x except float nan if valueerror thinking it reads more naturally as an expression puts the real logic convert x to a float or get a nan float together which i think makes.
115 	X	i fear were able to express too.
116 	X	that is were going to remove all that indentation gives us if eventually everything is given an expression.
117 	X	i depend on your acceptance of my opinion.
118 	X	http techblog ironfroggy com follow me if youre into that sort of thing http www twitter com ironfroggy.
119 	X	very simple example type coercion current approach try x float string except x float nan.
120 	X	proposed solution using exception based conditional expression x float string except valueerror float nan.
121 	X	i really dont like the colon in the middle of the.
122 	X	it just looks like broken syntax because everywhere else in python colon introduces a.
123 	X	i wonder if you really need it.
124 	X	i generally dont like a general conditional.
125 	X	for reasons presented below i dont think its as flexible as think it can.
126 	X	otoh i fund it much less readable than the existing statement based.
127 	X	simple example type coercion in a list comprehension current approach def safe float string try x float string except valueerror x float nan return x xs safe float string for string in strings.
128 	X	i dont have a problem with the.
129 	X	but i can see that for.
130 	X	in data processing i often string together a sequence of iterable list comprehensions corresponding to a sequence of operations on a given dataset ys to produce a processed dataset x.
131 	X	an exception handling clause in comprehensions and generator expressions.
132 	X	might be useful to make the exceptions handled.
133 	X	for the cases i can imagine using myself i would generally prefer the approach of defining functions to handle the exceptions because theyd all be similar eg coercing exceptions to float nan as above.
134 	X	so the following examples would be allowed x expression except default expression x expression except exception expression except exception expression except default expression.
135 	X	but it seems to me the ez read interpretation of.
136 	X	x expression except exception expression except default expression.
137 	X	x expression except exception expression except default expression.
138 	X	ie your parser resolves the dangling except ambiguity in the opposite way to the conventional resolution of the dangling else.
139 	X	and what if excepts are mixed with conditional expressions.
140 	X	x exp except exc exp if exp else exp except exp.
141 	X	does the bare except bind to exp the if expression or exp.
142 	X	im sure you can define rules to.
143 	X	however i suspect that it will be hard to get agreement that any given set of rules is the appropriate way to resolve the.
144 	X	i can definitely see where i would use it in my own.
145 	X	the only thing i would caution is in your simple.
146 	X	i would choose to create a module full of conversion.
147 	X	it violates dry to have the try float otherwise nan statement all over the.
148 	X	david blog http www traceback org twitter http twitter com dstanek.
149 	X	i was just blindly following the try.
150 	X	so in the simple example x float string except valueerror float nan.
151 	X	but possibly the exception tuples now have to be explicitly tuples.
152 	X	x float string except valueerror float nan.
153 	X	so the general case would be something like exception expression nominal value except exception tuple exception value except default value.
154 	X	jeffrey e mcaninch phd physicist x ifd los alamos national laboratory email mcaninch at lanl gov.
155 	X	following up on my previous post i think the general syntax would be something like exception expression nominal value except exception tuple exception value except default value.
156 	X	hopefully this disambiguates the issue at least from the parser point of.
157 	X	requiring an explicit tuple of exceptions requiring the parens around the tuple of exceptions makes sense too and i thought i had seen other discussions of requiring explicit tuples where currently parens could be.
158 	X	with the definition above i think the combinations of exception expressions with if else conditional expressions is probably also unambiguous though not necessarily easily read.
159 	X	i havent sat down to verify this mathematically yet.
160 	X	allowing parens around the except clauses might help to make it more readable.
161 	X	x float string except valueerror float nan except someotherexception someothervalue okay maybe not.
162 	X	btw thanks for the cool new verb disambiguate though my friends and family may not be so happy when i start using it at every opportunity.
163 	X	jeffrey e mcaninch phd physicist x ifd los alamos national laboratory email mcaninch at lanl gov.
164 	X	i would feel more comfortable with another keyword in.
165 	X	x float string except valueerror then float nan.
166 	X	x is the float value of string except in the event of valueerror then its float nan.
167 	X	at any rate i do seriously question the bang for the buck of adding this.
168 	X	yes it makes such conversions shorter but couldnt one just define a float or nan conversion function that defaults to nan in case of error to essentially the same effect.
169 	X	i can see how the construct might help in comparatively quick and dirty scripts but should python actively encourage comparatively cavalier error handling.
170 	X	if this goes through it will be extended to all other compound statements over time and well end up with or ways to do every.
171 	X	a much better idea would be to find a way to make all compound statements into expressions future proofing the decision and avoiding the redundancy between compound statement statement and compound statement expression.
172 	X	i agree about the parens but thought i should put it out.
173 	X	the parens around the exception clauses should not be required but should be allowed to reduce ambiguity in my own case i would tend to use continuation lines to make multi exception expressions more.
174 	X	one of the surprising things about python is the impressive performance that can be achieved even though it is an interpreted.
175 	X	in my experience this is one of the aspects of python that sets it apart from other interpreted environments and why i can apply python to heavy duty scientific computing in the same environment where i pop up a gui or parse a text.
176 	X	this performance is achieved as one increases the ratio of work done in compiled code to the amount of work were done by the.
177 	X	hence list comprehensions and iterator expressions in place of for and while.
178 	X	the bang for the buck in the exception expression is in.
179 	X	this is not in any way just a quick and dirty.
180 	X	its exactly the same motivation as the if else.
181 	X	please correct me if i am in error but doesnt a call to a python function as opposed to a compiled c function substantially slow down a list comprehension.
182 	X	i will endeavor to generate a test case this weekend and post the results but this is consistent with everything ive read about optimizing python.
183 	X	and remember this is called exception handling rather than error handling for a.
184 	X	in many practical cases the exceptions can be a significant if not dominant fraction of the executions of the.
185 	X	that i thought was the logic behind try except in the first place treating exceptions as a natural part of the coding rather than a collection of special.
186 	X	i see this as encouraging more robust rather than more cavalier exception handling and doing it in a more concise syntax and i assert more efficient from a performance perspective ill try to put this assertion to a quantitative test this.
187 	X	jeffrey e mcaninch phd physicist x ifd los alamos national laboratory email mcaninch at lanl gov.
188 	X	probably but you dont have to use a.
189 	X	def g seq for e in seq try yield float e except pass whatever even skipping the element.
190 	X	if you dont need it in generator form then just collect the results into a list and return that instead of.
191 	X	and obviously that for loop doesnt even have to be in a separate generator or function at.
192 	X	as far as i can tell that would be unprecedented in python.
193 	X	that last one is better written as.
194 	X	chaining iterators together is a powerful technique and you dont have to be limited to generator expressions you can use regular generators too.
195 	X	def operate xs for x in xs try yield operation c x except valueerror yield operation d x.
196 	X	xs operation a x for x in ys xs operation b x for x in xs if filter b x xs operate xs finally convert to a list xs list xs.
197 	X	so far this is an argument for iterator based processing not for exception based conditionals.
198 	X	you can use exceptions in generator exceptions you just have to put them into a function.
199 	X	i dont think it works the way you.
200 	X	given a reasonable definition for y an instance of a class with no special tricks the if test will never succeed.
201 	X	def evaluate self arg return arg false.
202 	X	a better way of writing that would be.
203 	X	x y evaluate locals if hasattr y evaluate else y.
204 	X	which have the bonus of working correctly even if y gets its evaluate method via.
205 	X	another way two lines instead of one.
206 	X	try x y evaluate locals except attributeerror x y.
207 	X	a third method make sure all objects you pass have an evaluate method even if they are a null operation that just return.
208 	X	youre talking about the look before you leap technique rather than easier to ask forgiveness than.
209 	X	both techniques are valid and both have.
210 	X	etaftp is advantageous when exceptions are rare and hard to predict lbyl is better if exceptions are common and easy to.
211 	X	i would argue strongly that allowing a bare except is a serious.
212 	X	bare excepts have very few legitimate uses and now that string exceptions are deprecated and very rare its no hardship to write.
213 	X	if you want to catch everything except keyboardinterrupt and one or two other things or.
214 	X	for those rare times you actually do want to catch.
215 	X	personally i think the above is likely to be the approach in a serious.
216 	X	for lightweight applications an expression based solution would be acceptable but it has the disadvantage of not were able to be documented or tested.
217 	X	others have suggested that the colon should be.
218 	X	i dislike that idea because theres nothing but whitespace delimiting the list of exceptions from the except expression.
219 	X	expr except except list except expr.
220 	X	pythons list of compound statements is pretty thin just and of these already have expression.
221 	X	for list comprehension iterator expression while list comprehension iterator if if else conditional expression def already have lambda expressions.
222 	X	class okay so this one doesnt have a compound statement but where would you use it.
223 	X	with i havent had an occasion to use with so cant think of an example where it could be useful as a compound.
224 	X	seems to me try except is kind of sticking out here and ive tried to show what i think are natural and common places where a try except expression would be.
225 	X	jeffrey e mcaninch phd physicist x ifd los alamos national laboratory email mcaninch at lanl gov.
226 	X	but that one is ugly that is i dont think anyone likes the syntax its just considered the least worst and some of us consider that its usefulness is dubious or at least.
227 	X	i think the main reason that python has a ternary if statement is to stop people writing the error prone.
228 	X	but it does have a function.
229 	X	or rather class is syntactic sugar for the type known as type which isnt actually a function but you call it as if it were.
230 	X	at the moment i would vote.
231 	X	for the general idea if it allows a bare except.
232 	X	i could possibly be convinced to change my first vote to if i could see some real examples of code where this would be.
233 	X	however i dont think theres any power in the universe which could convince me that allowing bare excepts here was a good thing.
234 	X	has anyone considered binding to an exception instance.
235 	X	x f x except valueerror typeerror as e extract from e.
236 	X	let me be clear apparently i wasnt clear enough im not arguing against a try except expression or indeed any expression.
237 	X	im arguing against creating a brand new expression instead of trying to find a way to make the current statements into expressions which i think would be both clearer and better for the language as a.
238 	X	certainly there are a number of ways to address this without using an exception conditional.
239 	X	but it seems each of these would lead to a proliferation of these special functions as one tries to flexibly address the different exception value pairs that would be applied to different.
240 	X	i could for instance define the function except.
241 	X	def except seq nominal function function lookup for e in seq try yield nominal function e except exception typeexception message sys exc info if exception type in function lookup yield function lookup exception type e else raise exception type exception message.
242 	X	then i could write my simple example as xs except ys lambda x float x valueerror lamba x float nan.
243 	X	so i agree the behaviour can be produced with the language as.
244 	X	but many of the evolutions in the language were not put in to address things that cant be done but rather to let them be done in a more concise robust and or elegant.
245 	X	jeffrey e mcaninch phd physicist x ifd los alamos national laboratory email mcaninch at lanl gov.
246 	X	fourth method x getattr y evaluate lambda y locals.
247 	X	even if it can be parsed unambiguously its going to seem weird and confusing to a.
248 	X	so far i havent seen anything i like better than.
249 	X	despite the fact that it uses the words except and if in a different way than.
250 	X	many people have tried and dismally failed to convince guido that their suggested solution would be of benefit to the.
251 	X	thats actually a good point eliminating the persistent use of buggy workarounds was definitely one of the major motivations behind accepting pep.
252 	X	in this case there are no buggy workarounds if you want to trap exception you have to use a real.
253 	X	without that additional motivation of bug prevention i really doubt this proposal is going to go.
254 	X	nick coghlan ncoghlan at gmail com brisbane australia.
255 	X	i think its of much rarer use than even conditional expressions has the disadvantage of only handling one special use case without were easily extensible to more than one exception and its easily served by a simple function that does the same thing and potentially much more but gives it a.
256 	X	first id like to thank you for taking time to write this as a very concise.
257 	X	but i dont think i saw any reasonable readable.
258 	X	anything with bare semicolon is clearly confusing because bare semicolon has a well defined meaning as ending a line and starting new.
259 	X	anything with bare except clause isnt good because catching all exceptions is a wrong.
260 	X	anything that encourages the use of line continuation character clearly contradicts the well established guideline that this character should be used as a last.
261 	X	but there are deeper problems even in the simple example.
262 	X	to see them let me show how this example should look in programming style i strive for.
263 	X	def safe float string any string invalid float nan float wrapper around float that converts all invalid values to given.
264 	X	use with care this will also catch invalid inputs and other cases where notifying the user with exception is a better.
265 	X	try return float string except valueerror return invalid class tests def testsafefloat self assert safe float float assert safe float invalid float nan.
266 	X	here string comes from an experiment and i know its either empty or should be.
267 	X	xs float string or nan for string in strings.
268 	X	here string comes from a user.
269 	X	tell him if he types something.
270 	X	for string in strings try xs i float string catch valueerror string input please retype string format i.
271 	X	here strings are a result of series of.
272 	X	unfortunately we dont know what format the researchers used for no data or invalid.
273 	X	so for now well just change all of these values to.
274 	X	xs safe float string for string in strings.
275 	X	your proposed solution using exception based conditional expression.
276 	X	here strings are a result of series of.
277 	X	unfortunately we dont know what format the researchers used for no data or invalid.
278 	X	so for now well just change all of these values to.
279 	X	but unfortunately if in the future well decide to use some different function to process data well have to rewrite this whole xs float string except valueerror float nan for string in strings.
280 	X	i think from my examples you get what im trying to say when youre thinking about easily catching exceptions youre either ok with something simpler or youre actually trying to apply a.
281 	X	so why not do it explicitely.
282 	X	possibly the only way to do this within those constraints is a purely.
283 	X	sense most people and editors recognize exceptions names easily there really isnt a strong need to use the key word except in an expression like.
284 	X	the colons in this case can be considered to be similar to slice.
285 	X	and if the colons are still considered bad possibly some other symbol could be.
286 	X	are you referring to the fact that any proposed syntax must be capable of were unambiguously parsed.
287 	X	can you give an example of a proposal which isnt syntactic.
288 	X	are the brackets intended to be part of the syntax or are they there just for grouping.
289 	X	in other words would this be allowed.
290 	X	or would we have to write this.
291 	X	the word except cues in the reader that they are seeing an exception expression rather than some sort of data structure like key value or a tuple.
292 	X	for the same reason list comprehensions use for.
293 	X	if that doesnt display for you the first odd character is an upside down a for all and the second is a curved e element of.
294 	X	if you dont like unicode based source code we could replace the for all and element of symbols with colons.
295 	X	but we dont because the words for and in give the reader hints as to what is were done which a colon would.
296 	X	words are just symbols so anytime you have syntax including a keyword you could replace the keyword with a.
297 	X	as a general rule keywords are more readable punctuation is more.
298 	X	i like your use case but it appears to me a processing task that repeats a lot deserves its own function so.
299 	X	xs apply operation n exceptionn operation nprime xs.
300 	X	which also happens to be shorter than.
301 	X	xs operation n x except exceptionn operation nprime x for x in xs.
302 	X	similarly multiline try except as in your last example.
303 	X	x expression except exception expression except exception expression except exceptioni expressioni except default expression.
304 	X	but were lucky nearly identical syntax already exists out of the box.
305 	X	try expression except exception expression except exception expression except exceptioni expressioni except default expression x.
306 	X	whats so good about the your snippet that is bad about mine.
307 	X	anyway instead of either of those i would prefer.
308 	X	try expression except exception take care of the case of bar were not.
309 	X	expression except exception this looks like magic but is.
310 	X	see documentation for exception at http some url for.
311 	X	expression except exceptioni expressioni except exceptionlast expressionlast all cases i could think of are exhausted.
312 	X	of course anything can happen so any other exception will propagate.
313 	X	and also to not using except and if in a different way than.
314 	X	technically you are correct but i was trying to refer to patterns that do not use keywords to identify the.
315 	X	for example slice operations use a pattern rather than a unique symbol to identify the.
316 	X	so this is an example of a pattern that could.
317 	X	yes i intended the brackets to be part of the.
318 	X	i supose it could work like generator expressions.
319 	X	then both of these could be.
320 	X	true it needs to be unique enough to be easily identifiable or it would not be worth.
321 	X	i think having the square brackets with the colons would be a bit too close to slice notation.
322 	X	its not unique enough to be easily.
323 	X	this is especially true for more complex operations such as looping and.
324 	X	yes i agree but python isnt that strict about.
325 	X	to me a well defined exception expression that.
326 	X	all the previous suggestions view the term as needing three values so you need two separators along with unique symbols or keywords to come up with something that fits the need in a clear and concise.
327 	X	i was thinking what if we could use the exception object itself as an operator then the term becomes even simpler and more.
328 	X	but the only way i can think to do that in a clear way is to use syntax to identify the exception such as putting colons or some other symbol around the.
329 	X	an additional note the when you view an exception object in the console it is bracketed by the less than and and greater than.
330 	X	maybe there is a way to use those in a manner that is consistent with the string repr.
331 	X	there wont be unless you rule out using x y as an expression that gives the default.
332 	X	but doing that will make pythons grammar way too complicated and youre still left with the problem of x y a b b c which is legal.
333 	X	its my understanding that ruby has run into a lot of ambiguity with its use of as both a bitwise operator and a part of a block.
334 	X	lots of things have a repr which includes and signs including repr.
335 	X	also new style classes and instances types functions methods exceptions are printed with signs because exceptions are subclasses of.
336 	X	theres nothing specifically exception like about the use of and in the repr of.
337 	X	and we already have one kind of expression that owes its existence almost entirely to the suboptimal workaround people were using to get around the fact it wasnt available.
338 	X	a given as list comprehension subclause inspired by pep might actually be a more interesting idea to explore than i first thought considering that pep itself is absolutely no help at all for this particular use case.
339 	X	that is instead of having to choose one of the following alternatives and assorted variants of the explicit loop such as invoking list on a generator function.
340 	X	ys f x for x in xs if f x ys y for y in f x for x in xs if y ys y for x in xs for y in f x if y.
341 	X	def build sequence xs ys for x in xs y f x if y ys append y return ys ys build sequence xs.
342 	X	the language could offer an obvious answer of the form.
343 	X	ys y for x in xs given f x as y if y.
344 	X	multiple subexpressions would be handled gracefully via tuple unpacking and the translation to long form python code for actual execution by the eval loop would follow the same style as is already used for comprehensions and generator expressions i e the last alternative i listed above with the details of the emitted code changing appropriately based on the kind of comprehension.
345 	X	so despite my initial negative reaction id now be interested in reading a fully fleshed out pep for this.
346 	X	read pep if the reference is unfamiliar.
347 	X	nick coghlan ncoghlan at gmail com brisbane australia.
348 	X	yeah a similar discussion came up in the context of defining namedtuple instances a while back i dont recall if you were part of that conversation or not iirc the thread started off on the topic of assignment decorators and ended up wandering down this road at some point.
349 	X	most proposed solutions relied on some form of abuse of the def statement to define arbitrary objects that knew their own.
350 	X	def red from namedvalue rather unnatural phrasing def red as namedvalue phrasing is natural but the name is on the wrong side of the as def red namedvalue simple assignment may not suggest enough magic def as red namedvalue syntax soup as red def namedvalue just throw keywords at the screen and see if anything sticks red def namedvalue an alternative inspired by augmented assignment def red namedvalue arbitrary but suggestive.
351 	X	a protocol would then be defined to make that work regardless of the specific syntax.
352 	X	either the actual call would be transformed into namedvalue red which has the virtue of working with existing objects like collections namedtuple but prevents provision of useful default behaviour or else there would be a new protocol like.
353 	X	named name with a fallback to something like the namedvalue recipe if named wasnt defined which has the virtue of working with arbitrary objects as in def red as but requires adapter classes to work with existing apis like namedtuple.
354 	X	the bikeshed was painted many different colours before the thread finally wound down without achieving any kind of.
355 	X	i suspect this may end up were another pep where the only way it will ever happen is if you find a syntax you like or are at least willing to tolerate in order to gain the functionality.
356 	X	adding an int specific enum class eliminates a lot of the use cases for a named object feature which is the main reason im trying to hold out for the more general functionality i still have hope that well strike on a syntax for named assignments that is clear enough and clean enough that none of the core devs actively oppose.
357 	X	nick coghlan ncoghlan at gmail com brisbane australia.
358 	X	i recall that and i think i even.
359 	X	but i agree we never came up with anything.
360 	X	my current thinking would be that you could probably hack it in cpython through bytecode inspection find the store fast or store global opcode right after the call function opcode and see what to name it.
361 	X	this is of course terrible depending on all sorts of implementation stuff but we might create a builtin function that returns that variable name assuming the scope is module global or a class.
362 	X	i know it sounds atrocious but the alternative is requiring extra mark up and a hidden implied argument which does not sound good.
363 	X	maybe extra mark up could be required for the proposed new builtin to.
364 	X	i agree that named constants dont have to be ints though for most types other than ints my main requirement for enums that they print themselves nicely is not an.
365 	X	regarding ben finneys requirement that enums primarily define unique values and that enums from two different classes must compare unequal even if their int values are equal i really dont care about.
366 	X	you can use isinstance if you want to check.
367 	X	guido van rossum python org guido.
368 	X	given the magic effects they have on the compiler super and class probably should be.
369 	X	the only reason they arent is that their effect automatically defining class as a local when inside a function in a class scope is relatively harmless in the event that super has actually been rebound to refer to something other than the builtin.
370 	X	class c def f self print locals def g self class print locals def h self super print locals.
371 	X	self main c object at xded self main c object at xded class class main c self main c object at xded class class main c.
372 	X	sorry i meant to point out why this was a bad idea when alex first posted.
373 	X	the globals reference on a function object refers to the globals of the module where the function is.
374 	X	modify the contents of that dictionary and you modify the contents of that.
375 	X	so this injection approach not only affects the function were decorated but every other function in the.
376 	X	thread safety is completely non existent and cannot be handled locally within the decorated.
377 	X	the reason something like inject or def is needed as a language construct is because the object of the exercise is to define a new kind of scope call it shared locals for lack of a better name and we need the compilers help to do it.
378 	X	currently the closest equivalent to a shared locals scope is the default argument namespace which is why people use it that way the names are assigned values at function definition time and they are automatically copied into the frame locals whenever the function is.
379 	X	a shared namespace can also be created explicitly by using a closure or a class but both of those suffer from serious verbosity and hence readability problems when the design intent you are aiming to express is a single algorithm with some persistent.
380 	X	as noted in jans original message using the default argument namespace has its own flaws rebinding of immutable targets not working properly cluttering the function signature on introspection risk of inadvertent replacement in the call but if it didnt address a genuine design need it wouldnt be so.
381 	X	hence the current discussion which reminds me a lot of the pep ternary expressions.
382 	X	developers have proven they want this functionality by coming up with a hack that does it but the hack is inherently.
383 	X	telling them dont do that is never going to work so the best way to eliminate usage of the hack is to provide a way to do it right.
384 	X	relating back to pep how often do you see the and or hack in modern python code written by anyone that learned the language post python.
385 	X	the runtime semantics of my implementation sketch an additional set of cells stored on the function object that are known to the compiler and accessed via closure are almost certainly the right way to go its a solution that cleanly handles rebinding of immutable targets and avoids cluttering the externall visible function signature with additional.
386 	X	the only question is how to tell the compiler about it and there are three main options for that.
387 	X	embedded in the function header modelled on the handling of keyword only arguments.
388 	X	def example arg cache set invocations record and return arguments seen and count the number of times the function is invoked invocations cache add arg return arg.
389 	X	pros no bikeshedding about the keyword for the new syntax namespace for execution is clearly the same as that for default arguments i e the containing namespace cons look like part of the argument namespace when they really arent no mnemonic to assist new users in remembering what theyre for no open questions.
390 	X	inside the function as a new statement type bikeshed colour options def shared shared.
391 	X	def example arg cache set invocations record and return arguments seen and count the number of times the function is invoked def cache set invocations invocations cache add arg return arg.
392 	X	pros implementation detail of shared state is hidden inside the function where it belongs keyword choice can provide a good mnemonic for functionality cons needs new style rules on appropriate placements of def shared statements similar to nonlocal and global use of containing namespace for execution may be surprising open questions whether to allow only one line with a tuple of assignments or multiple lines whether to allow simple assignments only or any simple non flow control statement.
393 	X	after the decorators and before the function definition bikeshed colour options def inject shared.
394 	X	def cache set invocations def example arg record and return arguments seen and count the number of times the function is invoked invocations cache add arg return arg.
395 	X	pros keyword choice can provide a good mnemonic for functionality namespace for execution is clearly the same as that for decorator expressions i e the containing namespace cons puts private implementation details ahead of the public signature information looks too much like an ordinary decorator open questions whether to allow only one line with a tuple of assignments or multiple lines.
396 	X	i already have too much on my to do list to champion a pep for this but id be happy to help someone else with the mechanics of writing one and getting it published on python org hint hint jan.
397 	X	nick coghlan ncoghlan at gmail com brisbane australia.
398 	X	as with nonlocal and global definition time statements could technically appear anywhere in the function body with their full effect but style guidelines would recommend placing them at the beginning of the function just after the.
399 	X	parentheses around the var list would not be permitted use multiple shared statements instead parentheses would however naturally permit the expressions themselves to span multiple lines.
400 	X	such a statement would readily cover the speed enhancement early binding and shared state use cases for the default argument hack indeed the compiler could conceivably detect if a shared value was never rebound and simply load the cell contents into each frame as a local variable in that case avoiding even the cell dereference overhead relative to the speed hack.
401 	X	the atdef phrasing slightly emphasises the early binding use case but still seems reasonable for the speed enhancement and shared state use.
402 	X	in contrast a keyword like shared which emphasised the shared state use case would feel far more out of place when used for speed enhancement or early binding as well as were far more likely to conflict with existing variables names.
403 	X	nick coghlan ncoghlan at gmail com brisbane australia.
404 	X	no i didnt miss it i left it out on purpose because i think messing with the runtime name lookup semantics is a terrible.
405 	X	you and others seem fond of it but namespace semantics are the heart and soul of why functions are so much faster than module level code and we shouldnt be touching that logic with a foot.
406 	X	adding a new cell based shared namespace that uses the same runtime lookup semantics as closures to replace existing uses of the default argument hack.
407 	X	sure thats a reasonable proposal it may still get rejected due to devils in the details but it has at least as much going for it as pep did.
408 	X	messing with normal locals from outside a function or providing an officially sanctioned way to convert global references to some other kind of reference after the function has already been defined.
409 	X	hell no thats a solution looking for a problem and the concept of eliminating the default argument hack shouldnt be burdened with that kind of.
410 	X	the secret to the speed of functions lies in the fact that the compiler knows all the names at compile time so it can generate appropriate load store operations for the different scopes array lookup for locals cell dereference for closure variables global or builtin lookup for everything else.
411 	X	this benefits not just cpython but all python implementations inside a function theyre allowed to assume that the only code changing the state of the locals is the function code.
412 	X	cell dereferencing allows for the fact that closure variables might change but are still reasonably close to locals in speed since the cells are referenced from an array and global and builtin lookup is the slowest of all since it involves actually looking up identifiers in namespace dictionaries.
413 	X	even a jit compiler like pypy can be more aggressive about optimising local and cell access than it can be about the officially shifting sands that are the global and builtin.
414 	X	this is why the nonlocal and global directives exist to tell the compiler to change how it treats certain.
415 	X	arguments including the associated default values are given additional special treatment due to their placement in the function.
416 	X	if we want to create a new namespace that is given special treatment by the compiler those are the two options that are even remotely viable placement in the function header after the entry or flagged via a new compiler directive and the precedent of nonlocal and global suggests that directive should occur inside the function body rather than anywhere else.
417 	X	def is primarily a proposal to avoid having to do the from future dance in defining a new keyword so ill modify it to the more explicit atdef to avoid confusion with decorators.
418 	X	a new compiler directive is my own preference due to the major semantic differences between how shared variables will be handled and how default arguments are handled and i now believe it makes sense to use nonlocal global and default arguments as the model for how that would work.
419 	X	general comment like raymond im inclined to favour a nice expression friendly exception handling syntax precisely because of the proliferation of relatively ad hoc alternative solutions in particular the popularity of were able to pass in default values to handle empty iterables.
420 	X	one use case for example is handing indexerror when retrieving an item from a sequence which currently has no nice standard spelling and isnt amenable to the pass in a default answer solution because it isnt a normal function call.
421 	X	another case not handled well by the status quo is when the default answer is expensive to calculate for some reason so you really only want to calculate it if you actually need.
422 	X	unfortunately like pep before it the hard part is coming up with a reasonable spelling that wont have people breaking out the torches and pitchforks if the pep is.
423 	X	this is also one of the possible spellings i came up with and it is my current least disliked.
424 	X	the main concern i have with it is the substantially different interpretation it gives to the for keyword as far as is practical we try to ensure that a given keyword relates to a consistent concept and the link to iteration is rather tenuous here its only present in the fact you can use an iterable of exception types rather than just one.
425 	X	aside from that concern i think it scores well on the readability.
426 	X	if would be better but as you already noted poses significant parsing challenges since it likely wouldnt be easy to require that ternary expressions use parentheses in this new construct but still allow the parentheses to be omitted in the general case.
427 	X	an html attachment was url http mail python org pipermail python ideas attachments ceaa attachment html.
428 	X	friendly exception handling syntax precisely because of the proliferation of relatively ad hoc alternative solutions in particular the popularity of were able to pass in default values to handle empty iterables.
429 	X	from a sequence which currently has no nice standard spelling and isnt amenable to the pass in a default answer solution because it isnt a normal function call.
430 	X	answer is expensive to calculate for some reason so you really only want to calculate it if you actually need.
431 	X	reasonable spelling that wont have people breaking out the torches and pitchforks if the pep is.
432 	X	the main concern i have with it is the substantially different interpretation it gives to the for keyword as far as is practical we try to ensure that a given keyword relates to a consistent concept and the link to iteration is rather tenuous here its only present in the fact you can use an iterable of exception types rather than just one.
433 	X	aside from that concern i think it scores well on the readability.
434 	X	parsing challenges since it likely wouldnt be easy to require that ternary expressions use parentheses in this new construct but still allow the parentheses to be omitted in the general case.
435 	X	from is another keyword choice worth considering here that already has no strong semantics of its own from x import y and yield from iter derive their meaning from the other keyword involved.
436 	X	an html attachment was url http mail python org pipermail python ideas attachments eea attachment html.
437 	X	just as pep introduced a means of value based conditions in an expression this system allows exception based conditions to be used as part of an.
438 	X	a number of functions and methods have parameters which will cause them to return a specified value instead of raising an.
439 	X	the current system is ad hoc and inconsistent and requires that each function be individually written to have this functionality not all support.
440 	X	dict get key default second positional argument in place of keyerror.
441 	X	next iter default second positional argument in place of stopiteration.
442 	X	list pop no way to return a default.
443 	X	i know there are some but i cant think of any.
444 	X	the current system requires that a function author predict the need for a default and implement support for.
445 	X	if this is not done a full try except block is.
446 	X	note that the specific syntax is open to three metric tons of bike.
447 	X	the proposal may well be rejected but even then is not useless it can be maintained as a collection of failed syntaxes for expression.
448 	X	just as the or operator and the three part if else expression give short circuiting methods of catching a falsy value and replacing it this syntax gives a short circuiting method of catching an exception and replacing.
449 	X	this currently works lst none value lst or no value.
450 	X	the proposal adds this lst value lst except indexerror no value.
451 	X	the exception object can be captured just as in a normal try except block return the next yielded or returned value from a generator value next it except stopiteration as e e args.
452 	X	this is effectively equivalent to try next it except stopiteration as e e args value.
453 	X	this ternary operator would be between lambda and if else in.
454 	X	multiple except keywords can be used and they will all catch exceptions raised in the original expression only value expr except exception as e default except exception as e default except exceptionn as e defaultn.
455 	X	this is not the same as either parenthesized form value yield next it except stopiteration as e end e args except typeerror error non string returned or raised value next it except stopiteration as e e args except indexerror none.
456 	X	the first form will catch an exception raised in either the original expression or in the default expression the second form will catch only one raised by the default.
457 	X	discussion on python ideas brought up the following syntax suggestions value expr except default if exception as e value expr except default for exception as e value expr except default from exception as e value expr except exception as e return default value expr except exception as e default value expr except exception as e try default value expr except exception as e continue with default value default except exception as e else expr value try expr except exception as e default value expr except exception as e pass default.
458 	X	in all cases default is an expression which will not be evaluated unless an exception is raised if as is used this expression may refer to the exception.
459 	X	it has also been suggested that a new keyword be created rather than reusing an existing.
460 	X	such proposals fall into the same structure as the last form but with a different keyword in place of.
461 	X	should the except expression be able to have a finally clause.
462 	X	no form of the proposal so far has included.
463 	X	commas between multiple except clauses where there are multiple except clauses should they be separated by commas.
464 	X	it may be easier for the parser that way value expr except exception as e default except exception as e default except exceptionn as e defaultn with an optional comma after the last as per tuple.
465 	X	downside omitting the comma would be syntactically valid and would have almost identical semantics but would nest the entire preceding expression in its exception catching rig a matching exception raised in the default clause would be caught by the subsequent except.
466 	X	as this difference is so subtle it runs the risk of were a major bug.
467 	X	this document is placed in the public.
468 	X	local variables mode indented text indent tabs mode nil sentence end double space t fill column coding utf.
469 	X	seq index no way to return a default str find vs str index hardcoded result vs exception min max keyword only default in place of valueerror for empty iterable.
470 	X	theres also a use case at the interactive prompt.
471 	X	e except zerodivisionerror as e e.
472 	X	currently capturing an exception at the interactive prompt to poke around at the details is annoyingly painful because doesnt capture exceptions by detauls.
473 	X	this section or a separate detailed semantics one is missing a detailed specification of the semantics in particular.
474 	X	what scope are subexpressions evaluated in if the as clause is permitted what is the scope of that name binding if the current scope then how does that square with the changes to list comprehensions in to always use a new scope for the iteration variables the same as generator expressions.
475 	X	keep in mind that the except expression will need to preserve the python except clause behaviour of unbinding the exception name after evaluating the subexpression if a new scope what impact does that have on what subexpressions are valid especially at class scope.
476 	X	what happens if an except expression is used as part of the except clause in an ordinary try statement or another except expression.
477 	X	i suspect defining these except expressions as creating a new transient scope akin to comprehensions and generator expressions will actually avoid a variety of issues in particular preventing leaking the name of the bound exception into the containing.
478 	X	i also suspect a transient scope would make the peps currently preferred colon based notation more palatable to some readers.
479 	X	nick coghlan ncoghlan at gmail com brisbane australia.
480 	X	oops i almost missed this and was going to point out the omission sorry.
481 	X	so in x except zerodivisionerror an error will be trapped evaluating x not just x because has higher precedence than except as we would all.
482 	X	i dont see though i could be missing something that finally makes any sense inside an.
483 	X	finally introduces an action to be performed regardless of whether a preceding operation raised an.
484 	X	here we are evaluating an expression and to tack on i want to perform this action on the end of an expression seems weird and better done by the existing try finally mechanism.
485 	X	it did occur to me briefly that it might be used to provide a final default x eval userexpression except nameerror you forgot to define something except zerodivisionerror division by zero finally some error or other but this would be pretty well equivalent to using a bare except clause or except baseexception.
486 	X	oh yes by the way i think that a bare except should be legal for consistency albeit.
487 	X	i would argue against comma separators were allowed they add extra grit to the.
488 	X	when the parser sees a comma it doesnt know if this is terminating the except clause or part of a tuple default value value expr except exception xy except exception z the ambiguity is resolved when it sees another except.
489 	X	the intervening comma just adds confusion and makes the parsers job harder.
490 	X	and for what its worth if you did want a element tuple as your default value you might write the ugly value expr except exception x except exception z yuk please put x inside.
491 	X	with no commas the subtly different semantics you mention would be distinguished transparently by value expr except exception default except exception default value expr except exception default except exception default in the first form exception will not be caught if it is raised evaluating.
492 	X	an html attachment was url http mail python org pipermail python ideas attachments cca attachment html.
493 	X	the colon in there breaks the basic python concept of having colons end headers which start a new block of statements.
494 	X	i think it would be better to have the pep focus on a solution that doesnt introduce more lambda like syntax to the language.
495 	X	please also add examples where the expression notation is used as part of a larger expression e g.
496 	X	value lst except indexerror value lst except indexerror if x else value lst except indexerror if lst except indexerror false else value lst except indexerror lst d a lst except indexerror b lst except indexerror if lst else c lst.
497 	X	try x lst except indexerror x lst except exception lst.
498 	X	key lambda x x except indexerror x.
499 	X	imo the colon in there makes the code less readable than the variants which try to reuse a.
500 	X	professional python services directly from the source feb released mxodbc connect http egenix com go.
501 	X	try our mxodbc connect python database interface for free.
502 	X	egenix com software skills and services gmbh pastor loeh d langenfeld.
503 	X	marc andre lemburg registered at amtsgericht duesseldorf hrb http www egenix com company contact.
504 	X	on the syntax front one option to keep in mind is the yield expression solution require the surrounding parentheses except when it is used as a standalone statement as the sole expression on the rhs of an assignment statement or perhaps as the sole positional argument to a function.
505 	X	that approach keeps the simple cases clean while making more complex cases a bit easier to.
506 	X	i think its worth keeping the name binding since that would be very hard to add later but restricting the initial proposal to a single except clause would make.
507 	X	without the block structure to help it is awfully difficult to associate multiple except clauses with their corresponding initial expression and if you really want to have different results for different exceptions you can pass the caught exception to a translator.
508 	X	this was one of the main concerns with pep as well and the general principle of use it only if it helps readability seems to have kept that under.
509 	X	as with pep i think this is more about the existing workarounds for the lack of a language level solution causing enough problems that the new syntax is were suggested primarily to say stop doing that.
510 	X	an html attachment was url http mail python org pipermail python ideas attachments bdbe attachment html.
511 	X	right unless guido manages to pull another pep style i have come up with a clever idea nobody else thought of and likely only the bdfl could sell to anyone else i think the colon based version chris has written up in the pep currently counts as least bad of the alternatives proposed and sufficiently tolerable to be judged better than the assortment of relatively ad hoc workarounds we have at the moment.
512 	X	that said i did suggest using the function return type annotation marker as a possibility and thats not currently listed in the pep.
513 	X	i do slightly prefer that to the colon based version although we may want to go with the generator expression approach of always requiring parentheses around it with function call parentheses counting.
514 	X	on an unrelated tangent as i forget which part of the thread it came up in having to switch from the compiler checked and code completion friendly obj attr to the more opaque from an automated code analysis point of view getattr obj attr none is another symptom of this current limitation that should be listed in the motivation section of the.
515 	X	nick coghlan ncoghlan at gmail com brisbane australia.
516 	X	also added though i put it into rationale rather than.
517 	X	i think there should be a mention in the pep of other languages with exception handling expressions like smls.
518 	X	hd handle empty val it int.
519 	X	i think the parens makes it look very clean in such simple.
520 	X	gmt chris angelico rosuav at gmail com.
521 	X	an html attachment was url http mail python org pipermail python ideas attachments dec attachment html.
522 	X	its not that it cant happen its that someone would need to build a case of a similar calibre to the one chris angelico is currently putting together for except expressions in pep.
523 	X	however its a much bigger challenge in this case as itertools takewhile exists whereas theres currently no way to do exception handling as part of a larger expression without major.
524 	X	re reading andrews post at http stupidpythonideas blogspot com au syntactic takewhile html im actually more intrigued by haskells shorthand for lambda functions that consist of a single binary.
525 	X	isprime all n p for p in takewhile lambda p p n primes seen.
526 	X	is there are a nicer way to write that.
527 	X	thats not very readable to most python programmers but what if you could write something like.
528 	X	isprime all n p for p in takewhile n primes seen.
529 	X	this is somewhat similar to the implicit lambda proposal in http legacy python org dev peps pep but with the following two essential differences.
530 	X	the parentheses would be required as per generator expressions and as is were discussed for except expressions by using a.
531 	X	token within the implicit lambda you would create a lambda that takes a single.
532 	X	if there is no such token then it would take no.
533 	X	however the examples in that pep are no longer useful as they have since been addressed by dedicated constructs conditional expressions in pep and context managers in pep.
534 	X	note that im not saying this is a good.
535 	X	however i am saying i think it is an idea that may be worth exploring further to see if it also addresses at least some of the use cases given in peps and especially in combination with pep by making custom key and predicate functions easier to.
536 	X	nick coghlan ncoghlan at gmail com brisbane australia.
537 	X	in generator expressions by overloading the while keyword.
538 	X	thats really not a shorthand for lambda its a combination of other features that make lambdas often.
539 	X	i think the c boost lambda example is a better fit.
540 	X	the is a lot better than the or i suggested especially to people who do a lot of sql programming in python and already use.
541 	X	as an inline parameter and using a colon makes it explicit without adding too much visual.
542 	X	the only concern is whether using up one of the handful of as yet unused ascii symbols raises the bar a little too high.
543 	X	would it be worth extending this to multiple arguments.
544 	X	i think it would be handy but i cant think of any way to make it look nearly as good as the and arg.
545 	X	obviously this should still be a one arg lambda that just uses its parameter repeatedly.
546 	X	looking at the other db api param styles this is hideous because of the way it uses colons twice.
547 	X	something like this wouldnt be too bad except that it already has a much more useful meaning set literals.
548 	X	so really the best i can come up with is the boost lambda version i already didnt like and you already dismissed without comment.
549 	X	on the other hand any expression this complexeven.
550 	X	already starting to look pretty bad as an implicit lambda and the downsides of an explicit lambda go down the longer it.
551 	X	so maybe the best answer is.
552 	X	lambda a b c a x b x c.
553 	X	anyway we can always start with just and argument forms and come back to expand the idea later right.
554 	X	ill start digging up some examples it is hard to predict how nice this will look until we see it in a wide range of realistic.
555 	X	breaks in generator expressions by overloading the while keyword.
556 	X	however theres the problem of multi argument.
557 	X	the number looks to much like.
558 	X	if anybody ever asks me why i prefer c to c my answer will be simple its becauseslejfp q e eidc.
559 	X	wait i dont think that was nul.
560 	X	an html attachment was url http mail python org pipermail python ideas attachments dcc attachment html.
561 	X	breaks in generator expressions by overloading the while keyword.
562 	X	doesnt that just make it even more like perl where arguments are always passed as an array.
563 	X	anyway presumably you mean that this.
564 	X	lambda args args x args x args.
565 	X	i think thats horribly unreadablepartly because of the use of args in the first place and partly because.
566 	X	i think the best answer is the one i suggested aboveand which i think nick implicitly assumed because hes smart enough to get there directly at least initially just do argument and argument.
567 	X	as long as you leave the door open for extended syntaxes in a future proposal we dont need to figure them out.
568 	X	breaks in generator expressions by overloading the while keyword.
569 	X	the question mark still looks like.
570 	X	what about a reserved word instead.
571 	X	if anybody ever asks me why i prefer c to c my answer will be simple its becauseslejfp q e eidc.
572 	X	wait i dont think that was nul.
573 	X	an html attachment was url http mail python org pipermail python ideas attachments acbfe attachment html.
574 	X	breaks in generator expressions by overloading the while keyword.
575 	X	i cant think of any existing keyword that a is unambiguous in that syntax or b doesnt read like someone with wernickes aphasia substituting random.
576 	X	but i suppose a new keyword could work.
577 	X	and that seems like it could be extended to multiple arguments pretty nicely by adding a keyword schema or just a parse rule that matches arg digit instead of arg.
578 	X	however im pretty sure arg is used in lots of real life code especially in this context.
579 	X	any suggestions for a better keyword.
580 	X	python is built as most open source projects are on a model of a king with his ministers and citizens.
581 	X	the king of course is normally guido core devs are guidos ministers and close advisers everyone else who uses python is a.
582 	X	drawing the line between ministers and citizens is a tad harder than in a parliamentary structure so im going to horrendously cheat and say that ministers can be appointed and or can step down very easily and.
583 	X	a pep is basically a petition raised and.
584 	X	it has a champion at least by the time it becomes a pep and the champion will seek to demonstrate how the proposal will be of great.
585 	X	this doesnt strictly equate to number of signatures which is how these sorts of petitions are often treated in modern politics its more about strength of.
586 	X	so not only is this system not democratic in the obvious sense of majority rules if you get more votes than the pep is approved its also almost never even about gathering numerical support which is what this would be able to show.
587 	X	there have been a few times when popular support is canvassed pep for instance but even then its certainly not most popular option wins it wasnt then although the chosen syntax was clearly in the popular group rather than the less popular group.
588 	X	recording who has fully read the pep and agrees with every little part of it would be nearly impossible as the pep evolves so by the latest definition its impossible to calculate as well as were almost never.
589 	X	searching the python ideas archive for the pep number and reading through the discussion is probably the only way to find out after the event so i sympathize with the desire to simply eyeball a figure and see but i cant imagine it were truly useful in all that many.
590 	X	some subprojects like idle function identically with a different.
591 	X	assuming the function is intended to and documented as using the passed in vertices using or is simply wrong in two ways.
592 	X	if vertices is a falsey value of the wrong type say it will be silently replaced by instead of triggering an exception usually a typeerror or attributeerror.
593 	X	if vertices is a falsey value of the right type say collections deque it will be silently replaced by.
594 	X	in the first case the code is hiding a bug in the.
595 	X	in the second case its a bug in the called.
596 	X	i am very sad to see how many people still use the error prone x or y idiom inappropriately a full decade after pep was.
597 	X	depending on where you are in the world it was ten years ago today or.
598 	X	x or y still has its uses but testing for none is not one of.
599 	X	as mentioned in pep its the explanations and justifications far more than the votes that make the real.
600 	X	that said though the votes are a great way of gauging the support levels for a set of similar proposals eg syntactic options where the proposer of the idea doesnt particularly care which of the options is.
601 	X	its still not in any way democratic as evidenced by the vote in pep which had four options clearly better than the others but the one thats now in the language was the last of those four in the.
602 	X	https www python org dev peps pep https www python org dev peps pep.
603 	X	quite often here a few members overwhelm the email exchanges and the ideas no matter how clearly youve explained them get buried in your very first email which you have to repeat over and over and basically the discussion becomes answering different here and there criticisms of a particular.
604 	X	i mean the conversation can quickly become only marginally relevant to the entirety of your.
605 	X	i think stack exchange can sort out that chaos considerably and if core developers dont really are looking for consensus thats okay at least the convesation is sorted.
606 	X	every new visitor has a chance of first seeing the idea proposed at the top of the page then the comments and.
607 	X	paul rubin among others of similar mind.
608 	X	alas it didnt to pythons parser one token lookahead isnt enough to distinguish.
609 	X	if a b c then else.
610 	X	and python wont grow anything a simple parser cant sort.
611 	X	everythings cool if parens are required around a conditional expression though in which case.
612 	X	x if e then e else e syntaxerror x if e then e else e cool x if e then e else e cool x if e then e else e syntaxerror x if e then e else e cool x if if e then e else e then e else e syntaxerror x if if e then e else e then e else e cool.
613 	X	seems a mixed bag but im more interested in readability and the functionality than in minimizing keystrokes requiring parens doesnt hurt the goals i care.
614 	X	implemented but not checked in ly yrs tim.
615 	X	is the thread in c l py on conditional expressions leading in the direction of actually getting added to the language or wer tims experiments done just to show its possible.
616 	X	we pythonlabs were wondering whether to reserve any more keywords for.
617 	X	then was a natural candidate for this specific.
618 	X	guido and i have been playing with.
619 	X	if it proves to be a low hassle low impact change that works well the intent is to get it in for later this.
620 	X	doesnt look likely to me at this point but dont.
621 	X	please dont tell me thats more than a bad joke.
622 	X	tim we pythonlabs were wondering whether to reserve any more keywords tim for.
623 	X	then was a natural candidate for this specific.
624 	X	tim guido and i have been playing with.
625 	X	if it proves to be a tim low hassle low impact change that works well the intent is to get tim it in for later this.
626 	X	doesnt look likely to me at tim this point but dont.
627 	X	regardless if you think this could make it into i hope if you proceed it will get a pep a reasonable amount of time before the cvs wink.
628 	X	it seems downright weird to me that the syntactic baggage necessary to write a conditional expression is greater the the baggage necessary to write an if statement new then keyword parens required for disambiguation.
629 	X	the parens function pretty much as in c java perl its a step away from indentation based block structure and toward delimiter based block.
630 	X	if you add it i think it will be harder to justify the lack of delimiter based block stucture at the statement.
631 	X	it will just be one more argument in the arsenal of people whose knee jerk reaction to pythons block structure is to whine about.
632 	X	tim skip montanaro is the thread in c l py on conditional expressions leading in the direction of actually getting added to the language or wer tims experiments done just to show its possible.
633 	X	guido can exempt himself from the pep process if he feels like.
634 	X	if he does i expect ill be in the retroactive pep business.
635 	X	there are many ways a conditional expression could be.
636 	X	this is aiming at the easiest way to read harder to read ways could be introduced with less disruption of the kinds youre focusing.
637 	X	im not concerned about bad arguments versus wink.
638 	X	regardless if you think this could make it into i hope if you proceed it will get a pep a reasonable amount of time before the cvs wink.
639 	X	tim guido can exempt himself from the pep process if he feels like.
640 	X	tim if he does i expect ill be in the retroactive pep business tim.
641 	X	im sure he can but that doesnt mean he ought.
642 	X	the parens function pretty much as in c java perl.
643 	X	tim sorry i dont see the.
644 	X	well the examples i saw looked like.
645 	X	x if if e then e else e then e else e.
646 	X	seems to me that those inner parens are there to separate the inner conditional from the trailing parts of the outer conditional.
647 	X	x if if e then e else e then e else e.
648 	X	whether or not thats what they are in a language parser sense they sure look like it to the human.
649 	X	if you add it i think it will be harder to justify the lack of delimiter based block stucture at the statement.
650 	X	it will just be one more argument in the arsenal of people whose knee jerk reaction to pythons block structure is to whine about.
651 	X	tim im not concerned about bad arguments versus wink.
652 	X	that st argument will be a little stronger than the other because it will go something like why cant we have delimiters for block statements.
653 	X	after all we have them in conditional.
654 	X	the reference instead of were to another language will be to python.
655 	X	i think you must be misunderstanding the proposal which is to add.
656 	X	if expr then expr else expr.
657 	X	as an alternative to the expression.
658 	X	heres a preliminary patch which i wont apply until i have more confidence that this is acceptable to the community.
659 	X	http sourceforge net tracker index phpfunc detail aid group id atid.
660 	X	the parens in this proposal my version act no different than any other use of parentheses in python.
661 	X	basically you need to add parentheses to disambiguate expressions.
662 	X	if otherwise the if keyword would be the start of a statement because if at the start of a statement starts an if statement and the parser cant look ahead for the then keyword.
663 	X	if the conditional expression is to be combined with a unary or binary.
664 	X	some examples where no parentheses are needed note that a comma binds less tight than a conditional expression same as for lambda.
665 	X	some examples where parentheses are required.
666 	X	in some situations im not sure whats right the un parenthesized form looks weird although its not neede to avoid ambiguity.
667 	X	id be happy to discuss this.
668 	X	im not happy with responses like is this a bad joke.
669 	X	i dont understand how this could be an argument in the arsenal of the anti python.
670 	X	guido van rossum home page http www python org guido.
671 	X	they are syntactically unnecessary they are mostly for guidance of the human.
672 	X	if i saw a piece of code that read.
673 	X	x if if if x then y else z then p else q then a else b.
674 	X	i would get a strong urge to commit illegal violence against the.
675 	X	if on the other hand i saw.
676 	X	x if if if x then y else z then p else q then a else b.
677 	X	i might be willing to sit down and figure out what it meant maybe with the help of a parentheses balancing command in my.
678 	X	a conditional expression is still an.
679 	X	curly brances are a statement level.
680 	X	where is the similarity between the use of and in c java c perl.
681 	X	guido van rossum home page http www python org guido.
682 	X	im sorry if it hit a bad nerve but i did skip this whole thread on c l py thinking that this could surely not be seriously meant so i guess dont have the understanding of the motivation behind the proposal that i could have.
683 	X	i know theres been a long time request for this feature supposedly from people coming to python from c but whats the real reason for adding it now without even a pep.
684 	X	does it really add enough to the language to justify the bloat.
685 	X	i misunderstood about the need for.
686 	X	i had only been watching the thread in python list with one.
687 	X	i thought it was just some python list riff raff throwing around.
688 	X	then i saw that tim was part of the rabble.
689 	X	i still didnt notice the ive implemented it but not yet checked it in bit until someone else did and asked about.
690 	X	i then went looking for a pep but didnt see.
691 	X	i hadnt seen any discussion on python dev.
692 	X	maybe i missed it because python list and python dev mail wind up in the same.
693 	X	guido if i saw a piece of code that read.
694 	X	guido x if if if x then y else z then p else q then a else b.
695 	X	guido i would get a strong urge to commit illegal violence against the guido.
696 	X	if on the other hand i saw.
697 	X	guido x if if if x then y else z then p else q then a else b.
698 	X	guido i might be willing to sit down and figure out what it meant guido maybe with the help of a parentheses balancing command in my guido.
699 	X	pythons block structured statement syntax keep you from composing just monstrosities at the statement.
700 	X	im not sure what makes them more appealing at the expression.
701 	X	how many levels of parens would be required before you had a strong urge to commit illegal violence against someone using a parenthesized conditional expression.
702 	X	i guess thats what it boils down to for.
703 	X	you can easily write much more inscrutable code with the new conditional expression than you could.
704 	X	i think that will make python somewhat less of a cpe.
705 	X	i dont think it falls into the same category of the more esoteric features of the language generators metaclasses methods etc that beginners can safely.
706 	X	conditional expressions are pretty basic stuff and this makes it easier to write fairly inscrutable conditional.
707 	X	a conditional expression guido is still an.
708 	X	curly brances are a statement level guido.
709 	X	where is the similarity between the guido use of and in c java c perl.
710 	X	from the point of view of a human trying to understand whats written i think they will serve much the same purpose.
711 	X	white space is viewed is were essential enough to understanding that python uses it for block.
712 	X	in particular i cant nest two compound statements on the same.
713 	X	with this new addition to expressions it appears you will be able to create arbitrarily complex expressions all on one.
714 	X	or any other language its in java perl c icon haskell.
715 	X	people have been arguing for years how to do.
716 	X	well see about the pep i think its a good idea to motivate the change.
717 	X	the language bloat is very small imo much less than augmented assignment or list comprehensions actually and the benefits are quite substantial when used.
718 	X	like augmented assignment the conditional expression matches how i think about certain situations its nice to finally be able to write them down.
719 	X	its especially useful in function arguments in string formatting operations or in lambdas if you like lambdas.
720 	X	guido van rossum home page http www python org guido.
721 	X	i guess you were thinking that the parentheses were required as for if in c.
722 	X	as soon as there is an if inside the condition of the first.
723 	X	you can write fortran in any language weve been through this.
724 	X	potential abuse is not enough to prevent it likely abuse.
725 	X	it also makes it easier to write what you thinkk.
726 	X	previous versions of python in no way impaired your ability to create arbitrarily complex expressions all on one.
727 	X	guido van rossum home page http www python org guido.
728 	X	skip was responding to the c l py discussion which you probably havent.
729 	X	i started it there sometime over the weekend and the rules at that time required parens in all cases which is just what was implemented at the time.
730 	X	trying to put a finger on why i think this proposed new syntax looks ugly i would say that my biggest problem is that it blurs some of the visual distictions between statements and expressions that i find helpful for quickly locating the interesting parts of a piece of.
731 	X	i assume this has some parallel to list comprehensions that way but i fail to see the same blatant conceptual beauty in this proposal motivating the unfamiliar.
732 	X	and what exactly qualifies you as a language designer.
733 	X	guido van rossum home page http www python org guido.
734 	X	because a and b or c burns you when b evaluates to false but a and b or c is a.
735 	X	which sets x to the singleton tuple.
736 	X	this is an old potential confusion though much the same as the current.
737 	X	but thats because its a top level expression beginning with if not because of the right.
738 	X	in the patched python this works fine.
739 	X	file stdin line if then else syntaxerror invalid syntax.
740 	X	file stdin line x if then else syntaxerror invalid syntax.
741 	X	i say odd because theres no question about what they.
742 	X	print sys stderr if then else and print if then else.
743 	X	dont look particularly weird but also raise.
744 	X	as a matter of taste i was most surprised by the.
745 	X	i doubt python will qualify as a cpe language even if conditional expressions are left.
746 	X	these dont bother me any more than.
747 	X	but it groups differently the else part is.
748 	X	thats too much work for the parser to get.
749 	X	only because the examples are so.
750 	X	they act the same as lambda in this.
751 	X	because the conditional ends in something that pulls in all following binary operators and their operands until it hits a i find it safer not to let it accept an operator at the.
752 	X	guido van rossum home page http www python org guido.
753 	X	to explain this perhaps a bit better the else keyword acts as the right side of a low priority binary operator with respect to the expression that.
754 	X	it would be unpleasant if the if keyword acted as the left side of a high priority operator to the expression that preceeds.
755 	X	again think of what this would mean.
756 	X	if x then y else z.
757 	X	guido van rossum home page http www python org guido.
758 	X	sorry but i feel i should say this i heartly agree i e.
759 	X	im fine with that but it is.
760 	X	some examples where parentheses are required if then else.
761 	X	but thats because its a top level expression beginning with if not because of the right.
762 	X	in the patched python this works fine x if then else x.
763 	X	but it groups differently the else part is.
764 	X	yes i understand how it groups and am fine with.
765 	X	the question i asked is the one i asked wink the paretheses arent required because of the but solely because its a top level expression.
766 	X	this is by way of contrast with the example that was next to it in the original.
767 	X	where unlike the example the parens are also required if you stick that on the rhs of an.
768 	X	i thought both were intended to be examples of.
769 	X	you need to add parentheses to disambiguate expressions if the conditional expression is to be combined with a unary or binary.
770 	X	as and both feel like wink binary operators in these.
771 	X	otoh these seem odd if then else file stdin line if then else syntaxerror invalid syntax.
772 	X	the precedence pull of does make it more tempting to misread.
773 	X	and im personally happier with excess parentheses.
774 	X	the reason for considering it right now is a rapidly closing window of opportunity goes out later this.
775 	X	a fellow on c l py is plugging away at a pep eric raymond submitted a working patch for cs in january of jim fulton loved the idea then but not particularly the.
776 	X	spelling david ascher reported that lack of a conditional was a faq in his classes then etc.
777 	X	syntax and guido eventually remembered although i think he forgot it this time around that algol used the obvious if then.
778 	X	the solution can be the same as what algol used if outside parentheses is a statement and inside parentheses is an.
779 	X	its a bit of a grammar rearrangement but totally.
780 	X	however the added keyword means it wont be in.
781 	X	the lively discussion means that erics patch will have a hard time getting in.
782 	X	the only difference between then and now is s.
783 	X	i expect most people would say it does by definition ill adjust my beliefs to whatever guido decides wink.
784 	X	has an if condexpexp syntax been considered.
785 	X	it would have the advantage that existing syntax sensitive editors would handle without.
786 	X	i think conditional exprs badly needed but the if then else syntax seems too verbose for use inside.
787 	X	tim peters writes paul svensson i know theres been a long time request for this feature supposedly from people coming to python from c but whats the real reason for adding it now without even a pep.
788 	X	the reason for considering it right now is a rapidly closing window of opportunity goes out later this.
789 	X	a fellow on c l py is plugging away at a pep eric raymond submitted a working patch for cs in january of jim fulton loved the idea then but not particularly the.
790 	X	spelling david ascher reported that lack of a conditional was a faq in his classes then etc.
791 	X	syntax and guido eventually remembered although i think he forgot it this time around that algol used the obvious if then.
792 	X	the solution can be the same as what algol used if outside parentheses is a statement and inside parentheses is an.
793 	X	its a bit of a grammar rearrangement but totally.
794 	X	however the added keyword means it wont be in.
795 	X	the lively discussion means that erics patch will have a hard time getting in.
796 	X	the only difference between then and now is s.
797 	X	does it really add enough to the language to justify the bloat.
798 	X	i expect most people would say it does by definition ill adjust my beliefs to whatever guido decides wink.
799 	X	python dev mailing list python dev python org http mail python org mailman listinfo python dev.
800 	X	that looks like a function call and function arguments are always evaluated in python and that works against seeing this as a short circuiting construct.
801 	X	q if y then x y else copysign infinity x.
802 	X	i dont see any problem there and am responsible for two context sensitive python edit gimmicks and used to be responsible for a third all i expect to need to do is get then at token level colored as keyword.
803 	X	good then you wont be tempted to abuse it wink.
804 	X	best in small doses ly yrs tim.
805 	X	has the x if c else y idea been totally rejected.
806 	X	it doesnt require a new keyword or parentheses to disambiguate from an if.
807 	X	greg ewing computer science dept university of canterbury a citizen of newzealandcorp a christchurch new zealand wholly owned subsidiary of usa greg cosc canterbury ac nz.
808 	X	i was its only fan within pythonlabs and i was.
809 	X	the trick is to view if c else as a new short circuiting infix binary operator for each c and then it makes great even elegant.
810 	X	but its apparently a major strain to see it that.
811 	X	it had at least one sworn mortal enemy and i think fred drake was so upset at the idea that he couldnt.
812 	X	bad sign in a wordsmith wink ly yrs tim.
813 	X	paul svensson paul python svensson org.
814 	X	the less cumbersome syntax i suggest is.
815 	X	but some of it is a useful first.
816 	X	im on the concept of conditional.
817 	X	and i dont give a damn whether they are spelled xy z or if x then y else z.
818 	X	imo the motivation of people asking for conditional expressions is that they want to write down complex constructs without having to name these.
819 	X	otherwise it is easy to put the code into a function or method and call this.
820 	X	in most cases this will improve the readability of the code considerable since people are alreaday trained to choose proper identifiers instead of x y z.
821 	X	conditional expressions will be abused as an obfuscation device in the same way as lambdas have been used.
822 	X	they will make it far too easy to write obfuscated perlish.
823 	X	regards peter peter funk oldenburger d ganderkesee germany fax office artcom gmbh grazer d bremen germany.
824 	X	what about autoindentation if you split the line.
825 	X	will one need a trailing if when splitting across lines.
826 	X	with the if then else syntax we will be splitting lines in.
827 	X	and deep down inside python does not really like that.
828 	X	i actually prefer to split even concise syntax for readability and python is friendlier to splitting functional expressions than to splitting operator.
829 	X	functional syntax would do the right thing automatically even when nested because it does not involve changing the syntax of the.
830 	X	it just introduces lazy call by name.
831 	X	guido can we have user defineable call by name functions pleeeease.
832 	X	actually i lied little nested if confuses emacs python mode but change the name to say ifte short for ifthenelse and it autoindents beautyfully.
833 	X	i think conditional exprs badly needed but the if then else syntax seems too verbose for use inside.
834 	X	good then you wont be tempted to abuse it wink.
835 	X	but one should be tempted to use them otherwise one can just drop the feature preventing abuse.
836 	X	note that z if a then x else y is syntactic.
837 	X	i can see that z a.
838 	X	x y is somewhat cryptic but no more than x y x y or x y is exponentiation in most other languages.
839 	X	of course z if axy is just.
840 	X	best in small doses ly yrs tim.
841 	X	python dev mailing list python dev python org http mail python org mailman listinfo python dev.
842 	X	tim peters writes daniel mahler has an if condexpexp syntax been considered.
843 	X	that looks like a function call and function arguments are always evaluated in python and that works against seeing this as a short circuiting construct.
844 	X	q if y then x y else copysign infinity x.
845 	X	i do not see a problem almost all of the infix operators also use eager evaluation but use lazy evaluation so operator syntax by itself does not imply or even suggest nonstandard evaluation order and there is no systematic syntactic convention to indicate.
846 	X	you just have to remember that and and or are the only lazy operators you might count lambda out of by my count.
847 	X	anyway i had to check my reference card to see they were the only.
848 	X	i do not see why this is any more problematic for functional.
849 	X	since there is no generic way of indicating lazyness at the expression level kind of indicates it at the statement level people will just have to remember that conditionals are special no matter which syntax is.
850 	X	otoh conditionals are like functions in the syntactic sense they take expressions as arguments and can be used anywhere expressions can and in the mathematical sense in the absence of side effects in the argument expressions the result is a mathematical function of the arguments.
851 	X	in lazy languages haskellmirandagofer if is just a regular.
852 	X	hmmm now that i think about it i wonder why python makes a strong distinction between statements and expressions but does not distinguish between procedures and functions.
853 	X	it would have the advantage that existing syntax sensitive editors would handle without.
854 	X	i dont see any problem there and am responsible for two context sensitive python edit gimmicks and used to be responsible for a third all i expect to need to do is get then at token level colored as keyword.
855 	X	it actually read more easily to me the first.
856 	X	as i said on python list.
857 	X	unit is meters if metric else feet.
858 	X	at first i didnt like that it split the two options but i think that that actually helps you to keep clear in your head what the default is and what the alternative.
859 	X	theyre two different languages with different syntaxes different semantics and very different.
860 	X	i wonder if a native speaker of german or cantonese would agree with you.
861 	X	i really dont see what the big fuss is.
862 	X	algol got it right years ago with if x then y else z and nearly.
863 	X	every language since then has either made conditional expressions painfully obfuscated lisp c and its ilk or forgotten them entirely python.
864 	X	theyre very useful and just as easily abused as other powerful constructs like list comprehensions regular expressions or.
865 	X	but just because something can be abused doesnt mean it should be.
866 	X	greg greg ward geek gward python net http starship python net gward vote cthulhu why settle for a lesser evil.
867 	X	also i believe it would create a parsing problem in list comprehensions compare these two.
868 	X	x for x in range if prime x if is part of list.
869 	X	x for x in range if small else range if then construct.
870 	X	guido van rossum home page http www python org guido.
871 	X	even after reading daniels passionate plea if condexprexpr looks ugly to.
872 	X	it also doesnt solve the parsing ambiguity problem it still cant be allowed in an expression that starts a line because the parser doesnt know whether its an if expression or an if statement without many tokens of.
873 	X	guido van rossum home page http www python org guido.
874 	X	in order to do short circuiting evaluation the name would have to be recognized by the parser which means it would have to be a new.
875 	X	it looks too much like a function call for my.
876 	X	if cond then expr else expr.
877 	X	guido van rossum home page http www python org guido.
878 	X	one of the most cherished of numpy operations is.
879 	X	which creates an array x shaped like.
880 	X	each element of this result is set to the corresponding element of t or f depending on whether the corresponding element of condition is true or.
881 	X	either or both of t and f can be a scalar but otherwise must be the same shape as.
882 	X	the reason this is cherished is of course that it avoids a scalar loop with an if test in.
883 	X	now in your new syntax this is essentially.
884 	X	x if condition then t else f.
885 	X	therefore it would be cool if the implementation was x.
886 	X	this slot could be overwritten by classes like numerics.
887 	X	if condition was a list this might be useful.
888 	X	never mind how i spelled where.
889 	X	ducking down behind the barricade ly yours.
890 	X	i once learned a language where you could say x y if c and it was.
891 	X	paul now in your new syntax this is essentially.
892 	X	paul x if condition then t else f.
893 	X	paul therefore it would be cool if the implementation was paul x.
894 	X	this slot could be overwritten by paul classes like numerics.
895 	X	if condition was a list this might paul be useful.
896 	X	unfortunately that requires both t and f to be.
897 	X	in a numpy setting thats probably not a big deal because in most cases both values will be used in the resulting.
898 	X	in a scalar context the short circuit nature of the expression is often.
899 	X	if implemented as any kind of function youve lost that.
900 	X	skip montanaro skip pobox com http www mojam com http www musi cal com.
901 	X	in order to do short circuiting evaluation the name would have to be recognized by the parser which means it would have to be a new.
902 	X	in a conventional compiler architecture i would expect this to be a static analysis and code generation.
903 	X	in languages that have multiple parameter passing disciplines eg pascal simula the parser does not track how any given argument is were.
904 	X	it looks too much like a function call for my.
905 	X	i am trying to make the case that it is a function call with args were passed by.
906 	X	or at least it can very sensibly be viewed and implemented that.
907 	X	if cond then expr else expr.
908 	X	python dev mailing list python dev python org http mail python org mailman listinfo python dev.
909 	X	this just shows how little you know about how python is.
910 	X	python has no by name argument passing mechanisms and adding one just for this purpose strikes me as the tail wagging the.
911 	X	guido van rossum home page http www python org guido.
912 	X	guido van rossum writes in order to do short circuiting evaluation the name would have to be recognized by the parser which means it would have to be a new.
913 	X	in a conventional compiler architecture i would expect this to be a static analysis and code generation.
914 	X	in languages that have multiple parameter passing disciplines eg pascal simula the parser does not track how any given argument is were.
915 	X	this just shows how little you know about how python is.
916 	X	it looks too much like a function call for my.
917 	X	i am trying to make the case that it is a function call with args were passed by.
918 	X	or at least it can very sensibly be viewed and implemented that.
919 	X	python has no by name argument passing mechanisms and adding one just for this purpose strikes me as the tail wagging the.
920 	X	but it need not be the only one.
921 	X	what if the where function was passed two callable objects representing closures.
922 	X	if x then y else z x.
923 	X	im not saying im necessarily in favor of where.
924 	X	it is a kind of innovative and i havent thought through all of the.
925 	X	i think it makes sense in its own right no need for tricks.
926 	X	parentheses would need to be required in that case.
927 	X	x for x in range if small else range.
928 	X	i dont see that as a big problem wanting to put a conditional expression in that position is going to be fairly.
929 	X	greg ewing computer science dept university of canterbury a citizen of newzealandcorp a christchurch new zealand wholly owned subsidiary of usa greg cosc canterbury ac nz.
930 	X	i just showed the proposed conditional expression syntax to two colleagues and asked them how they would write the sign function for negative for zero for.
931 	X	well ok one of them tested negative then positive then returned zero as the else but thats a.
932 	X	i think most users will expect elif to work in expressions just as it does in statements is this already part of the new syntax.
933 	X	the information contained in this message is confidential and is intended for the addressee s.
934 	X	if you have received this message in error or there are any problems please notify the originator.
935 	X	the unauthorized use disclosure copying or alteration of this message is strictly.
936 	X	baltimore technologies plc will not be liable for direct special indirect or consequential damages arising from alteration of the contents of this message by a third party or as a result of any virus were passed.
937 	X	in addition certain marketing collateral may be added from time to time to promote baltimore technologies products services global e security or appearance at trade shows and.
938 	X	this footnote confirms that this email message is swept by baltimore mimesweeper for content security threats including computer.
939 	X	i guess ive lost track of all the proposals here whats the current main proposal.
940 	X	if cond then expr else expr.
941 	X	not too bad but i doubt it will save me much time in real probably a net loss even if i could use this from time to time its not like i have to use much brain power to spell it out in todays.
942 	X	fl i guess ive lost track of all the proposals here whats fl the current main proposal.
943 	X	another good reason why there should be a pep.
944 	X	we talked about it yesterday and decided against trying to get anything like this into.
945 	X	almost the parentheses can be left out in some cases e g.
946 	X	i agree with greg wilson that elif should be added.
947 	X	i went looking through the stdandard library for places that could use it and basically didnt find any in the minutes before i got.
948 	X	so the patch is still there but this wont make it into.
949 	X	guido van rossum home page http www python org guido.
950 	X	a professor in college took points off one of my programs because i didnt test for.
951 	X	he explained that testing for either negative or positive first left you vulnerable on s complement machines where comparisons for or just checked the sign bit and either form of s comp would pass one of those.
952 	X	i looked at him like he was.
953 	X	he looked at me the same.
954 	X	he was old enough that i suppose hes dead.
955 	X	elif is file spelled backwards ly yrs tim.
956 	X	pep the ternary operator pep doesnt specify the results of the vote and still has the status of draft.
957 	X	anyone want to update it to include the vote results and change it to rejected.
958 	X	if raymond still has the vote results hes welcome to do.
959 	X	btw the motivation was when in doubt dont change the status quo or there was no overwhelming majority for change.
960 	X	guido van rossum home page http www python org guido.
961 	X	given that if then else expressions keep were requested i hereby put forward a.
962 	X	i am neutral on acceptance of the proposal id like the c l py community to accept or reject it or come up with a counter.
963 	X	please understand that i dont have a lot of time to moderate the discussion ill just wait for the community to discuss the proposal and agree on some way to count votes then count.
964 	X	please dont discuss this proposal on python dev.
965 	X	its up to c l py.
966 	X	guido van rossum home page http www python org guido.
967 	X	ok i think you saw the pep.
968 	X	but the voting procedure is up to c l.
969 	X	lets see them screw this one.
970 	X	guido van rossum home page http www python org guido.
971 	X	i have read most of the.
972 	X	its a bit humorous to watch emotions get so stirred in both.
973 	X	it seems there are many python devers following the discussion aahz andrew koenig ark michael hudson holger krekel and tim have all.
974 	X	ark seems to be the most pro aahz the most.
975 	X	im on having a ternary operator in theory on pep.
976 	X	ark can do the best job of summarizing the pro side but the strongest arguments ive seen are that using a ternary op can reduce bugs by not duplicating a variable on assignment.
977 	X	since x is only mentioned once you cant get it.
978 	X	part of the reason for using if expressions the ternary op is the programmer has a different.
979 	X	they arent thinking about control as in an if statement.
980 	X	they are thinking about an expression and the ternary operator allows them to program what they are.
981 	X	it also would be usable in.
982 	X	many against feel that using a conditional if is always.
983 	X	one thing to note many people are saying you can currently do.
984 	X	however many have gotten it wrong either by reversing the true false value or by using something in the true value which may be false sometimes even constants.
985 	X	pychecker tries to find this condition when true value is a false constant but it does a poor job of determining the idiom.
986 	X	it asserts that democracy doesnt work because masses of people are.
987 	X	besides not were true in general it applies even less in this specific case because we are dealing with a group that reads that programs that debates and that chose python over languages that have more shelve space at the.
988 	X	out of respect for the process such as it is and for the user base brett please rename the thread in your.
989 	X	otoh there seems to be the fear especially from the more experienced folks maintaining large code bases that the ternary op will be used in non assignments despite often beeing bad.
990 	X	and realizing that obj might not have method some might write.
991 	X	which many consider a bad thing to be.
992 	X	there are a lot of variations on this theme with while list comps lambda and people have reacted with punctuation.
993 	X	new keywords when and any mixture between.
994 	X	clearly you dont need the ternary operator for the above because there is an obvious other solution.
995 	X	if hasattr obj method and obj method and thus people indicated in various threads that having the ternary op prevents people from getting to better and easier.
996 	X	andrew dalke posted a nice survey on different ternary op examples in his line c code base written by different programmers.
997 	X	although its not about python code it hits a nerve because quite some people come with a c background different mindset and miss the ternary op.
998 	X	i think this link could be included in the pep under something like often but not always there are better python solutions than with c regarding ternary.
999 	X	as no single person can follow all the c l py postings i think we might preprocess and send guido important links together with a short summary or just the latter to be included in the.
1000 	X	yes populii is a mis spelling since the ending i should not be doubled up genitive of populus is populi.
1001 	X	inline if is about extending pythons functional paradigm by adding a function those two arguments out of are evaluated only if.
1002 	X	isnt it better to provide more general mechanism so arbitrary function could evaluate its arguments on demand.
1003 	X	or what about evaluating everything lazily.
1004 	X	then everybody could build his her own if function and much.
1005 	X	this inline if debate is imho dual to code thunks thread at python dev because in one case we want full scale lambdas and in another one ifs reduced to fit.
1006 	X	both do not have nice syntactic solutions in spirit of.
1007 	X	more bridges are needed between control statements and.
1008 	X	k try a b except c f try open filename except sys stdin lst while cond i i.
1009 	X	f i for i in lst.
1010 	X	if else lambda def eval exec.
1011 	X	of course there are only similarities between these structures but on the whole it could be noted that functional side is poorer than imperative.
1012 	X	general laziness present in imperative side is missing in expression thus functional side arguments get evaluated more often than.
1013 	X	only operations like or and and and chained comparisons add some laziness to.
1014 	X	please do not understand me as asking for.
1015 	X	this posting of mine is an attempt to take more general view of the python landscape today and development directions under.
1016 	X	if ever lazy execution will be python reality python will be great choice for mathematical programming people with their fancy search.
1017 	X	anybody who knows amanda miranda programming languages will understand what i am speaking about.
1018 	X	sincerely yours roman suzi rnd onego ru my ai powered by linux redhat.
1019 	X	for example introducing a new statement usually isnt as harmful to readability as new forms of expressions can.
1020 	X	the latter can be used almost.
1021 	X	if somebody knows the right idiom then he will use it.
1022 	X	but somebody learning the ternary op oh i know that from c cool might not even get to the point of knowing about pythons special and or behaviour oh i know boolean operations from c right.
1023 	X	the ternary op then becomes the obvious way to do it.
1024 	X	is not that unlikely for a c programmer learning python in in a dimension where pep is effective.
1025 	X	i updated the pep for guido van.
1026 	X	if the cron job is doing its thing the results will be visible in a few.
1027 	X	the update reflects updated thinking based on the discussion to.
1028 	X	it also summarizes a few posts from comp lang.
1029 	X	hopefully it will serve to focus the discussion on the best of the ideas and arguments presented so.
1030 	X	out of order evaluation is out of.
1031 	X	so are ideas that do not provide for short.
1032 	X	if condition expression else condition is in.
1033 	X	condition expression expression is a new.
1034 	X	cond condition expression condition is viable if implemented as a keyword and has short circuit.
1035 	X	note the actual word is still an open.
1036 	X	added a summary of a few ideas from the last couple hundred posts from comp lang.
1037 	X	posters with posts erik max francis andrew koenig andrew dalke aahz holger krekel james j besemer paul rubin samuele pedroni paul moore carlos ribeiro laura creighton roy smith david eppstein tim peters bengt richter dave brueck michele simionato dale strickland clark paul paterson roman suzi alex martelli christian tismer dan schmidt evan michael hudson dennis lee bieber anders j munch martin maney gerrit holl john roth jp calderone sean ross anthony baxter ian bicking alexander schmolck carel fellinger david gausebeck piet van oostrum raymond hettinger jack diederich jerf at compy dot attbi dot com alan daniels fredrik lundh peter hansen richard jones skip montanaro christos tzotzioy georgiou delaney timothy c timothy donn cave neil hodgson bjorn pettersen chris liechti dan bishop fran eois pinard james p rutledge jamie guinan jeremy fincher john la rooy paul foley william william park.
1038 	X	some data about the debate to date.
1039 	X	on topic pep posts by posters.
1040 	X	can you or somebody augment that list with whos for and whos against.
1041 	X	guido van rossum home page http www python org guido.
1042 	X	the only point i was maybe trying to make with the data is that it is very difficult to distinguish just reading the threads in this case of usenet debate whether conseus is building or the same people are writing the same thing which they like very.
1043 	X	so updating the pep is a risky operation shrug.
1044 	X	that would be difficult given that there are now two leading contenders if cond x else y cond x y.
1045 	X	given that both have only emerged in the last day or so theres been no time to evaluate which is.
1046 	X	i propose to let the discussion simmer another week or so before.
1047 	X	aahz aahz pythoncraft com http www pythoncraft com.
1048 	X	register for pycon now http www python org pycon reg html.
1049 	X	im glad i dont have to read all.
1050 	X	in the end its still my.
1051 	X	guido van rossum home page http www python org guido.
1052 	X	hmm one looks like smalltalk and the other like perl.
1053 	X	though both are clear and get the job done the first bugs me for three reasons.
1054 	X	you have to look twice to see that youre dealing with a statement rather than an expression.
1055 	X	when looking at an expression my mind is trained to see alpha characters as a variable or function name.
1056 	X	the enclosing parenthesis requirement feels wrong.
1057 	X	samuele pedroni creates list of of posts per person.
1058 	X	im not quite sure how you generated this list but i notice that im not on.
1059 	X	now i have been trying very hard to make few posts but hopefully insightful ones but i still made it to the threshold of.
1060 	X	i dont particularly care about the list but if guido wants a listing of whos pro con then we shouldnt exclude people who have tried to reduce the amount of noise by posting a small number of.
1061 	X	maybe a wiki would be helpful.
1062 	X	have one index page link to each.
1063 	X	if wiki theory holds true it will flesh it self out allow people to change their minds and allow arguments to be said once and then refined to their purest form we can all see who supports what and in the end a copy of the wiki can serve as a permanent record of what was.
1064 	X	samuele pedroni creates list of of posts per person.
1065 	X	it was mostly for my personal.
1066 	X	but once the work done i thought to.
1067 	X	not by hand wink with a lines python script using nttplib.
1068 	X	yup there was a small bug in the names addresses coalescing code you were counted time for posts and one time for.
1069 	X	i would file it mostly under too much information.
1070 	X	the relevant data for me was that of the total posts were made by just a small vocal group of people.
1071 	X	the last time i have ran the script i got different posters i think nobody is going to sieve through the nuances of their writings to report their.
1072 	X	there will be the vote for.
1073 	X	that was never my intention the threshold of was arbitrary and the list as such was not my.
1074 	X	i think i will run the script again before the vote because im interested in the debaters voters.
1075 	X	please dont think i missed the importance of this.
1076 	X	the details of the count were unimportant compared to what this says about how the perceived level of vigorous argument may actually be an artifact of a few.
1077 	X	i actually only posted thinking that there might be a bug in your counting.
1078 	X	i still believe that in the end guido will wind up finding a way to extract a reasonable decision from this mess although i have a hard time seeing how hell manage that.
1079 	X	knowing that a few individuals account for a lot of the noise may help.
1080 	X	the situation is problematic because both erik max francis and andrew koenig are reaching posts and they both would like a ternary operator no problem with that but they also strongly favor basically a single candidate that means that everybody who dislike it ought to maybe answer to every single post where they argue in favor of it many are mostly redundant but that seems a strategy wink.
1081 	X	people have probaly more important things to do still in the normal pep process one should only convince.
1082 	X	maybe that would still be possible after the vote.
1083 	X	this thing is already past the funny partly.
1084 	X	there is some favor of my silly simple a then b else c.
1085 	X	please let me elaborate a little on this with respect to the existing and and or.
1086 	X	and and or are two headed beasts at first glance they pretend to be logical.
1087 	X	at second inspection they do this logic by promoting one of their.
1088 	X	this is not obviously bad and it is consistant with the.
1089 	X	due to the presence of a real boolean type we should ask ourselves if and and or shouldnt be deprecated in their current meaning towards were boolean only.
1090 	X	i think it would be nicer if and and or would only produce true or.
1091 	X	but this would break lots of.
1092 	X	therefore i propose to keep them as they are but to deprecate using them to carry their operand values instead of a true truth.
1093 	X	this would be still allowed but there are new more explicit operators which should be used instead for new python code.
1094 	X	the binary operators then and else.
1095 	X	for a clear definition see the function definitions.
1096 	X	parameters are often massaged like this or case.
1097 	X	the meaning of this phrase is if the user has provided no argument value that is true non empty or not most of the time then provide some default value.
1098 	X	arg arg then arg else default.
1099 	X	would be the verbose ternary replacement of.
1100 	X	a short replacement would read better.
1101 	X	which means if arg is false replace it by default.
1102 	X	the meaning of this phrase is if the user provided any argument that is true use some default value.
1103 	X	would be the verbose replacement of.
1104 	X	a short replacement would read better.
1105 	X	summary and and or are behaving like logical.
1106 	X	they happen to do this by not providing a plain truth value but by promoting one of their.
1107 	X	and and or are valid operators when used in a logical context only meaning only to use the truth.
1108 	X	they have the side effect of carrying an operand which i regard as a design flaw but this is bearable when used.
1109 	X	using and and or when they are meant as then or else should be deprectaed as bad style in the long.
1110 	X	almost all instances of and and or used to carry a value can be replaced by then or else with ease which makes the resulting code much more readable without prior.
1111 	X	and and or do have a builtin perception of symmetry which is not related to the truth and hard to explain to.
1112 	X	therefore i propose to deprecate their use to promote a value and i propose to introduce then and else as dual operators together with the then else pair as ternary operator to be used in any context where the inquiry should promote the right operand without evaluating its truth.
1113 	X	here is my cure to and and or with side effects.
1114 	X	def then proc a b if a return b else return a.
1115 	X	and and or should be replaced by the above constructs in all contexts where and and or are not pure logical but are meant to propagate specific values for all new.
1116 	X	please correct me positively if i made a mistake at am.
1117 	X	christian tismer mailto tismer tismer com mission impossible oftware have a break.
1118 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
1119 	X	i read the following with interest and started considering some.
1120 	X	the above defines two binary operators then and else and a ternary operator else.
1121 	X	the question which occurred to me is since the ternary operator is formed by what looks like two binary operators can the action of the ternary operator be defined in terms of the actions of the two binary.
1122 	X	in other words does the expression.
1123 	X	a then b else c the ternary operator.
1124 	X	a then b else c two binary operators.
1125 	X	a then b else c two binary operators.
1126 	X	the answer is no all three expressions evaluate to different.
1127 	X	now we are used to disambiguating expressions with multiple binary operators by considering the precedence and left or right associativity of the operators.
1128 	X	that is a b c evaluates as a b c and a b c evaluates as a b c.
1129 	X	however in this else expression something which looks like and could be legitimately parsed as two binary operations in fact cannot be disambiguated by either application of parentheses and must be treated as a ternary.
1130 	X	these rules whatever thay may turn out to be would probably be more complex than id like to see in.
1131 	X	here is a truth table for the three.
1132 	X	the table not only tells the truth value of the result but shows in parentheses which term is returned to express that truth.
1133 	X	note that the three columns r s and t all differ for at least some set if input.
1134 	X	a b c r s t f f f f c f a f c f f t t c f a t c f t f f c f a f c f t t t c f a t c t f f f b f c f c t f t f b t c t c t t f t b t b t b t t t t b t b t b.
1135 	X	r a then b else c s a then b else c t a then b else c.
1136 	X	you are forgetting a detail here and as well as or are not implemented as.
1137 	X	and are the boolean operators and these do return boolean.
1138 	X	note that you cant do true false and then get true as.
1139 	X	and and or are control structures which test for truth values and then branch accordingly leaving the true result on the.
1140 	X	constructs misusing and and or for the sake of inlining if then else should be reserved for those who know what theyre doing and can live with the consequences.
1141 	X	everybody else should really stick to the explicit.
1142 	X	value x a b if x value a else value b.
1143 	X	this is clean shows exactly what youre doing and doesnt hide the flow of control from the reader value a is only executed in case x is found.
1144 	X	in that case the value b branch is never entered.
1145 	X	as a result side effects in the value b branch do not take.
1146 	X	the tendency to let inling features creep into the language makes me a little.
1147 	X	the simplicity of python is losing big with each new way to put more information on one.
1148 	X	this can be compared to lossy compression of an image you can still grasp the general picture but the details become unsharp and.
1149 	X	complexity should be reserved to what you write not how you write.
1150 	X	not so long ago i added a similar feature in an ad hoc language we created for one project french and specialised syntax and written under pressure.
1151 	X	strangely enough it did not occur to me before this morning that there was some relation with this long thread in the python.
1152 	X	if i translate the keywords of our syntax back to english it gives.
1153 	X	with a chainable property not requiring parentheses.
1154 	X	a when b else c when d else.
1155 	X	our language is declarative tinily functional rather than.
1156 	X	yet the above writings are not far from the original guido.
1157 	X	i know im merely throwing yet another idea is this already overlong thread which i did not even attempt to read.
1158 	X	ive no intention whatsoever of pushing or defending.
1159 	X	my opinion on pep is that whatever is done or not done the key to the final decision should be the continued legibility of the python language much more than the tiny bit of added.
1160 	X	it just happens that for our little language not python the above is received as quite natural and legible by the non programmers in the project they used that language heavily for providing that knowledge base the project.
1161 	X	fran ois pinard http www iro umontreal ca pinard.
1162 	X	does that little language of yours have an if else statement.
1163 	X	if so could you wrap it up in parens and make it an if else expression and try it out on those non programmers to see how they react to it.
1164 	X	the best way to do this would be to ask them in person then its easier to see their reaction.
1165 	X	i for one would find it very interesting whether my findings with my twin daughters would prove more.
1166 	X	they made it clear that statements arent expressions hence making an expression out of a statement by merily embracing it with parens might not be such a smart move after.
1167 	X	i know this subject is beaten somewhat to death but how about making the if then else operator a method of the bool type as in.
1168 	X	choose would need to be a special function of course to avoid evaluating the non selected.
1169 	X	i havent seen this syntax proposed before although i have not waded through all the debate in comp lang.
1170 	X	i would love to see some form of choice operator added mainly because it supports a functional style of programming i very much like to initialise variables as they are introduced and preferably not to assign to them later.
1171 	X	please do not clutter python dev with any further discussion of pep guido explicitly asked all discussion to move to c l.
1172 	X	aahz aahz pythoncraft com http www pythoncraft com.
1173 	X	register for pycon now http www python org pycon reg html.
1174 	X	i feel the then above reads very funny besides as it isnt currently in python it means a new.
1175 	X	guidos proposal reads better despite the funny ordering.
1176 	X	if you have an idea of how to disambiguate it then we could augment his with your binary ideas.
1177 	X	s alo those who trade freedom for security lose both and deserve.
1178 	X	http www laranja org mailto lalo laranja org pgp key http www laranja org pessoal pgp.
1179 	X	i play rpg http www eujogorpg com br gnu never give up freedom http www gnu org.
1180 	X	mark var x choose ifyes ifno.
1181 	X	ifyes and ifno are both evaluated independent of the value of the boolean.
1182 	X	the when else is the closest we have to an imperative if.
1183 	X	we use the little language to describe fairly complex relations of prerequisites for a selection and matching subsystem and no not at all we are not in the sex industry.
1184 	X	the data gets compiled into forms which are then quite optimised for efficient.
1185 	X	the language optimiser and evaluator have all been implemented in.
1186 	X	the legibility and cleanness of python also helped with our little language allowed such a clear expression of the problem that it was easy to add new optimisations unthought with the previous implementations in pl i or c the current setup even compares favourably speed wise wiping out most doubts and concerns of old timers.
1187 	X	the net effect is an administrative decision that all projects are likely to be developed in python from now.
1188 	X	fran ois pinard http www iro umontreal ca pinard.
1189 	X	im not discussing pep since thats supposed to be happening on c l.
1190 	X	the operator names have been changed to protect the.
1191 	X	why is that any different from the following set which are already three different expressions in python.
1192 	X	bunch of grapes banana pointed stick bunch of grapes banana pointed stick bunch of grapes banana pointed stick.
1193 	X	the original post was to both lists which seems excessive and then so was my.
1194 	X	ive never actually used a b c but im pleasently surprised when reminded of its.
1195 	X	a whole string of operators or even of string of mixed and operators can be understood by considering each operation in isolation as a binary.
1196 	X	not so with the then and else.
1197 	X	the easiest description of a string of then operators is that it selects and returns the first false expression in the lists and a string of else operators selects and returns the first true expresson and both short circuit the remaining.
1198 	X	the ternary operator is not easily explained by some combination of the individual binary operands from which it is.
1199 	X	as it was indented to be.
1200 	X	well the difference is of course quite big to.
1201 	X	a when b else c when d else.
1202 	X	a where b else c where d else.
1203 	X	all in favor over re using a strong if.
1204 	X	if is used to be too much right.
1205 	X	christian tismer mailto tismer tismer com mission impossible oftware have a break.
1206 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
1207 	X	there is no such proposal any longer although it reads much better to me than the latest version which is complete overkill for.
1208 	X	i simply refuse a if b then c for a simple reason way too many languages have some kind of spelled if which goes to the.
1209 	X	i dont want python to use a keyword so much differently then.
1210 	X	a when b else c looks pretty understandable to me also if you were confrontated wiht languages.
1211 	X	christian tismer mailto tismer tismer com mission impossible oftware have a break.
1212 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
1213 	X	trying hard to avoid pep discussions.
1214 	X	you cannot collapse the expression so these binary operations are really only partial.
1215 	X	granted with th n el e the left most operand participates in both partial operations but ill leave that discussion to c l.
1216 	X	i was just pointing out that theres precedent for a op b op c a op b op c a op b op c.
1217 	X	for review pep if then else expression pep update to pep if then else expression some data on the debate.
1218 	X	a thread on comp lang python sprung up about adding a ternary operator to python yes the title says trinary operators but that is apparently not technically correct in case you are not a c programmer the ternary operator can be thought of an if else statement that acts like an expression its the cond.
1219 	X	true stmt false stmt syntax from c.
1220 	X	another way of thinking of it is as an if else statement that is.
1221 	X	guido was sick of this debate coming up so he wrote pep on the subject and has left it up to comp lang python to argue this one out he actually explicitly said not to discuss it on python dev and decide on the final fate of this.
1222 	X	if you have an opinion voice it on comp lang python since this will also be used as a test to see if more things should be put on c l py for discussion instead of python.
1223 	X	as of this writing samuele pedroni updated the list on posting stats for those of us who dont follow c l.
1224 	X	two syntactic choices are currently in the running this is ignoring objections to the whole idea.
1225 	X	one is if cond true stmt else false stmt and the other is cond.
1226 	X	pep http www python org peps pep html comp lang python http groups google com groupsq.
1227 	X	pep then else for deprecating and or side effects christian tismer suggested replacing and and or with then and else for doing binary short circuit testing such as arg arg else default instead of arg arg or default.
1228 	X	also suggested arg when cond else cond as a possible ternary.
1229 	X	still were tossed around on python.
1230 	X	pep alternative syntax bool method someone suggested adding a method to booleans to act like a ternary.
1231 	X	before the discussion was moved to comp lang python as all ternary discussions should be the point was made that it could not support short.
1232 	X	non binary operators thread that popped into existence on python dev part way through its discussion on comp lang python which is why it died on python dev quickly about how ternary operators are different compared to two chained binary operators like a b c.
1233 	X	mark hammond asked for help with dealing with a deadlock with import.
1234 	X	changes to logging vinay sajip said he had patches for the logging package ready to go and asked for comments which he.
1235 	X	execve vulnerability python execvpe symlink race condition someone reported a vulnerability that was fixed since python.
1236 	X	on topic pep posts by posters.
1237 	X	posts by day feb feb feb feb feb feb feb feb feb feb feb.
1238 	X	posters with posts erik max francis andrew koenig andrew dalke aahz holger krekel paul rubin bengt richter james j besemer christian tismer samuele pedroni terry reedy laura creighton dave brueck michele simionato tim peters paul moore roy smith carlos ribeiro david eppstein paul paterson alex martelli michael hudson.
1239 	X	both were less negative about gc than they claimed a year.
1240 	X	the code they have cannot be made working by gc since there is a life cycle supported by prolonged survival of exceptions that cannot be solved by.
1241 	X	there is no way to clear an exception other than raising another one or by leaving the current function that received the.
1242 	X	since it is easy to catch an exception in the except clause my assingning sys exc info to some locals there is no need to make these implicitly survive longer than needed with the extra surprize that there is no sane way to clean them.
1243 	X	it is actually quite simple to explain since i know almost all of ceval c by heart.
1244 	X	there is only one single function in the whole system that both clears the exception saved in tstate and the extra reference which is captured in the current frame.
1245 	X	it is reset exc info a static local function in ceval c which is exactly only called when eval frame.
1246 	X	code that does not adhere to the documentation is bad code that should be broken even if it is your.
1247 	X	relying on side effects which are not documented have never been an argument for you to support.
1248 	X	proposals in decreasing orders of delight.
1249 	X	cleaning exceptions after they are handled is what most users would expect last but not least since the documentation suggests.
1250 	X	add an optional boolean clear argument to sys exc info this is lame but it gives the user one way.
1251 	X	add an extra reset exp function to.
1252 	X	more lame since it requires an extra function just to patch a feature.
1253 	X	keep things as they are and expect the spanish.
1254 	X	in case of i assure you to start a thread that will not be less than the pep.
1255 	X	in the other cases i will happily submit a validated.
1256 	X	please dont disappoint me by defending a questionable.
1257 	X	christian tismer mailto tismer tismer com mission impossible oftware have a break.
1258 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
1259 	X	i am not talking about adding a feature but removing a.
1260 	X	this is what im talking about at.
1261 	X	since this is falling on the weekends you guys have until monday night to tell me how i fouled.
1262 	X	comp lang python rest last summary.
1263 	X	nothing specific about the summary to.
1264 	X	i am starting to lean more and more towards starting summaries out in quickies and then making them a full fledged summary when they end up requiring more than a short paragraph of.
1265 	X	helps me keep my sanity since i plan on sticking with having some summarization for every thread on python.
1266 	X	but this summary is on the lean side because traffic was lower than.
1267 	X	i am sure this is in reaction to what happened last month with the massive amount of emails and various negativity that sprung up around the.
1268 	X	early bird registration is over but regular registration for is still.
1269 	X	it has already shaped up to be a fun.
1270 	X	if you come you can hear me make a fool of myself trying to teach the conference rest.
1271 	X	t shirts are also available so even if you dont go to the conference you can buy a shirt at http www cafeshops com pycon and fool people into thinking your.
1272 	X	as for the pre pycon sprint that is also shaping.
1273 	X	there is already a sprint for zope twisted and webware.
1274 	X	and now there is a sprint in the works for working on the python core.
1275 	X	pycon http www python org pycon pre pycon sprint http www python org cgi bin moinmoin sprintplan zope http www zope org twisted http twistedmatrix com webware http webware sourceforge net.
1276 	X	released python http mail python org pipermail python dev february html.
1277 	X	please download it run the regression tests and then test some of your own.
1278 	X	the more bugs we can squash before we hit the.
1279 	X	new format codes for getargs c http mail python org pipermail python dev february html.
1280 	X	thomas heller implemented a new k format code for getargs c that ccepts integers or longs does no range checking and returns the lower bits in an unsigned long.
1281 	X	after tim peters said that tests should be added to testcapimodule c the conversation was moved over to http www python org sf.
1282 	X	getargs c http cvs sourceforge net cgi bin viewcvs cgi python python dist src python getargs c testcapimodule c http cvs sourceforge net cgi bin viewcvs cgi python python dist src modules testcapimodule c.
1283 	X	assymetry in descriptor behavior http mail python org pipermail python dev february html.
1284 	X	this summary is going to assume you understand.
1285 	X	if you dont read whats new in for a nice simple overview or pep for the technical explanation the initial email for this thread has simple code showing how descriptors are used.
1286 	X	if you have ever been interested how property classmethod and staticmethod work this will tell.
1287 	X	david abrahams wondered why it was possible to invoke a descriptors get from either the class it is defined in or an instance of that class while set for the same descriptor cannot be called from the class directly without having defined the descriptor a second time in the metaclass david thought this was a little.
1288 	X	he also asked about the arguments to the descriptor api.
1289 	X	guido responded by saying that it wasnt difficult considering you could do it and that python was pulling something off with a single notation by using for class and instance accesses that c uses two notations for and.
1290 	X	as for the arguments to the various methods they are as follows.
1291 	X	get self obj type self gets bound to the descriptor.
1292 	X	when called for an class obj none while for an instance it is bound to the instance containing the.
1293 	X	type is set to the class that has the descriptor regardless of what context the descriptor is were.
1294 	X	the duality is so that descriptors can be happy were called either just on an instance or just a class such as classmethod.
1295 	X	set self obj value self is the descriptor obj is the instance and value is what what the assignment is were.
1296 	X	as mentioned above this only works with classes if you create the descriptor twice once in the class and once in the classs.
1297 	X	delete self obj guess what gets bound to these parameters.
1298 	X	a historical note guido said in an early alpha release it was actually del but that didnt work very.
1299 	X	david also submitted a doc patch for this so we are now one step closer to having new style classes.
1300 	X	still there is work to be done and if you care to help please do.
1301 	X	whats new in http www python org doc whatsnew sect rellinks html section pep http www python org peps pep html.
1302 	X	bytecode analysis http mail python org pipermail python dev february html.
1303 	X	splinter threads bytecode idea code generation idea dynamic bytecode analysis new bytecode results.
1304 	X	damien morton posted some opcode statistics and tried to get better performance out of ceval c by coming up with a way to do a load fast n call load fast pushes a variable on to the stack and to cut back on the size of pyc.
1305 	X	nothing panned out very much though all the benchmarking was done using pystone.
1306 	X	guido said that christian tismers idea of changing some of the rarely used opcodes to function calls and moving them out of the switch statement might get some.
1307 	X	christian also thought that some work could be done to speed up calls that involve a goto fast next opcode.
1308 	X	changing ceval c to using a jump table instead of a switch also did not pan.
1309 	X	jeremy hylton spoke to let people know that sometimes having an opcode call out to a function is not necessarily slower then having the code in the switch.
1310 	X	he said it depended on how much work the opcode had to do and lots of other hard to predict effects in terms of memory and generated machine.
1311 	X	jeremey also reminded people that there is patch out there to use the pentiums cycle counter to find out how many cycles is spent on each pass through the.
1312 	X	guido also said that if you really want fame and fortune try designing a more representative benchmark.
1313 	X	am kuchling requested to be notified when someone decided to take on this.
1314 	X	skip montanaro pointed out that he has an xml rpc server available to which applications can connect and upload their dynamic opcode frequencies at http manatee mojam com.
1315 	X	compile with dynamic excution profile and dxpairs defined and fetch the info from the sys module its undocumented but it looks like you can get execution info from sys getdxp.
1316 	X	if you are interested in how to use skips server see http mail python org pipermail python dev february html.
1317 	X	damien morton made his modified source code available at http www bitfurnace com python modified source zip and asked people give it a try and report back to him their.
1318 	X	dan sugalski suggested putting opcode that tends to execute in pairs closer together so that they would have a better chance of were in the.
1319 	X	it seemed that doing any mass opcode adding made things slower since the switch got larger and thus made cache hits harder to come.
1320 	X	various ideas of how to rearrange things so that the switch was not as large were suggested and are most likely still were.
1321 	X	ceval c http cvs sourceforge net cgi bin viewcvs cgi python python dist src python ceval c pystone http cvs sourceforge net cgi bin viewcvs cgi python python dist src lib test pystone py sys http cvs sourceforge net cgi bin viewcvs cgi python python dist src python.
1322 	X	call attr a method proposal finn bock added one last comment to this thread from the last summary about how the proposed implementation of a call attr bytecode was how jython handled attribute.
1323 	X	python checkins python dist src misc.
1324 	X	package install manager for python we learn some people take offense to the word pimp to the point of considering them rapists while others think it is fine a pretty respectable profession in amsterdam.
1325 	X	definitely higher standing than a cab driver somewhat on par with a coffeeshop owner.
1326 	X	incorrect regression tests neal norwitz discovered some regresssion tests that werent were.
1327 	X	we also learn that it is best for regression test modules to define a test main function that executes all the tests then having the tests run as a side effect of importation prevents the import lock from were held.
1328 	X	non binary operators hold over from the last summary when discussing whether the ternary operator could be just chained binary.
1329 	X	another hold over from the last summary eric jones says he wouldnt mind more fine grained import.
1330 	X	various unix platform build test issues neal norwitz brought to the attention of python dev some issues that were preventing python from compiling on some.
1331 	X	the debate is petering out samuele pedroni posted some new stats on the pep debate going on at comp lang python.
1332 	X	rfc map enhancement ludovic aubry proposed a change to map but his use case was eliminated quickly when it was pointed out he could just rewrite his map or use list.
1333 	X	guido asked if anyone objected to releasing python on jack jansen asked if guido could wait a day and he said.
1334 	X	test timeout fails on winse the title of the thread states what the issue was and it got.
1335 	X	guido discovered a comment about not using pyerr warnexplicit because there was a worry of having code put into a log.
1336 	X	discussion seemed to end on the idea that it wasnt so much security but throwing a text editor for a loop because of possible non ascii getting put into a log.
1337 	X	david leblanc asked about the status of fixedpoint getting into the.
1338 	X	raymond hettinger said he would be getting to it.
1339 	X	test posix test random failing i bet you can figure out what this thread is.
1340 	X	sf tracker items have now been.
1341 	X	pickling of large arrays ralf grosse kunstle asked if there was a way to minimize the amount of buffering needed to buffer an array.
1342 	X	it was pointed out that writing a reduce method that used an iterator would prevent the need to do any major.
1343 	X	the idea of having a custom append method for objects to return was also suggested but didnt get.
1344 	X	cygwin build failing a problem with builing under cygwin was fixed by rebasing the.
1345 	X	problem iconv module raising runtimeerror iconv codec c was raising runtimeerror when it was more proper to raise.
1346 	X	sco open server x thread support someone asked for help compiling on sco with thread.
1347 	X	he was redirected to comp lang python to get.
1348 	X	call for windows developers thomas heller asked for help from some windows experts with the goal of getting ctypes so that one can write activex controls in.
1349 	X	tuning andrew macintyre sent some performance numbers for os emx about performance improvement from python with o compared to stock python o in does not do much since the set lineno opcode was removed entirely from python.
1350 	X	weekly python bug patch summary skip montanaros weekly reminder that python is not perfect.
1351 	X	needed regexp maintainer guido asked for someone to step forward to take over for the re.
1352 	X	iconv codec guido asking what that iconv codec c module was for answer its a wrapper for the iconv posix module.
1353 	X	tim peters the residential c standards know it all said that spaces and horizontal tabs are fine before and between and the directive name.
1354 	X	rename bsddbmodule c to bsddb c bsddbmodule c is now going to compile to the module.
1355 	X	scheduled downtime for mail python org mail python org was scheduled to go down on at.
1356 	X	traceback problem christian tismer wanted a way to clear the traceback information stored by sys exc info to be cleared on demand since it is kept around as long as the frame is.
1357 	X	kevin jacobs wrote a patch to implement this feature and named is sys exc.
1358 	X	and a word of warning to anyone who stores the info returned by sys exc info it creates a cycle with the frame and thus can create a huge chunk of memory to be held so make sure to delete the info when you are done with.
1359 	X	module extension search order can it be changed.
1360 	X	skip montanaro realized that most failed stat calls occur because the extension search order goes c extension and then python module most modules are written in python and thus the stat call for a c extension of a module name tends to.
1361 	X	guido said it is this way so that if the build of a c extension fails a same named python module can be installed.
1362 	X	this also lead to skip possibly coming up with a build option of creating a zip archive of the stdlib at install time to minimize failed stat.
1363 	X	writing a mutable object problem with setattr aleksandor totic asked about classes and an object persistence setup he was.
1364 	X	you can learn about setattr and that do find out whether an instance is new style or classic based on whether it has a class attribute new style has this.
1365 	X	re some preliminary timings skip montanaro discovering that importing email takes a.
1366 	X	gil pep commentary david abrahams basically saying he likes pep.
1367 	X	test re failing again on mac os x someone thought test re was failing again on os x when it turns out it was an isolated.
1368 	X	slowdown in python cvs someone thought that python had slowed down for some reason turned out to be.
1369 	X	if you ever need to check out a cvs copy from a past date execute cvs update d feb with the proper date of course.
1370 	X	some questions about maintenance of the regular expression.
1371 	X	gary herron stepped up to say he was interested in taking over maintenance of the re.
1372 	X	he asked though how to handle bug reports about.
1373 	X	and hitting the recursion limit a patch materialized that solved the recursion issue for non greedy quantifiers for the common case.
1374 	X	the suggestion of coming up with a new syntax for regexes came up but was stopped from forming on the list since that would take over all available bandwidth in python dev as guido pointed.
1375 	X	can still be discussed in other forums.
1376 	X	bug classes whose metclass has del are not collectible answer.
1377 	X	reason the gc implementation has a good reason for this someone else may be able to explain it.
1378 	X	introducing python gustavo niemeyer sent a link to an mpeg promoting python at http www ibiblio org obp pybiblio pythonvideo php.
1379 	X	if you ever had any desire to see what some of the guys from pythonlabs look and sound like and you are not going to pycon you can now quench your.
1380 	X	syntax for funcion attributes someone suggested a new syntax for were to access function attributes but was told that it didnt look like it would.
1381 	X	im afraid that absolutely zero consensus is emerging ive withdrawn myself entirely from the discussions as theyve proven completely.
1382 	X	last time i saw behaviour like this was pep.
1383 	X	pep somewhat controversial syntax i still dont overly like it.
1384 	X	anyone want to guess what pep will be like.
1385 	X	there have been a large number of different syntaxes proposed rather than attempting to work through these individual syntaxes its worthwhile to break the syntax discussion down into a number of.
1386 	X	attempting to discuss each possible syntax individually would be an act of madness and produce a completely unwieldy.
1387 	X	a large number http www python org moin pythondecorators each possible syntax http ucsu colorado edu bethard py decorators output py.
1388 	X	the first syntax point is the location of the.
1389 	X	for the following examples we use the syntax used in.
1390 	X	decorators before the def statement are the first alternative and the syntax used in.
1391 	X	accepts intint returns float def bar lowhigh pass.
1392 	X	there have been a number of objections raised to this location the primary one is that its the first real python case where a line of code has a result on a following.
1393 	X	the syntax that will be in will also require one decorator per line in a multiple decorators can be specified on the same line.
1394 	X	people also complained that the syntax got unworldly quickly when multiple decorators were.
1395 	X	the point was made though that the chances of a large number of decorators were used on a single function were small and thus this was not a large.
1396 	X	some of the advantages of this form are that the decorators live outside the method body they are obviously executed at the time the function is.
1397 	X	another advantage is that were prefix to the function definition fit the idea of knowing about a change to the semantics of the code before the code itself thus knowing how to interpret the codes semantics properly without having to go back and change your initial perceptions if the syntax did not come before the function.
1398 	X	guido decided he preferred having the decorators on the line before the def because it was felt that a long argument list would mean that the decorators would be hidden.
1399 	X	the second form is the decorators between the def and the function name or the function name and the argument list.
1400 	X	def bar accepts intint returns float lowhigh pass.
1401 	X	there are a couple of objections to this.
1402 	X	the first is that it breaks easily greppability of the source you can no longer search for def foo and find the definition of the.
1403 	X	the second more serious objection is that in the case of multiple decorators the syntax would be extremely.
1404 	X	the next form which has had a number of strong proponents is to have the decorators between the argument list and the trailing in the def line.
1405 	X	def bar lowhigh accepts intint returns float pass.
1406 	X	guido summarized the arguments against this form many of which also apply to the previous form as.
1407 	X	it hides crucial information e g that it is a static method after the signature where it is easily missed.
1408 	X	its easy to miss the transition between a long argument list and a long decorator list.
1409 	X	its cumbersome to cut and paste a decorator list for reuse because it starts and ends in the middle of a line.
1410 	X	the next form is that the decorator syntax go inside the method body at the start in the same place that docstrings currently live.
1411 	X	def bar lowhigh accepts intint returns float pass.
1412 	X	the primary objection to this form is that it requires peeking inside the method body to determine the.
1413 	X	in addition even though the code is inside the method body it is not executed when the method is.
1414 	X	guido felt that docstrings were not a good counter example and that it was quite possible that a docstring decorator could help move the docstring to outside the function.
1415 	X	the final form is a new block that encloses the methods.
1416 	X	for this example well use a decorate keyword as it makes no sense with the.
1417 	X	decorate classmethod def foo argarg pass.
1418 	X	decorate accepts intint returns float def bar lowhigh pass.
1419 	X	this form would result in inconsistent indentation for decorated and undecorated.
1420 	X	in addition a decorated methods body would start three indent levels.
1421 	X	accepts intint returns float def bar lowhigh pass.
1422 	X	the major objections against this syntax are that the symbol is not currently used in python and is used in both ipython and leo and that the symbol is not.
1423 	X	another objection is that this wastes a currently unused character from a limited set on something that is not perceived as a major.
1424 	X	accepts intint returns float def bar lowhigh pass.
1425 	X	this is a variant on the decorator syntax it has the advantage that it does not break ipython and.
1426 	X	its major disadvantage compared to the syntax is that the symbol looks like both a capital i and a lowercase l.
1427 	X	accepts intint returns float def bar lowhigh pass.
1428 	X	the major objection to the list syntax is that its currently meaningful when used in the form before the method.
1429 	X	its also lacking any indication that the expression is a.
1430 	X	none of these alternatives gained much.
1431 	X	the alternatives which involve square brackets only serve to make it obvious that the decorator construct is not a.
1432 	X	they do nothing to make parsing any.
1433 	X	the alternative presents parsing problems because and already parse as un.
1434 	X	they present a further parsing ambiguity because a right angle bracket might be a greater than symbol instead of a closer for the.
1435 	X	the decorate proposal was that no new syntax be implemented instead a magic function that used introspection to manipulate the following.
1436 	X	both jp calderone and philip eby produced implementations of functions that did.
1437 	X	guido was pretty firmly against this with no new syntax the magicness of a function like this is extremely high.
1438 	X	using functions with action at a distance through sys settraceback may be okay for an obscure feature that cant be had any other way yet doesnt merit changes to the language but thats not the situation for.
1439 	X	the widely held view here is that decorators need to be added as a syntactic feature to avoid the problems with the postfix notation used in and.
1440 	X	decorators are slated to be an important new language feature and their design needs to be forward looking not constrained by what can be implemented in.
1441 	X	this idea was the consensus alternate from comp lang.
1442 	X	robert brewer wrote up a detailed j proposal document outlining the arguments in favor of.
1443 	X	the issues with this form are that it requires a new keyword and therefore a from future import decorators statement it seems like there is no obvious choice for the keyword using is the choice of the proposal and implementation and that the form produces something that looks like a normal code block but.
1444 	X	attempts to use statements in this block will cause a syntax.
1445 	X	its also going to potentially confuse users who dont expect a block to contain bare.
1446 	X	there are plenty of other variants and proposals on the wiki page.
1447 	X	the wiki page http www python org moin pythondecorators.
1448 	X	there is some history in java using initially as a marker in javadoc comments and later in java for annotations which are similar to python.
1449 	X	the fact that was previously unused as a token in python also means its clear there is no possibility of such code were parsed by an earlier version of python leading to possibly subtle semantic.
1450 	X	it also means that ambiguity of what is a decorator and what isnt is of that said is still a fairly arbitrary.
1451 	X	javadoc comments http java sun com jse javadoc writingdoccomments annotations.
1452 	X	guido asked for a volunteer to implement his preferred syntax and mark russell stepped up and posted a patch to.
1453 	X	dec dec def func arg arg pass.
1454 	X	def func arg arg pass func dec dec func.
1455 	X	though without the intermediate creation of a variable named func.
1456 	X	a previous patch from michael hudson which implements the list after def syntax is also still kicking.
1457 	X	patch http www python org sf previous patch http starship python net crew mwh hacks meth syntax sugar diff.
1458 	X	after was released in response to community reaction guido stated that hed re examine a community proposal if the community could come up with a community consensus a decent proposal and an.
1459 	X	after an amazing number of posts collecting a vast number of alternatives in the python wiki the proposed j syntax the new keyword using in a block before the def.
1460 	X	robert brewer wrote a detailed proposal for this form and michael sparks produced a patch.
1461 	X	as at time of writing were waiting for guidos.
1462 	X	python wiki http www python org moin pythondecorators detailed proposal a patch http www python org sf.
1463 	X	much of the discussion on comp lang python and the python dev mailing list focuses on the use of decorators as a cleaner way to use the staticmethod and classmethod.
1464 	X	this capability is much more powerful than.
1465 	X	this section presents some examples of.
1466 	X	define a function to be executed at.
1467 	X	note that the function isnt actually wrapped in the usual.
1468 	X	def onexit f import atexit atexit register f return f.
1469 	X	note that this example is probably not suitable for real usage but is for example purposes.
1470 	X	define a class with a singleton.
1471 	X	note that once the class disappears enterprising programmers would have to be more creative to create more.
1472 	X	from shane hathaway on python dev.
1473 	X	def singleton cls instances def getinstance if cls not in instances instances cls cls return instances cls return getinstance.
1474 	X	based on an example posted by anders munch on python dev.
1475 	X	def attrs kwds def decorate f for k in kwds setattr f k kwds k return f return decorate.
1476 	X	attrs versionadded author guido van rossum def mymethod f.
1477 	X	note that this copies the func name attribute from the old to the new.
1478 	X	func name was made writable in python.
1479 	X	def accepts types def check accepts f assert len types f func code co argcount def new f args kwds for a t in zip args types assert isinstance a t arg r does not match s at return f args kwds new f func name f func name return new f return check accepts.
1480 	X	def returns rtype def check returns f def new f args kwds result f args kwds assert isinstance result rtype return value r does not match s resultrtype return result new f func name f func name return new f return check returns.
1481 	X	accepts int intfloat returns intfloat def func arg arg return arg arg.
1482 	X	declare that a class implements a particular set of interface s.
1483 	X	this is from a posting by bob ippolito on python dev based on experience with pyprotocols.
1484 	X	def provides interfaces an actual working implementation of provides for the current implementation of.
1485 	X	not particularly important for the pep.
1486 	X	def provides typ declareimplementation typ instancesprovide interfaces return typ return provides.
1487 	X	class ibar interface declare something about ibar here.
1488 	X	provides ibar class foo object implement something.
1489 	X	pyprotocols http peak telecommunity com pyprotocols html.
1490 	X	of course all these examples are possible today though without syntactic.
1491 	X	its not yet certain that class decorators will be incorporated into the language at this.
1492 	X	guido expressed skepticism about the concept but various people have made some strong arguments search for pep posting draft on their behalf in python dev.
1493 	X	this document is placed in the public.
1494 	X	local variables mode indented text indent tabs mode nil sentence end double space t fill column.
1495 	X	heres the version of pep i just checked.
1496 	X	if you have any additions or changes i prefer patches mailed to me in unified diff.
1497 	X	comments like you should cover point x y and z without the accompanying words i wont be acting on others with checkin privs are more than welcome to do so.
1498 	X	sorry about that but i cannot spend any more time on this document now this whole decorators thing has consumed far more of my time than i can afford right.
1499 	X	author kevin d smith jim jewett skip montanaro anthony baxter post history jun jun feb mar aug.
1500 	X	the final decision on the syntax for is not yet.
1501 	X	this will be done before and this document will be updated to.
1502 	X	note also that this document does not attempt to cover the huge number of potential alternative syntaxes nor is it an attempt to exhaustively list all the positives and negatives of each.
1503 	X	the current method for transforming functions and methods for instance declaring them as a class or static method is awkward and can lead to code that is difficult to.
1504 	X	ideally these transformations should be made at the same point in the code where the declaration itself is.
1505 	X	this pep introduces new syntax for transformations of a function or method.
1506 	X	the current method of applying a transformation to a function or method places the actual translation after the function.
1507 	X	for large functions this separates a key component of the functions behavior from the definition of the rest of the functions external.
1508 	X	def foo self perform method operation foo classmethod foo.
1509 	X	this becomes less readable with longer.
1510 	X	it also seems less than pythonic to name the function three times for what is conceptually a single.
1511 	X	a solution to this problem is to move the transformation of the method closer to the methods own.
1512 	X	while the new syntax is not yet final the intent is to replace.
1513 	X	def foo cls pass foo synchronized lock foo foo classmethod foo.
1514 	X	with an alternative that places the decoration in the functions declaration.
1515 	X	classmethod synchronized lock def foo cls pass.
1516 	X	modifying classes in this fashion is also possible though the benefits are not as immediately.
1517 	X	almost certainly anything which could be done with class decorators could be done using metaclasses but using metaclasses is sufficiently obscure that there is some attraction to having an easier way to make simple modifications to.
1518 	X	for python only function method decorators are were.
1519 	X	two decorators classmethod and staticmethod have been available in python since version.
1520 	X	its been assumed since approximately that time that some syntactic support for them would eventually be added to the.
1521 	X	given this assumption one might wonder why its been so difficult to arrive at a.
1522 	X	discussions have raged off and on at times in both comp lang python and the python dev mailing list about how best to implement function.
1523 	X	there is no one clear reason why this should be so but a few problems seem to be most.
1524 	X	disagreement about where the declaration of intent.
1525 	X	almost everyone agrees that decorating transforming a function at the end of its definition is.
1526 	X	beyond that there seems to be no clear consensus where to place this.
1527 	X	python is a syntactically simple language with fairly strong constraints on what can and cant be done without messing things up both visually and with regards to the language parser.
1528 	X	theres no obvious way to structure this information so that people new to the concept will think oh yeah i know what youre.
1529 	X	the best that seems possible is to keep new users from creating a wildly incorrect mental model of what the syntax.
1530 	X	for people who have a passing acquaintance with algebra or even basic arithmetic or have used at least one other programming language much of python is.
1531 	X	very few people will have had any experience with the decorator concept before encountering it in.
1532 	X	theres just no strong preexisting meme that captures the.
1533 	X	syntax discussions in general appear to cause more contention than almost anything.
1534 	X	readers are pointed to the ternary operator discussions that were associated with pep for another example of.
1535 	X	there is general agreement that syntactic support is desirable to the current state of.
1536 	X	guido mentioned syntactic support for decorators in his devday keynote presentation at the th python conference though he later said it was only one of several extensions he proposed there semi jokingly.
1537 	X	michael hudson raised the topic on python dev shortly after the conference attributing the initial bracketed syntax to an earlier proposal on comp lang python by gareth mccaughan.
1538 	X	en lr ie utf oe utf selm.
1539 	X	class decorations seem like an obvious next step because class definition and function definition are syntactically.
1540 	X	the discussion continued on and off on python dev from february through july.
1541 	X	hundreds and hundreds of posts were made with people proposing many possible syntax.
1542 	X	guido took a list of proposals to europython where a discussion took.
1543 	X	subsequent to this he decided that for wed have the java style decorator.
1544 	X	barry warsaw named this the pie decorator syntax in honor of the pie thon parrot shootout which was announced about the same time as the decorator syntax and because the looks a little like a.
1545 	X	guido outlined his case on python dev including this piece on the various rejected.
1546 	X	europython http www python org doc essays ppt euro euro pdf outlined his case this piece java style.
1547 	X	theres been a number of complaints about the choice of the name decorator for this.
1548 	X	the major one is that the name is not consistent with its use in the gof book.
1549 	X	the name decorator probably owes more to its use in the compiler area a syntax tree is walked and.
1550 	X	its quite possible that a better name may turn.
1551 	X	work for arbitrary wrappers including user defined callables and the existing builtins classmethod and staticmethod.
1552 	X	this requirement also means that a decorator syntax must support passing arguments to the wrapper constructor.
1553 	X	work with multiple wrappers per definition.
1554 	X	make it obvious what is happening at the very least it should be obvious that new users can safely ignore it when writing their own code.
1555 	X	be a syntax that is easy to remember once explained.
1556 	X	not make future extensions more difficult.
1557 	X	be easy to type programs that use it are expected to use it very frequently.
1558 	X	not make it more difficult to scan through code.
1559 	X	it should still be easy to search for all definitions a particular definition or the arguments that a function accepts.
1560 	X	not needlessly complicate secondary support tools such as language sensitive editors and other toy parser tools out there.
1561 	X	allow future compilers to optimize for.
1562 	X	with the hope of a jit compiler for python coming into existence at some point this tends to require the syntax for decorators to come before the function definition.
1563 	X	move from the end of the function where its currently hidden to the front where it is more in your face.
1564 	X	andrew kuchling has links to a bunch of the discussions about motivations and use cases in his blog.
1565 	X	particularly notable is jim huginins list of use cases.
1566 	X	toy parser tools out there http groups google com groupshl.
1567 	X	en lr ie utf oe utf selm.
1568 	X	python list python org in your face in his blog http www amk ca diary archives cat python html jim huginins list of use cases.
1569 	X	the current syntax for function decorators as implemented in python is.
1570 	X	dec dec def func arg arg pass.
1571 	X	def func arg arg pass func dec dec func.
1572 	X	without the intermediate assignment to the variable func.
1573 	X	the decorators are near the function.
1574 	X	the sign makes it clear that something new is going on.
1575 	X	the decorator statement is limited in what it can accept arbitrary expressions will not.
1576 	X	guido preferred this because of a gut feeling.
1577 	X	the primary objection to this form is that it requires peeking inside the method body to determine the.
1578 	X	in addition even though the code is inside the method body it is not executed when the method is.
1579 	X	guido felt that docstrings were not a good counter example and that it was quite possible that a docstring decorator could help move the docstring to outside the function.
1580 	X	the final form is a new block that encloses the methods.
1581 	X	for this example well use a decorate keyword as it makes no sense with the.
1582 	X	decorate classmethod def foo argarg pass.
1583 	X	decorate accepts intint returns float def bar lowhigh pass.
1584 	X	this form would result in inconsistent indentation for decorated and undecorated.
1585 	X	in addition a decorated methods body would start three indent levels.
1586 	X	accepts intint returns float def bar lowhigh pass.
1587 	X	the major objections against this syntax are that the symbol is not currently used in python and is used in both ipython and leo and that the symbol is not.
1588 	X	another objection is that this wastes a currently unused character from a limited set on something that is not perceived as a major.
1589 	X	accepts intint returns float def bar lowhigh pass.
1590 	X	this is a variant on the decorator syntax it has the advantage that it does not break ipython and.
1591 	X	its major disadvantage compared to the syntax is that the symbol looks like both a capital i and a lowercase l.
1592 	X	accepts intint returns float def bar lowhigh pass.
1593 	X	the major objection to the list syntax is that its currently meaningful when used in the form before the method.
1594 	X	its also lacking any indication that the expression is a.
1595 	X	none of these alternatives gained much.
1596 	X	the alternatives which involve square brackets only serve to make it obvious that the decorator construct is not a.
1597 	X	they do nothing to make parsing any.
1598 	X	the alternative presents parsing problems because and already parse as un.
1599 	X	they present a further parsing ambiguity because a right angle bracket might be a greater than symbol instead of a closer for the.
1600 	X	the decorate proposal was that no new syntax be implemented the following.
1601 	X	both jp calderone and philip eby produced implementations of functions that did.
1602 	X	guido was pretty firmly against this with no new syntax the magicness of a function like this is extremely high.
1603 	X	using functions with action at a distance through sys settraceback may be okay for an obscure feature that cant be had any other way yet doesnt merit changes to the language but thats not the situation for.
1604 	X	the widely held view here is that decorators need to be added as a syntactic feature to avoid the problems with the postfix notation used in and.
1605 	X	decorators are slated to be an important new language feature and their design needs to be forward looking not constrained by what can be implemented in.
1606 	X	this idea was the consensus alternate from comp lang python more on this in community consensus.
1607 	X	robert brewer wrote up a detailed j proposal document outlining the arguments in favor of this.
1608 	X	the initial issues with this form are.
1609 	X	it requires a new keyword and therefore a from future import decorators.
1610 	X	however using emerged as the consensus choice and is used in the proposal and.
1611 	X	the keyword block form produces something that looks like a normal code block but.
1612 	X	attempts to use statements in this block will cause a syntax error which may confuse.
1613 	X	a few days later guido rejected the proposal on two main grounds firstly.
1614 	X	the syntactic form of an indented block strongly suggests that its contents should be a sequence of statements but in fact it is not only expressions are allowed and there is an implicit collecting of these expressions going on until they can be applied to the subsequent function.
1615 	X	the keyword starting the line that heads a block draws a lot of attention to.
1616 	X	but the using keyword or any other keyword in its place doesnt deserve that attention the emphasis should be on the decorator or decorators inside the suite since those are the important modifiers to the function definition that.
1617 	X	readers are invited to read the full response.
1618 	X	there are plenty of other variants and proposals on the wiki page.
1619 	X	the wiki page http www python org moin pythondecorators.
1620 	X	there is some history in java using initially as a marker in javadoc comments and later in java for annotations which are similar to python.
1621 	X	the fact that was previously unused as a token in python also means its clear there is no possibility of such code were parsed by an earlier version of python leading to possibly subtle semantic.
1622 	X	it also means that ambiguity of what is a decorator and what isnt is of that said is still a fairly arbitrary.
1623 	X	javadoc comments http java sun com jse javadoc writingdoccomments annotations.
1624 	X	guido asked for a volunteer to implement his preferred syntax and mark russell stepped up and posted a patch to.
1625 	X	this new syntax was available in.
1626 	X	dec dec def func arg arg pass.
1627 	X	def func arg arg pass func dec dec func.
1628 	X	though without the intermediate creation of a variable named func.
1629 	X	the version implemented in allowed multiple decorator clauses on a single.
1630 	X	in this was tightened up to only allowing one decorator per.
1631 	X	a previous patch from michael hudson which implements the list after def syntax is also still kicking.
1632 	X	patch http www python org sf previous patch http starship python net crew mwh hacks meth syntax sugar diff.
1633 	X	after was released in response to community reaction guido stated that hed re examine a community proposal if the community could come up with a community consensus a decent proposal and an.
1634 	X	after an amazing number of posts collecting a vast number of alternatives in the python wiki a community consensus emerged below.
1635 	X	guido subsequently rejected this alternate form but added.
1636 	X	in python to be released this thursday everything remains as currently in.
1637 	X	for i will consider a change of to some other single character even though i think that has the advantage of were the same character used by a similar feature in.
1638 	X	its been argued that its not quite the same since in java is used for attributes that dont change.
1639 	X	but pythons dynamic nature makes that its syntactic elements never mean quite the same thing as similar constructs in other languages and there is definitely significant.
1640 	X	regarding the impact on rd party tools ipythons author doesnt think theres going to be much impact leos author has said that leo will survive although it will cause him and his users some transitional pain.
1641 	X	i actually expect that picking a character thats already used elsewhere in pythons syntax might be harder for external tools to adapt to since parsing will have to be more subtle in that.
1642 	X	but im frankly undecided so theres some wiggle room.
1643 	X	i dont want to consider further syntactic alternatives at this point the buck has to stop at some point everyone has had their say and the show must go.
1644 	X	python wiki http www python org moin pythondecorators subsequently rejected.
1645 	X	editors note should this section be removed now.
1646 	X	the consensus that emerged on comp lang python was the proposed j syntax the j was how it was referenced on the pythondecorators wiki page the new keyword using prefixing a block of decorators before the def.
1647 	X	using classmethod synchronized lock def func cls pass.
1648 	X	the main arguments for this syntax fall under the readability counts.
1649 	X	a suite is better than multiple.
1650 	X	the using keyword and block transforms the single block def statement into a multiple block compound construct akin to try finally and.
1651 	X	a keyword is better than punctuation for a new.
1652 	X	a keyword matches the existing use of.
1653 	X	a keyword distinguishes python decorators from java annotations and net attributes which are significantly different.
1654 	X	robert brewer wrote a detailed proposal for this form and michael sparks produced a patch.
1655 	X	detailed proposal a patch http www python org sf.
1656 	X	as noted previously guido rejected this form outlining his problems with it in a message to python dev and comp lang.
1657 	X	much of the discussion on comp lang python and the python dev mailing list focuses on the use of decorators as a cleaner way to use the staticmethod and classmethod.
1658 	X	this capability is much more powerful than.
1659 	X	this section presents some examples of.
1660 	X	define a function to be executed at.
1661 	X	note that the function isnt actually wrapped in the usual.
1662 	X	def onexit f import atexit atexit register f return f.
1663 	X	note that this example is probably not suitable for real usage but is for example purposes.
1664 	X	define a class with a singleton.
1665 	X	note that once the class disappears enterprising programmers would have to be more creative to create more.
1666 	X	from shane hathaway on python dev.
1667 	X	def singleton cls instances def getinstance if cls not in instances instances cls cls return instances cls return getinstance.
1668 	X	based on an example posted by anders munch on python dev.
1669 	X	def attrs kwds def decorate f for k in kwds setattr f k kwds k return f return decorate.
1670 	X	attrs versionadded author guido van rossum def mymethod f.
1671 	X	note that this copies the func name attribute from the old to the new.
1672 	X	func name was made writable in python.
1673 	X	def accepts types def check accepts f assert len types f func code co argcount def new f args kwds for a t in zip args types assert isinstance a t arg r does not match s at return f args kwds new f func name f func name return new f return check accepts.
1674 	X	def returns rtype def check returns f def new f args kwds result f args kwds assert isinstance result rtype return value r does not match s resultrtype return result new f func name f func name return new f return check returns.
1675 	X	accepts int intfloat returns intfloat def func arg arg return arg arg.
1676 	X	declare that a class implements a particular set of interface s.
1677 	X	this is from a posting by bob ippolito on python dev based on experience with pyprotocols.
1678 	X	def provides interfaces an actual working implementation of provides for the current implementation of.
1679 	X	not particularly important for the pep.
1680 	X	def provides typ declareimplementation typ instancesprovide interfaces return typ return provides.
1681 	X	class ibar interface declare something about ibar here.
1682 	X	provides ibar class foo object implement something.
1683 	X	pyprotocols http peak telecommunity com pyprotocols html.
1684 	X	of course all these examples are possible today though without syntactic.
1685 	X	its not yet certain that class decorators will be incorporated into the language at a future.
1686 	X	guido expressed skepticism about the concept but various people have made some strong arguments search for pep posting draft on their behalf in python dev.
1687 	X	its exceedingly unlikely that class decorators will be in python.
1688 	X	the choice of the character will be re examined before python.
1689 	X	this document is placed in the public.
1690 	X	ive now updated the pep to the current state of play which is pretty much.
1691 	X	local variables mode indented text indent tabs mode nil sentence end double space t fill column.
1692 	X	if theres no significant feedback ill post this to c l py.
1693 	X	author kevin d smith jim jewett skip montanaro anthony baxter post history jun jun feb mar aug sep.
1694 	X	this document is meant to describe the decorator syntax and the process that resulted in the decisions that were.
1695 	X	it does not attempt to cover the huge number of potential alternative syntaxes nor is it an attempt to exhaustively list all the positives and negatives of each.
1696 	X	the current method for transforming functions and methods for instance declaring them as a class or static method is awkward and can lead to code that is difficult to.
1697 	X	ideally these transformations should be made at the same point in the code where the declaration itself is.
1698 	X	this pep introduces new syntax for transformations of a function or method.
1699 	X	the current method of applying a transformation to a function or method places the actual translation after the function.
1700 	X	for large functions this separates a key component of the functions behavior from the definition of the rest of the functions external.
1701 	X	def foo self perform method operation foo classmethod foo.
1702 	X	this becomes less readable with longer.
1703 	X	it also seems less than pythonic to name the function three times for what is conceptually a single.
1704 	X	a solution to this problem is to move the transformation of the method closer to the methods own.
1705 	X	while the new syntax is not yet final the intent is to replace.
1706 	X	def foo cls pass foo synchronized lock foo foo classmethod foo.
1707 	X	with an alternative that places the decoration in the functions declaration.
1708 	X	classmethod synchronized lock def foo cls pass.
1709 	X	modifying classes in this fashion is also possible though the benefits are not as immediately.
1710 	X	almost certainly anything which could be done with class decorators could be done using metaclasses but using metaclasses is sufficiently obscure that there is some attraction to having an easier way to make simple modifications to.
1711 	X	for python only function method decorators are were.
1712 	X	two decorators classmethod and staticmethod have been available in python since version.
1713 	X	its been assumed since approximately that time that some syntactic support for them would eventually be added to the.
1714 	X	given this assumption one might wonder why its been so difficult to arrive at a.
1715 	X	discussions have raged off and on at times in both comp lang python and the python dev mailing list about how best to implement function.
1716 	X	there is no one clear reason why this should be so but a few problems seem to be most.
1717 	X	disagreement about where the declaration of intent.
1718 	X	almost everyone agrees that decorating transforming a function at the end of its definition is.
1719 	X	beyond that there seems to be no clear consensus where to place this.
1720 	X	python is a syntactically simple language with fairly strong constraints on what can and cant be done without messing things up both visually and with regards to the language parser.
1721 	X	theres no obvious way to structure this information so that people new to the concept will think oh yeah i know what youre.
1722 	X	the best that seems possible is to keep new users from creating a wildly incorrect mental model of what the syntax.
1723 	X	for people who have a passing acquaintance with algebra or even basic arithmetic or have used at least one other programming language much of python is.
1724 	X	very few people will have had any experience with the decorator concept before encountering it in.
1725 	X	theres just no strong preexisting meme that captures the.
1726 	X	syntax discussions in general appear to cause more contention than almost anything.
1727 	X	readers are pointed to the ternary operator discussions that were associated with pep for another example of.
1728 	X	there is general agreement that syntactic support is desirable to the current state of.
1729 	X	guido mentioned syntactic support for decorators in his devday keynote presentation at the th python conference though he later said it was only one of several extensions he proposed there semi jokingly.
1730 	X	michael hudson raised the topic on python dev shortly after the conference attributing the initial bracketed syntax to an earlier proposal on comp lang python by gareth mccaughan.
1731 	X	en lr ie utf oe utf selm.
1732 	X	class decorations seem like an obvious next step because class definition and function definition are syntactically similar however guido remains unconvinced and class decorators will almost certainly not be in python.
1733 	X	the discussion continued on and off on python dev from february through july.
1734 	X	hundreds and hundreds of posts were made with people proposing many possible syntax.
1735 	X	guido took a list of proposals to europython where a discussion took.
1736 	X	subsequent to this he decided that wed have the java style barry warsaw named this the pie decorator syntax in honor of the pie thon parrot shootout which was occured around the same time as the decorator syntax and because the looks a little like a.
1737 	X	guido outlined his case on python dev including this piece on some of the many rejected.
1738 	X	europython http www python org doc essays ppt euro euro pdf outlined his case this piece java style.
1739 	X	theres been a number of complaints about the choice of the name decorator for this.
1740 	X	the major one is that the name is not consistent with its use in the gof book.
1741 	X	the name decorator probably owes more to its use in the compiler area a syntax tree is walked and.
1742 	X	its quite possible that a better name may turn.
1743 	X	work for arbitrary wrappers including user defined callables and the existing builtins classmethod and staticmethod.
1744 	X	this requirement also means that a decorator syntax must support passing arguments to the wrapper constructor.
1745 	X	work with multiple wrappers per definition.
1746 	X	make it obvious what is happening at the very least it should be obvious that new users can safely ignore it when writing their own code.
1747 	X	be a syntax that is easy to remember once explained.
1748 	X	not make future extensions more difficult.
1749 	X	be easy to type programs that use it are expected to use it very frequently.
1750 	X	not make it more difficult to scan through code.
1751 	X	it should still be easy to search for all definitions a particular definition or the arguments that a function accepts.
1752 	X	not needlessly complicate secondary support tools such as language sensitive editors and other toy parser tools out there.
1753 	X	allow future compilers to optimize for.
1754 	X	with the hope of a jit compiler for python coming into existence at some point this tends to require the syntax for decorators to come before the function definition.
1755 	X	move from the end of the function where its currently hidden to the front where it is more in your face.
1756 	X	andrew kuchling has links to a bunch of the discussions about motivations and use cases in his blog.
1757 	X	particularly notable is jim huginins list of use cases.
1758 	X	toy parser tools out there http groups google com groupshl.
1759 	X	en lr ie utf oe utf selm.
1760 	X	python list python org in your face in his blog http www amk ca diary archives cat python html jim huginins list of use cases.
1761 	X	the current syntax for function decorators as implemented in python is.
1762 	X	dec dec def func arg arg pass.
1763 	X	def func arg arg pass func dec dec func.
1764 	X	without the intermediate assignment to the variable func.
1765 	X	the decorators are near the function.
1766 	X	the sign makes it clear that something new is going on.
1767 	X	the decorator statement is limited in what it can accept arbitrary expressions will not.
1768 	X	guido preferred this because of a gut feeling.
1769 	X	there have been a large number of different syntaxes proposed rather than attempting to work through these individual syntaxes its worthwhile to break the syntax discussion down into a number of.
1770 	X	attempting to discuss each possible syntax individually would be an act of madness and produce a completely unwieldy.
1771 	X	a large number http www python org moin pythondecorators each possible syntax http ucsu colorado edu bethard py decorators output py.
1772 	X	the first syntax point is the location of the.
1773 	X	for the following examples we use the syntax used in.
1774 	X	decorators before the def statement are the first alternative and the syntax used in.
1775 	X	accepts intint returns float def bar lowhigh pass.
1776 	X	there have been a number of objections raised to this location the primary one is that its the first real python case where a line of code has a result on a following.
1777 	X	the syntax available for in requires one decorator per line in a multiple decorators could be specified on the same line.
1778 	X	people also complained that the syntax got unworldly quickly when multiple decorators were.
1779 	X	the point was made though that the chances of a large number of decorators were used on a single function were small and thus this was not a large.
1780 	X	some of the advantages of this form are that the decorators live outside the method body they are obviously executed at the time the function is.
1781 	X	another advantage is that were prefix to the function definition fit the idea of knowing about a change to the semantics of the code before the code itself thus knowing how to interpret the codes semantics properly without having to go back and change your initial perceptions if the syntax did not come before the function.
1782 	X	guido decided he preferred having the decorators on the line before the def because it was felt that a long argument list would mean that the decorators would be hidden.
1783 	X	the second form is the decorators between the def and the function name or the function name and the argument list.
1784 	X	def bar accepts intint returns float lowhigh pass.
1785 	X	there are a couple of objections to this.
1786 	X	the first is that it breaks easily greppability of the source you can no longer search for def foo and find the definition of the.
1787 	X	the second more serious objection is that in the case of multiple decorators the syntax would be extremely.
1788 	X	the next form which has had a number of strong proponents is to have the decorators between the argument list and the trailing in the def line.
1789 	X	def bar lowhigh accepts intint returns float pass.
1790 	X	guido summarized the arguments against this form many of which also apply to the previous form as.
1791 	X	it hides crucial information e g that it is a static method after the signature where it is easily missed.
1792 	X	its easy to miss the transition between a long argument list and a long decorator list.
1793 	X	its cumbersome to cut and paste a decorator list for reuse because it starts and ends in the middle of a line.
1794 	X	the next form is that the decorator syntax go inside the method body at the start in the same place that docstrings currently live.
1795 	X	def bar lowhigh accepts intint returns float pass.
1796 	X	or perhaps some of the things that have been waiting for the ast branch to be finished i e.
1797 	X	one of the global variable speedup peps guidos instance variable speedup idea load self ivar and store self ivar see http mail python org pipermail python dev february html.
1798 	X	pep absolute relative import pep unifying try except and try finally i believe this was accepted its still marked open in pep.
1799 	X	guido van rossum home page http www python org guido.
1800 	X	i hope to attend the sprints this year so id be around to help people get started and answer.
1801 	X	with luck ill also be giving a technical presentation on the work at the main.
1802 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
1803 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
1804 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
1805 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
1806 	X	in general people were undecided on this.
1807 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
1808 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
1809 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
1810 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
1811 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
1812 	X	experimenting with this http pitrou net python sets.
1813 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
1814 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
1815 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
1816 	X	in general people were undecided on this.
1817 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
1818 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
1819 	X	c coding experiment http mail python org pipermail python dev september html.
1820 	X	no decision had been made at the time of the.
1821 	X	these all favour multi processing over multi.
1822 	X	experimenting with this http pitrou net python sets.
1823 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
1824 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
1825 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
1826 	X	nathan bullock suggested a relpath path a path b addition to os path that returns a relative path from path a to path b.
1827 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
1828 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
1829 	X	c coding experiment http mail python org pipermail python dev september html.
1830 	X	no decision had been made at the time of the.
1831 	X	these all favour multi processing over multi.
1832 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
1833 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
1834 	X	evaluating iterators in a boolean context.
1835 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
1836 	X	nathan bullock suggested a relpath path a path b addition to os path that returns a relative path from path a to path b.
1837 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
1838 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
1839 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
1840 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
1841 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
1842 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
1843 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
1844 	X	evaluating iterators in a boolean context.
1845 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
1846 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
1847 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
1848 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
1849 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
1850 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
1851 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
1852 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
1853 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
1854 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
1855 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
1856 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
1857 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
1858 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
1859 	X	we need to leave the syntax to.
1860 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
1861 	X	the idea of a multiprocess module gained a reasonable amount of.
1862 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
1863 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
1864 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
1865 	X	weve already proved that we cant as a community agree on a.
1866 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
1867 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
1868 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
1869 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
1870 	X	the idea of a multiprocess module gained a reasonable amount of.
1871 	X	thats what we have a bdfl.
1872 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
1873 	X	testing for none http www python org peps pep html testing for none.
1874 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
1875 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
1876 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
1877 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
1878 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
1879 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
1880 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and html.
1881 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
1882 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
1883 	X	testing for none http www python org peps pep html testing for none.
1884 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
1885 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
1886 	X	properties that only call the getter function once.
1887 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
1888 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
1889 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and html.
1890 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
1891 	X	martin v lwis discovered that a little more than a mib in the python installer by using lzx instead of the standard mszip when compressing the cab.
1892 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
1893 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
1894 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
1895 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
1896 	X	properties that only call the getter function once.
1897 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
1898 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
1899 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
1900 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
1901 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
1902 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
1903 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
1904 	X	mib http en wikipedia org wiki mibibyte.
1905 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
1906 	X	readproperty def eggs self expensive computation of eggs.
1907 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
1908 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
1909 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
1910 	X	comp lang python thread http mail python org pipermail python list september html patch http sourceforge net tracker index php.
1911 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
1912 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
1913 	X	readproperty def eggs self expensive computation of eggs.
1914 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
1915 	X	http mail python org pipermail python dev september html.
1916 	X	func detail aid group id atid.
1917 	X	would only do the eggs computation.
1918 	X	he pointed out that an implementation would really be needed to prove.
1919 	X	comp lang python thread http mail python org pipermail python list september html patch http sourceforge net tracker index php.
1920 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
1921 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and true expr or false expr to emulate a conditional.
1922 	X	vendor packages directory http mail python org pipermail python dev september html.
1923 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
1924 	X	phillip and martin pointed out that preventing any other interacton other than enqueued messages is the difficult part each active object would for example have to have its own sys.
1925 	X	func detail aid group id atid.
1926 	X	would only do the eggs computation.
1927 	X	he pointed out that an implementation would really be needed to prove.
1928 	X	in response guido suggested that that the conditional expression discussion of pep be.
1929 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
1930 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
1931 	X	vendor packages directory http mail python org pipermail python dev september html.
1932 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
1933 	X	phillip and martin pointed out that preventing any other interacton other than enqueued messages is the difficult part each active object would for example have to have its own sys.
1934 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
1935 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
1936 	X	rfc readproperty http mail python org pipermail python dev september html.
1937 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
1938 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
1939 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
1940 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
1941 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
1942 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
1943 	X	items on the list were discussed further with some disagreement about what was.
1944 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
1945 	X	rfc readproperty http mail python org pipermail python dev september html.
1946 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
1947 	X	although it has not been implemented yet the plan is for it to appear in python.
1948 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
1949 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
1950 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
1951 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
1952 	X	items on the list were discussed further with some disagreement about what was.
1953 	X	pep http www python org peps pep html.
1954 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
1955 	X	some suggestions were made many of which micah integrated into the.
1956 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
1957 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
1958 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
1959 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
1960 	X	the suggestion was made that an implementation should precede approval of the.
1961 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
1962 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
1963 	X	some suggestions were made many of which micah integrated into the.
1964 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
1965 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
1966 	X	html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
1967 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
1968 	X	the suggestion was made that an implementation should precede approval of the.
1969 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
1970 	X	once again the subject of removing the global interpreter lock gil came.
1971 	X	python ast branch and pep and http mail python org pipermail python dev september html.
1972 	X	codetags pep http python org peps pep html.
1973 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
1974 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
1975 	X	html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
1976 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
1977 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
1978 	X	pep codetags http mail python org pipermail python dev september html.
1979 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
1980 	X	python ast branch and pep and http mail python org pipermail python dev september html.
1981 	X	codetags pep http python org peps pep html.
1982 	X	this kicked off several long threads about multi processor.
1983 	X	http mail python org pipermail python dev september html.
1984 	X	def f x y print x y.
1985 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
1986 	X	pep codetags http mail python org pipermail python dev september html.
1987 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
1988 	X	a long time ago circa python greg ward experimented with free threading which did yield around a times speedup on a dual processor.
1989 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
1990 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
1991 	X	youd have to write something like.
1992 	X	http mail python org pipermail python dev september html.
1993 	X	def f x y print x y.
1994 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
1995 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
1996 	X	def f arg x y arg print x y.
1997 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
1998 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
1999 	X	youd have to write something like.
2000 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
2001 	X	its been some time all that concurrency discussion didnt help but heres the second half of.
2002 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
2003 	X	brett with help from guido motivated this removal for python by a few factors.
2004 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
2005 	X	def f arg x y arg print x y.
2006 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
2007 	X	many apologies for the delay hopefully you agree with guidos better late than never and i promise to try harder in the.
2008 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivation from the key and it current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
2009 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
2010 	X	its been some time all that concurrency discussion didnt help but heres the second half of.
2011 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
2012 	X	brett with help from guido motivated this removal for python by a few factors.
2013 	X	with the treaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
2014 	X	note that the delay is all my bad and epithets should be directed at me and not.
2015 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
2016 	X	guido the feature can be difficult to read for some.
2017 	X	many apologies for the delay hopefully you agree with guidos better late than never and i promise to try harder in the.
2018 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivation from the key and it current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
2019 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
2020 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
2021 	X	as usual please read over if you have a chance and direct comments corrections to tony meyer at gmail com or steven bethard at gmail.
2022 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
2023 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
2024 	X	note that the delay is all my bad and epithets should be directed at me and not.
2025 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
2026 	X	guido the feature can be difficult to read for some.
2027 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
2028 	X	one particular question is whether the concurrency summary is too long.
2029 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
2030 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
2031 	X	as usual please read over if you have a chance and direct comments corrections to tony meyer at gmail com or steven bethard at gmail.
2032 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
2033 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
2034 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
2035 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
2036 	X	in general people were undecided on this.
2037 	X	one particular question is whether the concurrency summary is too long.
2038 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
2039 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
2040 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
2041 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
2042 	X	experimenting with this http pitrou net python sets.
2043 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
2044 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
2045 	X	in general people were undecided on this.
2046 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
2047 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
2048 	X	c coding experiment http mail python org pipermail python dev september html.
2049 	X	no decision had been made at the time of the.
2050 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
2051 	X	experimenting with this http pitrou net python sets.
2052 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
2053 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
2054 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
2055 	X	nathan bullock suggested a relpath path a path b addition to os path that returns a relative path from path a to path b.
2056 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
2057 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
2058 	X	c coding experiment http mail python org pipermail python dev september html.
2059 	X	no decision had been made at the time of the.
2060 	X	these all favour multi processing over multi.
2061 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
2062 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
2063 	X	evaluating iterators in a boolean context.
2064 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
2065 	X	nathan bullock suggested a relpath path a path b addition to os path that returns a relative path from path a to path b.
2066 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
2067 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
2068 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
2069 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
2070 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
2071 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
2072 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
2073 	X	evaluating iterators in a boolean context.
2074 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
2075 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
2076 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
2077 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
2078 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
2079 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
2080 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
2081 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
2082 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
2083 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
2084 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
2085 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
2086 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
2087 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
2088 	X	we need to leave the syntax to.
2089 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
2090 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
2091 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
2092 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
2093 	X	weve already proved that we cant as a community agree on a.
2094 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
2095 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
2096 	X	we need to leave the syntax to.
2097 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
2098 	X	the idea of a multiprocess module gained a reasonable amount of.
2099 	X	thats what we have a bdfl.
2100 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
2101 	X	testing for none http www python org peps pep html testing for none.
2102 	X	weve already proved that we cant as a community agree on a.
2103 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
2104 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
2105 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
2106 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
2107 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
2108 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and html.
2109 	X	thats what we have a bdfl.
2110 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
2111 	X	testing for none http www python org peps pep html testing for none.
2112 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
2113 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
2114 	X	properties that only call the getter function once.
2115 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
2116 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
2117 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and html.
2118 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
2119 	X	martin v lwis discovered that a little more than a mib in the python installer by using lzx instead of the standard mszip when compressing the cab.
2120 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
2121 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
2122 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
2123 	X	properties that only call the getter function once.
2124 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
2125 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
2126 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
2127 	X	martin v lwis discovered that a little more than a mib in the python installer by using lzx instead of the standard mszip when compressing the cab.
2128 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
2129 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
2130 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
2131 	X	mib http en wikipedia org wiki mibibyte.
2132 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
2133 	X	readproperty def eggs self expensive computation of eggs.
2134 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
2135 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
2136 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
2137 	X	comp lang python thread http mail python org pipermail python list september html patch http sourceforge net tracker index php.
2138 	X	mib http en wikipedia org wiki mibibyte.
2139 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
2140 	X	readproperty def eggs self expensive computation of eggs.
2141 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
2142 	X	http mail python org pipermail python dev september html.
2143 	X	func detail aid group id atid.
2144 	X	would only do the eggs computation.
2145 	X	comp lang python thread http mail python org pipermail python list september html patch http sourceforge net tracker index php.
2146 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
2147 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and true expr or false expr to emulate a conditional.
2148 	X	vendor packages directory http mail python org pipermail python dev september html.
2149 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
2150 	X	http mail python org pipermail python dev september html.
2151 	X	func detail aid group id atid.
2152 	X	would only do the eggs computation.
2153 	X	he pointed out that an implementation would really be needed to prove.
2154 	X	in response guido suggested that that the conditional expression discussion of pep be.
2155 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
2156 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and true expr or false expr to emulate a conditional.
2157 	X	vendor packages directory http mail python org pipermail python dev september html.
2158 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
2159 	X	phillip and martin pointed out that preventing any other interacton other than enqueued messages is the difficult part each active object would for example have to have its own sys.
2160 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
2161 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
2162 	X	rfc readproperty http mail python org pipermail python dev september html.
2163 	X	in response guido suggested that that the conditional expression discussion of pep be.
2164 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
2165 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
2166 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
2167 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
2168 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
2169 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
2170 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
2171 	X	rfc readproperty http mail python org pipermail python dev september html.
2172 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
2173 	X	although it has not been implemented yet the plan is for it to appear in python.
2174 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
2175 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
2176 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
2177 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
2178 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
2179 	X	items on the list were discussed further with some disagreement about what was.
2180 	X	pep http www python org peps pep html.
2181 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
2182 	X	some suggestions were made many of which micah integrated into the.
2183 	X	although it has not been implemented yet the plan is for it to appear in python.
2184 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
2185 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
2186 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
2187 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
2188 	X	the suggestion was made that an implementation should precede approval of the.
2189 	X	pep http www python org peps pep html.
2190 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
2191 	X	some suggestions were made many of which micah integrated into the.
2192 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
2193 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
2194 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
2195 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
2196 	X	the suggestion was made that an implementation should precede approval of the.
2197 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
2198 	X	once again the subject of removing the global interpreter lock gil came.
2199 	X	python ast branch and pep and http mail python org pipermail python dev september html.
2200 	X	codetags pep http python org peps pep html.
2201 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
2202 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
2203 	X	html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
2204 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
2205 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
2206 	X	pep codetags http mail python org pipermail python dev september html.
2207 	X	once again the subject of removing the global interpreter lock gil came.
2208 	X	python ast branch and pep and http mail python org pipermail python dev september html.
2209 	X	codetags pep http python org peps pep html.
2210 	X	this kicked off several long threads about multi processor.
2211 	X	http mail python org pipermail python dev september html.
2212 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
2213 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
2214 	X	pep codetags http mail python org pipermail python dev september html.
2215 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
2216 	X	a long time ago circa python greg ward experimented with free threading which did yield around a times speedup on a dual processor.
2217 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
2218 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
2219 	X	this kicked off several long threads about multi processor.
2220 	X	http mail python org pipermail python dev september html.
2221 	X	def f x y print x y.
2222 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
2223 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
2224 	X	a long time ago circa python greg ward experimented with free threading which did yield around a times speedup on a dual processor.
2225 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
2226 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
2227 	X	youd have to write something like.
2228 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
2229 	X	its been some time all that concurrency discussion didnt help but heres the second half of.
2230 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
2231 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
2232 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
2233 	X	def f arg x y arg print x y.
2234 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
2235 	X	many apologies for the delay hopefully you agree with guidos better late than never and i promise to try harder in the.
2236 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivation from the key and it current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
2237 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
2238 	X	its been some time all that concurrency discussion didnt help but heres the second half of.
2239 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
2240 	X	brett with help from guido motivated this removal for python by a few factors.
2241 	X	with the treaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
2242 	X	note that the delay is all my bad and epithets should be directed at me and not.
2243 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
2244 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
2245 	X	many apologies for the delay hopefully you agree with guidos better late than never and i promise to try harder in the.
2246 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivation from the key and it current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
2247 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
2248 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
2249 	X	as usual please read over if you have a chance and direct comments corrections to tony meyer at gmail com or steven bethard at gmail.
2250 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
2251 	X	with the treaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
2252 	X	note that the delay is all my bad and epithets should be directed at me and not.
2253 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
2254 	X	guido the feature can be difficult to read for some.
2255 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
2256 	X	one particular question is whether the concurrency summary is too long.
2257 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
2258 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
2259 	X	as usual please read over if you have a chance and direct comments corrections to tony meyer at gmail com or steven bethard at gmail.
2260 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
2261 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
2262 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
2263 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
2264 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
2265 	X	one particular question is whether the concurrency summary is too long.
2266 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
2267 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
2268 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
2269 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
2270 	X	experimenting with this http pitrou net python sets.
2271 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
2272 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
2273 	X	in general people were undecided on this.
2274 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
2275 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
2276 	X	c coding experiment http mail python org pipermail python dev september html.
2277 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
2278 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
2279 	X	experimenting with this http pitrou net python sets.
2280 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
2281 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
2282 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
2283 	X	nathan bullock suggested a relpath path a path b addition to os path that returns a relative path from path a to path b.
2284 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
2285 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
2286 	X	c coding experiment http mail python org pipermail python dev september html.
2287 	X	no decision had been made at the time of the.
2288 	X	these all favour multi processing over multi.
2289 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
2290 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
2291 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
2292 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
2293 	X	nathan bullock suggested a relpath path a path b addition to os path that returns a relative path from path a to path b.
2294 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
2295 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
2296 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
2297 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
2298 	X	these all favour multi processing over multi.
2299 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
2300 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
2301 	X	evaluating iterators in a boolean context.
2302 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
2303 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
2304 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
2305 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
2306 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
2307 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
2308 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
2309 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
2310 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
2311 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
2312 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
2313 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
2314 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
2315 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
2316 	X	we need to leave the syntax to.
2317 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
2318 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
2319 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
2320 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
2321 	X	weve already proved that we cant as a community agree on a.
2322 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
2323 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
2324 	X	we need to leave the syntax to.
2325 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
2326 	X	the idea of a multiprocess module gained a reasonable amount of.
2327 	X	thats what we have a bdfl.
2328 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
2329 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
2330 	X	weve already proved that we cant as a community agree on a.
2331 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
2332 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
2333 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
2334 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
2335 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
2336 	X	the idea of a multiprocess module gained a reasonable amount of.
2337 	X	thats what we have a bdfl.
2338 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
2339 	X	testing for none http www python org peps pep html testing for none.
2340 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
2341 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
2342 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
2343 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
2344 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
2345 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and html.
2346 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
2347 	X	martin v lwis discovered that a little more than a mib in the python installer by using lzx instead of the standard mszip when compressing the cab.
2348 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
2349 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
2350 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
2351 	X	properties that only call the getter function once.
2352 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
2353 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
2354 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
2355 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
2356 	X	martin v lwis discovered that a little more than a mib in the python installer by using lzx instead of the standard mszip when compressing the cab.
2357 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
2358 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
2359 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
2360 	X	mib http en wikipedia org wiki mibibyte.
2361 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
2362 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
2363 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
2364 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
2365 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
2366 	X	comp lang python thread http mail python org pipermail python list september html patch http sourceforge net tracker index php.
2367 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
2368 	X	mib http en wikipedia org wiki mibibyte.
2369 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
2370 	X	readproperty def eggs self expensive computation of eggs.
2371 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
2372 	X	http mail python org pipermail python dev september html.
2373 	X	func detail aid group id atid.
2374 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
2375 	X	comp lang python thread http mail python org pipermail python list september html patch http sourceforge net tracker index php.
2376 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
2377 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and true expr or false expr to emulate a conditional.
2378 	X	vendor packages directory http mail python org pipermail python dev september html.
2379 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
2380 	X	http mail python org pipermail python dev september html.
2381 	X	func detail aid group id atid.
2382 	X	would only do the eggs computation.
2383 	X	he pointed out that an implementation would really be needed to prove.
2384 	X	in response guido suggested that that the conditional expression discussion of pep be.
2385 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
2386 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and true expr or false expr to emulate a conditional.
2387 	X	vendor packages directory http mail python org pipermail python dev september html.
2388 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
2389 	X	phillip and martin pointed out that preventing any other interacton other than enqueued messages is the difficult part each active object would for example have to have its own sys.
2390 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
2391 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
2392 	X	he pointed out that an implementation would really be needed to prove.
2393 	X	in response guido suggested that that the conditional expression discussion of pep be.
2394 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
2395 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
2396 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
2397 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
2398 	X	phillip and martin pointed out that preventing any other interacton other than enqueued messages is the difficult part each active object would for example have to have its own sys.
2399 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
2400 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
2401 	X	rfc readproperty http mail python org pipermail python dev september html.
2402 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
2403 	X	although it has not been implemented yet the plan is for it to appear in python.
2404 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
2405 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
2406 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
2407 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
2408 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
2409 	X	items on the list were discussed further with some disagreement about what was.
2410 	X	pep http www python org peps pep html.
2411 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
2412 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
2413 	X	although it has not been implemented yet the plan is for it to appear in python.
2414 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
2415 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
2416 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
2417 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
2418 	X	items on the list were discussed further with some disagreement about what was.
2419 	X	pep http www python org peps pep html.
2420 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
2421 	X	some suggestions were made many of which micah integrated into the.
2422 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
2423 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
2424 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
2425 	X	the suggestion was made that an implementation should precede approval of the.
2426 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
2427 	X	once again the subject of removing the global interpreter lock gil came.
2428 	X	python ast branch and pep and http mail python org pipermail python dev september html.
2429 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
2430 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
2431 	X	html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
2432 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
2433 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
2434 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
2435 	X	once again the subject of removing the global interpreter lock gil came.
2436 	X	python ast branch and pep and http mail python org pipermail python dev september html.
2437 	X	codetags pep http python org peps pep html.
2438 	X	this kicked off several long threads about multi processor.
2439 	X	http mail python org pipermail python dev september html.
2440 	X	html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
2441 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
2442 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
2443 	X	pep codetags http mail python org pipermail python dev september html.
2444 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
2445 	X	a long time ago circa python greg ward experimented with free threading which did yield around a times speedup on a dual processor.
2446 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
2447 	X	this kicked off several long threads about multi processor.
2448 	X	http mail python org pipermail python dev september html.
2449 	X	def f x y print x y.
2450 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
2451 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
2452 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
2453 	X	a long time ago circa python greg ward experimented with free threading which did yield around a times speedup on a dual processor.
2454 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
2455 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
2456 	X	youd have to write something like.
2457 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
2458 	X	its been some time all that concurrency discussion didnt help but heres the second half of.
2459 	X	def f x y print x y.
2460 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
2461 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
2462 	X	def f arg x y arg print x y.
2463 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
2464 	X	many apologies for the delay hopefully you agree with guidos better late than never and i promise to try harder in the.
2465 	X	youd have to write something like.
2466 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
2467 	X	its been some time all that concurrency discussion didnt help but heres the second half of.
2468 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
2469 	X	brett with help from guido motivated this removal for python by a few factors.
2470 	X	with the treaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
2471 	X	note that the delay is all my bad and epithets should be directed at me and not.
2472 	X	def f arg x y arg print x y.
2473 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
2474 	X	many apologies for the delay hopefully you agree with guidos better late than never and i promise to try harder in the.
2475 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivation from the key and it current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
2476 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
2477 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
2478 	X	as usual please read over if you have a chance and direct comments corrections to tony meyer at gmail com or steven bethard at gmail.
2479 	X	brett with help from guido motivated this removal for python by a few factors.
2480 	X	with the treaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
2481 	X	note that the delay is all my bad and epithets should be directed at me and not.
2482 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
2483 	X	guido the feature can be difficult to read for some.
2484 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
2485 	X	one particular question is whether the concurrency summary is too long.
2486 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
2487 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
2488 	X	as usual please read over if you have a chance and direct comments corrections to tony meyer at gmail com or steven bethard at gmail.
2489 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
2490 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
2491 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
2492 	X	guido the feature can be difficult to read for some.
2493 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
2494 	X	one particular question is whether the concurrency summary is too long.
2495 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
2496 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
2497 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
2498 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
2499 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
2500 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
2501 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
2502 	X	in general people were undecided on this.
2503 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
2504 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
2505 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
2506 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
2507 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
2508 	X	experimenting with this http pitrou net python sets.
2509 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
2510 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
2511 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
2512 	X	in general people were undecided on this.
2513 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
2514 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
2515 	X	c coding experiment http mail python org pipermail python dev september html.
2516 	X	no decision had been made at the time of the.
2517 	X	these all favour multi processing over multi.
2518 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
2519 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
2520 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
2521 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
2522 	X	nathan bullock suggested a relpath path a path b addition to os path that returns a relative path from path a to path b.
2523 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
2524 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
2525 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
2526 	X	no decision had been made at the time of the.
2527 	X	these all favour multi processing over multi.
2528 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
2529 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
2530 	X	evaluating iterators in a boolean context.
2531 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
2532 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
2533 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
2534 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
2535 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
2536 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
2537 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
2538 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
2539 	X	evaluating iterators in a boolean context.
2540 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
2541 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
2542 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
2543 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
2544 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
2545 	X	we need to leave the syntax to.
2546 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
2547 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
2548 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
2549 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
2550 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
2551 	X	weve already proved that we cant as a community agree on a.
2552 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
2553 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
2554 	X	we need to leave the syntax to.
2555 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
2556 	X	the idea of a multiprocess module gained a reasonable amount of.
2557 	X	thats what we have a bdfl.
2558 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
2559 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
2560 	X	weve already proved that we cant as a community agree on a.
2561 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
2562 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
2563 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
2564 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
2565 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
2566 	X	the idea of a multiprocess module gained a reasonable amount of.
2567 	X	thats what we have a bdfl.
2568 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
2569 	X	testing for none http www python org peps pep html testing for none.
2570 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
2571 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
2572 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
2573 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
2574 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
2575 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and html.
2576 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
2577 	X	martin v lwis discovered that a little more than a mib in the python installer by using lzx instead of the standard mszip when compressing the cab.
2578 	X	testing for none http www python org peps pep html testing for none.
2579 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
2580 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
2581 	X	properties that only call the getter function once.
2582 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
2583 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
2584 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and html.
2585 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
2586 	X	martin v lwis discovered that a little more than a mib in the python installer by using lzx instead of the standard mszip when compressing the cab.
2587 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
2588 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
2589 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
2590 	X	mib http en wikipedia org wiki mibibyte.
2591 	X	properties that only call the getter function once.
2592 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
2593 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
2594 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
2595 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
2596 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
2597 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
2598 	X	mib http en wikipedia org wiki mibibyte.
2599 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
2600 	X	readproperty def eggs self expensive computation of eggs.
2601 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
2602 	X	http mail python org pipermail python dev september html.
2603 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
2604 	X	comp lang python thread http mail python org pipermail python list september html patch http sourceforge net tracker index php.
2605 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
2606 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and true expr or false expr to emulate a conditional.
2607 	X	readproperty def eggs self expensive computation of eggs.
2608 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
2609 	X	http mail python org pipermail python dev september html.
2610 	X	func detail aid group id atid.
2611 	X	would only do the eggs computation.
2612 	X	he pointed out that an implementation would really be needed to prove.
2613 	X	in response guido suggested that that the conditional expression discussion of pep be.
2614 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
2615 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and true expr or false expr to emulate a conditional.
2616 	X	vendor packages directory http mail python org pipermail python dev september html.
2617 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
2618 	X	phillip and martin pointed out that preventing any other interacton other than enqueued messages is the difficult part each active object would for example have to have its own sys.
2619 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
2620 	X	would only do the eggs computation.
2621 	X	he pointed out that an implementation would really be needed to prove.
2622 	X	in response guido suggested that that the conditional expression discussion of pep be.
2623 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
2624 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
2625 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
2626 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
2627 	X	phillip and martin pointed out that preventing any other interacton other than enqueued messages is the difficult part each active object would for example have to have its own sys.
2628 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
2629 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
2630 	X	rfc readproperty http mail python org pipermail python dev september html.
2631 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
2632 	X	although it has not been implemented yet the plan is for it to appear in python.
2633 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
2634 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
2635 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
2636 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
2637 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
2638 	X	items on the list were discussed further with some disagreement about what was.
2639 	X	pep http www python org peps pep html.
2640 	X	rfc readproperty http mail python org pipermail python dev september html.
2641 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
2642 	X	although it has not been implemented yet the plan is for it to appear in python.
2643 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
2644 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
2645 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
2646 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
2647 	X	items on the list were discussed further with some disagreement about what was.
2648 	X	pep http www python org peps pep html.
2649 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
2650 	X	some suggestions were made many of which micah integrated into the.
2651 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
2652 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
2653 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
2654 	X	the suggestion was made that an implementation should precede approval of the.
2655 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
2656 	X	once again the subject of removing the global interpreter lock gil came.
2657 	X	some suggestions were made many of which micah integrated into the.
2658 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
2659 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
2660 	X	html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
2661 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
2662 	X	the suggestion was made that an implementation should precede approval of the.
2663 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
2664 	X	once again the subject of removing the global interpreter lock gil came.
2665 	X	python ast branch and pep and http mail python org pipermail python dev september html.
2666 	X	codetags pep http python org peps pep html.
2667 	X	this kicked off several long threads about multi processor.
2668 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
2669 	X	html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
2670 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
2671 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
2672 	X	pep codetags http mail python org pipermail python dev september html.
2673 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
2674 	X	a long time ago circa python greg ward experimented with free threading which did yield around a times speedup on a dual processor.
2675 	X	codetags pep http python org peps pep html.
2676 	X	this kicked off several long threads about multi processor.
2677 	X	http mail python org pipermail python dev september html.
2678 	X	def f x y print x y.
2679 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
2680 	X	pep codetags http mail python org pipermail python dev september html.
2681 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
2682 	X	a long time ago circa python greg ward experimented with free threading which did yield around a times speedup on a dual processor.
2683 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
2684 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
2685 	X	youd have to write something like.
2686 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
2687 	X	def f x y print x y.
2688 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
2689 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
2690 	X	def f arg x y arg print x y.
2691 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
2692 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
2693 	X	youd have to write something like.
2694 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
2695 	X	its been some time all that concurrency discussion didnt help but heres the second half of.
2696 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
2697 	X	brett with help from guido motivated this removal for python by a few factors.
2698 	X	with the treaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
2699 	X	def f arg x y arg print x y.
2700 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
2701 	X	many apologies for the delay hopefully you agree with guidos better late than never and i promise to try harder in the.
2702 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivation from the key and it current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
2703 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
2704 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
2705 	X	its been some time all that concurrency discussion didnt help but heres the second half of.
2706 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
2707 	X	brett with help from guido motivated this removal for python by a few factors.
2708 	X	with the treaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
2709 	X	note that the delay is all my bad and epithets should be directed at me and not.
2710 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
2711 	X	guido the feature can be difficult to read for some.
2712 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
2713 	X	many apologies for the delay hopefully you agree with guidos better late than never and i promise to try harder in the.
2714 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivation from the key and it current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
2715 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
2716 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
2717 	X	as usual please read over if you have a chance and direct comments corrections to tony meyer at gmail com or steven bethard at gmail.
2718 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
2719 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
2720 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
2721 	X	note that the delay is all my bad and epithets should be directed at me and not.
2722 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
2723 	X	guido the feature can be difficult to read for some.
2724 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
2725 	X	one particular question is whether the concurrency summary is too long.
2726 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
2727 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
2728 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
2729 	X	as usual please read over if you have a chance and direct comments corrections to tony meyer at gmail com or steven bethard at gmail.
2730 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
2731 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
2732 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
2733 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
2734 	X	in general people were undecided on this.
2735 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
2736 	X	one particular question is whether the concurrency summary is too long.
2737 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
2738 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
2739 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
2740 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
2741 	X	experimenting with this http pitrou net python sets.
2742 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
2743 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
2744 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
2745 	X	in general people were undecided on this.
2746 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
2747 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
2748 	X	c coding experiment http mail python org pipermail python dev september html.
2749 	X	no decision had been made at the time of the.
2750 	X	these all favour multi processing over multi.
2751 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
2752 	X	experimenting with this http pitrou net python sets.
2753 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
2754 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
2755 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
2756 	X	nathan bullock suggested a relpath path a path b addition to os path that returns a relative path from path a to path b.
2757 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
2758 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
2759 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
2760 	X	c coding experiment http mail python org pipermail python dev september html.
2761 	X	no decision had been made at the time of the.
2762 	X	these all favour multi processing over multi.
2763 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
2764 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
2765 	X	evaluating iterators in a boolean context.
2766 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
2767 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
2768 	X	nathan bullock suggested a relpath path a path b addition to os path that returns a relative path from path a to path b.
2769 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
2770 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
2771 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
2772 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
2773 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
2774 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
2775 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
2776 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
2777 	X	evaluating iterators in a boolean context.
2778 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
2779 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
2780 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
2781 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
2782 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
2783 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
2784 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
2785 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
2786 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
2787 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
2788 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
2789 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
2790 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
2791 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
2792 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
2793 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
2794 	X	we need to leave the syntax to.
2795 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
2796 	X	the idea of a multiprocess module gained a reasonable amount of.
2797 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
2798 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
2799 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
2800 	X	weve already proved that we cant as a community agree on a.
2801 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
2802 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
2803 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
2804 	X	we need to leave the syntax to.
2805 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
2806 	X	the idea of a multiprocess module gained a reasonable amount of.
2807 	X	thats what we have a bdfl.
2808 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
2809 	X	testing for none http www python org peps pep html testing for none.
2810 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
2811 	X	weve already proved that we cant as a community agree on a.
2812 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
2813 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
2814 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
2815 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
2816 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
2817 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and html.
2818 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
2819 	X	thats what we have a bdfl.
2820 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
2821 	X	testing for none http www python org peps pep html testing for none.
2822 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
2823 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
2824 	X	properties that only call the getter function once.
2825 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
2826 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
2827 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
2828 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and html.
2829 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
2830 	X	martin v lwis discovered that a little more than a mib in the python installer by using lzx instead of the standard mszip when compressing the cab.
2831 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
2832 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
2833 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
2834 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
2835 	X	properties that only call the getter function once.
2836 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
2837 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
2838 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
2839 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
2840 	X	martin v lwis discovered that a little more than a mib in the python installer by using lzx instead of the standard mszip when compressing the cab.
2841 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
2842 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
2843 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
2844 	X	mib http en wikipedia org wiki mibibyte.
2845 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
2846 	X	readproperty def eggs self expensive computation of eggs.
2847 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
2848 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
2849 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
2850 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
2851 	X	comp lang python thread http mail python org pipermail python list september html patch http sourceforge net tracker index php.
2852 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
2853 	X	mib http en wikipedia org wiki mibibyte.
2854 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
2855 	X	readproperty def eggs self expensive computation of eggs.
2856 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
2857 	X	http mail python org pipermail python dev september html.
2858 	X	func detail aid group id atid.
2859 	X	would only do the eggs computation.
2860 	X	he pointed out that an implementation would really be needed to prove.
2861 	X	comp lang python thread http mail python org pipermail python list september html patch http sourceforge net tracker index php.
2862 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
2863 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and true expr or false expr to emulate a conditional.
2864 	X	vendor packages directory http mail python org pipermail python dev september html.
2865 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
2866 	X	phillip and martin pointed out that preventing any other interacton other than enqueued messages is the difficult part each active object would for example have to have its own sys.
2867 	X	http mail python org pipermail python dev september html.
2868 	X	func detail aid group id atid.
2869 	X	would only do the eggs computation.
2870 	X	he pointed out that an implementation would really be needed to prove.
2871 	X	in response guido suggested that that the conditional expression discussion of pep be.
2872 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
2873 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
2874 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and true expr or false expr to emulate a conditional.
2875 	X	vendor packages directory http mail python org pipermail python dev september html.
2876 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
2877 	X	phillip and martin pointed out that preventing any other interacton other than enqueued messages is the difficult part each active object would for example have to have its own sys.
2878 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
2879 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
2880 	X	rfc readproperty http mail python org pipermail python dev september html.
2881 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
2882 	X	in response guido suggested that that the conditional expression discussion of pep be.
2883 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
2884 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
2885 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
2886 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
2887 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
2888 	X	items on the list were discussed further with some disagreement about what was.
2889 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
2890 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
2891 	X	rfc readproperty http mail python org pipermail python dev september html.
2892 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
2893 	X	although it has not been implemented yet the plan is for it to appear in python.
2894 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
2895 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
2896 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
2897 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
2898 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
2899 	X	items on the list were discussed further with some disagreement about what was.
2900 	X	pep http www python org peps pep html.
2901 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
2902 	X	some suggestions were made many of which micah integrated into the.
2903 	X	although it has not been implemented yet the plan is for it to appear in python.
2904 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
2905 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
2906 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
2907 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
2908 	X	the suggestion was made that an implementation should precede approval of the.
2909 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
2910 	X	pep http www python org peps pep html.
2911 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
2912 	X	some suggestions were made many of which micah integrated into the.
2913 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
2914 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
2915 	X	html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
2916 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
2917 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
2918 	X	the suggestion was made that an implementation should precede approval of the.
2919 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
2920 	X	once again the subject of removing the global interpreter lock gil came.
2921 	X	python ast branch and pep and http mail python org pipermail python dev september html.
2922 	X	codetags pep http python org peps pep html.
2923 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
2924 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
2925 	X	html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
2926 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
2927 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
2928 	X	pep codetags http mail python org pipermail python dev september html.
2929 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
2930 	X	once again the subject of removing the global interpreter lock gil came.
2931 	X	python ast branch and pep and http mail python org pipermail python dev september html.
2932 	X	codetags pep http python org peps pep html.
2933 	X	this kicked off several long threads about multi processor.
2934 	X	http mail python org pipermail python dev september html.
2935 	X	def f x y print x y.
2936 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
2937 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
2938 	X	pep codetags http mail python org pipermail python dev september html.
2939 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
2940 	X	a long time ago circa python greg ward experimented with free threading which did yield around a times speedup on a dual processor.
2941 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
2942 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
2943 	X	youd have to write something like.
2944 	X	this kicked off several long threads about multi processor.
2945 	X	http mail python org pipermail python dev september html.
2946 	X	def f x y print x y.
2947 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
2948 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
2949 	X	def f arg x y arg print x y.
2950 	X	a long time ago circa python greg ward experimented with free threading which did yield around a times speedup on a dual processor.
2951 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
2952 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
2953 	X	youd have to write something like.
2954 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
2955 	X	its been some time all that concurrency discussion didnt help but heres the second half of.
2956 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
2957 	X	brett with help from guido motivated this removal for python by a few factors.
2958 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
2959 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
2960 	X	def f arg x y arg print x y.
2961 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
2962 	X	many apologies for the delay hopefully you agree with guidos better late than never and i promise to try harder in the.
2963 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivation from the key and it current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
2964 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
2965 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
2966 	X	its been some time all that concurrency discussion didnt help but heres the second half of.
2967 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
2968 	X	brett with help from guido motivated this removal for python by a few factors.
2969 	X	with the treaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
2970 	X	note that the delay is all my bad and epithets should be directed at me and not.
2971 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
2972 	X	guido the feature can be difficult to read for some.
2973 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
2974 	X	many apologies for the delay hopefully you agree with guidos better late than never and i promise to try harder in the.
2975 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivation from the key and it current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
2976 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
2977 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
2978 	X	as usual please read over if you have a chance and direct comments corrections to tony meyer at gmail com or steven bethard at gmail.
2979 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
2980 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
2981 	X	with the treaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
2982 	X	note that the delay is all my bad and epithets should be directed at me and not.
2983 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
2984 	X	guido the feature can be difficult to read for some.
2985 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
2986 	X	one particular question is whether the concurrency summary is too long.
2987 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
2988 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
2989 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
2990 	X	as usual please read over if you have a chance and direct comments corrections to tony meyer at gmail com or steven bethard at gmail.
2991 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
2992 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
2993 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
2994 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
2995 	X	in general people were undecided on this.
2996 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
2997 	X	one particular question is whether the concurrency summary is too long.
2998 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
2999 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
3000 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
3001 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
3002 	X	experimenting with this http pitrou net python sets.
3003 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
3004 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
3005 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
3006 	X	in general people were undecided on this.
3007 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
3008 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
3009 	X	c coding experiment http mail python org pipermail python dev september html.
3010 	X	no decision had been made at the time of the.
3011 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
3012 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
3013 	X	experimenting with this http pitrou net python sets.
3014 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
3015 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
3016 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
3017 	X	nathan bullock suggested a relpath path a path b addition to os path that returns a relative path from path a to path b.
3018 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
3019 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
3020 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
3021 	X	c coding experiment http mail python org pipermail python dev september html.
3022 	X	no decision had been made at the time of the.
3023 	X	these all favour multi processing over multi.
3024 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
3025 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
3026 	X	evaluating iterators in a boolean context.
3027 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
3028 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
3029 	X	nathan bullock suggested a relpath path a path b addition to os path that returns a relative path from path a to path b.
3030 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
3031 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
3032 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
3033 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
3034 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
3035 	X	these all favour multi processing over multi.
3036 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
3037 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
3038 	X	evaluating iterators in a boolean context.
3039 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
3040 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
3041 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
3042 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
3043 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
3044 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
3045 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
3046 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
3047 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
3048 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
3049 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
3050 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
3051 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
3052 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
3053 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
3054 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
3055 	X	we need to leave the syntax to.
3056 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
3057 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
3058 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
3059 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
3060 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
3061 	X	weve already proved that we cant as a community agree on a.
3062 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
3063 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
3064 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
3065 	X	we need to leave the syntax to.
3066 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
3067 	X	the idea of a multiprocess module gained a reasonable amount of.
3068 	X	thats what we have a bdfl.
3069 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
3070 	X	testing for none http www python org peps pep html testing for none.
3071 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
3072 	X	weve already proved that we cant as a community agree on a.
3073 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
3074 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
3075 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
3076 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
3077 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
3078 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and html.
3079 	X	the idea of a multiprocess module gained a reasonable amount of.
3080 	X	thats what we have a bdfl.
3081 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
3082 	X	testing for none http www python org peps pep html testing for none.
3083 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
3084 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
3085 	X	properties that only call the getter function once.
3086 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
3087 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
3088 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
3089 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and html.
3090 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
3091 	X	martin v lwis discovered that a little more than a mib in the python installer by using lzx instead of the standard mszip when compressing the cab.
3092 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
3093 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
3094 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
3095 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
3096 	X	properties that only call the getter function once.
3097 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
3098 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
3099 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
3100 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
3101 	X	martin v lwis discovered that a little more than a mib in the python installer by using lzx instead of the standard mszip when compressing the cab.
3102 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
3103 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
3104 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
3105 	X	mib http en wikipedia org wiki mibibyte.
3106 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
3107 	X	readproperty def eggs self expensive computation of eggs.
3108 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
3109 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
3110 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
3111 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
3112 	X	comp lang python thread http mail python org pipermail python list september html patch http sourceforge net tracker index php.
3113 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
3114 	X	mib http en wikipedia org wiki mibibyte.
3115 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
3116 	X	readproperty def eggs self expensive computation of eggs.
3117 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
3118 	X	http mail python org pipermail python dev september html.
3119 	X	func detail aid group id atid.
3120 	X	would only do the eggs computation.
3121 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
3122 	X	comp lang python thread http mail python org pipermail python list september html patch http sourceforge net tracker index php.
3123 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
3124 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and true expr or false expr to emulate a conditional.
3125 	X	vendor packages directory http mail python org pipermail python dev september html.
3126 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
3127 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
3128 	X	http mail python org pipermail python dev september html.
3129 	X	func detail aid group id atid.
3130 	X	would only do the eggs computation.
3131 	X	he pointed out that an implementation would really be needed to prove.
3132 	X	in response guido suggested that that the conditional expression discussion of pep be.
3133 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
3134 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
3135 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and true expr or false expr to emulate a conditional.
3136 	X	vendor packages directory http mail python org pipermail python dev september html.
3137 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
3138 	X	phillip and martin pointed out that preventing any other interacton other than enqueued messages is the difficult part each active object would for example have to have its own sys.
3139 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
3140 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
3141 	X	rfc readproperty http mail python org pipermail python dev september html.
3142 	X	he pointed out that an implementation would really be needed to prove.
3143 	X	in response guido suggested that that the conditional expression discussion of pep be.
3144 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
3145 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
3146 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
3147 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
3148 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
3149 	X	phillip and martin pointed out that preventing any other interacton other than enqueued messages is the difficult part each active object would for example have to have its own sys.
3150 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
3151 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
3152 	X	rfc readproperty http mail python org pipermail python dev september html.
3153 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
3154 	X	although it has not been implemented yet the plan is for it to appear in python.
3155 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
3156 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
3157 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
3158 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
3159 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
3160 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
3161 	X	items on the list were discussed further with some disagreement about what was.
3162 	X	pep http www python org peps pep html.
3163 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
3164 	X	some suggestions were made many of which micah integrated into the.
3165 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
3166 	X	although it has not been implemented yet the plan is for it to appear in python.
3167 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
3168 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
3169 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
3170 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
3171 	X	the suggestion was made that an implementation should precede approval of the.
3172 	X	items on the list were discussed further with some disagreement about what was.
3173 	X	pep http www python org peps pep html.
3174 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
3175 	X	some suggestions were made many of which micah integrated into the.
3176 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
3177 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
3178 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
3179 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
3180 	X	the suggestion was made that an implementation should precede approval of the.
3181 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
3182 	X	once again the subject of removing the global interpreter lock gil came.
3183 	X	python ast branch and pep and http mail python org pipermail python dev september html.
3184 	X	codetags pep http python org peps pep html.
3185 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
3186 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
3187 	X	html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
3188 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
3189 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
3190 	X	pep codetags http mail python org pipermail python dev september html.
3191 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
3192 	X	once again the subject of removing the global interpreter lock gil came.
3193 	X	python ast branch and pep and http mail python org pipermail python dev september html.
3194 	X	codetags pep http python org peps pep html.
3195 	X	this kicked off several long threads about multi processor.
3196 	X	http mail python org pipermail python dev september html.
3197 	X	html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
3198 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
3199 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
3200 	X	pep codetags http mail python org pipermail python dev september html.
3201 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
3202 	X	a long time ago circa python greg ward experimented with free threading which did yield around a times speedup on a dual processor.
3203 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
3204 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
3205 	X	this kicked off several long threads about multi processor.
3206 	X	http mail python org pipermail python dev september html.
3207 	X	def f x y print x y.
3208 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
3209 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
3210 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
3211 	X	a long time ago circa python greg ward experimented with free threading which did yield around a times speedup on a dual processor.
3212 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
3213 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
3214 	X	youd have to write something like.
3215 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
3216 	X	its been some time all that concurrency discussion didnt help but heres the second half of.
3217 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
3218 	X	def f x y print x y.
3219 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
3220 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
3221 	X	def f arg x y arg print x y.
3222 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
3223 	X	many apologies for the delay hopefully you agree with guidos better late than never and i promise to try harder in the.
3224 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivation from the key and it current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
3225 	X	youd have to write something like.
3226 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
3227 	X	its been some time all that concurrency discussion didnt help but heres the second half of.
3228 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
3229 	X	brett with help from guido motivated this removal for python by a few factors.
3230 	X	with the treaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
3231 	X	note that the delay is all my bad and epithets should be directed at me and not.
3232 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
3233 	X	def f arg x y arg print x y.
3234 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
3235 	X	many apologies for the delay hopefully you agree with guidos better late than never and i promise to try harder in the.
3236 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivation from the key and it current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
3237 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
3238 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
3239 	X	as usual please read over if you have a chance and direct comments corrections to tony meyer at gmail com or steven bethard at gmail.
3240 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
3241 	X	brett with help from guido motivated this removal for python by a few factors.
3242 	X	with the treaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
3243 	X	note that the delay is all my bad and epithets should be directed at me and not.
3244 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
3245 	X	guido the feature can be difficult to read for some.
3246 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
3247 	X	one particular question is whether the concurrency summary is too long.
3248 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
3249 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
3250 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
3251 	X	as usual please read over if you have a chance and direct comments corrections to tony meyer at gmail com or steven bethard at gmail.
3252 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
3253 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
3254 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
3255 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
3256 	X	guido the feature can be difficult to read for some.
3257 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
3258 	X	one particular question is whether the concurrency summary is too long.
3259 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
3260 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
3261 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
3262 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
3263 	X	experimenting with this http pitrou net python sets.
3264 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
3265 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
3266 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
3267 	X	in general people were undecided on this.
3268 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
3269 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
3270 	X	c coding experiment http mail python org pipermail python dev september html.
3271 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
3272 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
3273 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
3274 	X	experimenting with this http pitrou net python sets.
3275 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
3276 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
3277 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
3278 	X	nathan bullock suggested a relpath path a path b addition to os path that returns a relative path from path a to path b.
3279 	X	in general people were undecided on this.
3280 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
3281 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
3282 	X	c coding experiment http mail python org pipermail python dev september html.
3283 	X	no decision had been made at the time of the.
3284 	X	these all favour multi processing over multi.
3285 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
3286 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
3287 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
3288 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
3289 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
3290 	X	nathan bullock suggested a relpath path a path b addition to os path that returns a relative path from path a to path b.
3291 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
3292 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
3293 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
3294 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
3295 	X	no decision had been made at the time of the.
3296 	X	these all favour multi processing over multi.
3297 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
3298 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
3299 	X	evaluating iterators in a boolean context.
3300 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
3301 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
3302 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
3303 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
3304 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
3305 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
3306 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
3307 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
3308 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
3309 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
3310 	X	evaluating iterators in a boolean context.
3311 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
3312 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
3313 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
3314 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
3315 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
3316 	X	we need to leave the syntax to.
3317 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
3318 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
3319 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
3320 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
3321 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
3322 	X	weve already proved that we cant as a community agree on a.
3323 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
3324 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
3325 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
3326 	X	we need to leave the syntax to.
3327 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
3328 	X	the idea of a multiprocess module gained a reasonable amount of.
3329 	X	thats what we have a bdfl.
3330 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
3331 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
3332 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
3333 	X	weve already proved that we cant as a community agree on a.
3334 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
3335 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
3336 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
3337 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
3338 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
3339 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
3340 	X	the idea of a multiprocess module gained a reasonable amount of.
3341 	X	thats what we have a bdfl.
3342 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
3343 	X	testing for none http www python org peps pep html testing for none.
3344 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
3345 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
3346 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
3347 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
3348 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
3349 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
3350 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and html.
3351 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
3352 	X	martin v lwis discovered that a little more than a mib in the python installer by using lzx instead of the standard mszip when compressing the cab.
3353 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
3354 	X	testing for none http www python org peps pep html testing for none.
3355 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
3356 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
3357 	X	properties that only call the getter function once.
3358 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
3359 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
3360 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
3361 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and html.
3362 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
3363 	X	martin v lwis discovered that a little more than a mib in the python installer by using lzx instead of the standard mszip when compressing the cab.
3364 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
3365 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
3366 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
3367 	X	mib http en wikipedia org wiki mibibyte.
3368 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
3369 	X	properties that only call the getter function once.
3370 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
3371 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
3372 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
3373 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
3374 	X	comp lang python thread http mail python org pipermail python list september html patch http sourceforge net tracker index php.
3375 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
3376 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
3377 	X	mib http en wikipedia org wiki mibibyte.
3378 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
3379 	X	readproperty def eggs self expensive computation of eggs.
3380 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
3381 	X	http mail python org pipermail python dev september html.
3382 	X	func detail aid group id atid.
3383 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
3384 	X	comp lang python thread http mail python org pipermail python list september html patch http sourceforge net tracker index php.
3385 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
3386 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and true expr or false expr to emulate a conditional.
3387 	X	vendor packages directory http mail python org pipermail python dev september html.
3388 	X	readproperty def eggs self expensive computation of eggs.
3389 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
3390 	X	http mail python org pipermail python dev september html.
3391 	X	func detail aid group id atid.
3392 	X	would only do the eggs computation.
3393 	X	he pointed out that an implementation would really be needed to prove.
3394 	X	in response guido suggested that that the conditional expression discussion of pep be.
3395 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
3396 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and true expr or false expr to emulate a conditional.
3397 	X	vendor packages directory http mail python org pipermail python dev september html.
3398 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
3399 	X	phillip and martin pointed out that preventing any other interacton other than enqueued messages is the difficult part each active object would for example have to have its own sys.
3400 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
3401 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
3402 	X	would only do the eggs computation.
3403 	X	he pointed out that an implementation would really be needed to prove.
3404 	X	in response guido suggested that that the conditional expression discussion of pep be.
3405 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
3406 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
3407 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
3408 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
3409 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
3410 	X	phillip and martin pointed out that preventing any other interacton other than enqueued messages is the difficult part each active object would for example have to have its own sys.
3411 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
3412 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
3413 	X	rfc readproperty http mail python org pipermail python dev september html.
3414 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
3415 	X	although it has not been implemented yet the plan is for it to appear in python.
3416 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
3417 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
3418 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
3419 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
3420 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
3421 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
3422 	X	items on the list were discussed further with some disagreement about what was.
3423 	X	pep http www python org peps pep html.
3424 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
3425 	X	rfc readproperty http mail python org pipermail python dev september html.
3426 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
3427 	X	although it has not been implemented yet the plan is for it to appear in python.
3428 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
3429 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
3430 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
3431 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
3432 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
3433 	X	items on the list were discussed further with some disagreement about what was.
3434 	X	pep http www python org peps pep html.
3435 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
3436 	X	some suggestions were made many of which micah integrated into the.
3437 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
3438 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
3439 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
3440 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
3441 	X	the suggestion was made that an implementation should precede approval of the.
3442 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
3443 	X	once again the subject of removing the global interpreter lock gil came.
3444 	X	python ast branch and pep and http mail python org pipermail python dev september html.
3445 	X	some suggestions were made many of which micah integrated into the.
3446 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
3447 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
3448 	X	html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
3449 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
3450 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
3451 	X	the suggestion was made that an implementation should precede approval of the.
3452 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
3453 	X	once again the subject of removing the global interpreter lock gil came.
3454 	X	python ast branch and pep and http mail python org pipermail python dev september html.
3455 	X	codetags pep http python org peps pep html.
3456 	X	this kicked off several long threads about multi processor.
3457 	X	http mail python org pipermail python dev september html.
3458 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
3459 	X	html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
3460 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
3461 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
3462 	X	pep codetags http mail python org pipermail python dev september html.
3463 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
3464 	X	a long time ago circa python greg ward experimented with free threading which did yield around a times speedup on a dual processor.
3465 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
3466 	X	codetags pep http python org peps pep html.
3467 	X	this kicked off several long threads about multi processor.
3468 	X	http mail python org pipermail python dev september html.
3469 	X	def f x y print x y.
3470 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
3471 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
3472 	X	pep codetags http mail python org pipermail python dev september html.
3473 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
3474 	X	a long time ago circa python greg ward experimented with free threading which did yield around a times speedup on a dual processor.
3475 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
3476 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
3477 	X	youd have to write something like.
3478 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
3479 	X	def f x y print x y.
3480 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
3481 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
3482 	X	def f arg x y arg print x y.
3483 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
3484 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
3485 	X	youd have to write something like.
3486 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
3487 	X	its been some time all that concurrency discussion didnt help but heres the second half of.
3488 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
3489 	X	brett with help from guido motivated this removal for python by a few factors.
3490 	X	with the treaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
3491 	X	def f arg x y arg print x y.
3492 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
3493 	X	many apologies for the delay hopefully you agree with guidos better late than never and i promise to try harder in the.
3494 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivation from the key and it current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
3495 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
3496 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
3497 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
3498 	X	brett with help from guido motivated this removal for python by a few factors.
3499 	X	with the treaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
3500 	X	note that the delay is all my bad and epithets should be directed at me and not.
3501 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
3502 	X	guido the feature can be difficult to read for some.
3503 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
3504 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivation from the key and it current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
3505 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
3506 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
3507 	X	as usual please read over if you have a chance and direct comments corrections to tony meyer at gmail com or steven bethard at gmail.
3508 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
3509 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
3510 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
3511 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
3512 	X	guido the feature can be difficult to read for some.
3513 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
3514 	X	one particular question is whether the concurrency summary is too long.
3515 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
3516 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
3517 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
3518 	X	thatrs about as firm as we can currently be about the release.
3519 	X	guido van rossum home page http www python org guido.
3520 	X	the syntax will be different than c it will look like this.
3521 	X	which is the equivalent of testexpr expr in c.
3522 	X	for more information see pep http www python org peps pep html.
3523 	X	python will be released some time next year we hope to have alphas available in the nd.
3524 	X	however raymond and brett seem to have some ideas about optimising the normal comparison bytecode without changing the semantics which would be.
3525 	X	the ease of writing buggy code when trying to fake a conditional operator using and or does seem to cause the question to keep coming up despite the fate of pep.
3526 	X	but the only way i can ever see a conditional operator happening is if guido simply selects which of the top pep solutions he likes best and says make it so.
3527 	X	i say top because there was daylight between the votes for the first choices and all of the other pep.
3528 	X	and many of the pros and cons of those choices are so subjective that i wouldnt expect further discussion to significantly change anyones.
3529 	X	nick coghlan ncoghlan at gmail com brisbane australia http boredomandlaziness blogspot com.
3530 	X	i wasnt but i wasnt pushing for it.
3531 	X	unfortunately if we were to accept raymonds proposal wed have to revisit the discussion since his proposal removes several ways we currently avoid the.
3532 	X	in fact i think raymonds example is more properly considered an argument for adding a conditional expression than for removing the current behavior of the and or shortcut operators had we had a conditional expression he wouldnt have tried to use the x and y or z syntax that bit.
3533 	X	given this realization im now on raymonds idea and on adding a conditional.
3534 	X	i believe y if x else z was my favorite last time wasnt it.
3535 	X	guido van rossum home page http www python org guido.
3536 	X	guido van rossum guido at python org writes.
3537 	X	its not the version from the pep if that means anything at.
3538 	X	the string is a stark data structure and everywhere it is passed there is much duplication of.
3539 	X	it is a perfect vehicle for hiding.
3540 	X	as the pep states im not sure if changing the customary order of arguments in conditional expressions is.
3541 	X	also i assume the thing will be short circuiting and its confusing to grasp that y in y if x else z will possibly never be.
3542 	X	im for allowing authors to write return bool thing or default when they mean a function to return a.
3543 	X	i had the privilege of working in a large base of perl code a learning experience and while some engineers abused functions that were documented as only returning true false by depending on the side effects of and and or this was easily.
3544 	X	the functions were changed to literally return a plain true or false value and those engineers were summarily.
3545 	X	im a dependable hettinger fanboy but on this one i have to agree with the were all adults.
3546 	X	let the authors type an extra few chars if they want to make the code match the.
3547 	X	guido van rossum guido at python org wrote in message news cadcaecda at mail gmail.
3548 	X	there are a lot of people who use or especially as.
3549 	X	that was your original proposal which you later.
3550 	X	the original version of this pep proposed the following syntax the out of order arrangement was found to be too uncomfortable for many of participants in the discussion especially when expression is long its easy to miss the conditional while.
3551 	X	your final favorite was apparently at the top.
3552 	X	proposal the proposed syntax is as follows if condition expression else expression elif parts.
3553 	X	summary of the current state of the discussion groups are falling into one of three camps adopt a ternary operator built using punctuation characters adopt a ternary operator built using new or existing.
3554 	X	the leading examples are if condition expression else expression do.
3555 	X	given the later addition of generator expressions with mandatory parentheses the mandatory parentheses version of a conditional expression looks less strange to me than it did then.
3556 	X	so i could happily use it even though i may still lean toward the other option version then else due to its not needing s or a third elseif term for.
3557 	X	if you want general community input i would suggest a runoff ballot with those four choices and a summary of pros and cons of each or fewer if you see any as.
3558 	X	thanks for setting me straight upon re reading the pep i couldnt even remember which one i favored at the time.
3559 	X	i think id prefer if expr then expr else expre i e no.
3560 	X	none of the other expression forms list comprehensions and generator expressions involving statement keywords use.
3561 	X	if theres one thing ive learned from the pep vote it is that votes for language dont.
3562 	X	i prefer some discussion on python dev after which i pick.
3563 	X	guido van rossum home page http www python org guido.
3564 	X	despite the fact that we seem on a slippery slope towards becoming a kind of infix.
3565 	X	between yield x x for x in y and now if x then y else z it seems that parentheses are all the rage.
3566 	X	will we get try expr finally expr next.
3567 	X	the use will be much more obvious to a newbie than expr.
3568 	X	and i have used the syntactic heavy listcomps in haskell and i must say that pythons version is much.
3569 	X	from me although i sure got lambasted by some people when i said i liked this style during the whole decorator.
3570 	X	it follows the same pattern as lcs and ges remove the colons and add parentheses or brackets for lcs.
3571 	X	steve you can wordify anything if you just verb.
3572 	X	adding python dev back to the cc list.
3573 	X	youre bringing up another valid issue whether to support elif.
3574 	X	heres a suggestion for a way to decide between a wordy version or c style.
3575 	X	if we abandon and or in favor of we should also go with.
3576 	X	if we keep and or we should use a keyword based conditional as.
3577 	X	since so far the feedback is overwhelmingly in favor of keeping and or i think that settles the case in favor of a wordy.
3578 	X	which gives my a nice nostalgic feeling because except for the elif part algol had the same thing the first programming language i ever.
3579 	X	oh and a way to decide between colon or no colon were not using colons in list comps and genexprs.
3580 	X	guido van rossum home page http www python org guido.
3581 	X	once you start writing such a complicated thing i think readability will favor just breaking the code out into traditional if.
3582 	X	id be happy enough with just a binary.
3583 	X	a non text attachment was url http mail python org pipermail python dev attachments fd attachment pgp.
3584 	X	guido van rossum guido at python org wrote in message news cadcdffcd at mail gmail.
3585 	X	i presume this revision would continue to include elif.
3586 	X	if i put on a designing python for everyone hat then the presence of the leading if looks better than the slightly too cute especially for python abbreviated.
3587 	X	if we reject both the status quo and the symbol tax form and agree on the above as the best wordy form then it is a moot point anyway.
3588 	X	p newcomers continue to periodically request how do i write conditional expressions.
3589 	X	i think most will be happier with something clear and.
3590 	X	just a gut response to the.
3591 	X	the verbose forms strike me as cluttered in this particular.
3592 	X	in the multiline case it doesnt look like clutter because the if elif else bits line up which fits the way python has already trained my.
3593 	X	print average weight avg for c in chefs c weight rdict dict for k v in d iteritems v k.
3594 	X	honestly i think i would prefer this.
3595 	X	examples from real code before and after.
3596 	X	lines line for line in pr block body if line logical line strip.
3597 	X	lines for line in pr block body if line logical line strip.
3598 	X	row values line col start col end strip for col in columns row values for col in columns line col start col end rstrip.
3599 	X	return p for p in self listdir pattern if p isdir return for p in self listdir pattern if p isdir p.
3600 	X	but in lcs and ges the body of the main clause of the statement is also pulled out and placed in front of the keyword.
3601 	X	def gen for var in iterable if cond yield expr.
3602 	X	gen expr for var in iterable if cond.
3603 	X	this makes sense to me because the most important thing in the generator expression is the way each element is populated the source iterable and the filtering condition do matter but they arent as.
3604 	X	it also makes the expression forms more declarative in nature rather than were procedural statements embedded inside an.
3605 	X	notice also that in this case if iterable is empty or cond always evaluates false in boolean context then expr is never executed in other words python already has precedent for out of order code execution in expression.
3606 	X	guidos original pep proposal worked much the same way.
3607 	X	if cond x expr else x expr.
3608 	X	i see this as similar in spirit to the current form of lcs and ges the most important things are the two possible values rather than the condition for choosing between them and this form makes them clearly visible at the start and end of the expression rather than embedding one of them in the.
3609 	X	the post filtered form is also similarly declarative rather than.
3610 	X	this version doesnt need a separate elif form elif can be written as.
3611 	X	note that the keyword count is no higher than if elif was used because the then keyword isnt needed x if cond then expr elif cond then expr else expr.
3612 	X	heres raymonds problematic example using this original pep form def real self return a vector with the real part of each input element do not convert integer inputs to floats return self map lambda z z real if type z types complextype else z.
3613 	X	and the other non colon keyword based proposal in pep s top four.
3614 	X	def real self return a vector with the real part of each input element do not convert integer inputs to floats return self map lambda z if type z types complextype then z real else z.
3615 	X	another common use case would be for mutable default arguments.
3616 	X	x if arg is none else list arg x if arg is none then else list arg.
3617 	X	basically im on the original pep form because it reads more naturally and more like lcs and ges to me in expression contexts and on the if then elif else form because i would like a real conditional operator.
3618 	X	nick coghlan ncoghlan at gmail com brisbane australia http boredomandlaziness blogspot com.
3619 	X	while i like the looks of the form without colons better i cant quite follow this argument for.
3620 	X	in lcs and ges colons wouldnt make any sense in the first place because the expression controlled by for and if is written before it expression x for x in y.
3621 	X	just where would anyone put a colon there anyway.
3622 	X	a colon does make sense if something follows it as is currently the case in lambda.
3623 	X	it would also be the case in an if x y else z.
3624 	X	i have a feeling that trying to make all expression forms which happen to use statement keywords colon free is seeking an artificial.
3625 	X	im happy to be proven wrong.
3626 	X	on the idea of introducing a conditional expression in the first place.
3627 	X	nothing prevents you from spreading the code over multiple lines like so.
3628 	X	x if a then b elif c then d else e.
3629 	X	x if a then b elif c then d else e.
3630 	X	especially as there are going to be parentheses around the whole thing.
3631 	X	from a readability point of view this is no different from if statement blocks and the matter is imo not worth dumbing down an if expression thingy as compared to its if statement.
3632 	X	to me your latter is actually worse than.
3633 	X	if a x b elif c x d else x e.
3634 	X	i think the conditional stuff gets the most bang for the buck in situations like.
3635 	X	d foo if a then b else c.
3636 	X	a non text attachment was url http mail python org pipermail python dev attachments dc attachment pgp.
3637 	X	in isolation if then else is an improvement but im not sure it should be viewed in.
3638 	X	at one point you wanted to strengthen the distinction between statements and.
3639 	X	x if y then y val else default.
3640 	X	x if y y val else default.
3641 	X	if any statement can become an expression that could be very.
3642 	X	there are times when it would be convenient to just grab the newly created function def replacing lambda or class or the newly imported.
3643 	X	the distinction between exec and eval starts to look increasingly arbitrary as.
3644 	X	but if everything becomes expression able people will start to use parentheses instead of.
3645 	X	cant see a difference as far as readability is.
3646 	X	and i think similar holds for lcs and.
3647 	X	unwinding a complex sequence of for and if clauses is certainly no fun unless one is really used to.
3648 	X	but your example poses another question up until now i had the impression that parentheses should be mandatory around a conditional.
3649 	X	theres certainly no avoiding them in situations like if x then else.
3650 	X	but what about unambiguous cases like your example line.
3651 	X	with the former we have a more c style syntax where meaning is determined purely by delimeters rather than by.
3652 	X	instead of braces and we have then and elif.
3653 	X	the stricter form where you dont allow elif will get used in more restricted circumstances so gives less encouragement for widespread abuse of conditional expressions by people who dont like whitespace based.
3654 	X	um not clear sorry the real difference i meant to refer to above is that between delimiter based and whitespace based syntaxes and not between braces and differently spelled delimiters.
3655 	X	john j lee jjl at pobox com wrote in message news pine.
3656 	X	i think abusiveness is somewhat in the eye of the beholder.
3657 	X	in any case without elif one could still chain expressions by writing.
3658 	X	x if a then b else if c then d else e.
3659 	X	i personally think one is enough and prefer.
3660 	X	x if a then b elif c then d else e.
3661 	X	which is similar to how i wrote such things in c elif has the same justification here as with the statement form where it is also unnecessary but saves nesting.
3662 	X	guido wrote that while he was in listen to the masses.
3663 	X	if hes switched back to follow my instincts mode it may need to be re.
3664 	X	greg ewing computer science dept university of canterbury a citizen of newzealandcorp a christchurch new zealand wholly owned subsidiary of usa greg ewing at canterbury ac nz.
3665 	X	one nice thing about x if b else y is that it chains without needing any more keywords.
3666 	X	but if you require parens its not so nice.
3667 	X	greg ewing computer science dept university of canterbury a citizen of newzealandcorp a christchurch new zealand wholly owned subsidiary of usa greg ewing at canterbury ac nz.
3668 	X	too much similarity with the for if.
3669 	X	people would say why can we put a for statement in brackets but not a try statement.
3670 	X	fwliw this was my strong preference back at the time of the original.
3671 	X	guido van rossum guido at python org writes.
3672 	X	my problem with this syntax is that it can be hard to read.
3673 	X	return if self arg is none then default else self arg.
3674 	X	return name name name name name name name name name name.
3675 	X	well this is my input and now im going to try and stay out of it.
3676 	X	in english every word can be.
3677 	X	would that it were so in our programming.
3678 	X	i think that requriing parens helps a lot with the list of names problem it nicely delimits the conditional expression for human readers.
3679 	X	return if self arg is none then default else self arg.
3680 	X	in particular it breaks up the misleading grouping return if.
3681 	X	if guido chose this form i would expect the chaining to work like chaining loops in a generator expression with parentheses were required around the whole thing rather than around each element in the chain.
3682 	X	the point were that the result of the conditional expression is exactly one of the options included in the expression so only one set of parentheses is.
3683 	X	nick coghlan ncoghlan at gmail com brisbane australia http boredomandlaziness blogspot com.
3684 	X	either a or b could be a nested expression so its important that it be readable in both.
3685 	X	a if e then b a if e then b if e then b a if e then a if e then b a if e then b if e then a if e then b.
3686 	X	a if e then b a if e then b if e then b a if e then a if e then b a if e then b if e then a if e then b.
3687 	X	i think the parentheses version is.
3688 	X	to me its not as easy to picture what will happen when the condition is in the middle of the.
3689 	X	also in the above is e evaluated before e.
3690 	X	that would mean the result of e a or b is thrown away if e if.
3691 	X	so looking at a few alternatives.
3692 	X	a b b e a e.
3693 	X	this better represents a decision tree i.
3694 	X	each comparison gives one of two possible results which may be another.
3695 	X	if e then a else b if e then if e then a else b else b if e then a else if e then a else b if e then if e then a else b else if e then a else b.
3696 	X	e selects a else b e selects e selects a else b else b e selects a else e selects a else b e selects e selects a else b else e selects a else b.
3697 	X	i like this one but maybe a shorter verb would be.
3698 	X	other possible words might be gives chooses or picks.
3699 	X	with the ea b syntax i tend to want to switch the and here so that the colon is more consistent with how python uses.
3700 	X	that may be more confusing to those who are use to c but clearer to those who use python as their main programming.
3701 	X	the becomes an else which might be useful in other.
3702 	X	b e selects e selects a.
3703 	X	b e selects e selects a.
3704 	X	i think this would be quite useful and would work perfectly well with boolean expressions as.
3705 	X	the advantage here is that abc would not be pre evaluated as they are when you use a list or.
3706 	X	e selects a b e selects e selects a b b e selects a e selects a b e selects e selects a b e selects a b.
3707 	X	e selects e selects a b e selects a b e selects a b.
3708 	X	being able to have more than two alternative may reduce the need to nest or chain them in some.
3709 	X	a variation might be to have negative indexs pick from the far end just as list indexs.
3710 	X	this would be my choice although i wasnt thinking of it when i started this.
3711 	X	but thats exactly what any language looks like if you get abstract enough.
3712 	X	word word word word word word word.
3713 	X	and in fact one read and understands your return statement just like an english sentence word by word from beginning to.
3714 	X	this seems an argument for the syntax not.
3715 	X	moreover if one uses the proposed parenthesized syntax even the slightly odd word order of return if is.
3716 	X	return if self arg is none then default else self arg.
3717 	X	steve you can wordify anything if you just verb.
3718 	X	snip snip snip snip snip snip snip.
3719 	X	it looks like most people support a conditional expression of some.
3720 	X	we need to leave the syntax to.
3721 	X	weve already proved that like the decorators discussions we cant as a community agree on a.
3722 	X	thats what we have a bdfl.
3723 	X	guido van rossum home page http www python org guido.
3724 	X	that can already be written in python.
3725 	X	and maybe the syntax of the future conditional operator could be extended so that.
3726 	X	would be equivalent to the previous.
3727 	X	for stuff were a conditional expression really is needed like in.
3728 	X	return if self arg then yes else no.
3729 	X	one would hope that whoever writes the conditional expression doesnt make the expressions so long and complicated that it looks like name name name.
3730 	X	it doesnt matter which syntax proposal that wins it will still be very tempting to write unreadable code with it think nested chained conditional expressions.
3731 	X	that and the fact that ive never felt a real need for a conditional expression as the or operator is my very humble argument against.
3732 	X	iso qbj frn lindqvists message of.
3733 	X	bjrn lindqvist bjourne at gmail com writes.
3734 	X	would you believe i had this exact conversation two and a half years ago.
3735 	X	consider what happens if self arg is.
3736 	X	if i had wanted your website to make noise i would have licked my finger and rubbed it across the.
3737 	X	when you invited resumed discussion did you intend to proceed from where the revised pep left off with a few variations on the table or to start over from point zero with potentially anything and everything on the table.
3738 	X	in particular do we need to rehash the reasons for rejection of the backwards if else proposal that a few seem to wish to resurrect.
3739 	X	exp if exp else exp as cond if etrue else efalse in direct analogy with cond.
3740 	X	i mentally read in c as if else.
3741 	X	it took a few readings of the proposal to even realize that it the order.
3742 	X	there there is the obvious analogy with pythons if cond etrue else efalse with if moved over to the first position and the then removed but with else still between the alternatives and the second also removed.
3743 	X	then there are conditional functions in various languages iff cond etrue efalse which as far as i know always have the expressions in that.
3744 	X	or is the dead still dead.
3745 	X	i think a recap of past arguments is.
3746 	X	i will read everything and pick a syntax and thats.
3747 	X	we can do it in python.
3748 	X	guido van rossum home page http www python org guido.
3749 	X	i think youve just reinvented the case statement which disagrees with if over the order of true and false.
3750 	X	for a conditional expression i think the choices are really down to the following which was already way too much freedom last http www python org peps pep html time.
3751 	X	should it be done at all.
3752 	X	it would be useful and avoid certain types of.
3753 	X	it would encourage bracketing instead of indentation.
3754 	X	how many of the keywords if then else elif should be dropped.
3755 	X	if test then true else false standard english standard programming idiom adds a then keyword if test true else false better parallels the if statement starts to run together if test val elif test val elif test val parallels the if statement encourages overly long code but still better than nested parens.
3756 	X	pep wasnt entirely clear the words said to keep elif but the examples did.
3757 	X	there was some disagreement on which of the other three keywords to represent.
3758 	X	what order should the clauses appear.
3759 	X	if test then true else false if test then val elif test val elif test val else val natural order do we need then.
3760 	X	true if normal else false val if test else val if test else val if test else val best order for normal default conditionals best order in general if we werent used to left right processing but we do expect left right almost everywhere except assignments.
3761 	X	pep made it clear that else should be.
3762 	X	putting the condition before the then was not as.
3763 	X	what sort of punctuation should augment or replace the keywords.
3764 	X	pep suggested avoiding punctuation but it wasnt.
3765 	X	no problem ill go back to watching this interesting discussion and see what.
3766 	X	i really should have deleted all but the last one anyway and probably should have moved it to python list at that point since its quite different from whats were proposed i.
3767 	X	out of order evaluation is already used in lcs and ges declarative style rather than imperative.
3768 	X	to try and make that last point clearer.
3769 	X	real z real if isinstance z complextype else z.
3770 	X	this translates directly into in words as set real to be the real component of z if z is a complex number otherwise set it to be the same as z.
3771 	X	real if isinstance z complextype then z real else z.
3772 	X	i cant put that into words without changing the order of the elements either by re using the phrasing from above with the condition between the two outcomes or else describing the statement form instead of the expression form by bringing the condition all the way to the front if z is a complex number then set real to be the real component of z otherwise set real to be the same as z.
3773 	X	i find it to be like with ges and lcs the phrasing works better with the expression at the front because you say basically what youre doing then you put the additional constraints on it i which iterable is used as the data source and what filtering is applied to the elements of that iterable.
3774 	X	i think ive said enough on this point though so ill try to bite my tongue until guido makes a.
3775 	X	nick coghlan ncoghlan at gmail com brisbane australia http boredomandlaziness blogspot com.
3776 	X	i think you mean else rather than then in all those dont you.
3777 	X	greg ewing computer science dept university of canterbury a citizen of newzealandcorp a christchurch new zealand wholly owned subsidiary of usa greg ewing at canterbury ac nz.
3778 	X	the reason i like a if b else c is because it has the most natural word.
3779 	X	my dog is happy if he has a bone else.
3780 	X	my dog is if he has a bone happy else.
3781 	X	return self arg if self arg is not none else default.
3782 	X	i think the fact that it does resemble english word order so much prevents the word soup problem from.
3783 	X	interestingly it looks more odd to me if parens are included.
3784 	X	return self arg if self arg is not none else default.
3785 	X	i think this is because without the parens i tend to read the if as applying to the whole phrase return self arg not just to the self arg.
3786 	X	the english analogy is rewriting my dog is happy if he has a bone as if he has a bone my dog is happy which also sounds natural whereas my dog is if he has a bone happy sounds.
3787 	X	so i still prefer a if b else c to any of the alternatives and i still think parens should not be.
3788 	X	greg ewing computer science dept university of canterbury a citizen of newzealandcorp a christchurch new zealand wholly owned subsidiary of usa greg ewing at canterbury ac nz.
3789 	X	id have thought only forth programmers would be prone to that.
3790 	X	it would surprise me greatly if its really true that most people would read it that.
3791 	X	especially given that in real code youre not going to be looking at abstract names like exp exp exp but hopefully something a lot more.
3792 	X	can you honestly say that you would read.
3793 	X	greg ewing computer science dept university of canterbury a citizen of newzealandcorp a christchurch new zealand wholly owned subsidiary of usa greg ewing at canterbury ac nz.
3794 	X	return if self arg is none default else self arg.
3795 	X	it would confuse everyone as to why lcs and ges dont have punctuation while these.
3796 	X	in that sense i am not convinced that it should have keywords and punctuation one or the.
3797 	X	neither sounds very natural to me conditional expressions dont occur much in.
3798 	X	its much more common to hear something like.
3799 	X	my dog is happy if he has a bone otherwise hes.
3800 	X	and that would correspond to a postfix conditional operator on statements not expressions perl and ruby have this but it doesnt seem very.
3801 	X	which is one reason why i dont like the proposed consequent if antecedent else alternative syntax it looks like a statement modifier when it isnt really.
3802 	X	when youre forced by the parens to read it correctly you stop liking it.
3803 	X	conditional expressions do occur in english though and they do generally have the consequent at the.
3804 	X	but they also generally have the else marker right at the.
3805 	X	buy some pork if its going cheap and some beef if.
3806 	X	you can divide an angle into n equal parts with ruler and compasses if n is a power of times a product of distinct fermat primes but not if n has any other.
3807 	X	i sleep all night and work all.
3808 	X	i dont think a syntax that authentically mirrors the structure of conditional expressions in english is likely to be very.
3809 	X	i agree that expr if cond else expr fits far more naturally these days given the ordering of generator expressions and list comprehensions but they were around when pep was discussed so i dont think they work as well as evidence also expr if cond else expr doesnt naturally admit an elif case reducing complexity and the tendency to overuse the construct in complex ways a.
3810 	X	and it doesnt need a new.
3811 	X	i have a vague fondness for this.
3812 	X	i really cant express it very well but the if then else version just feels a little too boring and conventional.
3813 	X	im sure people will get used to it heck weve got decorators and print but maybe pushing a mildly idiosyncratic form isnt worth opening that can of worms.
3814 	X	i suspect the time is now.
3815 	X	expr if cond else expr or if cond then expr else expr.
3816 	X	with the latter i dont mind if elif is added or.
3817 	X	im on guido just making the.
3818 	X	seems to have gone off list with a portion of the discussion.
3819 	X	natural english wise this also sounds natural.
3820 	X	if my dog has a bone hes happy otherwise hes.
3821 	X	but yeah ill use them regardless of the syntax even if i have.
3822 	X	since a if b else c is not obviously dead i will summarize my argument against it thusly.
3823 	X	it is ambiguous to people because it is can be parsed by people who are not automatons as either a if b else c or a if b else c.
3824 	X	the first parsing seeing a as the conditional rather than the consequent as in the the second is at least as reasonable as the second given precedents in both other algorithm languages and natural languages in english at least but i suspect others also.
3825 	X	as important it sometimes leads to bugs either in writing or.
3826 	X	the impetus for this discussion was a real life buggy example of the and or.
3827 	X	its replacement should be something not similarly bug prone even if for a different.
3828 	X	jim jewett jimjjewett at gmail com wrote in message news fbfbfcfda at mail gmail.
3829 	X	a nice summary to which i will add just a.
3830 	X	i think the first form with then better parallels the if cond statement because then functions as a separator between test and true just as or n functions as a separator between cond and true body.
3831 	X	i an far from convinced on either of these perhaps because i am not sure about the actual.
3832 	X	when expressions a and b both lack boolean operators as is common in python given that all objects have a boolean value a if b else c is mentally parseable as either a if b else c or a if b else c.
3833 	X	i initially though the proposal intended the.
3834 	X	hence we may expect occasional bugs both in writing and reading this.
3835 	X	greg ewing greg ewing at canterbury ac nz wrote in message news.
3836 	X	never wrote a single line and may have not read one in ddj byte for.
3837 	X	how do you read such c cond qmark.
3838 	X	i withdraw possibly most as not directly.
3839 	X	it would not take that many people to have enough people mistakenly write or read it that way for this construct to be somewhat as bug prone in practice as and.
3840 	X	during the c l p debate someone counted about correct uses of a and b or c in the standard.
3841 	X	but one real misuse edged guido toward replacing.
3842 	X	so i think the replacement should be as clear as reasonably possible and clearly an.
3843 	X	because every object in python ignoring buggy or unusual nonzero methods has a boolean value any expression can be a conditional expression and hence conditional expressions often lack a boolean operator to flag the expression as the likely.
3844 	X	given that setup how could i possible misread.
3845 	X	i can imagine that if i were to read the return naively i might wonder whether the expressions were.
3846 	X	and certainly not all code i have read has had such obvious.
3847 	X	now can you honestly say that you would naively read.
3848 	X	and be certain you knew what it meant.
3849 	X	but i think theres a difference in kind here to fix raymonds example required a fundamental change to the structure of the line none of which looked as clean as the.
3850 	X	there is no way to get the and or construct to gracefully handle the case where the desired result in the true case might itself be false either you change to using an if statement or you use a workaround like the ugly singleton list.
3851 	X	that is the following is fundamentally broken for pure imaginary numbers return isinstance z complextype and z real or z.
3852 	X	fixing it requires changing to either return isinstance z complextype and z real or z.
3853 	X	this is not the case with an in fix notation for conditional expressions you can fix a broken line simply by moving the relevant expressions to the correct.
3854 	X	i see this as were in the same category of error as writing return foo baz when you really should have written return baz foo i not the languages problem.
3855 	X	random aside it would be nice if foo bar baz automatically invoked the three argument form of pow.
3856 	X	id expect it to read like english return foo if bar is true otherwise return baz.
3857 	X	whether that was was what code was supposed to be doing i couldnt assess without additional context but that is true regardless of the syntax.
3858 	X	with the prefix notation used for cs conditional operator i simply dont read it in the order its written i read return bar.
3859 	X	foo baz as if bar is true then return foo otherwise return baz.
3860 	X	thats possible with c because it uses punctuation using an english keyword instead makes it significantly harder for me to consider interpreting the construct that way in fact the only way i can get my brain to accept it is by mentally replacing the if with and the else with.
3861 	X	does it help if you think of if c else as a parameterised infix operation for choosing between the expressions on either side.
3862 	X	nick coghlan ncoghlan at gmail com brisbane australia http boredomandlaziness blogspot com.
3863 	X	its hard to say whether this fixes raymonds example when the goal wasnt clearly stated but i find a non ternary option.
3864 	X	more readable than any of the variants proposed so.
3865 	X	the obvious downsides are that it can raise a valueerror and turns integers into.
3866 	X	but if the input list is all numeric it has clean.
3867 	X	nick coghlan ncoghlan at gmail com wrote in message news.
3868 	X	i am reminded of how some people seem to react to fingernails on a blackboard while the screech is just another noise to me except that i am in the opposite position with respect to a if b else c.
3869 	X	if i parse it as a if b else c and sort of ignore the words and think of it as t c f so that the whole thing is a switch pointing either left or right.
3870 	X	a bit strange but perhaps it.
3871 	X	i can honestly say that given i knew i was reading python code it would never have entered by head to read foo if as meaning that foo was the.
3872 	X	bizarrely backwards too much it would.
3873 	X	fwiw yes i can honestly say that i would be.
3874 	X	yes you may be able to parse it as foo if bar esle baz as well as foo if bar else baz but i know of no conceivable semantic meaning for foo if english has no postfix if and nor do any programming languages except entirely postfix ones such as.
3875 	X	a condition and first or second problem is in case when first in none.
3876 	X	take returns right operator when left evals to true and stops computing condidtional.
3877 	X	a x y take w or s a z is not none and q take or allowable zq take zq or impossible.
3878 	X	one of the advantages of if x then y else z is that it doesnt require the introduction of a new keyword i think the then could be special cased like as in the import statement.
3879 	X	i seldom have to read c code aloud and the.
3880 	X	operator is rare ish but i would suggest reading ab c as a chooses b else c or shaving a syllable a gives b else c or something like.
3881 	X	or ploddingly but unambiguously a query b colon c.
3882 	X	i cant imagine actually reading it as if foo were the.
3883 	X	but i can imagine reading it to begin with as if it were a perlish conditionalized statement return foo if bar else aw heck that cant be right.
3884 	X	which is probably benign but slows down.
3885 	X	this wouldnt look so bad either if x y else z.
3886 	X	def greet person none print hello s if person is none world else person.
3887 	X	its just like an if else construct but on a single line and around to make it look like an expression instead of a.
3888 	X	gustavo j a m carneiro the universe is always one step beyond.
3889 	X	and why special case for then is better than special case for take.
3890 	X	it looks even more like an expression without any embedded colons.
3891 	X	def greet person none infix conditional print hello s world if person is none else person.
3892 	X	def greet person none negated infix conditional so that normal value is first print hello s person if person is not none else world.
3893 	X	def greet person none prefix conditional print hello s if person is none then world else person.
3894 	X	anyway guidos already given some indication that the pep infix and prefix conditional operators without colons above are the main options he is considering choosing.
3895 	X	nick coghlan ncoghlan at gmail com brisbane australia http boredomandlaziness blogspot com.
3896 	X	yes and when the looping becomes the focal point one should generally rewrite a listcomp as a for.
3897 	X	nevertheless because boolean expressions have non boolean semantics in python i e they return the objects rather than a boolean value conditional expressions will almost certainly have the condition as the focal point because a simple boolean expression is no longer.
3898 	X	i am therefore strongly opposed to the a if cond else b.
3899 	X	weve already agreed that raymonds proposal to make boolean expressions return booleans is dead right.
3900 	X	im also opposed to elif in conditional expressions lets keep this a simple pythonic rewrite of cs.
3901 	X	im on requiring parentheses precisely because theyre.
3902 	X	im still expecting simple boolean expressions to be the primary use case and my hunch is that overall python code will read better with the ternary looking.
3903 	X	aahz aahz at pythoncraft com http www pythoncraft com.
3904 	X	the way to build large python applications is to componentize and loosely couple the hell out of.
3905 	X	fwiw i scanned the standard library for all the and or pairings where a conditional expression was.
3906 	X	this sampling can serve as a reference for what typical uses would look like in real python code as created by a number of different.
3907 	X	it only takes about five minutes to try out a given syntax proposal on all the fragments listed.
3908 	X	that short exercise provides an excellent insight into the look and feel of each proposal in real world.
3909 	X	cgitb py file file and os path abspath file or cgitb py formatter self format html and html or text compileal py cfile fullname debug and c or o csv py quotes a quotes b and a or b quotes keys csv py delims a delims b and a or b delims keys csv py modes char reduce lambda a b a b and a or b docxmlrpcserver py anchor cl and.
3910 	X	name or name fileinput py isfirstline and or line formatter py self writer send paragraph blankline and or gettext py builtin.
3911 	X	dict unicode and self ugettext or self gettext imaplib py l map lambda x s s x x and join x or l imputil py suffix char debug and c or o keyword py iptfile args and args or python graminit c pickle py self write obj and newtrue or newfalse pickle py self write obj and true or false pickletools py pos is none and unknown or pos py compile py cfile file debug and c or o pydoc py return result and re sub n rstrip result or pydoc py anchor cl and.
3912 	X	i did this for my favorite proposal and ended up with the list shown further down.
3913 	X	i think they all looks great.
3914 	X	the only problem is that its not easy to come up with a regex based way to transform.
3915 	X	because its hard to determine where c.
3916 	X	so i recommend that people leave existing and or code alone but start writing if else expressions in new code.
3917 	X	after all theres nothing wrong with and.
3918 	X	cgitb py file os path abspath file if file else cgitb py formatter html if self format html else text compileal py cfile fullname c if debug else o csv py a if quotes a quotes b else b quotes keys csv py a if delims a delims b else b delims keys csv py modes char reduce lambda a b a if a b else b docxmlrpcserver py anchor.
3919 	X	name if cl else name fileinput py if isfirstline else line formatter py self writer send paragraph if blankline else gettext py builtin.
3920 	X	dict self ugettext if unicode else self gettext imaplib py l map lambda x s s x join x if x else l imputil py suffix char c if debug else o keyword py iptfile args if args else python graminit c pickle py self write newtrue if obj else newfalse pickle py self write true if obj else false pickletools py unknown if pos is none else pos py compile py cfile file c if debug else o pydoc py return re sub n rstrip result if result else pydoc py anchor.
3921 	X	name if cl else name pydoc py lhs strong s strong name if name else pydoc py contents doc n if doc else pydoc py line name if name else repr pydoc py line self bold name if name else repr pydoc py host if sys platform mac else localhost pydoc py font helvetica if sys platform win else robotp py return.
3922 	X	allow if allowance else disallow self path telnet py do if cmd do else dont ord opt telnet py will if cmd will else wont ord opt thread py s if n else token py infilename args if args else include token h tokenize py yield parenlev nl if else newline unittest py return doc split n strip if doc else none unittest py return doc split n strip if doc else none unittest py run run.
3923 	X	s if else timetaken urllib py safe map c c if c in safe else x i urllib py type i if file else d xdrlib py print succeed if pred x else failed x xmlrpclib py write if value else.
3924 	X	guido van rossum home page http www python org guido.
3925 	X	a garbled list stupid gmail broke the.
3926 	X	here it is again as an.
3927 	X	guido van rossum home page http www python org guido a non text attachment was url http mail python org pipermail python dev attachments ba xifcelsey bin.
3928 	X	looks like youve been doing too much perl hacking lately.
3929 	X	the order is not logical at.
3930 	X	one usually expects to find the condition on one side and the alternatives on another side this is how its done in every conditional construct i know of traditional if then else lisps cond switch.
3931 	X	but there the condition is in the middle which breaks the natural reading order and feels.
3932 	X	this is especially true if the x in x if c else y happens to be a non trivial expression witness your example from unittest py return doc split n strip if doc else none.
3933 	X	because then the condition which is the most important part of the statement is shadowed by the complexity of the first alternative and the two alternatives which should logically be siblings are separated by something which has a different role in the.
3934 	X	this is exactly like a switch case statement where the switch would have to be inserted in the middle of two case.
3935 	X	also generally one of the most annoying things in computer languages is when they try to invent their own unnatural conditional forms such as perls inverted forms or unless.
3936 	X	guido after all theres nothing wrong with and.
3937 	X	thanks for digging those out i was thinking that would be a useful exercise but hadnt taken the time to think of an easy way to find relevant.
3938 	X	i tried it with if c then a else b and a if c else b and found both to be significantly more readable than the current.
3939 	X	in particular i wouldnt want to bet money that none of the examples are buggy as there were a few cases where the a value could conceivably be or but i couldnt tell if it was possible for the condition to also be true in those.
3940 	X	comparing the two syntaxes i tried i found that the infix notation generally required the addition of parentheses around the a expression when that expression was itself a binary operation otherwise the precedence was unclear and even with parentheses around the whole conditional the layout gave the impression that the conditional expression only applied to the second argument to the binary operation in a.
3941 	X	that said the more verbose form still felt like it had the elements out of sequence it was just crying out for the expression to be rewritten as a.
3942 	X	nick coghlan ncoghlan at gmail com brisbane australia http boredomandlaziness blogspot com.
3943 	X	i think the perception of whats important is relevant here to me the behaviour in the normal case i non empty doc is the most important.
3944 	X	the conditional and the default value returned when doc is empty are interesting but are a corner case rather than a fundamental element of the functions.
3945 	X	well no because it is possible to consider an if else as a parameterised binary operation that chooses between the left and right operands i its like an or only were asking that the decision be made based on something other than the truth value of the left hand operand.
3946 	X	that is in the case where the left hand expression has no side effects the following pairs of expression are essentially equivalent.
3947 	X	a or b a if a else b a and b a if not a else b.
3948 	X	in the switch statement example the switch statement is inherently an n ary operation so there is no comparable way of finding a spot to put the switch variable in the middle.
3949 	X	even more annoying are constructs that dont gel with the rest of the language.
3950 	X	nick coghlan ncoghlan at gmail com brisbane australia http boredomandlaziness blogspot com.
3951 	X	file os path abspath file if file else.
3952 	X	b c is not used very.
3953 	X	a quick check of the python source found.
3954 	X	the fact that so few were found in whole of the standard library does put the use case into question though no.
3955 	X	though i am sure more could be found with a more thorough.
3956 	X	having though about it more closely the reason i believe it might confuse newbies is because until the else comes along the construct can easily be read as a statement with a conditional suffix and its only after you read the else it becomes obvious that its the expression thats.
3957 	X	i realise that this reading will become habitual once this proposal is put into the language but i do think this will be a source of confusion to newcomers who should anyway be steered away from all the magic of ternary expressions list comprehensions generator expressions and the.
3958 	X	i would argue for mandatory parentheses around the expression leaving room later probably after guido is no longer around to be sick at the site of it for.
3959 	X	def f condition return something if condition no else.
3960 	X	not expecting this to fly ly yrs steve steve holden holden web llc www holdenweb com pycon tx www pycon org.
3961 	X	one way is to parse it manually to a.
3962 	X	this was just a test but more samples can be added friarly.
3963 	X	i found that my preference depends on the.
3964 	X	i like if cond then expr else expr for most things because having the condition in front tells me the purpose and its better represents the order the terms are evaluated.
3965 	X	but when checking a value and either changing it or leaving it alone i tended to want to type it.
3966 	X	in this case the condition is an accept or reject for the alternate.
3967 	X	and since the first term is a simple name instead of a complex expression the order of evaluation doesnt bother.
3968 	X	personally i prefer the function form best for the pure simplicity of it if cond e e but of course that doesnt do the shortcut behavior and it pre evaluates the arguments so its not an.
3969 	X	let me give you what you.
3970 	X	if all the x if c else y syntax does is prevent that atrocity from ever were introduced it would be worth.
3971 	X	guido van rossum home page http www python org guido.
3972 	X	they mostly look great to me too.
3973 	X	the exceptions are the ones in pydoc which have an odd feel to them and to my eyes dont parse.
3974 	X	i cant put my finger on the issue it could be that any ternary operator syntax breaks down when used in series with other operators or when there are complex sub.
3975 	X	there is one that looks like it could be completely mis interpreted.
3976 	X	name if name else as written above name if name else one mental interpretation name if name else an incorrect interpretation.
3977 	X	the grouping issue doesnt arise for syntaxes that start with a keyword if name then name else but even those suffer from unclear precedence when used with binary operations on the right if cond then a else b c.
3978 	X	im sorry for my bad english.
3979 	X	imho if condition is nontrivial then the syntax.
3980 	X	expr if some complex condition else expr.
3981 	X	can be more hard to read as compared with.
3982 	X	if some complex condition then expr else expr.
3983 	X	in the second form visual comparison of expr and expr is simpler because its adjacent.
3984 	X	do if cmd do and flag ok or x is none else dont.
3985 	X	do and dont visually divided and eyes must move there and back for find the difference between.
3986 	X	if cmd do and flag ok or x is none then do else dont.
3987 	X	it is very easy to determine what is possible expression.
3988 	X	it is a bit more readable from my point of view.
3989 	X	best regards alexander mailto kozlovsky at mail spbnit ru.
3990 	X	i waited until i had caught up on my reading before saying.
3991 	X	now ill express my opinion in a single posting then keep quiet unless i actually find i have something novel to contribute difficult in a topic thats been talked to death or times in the past few years.
3992 	X	i am strongly in favor of introducing a conditional expression in some.
3993 	X	the use of the and or trick is proof enough to me that there is a need for.
3994 	X	i can marshall other arguments also but they appear.
3995 	X	the syntax to use is a place where we need a bdfl.
3996 	X	make the decision and well all agree and move.
3997 	X	any decision would be better than an eternity of re discovering old ideas again and.
3998 	X	i think the two best options are trueval if cond else falseval and if cond then trueval else falseval the first has brevity in its favor and cleverness which might be an advantage or disadvantage depending on your point of.
3999 	X	the second has order of arguments in its.
4000 	X	in either case wise programmers will use parenthesees when it aids clarity imagine v if c else v v.
4001 	X	whether we require parenthesees when the parser could disambiguate on its own is really up to.
4002 	X	i prefer the second form if cond then trueval else falseval because it puzzles nobody at the expense of were slightly more wordy and less.
4003 	X	thanks guido for maintaining your patience in the face of this.
4004 	X	guido van rossum guido at python org wrote in message news cadcfaec at mail gmail.
4005 	X	this is one reason no addition got a relatively high rank in the.
4006 	X	versus cmd do and do or dont.
4007 	X	i still stronly prefer this order and even slightly prefer this.
4008 	X	i might even prefer a complete inversion of the order x else y if c do else dont if cmd.
4009 	X	do except that that does not chain at all.
4010 	X	however it does allow atrocities like.
4011 	X	func f for f in lst if f if f else.
4012 	X	i realise that any chosen syntax is subject to abuse but a conditional expression in a currently allowed conditional context will be guaranteed.
4013 	X	your original instinct to omit conditional expressions was right.
4014 	X	far too late ly yrs steve steve holden holden web llc www holdenweb com pycon tx www python org pycon.
4015 	X	inside an if of any flavor further ifs have to be.
4016 	X	func f for f in lst if f if f else.
4017 	X	func f for f in lst if f if f else.
4018 	X	but i doubt you meant to write where true could have.
4019 	X	an if else expression has lower priority than anything else except lambda the expression.
4020 	X	lambda x x if x else x.
4021 	X	lambda x x if x else x.
4022 	X	now youve pushed me over the.
4023 	X	ive made up my mind now x if c else y it will.
4024 	X	i hope to find time to implement it in python.
4025 	X	let it be as controversial as bool or decorator i dont.
4026 	X	guido van rossum home page http www python org guido.
4027 	X	hmmm then maybe it should be.
4028 	X	greg ewing computer science dept university of canterbury a citizen of newzealandcorp a christchurch new zealand wholly owned subsidiary of usa greg ewing at canterbury ac nz.
4029 	X	after a long discussion ive decided to add a shortcut conditional expression to python.
4030 	X	this first evaluates c if it is true a is evaluated to give the result otherwise b is evaluated to give the.
4031 	X	the priorities will be such that you can write.
4032 	X	x a if c else b x lambda a if c else b x a if c else b if d else e.
4033 	X	if a if c else b x for x in seq if a if c else b a if x if c else y else b a if c else b if d else e.
4034 	X	note that all these are intentionally.
4035 	X	in general if and else bind less tight than everything except.
4036 	X	we will adjust the syntax of what goes inside an if to disallow lambda currently.
4037 	X	is accepted but quite useless its always true so this will be.
4038 	X	flames pleas to reconsider to dev.
4039 	X	guido van rossum home page http www python org guido.
4040 	X	can someone update the pep on conditional expressions to point to this email and update the status etc.
4041 	X	congratulations and many thanks for making this decision before the threads leaked into the next summary.
4042 	X	steve you can wordify anything if you just verb.
4043 	X	whilst im not personally fond of the syntax.
4044 	X	whilst i dont feel this is a big step in the evolution of the language it shuts up a very frequently asked question and opens up a new one.
4045 	X	personally i would have preferred a no never in my life alternative response slightly more but a clear say is better than endless discussions about something as relevant as.
4046 	X	my canned reply tailored to fit into the set of accepted answers reduces to thank you so much.
4047 	X	you would never need to say this if you not felt like a.
4048 	X	christian tismer mailto tismer at stackless com tismerysoft gmbh have a break.
4049 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work mobile fax pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
4050 	X	all that said inside an if is hardly the best place for a conditional of any.
4051 	X	clearly such usage can go down as.
4052 	X	thats about the only way it would make sense i.
4053 	X	if this ends the discussion then ill consider ive done everyone a.
4054 	X	sometimes no decision is worse than the wrong decision.
4055 	X	regards steve steve holden holden web llc www holdenweb com pycon tx www python org pycon.
4056 	X	all that said inside an if is hardly the best place for a conditional of any.
4057 	X	clearly such usage can go down as.
4058 	X	thats about the only way it would make sense i.
4059 	X	if this ends the discussion then ill consider ive done everyone a.
4060 	X	sometimes no decision is worse than the wrong decision.
4061 	X	regards steve steve holden holden web llc www holdenweb com pycon tx www python org pycon.
4062 	X	nick coghlan ncoghlan at gmail com brisbane australia http boredomandlaziness blogspot com.
4063 	X	for both your patience and for supplying the decision we all desperately.
4064 	X	it always was and just to prove it we ended up with your original instinct after.
4065 	X	congratulations may this be as successful a syntax addition as decorators and print of which im a fan too.
4066 	X	a non text attachment was url http mail python org pipermail python dev attachments e attachment pgp.
4067 	X	i have to say now guido is getting rid of print along with the rest of the print statement i have become nostalgically fond of.
4068 	X	perhaps its just that i cant help siding with the underdog doomed for the knackers yard in python.
4069 	X	the decision on x if c else y is a cause for much.
4070 	X	nothing to see here folks lets move along ly yrs steve steve holden holden web llc www holdenweb com pycon tx www python org pycon.
4071 	X	i have to say now guido is getting rid of print along with the rest of the print statement i have become nostalgically fond of.
4072 	X	perhaps its just that i cant help siding with the underdog doomed for the knackers yard in python.
4073 	X	the decision on x if c else y is a cause for much.
4074 	X	nothing to see here folks lets move along ly yrs steve steve holden holden web llc www holdenweb com pycon tx www python org pycon.
4075 	X	so that c is evaluated first and if c is true d isnt evaluated at.
4076 	X	if that was in doubt you just proved it wink.
4077 	X	theres lots of code in it that looks like this.
4078 	X	def init self foo none if foo is not none self foo foo else self foo self getfoodefault.
4079 	X	with if else it can be written.
4080 	X	def init self foo none self foo foo if foo is not none else self getfoodefault.
4081 	X	however im convinced that the latter version is less readable than the.
4082 	X	often the line becomes more than characters so theres no gain in translating it to an if else expression because you would still have to split the line other times the condition is so complex that it deserves its own.
4083 	X	many opportunities for uses but atleast as many for.
4084 	X	exactly how i felt about bringing the decorator decision to a.
4085 	X	robert brewer system architect amor ministries fumanchu at amor org.
4086 	X	all proposals should be resolved this cleanly in the.
4087 	X	all proposals should be resolved this cleanly in the.
4088 	X	thomas wouters checked in a patch for pep so python now has the long awaited conditional expressions.
4089 	X	pep http www python org dev peps pep.
4090 	X	pep http mail python org pipermail python dev february html.
4091 	X	ive been convinced for a while that the proliferation of features like operator itemgetter and attrgetter and some uses of functional partial demonstrate that the ability to defer a single expression as lambda currently allows is a very useful feature to have in the.
4092 	X	unfortunately that utility gets overshadowed by the ugliness of the syntax the mathematical baggage associated with the current keyword and the fact that lambda gets pitched as an anonymous function limited to a single expression rather than as the ability to defer an expression for later evaluation the former sounds like a limitation that should be fixed the latter sounds like the deliberate design choice that it is.
4093 	X	at the moment it looks like the baby is going to get thrown out with the bathwater in pyk but id love to be able to simply write the following instead of some byzantine mixture of function calls to get the same effect.
4094 	X	functakingcallback x method zip zop def x.
4095 	X	itemgetter x def x attrgetter foo x foo def x partial y arg y arg def.
4096 	X	so rather than yet another workaround for lambda were ugly id rather see a pep that proposed lets make the syntax for deferring an expression not be ugly anymore now that we have generator expressions and conditionals as an example of how to do it right.
4097 	X	guido was rather unenthused the last time this topic came up though so maybe it isnt worth the.
4098 	X	although he did eventually change his mind on pep so i havent entirely given up hope yet.
4099 	X	nick coghlan ncoghlan at gmail com brisbane australia http www boredomandlaziness org.
4100 	X	if you are familiar with lambda its clearer because the expression evaluation is just deferred and you can see that zip and zop are going to be accessed at lambda call.
4101 	X	methodcaller could potentially hide an alternate binding of zip and zop like lambda x zip zip zop zop x method zipzop so you have to know what methodcaller does rather than just reading the.
4102 	X	and if you want to customize with def time lambda eval time bindings as well as call arg bindings you cant easily.
4103 	X	btw re def time bindings the default arg abuse is a hack so i would like to see a syntax that would permit default arg like def time function local bindings without affecting the call.
4104 	X	e if def foo args keywords bindings would use bindings as a dict at def time to create local namespace bindings like keywords but not affecting the call.
4105 	X	this would allow a nicer version of above mentioned lambda x zip zip zop zop x method zipzop as lambda x dict zip zip zop zop x method zipzop or lambda x zip zip zop zop x method zipzop this could also be used to do currying without the typical cost of wrapped nested.
4106 	X	the other direction in time goes towards reader macros.
4107 	X	btw this looks a lot like the anonymous def expression in a postfix form def x x def x x foo def arg arg y not sure about semantics of partial i guess you can guess my vote is for anonymous def likewise.
4108 	X	if i want to write a real function i already have perfectly good syntax for that in the form of a def.
4109 	X	i want to increase the conceptual and pedagogical difference between deferred expressions and real functions not reduce.
4110 	X	theres a reason i try to use the term deferred expression for lambda rather than anonymous.
4111 	X	even if lambdas are implemented as normal function objects theyre a conceptually different beast as far as im concerned a function is typically about factoring out a piece of common code to be used in multiple places while a lambda is about defining here and now an operation that is to be carried out elsewhere and possibly later e sorting and predicate arguments are defined at the call site but executed in the function body callbacks are defined when registered but executed when the relevant event occurs.
4112 	X	except that it wouldnt be the name used in a def statement has special status that a normal variable name does not e g the function knows about its real name but nothing about the aliases given to it by assignment statements.
4113 	X	i personally believe this fascination with we want to be able to include a suite inside an expression is a major contributor to guidos irritation with the whole concept of anonymous.
4114 	X	that may just be me projecting my own feelings though every time i try to start a discussion about getting a clean deferred expression syntax at least one part of the thread will veer off onto the topic of embedded.
4115 	X	imo if what you want to do is complex enough that you cant write it using a single expression then giving it a name and a docstring would probably make the code more comprehensible.
4116 	X	generator expressions allow a generator to be embedded only if it is simple enough to be written using a single expression in the body of the.
4117 	X	lambda does the same thing for functions but for some reason people seem to love the flexibility provided by genexps while many think the exact same restriction in lambda is a problem that needs fixing.
4118 	X	maybe once pep is implemented some of that griping will go away as it will then be possible to cleanly embed conditional logic inside an expression and hence inside a lambda.
4119 	X	nick coghlan ncoghlan at gmail com brisbane australia http www boredomandlaziness org.
4120 	X	a function also defines here and now an operation to be carried out elsewhere and later.
4121 	X	i believe that usage of a keyword with the name of a greek letter also contributes to people considering something.
4122 	X	agreed but when i use a lambda i almost always have a specific elsewhere in mind such as a sorting operation or a callback registration.
4123 	X	with named functions that isnt usually the case ill either be returning the function from a factory function or decorator allowing the caller to do whatever they want with it or ill be storing the function in a module or class namespace where any code that needs to use it can retrieve it.
4124 	X	local utility functions occupy a middle ground their usage is localised to one function or class definition but they arent necessarily defined just for one particular.
4125 	X	using them more than once is a clear sign that theyre worth naming and the occasional need to name a complex single use function seems a worthwhile trade off when compared to trying to permit that complexity to be embedded inside an.
4126 	X	aye i agree there are serious problems with the current.
4127 	X	all im trying to say above is that i dont believe the functionality itself is.
4128 	X	at last count guidos stated preference was to ditch the functionality entirely for pyk so unless he says something to indicate hes changed his mind well simply need to continue with proposing functions like methodcaller as workarounds for its.
4129 	X	nick coghlan ncoghlan at gmail com brisbane australia http www boredomandlaziness org.
4130 	X	thomas wouters thomas at xsall net.
4131 	X	copy me into your signature file to help me spread.
4132 	X	well pycon might be a nice place to finish any pep.
4133 	X	i know ill be available to do such work on the sprint days i dont think that means well have a working repository with all features right after.
4134 	X	there is a volunteer but hes new at this so he probably needs a bit of time to work through the intricacies of the ast the compiler and the eval.
4135 	X	since i was on a streak of implementing not quite the right thing i checked in my pep implementation with backward compatibility just to spite guidos latest change to the.
4136 	X	it jumps through a minor hoop two new grammar rules in order to be backwardly compatible but that hoop can go away in python and that shouldnt be too long from.
4137 	X	i apologize for the test failures of compile transform and parser they seem to all depend on the parsermodule were.
4138 	X	if no one feels responsible for it ill do it later in the week ill be sprinting until thursday.
4139 	X	thomas wouters thomas at xsall net.
4140 	X	copy me into your signature file to help me spread.
4141 	X	all build test failures introduced by the pep patch should be fixed thanks martin.
4142 	X	thomas wouters thomas at xsall net.
4143 	X	copy me into your signature file to help me spread.
4144 	X	i think it falls into the same category as guidos ultimate acceptance of pep.
4145 	X	there are assorted ways to live without conditional expressions but each of the workarounds for its absence had.
4146 	X	switching to a statement worked properly but meant you didnt have a single expression any.
4147 	X	use the and or trick kept the single expression characteristic but was easy to get.
4148 	X	hence pep one obvious way to do it assuming you want to do it in the first.
4149 	X	i think writing to outer scopes is.
4150 	X	you can box the variable or make it an attribute of an object but either approach requires you to refactor all uses of the variable rather than just the one you currently care.
4151 	X	hence nonlocal one obvious way to do it assuming you want to do it in the first.
4152 	X	that way when youre reading the code of someone who likes to use such tricks you only need to know how to read the one obvious way rather than having to decipher whichever method theyve chosen to work around the.
4153 	X	the perennial accumulator example still takes lines though.
4154 	X	def accumulator n def increment i nonlocal n n i return n return increment.
4155 	X	nick coghlan ncoghlan at gmail com brisbane australia http www boredomandlaziness org.
4156 	X	now that we have started to see conditional expressions i would like to see them.
4157 	X	the parens arent as important as they are with generator expressions but they.
4158 	X	level if absolute import in self futures else.
4159 	X	mentally i cant help parsing that as level plus comments that turn out to be code that triggers.
4160 	X	when the expressions particularly the true case are longer it gets even.
4161 	X	i think that adding parentheses would help by at least signalling that the logic is longer than just the next single.
4162 	X	level if absolute import in self futures else.
4163 	X	jj an html attachment was url http mail python org pipermail python dev attachments fff attachment html.
4164 	X	im not sure are you suggesting the grammar parser enforces it that way or that it should be in pep.
4165 	X	i still cant help but go yecchh whenever i see the.
4166 	X	it looks like perls expr if expr form but it behaves quite.
4167 	X	right now removing if else expressions still looks like the best solution to me but gauging reactions my own and others to the actual if expr in use is the main reason i added those couple of lines to the compiler.
4168 	X	thomas wouters thomas at python org.
4169 	X	copy me into your signature file to help me spread.
4170 	X	an html attachment was url http mail python org pipermail python dev attachments ba attachment html.
4171 	X	personally i think the above code exemplifies exactly why guido was correct in his reluctance to add conditional.
4172 	X	level if absolute import in self futures level.
4173 	X	or even if a certain obscurity is desirable.
4174 	X	level absolute import in self futures.
4175 	X	regards steve steve holden holden web llc ltd www holdenweb com love me love my blog holdenweb blogspot com.
4176 	X	sure and for those uses its good.
4177 	X	this isnt really a python dev topic though so ill avoid following up further on this.
4178 	X	regards steve steve holden holden web llc ltd www holdenweb com love me love my blog holdenweb blogspot com.
4179 	X	just because i cant give it.
4180 	X	mandatory parentheses make this form much more.
4181 	X	steve holden steve at holdenweb com wrote in message news.
4182 	X	i may be just a user but if the above is correct then that syntax needs to die.
4183 	X	there is no logical reason for xx if yy else zz to be roughly equivlent to if yy then zz else xx but afaict that is pretty much the way you expanded.
4184 	X	i hope i misunderstood or that there was a typo in a.
4185 	X	in honor of peter naur receiving the turing award.
4186 	X	and remembering pythons algol roots id like to constrast it with the truly obvious.
4187 	X	level if absolute import in self futures then else.
4188 	X	that way also has the minor advantage of computing the same value for level as jims code.
4189 	X	x if y else z is the same as if y then x else z except for the excessive.
4190 	X	the obvious spelling would require making then a keyword which is actually ok with everyone.
4191 	X	you were lucky this time bucko but dont ever go questioning a python dev regular again.
4192 	X	level if absolute import in self futures else.
4193 	X	level if absolute import in self futures else.
4194 	X	level if absolute import in self futures else.
4195 	X	level if absolute import in self futures else.
4196 	X	level if absolute import in self futures else.
4197 	X	if youre asking me id say that the second alternative is most readable.
4198 	X	level if absolute import in self futures then else.
4199 	X	level or depending on absolute import in self futures.
4200 	X	there was a typo in the.
4201 	X	regards steve steve holden holden web llc ltd www holdenweb com love me love my blog holdenweb blogspot com.
4202 	X	recent language features seem to be suffereing from excessive.
4203 	X	i worry that people will stop remembering which expressions requirement parens in which.
4204 	X	perhaps the solution is to require parens around all expressions a simple consistent.
4205 	X	if so then adding parens around all statements is a fairly natural extension which solves a number of problems like how to make a richer.
4206 	X	agreed and often the best way to make a conditional expression readable is to not use it in the first place which is a concept that an official policy on parentheses may.
4207 	X	and then theres the question of how to parenthesise chained conditional.
4208 	X	mandatory parentheses in that case would make me wonder if i was writing a certain language that isnt.
4209 	X	given that the main reason pep was finally implemented was to provide oowtdi for conditional expressions instead of the handful of not at all obvious and not quite right either workarounds that had developed in their absence i expect to see of rush of enthusiastic overuse of the new expression which will eventually settle down as everyone remembers that not every problem is a nail to be hit with the shiny new hammer.
4210 	X	nick coghlan ncoghlan at gmail com brisbane australia http www boredomandlaziness org.
4211 	X	the out of order evaluation is a very large change because now we have a situation where normal parsing completes an expression but needs to avoid evaluating it just in.
4212 	X	if false print r else print.
4213 	X	file pyshell line in toplevel r nameerror name r is not defined.
4214 	X	in the above example r doesnt get evaluated because the if ahead of it says to skip that.
4215 	X	but with conditional expressions that flow control is changed from later in the.
4216 	X	i dont think well see the equivalent of intercal suck points anywhere but intentionally obfuscated code but i do expect to see.
4217 	X	in fact i think the below examples are reasonable uses that do a better job of expressing intent than the if statement.
4218 	X	i just dont like the mental backtrack they require and would like some sort of advance.
4219 	X	parentheses at least tell me youre not done yet keep.
4220 	X	ack rr if r not in cache.
4221 	X	i think youve misunderstood the nature of the.
4222 	X	hte new conditionals are expressions they arent postfix conditionals for.
4223 	X	regards steve steve holden holden web llc ltd www holdenweb com love me love my blog holdenweb blogspot com.
4224 	X	right but the only effect of that on the examples is that they both need an else none continuation or.
4225 	X	i also predict widespread over use of the new toy and agree with jim that mandatory parentheses around the whole x if y else z construct would ameliorate legibility a.
4226 	X	i actually designed a language with that feature.
4227 	X	it was an exercise in minimality with hardly anything built in all the arithmetic operators were defined in the.
4228 	X	a result was that there was no built in notion of precedence and my solution was to require parentheses around every infix.
4229 	X	you would have had to write.
4230 	X	i never got an implementation working well enough to find out how much of a disaster this would have been to use.
4231 	X	greg ewing computer science dept university of canterbury carpe post meridiam.
4232 	X	christchurch new zealand im not a morning.
4233 	X	greg ewing at canterbury ac nz.
4234 	X	i already do that anyway and even update other peoples code in any open source projects i contribute to because i find it far easier to read and write unnecessary parens than remember precedence.
4235 	X	but i can understand why some people would balk at it so from.
4236 	X	robert brewer system architect amor ministries fumanchu at amor org.
4237 	X	the issue that spawned the necessity of a ternary operator in the first place was that this syntax is not usable at all in quite a few situations like say list.
4238 	X	and of course the example i criticized was a list comprehension not.
4239 	X	the fact that ternary operators improve some features isnt an excuse for using them when they actually decrease.
4240 	X	regards steve steve holden holden web llc ltd www holdenweb com love me love my blog holdenweb blogspot com.
4241 	X	with parentheses we can use if cond then val else val form without the burden of hacking the parser although the cost of the keyword then is still.
4242 	X	so some possible forms that prompts in my mind are.
4243 	X	level if absolute import in self future then else level if absolute import in self future else level if absolute import in self future else.
4244 	X	greg ewing greg ewing at canterbury ac nz wrote in message news.
4245 	X	well the original was almost certainly a tongue in cheek reference to.
4246 	X	lisp was a disaster to use so i doubt your language would have been any.
4247 	X	the way one identifies a lisp programmer is to find the person whose paren keys have worn competely off their.
4248 	X	given how much python is indebted to lisp digs at lisp seem particularly off topic for this.
4249 	X	guido van rossum home page http www python org guido.
4250 	X	at least lisp would let you say.
4251 	X	and not force you to write.
4252 	X	my language would not have been so forgiving unless you were willing to define a bunch of different functions with different numbers of.
4253 	X	btw i did use lisp and scheme fairly heavily for a period and didnt find them to be disasters at least not because of the.
4254 	X	im new to this list so please excuse me if this topic is discussed but i didnt see anything similar in the.
4255 	X	i very often want something like a try except conditional expression similar to the if else.
4256 	X	an example of the proposed syntax might be x float string except float nan or possibly x float string except valueerror float nan.
4257 	X	heres a simple example converting a large list of strings to floats where there may be errors that i want returned as.
4258 	X	currently i would write the function def safe float function string try result float string except result float nan return result and get my list of floats using the list comprehension xs safe float function string for string in strings.
4259 	X	with a try except conditional i would instead define the following lambda safe float conditional lambda string float string except float nan leading to xs safe float conditional string for string in strings.
4260 	X	my understanding is that the second would be faster at run time and like if else conditional expressions possibly more easily read by the.
4261 	X	again please excuse me if this is discussed.
4262 	X	if so id appreciate were pointed to the.
4263 	X	please also excuse me if for there is some currently pre python idiom that i could use to efficiently get this same.
4264 	X	jeffrey e mcaninch phd physicist x ifd los alamos national laboratory email mcaninch at lanl gov.
4265 	X	an html attachment was url http mail python org pipermail python dev attachments dea attachment htm.
4266 	X	x float string except valueerror else float nan.
4267 	X	if accepted this would also solve the feature requests for various functions to have default.
4268 	X	x min seq except valueerror else default to zero for empty sequences.
4269 	X	it would also be helpful in calculations that have algebraic restrictions.
4270 	X	sample std deviation sqrt sum x mu for x in seq len seq except zerodivisionerror else float inf.
4271 	X	i think as would be better than else since else has a different meaning in try except statements e g.
4272 	X	x float string except valueerror typeerror as float nan.
4273 	X	of course this is a different meaning of as too but its not as contradictory.
4274 	X	yes exactly the situations i keep coding.
4275 	X	jeffrey e mcaninch phd physicist x ifd los alamos national laboratory email mcaninch at lanl gov.
4276 	X	were probably well into python ideas territory at this point but ill keep things where the thread started for now.
4277 	X	the basic idea appears sound to me as.
4278 	X	i suspect finding an acceptable syntax is going to be the sticking.
4279 	X	breaking the problem down we have three things we want to separate.
4280 	X	the expression that may raise the exception the expression defining the exceptions to be caught the expression to be used if the exception actually is caught.
4281 	X	change the relative order of the clauses by putting the exception definition last.
4282 	X	i actually like this one thats why i listed it first.
4283 	X	it gets the clauses out of order relative to the statement but the meaning still seems pretty obvious to.
4284 	X	follow the lamba model and allow a colon inside this form of expression.
4285 	X	x float string except valueerror float nan op float string except valueerror float nan.
4286 	X	this has the virtue of closely matching the statement syntax but embedding colons inside expressions is somewhat.
4287 	X	yes lambda already does it but lambda can hardly be put forward as a paragon of.
4288 	X	x float string except valueerror else float nan op float string except valueerror else float nan.
4289 	X	this has the problem of inverting the sense of the else clause relative to the statement form where the else clause is executed only if no exception occurs.
4290 	X	a couple of extra keywords would get the sense correct again but im not sure the parser could cope with it and it is rather verbose i much prefer option to this idea.
4291 	X	x float string if not except valueerror else float nan op float string if not except valueerror else float nan.
4292 	X	x float string except valueerror as float nan op float string except valueerror as float nan.
4293 	X	given that we now use except valueerror as ex in exception statements the above strikes me a really confusing.
4294 	X	nick coghlan ncoghlan at gmail com brisbane australia.
4295 	X	on this option as it resembles the standard try except block enough it would be a quick edit to convert it to one if later you realize you need to catch more exceptions.
4296 	X	i recommend not allowing multiple exceptions in this form eg x float string var except valueerror zerodivisionerror float nan.
4297 	X	as it will start to reduce readability quickly.
4298 	X	utf q try except conditional expression si utf qmilar to if else conditional pep.
4299 	X	raymond hettinger python at rcn com writes sequences.
4300 	X	how about x min seq if seq else.
4301 	X	shorter and more readable except x else y isnt very logical.
4302 	X	i have to say that the original example x float string except valueerror else float nan.
4303 	X	i dont see how its adequate behaviour to return a nan when presented with a string which doesnt represent a float.
4304 	X	besides all this is python ideas material and has probably already been proposed before.
4305 	X	i fear this idea is soon going to extend to all compound statements one by.
4306 	X	wouldnt it be smarter to fix the issue once and for all by looking into making pythons compound statements or even all statements without restrictions expressions that can return values in the first place.
4307 	X	now i dont know if its actually possible but if it is the problem becomes solved not just for try except and twice so for if else but also for while for though that ones already served pretty well by comprehensions and with.
4308 	X	a further extension if we need it.
4309 	X	result foo arg except float inf if zerodivisionerror else float nan.
4310 	X	the else part handles any other exceptions not necessarily a good idea.
4311 	X	result foo arg except float inf if zerodivisionerror else float nan if valueerror.
4312 	X	a colon is also used in a dict.
4313 	X	i took a look at the options and.
4314 	X	x float string except float nan if valueerror y float string except valueerror float nan.
4315 	X	and i think this can be done just as easily with existing syntax.
4316 	X	def try func args except none if none try return func args except if as e return except.
4317 	X	def try func args the last argument is a dictionary exception type return value dic args try return func args except exception as e for kv in dic items if isinstance e k return v raise.
4318 	X	for string in five x float string except float nan if valueerror x try float string except float nan if valueerror y float string except valueerror float nan y try float string valueerror float nan print x y.
4319 	X	as a side note if i just subscribed to python dev is it possible to quote an old email.
4320 	X	below is my manual cut and paste quote.
4321 	X	a further extension if we need it.
4322 	X	result foo arg except float inf if zerodivisionerror else float nan.
4323 	X	the else part handles any other exceptions not necessarily a good idea.
4324 	X	result foo arg except float inf if zerodivisionerror else float nan if valueerror.
4325 	X	a colon is also used in a dict.
4326 	X	what about catching specific error numbers.
4327 	X	maybe an option so that the dictionary elements can also be dictionaries with integers as the keys.
4328 	X	if it isnt found in the dictionary then we raise the.
4329 	X	since i dont know the parser coding i wont comment on the relative implentability implementableness of the syntax options that nick p j and raymond.
4330 	X	nicks option seems like it might be the most understandable to a python.
4331 	X	would the full syntax include multiple exceptions after the if.
4332 	X	jeffrey e mcaninch phd physicist x ifd los alamos national laboratory email mcaninch at lanl gov.
4333 	X	in article de ce fbfca at masklinn net.
4334 	X	the basic idea appears sound to me as.
4335 	X	i suspect finding an acceptable syntax is going to be the sticking.
4336 	X	breaking the problem down we have three things we want to separate.
4337 	X	the expression that may raise the exception the expression defining the exceptions to be caught the expression to be used if the exception actually is caught.
4338 	X	change the relative order of the clauses by putting the exception definition last.
4339 	X	i actually like this one thats why i listed it first.
4340 	X	it gets the clauses out of order relative to the statement but the meaning still seems pretty obvious to.
4341 	X	follow the lamba model and allow a colon inside this form of expression.
4342 	X	x float string except valueerror float nan op float string except valueerror float nan.
4343 	X	this has the virtue of closely matching the statement syntax but embedding colons inside expressions is somewhat.
4344 	X	yes lambda already does it but lambda can hardly be put forward as a paragon of.
4345 	X	x float string except valueerror else float nan op float string except valueerror else float nan.
4346 	X	this has the problem of inverting the sense of the else clause relative to the statement form where the else clause is executed only if no exception occurs.
4347 	X	a couple of extra keywords would get the sense correct again but im not sure the parser could cope with it and it is rather verbose i much prefer option to this idea.
4348 	X	x float string if not except valueerror else float nan op float string if not except valueerror else float nan.
4349 	X	x float string except valueerror as float nan op float string except valueerror as float nan.
4350 	X	given that we now use except valueerror as ex in exception statements the above strikes me a really confusing.
4351 	X	nick coghlan ncoghlan at gmail com brisbane australia python dev mailing list python dev at python org http mail python org mailman listinfo python dev unsubscribe http mail python org mailman options python dev dinov microsoft com.
4352 	X	cc python dev at python org jeff mcaninch.
4353 	X	were probably well into python ideas territory at this point but ill keep things where the thread started for now.
4354 	X	try x float string except some check x float nan except valueerror x float inf.
4355 	X	in other words some check returns an exception class.
4356 	X	try x float except get exception print not a float.
4357 	X	i was thinking this was would be equal to.
4358 	X	i suppose it depends on the precedence of x except y if z vs x if y else.
4359 	X	for some reason this kind of reminds me of.
4360 	X	let func name arg arg expression.
4361 	X	however there was also the valof resultis.
4362 	X	in python the return statement provides the result of a function in bcpl the resultis statement provided the result of the valof block which was call from within an expression like.
4363 	X	should be legal right since syntax would be.
4364 	X	thinking more about the syntax options if p if option is used it should also be.
4365 	X	that is i would want this to also be legal to trap any exception when robustness is more important than catching a specific.
4366 	X	what would be the typical next step in trying to put this forward.
4367 	X	jeffrey e mcaninch phd physicist x ifd los alamos national laboratory email mcaninch at lanl gov.
4368 	X	unless i am very much mistaken this is the approach ruby.
4369 	X	for example the value of a block is the value of the last expression in the.
4370 	X	ive never understood the need to have a distinction betwen statements and expressions not when expressions can have side.
4371 	X	its like that differentce between procedures and functions in pascal that only serves to confuse.
4372 	X	catch specific exceptions optionally catching all others.
4373 	X	expression except expression if exception else expression.
4374 	X	of course a catch all is a bare except with all its dangers.
4375 	X	i believe people now discuss this both on python dev and python ideas though since im new to both lists i cant really tell where this.
4376 	X	i played a little with this syntax my try function and catch decorator which are at http mit edu unknot www try cond py.
4377 	X	y float string except valueerror float nan y try float string valueerror float nan.
4378 	X	try z open string r except ioerror as e if e errno z not exist else raise z try open string r iocatcher no file.
4379 	X	it would be interesting to come up with syntax for except if clause but its not obvious how to make one and this fact itself may kill the the more reasonable approach to things like this is by defining a separate block and then performing a catch operation with.
4380 	X	unfortunately this looks very clumsy as currently this can only be done by defining a separate.
4381 	X	i think code blocks are a good direction to.
4382 	X	valur jnsson kristjan at ccpgames com.
4383 	X	it definitely belongs on the ideas.
4384 	X	valur jnsson kristjan at ccpgames com.
4385 	X	if youre interested in understanding it better research query command separation qcs e g starting at http en wikipedia org wiki command query separation and links.
4386 	X	copying what other languages do is not necessarily a bad thing but that would fail both explicit is better than implicit and in the face of ambiguity avoid the temptation to guess.
4387 	X	its not immediately obvious to me why the last expression should be given that privileged.
4388 	X	its been a while but i dont think it ever confused.
4389 	X	being unable to return multiple values that confused me but the distinction between procedures are for doing something functions are for getting something back was perfectly straight.
4390 	X	and then pascal went and made it slightly more confusing by adding var parameters so you could get results back from a procedure and have side effects in a oh.
4391 	X	its not immediately obvious to me why the last expression should be given that privileged.
4392 	X	so find a large body of lisp code and run grep r prog wc grep r prog wc and grep r progn wc on.
4393 	X	i think the pragmatic answer will be.
4394 	X	personally i like functional languages and.
4395 	X	but i admit the need for a progn construct ie block to express procedural style and see no particular reason why expressing that by making a syntactic distinction between expressions and statements is worse or better than the progn.
4396 	X	that should be kept distinct from the question of whether extended assignment operators or conditional operators are appropriate for a given.
4397 	X	the first objection one might be able to give you maybe but the second one.
4398 	X	wheres the ambiguity in compound statements return the result of the last evaluated expression.
4399 	X	because it wouldnt make any sense.
4400 	X	when youre computing something the value you want is the one at the end of the computation usually called a result not some random one somewhere.
4401 	X	expression similar to if else conditional pep.
4402 	X	either you missed kristjns point or your answer was so subtle that i missed.
4403 	X	qcs makes it easy to determine which pieces of code queries are free of side.
4404 	X	i see value in that for both debugging and.
4405 	X	what i dont see is how that relates to expressions vs statements when expressions can have side.
4406 	X	actually in python i would say that statements are far more likely to be free of side effects as they are often there for flow.
4407 	X	i think it may be done currently with the help of next function.
4408 	X	def guard func args try return func except exception e for exc type exc func in args if isinstance e exc type return exc func raise.
4409 	X	result a b c raise zerodivisionerror.
4410 	X	result a guard lambda b c typeerror lambda zerodivisionerror lambda b may be not very concise but it.
4411 	X	best regards alexander mailto alexander kozlovsky at gmail com.
4412 	X	x computation except myexception default x try computation except myexception e default x try computation except myexception as e default e except myotherexception other default except baseexception as e fallback e.
4413 	X	many ml inspired but not directly related languages from academia mix things up usually using more keywords and fewer.
4414 	X	so the oz would map to python as http mozart github io mozart v doc tutorial node html.
4415 	X	x try computation catch myexception as e then default e.
4416 	X	many lisp derived languages like clojure implement try catch as special forms if you dont know what that means think function like macros so you write effectively http clojure org special forms special forms try expr catch clause finally clause.
4417 	X	in common lisp this is done with a slightly clunkier handler case macro but the basic idea is the.
4418 	X	http clhs lisp se body m hand htm.
4419 	X	the lisp style is surprisingly used by some languages that dont have macros like lua where xpcall takes.
4420 	X	writing lambdas python style instead of lua style http www gammon com au scripts doc phplua xpcall.
4421 	X	x xpcall lambda expression lambda e default e.
4422 	X	this actually returns true expression or false default e but i think we can ignore that.
4423 	X	haskell is actually similar to lua here except that its all done with monads of course.
4424 	X	you can write a pattern matching expression within the function to decide what to do with it catching and re raising exceptions you dont want is cheap enough to be.
4425 	X	but haskell infixing makes this nicer.
4426 	X	and that makes the parallel between the lambda colon and the except colon in the proposal much more obvious.
4427 	X	x expression except exception default x expression except exception as e default e.
4428 	X	tcl has the other half of luas xpcall catch is a function which returns true if an exception was caught false otherwise and you get the value out in other.
4429 	X	and its all built around the the implicit quote and exec that everything in tcl is based on making it even harder to describe in python terms than lisp macros but something like http wiki tcl tk.
4430 	X	smalltalk is also somewhat hard to map to.
4431 	X	the basic version would be http smalltalk gnu org wiki exceptions.
4432 	X	x computation on myexception do default.
4433 	X	but thats basically smalltalks passing arguments with colons syntax not its exception handling.
4434 	X	an examination of use cases shows that this is not needed as often as it would be with the statement form and as its syntax is a point on which consensus has not been reached the entire feature is.
4435 	X	in order to ensure compatibility with future versions ensure that any consecutive except operators are parenthesized to guarantee the interpretation you.
4436 	X	multiple except keywords can be used and they will all catch exceptions raised in the original expression only.
4437 	X	will catch any of the listed exceptions thrown by expr any exception thrown by a default expression will.
4438 	X	value expr except exception as e default except exception as e default except exceptionn as e defaultn.
4439 	X	using parentheses to force an alternative interpretation works as expected.
4440 	X	will catch an exception thrown by either expr or default value expr except exception default except exception default will catch an exception thrown by default only value expr except exception default except exception default.
4441 	X	this last form is confusing and should be discouraged by pep but it is syntactically legal you can put any sort of expression inside a ternary except ternary except is an expression therefore you can put a ternary except inside a ternary.
4442 	X	open question where there are multiple except clauses should they be separated by commas.
4443 	X	it may be easier for the parser that way.
4444 	X	value expr except exception as e default except exception as e default except exceptionn as e defaultn.
4445 	X	with an optional comma after the last as per tuple.
4446 	X	downside omitting the comma would be syntactically valid and would have almost identical semantics but would nest the entire preceding expression in its exception catching rig a matching exception raised in the default clause would be caught by the subsequent except.
4447 	X	as this difference is so subtle it runs the risk of were a major bug.
4448 	X	as a mitigation of this risk this form.
4449 	X	value expr except exception default except exception default.
4450 	X	could be syntactically forbidden and parentheses required if the programmer actually wants that behaviour.
4451 	X	value expr except exception default except exception default.
4452 	X	this would prevent the accidental omission of a comma from changing the expressions.
4453 	X	in a try except block the use of as to capture the exception object creates a local name binding and implicitly deletes that binding in a finally.
4454 	X	as finally is not a part of this proposal see below this makes it tricky to describe also this use of as gives a way to create a name binding in an expression.
4455 	X	should the default clause have an inner scope in which the name exists shadowing anything of the same name elsewhere.
4456 	X	should it behave the same way the statement try except does and unbind the name.
4457 	X	should it bind the name and leave it bound.
4458 	X	almost certainly not this behaviour was changed in python for good.
4459 	X	additionally this syntax would allow a convenient way to capture exceptions in interactive python returned values are captured by but exceptions currently are.
4460 	X	the inner scope idea is tempting but currently cpython handles list comprehensions with a nested function call as this is considered.
4461 	X	it may be of value to simplify both comprehensions and except expressions but that is a completely separate proposal to this pep alternatively it may be better to stick with whats known to.
4462 	X	an examination of the python standard library shows that while the use of as is fairly common occurring in roughly one except clause in five it is extremely uncommon in the cases which could logically be converted into the expression.
4463 	X	its few uses can simply be left.
4464 	X	consequently in the interests of simplicity the as clause is not included in this.
4465 	X	a subsequent python version can add this without breaking any existing code as as is already a.
4466 	X	one example where this could possibly be useful is lib imaplib py try typ dat.
4467 	X	simple command logout except typ dat no s s sys exc info this could become typ dat.
4468 	X	simple command logout except baseexception as e no s s type e e or perhaps some other.
4469 	X	this is hardly the most compelling use case but an intelligent look at this code could tidy it up.
4470 	X	in the absence of further examples showing any need of the exception object i have opted to defer indefinitely the.
4471 	X	finally clause the statement form finally or finally has no logical corresponding expression.
4472 	X	therefore the finally keyword is not a part of this proposal in any.
4473 	X	with several of the proposed syntaxes omitting the exception type name would be easy and concise and would be.
4474 	X	for conveniences sake it might be advantageous to have a bare except clause mean something more useful than except baseexception.
4475 	X	all of these were rejected for severa.
4476 	X	first and foremost consistency with the statement form of try except would be.
4477 	X	just as a list comprehension or ternary if expression can be explained by breaking it out into its vertical statement form an expression except should be able to be explained by a relatively mechanical translation into a near equivalent.
4478 	X	any form of syntax common to both should therefore have the same semantics in each and above all should not have the subtle difference of catching more in one than the other as it will tend to attract unnoticed.
4479 	X	secondly the set of appropriate exceptions to catch would itself be a huge point of.
4480 	X	it would be impossible to predict exactly which exceptions would make sense to be caught why bless some of them with convenient syntax and not others.
4481 	X	and finally this partly because the recommendation was that a bare except should be actively encouraged once it was reduced to a reasonable set of exceptions any situation where you catch an exception you dont expect to catch is an unnecessary bug.
4482 	X	consequently the use of a bare except is down to two possibilities either it is syntactically forbidden in the expression form or it is permitted with the exact same semantics as in the statement form namely that it catch baseexception and be unable to capture it with as.
4483 	X	pep rightly advises against the use of a bare.
4484 	X	while it is syntactically legal in a statement and for backward compatibility must remain so there is little value in encouraging its.
4485 	X	in an expression except clause except is a syntaxerror use the equivalent long hand form except baseexception.
4486 	X	a future version of python may choose to reinstate this which can be done without breaking.
4487 	X	should it be legal to parenthesize the except clauses separately from the expression that could raise.
4488 	X	value expr except exception as e default except exception as e default except exceptionn as e defaultn.
4489 	X	this is more compelling when one or both of the deferred sub proposals of multiple except clauses and or exception capturing is.
4490 	X	in their absence the parentheses would be thus value expr except exceptiontype default value expr except exceptiontype default.
4491 	X	the advantage is minimal and the potential to confuse a reader into thinking the except clause is separate from the expression or into thinking this is a function call makes this non.
4492 	X	the expression can of course be parenthesized if desired as can the default value expr except exceptiontype default.
4493 	X	the following was been suggested as a similar short hand though not technically an expression.
4494 	X	for instance a common use case is attempting the removal of a file os unlink some file except oserror pass.
4495 	X	there is an equivalent already in python however in contextlib from contextlib import suppress with suppress oserror os unlink some file.
4496 	X	as this is already a single line or two with a break after the colon there is little need of new syntax and a confusion of statement vs expression to achieve.
4497 	X	this document is placed in the public.
4498 	X	local variables mode indented text indent tabs mode nil sentence end double space t fill column coding utf end.
4499 	X	just as pep introduced a means of value based conditions in an expression this system allows exception based conditions to be used as part of an.
4500 	X	a number of functions and methods have parameters which will cause them to return a specified value instead of raising an.
4501 	X	the current system is ad hoc and inconsistent and requires that each function be individually written to have this functionality not all support.
4502 	X	dict get key default second positional argument in place of keyerror.
4503 	X	next iter default second positional argument in place of stopiteration.
4504 	X	list pop no way to return a default.
4505 	X	seq index no way to handle a bounds error.
4506 	X	min sequence default default keyword argument in place of valueerror.
4507 	X	sum sequence start default slightly different but can do the same job.
4508 	X	statistics mean data no way to handle an empty iterator.
4509 	X	the current system requires that a function author predict the need for a default and implement support for.
4510 	X	if this is not done a full try except block is.
4511 	X	since try except is a statement it is impossible to catch exceptions in the middle of an.
4512 	X	just as if else does for conditionals and lambda does for function definitions so does this allow exception catching in an expression.
4513 	X	this provides a clean and consistent way for a function to provide a default it simply raises an appropriate exception and the caller catches.
4514 	X	with some situations an lbyl technique can be used checking if some sequence has enough length before indexing into it for instance.
4515 	X	this is not safe in all cases but as it is often convenient programmers will be tempted to sacrifice the safety of eafp in favour of the notational brevity of.
4516 	X	additionally some lbyl techniques eg involving getattr with three arguments warp the code into looking like literal strings rather than attribute lookup which can impact.
4517 	X	a convenient eafp notation solves all of.
4518 	X	theres no convenient way to write a helper function to do this the nearest is something ugly using either lambda.
4519 	X	def except expression exception list default try return expression except exception list return default value except lambda x zerodivisionerror lambda float nan.
4520 	X	which is clunky and unable to handle multiple exception clauses or eval.
4521 	X	def except expression exception list default try return eval expression globals of caller locals of caller except exception list as exc l locals of caller copy l exc exc return eval default globals of caller l.
4522 	X	value except x zerodivisionerror cant divide by zero.
4523 	X	which is even clunkier and relies on implementation dependent.
4524 	X	writing globals of caller and locals of caller for interpreters other than cpython is left as an exercise for the.
4525 	X	raymond hettinger expresses a desire for such a consistent.
4526 	X	something similar is requested multiple times in the.
4527 	X	https mail python org pipermail python ideas march html https mail python org pipermail python ideas august html https mail python org pipermail python ideas august html.
4528 	X	just as the or operator and the three part if else expression give short circuiting methods of catching a falsy value and replacing it this syntax gives a short circuiting method of catching an exception and replacing.
4529 	X	lst none value lst or no value.
4530 	X	lst value lst except indexerror no value.
4531 	X	where expr exception list and default are all.
4532 	X	if no exception is raised its value is the value of the overall.
4533 	X	if any exception is raised exception list is evaluated and should result in either a type or a tuple just as with the statement form of try.
4534 	X	any matching exception will result in the corresponding default expression were evaluated and becoming the value of the.
4535 	X	as with the statement form of try except non matching exceptions will propagate.
4536 	X	note that the current proposal does not allow the exception object to be.
4537 	X	where this is needed the statement form must be.
4538 	X	see below for discussion and elaboration on.
4539 	X	this ternary operator would be between lambda and if else in.
4540 	X	consider this example of a two level cache for key in sequence x lvl key except keyerror lvl key except keyerror f key do something with x.
4541 	X	this cannot be rewritten as x lvl get key lvl get key f key.
4542 	X	which despite were shorter defeats the purpose of the cache as it must calculate a default value to pass to.
4543 	X	the get version calculates backwards the exception testing version calculates forwards as would be.
4544 	X	the nearest useful equivalent would be x lvl get key or lvl get key or f key which depends on the values were nonzero as well as depending on the cache object supporting this.
4545 	X	discussion on python ideas brought up the following syntax suggestions.
4546 	X	value expr except default if exception as e value expr except default for exception as e value expr except default from exception as e value expr except exception as e return default value expr except exception as e default value expr except exception as e try default value expr except exception as e continue with default value default except exception as e else expr value try expr except exception as e default value expr except default catches anything value expr except exception default catches only the named type s value default if expr raise exception value expr or else default if exception value expr except exception as e default value expr except exception as e pass default.
4547 	X	it has also been suggested that a new keyword be created rather than reusing an existing.
4548 	X	such proposals fall into the same structure as the last form but with a different keyword in place of.
4549 	X	also in the context of the default if expr raise exception proposal it was suggested that a new keyword raises be.
4550 	X	all forms involving the as capturing clause have been deferred from this proposal in the interests of simplicity but are preserved in the table above as an accurate record of.
4551 	X	generator expressions require parentheses unless they would be strictly.
4552 	X	ambiguities with except expressions could be resolved in the same way forcing nested except in except trees to be correctly parenthesized and requiring that the outer expression be clearly.
4553 	X	for each example an approximately equivalent statement form is given to show how the expression will be.
4554 	X	these are not always strictly equivalent but will accomplish the same.
4555 	X	it is not safe for the interpreter to translate one into the.
4556 	X	a number of these examples are taken directly from the python standard library with file names and line numbers correct as of early feb.
4557 	X	many of these patterns are extremely.
4558 	X	retrieve an argument defaulting to none cond args except indexerror none.
4559 	X	lib pdb py try cond args except indexerror cond none.
4560 	X	fetch information from the system if available pwd os getcwd except oserror none.
4561 	X	lib tkinter filedialog py try pwd os getcwd except oserror pwd none.
4562 	X	attempt a translation falling back on the original e widget.
4563 	X	lib tkinter init py try e widget.
4564 	X	nametowidget w except keyerror e widget w.
4565 	X	read from an iterator continuing with blank lines once its exhausted line readline except stopiteration.
4566 	X	lib libto pgen tokenize py try line readline except stopiteration line.
4567 	X	retrieve platform specific information note the dry improvement this particular example could be taken further turning a series of separate assignments into a single large dict initialization sys abiflags may not be defined on all.
4568 	X	config vars abiflags sys abiflags except attributeerror.
4569 	X	lib sysconfig py try config vars abiflags sys abiflags except attributeerror sys abiflags may not be defined on all.
4570 	X	retrieve an indexed item defaulting to none similar to dict get def getnameditem self name return.
4571 	X	lib xml dom minidom py def getnameditem self name try return.
4572 	X	attrs name except keyerror return none.
4573 	X	translate numbers to names falling back on the numbers g grp getgrnam tarinfo gname except keyerror tarinfo gid u pwd getpwnam tarinfo uname except keyerror tarinfo uid.
4574 	X	lib tarfile py try g grp getgrnam tarinfo gname except keyerror g tarinfo gid try u pwd getpwnam tarinfo uname except keyerror u tarinfo uid.
4575 	X	perform some lengthy calculations in eafp mode handling division by zero as a sort of sticky nan.
4576 	X	value calculate x except zerodivisionerror float nan.
4577 	X	try value calculate x except zerodivisionerror value float nan.
4578 	X	calculate the mean of a series of numbers falling back on zero.
4579 	X	value statistics mean lst except statistics statisticserror.
4580 	X	try value statistics mean lst except statistics statisticserror value.
4581 	X	retrieving a message from either a cache or the internet with auth check.
4582 	X	logging info message shown to user s cache k except lookuperror backend read k except oserror resource not available if check permission k else access denied except baseexception this is like a bare except clause.
4583 	X	try if check permission k try cache k except lookuperror try backend read k except oserror resource not available else access denied except baseexception this is like a bare except clause logging info message shown to user s.
4584 	X	looking up objects in a sparse list of overrides.
4585 	X	overrides x or default except indexerror default ping.
4586 	X	try overrides x or default ping except indexerror default ping.
4587 	X	the following examples taken directly from pythons standard library demonstrate how the scope of the try except can be conveniently.
4588 	X	to do this with the statement form of try except would require a temporary variable but its far cleaner as an.
4589 	X	lib ipaddress py try ips append ip ip except attributeerror ips append ip network address becomes ips append ip ip except attributeerror ip network address the expression form is nearly equivalent to this try ip ip except attributeerror ip network address ips append.
4590 	X	lib tempfile py try dirlist append os getcwd except attributeerror oserror dirlist append os curdir becomes dirlist append os getcwd except attributeerror oserror os curdir.
4591 	X	lib asyncore py try status append s d self addr except typeerror status append repr self addr becomes status append s d self addr except typeerror repr self addr.
4592 	X	with as andrew barnert for compiling this.
4593 	X	rubys beginrescuerescueelseensureend is an expression potentially with statements inside it.
4594 	X	it has the equivalent of an as clause and the equivalent of bare.
4595 	X	and it uses no punctuation or keyword between the bare except exception class exception class with as clause and the.
4596 	X	and yes its ambiguous unless you understand rubys statement expression.
4597 	X	http www skorks com ruby exceptions and exception handling.
4598 	X	x begin computation rescue myexception e default e end x begin computation rescue myexception default end x begin computation rescue default end x begin computation rescue myexception default rescue otherexception other end.
4599 	X	x computation except myexception as e default e x computation except myexception default e x computation except default e x computation except myexception default except otherexception other.
4600 	X	erlang has a try expression that looks like this.
4601 	X	http erlang org doc reference manual expressions html id.
4602 	X	x try computation catch myexception e default e end x try computation catch myexception e default e otherexception e other e end.
4603 	X	the class and as name are mandatory but you can use for.
4604 	X	theres also an optional when guard on each and a throw clause that you can catch which i wont get.
4605 	X	to handle multiple exceptions you just separate the clauses with semicolons which i guess would map to commas in.
4606 	X	x try computation except myexception as e default e x try computation except myexception as e default e otherexception as e other default e.
4607 	X	erlang also has a catch expression which despite using the same keyword is completely different and you dont want to know about.
4608 	X	the ml family has two different ways of dealing with this handle and try the difference between the two is that try pattern matches the exception which gives you the effect of multiple except clauses and as.
4609 	X	in either form the handler clause is punctuated by in some dialects in.
4610 	X	to avoid confusion ill write the function calls in python.
4611 	X	heres smls handle http www cs cmu edu rwh introsml core exceptions htm.
4612 	X	let x computation handle myexception default.
4613 	X	heres ocamls try http www lib uchicago edu keith ocaml class exceptions html.
4614 	X	let x try computation with myexception explanation default explanation.
4615 	X	myexception e default e myotherexception other default e fallback e.
4616 	X	in terms of this pep these would be something like.
4617 	X	great work on this chris this is one of the best researched and justified python syntax proposals ive seen.
4618 	X	id like to make the case that the pep should adopt this as its default.
4619 	X	my rationale is mainly that if we start by requiring the parentheses its pretty straightforward to take that requirement away in specific cases later as well as making it easier to introduce multiple except clauses if that ever seems.
4620 	X	however if we start without the required parentheses thats it we cant introduce a requirement for parentheses later if we decide the bare form is too confusing in too many contexts and theres plenty of potential for such.
4621 	X	in addition to the odd interactions with other uses of the colon as a marker in the syntax including suite headers lambdas and function annotations omitting the parentheses makes it harder to decide which behaviour was intended in ambiguous cases while the explicit parentheses would force the writer to be clear which one they.
4622 	X	x get value except notfound foo is not none.
4623 	X	there are two plausible interpretations of that.
4624 	X	x get value except notfound foo is not none x get value except notfound foo is not none.
4625 	X	with the proposed precedence in the pep which i agree with the latter is the correct interpretation but thats not at all obvious to the reader they would have to just know thats the way it.
4626 	X	by contrast if the parentheses are required then the spelling would have to be one of the following to be legal.
4627 	X	x get value except notfound foo is not none x get value except notfound foo is not none.
4628 	X	which means the and the closing nicely bracket the fallback value in both cases and make the authors intent relatively.
4629 	X	the required parentheses also help in the cases where there is a nearby colon with a different meaning.
4630 	X	if check except exception false if check except exception false.
4631 	X	lambda x calculate x except exception none lambda x calculate x except exception none.
4632 	X	def f a os dependent os defaults os name except keyerror none pass def f a os dependent os defaults os name except keyerror none pass.
4633 	X	rather than making people consider do i need the parentheses in this case or not adopting the genexp rule makes it simple yes you need them because the compiler will complain if you leave them.
4634 	X	i dont think taking it all the way to one expression shows the new construct in the best.
4635 	X	keeping this as multiple statements assigning to a temporary variable improves the readability quite a bit.
4636 	X	if not check permission k msg access denied else msg cache k except lookuperror none if msg is none msg backend read k except oserror resource not available.
4637 	X	logging info message shown to user s msg.
4638 	X	i would also move the bare except clause equivalent out to a separate.
4639 	X	remember youre trying to convince people to like the pep not scare them away with the consequences of what happens when people try to jam too much application logic into a single.
4640 	X	while were admittedly giving people another tool to help them win obfuscated python contests we dont have to encourage them.
4641 	X	a real variable name like msg would also be appropriate in the expanded form of this particular.
4642 	X	we cant defer this one if we dont implement it now we should reject it as a future.
4643 	X	the reason we cant defer it is subtle but relatively easy to demonstrate with a list comprehension.
4644 	X	the problem is that listcomp scope that is visible in the traceback because its a true closure its treated the same as any other function defined inside a class body and the subexpressions cant see the class level.
4645 	X	an except expression that allowed capturing of the exception would need to behave the same way in order to be consistent but if we dont allow capturing then we can dispense with the closure.
4646 	X	however if we do that we cant decide to add capturing later because that would mean adding the closure which would be potentially backwards incompatible with usage at class.
4647 	X	and if we only add the closure if the exception is captured then the behaviour of the other subexpressions will depend on whether the exception is captured or not and thats just.
4648 	X	so i think it makes more sense to reject this subproposal outright it makes the change more complex and make the handling of the common case worse for the sake of something that will almost never be an appropriate thing to.
4649 	X	nick coghlan ncoghlan at gmail com brisbane australia.
4650 	X	agreed given the number of differing opinions on python ideas its particularly impressive how well the debate was conducted.
4651 	X	on that subject id like to thank everyone involved in the python ideas discussion and particularly steven daprano rob cliffe and andrew barnert it was an amazingly productive thread getting to nearly four hundred emails before seriously.
4652 	X	and even then it mostly just started looping back on itself which isnt surprising given that it was so long anyone not majorly invested in the topic wont have read every single.
4653 	X	chris while i also commend you for the comprehensive pep im on the proposal for two main reasons.
4654 	X	many proposals suggest new syntax to gain some.
4655 	X	each has to be judged for its own merits and in this case imho the cons eclipse the.
4656 	X	i dont think this will save a lot of code in a typical well structured program maybe a few lines out of.
4657 	X	on the other hand it adds yet another syntax to remember and understand which is not the pythonic.
4658 	X	worse this idea subverts exceptions to control flow which is not only un pythonic but also against the accepted practices of programming in.
4659 	X	here the comparison to pep is.
4660 	X	pep whatever syntax it adds still remains within the domain of normal control.
4661 	X	pep otoh makes it deliberately easy to make exceptions part of non exceptional code encouraging very bad programming.
4662 	X	an html attachment was url http mail python org pipermail python dev attachments acd attachment html.
4663 	X	neither of these objections addresses the problems with the status quo though.
4664 	X	the status quo encourages overbroad exception handling as illustrated by examples in the pep the status quo encourages an ad hoc approach to hiding exception handling inside functions.
4665 	X	pep was accepted primarily because the and or hack was a bug.
4666 	X	the status quo for exception handling is both a bug magnet due to overbroad exception handlers and a cause of creeping complexity in api design as more and more apis both in the standard library and elsewhere acquire ways to request implicit exception handling.
4667 	X	thats why the comparison to pep is appropriate its less about making the language better directly and more about deciding the consequences of not having it are no longer.
4668 	X	nick coghlan ncoghlan at gmail com brisbane australia.
4669 	X	i think the pep and your reply focuses too much on one single status quo situation which is the dict get like.
4670 	X	however the pep does not propose a narrow solution it proposes a significant change in the way expressions may be written and exceptions may be caught and thus opens a can of.
4671 	X	even if the status quo will be made better by it and even this im not sure about many many other possibilities of bad code open.
4672 	X	imho its better to hide these exceptions inside well defined functions because dict get tells me its the normal code flow not the exceptional code.
4673 	X	on the other hand the syntax proposed herein tells me yeah its the exceptional code flow but let me merge it into the normal code flow for.
4674 	X	this goes against anything i understand about how exceptions should and should not be.
4675 	X	an html attachment was url http mail python org pipermail python dev attachments fcafe attachment html.
4676 	X	but we subsumed using exception for control flow long.
4677 	X	stopiteration is the most blatant but when we added dict get getattr with a default value iter with its default we made it very clear that while exceptions typically represent exceptional situations they can also be used as an easy signal of something which we expect you to handle and easily recover from and returning none or some other singleton doesnt make sense and yet without explicit api support it takes a heavy handed statement to deal.
4678 	X	an html attachment was url http mail python org pipermail python dev attachments fc attachment html.
4679 	X	stopiteration is the most blatant but when we added dict get getattr true but at least you still have to explicitly which takes a toll on the code so isnt taken.
4680 	X	adding except into expressions i fear will proliferate this usage much.
4681 	X	an html attachment was url http mail python org pipermail python dev attachments af attachment html.
4682 	X	it doesnt need to save a huge number of.
4683 	X	just like lambda and the if else expression its there as a tool if it makes your code easier to read its a good too and if it makes it harder then dont use.
4684 	X	yes its more to learn but so is the proliferation of ad hoc alternatives several of which are listed in the motivation section at the.
4685 	X	again i point to the current alternatives including.
4686 	X	dict key dict get key default.
4687 	X	min sequence min sequence default default as of.
4688 	X	both offer a way to either get an exception back or use a usually constant default.
4689 	X	in each case the author of the class function had to cater to the fact that some callers might want it to not raise an.
4690 	X	the alternative is to always use the full try except block which leads to questions like how can i keep going after an exception.
4691 	X	try spam d spam ham d ham eggs d eggs sausage d sausage except keyerror thing that failed.
4692 	X	the dict class offers a way to avoid the exception here by showing that its non exceptional.
4693 	X	spam d get spam ham d get ham eggs d get eggs sausage d get sausage.
4694 	X	writing that with just exception handling looks like this.
4695 	X	try spam d spam except keyerror span try ham d ham except keyerror ham try eggs d eggs except keyerror eggs try sausage d sausage except keyerror sausage.
4696 	X	with extreme likelihood of an error do you see what i got wrong there.
4697 	X	with inline exception handling d could be a custom class that simply defines to raise keyerror on unknowns and the code can be written thus.
4698 	X	spam d spam except keyerror ham d ham except keyerror eggs d eggs except keyerror sausage d sausage except keyerror.
4699 	X	its still a bit repetitive but thats hard to.
4700 	X	and it puts the exception handling at the exact point where it stops were exceptional and starts were normal exactly as the try except statement.
4701 	X	i see a risk of interfering with in place assignment operators e g.
4702 	X	might not do what one could expect because as i assume it would behave differently from.
4703 	X	i think that falls under the overly broad exception handling.
4704 	X	if you want to include the assignment youll have to spell out the try except block.
4705 	X	i find the difference in the two behaviours very unfortunate.
4706 	X	this also reduces the scope of applicability.
4707 	X	cython has typed assignments so a straight forward idea would be to handle typeerrors in assignments like this.
4708 	X	cdef str s s x except typeerror str x.
4709 	X	however i guess that would similarly counter the idea of exception handling in an expression and the correct and non ambiguous way to do this would be to spell out the try except.
4710 	X	summing it up my impression is that it helps some use cases but leaves others more ambiguous unclear unfortunate which makes me lean towards rejecting.
4711 	X	augmented assignment is still assignment so a.
4712 	X	the only way to parse that is as.
4713 	X	if the parentheses are mandatory that makes it easier to spot the.
4714 	X	well that is certainly not what i would have.
4715 	X	i can also see how parentheses can help but i still would like them.
4716 	X	lst none value lst or no value.
4717 	X	lst value lst except indexerror no value.
4718 	X	where expr exception list and default are all.
4719 	X	if no exception is raised its value is the value of the overall.
4720 	X	if any exception is raised exception list is evaluated and should result in either a type or a tuple just as with the statement form of try.
4721 	X	any matching exception will result in the corresponding default expression were evaluated and becoming the value of the.
4722 	X	as with the statement form of try except non matching exceptions will propagate.
4723 	X	parentheses are required around the entire expression unless they would be completely redundant according to the same rules as generator expressions.
4724 	X	this guarantees correct interpretation of nested except expressions and allows for future expansion of the syntax see below on multiple except.
4725 	X	note that the current proposal does not allow the exception object to be.
4726 	X	where this is needed the statement form must be.
4727 	X	see below for discussion and elaboration on.
4728 	X	this ternary operator would be between lambda and if else in.
4729 	X	consider this example of a two level cache.
4730 	X	for key in sequence x lvl key except keyerror lvl key except keyerror f key do something with x.
4731 	X	x lvl get key lvl get key f key.
4732 	X	which despite were shorter defeats the purpose of the cache as it must calculate a default value to pass to.
4733 	X	the get version calculates backwards the exception testing version calculates forwards as would be.
4734 	X	the nearest useful equivalent would be.
4735 	X	x lvl get key or lvl get key or f key.
4736 	X	which depends on the values were nonzero as well as depending on the cache object supporting this.
4737 	X	discussion on python ideas brought up the following syntax suggestions.
4738 	X	value expr except default if exception as e value expr except default for exception as e value expr except default from exception as e value expr except exception as e return default value expr except exception as e default value expr except exception as e try default value expr except exception as e continue with default value default except exception as e else expr value try expr except exception as e default value expr except default catches anything value expr except exception default catches only the named type s value default if expr raise exception value expr or else default if exception value expr except exception as e default value expr except exception as e pass default.
4739 	X	it has also been suggested that a new keyword be created rather than reusing an existing.
4740 	X	such proposals fall into the same structure as the last form but with a different keyword in place of.
4741 	X	also in the context of the default if expr raise exception proposal it was suggested that a new keyword raises be.
4742 	X	all forms involving the as capturing clause have been deferred from this proposal in the interests of simplicity but are preserved in the table above as an accurate record of.
4743 	X	the four forms most supported by this proposal are in order.
4744 	X	value expr except exception default value expr except exception default value expr except exception pass default value expr except exception then default.
4745 	X	all four maintain left to right evaluation order first the base expression then the exception list and lastly the.
4746 	X	this is important as the expressions are evaluated.
4747 	X	by comparison several of the ad hoc alternatives listed above must by the nature of functions evaluate their default values.
4748 	X	the preferred form using the colon parallels try except by using except exception list and parallels lambda by having keyword name list subexpression it also can be read as mapping exception to the default value dict.
4749 	X	using the arrow introduces a token many programmers will not be familiar with and which currently has no similar meaning but is otherwise quite.
4750 	X	the english word pass has a vaguely similar meaning consider the common usage pass by value reference for function arguments and pass is already a keyword but as its meaning is distinctly unrelated this may cause.
4751 	X	using then makes sense in english but this introduces a new keyword to the language albeit one not in common use but a new keyword all the.
4752 	X	left to right evaluation order is extremely important to readability as it parallels the order most expressions are.
4753 	X	value expr except default if exception.
4754 	X	break this by first evaluating the two ends and then coming to the middle while this may not seem terrible as the exception list will usually be a constant it does add to the confusion when multiple clauses meet either with multiple except if or with the existing if else or a.
4755 	X	using the preferred order subexpressions will always be evaluated from left to right no matter how the syntax is.
4756 	X	keeping the existing notation but shifting the mandatory parentheses we have the following suggestion.
4757 	X	value expr except exception default value expr except exception default.
4758 	X	this is reminiscent of a function call or a dict.
4759 	X	the colon cannot be confused with introducing a suite but on the other hand the new syntax guarantees lazy evaluation which a dict does.
4760 	X	the potential to reduce confusion is considered unjustified by the corresponding potential to increase.
4761 	X	for each example an approximately equivalent statement form is given to show how the expression will be.
4762 	X	these are not always strictly equivalent but will accomplish the same.
4763 	X	it is not safe for the interpreter to translate one into the.
4764 	X	a number of these examples are taken directly from the python standard library with file names and line numbers correct as of early feb.
4765 	X	many of these patterns are extremely.
4766 	X	retrieve an argument defaulting to none.
4767 	X	lib pdb py try cond args except indexerror cond none.
4768 	X	fetch information from the system if available.
4769 	X	pwd os getcwd except oserror none.
4770 	X	lib tkinter filedialog py try pwd os getcwd except oserror pwd none.
4771 	X	attempt a translation falling back on the original.
4772 	X	lib tkinter init py try e widget.
4773 	X	nametowidget w except keyerror e widget w.
4774 	X	read from an iterator continuing with blank lines once its exhausted.
4775 	X	lib libto pgen tokenize py try line readline except stopiteration line.
4776 	X	retrieve platform specific information note the dry improvement this particular example could be taken further turning a series of separate assignments into a single large dict initialization.
4777 	X	sys abiflags may not be defined on all.
4778 	X	config vars abiflags sys abiflags except attributeerror.
4779 	X	lib sysconfig py try config vars abiflags sys abiflags except attributeerror sys abiflags may not be defined on all.
4780 	X	retrieve an indexed item defaulting to none similar to dict get.
4781 	X	lib xml dom minidom py def getnameditem self name try return.
4782 	X	attrs name except keyerror return none.
4783 	X	translate numbers to names falling back on the numbers.
4784 	X	g grp getgrnam tarinfo gname except keyerror tarinfo gid u pwd getpwnam tarinfo uname except keyerror tarinfo uid.
4785 	X	lib tarfile py try g grp getgrnam tarinfo gname except keyerror g tarinfo gid try u pwd getpwnam tarinfo uname except keyerror u tarinfo uid.
4786 	X	look up an attribute falling back on a default.
4787 	X	mode f mode except attributeerror rb.
4788 	X	lib aifc py if hasattr f mode mode f mode else mode rb.
4789 	X	getframe except attributeerror none lib inspect py return.
4790 	X	perform some lengthy calculations in eafp mode handling division by zero as a sort of sticky nan.
4791 	X	value calculate x except zerodivisionerror float nan.
4792 	X	try value calculate x except zerodivisionerror value float nan.
4793 	X	calculate the mean of a series of numbers falling back on zero.
4794 	X	value statistics mean lst except statistics statisticserror.
4795 	X	try value statistics mean lst except statistics statisticserror value.
4796 	X	looking up objects in a sparse list of overrides.
4797 	X	overrides x or default except indexerror default ping.
4798 	X	try overrides x or default ping except indexerror default ping.
4799 	X	the following examples taken directly from pythons standard library demonstrate how the scope of the try except can be conveniently.
4800 	X	to do this with the statement form of try except would require a temporary variable but its far cleaner as an.
4801 	X	try ips append ip ip except attributeerror ips append ip network address.
4802 	X	ips append ip ip except attributeerror ip network address.
4803 	X	the expression form is nearly equivalent to this.
4804 	X	try ip ip except attributeerror ip network address ips append.
4805 	X	try dirlist append os getcwd except attributeerror oserror dirlist append os curdir.
4806 	X	dirlist append os getcwd except attributeerror oserror os curdir.
4807 	X	try status append s d self addr except typeerror status append repr self addr.
4808 	X	status append s d self addr except typeerror repr self addr.
4809 	X	in each case the narrowed scope of the try except ensures that an unexpected exception for instance attributeerror if append were misspelled does not get caught by the same.
4810 	X	this is sufficiently unlikely to be reason to break the call out into a separate line as per the five line example above but it is a small benefit gained as a side effect of the.
4811 	X	with as andrew barnert for compiling this.
4812 	X	note that the examples given here do not reflect the current version of the proposal and need to be.
4813 	X	rubys beginrescuerescueelseensureend is an expression potentially with statements inside it.
4814 	X	it has the equivalent of an as clause and the equivalent of bare.
4815 	X	and it uses no punctuation or keyword between the bare except exception class exception class with as clause and the.
4816 	X	and yes its ambiguous unless you understand rubys statement expression.
4817 	X	http www skorks com ruby exceptions and exception handling.
4818 	X	x begin computation rescue myexception e default e end x begin computation rescue myexception default end x begin computation rescue default end x begin computation rescue myexception default rescue otherexception other end.
4819 	X	x computation except myexception as e default e x computation except myexception default e x computation except default e x computation except myexception default except otherexception other.
4820 	X	erlang has a try expression that looks like this.
4821 	X	http erlang org doc reference manual expressions html id.
4822 	X	x try computation catch myexception e default e end x try computation catch myexception e default e otherexception e other e end.
4823 	X	the class and as name are mandatory but you can use for.
4824 	X	theres also an optional when guard on each and a throw clause that you can catch which i wont get.
4825 	X	to handle multiple exceptions you just separate the clauses with semicolons which i guess would map to commas in.
4826 	X	x try computation except myexception as e default e x try computation except myexception as e default e otherexception as e other default e.
4827 	X	erlang also has a catch expression which despite using the same keyword is completely different and you dont want to know about.
4828 	X	the ml family has two different ways of dealing with this handle and try the difference between the two is that try pattern matches the exception which gives you the effect of multiple except clauses and as.
4829 	X	in either form the handler clause is punctuated by in some dialects in.
4830 	X	to avoid confusion ill write the function calls in python.
4831 	X	http www cs cmu edu rwh introsml core exceptions htm.
4832 	X	let x computation handle myexception default.
4833 	X	http www lib uchicago edu keith ocaml class exceptions html.
4834 	X	let x try computation with myexception explanation default explanation.
4835 	X	myexception e default e myotherexception other default e fallback e.
4836 	X	in terms of this pep these would be something like.
4837 	X	x computation except myexception default x try computation except myexception e default x try computation except myexception as e default e except myotherexception other default except baseexception as e fallback e.
4838 	X	many ml inspired but not directly related languages from academia mix things up usually using more keywords and fewer.
4839 	X	so the oz would map to python as.
4840 	X	http mozart github io mozart v doc tutorial node html.
4841 	X	x try computation catch myexception as e then default e.
4842 	X	many lisp derived languages like clojure implement try catch as special forms if you dont know what that means think function like macros so you write effectively.
4843 	X	http clojure org special forms special forms try expr catch clause finally clause.
4844 	X	in common lisp this is done with a slightly clunkier handler case macro but the basic idea is the.
4845 	X	http clhs lisp se body m hand htm.
4846 	X	the lisp style is surprisingly used by some languages that dont have macros like lua where xpcall takes.
4847 	X	writing lambdas python style instead of lua style.
4848 	X	http www gammon com au scripts doc phplua xpcall.
4849 	X	x xpcall lambda expression lambda e default e.
4850 	X	this actually returns true expression or false default e but i think we can ignore that.
4851 	X	haskell is actually similar to lua here except that its all done with monads of course.
4852 	X	you can write a pattern matching expression within the function to decide what to do with it catching and re raising exceptions you dont want is cheap enough to be.
4853 	X	but haskell infixing makes this nicer.
4854 	X	and that makes the parallel between the lambda colon and the except colon in the proposal much more obvious.
4855 	X	x expression except exception default x expression except exception as e default e.
4856 	X	tcl has the other half of luas xpcall catch is a function which returns true if an exception was caught false otherwise and you get the value out in other.
4857 	X	and its all built around the the implicit quote and exec that everything in tcl is based on making it even harder to describe in python terms than lisp macros but something like.
4858 	X	smalltalk is also somewhat hard to map to.
4859 	X	http smalltalk gnu org wiki exceptions.
4860 	X	x computation on myexception do default.
4861 	X	but thats basically smalltalks passing arguments with colons syntax not its exception handling.
4862 	X	an examination of use cases shows that this is not needed as often as it would be with the statement form and as its syntax is a point on which consensus has not been reached the entire feature is.
4863 	X	multiple except keywords could be used and they will all catch exceptions raised in the original expression only.
4864 	X	will catch any of the listed exceptions thrown by expr any exception thrown by a default expression will.
4865 	X	value expr except exception default except exception default except exceptionn defaultn.
4866 	X	currently one of the following forms must be used.
4867 	X	will catch an exception thrown by either expr or default value expr except exception default except exception default will catch an exception thrown by default only value expr except exception default except exception default.
4868 	X	listing multiple exception clauses without parentheses is a syntax error see above and so a future version of python is free to add this feature without breaking any existing.
4869 	X	in a try except block the use of as to capture the exception object creates a local name binding and implicitly deletes that binding to avoid creating a reference loop in a finally.
4870 	X	in an expression context this makes little sense and a proper sub scope would be required to safely capture the exception object something akin to the way a list comprehension is.
4871 	X	however cpython currently implements a comprehensions subscope with a nested function call which has consequences in some contexts such as class definitions and is therefore unsuitable for this.
4872 	X	should there be in future a way to create a true subscope which could simplify comprehensions except expressions with blocks and possibly more then this proposal could be revived until then its loss is not a great one as the simple exception handling that is well suited to the expression notation used here is generally concerned only with the type of the exception and not its value further analysis.
4873 	X	this syntax would admittedly allow a convenient way to capture exceptions in interactive python returned values are captured by but exceptions currently are.
4874 	X	expr except exception as e e.
4875 	X	an examination of the python standard library shows that while the use of as is fairly common occurring in roughly one except clause in five it is extremely uncommon in the cases which could logically be converted into the expression.
4876 	X	its few uses can simply be left.
4877 	X	consequently in the interests of simplicity the as clause is not included in this.
4878 	X	a subsequent python version can add this without breaking any existing code as as is already a.
4879 	X	one example where this could possibly be useful is lib imaplib py.
4880 	X	simple command logout except typ dat no s s sys exc info.
4881 	X	simple command logout except baseexception as e no s s type e e.
4882 	X	this is hardly the most compelling use case but an intelligent look at this code could tidy it up.
4883 	X	in the absence of further examples showing any need of the exception object i have opted to defer indefinitely the.
4884 	X	the statement form finally or finally has no logical corresponding expression.
4885 	X	therefore the finally keyword is not a part of this proposal in any.
4886 	X	with several of the proposed syntaxes omitting the exception type name would be easy and concise and would be.
4887 	X	for conveniences sake it might be advantageous to have a bare except clause mean something more useful than except baseexception.
4888 	X	pep exception catching expressions is stable and i believe ready for.
4889 	X	all of these were rejected for several.
4890 	X	http www python org dev peps pep.
4891 	X	first and foremost consistency with the statement form of try except would be.
4892 	X	just as a list comprehension or ternary if expression can be explained by breaking it out into its vertical statement form an expression except should be able to be explained by a relatively mechanical translation into a near equivalent.
4893 	X	just as pep introduced a means of value based conditions in an expression this system allows exception based conditions to be used as part of an.
4894 	X	any form of syntax common to both should therefore have the same semantics in each and above all should not have the subtle difference of catching more in one than the other as it will tend to attract unnoticed.
4895 	X	a number of functions and methods have parameters which will cause them to return a specified value instead of raising an.
4896 	X	secondly the set of appropriate exceptions to catch would itself be a huge point of.
4897 	X	the current system is ad hoc and inconsistent and requires that each function be individually written to have this functionality not all support.
4898 	X	it would be impossible to predict exactly which exceptions would make sense to be caught why bless some of them with convenient syntax and not others.
4899 	X	dict get key default second positional argument in place of keyerror.
4900 	X	and finally this partly because the recommendation was that a bare except should be actively encouraged once it was reduced to a reasonable set of exceptions any situation where you catch an exception you dont expect to catch is an unnecessary bug.
4901 	X	next iter default second positional argument in place of stopiteration.
4902 	X	consequently the use of a bare except is down to two possibilities either it is syntactically forbidden in the expression form or it is permitted with the exact same semantics as in the statement form namely that it catch baseexception and be unable to capture it with as.
4903 	X	list pop no way to return a default.
4904 	X	seq index no way to handle a bounds error.
4905 	X	pep rightly advises against the use of a bare.
4906 	X	min sequence default default keyword argument in place of valueerror.
4907 	X	while it is syntactically legal in a statement and for backward compatibility must remain so there is little value in encouraging its.
4908 	X	statistics mean data no way to handle an empty iterator.
4909 	X	in an expression except clause except is a syntaxerror use the equivalent long hand form except baseexception.
4910 	X	had this facility existed early in pythons history there would have been no need to create dict get and related methods the one obvious way to handle an absent key would be to respond to the.
4911 	X	a future version of python may choose to reinstate this which can be done without breaking.
4912 	X	one method is written which signals the absence in one way and one consistent technique is used to respond to the.
4913 	X	instead we have dict get and as of python we also have min default default and myriad.
4914 	X	should it be legal to parenthesize the except clauses separately from the expression that could raise.
4915 	X	we have a lbyl syntax for testing inside an expression but there is currently no eafp notation compare the following.
4916 	X	value expr except exception as e default except exception as e default except exceptionn as e defaultn.
4917 	X	lbyl if key in dic process dic key else process none as an expression process dic key if key in dic else none.
4918 	X	this is more compelling when one or both of the deferred sub proposals of multiple except clauses and or exception capturing is.
4919 	X	eafp try process dic key except keyerror process none as an expression process dic key except keyerror none.
4920 	X	in their absence the parentheses would be thus.
4921 	X	python generally recommends the eafp policy but must then proliferate utility functions like dic get keynone to enable.
4922 	X	value expr except exceptiontype default value expr except exceptiontype default.
4923 	X	the current system requires that a function author predict the need for a default and implement support for.
4924 	X	the advantage is minimal and the potential to confuse a reader into thinking the except clause is separate from the expression or into thinking this is a function call makes this non.
4925 	X	if this is not done a full try except block is.
4926 	X	the expression can of course be parenthesized if desired as can the default.
4927 	X	since try except is a statement it is impossible to catch exceptions in the middle of an.
4928 	X	just as if else does for conditionals and lambda does for function definitions so does this allow exception catching in an expression.
4929 	X	as the entire expression is now required to be in parentheses which had not been decided at the time when this was debated there is less need to delineate this section and in many cases it would be.
4930 	X	this provides a clean and consistent way for a function to provide a default it simply raises an appropriate exception and the caller catches.
4931 	X	with some situations an lbyl technique can be used checking if some sequence has enough length before indexing into it for instance.
4932 	X	the following was been suggested as a similar short hand though not technically an expression.
4933 	X	this is not safe in all cases but as it is often convenient programmers will be tempted to sacrifice the safety of eafp in favour of the notational brevity of.
4934 	X	additionally some lbyl techniques eg involving getattr with three arguments warp the code into looking like literal strings rather than attribute lookup which can impact.
4935 	X	a convenient eafp notation solves all of.
4936 	X	for instance a common use case is attempting the removal of a file.
4937 	X	theres no convenient way to write a helper function to do this the nearest is something ugly using either lambda.
4938 	X	os unlink some file except oserror pass.
4939 	X	def except expression exception list default try return expression except exception list return default value except lambda x zerodivisionerror lambda float nan.
4940 	X	there is an equivalent already in python however in contextlib.
4941 	X	which is clunky and unable to handle multiple exception clauses or eval.
4942 	X	from contextlib import suppress with suppress oserror os unlink some file.
4943 	X	def except expression exception list default try return eval expression globals of caller locals of caller except exception list as exc l locals of caller copy l exc exc return eval default globals of caller l.
4944 	X	as this is already a single line or two with a break after the colon there is little need of new syntax and a confusion of statement vs expression to achieve.
4945 	X	while it is true that many of pythons syntactic elements use the colon to introduce a statement suite if while with for etcetera this is not by any means the sole use of the.
4946 	X	currently python syntax includes four cases where a colon introduces a subexpression.
4947 	X	dict display key value slice notation start stop step function definition parameter annotation lambda arg list return value.
4948 	X	value except x zerodivisionerror cant divide by zero.
4949 	X	this proposal simply adds a fifth.
4950 	X	which is even clunkier and relies on implementation dependent.
4951 	X	writing globals of caller and locals of caller for interpreters other than cpython is left as an exercise for the.
4952 	X	style guides and pep should recommend not having the colon at the end of a wrapped line which could potentially look like the introduction of a suite but instead advocate wrapping before the exception list keeping the colon clearly between two.
4953 	X	raymond hettinger expresses a desire for such a consistent.
4954 	X	this document is placed in the public.
4955 	X	something similar is requested multiple times in the.
4956 	X	local variables mode indented text indent tabs mode nil sentence end double space t fill column coding utf end.
4957 	X	https mail python org pipermail python ideas march html https mail python org pipermail python ideas august html https mail python org pipermail python ideas august html.
4958 	X	just as the or operator and the three part if else expression give short circuiting methods of catching a falsy value and replacing it this syntax gives a short circuiting method of catching an exception and replacing.
4959 	X	its probably no worse than the colon used with lambda which echoes the colon used in a def just like the colon here echoes the one in a try except and definitely better than the alternatives.
4960 	X	but the thing i cant get behind are the motivation and.
4961 	X	i dont think that e g dict get would be unnecessary once we have except expressions and i disagree with the position that eafp is better than lbyl or generally recommended by.
4962 	X	from the same sources that are so obsessed with dry theyd rather introduce a higher order function than repeat one line of code.
4963 	X	this is probably the most you can get out of me as far as a.
4964 	X	given that the language summit is coming up id be happy to dive deeper in my reasons for rejecting it there if theres demand.
4965 	X	i do think that apart from never explaining those dreadful acronyms this was a well written and well researched pep and i think youve done a great job moderating the discussion collecting objections reviewing alternatives and everything else that is required to turn a heated debate into a.
4966 	X	well done chris and everyone who helped and good luck with your next pep.
4967 	X	guido van rossum python org guido an html attachment was url http mail python org pipermail python dev attachments cb attachment html.
4968 	X	i think the proposed syntax is acceptable given the desired semantics although its still a bit.
4969 	X	im the one that raised the discourage misuse of bytes concern so id like a to stay in at least for that.
4970 	X	a is a perfectly well defined format code albeit one youd only be likely to use while messing about with serialisation protocols as the pep describes for example if a b code was ending up producing wrong data you might switch to a temporarily to get a better idea of where the bad data was coming from while using bytes to make s behave the way a is defined in the pep would just be wrong in most.
4971 	X	i consider a the preemptive pep of binary interpolation format codes in the absence of a im certain that users would end up abusing bytes and s to get the same effect just as they used the known bug magnet that was the and or hack for a long time in the absence of pep.
4972 	X	i also seem to recall guido saying he liked it which flipped the discussion from do we have a good rationale for including it.
4973 	X	to do we have a good rationale for the bdfl to ignore his instincts.
4974 	X	however it would be up to guido to confirm that recollection and if guido likes it is part of the reason for inclusion of the a code the pep should mention that.
4975 	X	nick coghlan ncoghlan at gmail com brisbane australia.
4976 	X	to specify an octal digit precede the octal value with a.
4977 	X	many python programmers never bother to use private variable names at.
4978 	X	for example to set the variable a to the octal value in decimal type.
4979 	X	my class defines del but it is not called when i delete the.
4980 	X	there are several possible reasons for.
4981 	X	the del statement does not necessarily call del it simply decrements the objects reference count and if this reaches zero del is.
4982 	X	simply precede the hexadecimal number with a zero and then a lower or uppercase x.
4983 	X	if your data structures contain circular links e g a tree where each child has a parent reference and each parent has a list of children the reference counts will never go back to.
4984 	X	hexadecimal digits can be specified in lower or.
4985 	X	once in a while python runs an algorithm to detect such cycles but the garbage collector might run some time after the last reference to your data structure vanishes so your del method may be called at an inconvenient and random.
4986 	X	for example in the python interpreter.
4987 	X	this is inconvenient if youre trying to reproduce a.
4988 	X	worse the order in which objects del methods are executed is.
4989 	X	how do i convert a string to a number.
4990 	X	you can run gc collect to force a collection but there are pathological cases where objects will never be.
4991 	X	for integers use the built in int type constructor e g int.
4992 	X	despite the cycle collector its still a good idea to define an explicit close method on objects to be called whenever youre done with.
4993 	X	the close method can then remove attributes that refer to.
4994 	X	by default these interpret the number as decimal so that int and int x raises valueerror.
4995 	X	dont call del directly del should call close and close should make sure that it can be called more than once for the same.
4996 	X	int string base takes the base to convert from as a second optional argument so int x.
4997 	X	another way to avoid cyclical references is to use the weakref module which allows you to point to objects without incrementing their reference.
4998 	X	if the base is specified as the number is interpreted using pythons rules a leading indicates octal and x indicates a hex.
4999 	X	tree data structures for instance should use weak references for their parent and sibling references if they need them.
5000 	X	do not use the built in function eval if all you need is to convert strings to.
5001 	X	if the object has ever been a local variable in a function that caught an expression in an except clause chances are that a reference to the object still exists in that functions stack frame as contained in the stack.
5002 	X	eval will be significantly slower and it presents a security risk someone could pass you a python expression that might have unwanted side.
5003 	X	normally calling sys exc clear will take care of this by clearing the last recorded.
5004 	X	for example someone could pass import os system rm rf home which would erase your home.
5005 	X	finally if your del method raises an exception a warning message is printed to sys.
5006 	X	eval also has the effect of interpreting numbers as python expressions so that e g eval gives a syntax error because python regards numbers starting with as octal base.
5007 	X	how do i get a list of all instances of a given class.
5008 	X	heres another one of the new faq documents about basic python programming and data.
5009 	X	how do i convert a number to a string.
5010 	X	python does not keep track of all instances of a class or of a built in type.
5011 	X	date date version revision web site http www python org.
5012 	X	to convert e the number to the string use the built in function str.
5013 	X	you can program the classs constructor to keep track of all instances by keeping a list of weak references to each.
5014 	X	if you want a hexadecimal or octal representation use the built in functions hex or oct.
5015 	X	how do i create a pyc file.
5016 	X	is there a source code level debugger with breakpoints single stepping.
5017 	X	for fancy formatting use the operator http www python org doc lib typesseq strings html on strings e g d yields and yields.
5018 	X	when a module is imported for the first time or when the source is more recent than the current compiled file a pyc file containing the compiled code should be created in the same directory as the py.
5019 	X	the pdb module is a simple but adequate console mode debugger for.
5020 	X	see the library reference manual for.
5021 	X	one reason that a pyc file may not be created is permissions problems with the.
5022 	X	it is part of the standard python library and is documented in the library reference manual also write your own debugger by using the code for pdb as an.
5023 	X	how do i modify a string in place.
5024 	X	this can happen for example if you develop as one user but run as another such as if you are testing with a web.
5025 	X	the idle interactive development environment which is part of the standard python distribution normally available as tools scripts idle includes a graphical.
5026 	X	creation of a pyc file is automatic if youre importing a module and python has the ability permissions free space to write the compiled module back to the.
5027 	X	there is documentation for the idle debugger at http www python org idle doc idle html debugger.
5028 	X	if you need an object with this ability try converting the string to a list or use the array module.
5029 	X	running python on a top level script is not considered an import and no pyc will be.
5030 	X	pythonwin is a python ide that includes a gui debugger based on.
5031 	X	for example if you have a top level module abc py that imports another module xyz py when you run abc xyz pyc will be created since xyz is imported but no abc pyc file will be created since abc py isnt were.
5032 	X	the pythonwin debugger colors breakpoints and has quite a few cool features such as debugging non pythonwin.
5033 	X	import array a array array c s print a array c hello world a y print a array c yello world a tostring yello world.
5034 	X	if you need to create abc pyc that is to create a pyc file for a module that is not imported you can using the py compile and compileall.
5035 	X	a reference can be found at http www python org ftp python pythonwin pwindex html more recent versions of pythonwin are available as a part of the activepython distribution see http www activestate com products activepython index html.
5036 	X	how do i use strings to call functions methods.
5037 	X	the py compile module can manually compile any.
5038 	X	pydb is a version of the standard python debugger pdb modified for use with ddd data display debugger a popular graphical debugger front.
5039 	X	one way is to use the compile function in that module interactively.
5040 	X	pydb can be found at http packages debian org unstable devel pydb html and ddd can be found at http www gnu org software.
5041 	X	the best is to use a dictionary that maps strings to.
5042 	X	import py compile py compile compile abc py.
5043 	X	there are a number of commmercial python ides that include graphical.
5044 	X	the primary advantage of this technique is that the strings do not need to match the names of the.
5045 	X	this will write the pyc to the same location as abc py or you can override that with the optional parameter cfile.
5046 	X	wing ide http wingide com komodo ide http www activestate com products komodo.
5047 	X	this is also the primary technique used to emulate a case construct.
5048 	X	you can also automatically compile all files in a directory or directories using the compileall.
5049 	X	is there a tool to help find bugs or perform static analysis.
5050 	X	you can do it from the shell prompt by running compileall py and providing the path of a directory containing python files to compile.
5051 	X	pychecker is a static analysis tool that finds bugs in python source code and warns about code complexity and.
5052 	X	you can get pychecker from http pychecker sf.
5053 	X	dispatch go a stop b note lack of parens for funcs.
5054 	X	how do i find the current module name.
5055 	X	how can i create a stand alone binary from a python script.
5056 	X	dispatch get input note trailing parens to call function.
5057 	X	a module can find out its own module name by looking at the predefined global variable name.
5058 	X	you dont need the ability to compile python to c code if all you want is a stand alone program that users can download and run without having to install the python distribution.
5059 	X	use the built in function getattr.
5060 	X	if this has the value main the program is running as a.
5061 	X	there are a number of tools that determine the set of modules required by a program and bind these modules together with a python binary to produce a single.
5062 	X	many modules that are usually used by importing them also provide a command line interface or a self test and only execute this code after checking name.
5063 	X	one is to use the freeze tool which is included in the python source tree as tools freeze.
5064 	X	note that getattr works on any object including classes class instances modules and so.
5065 	X	def main print running if name main main.
5066 	X	it converts python byte code to c arrays a c compiler you can embed all your modules into a new program which is then linked with the standard python.
5067 	X	this is used in several places in the standard library like this.
5068 	X	how can i have modules that mutually import each other.
5069 	X	it works by scanning your source recursively for import statements in both forms and looking for the modules in the standard python path as well as in the source directory for built in modules.
5070 	X	suppose you have the following modules.
5071 	X	it then turns the bytecode for modules written in python into c code array initializers that can be turned into code objects using the marshal module and creates a custom made config file that only contains those built in modules which are actually used in the.
5072 	X	from bar import bar var foo var.
5073 	X	it then compiles the generated c code and links it with the rest of the python interpreter to form a self contained binary which acts exactly like your.
5074 	X	f getattr foo instance do opname f.
5075 	X	from foo import foo var bar var.
5076 	X	use locals or eval to resolve the function name.
5077 	X	the problem is that the interpreter will perform the following steps.
5078 	X	there are several other utilities which.
5079 	X	main imports foo empty globals for foo are created foo is compiled and starts executing foo imports bar empty globals for bar are created bar is compiled and starts executing bar imports foo which is a no op since there already is a module named foo bar foo var foo foo var.
5080 	X	the first is gordon mcmillans installer at.
5081 	X	the last step fails because python isnt done with interpreting foo yet and the global symbol dictionary for foo is still.
5082 	X	which works on windows linux and at least some forms of.
5083 	X	the same thing happens when you use import foo and then try to access foo foo var in global.
5084 	X	another is thomas hellers pyexe windows only at.
5085 	X	note using eval is slow and.
5086 	X	there are at least three possible workarounds for this.
5087 	X	http starship python net crew theller pyexe.
5088 	X	if you dont have absolute control over the contents of the string someone could pass a string that resulted in an arbitrary function were.
5089 	X	guido van rossum recommends avoiding all uses of from module import and placing all code inside.
5090 	X	a third is christian tismers sqfreeze to a specially prepared python interpreter that can find the byte code in the.
5091 	X	is there an equivalent to perls chomp for removing trailing newlines from strings.
5092 	X	initializations of global variables and class variables should use constants or built in functions.
5093 	X	a fourth is fredrik lundhs squeeze http www pythonware com products python squeeze.
5094 	X	this means everything from an imported module is referenced as module.
5095 	X	are there coding standards or a style guide for python programs.
5096 	X	if you want to remove all trailing whitespace use the rstrip method of string.
5097 	X	jim roskind suggests performing steps in the following order in each module.
5098 	X	the coding style required for standard library modules is documented as pep http www python org peps pep html.
5099 	X	this removes all trailing whitespace not just a single.
5100 	X	exports globals functions and classes that dont need imported base classes import statements active code including globals that are initialized from imported values.
5101 	X	otherwise if there is only one line in the string s use s splitlines.
5102 	X	van rossum doesnt like this approach much because the imports appear in a strange place but it does.
5103 	X	how do i speed it up.
5104 	X	is there a scanf or sscanf equivalent.
5105 	X	matthias urlichs recommends restructuring your code so that the recursive import is not necessary in the first.
5106 	X	there are many tricks to speed up python code consider rewriting parts in c as a last.
5107 	X	for simple input parsing the easiest approach is usually to split the line into whitespace delimited words using the split method of string objects and then convert decimal strings to numeric values using int or float.
5108 	X	import x y z returns module x how do i get z try.
5109 	X	one thing to notice is that function and especially method calls are rather expensive if you have designed a purely oo interface with lots of tiny functions that dont do much more than get or set an instance variable or call another method you might consider using a more direct way such as directly accessing instance.
5110 	X	split supports an optional sep parameter which is useful if the line uses something other than whitespace as a.
5111 	X	import x y z y z.
5112 	X	also see the standard module profile described in the library reference manual makes it possible to find out where your program is spending most of its time if you have some patience the profiling itself can slow your program down by an order of magnitude.
5113 	X	for more complicated input parsing regular expressions more powerful than cs sscanf and better suited for the.
5114 	X	for more realistic situations you may have to do something like.
5115 	X	remember that many standard optimization heuristics you may know from other programming experience may well apply to.
5116 	X	what does unicodeerror ascii decodingencoding error ordinal not in range mean.
5117 	X	m import s for i in s split m getattr m i.
5118 	X	for example it may be faster to send output to output devices using larger writes rather than smaller ones in order to reduce the overhead of kernel system.
5119 	X	this error indicates that your python installation can handle only bit ascii.
5120 	X	when i edit an imported module and reimport it the changes dont show.
5121 	X	thus cgi scripts that write all output in one shot may be faster than those that write lots of small pieces of.
5122 	X	there are a couple ways to fix or work around the.
5123 	X	also be sure to use pythons core features where.
5124 	X	if your programs must handle data in arbitary character set encodings the environment the application runs in will generally identify the encoding of the data it is handing.
5125 	X	for reasons of efficiency as well as consistency python only reads the module file on the first time a module is.
5126 	X	for example slicing allows programs to chop up lists and other sequence objects in a single tick of the interpreters mainloop using highly optimized c.
5127 	X	you need to convert the input to unicode data using that.
5128 	X	if it didnt in a program consisting of many modules where each one imports the same basic module the basic module would be parsed and re parsed many.
5129 	X	thus to get the same effect as.
5130 	X	for example a program that handles email or web input will typically find character set encoding information in content type.
5131 	X	to force rereading of a changed module do this.
5132 	X	l for i in range l append l i.
5133 	X	this can then be used to properly convert input data to.
5134 	X	it is much shorter and far faster to use.
5135 	X	assuming the string referred to by value is encoded as utf.
5136 	X	warning this technique is not fool.
5137 	X	l list l list is redundant if l is a.
5138 	X	in particular modules containing statements like.
5139 	X	note that the functionally oriented builtins such as map zip and friends can be a convenient accelerator for loops that perform a single.
5140 	X	for example to pair the elements of two lists together.
5141 	X	if the data is not correctly encoded as utf the above call will raise a unicodeerror.
5142 	X	will continue to work with the old version of the imported.
5143 	X	if you only want strings coverted to unicode which have non ascii data you can try converting them first assuming an ascii encoding and then generate unicode objects if that fails.
5144 	X	if the module contains class definitions existing class instances will not be updated to use the new class.
5145 	X	or to compute a number of sines.
5146 	X	try x unicode value ascii except unicodeerror value unicode value utf else value was valid ascii data pass.
5147 	X	this can result in the following paradoxical behaviour.
5148 	X	the operation completes very quickly in such.
5149 	X	its possible to set a default encoding in a file called sitecustomize py thats part of the python.
5150 	X	import cls c cls c create an instance of c reload cls isinstance c cls c isinstance is false false.
5151 	X	other examples include the join and split methods of string.
5152 	X	however this isnt recommended because changing the python wide default encoding may cause third party extension modules to.
5153 	X	the nature of the problem is made clear if you print out the class objects.
5154 	X	for example if s are large k strings then join sssssss may be far faster than the more obvious s s s s s s s since the summation will compute many subexpressions whereas join does all the copying in one.
5155 	X	note that on windows there is an encoding known as mbcs which uses an encoding specific to your current.
5156 	X	for manipulating strings use the replace method on string.
5157 	X	in many cases and particularly when working with com this may be an appropriate default encoding to.
5158 	X	use regular expressions only when youre not dealing with constant string.
5159 	X	consider using the string formatting operations string tuple and string dictionary.
5160 	X	how do i convert between tuples and lists.
5161 	X	be sure to use the list sort builtin method to do sorting and see the sorting mini howto http www amk ca python howto sorting xxx for examples of moderately advanced.
5162 	X	the function tuple seq converts any sequence actually any iterable into a tuple with the same items in the same.
5163 	X	list sort beats other techniques for sorting in all but the most extreme.
5164 	X	another common trick is to push loops into functions or.
5165 	X	if the argument is a tuple it does not make a copy but returns the same object so it is cheap to call tuple when you arent sure that an object is already a.
5166 	X	for example suppose you have a program that runs slowly and you use the profiler to determine that a python function ff is were called lots of.
5167 	X	the function list seq converts any sequence or iterable into a list with the same items in the same.
5168 	X	def ff x do something with x computing return result.
5169 	X	if the argument is a list it makes a copy just like seq.
5170 	X	tends to be called in loops like.
5171 	X	python sequences are indexed with positive numbers and negative.
5172 	X	for x in sequence value ff x do something with.
5173 	X	for positive numbers is the first index is the second index and so.
5174 	X	then you can often eliminate function call overhead by rewriting ff to.
5175 	X	for negative indices is the last index and is the pentultimate next to last index and so.
5176 	X	def ffseq seq resultseq for x in seq do something with x computing resultseq append result return resultseq.
5177 	X	think of seq n as the same as seq len seq n.
5178 	X	and rewrite the two examples to list ffseq oldlist and to.
5179 	X	using negative indices can be very.
5180 	X	for value in ffseq sequence do something with.
5181 	X	for example s is all of the string except for its last character which is useful for removing the trailing newline from a.
5182 	X	single calls to ff x translate to ffseq x with little.
5183 	X	how do i iterate over a sequence in reverse order.
5184 	X	of course this technique is not always appropriate and there are other variants which you can figure.
5185 	X	if it is a list the fastest solution is.
5186 	X	you can gain some performance by explicitly storing the results of a function or method lookup into a local.
5187 	X	list reverse try for x in list do something with x finally list reverse.
5188 	X	this has the disadvantage that while you are in the loop the list is temporarily.
5189 	X	for key in token dict key dict get key.
5190 	X	if you dont like this you can make a.
5191 	X	this appears expensive but is actually faster than other solutions.
5192 	X	if the method isnt going to change a slightly faster implementation is.
5193 	X	rev list rev reverse for x in rev.
5194 	X	dict get dict get look up the method once for key in token dict key dict get key.
5195 	X	if its not a list a more general but slower solution is.
5196 	X	default arguments can be used to determine values once at compile time instead of at run.
5197 	X	for i in range len sequence x sequence i.
5198 	X	this can only be done for functions or objects which will not be changed during program execution such as replacing.
5199 	X	a more elegant solution is to define a class which acts as a sequence and yields the elements in reverse order solution due to steve majewski.
5200 	X	def degree sin deg return math sin deg math pi.
5201 	X	class rev def init self seq self forw seq def len self return len self forw def getitem self i return self forw i.
5202 	X	def degree sin deg factor math pi sin math sin return sin deg factor.
5203 	X	because this trick uses default arguments for terms which should not be changed it should only be used when you are not concerned with presenting a possibly confusing api to your.
5204 	X	dont bother applying these optimization tricks until you know you need them after profiling has indicated that a particular function is the heavily executed hot spot in the.
5205 	X	unfortunately this solution is slowest of all due to the method call.
5206 	X	optimizations almost always make the code less clear and you shouldnt pay the costs of reduced clarity increased development time greater likelihood of bugs unless the resulting performance benefit is worth.
5207 	X	how do you remove duplicates from a list.
5208 	X	for an anecdote related to optimization see http www python org doc essays liststr.
5209 	X	see the python cookbook for a long discussion of many ways to do this.
5210 	X	how do you set a global variable in a function.
5211 	X	http aspn activestate com aspn cookbook python recipe.
5212 	X	if you dont mind reordering the list sort it and then scan from the end of the list deleting duplicates as you go.
5213 	X	if list list sort last list for i in range len list if last list i del list i else last list i.
5214 	X	def f print x try to print the global for j in range if q x.
5215 	X	if all elements of the list may be used as dictionary keys i e they are all hashable this is often faster.
5216 	X	any variable assigned in a function is local to that.
5217 	X	d for x in list d x x list d values.
5218 	X	how do you make an array in python.
5219 	X	since a value is bound to x as the last statement of the function body the compiler assumes that x is.
5220 	X	consequently the print x attempts to print an uninitialized local variable and will trigger a nameerror.
5221 	X	the solution is to insert an explicit global declaration at the start of the function.
5222 	X	lists are equivalent to c or pascal arrays in their time complexity the primary difference is that a python list can contain objects of many different.
5223 	X	def f global x print x try to print the global for j in range if q x.
5224 	X	the array module also provides methods for creating arrays of fixed types with compact representations but they are slower to index than.
5225 	X	in this case all references to x are interpreted as references to the x from the module.
5226 	X	also note that the numeric extensions and others define array like structures with various characteristics as.
5227 	X	what are the rules for local and global variables in python.
5228 	X	to get lisp style linked lists you can emulate cons cells using tuples.
5229 	X	in python variables that are only referenced inside a function are implicitly.
5230 	X	lisp list like this example none.
5231 	X	if a variable is assigned a new value anywhere within the functions body its assumed to be a.
5232 	X	if mutability is desired you could use lists instead of.
5233 	X	if a variable is ever assigned a new value inside the function the variable is implicitly local and you need to explicitly declare it as.
5234 	X	here the analogue of lisp car is lisp list and the analogue of cdr is lisp list.
5235 	X	though a bit surprising at first a moments consideration explains.
5236 	X	only do this if youre sure you really need to because its usually a lot slower than using python.
5237 	X	on one hand requiring global for assigned variables provides a bar against unintended side.
5238 	X	how do i create a multidimensional list.
5239 	X	on the other hand if global was required for all global references youd be using global all the.
5240 	X	you probably tried to make a multidimensional array like this.
5241 	X	youd have to declare as global every reference to a builtin function or to a component of an imported.
5242 	X	this clutter would defeat the usefulness of the global declaration for identifying side.
5243 	X	this looks correct if you print it.
5244 	X	how do i share global variables across modules.
5245 	X	the canonical way to share information across modules within a single program is to create a special module often called config or cfg.
5246 	X	but when you assign a value it shows up in multiple places.
5247 	X	just import the config module in all modules of your application the module then becomes available as a global.
5248 	X	because there is only one instance of each module any changes made to the module object get reflected.
5249 	X	the reason is that replicating a list with doesnt create copies it only creates references to the existing.
5250 	X	x default value of the x configuration setting.
5251 	X	the creates a list containing references to the same list of length.
5252 	X	changes to one row will show in all rows which is almost certainly not what you.
5253 	X	the suggested approach is to create a list of the desired length first and then fill in each element with a newly created list.
5254 	X	note that using a module is also the basis for implementing the singleton design pattern for the same.
5255 	X	a none for i in range a i none.
5256 	X	what are the best practices for using import in a module.
5257 	X	this generates a list containing different lists of length.
5258 	X	in general dont use from modulename import.
5259 	X	you can also use a list comprehension.
5260 	X	wh a none w for i in range h.
5261 	X	some people avoid this idiom even with the few modules that were designed to be imported in this.
5262 	X	or you can use an extension that provides a matrix datatype numeric python xxx is the best.
5263 	X	modules designed in this manner include tkinter threading and wxpython.
5264 	X	how do i apply a method to a sequence of objects.
5265 	X	import modules at the top of a.
5266 	X	doing so makes it clear what other modules your code requires and avoids questions of whether the module name is in.
5267 	X	result obj method for obj in list.
5268 	X	using one import per line makes it easy to add and delete module imports but using multiple imports per line uses less screen.
5269 	X	more generically you can try the following function.
5270 	X	its good practice if you import modules in the following order.
5271 	X	how can i get a dictionary to display its keys in a consistent order.
5272 	X	dictionaries store their keys in an unpredictable order so the display order of a dictionarys elements will be similarly.
5273 	X	if youre writing code thats in the package sub m module and want to import package sub m do not just write import m even though its.
5274 	X	this can be frustrating if you want to save a printable version to a file make some changes and then compare it with some other printed.
5275 	X	in this case use the pprint module to pretty print the dictionary the items will be presented in order sorted by the.
5276 	X	relative imports can lead to a module were initialized twice leading to confusing.
5277 	X	a more complicated solution is to subclass userdict userdict to create a sorteddict class that prints itself in a predictable.
5278 	X	it is sometimes necessary to move imports to a function or class to avoid problems with circular.
5279 	X	heres one simpleminded implementation of such a class.
5280 	X	circular imports are fine where both modules use the import module form of.
5281 	X	class sorteddict userdict userdict def repr self result append result append keys self data keys keys sort for k in keys append s s k self data k return s string join result.
5282 	X	they fail when the nd module wants to grab a name out of the first from module import name and the import is at the top.
5283 	X	this will work for many common situations you might encounter though its far from a perfect.
5284 	X	thats because names in the st are not yet available because the first module is busy importing the.
5285 	X	the largest flaw is that if some values in the dictionary are also dictionaries their values wont be presented in any particular.
5286 	X	in this case if the second module is only used in one function then the import can easily be moved into that.
5287 	X	i want to do a complicated sort can you do a schwartzian transform in python.
5288 	X	by the time the import is called the first module will have finished initializing and the second module can do its.
5289 	X	yes its quite simple with list.
5290 	X	it may also be necessary to move imports out of the top level of code if some of the modules are platform.
5291 	X	the technique attributed to randal schwartz of the perl community sorts the elements of a list by a metric which maps each element to its sort value.
5292 	X	in that case it may not even be possible to import all of the modules at the top of the.
5293 	X	to sort a list of strings by their uppercase values.
5294 	X	in this case importing the correct modules in the corresponding platform specific code is a good.
5295 	X	tmp x upper x for x in l schwartzian transform tmp sort usorted x for x in tmp.
5296 	X	only move imports into a local scope such as inside a function definition if its necessary to solve a problem such as avoiding a circular import or are trying to reduce the initialization time of a.
5297 	X	to sort by the integer value of a subfield extending from positions in each string.
5298 	X	this technique is especially helpful if many of the imports are unnecessary depending on how the program.
5299 	X	tmp int s s for s in l schwartzian transform tmp sort isorted x for x in tmp.
5300 	X	you may also want to move imports into a function if the modules are only ever used in that.
5301 	X	note that isorted may also be computed by.
5302 	X	note that loading a module the first time may be expensive because of the one time initialization of the module but loading a module multiple times is virtually free costing only a couple of dictionary.
5303 	X	even if the module name has gone out of scope the module is probably available in sys.
5304 	X	def icmp s s return cmp intfield s intfield s.
5305 	X	if only instances of a specific class use a module then it is reasonable to import the module in the classs init method and then assign the module to an instance variable so that the module is always available via that instance variable during the life of the.
5306 	X	note that to delay an import until the class is instantiated the import must be inside a.
5307 	X	but since this method calls intfield many times for each element of l it is slower than the schwartzian.
5308 	X	putting the import inside the class but outside of any method still causes the import to occur when the module is.
5309 	X	how can i sort one list by values from another list.
5310 	X	how can i pass optional or keyword parameters from one function to another.
5311 	X	merge them into a single list of tuples sort the resulting list and then pick out the element you.
5312 	X	collect the arguments using the and specifiers in the functions parameter list this gives you the positional arguments as a tuple and the keyword arguments as a.
5313 	X	an alternative for the last step is.
5314 	X	you can then pass these arguments when calling another function by using and.
5315 	X	result for p in pairs result append p.
5316 	X	in the unlikely case that you care about python versions older than use apply.
5317 	X	if you find this more legible you might prefer to use this instead of the final list.
5318 	X	how do i write a function with output parameters call by reference.
5319 	X	however it is almost twice as slow for long.
5320 	X	remember that arguments are passed by assignment in.
5321 	X	why first the append operation has to reallocate memory and while it uses some tricks to avoid doing that each time it still has to do it occasionally and that costs quite a.
5322 	X	since assignment just creates references to objects theres no alias between an argument name in the caller and callee and so no call by reference per.
5323 	X	second the expression result append requires an extra attribute lookup and third theres a speed reduction from having to make all those function.
5324 	X	you can achieve the desired effect in a number of.
5325 	X	by returning a tuple of the results.
5326 	X	a class is the particular object type created by executing a class.
5327 	X	def func a b a new value a and b are local names b b assigned to new objects return a b return new values.
5328 	X	class objects are used as templates to create instance objects which embody both the data attributes and code methods specific to a.
5329 	X	x y old value x y func x y print x y output new value.
5330 	X	a class can be based on one or more other classes called its base class es.
5331 	X	this is almost always the clearest.
5332 	X	it then inherits the attributes and methods of its base.
5333 	X	this allows an object model to be successively refined by.
5334 	X	this isnt thread safe and is not.
5335 	X	you might have a generic mailbox class that provides basic accessor methods for a mailbox and subclasses such as mboxmailbox maildirmailbox outlookmailbox that handle various specific mailbox.
5336 	X	by passing a mutable changeable in place object.
5337 	X	def func a a new value a references a mutable list a a changes a shared object.
5338 	X	a method is a function on some object x that you normally call as x name.
5339 	X	args old value func args print args args output new value.
5340 	X	methods are defined as functions inside the class definition.
5341 	X	by passing in a dictionary that gets mutated.
5342 	X	class c def meth self arg return arg self attribute.
5343 	X	def func args args a new value args is a mutable dictionary args b args b change it in place.
5344 	X	args a old value b func args print args a args b.
5345 	X	self is merely a conventional name for the first argument of a.
5346 	X	or bundle up values in a class instance.
5347 	X	a method defined as meth self a b c should be called as x meth a b c for some instance x of the class in which the definition occurs the called method will think it is called as meth x a b c.
5348 	X	class callbyref def init self args for key value in args items setattr self key value.
5349 	X	how do i check if an object is an instance of a given class or of a subclass of it.
5350 	X	def func args args a new value args is a mutable callbyref args b args b change object in place.
5351 	X	use the built in function isinstance obj cls.
5352 	X	args callbyref a old value b func args print args a.
5353 	X	note that most programs do not use isinstance on user defined classes very.
5354 	X	theres almost never a good reason to get this.
5355 	X	if you are developing the classes yourself a more proper object oriented style is to define methods on the classes that encapsulate a particular behaviour instead of checking the objects class and doing a different thing based on what class it.
5356 	X	your best choice is to return a tuple containing the multiple.
5357 	X	for example if you have a function that does something.
5358 	X	how do you make a higher order function in python.
5359 	X	a better approach is to define a search method on all the classes and just call it.
5360 	X	you have two choices you can use nested scopes or you can use callable.
5361 	X	class mailbox def search self code to search a mailbox.
5362 	X	for example suppose you wanted to define linear ab which returns a function f x that computes the value a x b.
5363 	X	class document def search self code to search a document.
5364 	X	def linear ab def result x return a x b return result.
5365 	X	delegation is an object oriented technique also called a design pattern.
5366 	X	lets say you have an object x and want to change the behaviour of just one of its.
5367 	X	class linear def init self a b self a self b ab def call self x return self a x self b.
5368 	X	you can create a new class that provides a new implementation of the method youre interested in changing and delegates all other methods to the corresponding method of x.
5369 	X	for example the following class implements a class that behaves like a file but converts all written data to uppercase.
5370 	X	gives a callable object where taxes e e.
5371 	X	class upperout def init self outfile.
5372 	X	the callable object approach has the disadvantage that it is a bit slower and results in slightly longer.
5373 	X	outfile outfile def write self s.
5374 	X	however note that a collection of callables can share their signature via inheritance.
5375 	X	outfile write s upper def getattr self name return getattr.
5376 	X	class exponential linear init inherited def call self x return self a x self b.
5377 	X	here the upperout class redefines the write method to convert the argument string to uppercase before calling the underlying.
5378 	X	object can encapsulate state for several methods.
5379 	X	class counter value def set self x self value x def up self self value self value def down self self value self value.
5380 	X	all other methods are delegated to the underlying.
5381 	X	count counter inc dec reset count up count down count set.
5382 	X	the delegation is accomplished via the getattr method consult the language reference http www python org doc ref attribute access html for more information about controlling attribute.
5383 	X	here inc dec and reset act like functions which share the same counting.
5384 	X	note that for more general cases delegation can get.
5385 	X	how do i copy an object in python.
5386 	X	when attributes must be set as well as retrieved the class must define a settattr method too and it must do so.
5387 	X	in general try copy copy or copy deepcopy for the general.
5388 	X	the basic implementation of setattr is roughly equivalent to the following.
5389 	X	not all objects can be copied but most.
5390 	X	class x def setattr self name value.
5391 	X	some objects can be copied more.
5392 	X	dict to store local state for self without causing an infinite.
5393 	X	sequences can be copied by slicing.
5394 	X	how do i call a method defined in a base class from a derived class that overrides it.
5395 	X	if youre using new style classes use the built in super function.
5396 	X	how can i find the methods or attributes of an object.
5397 	X	class derived base def meth self super derived self meth.
5398 	X	for an instance x of a user defined class dir x returns an alphabetized list of the names containing the instance attributes and methods and attributes defined by its.
5399 	X	if youre using classic classes for a class definition such as class derived base you can call method meth defined in base or one of base s base classes as base meth self arguments.
5400 	X	how can my code discover the name of an object.
5401 	X	here base meth is an unbound method so you need to provide the self.
5402 	X	generally speaking it cant because objects dont really have.
5403 	X	how can i organize my code to make it easier to change the base class.
5404 	X	essentially assignment always binds a name to a value the same is true of def and class statements but in that case the value is a.
5405 	X	you could define an alias for the base class assign the real base class to it before your class definition and use the alias throughout your.
5406 	X	then all you have to change is the value assigned to the.
5407 	X	incidentally this trick is also handy if you want to decide dynamically e g depending on availability of resources which base class to.
5408 	X	a b b a print b print a.
5409 	X	basealias real base class class derived basealias def meth self basealias meth self.
5410 	X	arguably the class has a name even though it is bound to two names and invoked through the name b the created instance is still reported as an instance of class a however it is impossible to say whether the instances name is a or b since both names are bound to the same.
5411 	X	generally speaking it should not be necessary for your code to know the names of particular.
5412 	X	static data in the sense of c or java is easy static methods again in the sense of c or java are not supported.
5413 	X	unless you are deliberately writing introspective programs this is usually an indication that a change of approach might be.
5414 	X	for static data simply define a class.
5415 	X	in comp lang python fredrik lundh once gave an excellent analogy in answer to this question.
5416 	X	to assign a new value to the attribute you have to explicitly use the class name in the assignment.
5417 	X	the same way as you get the name of that cat you found on your porch the cat object itself cannot tell you its name and it doesnt really care so the only way to find out what its called is to ask all your neighbours namespaces if its their cat object.
5418 	X	class c count number of times c init called.
5419 	X	and dont be surprised if youll find that its known by many names or no name at all.
5420 	X	def init self c count c count.
5421 	X	is there an equivalent of cs.
5422 	X	def getcount self return c count or return self count.
5423 	X	in many cases you can mimic ab c with a and b or c but theres a flaw if b is zero or empty or none anything that tests false then c will be selected.
5424 	X	c count also refers to c count for any c such that isinstance c c holds unless overridden by c itself or by some class on the base class search path from c class back to c.
5425 	X	in many cases you can prove by looking at the code that this cant happen e g because b is a constant or has a type that can never be false but in general this can be a.
5426 	X	caution within a method of c an assignment like self count creates a new and unrelated instance vrbl named count in self s own.
5427 	X	tim peters who wishes it was steve majewski suggested the following solution a and b or c.
5428 	X	rebinding of a class static data name must always specify the class whether inside a method or not.
5429 	X	because b is a singleton list it is never false so the wrong path is never taken then applying to the whole thing gets the b or c that you really.
5430 	X	static methods are possible when youre using new style classes.
5431 	X	ugly but it gets you there in the rare cases where it is really inconvenient to rewrite your code using.
5432 	X	the best course is usually to write a simple else.
5433 	X	another solution is to implement the.
5434 	X	however a far more straightforward way to get the effect of a static method is via a simple module level function.
5435 	X	def q condon trueon false if cond if not isfunction on true return on true else return apply on true else if not isfunction on false return on false else return apply on false.
5436 	X	if your code is structured so as to define one class or tightly related class hierarchy per module this supplies the desired.
5437 	X	in most cases youll pass b and c directly q abc.
5438 	X	how can i overload constructors or methods in python.
5439 	X	to avoid evaluating b or c when they shouldnt be encapsulate them within a lambda function e g q alambda b lambda c.
5440 	X	this answer actually applies to all methods but the question usually comes up first in the context of.
5441 	X	it is asked why python has no if then else.
5442 	X	there are several answers many languages do just fine without one it can easily lead to less readable code no sufficiently pythonic syntax is discovered a search of the standard library found remarkably few places where using an if then else expression would make the code more.
5443 	X	class c c cout no arguments n c int i cout argument is i n.
5444 	X	in pep http www python org peps pep html was written proposing several possible syntaxes and the community was asked to vote on the.
5445 	X	in python you have to write a single constructor that catches all cases using default.
5446 	X	class c def init self i none if i is none print no arguments else print argument is i.
5447 	X	most people liked one of the syntaxes but also hated other syntaxes many votes implied that people preferred no ternary operator rather than having a syntax they.
5448 	X	this is not entirely equivalent but close enough in.
5449 	X	is it possible to write obfuscated one liners in python.
5450 	X	you could also try a variable length argument list e g.
5451 	X	usually this is done by nesting lambda within lambda.
5452 	X	see the following three examples due to ulf bartelt.
5453 	X	the same approach works for all method.
5454 	X	first fibonacci numbers print map lambda xf lambda xf x or f x f f x f f xf range.
5455 	X	i try to use spam and i get an error about someclassname.
5456 	X	variables with double leading underscore are mangled to provide a simple but effective way to define class private.
5457 	X	any identifier of the form spam at least two leading underscores at most one trailing underscore is textually replaced with classname spam where classname is the current class name with any leading underscores.
5458 	X	how do i specify hexadecimal and octal integers.
5459 	X	this doesnt guarantee privacy an outside user can still deliberately access the classname spam attribute and private values are visible in the objects dict.
5460 	X	i updated the pep for guido van.
5461 	X	if the cron job is doing its thing the results will be visible in a few.
5462 	X	the update reflects updated thinking based on the discussion to.
5463 	X	it also summarizes a few posts from comp lang.
5464 	X	hopefully it will serve to focus the discussion on the best of the ideas and arguments presented so.
5465 	X	out of order evaluation is out of.
5466 	X	so are ideas that do not provide for short.
5467 	X	if condition expression else condition is in.
5468 	X	condition expression expression is a new.
5469 	X	cond condition expression condition is viable if implemented as a keyword and has short circuit.
5470 	X	note the actual word is still an open.
5471 	X	added a summary of a few ideas from the last couple hundred posts from comp lang.
5472 	X	for review pep if then else expression pep http mail python org pipermail python dev february html update to pep if then else expression some data on the debate.
5473 	X	a thread on comp lang python sprung up about adding a ternary operator to python yes the title says trinary operators but that is apparently not technically correct in case you are not a c programmer the ternary operator can be thought of an if else statement that acts like an expression its the cond.
5474 	X	true stmt false stmt syntax from c.
5475 	X	another way of thinking of it is as an if else statement that is.
5476 	X	guido was sick of this debate coming up so he wrote pep on the subject and has left it up to comp lang python to argue this one out he actually explicitly said not to discuss it on python dev and decide on the final fate of this.
5477 	X	if you have an opinion voice it on comp lang python since this will also be used as a test to see if more things should be put on c l py for discussion instead of python.
5478 	X	as of this writing samuele pedroni updated the list on posting stats for those of us who dont follow c l.
5479 	X	two syntactic choices are currently in the running this is ignoring objections to the whole idea.
5480 	X	one is if cond true stmt else false stmt and the other is cond true stmt false stmt.
5481 	X	pep http www python org peps pep html comp lang python http groups google com groupsq.
5482 	X	pep then else for deprecating and or side effects christian tismer suggested replacing and and or with then and else for doing binary short circuit testing such as arg arg else default instead of arg arg or default.
5483 	X	also suggested arg when cond else cond as a possible ternary.
5484 	X	still were tossed around on python.
5485 	X	pep alternative syntax bool method someone suggested adding a method to booleans to act like a ternary.
5486 	X	before the discussion was moved to comp lang python as all ternary discussions should be the point was made that it could not support short.
5487 	X	non binary operators thread that popped into existence on python dev part way through its discussion on comp lang python which is why it died on python dev quickly about how ternary operators are different compared to two chained binary operators like a b c.
5488 	X	mark hammond asked for help with dealing with a deadlock with import.
5489 	X	changes to logging http mail python org pipermail python dev february html vinay sajip said he had patches for the logging package ready to go and asked for comments which he.
5490 	X	execve vulnerability python execvpe symlink race condition someone reported a vulnerability that was fixed since python.
5491 	X	basics vote by email no later than noon est on sunday march.
5492 	X	line letter of most preferred format accept or reject format line letter of second best format accept or reject format line letter of third best format accept or reject format line example.
5493 	X	the published results will only include lines and note that means your name is.
5494 	X	you can use a fake name but a real name is.
5495 	X	the email address is used for assuring only one vote per.
5496 	X	resolving any questions that arise about the vote.
5497 	X	write out these five examples using your most preferred syntax x door if quantity s else data if hasattr s open s readlines else s split z if abs z.
5498 	X	else z t v index if t t else sigma t return if len s insertsort s else quicksort s note the examples are required but will not be.
5499 	X	try to get them right but it is okay if they are.
5500 	X	marking accept means that you prefer this format over no.
5501 	X	marking reject means that you prefer no change but if there is one then the marked choice would be the best.
5502 	X	choices taken from erik max franciss posting of seconded choices a x if c else y b if c then x else y e c x.
5503 	X	note all of these options have short circuit.
5504 	X	that means that cond cxy would be a special.
5505 	X	if the pep notes that a proposal had been rejected at some point then consider it.
5506 	X	sample ballot h reject c then a else b john jones x door if quantity s else data if hasattr s open s readlines else s split z if abs z.
5507 	X	else z t v index if t t else sigma t return if len s linsort s else qsort s.
5508 	X	rationale and process in the end only guidos vote.
5509 	X	the purpose of the voting is to provide him with information about how the community.
5510 	X	the goal of collecting preferences along with accept rejects is to allow everyone including those who prefer the status quo to also be able to express which syntax they find least.
5511 	X	the end result is that guido will know which is the most preferred syntax and the how much it is preferred to the status.
5512 	X	the purpose of publishing both names and the votes is to provide assurance that the process is.
5513 	X	also i think that people are more careful in their voting if they publicly take a.
5514 	X	however if someone wants to vote in secret they are welcome to use a pseudonym at least they will see their chosen name on the tally and know their vote was.
5515 	X	the purpose of the examples section is voter.
5516 	X	this provides some assurance that each voter has at least tried their own preferred.
5517 	X	exception handling if there is a dispute ill ask laura creighton to resolve.
5518 	X	if i messed up the ballot i will repost a.
5519 	X	if the email account fails i will open a new one and extend the voting by a.
5520 	X	if you make a mistake or change your mind you may re submit your vote and the previous vote will be thrown.
5521 	X	if there are any questions or discussion please use the.
5522 	X	the email address listed above is only for.
5523 	X	this is not a ballot for the official pep vote were run by raymond.
5524 	X	it is for a different vote that is intended to complement the results of the official vote by using a different type of ballot and a different method of tallying the results condorcets method for those who may be.
5525 	X	if enough people choose to participate it will provide a high quality source of additional information about the preferences of the python community regarding the ternary.
5526 	X	this vote is not intended to compete with or substitute for the official.
5527 	X	please participate in both votes if you have the time but be sure to vote in the official one if you care about the outcome of pep.
5528 	X	see the explanations in my posting to comp lang python two days ago for more information about the reasons for this supplemental vote on pep announce complementary vote re pep ternary proposal sun mar.
5529 	X	the two day nomination period for additional syntax proposals has now.
5530 	X	no additional nominations were received so the ballot is as follows.
5531 	X	xx no ternary xx t if c else f xx if c then t else f xx c t.
5532 	X	f xx cond c t f xx c t f xx c then t else f xx t when c else f xx c t else f xx c t else f xx c t f xx t if c else f xx if c then t else f xx c and t else f.
5533 	X	voting is a simple matter of ranking the alternatives of interest by replacing the xx that precedes each option with a digit.
5534 	X	for example you would use for your favourite highest ranked option and greater numbers for lower ranked.
5535 	X	you may re order the options on the.
5536 	X	it is often easier when there are many options to reorder them manually from best to worst and then assign.
5537 	X	note though that you must still assign a rank number to each option since it is always the number that determines the rank not the.
5538 	X	you may assign the same rank to multiple options if you consider them to be equally good.
5539 	X	doing this is equivalent to abstaining from participation in any decision between these equally ranked.
5540 	X	to simplify voting you may truncate your ballot by leaving certain options unranked for any options you consider to be so bad and unwinnable as to not be worth considering.
5541 	X	if you wish to do this either a leave xx in front of the unwanted option s in your submitted ballot rather than replacing it with a rank number or b delete the line s of the ballot that contain the unwanted.
5542 	X	you can also use a combination of both.
5543 	X	in either case these truncated options will be interpreted the same as if they had been ranked equally and lower than all explicitly ranked.
5544 	X	while truncation and equal rankings provide convenience ranking many options even those you dislike is a good.
5545 	X	see the strategy tips section below for reasons.
5546 	X	note that the status quo option of no ternary simply appears as one of the available options and every other proposed syntax appears as a separate option on the.
5547 	X	by placing no ternary somewhere within the middle of your ranking you can express the desire to have a ternary operator added to python only if certain forms of syntax are used and reject alternatives that you dislike while still expressing preferences among these bad alternatives in case one or more of them proves to be winnable.
5548 	X	the status quo option can of course also be ranked first or last if you feel either that a no ternary is acceptable in any form or alternately b should be added to the language at any.
5549 	X	a sample completed ballot might look like.
5550 	X	if c t else f t if c else f no ternary xx if c then t else f if c t else f.
5551 	X	here the voters favourite option is t if c else f.
5552 	X	the th option is unranked and could have instead been deleted to indicate the same.
5553 	X	surrounding lines of hyphens marking the beginning and end of the ballot are appreciated for clarity but not.
5554 	X	you may vote by submitting your email ballot to.
5555 	X	your final vote must be received within hours days.
5556 	X	wed sat of the time this message appears on comp lang python and or comp lang python announce for it to be counted in the final.
5557 	X	a confirmation message will be returned for each ballot that is received identifying any.
5558 	X	unconfirmed ballots will not appear in the results so if you dont receive a reply within a few hours you may wish to send your ballot again im confirming votes manually so the response will not be immediate.
5559 	X	if you decide to change your vote just send a revised ballot containing your new.
5560 	X	the last confirmed ballot for each email address will be the one that appears in the final.
5561 	X	results will be published on sunday march th but not before the voting period of the official vote has ended noon est.
5562 	X	published results will be sent to comp lang python and comp lang python.
5563 	X	results will include among other things a list containing each voters name email address munged and completed ballot to allow for independent.
5564 	X	therefore if you do not want any or all of this information about you made public do not vote please refer to the previous message announcing this vote for details about what types of information will appear in the.
5565 	X	you may be unfamiliar with condorcets method the system of voting used here unless you happen to be a member of the debian project.
5566 	X	although completing a ranked ballot is technically very easy if you wish to know how to maximise the chances of getting the outcome you want you should read following information before completing your ballot.
5567 	X	condorcets method of counting ranked ballots is very different from other systems stv av irv borda that also use a ranked.
5568 	X	therefore it is a bad idea to attempt to vote strategically based on what you know or think you know about how those systems.
5569 	X	the best strategies for one method of voting will usually fail very badly when applied in another even if the form of the ballot is.
5570 	X	you should not assume that ranking any unacceptable options will harm the chances of electing your preferred option s.
5571 	X	condorcets method is a system of pairwise voting where the overall result is determined by finding the majority winners of a series of two way races between every possible pair of.
5572 	X	not ranking truncating some options or assigning the same rank to a group of options is therefore equivalent to abstaining from participation in any decision between those equally ranked.
5573 	X	therefore if the final choice in the election is between two options both of which you dislike but not equally you may later regret not having participated in that.
5574 	X	you should also not vote for what you believe to be an acceptable popular choice the lesser evil compromise ahead of your true favourite s in the belief that this will somehow help to prevent the election of a popular disliked alternative the greater evil.
5575 	X	this type of strategy is often necessary in plurality first past the post voting but is ineffective and unnecessary with condorcets.
5576 	X	condorcets method finds the best compromise automatically if one is needed so doing this will simply harm the chances of electing your true.
5577 	X	see http www electionmethods org condorcet htm for a detailed explanation of.
5578 	X	with condorcets method you will maximise the power and effectiveness of your ballot by providing a complete and sincere expression of your true.
5579 	X	you should only rank options equally if you genuinely consider them to be equally good or bad.
5580 	X	several people have requested a short way to express that they do not want any ternary.
5581 	X	send a email to pepvote hotmail com with a subject of pep line your full name.
5582 	X	that is simple and is easily.
5583 	X	you may of course stick with the original.
5584 	X	there were also those whose wished to express some sort of opinion that was not expressable on the.
5585 	X	they are welcome to submit a custom vote and ill accumulate those.
5586 	X	for example line your full name.
5587 	X	your final vote must be received within hours days.
5588 	X	wed sat of the time this message first appears on comp lang python and or comp lang python announce for it to be counted in the final.
5589 	X	a confirmation message will be returned for each ballot that is received identifying any.
5590 	X	unconfirmed ballots will not appear in the results so if you dont receive a reply within a few hours you may wish to send your ballot again im confirming votes manually so the response will not be immediate.
5591 	X	if you decide to change your vote just send a revised ballot containing your new.
5592 	X	the last confirmed ballot for each email address will be the one that appears in the final.
5593 	X	results will be published on sunday march th but not before the voting period of the official vote has ended noon est.
5594 	X	published results will be sent to comp lang python and comp lang python.
5595 	X	results will include among other things a list containing each voters name email address munged and completed ballot to allow for independent.
5596 	X	therefore if you do not want any or all of this information about you made public do not vote please refer to the previous message announcing this vote for details about what types of information will appear in the.
5597 	X	you may be unfamiliar with condorcets method the system of voting used here unless you happen to be a member of the debian project.
5598 	X	although completing a ranked ballot is technically very easy if you wish to know how to maximise the chances of getting the outcome you want you should read following information before completing your ballot.
5599 	X	condorcets method of counting ranked ballots is very different from other systems stv av irv borda that also use a ranked.
5600 	X	therefore it is a bad idea to attempt to vote strategically based on what you know or think you know about how those systems.
5601 	X	the best strategies for one method of voting will usually fail very badly when applied in another even if the form of the ballot is.
5602 	X	you should not assume that ranking any unacceptable options will harm the chances of electing your preferred option s.
5603 	X	condorcets method is a system of pairwise voting where the overall result is determined by finding the majority winners of a series of two way races between every possible pair of.
5604 	X	not ranking truncating some options or assigning the same rank to a group of options is therefore equivalent to abstaining from participation in any decision between those equally ranked.
5605 	X	therefore if the final choice in the election is between two options both of which you dislike but not equally you may later regret not having participated in that.
5606 	X	you should also not vote for what you believe to be an acceptable popular choice the lesser evil compromise ahead of your true favourite s in the belief that this will somehow help to prevent the election of a popular disliked alternative the greater evil.
5607 	X	this type of strategy is often necessary in plurality first past the post voting but is ineffective and unnecessary with condorcets.
5608 	X	condorcets method finds the best compromise automatically if one is needed so doing this will simply harm the chances of electing your true.
5609 	X	see http www electionmethods org condorcet htm for a detailed explanation of.
5610 	X	with condorcets method you will maximise the power and effectiveness of your ballot by providing a complete and sincere expression of your true.
5611 	X	you should only rank options equally if you genuinely consider them to be equally good or bad.
5612 	X	this message is to remind you that tomorrow saturday is the last day to vote in the complementary unofficial vote on adding a ternary operator to python pep.
5613 	X	response is good so far but the more people that participate the more useful the results will.
5614 	X	please participate if you have the.
5615 	X	a copy of the ballot and instructions on how to vote are included below in case you missed the first.
5616 	X	more information about this additional vote and why it was organized will be found here.
5617 	X	this is not a ballot for the official pep vote were run by raymond.
5618 	X	it is for a different vote that is intended to complement the results of the official vote by using a different type of ballot and a different method of tallying the results condorcets method for those who may be.
5619 	X	if enough people choose to participate it will provide a high quality source of additional information about the preferences of the python community regarding the ternary.
5620 	X	this vote is not intended to compete with or substitute for the official.
5621 	X	please participate in both votes if you have the time but be sure to vote in the official one if you care about the outcome of pep.
5622 	X	see the explanations in my posting to comp lang python two days ago for more information about the reasons for this supplemental vote on pep announce complementary vote re pep ternary proposal sun mar.
5623 	X	the two day nomination period for additional syntax proposals has now.
5624 	X	no additional nominations were received so the ballot is as follows.
5625 	X	xx no ternary xx t if c else f xx if c then t else f xx c t.
5626 	X	f xx cond c t f xx c t f xx c then t else f xx t when c else f xx c t else f xx c t else f xx c t f xx t if c else f xx if c then t else f xx c and t else f.
5627 	X	voting is a simple matter of ranking the alternatives of interest by replacing the xx that precedes each option with a digit.
5628 	X	for example you would use for your favourite highest ranked option and greater numbers for lower ranked.
5629 	X	you may re order the options on the.
5630 	X	it is often easier when there are many options to reorder them manually from best to worst and then assign.
5631 	X	note though that you must still assign a rank number to each option since it is always the number that determines the rank not the.
5632 	X	you may assign the same rank to multiple options if you consider them to be equally good.
5633 	X	doing this is equivalent to abstaining from participation in any decision between these equally ranked.
5634 	X	to simplify voting you may truncate your ballot by leaving certain options unranked for any options you consider to be so bad and unwinnable as to not be worth considering.
5635 	X	if you wish to do this either a leave xx in front of the unwanted option s in your submitted ballot rather than replacing it with a rank number or b delete the line s of the ballot that contain the unwanted.
5636 	X	you can also use a combination of both.
5637 	X	in either case these truncated options will be interpreted the same as if they had been ranked equally and lower than all explicitly ranked.
5638 	X	while truncation and equal rankings provide convenience ranking many options even those you dislike is a good.
5639 	X	see the strategy tips section below for reasons.
5640 	X	note that the status quo option of no ternary simply appears as one of the available options and every other proposed syntax appears as a separate option on the.
5641 	X	by placing no ternary somewhere within the middle of your ranking you can express the desire to have a ternary operator added to python only if certain forms of syntax are used and reject alternatives that you dislike while still expressing preferences among these bad alternatives in case one or more of them proves to be winnable.
5642 	X	the status quo option can of course also be ranked first or last if you feel either that a no ternary is acceptable in any form or alternately b should be added to the language at any.
5643 	X	a sample completed ballot might look like.
5644 	X	if c t else f t if c else f no ternary xx if c then t else f if c t else f.
5645 	X	here the voters favourite option is t if c else f.
5646 	X	the th option is unranked and could have instead been deleted to indicate the same.
5647 	X	surrounding lines of hyphens marking the beginning and end of the ballot are appreciated for clarity but not.
5648 	X	you may vote by submitting your email ballot to.
5649 	X	the ballot information contained in this message is for the complementary unofficial vote on the issue of adding a ternary operator to python pep.
5650 	X	it is not the data that will be used to determine the official results which are were tabulated by raymond.
5651 	X	this complementary vote uses a different type of ballot as well as a different method of tallying them condorcets method which should provide additional insight into the preferences of the python community regarding.
5652 	X	if you voted in this complementary vote please check the list below to determine that your ballot was counted.
5653 	X	results from this vote vote will be posted in a followup message entitled results complementary pep ternary vote.
5654 	X	no ternary t if c else f if c then t else f if c t else f if c t else f c t f c t.
5655 	X	f cond c t f c t f c then t else f t when c else f c t else f c t else f c t f t if c else f ifelse c t else f select c t else f when c t else f case c t else f if c then t else f c and t else f.
5656 	X	voter name email address pygs qfs de xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx gyromapygnetic excite com hopyward eegsoftware com mstopyne ugcs caltech edu ppyaul svensson org xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx prpyen lexen fastmail fm alan haffner yaipypa yahoo com xxxxxxxxxxxxxx alex martelli aleaxpy aleax it xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx amos latteier ampyos aracnet com anders hammarquist ipyko cd chalmers se xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx andrew dalke adapylke mindspring com xxxxxxxxxxxxxxxxxxxxxxxx andrew hamilton apynd hamilton yahoo com andrew reid andrew pyreid nist gov andrew sterian steripyana claymore engineer gvsu edu barry a warsaw bapyrry python org beni cherniavsky cbenpy techunix technion ac il berthold iso qh fllmann.
5657 	X	bhopyel web de carl banks peppy aerojockey com chermside michael mchpyermside ingdirect com colin dewey cndeweypy yahoo com david schnepper davidpysch verity com david stegbauer dspytegbauer post cz davide di blasi davide di blasipy st com xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx denis s otkidach pyods strana ru xxxxxxxxxxxxxxxxxxxxxxxx dennis lee bieber wlfrpyaed ix netcom com xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx donnal walter dpyonnal donnal net xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx doug henderson djpyhender telusplanet net xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx douglas savitsky dsavitskpy mail e coli net xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx dwelch dwelpych attbi com egbert bouwman egbert lpyist hccnet nl elron a yellin pyelronayellin attbi com eric pettersen ppyett cgl ucsf edu evan simpson evpyan am com xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx felix beer pyf beer indec at xxxxxxxxxxxxxxxx fernando perez fppyerez colorado edu gareth mccaughan gareth mccaughanpy pobox com xxxxxxxxxxxxxxxxxxxxxxxxxx geoff gerrietts gepyoff homegain com george young pygry ll mit edu xxxxxxxxxxxxxx gerd woetzel gerd pywoetzel fit fraunhofer de xxxxxxxxxxxx gerhard kirchmann gerhapyrd kirchmann nexgo de giovanni bajo giovpyannibajo libero it xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx gordon williams g wpyill cyberus ca xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx greg krohn pygreg capra us greg mcfarlane pygregm iname com xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx guido goldstein pepvotepy a nugget de harvey thomas hspyt empolis co uk ian bicking ianbpy colorstudy com xxxxxxxxxxxxxxxxxxxxxxxxxx ian douglas bollinger escovpyan myrealbox com jakob schiotz spychiotz fysik dtu dk xxxxxxxxxxxxxxxxxxxxxxxxxx jens iso qj frgen.
5658 	X	mortensen jjpym tiscali dk xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx jim fulton jimpy zope com xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx john grosspietsch jpyohnkg earthlink net john hazen ppyython list hazen net john j smith jpyohnjsmith rediffmail com john williams pyjrw pobox com jp calderone exarkunpy intarweb us xxxxxxxxxxxxxxxxxxxxxxxxxxxx kirill simonov kirill simonpyov mail ru xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx korolkov dmitry korolkopyv lcard ru xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx l e druker ledrukerpy rogers com luis p caamano lcaamanopy mindspring com xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx lutz schroeer lschpyroeer elektroelch de magnus lycka mapygnus thinkware se xxxxxxxxxxxxxxxxxxxxxxxxxx manuel m garcia mpygarcia cole switches com xxxxxxxxxxxxxxxxxxxxxxxxxx matthew dixon cowles mattpy mondoinfo com xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx michael gleicher glepyicher cs wisc edu mike howard mikpye clove com xxxxxxxxxxxxxxxxxxxxxxxxxxxx mike rovner pymrovner hotmail com nick coghlan ncoghpylan email com xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx nick efford ndepy comp leeds ac uk norman petry npepytry accesscomm ca oleg broytmann ppyhd phd pp ru oliver schaefer schapyeferffm gmx de parzival herzog pyparz shaw ca xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx paul paterson paulpaterspyon houston rr com xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx paul sidorsky paupylsid shaw ca xxxxxxxxxxxxxxxx peter maxwell maxwepyll biolateral com au xxxxxxxx phil hunt philhpy cabalamat org piers lauder pierpys cs su oz au xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx rafal smotrzyk rsmotrpyzyk mikroplan com pl xxxxxxxxxxxxxxxxxxxxxxxxxx ralph corderoy pyralph inputplus co uk randolph brown rgbpy panix com xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx richard emslie rxpye ukshells co uk xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx richard jones richardjpyones optushome com au robin munn rmpyunn pobox com xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx rod haper rhapyper houston rr com xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx russell e owen rpyowen cesmail net xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx sean ross seanpydavidross hotmail com shane holloway ieee pyshane holloway ieee org xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx stephan deibel sdeibpyel wingide com stephen a langer stepyphen langer nist gov ted horst tedpy horst ubsw com xxxxxxxxxxxxxxxxxxxxxxxxxxxx terry reedy tjrepyedy udel edu xxxxxxxxxxxxxxxxxxxxxxxxxxxx thomas wouters thompyas xsall net xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx tim evans t evanspy paradise net nz xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx tom culliton culpyliton io com xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx tony j ibbs tibs pytony lsl co uk treutwein guido guido treutweinpy siemens com xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx vladimir pastukhov pyvlpast mail ru xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx walter moreira walterpym parque homelinux net werner schiendl pyws news gmx at xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx william dode wpyilk flibuste net remove py from voter email addresses before sending.
5659 	X	the results shown below are for the complementary unofficial vote on the issue of adding a ternary operator to python pep.
5660 	X	these results will probably be a bit different from the official results which are were tabulated by raymond hettinger using a different technique and a different set of.
5661 	X	both sets of results are non binding and intended only to advise the bdfl about the python communitys wishes regarding the implementation of.
5662 	X	hopefully this supplemental vote will provide guido van rossum with additional insight into the wishes of python.
5663 	X	this complementary vote used a ranked ballot and condorcets method to determine a.
5664 	X	for background information about how this method works see.
5665 	X	http www electionmethods org condorcetex htm.
5666 	X	the results shown below are based on ballots received over a one week period march.
5667 	X	the ballots themselves may be viewed here.
5668 	X	gnu gpl licensed voting software written in python is available to verify these.
5669 	X	it could also be used again in future votes if the python community wishes to use condorcets method to advise the bdfl on other.
5670 	X	you can download a package containing this software as well as all the data used for this vote from.
5671 	X	this software was written and tested using python running on red hat linux.
5672 	X	use on other platforms may require some.
5673 	X	the condorcet winner is no ternary.
5674 	X	c t else f when c t else f.
5675 	X	c t else f case c t else f ifelse c t else f select c t else f cond c t f c t f.
5676 	X	c and t else f if c then t else f t if c else f.
5677 	X	option no ternary beats option if c then t else f beats option if c t else f beats option c t f beats option if c t else f beats option t if c else f beats option c then t else f beats option t when c else f beats option c t.
5678 	X	f beats option c t f beats option c t else f beats option when c t else f beats option c t else f beats option case c t else f beats option ifelse c t else f beats option select c t else f beats option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
5679 	X	option if c then t else f beats option if c t else f beats option c t f beats option if c t else f beats option t if c else f beats option c then t else f beats option t when c else f beats option c t.
5680 	X	f beats option c t f beats option c t else f beats option when c t else f beats option c t else f beats option case c t else f beats option ifelse c t else f beats option select c t else f beats option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
5681 	X	option if c t else f beats option c t f beats option if c t else f beats option t if c else f beats option c then t else f beats option t when c else f beats option c t.
5682 	X	f beats option c t f beats option c t else f beats option when c t else f beats option c t else f beats option case c t else f beats option ifelse c t else f beats option select c t else f beats option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
5683 	X	option c t f beats option if c t else f beats option t if c else f beats option c then t else f beats option t when c else f beats option c t.
5684 	X	f beats option c t f beats option c t else f beats option when c t else f beats option c t else f beats option case c t else f beats option ifelse c t else f beats option select c t else f beats option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
5685 	X	option if c t else f beats option t if c else f beats option c then t else f beats option t when c else f beats option c t.
5686 	X	f beats option c t f beats option c t else f beats option when c t else f beats option c t else f beats option case c t else f beats option ifelse c t else f beats option select c t else f beats option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
5687 	X	option t if c else f beats option c then t else f beats option t when c else f beats option c t.
5688 	X	f beats option c t f beats option c t else f beats option when c t else f beats option c t else f beats option case c t else f beats option ifelse c t else f beats option select c t else f beats option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
5689 	X	option c then t else f beats option t when c else f beats option c t.
5690 	X	f beats option c t f beats option c t else f beats option when c t else f beats option c t else f beats option case c t else f beats option ifelse c t else f beats option select c t else f beats option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
5691 	X	option t when c else f beats option c t.
5692 	X	f beats option c t f beats option c t else f beats option when c t else f beats option c t else f beats option case c t else f beats option ifelse c t else f beats option select c t else f beats option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
5693 	X	f beats option c t f beats option c t else f beats option when c t else f beats option c t else f beats option case c t else f beats option ifelse c t else f beats option select c t else f beats option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
5694 	X	option c t f beats option c t else f beats option when c t else f beats option c t else f beats option case c t else f beats option ifelse c t else f beats option select c t else f beats option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
5695 	X	option c t else f beats option when c t else f beats option c t else f beats option case c t else f beats option ifelse c t else f beats option select c t else f beats option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
5696 	X	option when c t else f beats option c t else f beats option case c t else f beats option ifelse c t else f beats option select c t else f beats option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
5697 	X	option c t else f beats option case c t else f beats option ifelse c t else f beats option select c t else f loses to option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
5698 	X	option case c t else f ties option ifelse c t else f ties option select c t else f beats option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
5699 	X	option ifelse c t else f beats option select c t else f ties option cond c t f loses to option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
5700 	X	option select c t else f beats option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
5701 	X	option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
5702 	X	option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
5703 	X	option c and t else f beats option if c then t else f beats option t if c else f.
5704 	X	option if c then t else f beats option t if c else f.
5705 	X	the pep vote is summarized at http tinyurl com f.
5706 	X	here are some of the highlights.
5707 	X	of these used a rejectall ballot and used the original.
5708 	X	had a preferred syntax they found acceptable while found no acceptable.
5709 	X	for the second ranked syntax the ratio dropped to in favor of a.
5710 	X	this means that people found only one syntax to be.
5711 	X	for the third ranked syntax the ratio dropped to.
5712 	X	this indicates that over half of the voters would prefer no change if they cant have one of their first two.
5713 	X	if the rejectall votes are attributed entirely to that syntax the ratio becomes favoring to.
5714 	X	the individual votes were highly expressive and are worth reviewing.
5715 	X	http tinyurl com z http tinyurl com z.
5716 	X	the write in votes had more accepts than rejects but had no clustering of syntax.
5717 	X	the downfall of all voting systems is not in the data collection rather it is in the way the rankings are.
5718 	X	i avoid this issue by not declaring a.
5719 	X	instead guido is were given a straight tally and a copy of all of the individual.
5720 	X	this works especially well because his vote outweighs all of the.
5721 	X	though the results leans toward accepting the pep as proposed it is not.
5722 	X	some of the no change votes included strong.
5723 	X	there were three or four ballots received after this summary was prepared but before it was.
5724 	X	ill include them for guido in a separate.
5725 	X	the pep vote is summarized at http tinyurl com f.
5726 	X	here are some of the highlights.
5727 	X	of these used a rejectall ballot and used the original.
5728 	X	had a preferred syntax they found acceptable while found no acceptable.
5729 	X	for the second ranked syntax the ratio dropped to in favor of a.
5730 	X	this means that people found only one syntax to be.
5731 	X	for the third ranked syntax the ratio dropped to.
5732 	X	this indicates that over half of the voters would prefer no change if they cant have one of their first two.
5733 	X	if the rejectall votes are attributed entirely to that syntax the ratio becomes favoring to.
5734 	X	the individual votes were highly expressive and are worth reviewing.
5735 	X	http tinyurl com z http tinyurl com z.
5736 	X	the write in votes had more accepts than rejects but had no clustering of syntax.
5737 	X	the downfall of all voting systems is not in the data collection rather it is in the way the rankings are.
5738 	X	i avoid this issue by not declaring a.
5739 	X	instead guido is were given a straight tally and a copy of all of the individual.
5740 	X	this works especially well because his vote outweighs all of the.
5741 	X	though the results lean towards accepting the pep as proposed it is not.
5742 	X	some of the no change votes included strong.
5743 	X	there were three or four ballots received after this summary was prepared but before it was.
5744 	X	ill include them for guido in a separate.
5745 	X	its easy to miss the transition between a long argument list and a long decorator list.
5746 	X	its cumbersome to cut and paste a decorator list for reuse because it starts and ends in the middle of a line.
5747 	X	the next form is that the decorator syntax goes inside the method body at the start in the same place that docstrings currently live.
5748 	X	def bar lowhigh accepts intint returns float pass.
5749 	X	the primary objection to this form is that it requires peeking inside the method body to determine the.
5750 	X	in addition even though the code is inside the method body it is not executed when the method is.
5751 	X	guido felt that docstrings were not a good counter example and that it was quite possible that a docstring decorator could help move the docstring to outside the function.
5752 	X	the final form is a new block that encloses the methods.
5753 	X	for this example well use a decorate keyword as it makes no sense with the.
5754 	X	decorate classmethod def foo argarg pass.
5755 	X	decorate accepts intint returns float def bar lowhigh pass.
5756 	X	this form would result in inconsistent indentation for decorated and undecorated.
5757 	X	in addition a decorated methods body would start three indent levels.
5758 	X	accepts intint returns float def bar lowhigh pass.
5759 	X	the major objections against this syntax are that the symbol is not currently used in python and is used in both ipython and leo and that the symbol is not.
5760 	X	another objection is that this wastes a currently unused character from a limited set on something that is not perceived as a major.
5761 	X	accepts intint returns float def bar lowhigh pass.
5762 	X	this is a variant on the decorator syntax it has the advantage that it does not break ipython and.
5763 	X	its major disadvantage compared to the syntax is that the symbol looks like both a capital i and a lowercase l.
5764 	X	accepts intint returns float def bar lowhigh pass.
5765 	X	the major objection to the list syntax is that its currently meaningful when used in the form before the method.
5766 	X	its also lacking any indication that the expression is a.
5767 	X	none of these alternatives gained much.
5768 	X	the alternatives which involve square brackets only serve to make it obvious that the decorator construct is not a.
5769 	X	they do nothing to make parsing any.
5770 	X	the alternative presents parsing problems because and already parse as un.
5771 	X	they present a further parsing ambiguity because a right angle bracket might be a greater than symbol instead of a closer for the.
5772 	X	the decorate proposal was that no new syntax be implemented the following.
5773 	X	both jp calderone and philip eby produced implementations of functions that did.
5774 	X	guido was pretty firmly against this with no new syntax the magicness of a function like this is extremely high.
5775 	X	using functions with action at a distance through sys settraceback may be okay for an obscure feature that cant be had any other way yet doesnt merit changes to the language but thats not the situation for.
5776 	X	the widely held view here is that decorators need to be added as a syntactic feature to avoid the problems with the postfix notation used in and.
5777 	X	decorators are slated to be an important new language feature and their design needs to be forward looking not constrained by what can be implemented in.
5778 	X	this idea was the consensus alternate from comp lang python more on this in community consensus.
5779 	X	robert brewer wrote up a detailed j proposal document outlining the arguments in favor of this.
5780 	X	the initial issues with this form are.
5781 	X	it requires a new keyword and therefore a from future import decorators.
5782 	X	however using emerged as the consensus choice and is used in the proposal and.
5783 	X	the keyword block form produces something that looks like a normal code block but.
5784 	X	attempts to use statements in this block will cause a syntax error which may confuse.
5785 	X	a few days later guido rejected the proposal on two main grounds firstly.
5786 	X	the syntactic form of an indented block strongly suggests that its contents should be a sequence of statements but in fact it is not only expressions are allowed and there is an implicit collecting of these expressions going on until they can be applied to the subsequent function.
5787 	X	the keyword starting the line that heads a block draws a lot of attention to.
5788 	X	but the using keyword or any other keyword in its place doesnt deserve that attention the emphasis should be on the decorator or decorators inside the suite since those are the important modifiers to the function definition that.
5789 	X	readers are invited to read the full response.
5790 	X	there are plenty of other variants and proposals on the wiki page.
5791 	X	the wiki page http www python org moin pythondecorators.
5792 	X	there is some history in java using initially as a marker in javadoc comments and later in java for annotations which are similar to python.
5793 	X	the fact that was previously unused as a token in python also means its clear there is no possibility of such code were parsed by an earlier version of python leading to possibly subtle semantic.
5794 	X	it also means that ambiguity of what is a decorator and what isnt is.
5795 	X	that said is still a fairly arbitrary.
5796 	X	javadoc comments http java sun com jse javadoc writingdoccomments annotations.
5797 	X	guido asked for a volunteer to implement his preferred syntax and mark russell stepped up and posted a patch to.
5798 	X	this new syntax was available in.
5799 	X	dec dec def func arg arg pass.
5800 	X	def func arg arg pass func dec dec func.
5801 	X	though without the intermediate creation of a variable named func.
5802 	X	the version implemented in allowed multiple decorator clauses on a single.
5803 	X	in this was tightened up to only allowing one decorator per.
5804 	X	a previous patch from michael hudson which implements the list after def syntax is also still kicking.
5805 	X	patch http www python org sf previous patch http starship python net crew mwh hacks meth syntax sugar diff.
5806 	X	after was released in response to community reaction guido stated that hed re examine a community proposal if the community could come up with a community consensus a decent proposal and an.
5807 	X	after an amazing number of posts collecting a vast number of alternatives in the python wiki a community consensus emerged below.
5808 	X	guido subsequently rejected this alternate form but added.
5809 	X	in python to be released this thursday everything remains as currently in.
5810 	X	for i will consider a change of to some other single character even though i think that has the advantage of were the same character used by a similar feature in.
5811 	X	its been argued that its not quite the same since in java is used for attributes that dont change.
5812 	X	but pythons dynamic nature makes that its syntactic elements never mean quite the same thing as similar constructs in other languages and there is definitely significant.
5813 	X	regarding the impact on rd party tools ipythons author doesnt think theres going to be much impact leos author has said that leo will survive although it will cause him and his users some transitional pain.
5814 	X	i actually expect that picking a character thats already used elsewhere in pythons syntax might be harder for external tools to adapt to since parsing will have to be more subtle in that.
5815 	X	but im frankly undecided so theres some wiggle room.
5816 	X	i dont want to consider further syntactic alternatives at this point the buck has to stop at some point everyone has had their say and the show must go.
5817 	X	python wiki http www python org moin pythondecorators subsequently rejected.
5818 	X	this section documents the rejected j syntax and is included for historical.
5819 	X	the consensus that emerged on comp lang python was the proposed j syntax the j was how it was referenced on the pythondecorators wiki page the new keyword using prefixing a block of decorators before the def.
5820 	X	using classmethod synchronized lock def func cls pass.
5821 	X	the main arguments for this syntax fall under the readability counts.
5822 	X	a suite is better than multiple.
5823 	X	the using keyword and block transforms the single block def statement into a multiple block compound construct akin to try finally and.
5824 	X	a keyword is better than punctuation for a new.
5825 	X	a keyword matches the existing use of.
5826 	X	a keyword distinguishes python decorators from java annotations and net attributes which are significantly different.
5827 	X	robert brewer wrote a detailed proposal for this form and michael sparks produced a patch.
5828 	X	detailed proposal a patch http www python org sf.
5829 	X	as noted previously guido rejected this form outlining his problems with it in a message to python dev and comp lang.
5830 	X	much of the discussion on comp lang python and the python dev mailing list focuses on the use of decorators as a cleaner way to use the staticmethod and classmethod.
5831 	X	this capability is much more powerful than.
5832 	X	this section presents some examples of.
5833 	X	define a function to be executed at.
5834 	X	note that the function isnt actually wrapped in the usual.
5835 	X	def onexit f import atexit atexit register f return f.
5836 	X	note that this example is probably not suitable for real usage but is for example purposes.
5837 	X	define a class with a singleton.
5838 	X	note that once the class disappears enterprising programmers would have to be more creative to create more.
5839 	X	from shane hathaway on python dev.
5840 	X	def singleton cls instances def getinstance if cls not in instances instances cls cls return instances cls return getinstance.
5841 	X	based on an example posted by anders munch on python dev.
5842 	X	def attrs kwds def decorate f for k in kwds setattr f k kwds k return f return decorate.
5843 	X	attrs versionadded author guido van rossum def mymethod f.
5844 	X	note that this copies the func name attribute from the old to the new.
5845 	X	func name was made writable in python.
5846 	X	def accepts types def check accepts f assert len types f func code co argcount def new f args kwds for a t in zip args types assert isinstance a t arg r does not match s at return f args kwds new f func name f func name return new f return check accepts.
5847 	X	def returns rtype def check returns f def new f args kwds result f args kwds assert isinstance result rtype return value r does not match s resultrtype return result new f func name f func name return new f return check returns.
5848 	X	accepts int intfloat returns intfloat def func arg arg return arg arg.
5849 	X	declare that a class implements a particular set of interface s.
5850 	X	this is from a posting by bob ippolito on python dev based on experience with pyprotocols.
5851 	X	def provides interfaces an actual working implementation of provides for the current implementation of.
5852 	X	not particularly important for the pep.
5853 	X	def provides typ declareimplementation typ instancesprovide interfaces return typ return provides.
5854 	X	class ibar interface declare something about ibar here.
5855 	X	provides ibar class foo object implement something.
5856 	X	pyprotocols http peak telecommunity com pyprotocols html.
5857 	X	of course all these examples are possible today though without syntactic.
5858 	X	its not yet certain that class decorators will be incorporated into the language at a future.
5859 	X	guido expressed skepticism about the concept but various people have made some strong arguments search for pep posting draft on their behalf in python dev.
5860 	X	its exceedingly unlikely that class decorators will be in python.
5861 	X	the choice of the character will be re examined before python.
5862 	X	to go along with the release heres an updated version of the decorator.
5863 	X	this document is placed in the public.
5864 	X	it describes the state of decorators as they are in.
5865 	X	local variables mode indented text indent tabs mode nil sentence end double space t fill column.
5866 	X	author kevin d smith jim jewett skip montanaro anthony baxter post history jun jun feb mar aug sep.
5867 	X	this document is meant to describe the decorator syntax and the process that resulted in the decisions that were.
5868 	X	it does not attempt to cover the huge number of potential alternative syntaxes nor is it an attempt to exhaustively list all the positives and negatives of each.
5869 	X	the current method for transforming functions and methods for instance declaring them as a class or static method is awkward and can lead to code that is difficult to.
5870 	X	ideally these transformations should be made at the same point in the code where the declaration itself is.
5871 	X	this pep introduces new syntax for transformations of a function or method.
5872 	X	the current method of applying a transformation to a function or method places the actual transformation after the function.
5873 	X	for large functions this separates a key component of the functions behavior from the definition of the rest of the functions external.
5874 	X	def foo self perform method operation foo classmethod foo.
5875 	X	this becomes less readable with longer.
5876 	X	it also seems less than pythonic to name the function three times for what is conceptually a single.
5877 	X	a solution to this problem is to move the transformation of the method closer to the methods own.
5878 	X	while the new syntax is not yet final the intent is to replace.
5879 	X	def foo cls pass foo synchronized lock foo foo classmethod foo.
5880 	X	with an alternative that places the decoration in the functions declaration.
5881 	X	classmethod synchronized lock def foo cls pass.
5882 	X	modifying classes in this fashion is also possible though the benefits are not as immediately.
5883 	X	almost certainly anything which could be done with class decorators could be done using metaclasses but using metaclasses is sufficiently obscure that there is some attraction to having an easier way to make simple modifications to.
5884 	X	for python only function method decorators are were.
5885 	X	two decorators classmethod and staticmethod have been available in python since version.
5886 	X	its been assumed since approximately that time that some syntactic support for them would eventually be added to the.
5887 	X	given this assumption one might wonder why its been so difficult to arrive at a.
5888 	X	discussions have raged off and on at times in both comp lang python and the python dev mailing list about how best to implement function.
5889 	X	there is no one clear reason why this should be so but a few problems seem to be most.
5890 	X	disagreement about where the declaration of intent.
5891 	X	almost everyone agrees that decorating transforming a function at the end of its definition is.
5892 	X	beyond that there seems to be no clear consensus where to place this.
5893 	X	python is a syntactically simple language with fairly strong constraints on what can and cant be done without messing things up both visually and with regards to the language parser.
5894 	X	theres no obvious way to structure this information so that people new to the concept will think oh yeah i know what youre.
5895 	X	the best that seems possible is to keep new users from creating a wildly incorrect mental model of what the syntax.
5896 	X	for people who have a passing acquaintance with algebra or even basic arithmetic or have used at least one other programming language much of python is.
5897 	X	very few people will have had any experience with the decorator concept before encountering it in.
5898 	X	theres just no strong preexisting meme that captures the.
5899 	X	syntax discussions in general appear to cause more contention than almost anything.
5900 	X	readers are pointed to the ternary operator discussions that were associated with pep for another example of.
5901 	X	there is general agreement that syntactic support is desirable to the current state of.
5902 	X	guido mentioned syntactic support for decorators in his devday keynote presentation at the th python conference though he later said it was only one of several extensions he proposed there semi jokingly.
5903 	X	michael hudson raised the topic on python dev shortly after the conference attributing the initial bracketed syntax to an earlier proposal on comp lang python by gareth mccaughan.
5904 	X	en lr ie utf oe utf selm.
5905 	X	class decorations seem like an obvious next step because class definition and function definition are syntactically similar however guido remains unconvinced and class decorators will almost certainly not be in python.
5906 	X	the discussion continued on and off on python dev from february through july.
5907 	X	hundreds and hundreds of posts were made with people proposing many possible syntax.
5908 	X	guido took a list of proposals to europython where a discussion took.
5909 	X	subsequent to this he decided that wed have the java style barry warsaw named this the pie decorator syntax in honor of the pie thon parrot shootout which was occured around the same time as the decorator syntax and because the looks a little like a.
5910 	X	guido outlined his case on python dev including this piece on some of the many rejected.
5911 	X	europython http www python org doc essays ppt euro euro pdf outlined his case this piece java style.
5912 	X	theres been a number of complaints about the choice of the name decorator for this.
5913 	X	the major one is that the name is not consistent with its use in the gof book.
5914 	X	the name decorator probably owes more to its use in the compiler area a syntax tree is walked and.
5915 	X	its quite possible that a better name may turn.
5916 	X	work for arbitrary wrappers including user defined callables and the existing builtins classmethod and staticmethod.
5917 	X	this requirement also means that a decorator syntax must support passing arguments to the wrapper constructor.
5918 	X	work with multiple wrappers per definition.
5919 	X	make it obvious what is happening at the very least it should be obvious that new users can safely ignore it when writing their own code.
5920 	X	be a syntax that is easy to remember once explained.
5921 	X	not make future extensions more difficult.
5922 	X	be easy to type programs that use it are expected to use it very frequently.
5923 	X	not make it more difficult to scan through code.
5924 	X	it should still be easy to search for all definitions a particular definition or the arguments that a function accepts.
5925 	X	not needlessly complicate secondary support tools such as language sensitive editors and other toy parser tools out there.
5926 	X	allow future compilers to optimize for.
5927 	X	with the hope of a jit compiler for python coming into existence at some point this tends to require the syntax for decorators to come before the function definition.
5928 	X	move from the end of the function where its currently hidden to the front where it is more in your face.
5929 	X	andrew kuchling has links to a bunch of the discussions about motivations and use cases in his blog.
5930 	X	particularly notable is jim huginins list of use cases.
5931 	X	toy parser tools out there http groups google com groupshl.
5932 	X	en lr ie utf oe utf selm.
5933 	X	python list python org in your face in his blog http www amk ca diary archives cat python html jim huginins list of use cases.
5934 	X	the current syntax for function decorators as implemented in python is.
5935 	X	dec dec def func arg arg pass.
5936 	X	def func arg arg pass func dec dec func.
5937 	X	without the intermediate assignment to the variable func.
5938 	X	the decorators are near the function.
5939 	X	the sign makes it clear that something new is going on.
5940 	X	the decorator statement is limited in what it can accept arbitrary expressions will not.
5941 	X	guido preferred this because of a gut feeling.
5942 	X	there have been a large number of different syntaxes proposed rather than attempting to work through these individual syntaxes its worthwhile to break the syntax discussion down into a number of.
5943 	X	attempting to discuss each possible syntax individually would be an act of madness and produce a completely unwieldy.
5944 	X	a large number http www python org moin pythondecorators each possible syntax http ucsu colorado edu bethard py decorators output py.
5945 	X	the first syntax point is the location of the.
5946 	X	for the following examples we use the syntax used in.
5947 	X	decorators before the def statement are the first alternative and the syntax used in.
5948 	X	accepts intint returns float def bar lowhigh pass.
5949 	X	there have been a number of objections raised to this location the primary one is that its the first real python case where a line of code has an effect on a following.
5950 	X	the syntax available in requires one decorator per line in a multiple decorators could be specified on the same line.
5951 	X	people also complained that the syntax quickly got unwieldy when multiple decorators were.
5952 	X	the point was made though that the chances of a large number of decorators were used on a single function were small and thus this was not a large.
5953 	X	some of the advantages of this form are that the decorators live outside the method body they are obviously executed at the time the function is.
5954 	X	another advantage is that a prefix to the function definition fits the idea of knowing about a change to the semantics of the code before the code itself thus you know how to interpret the codes semantics properly without having to go back and change your initial perceptions if the syntax did not come before the function.
5955 	X	guido decided he preferred having the decorators on the line before the def because it was felt that a long argument list would mean that the decorators would be hidden.
5956 	X	the second form is the decorators between the def and the function name or the function name and the argument list.
5957 	X	def bar accepts intint returns float lowhigh pass.
5958 	X	there are a couple of objections to this.
5959 	X	the first is that it breaks easily greppability of the source you can no longer search for def foo and find the definition of the.
5960 	X	the second more serious objection is that in the case of multiple decorators the syntax would be extremely.
5961 	X	the next form which has had a number of strong proponents is to have the decorators between the argument list and the trailing in the def line.
5962 	X	def bar lowhigh accepts intint returns float pass.
5963 	X	guido summarized the arguments against this form many of which also apply to the previous form as.
5964 	X	it hides crucial information e g that it is a static method after the signature where it is easily missed.
5965 	X	nathan bullock suggested a relpath path a path b addition to os paththat returns a relative path from path a to path b.
5966 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
5967 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
5968 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
5969 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
5970 	X	the idea of a multiprocess module gained a reasonable amount of.
5971 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
5972 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
5973 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
5974 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
5975 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
5976 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
5977 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
5978 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
5979 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
5980 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
5981 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
5982 	X	with the threaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
5983 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
5984 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
5985 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
5986 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
5987 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
5988 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
5989 	X	python ast branch and pep and http mail python org pipermail python dev september html.
5990 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
5991 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
5992 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
5993 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
5994 	X	comp lang python thread patch http sourceforge net tracker index phpfunc detail aid group id atid.
5995 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
5996 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
5997 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
5998 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
5999 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
6000 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
6001 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
6002 	X	these all favour multi processing over multi.
6003 	X	vendor packages directory http mail python org pipermail python dev september html.
6004 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
6005 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
6006 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
6007 	X	http mail python org pipermail python dev september html.
6008 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
6009 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
6010 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
6011 	X	the idea of a multiprocess module gained a reasonable amount of.
6012 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
6013 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
6014 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
6015 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
6016 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
6017 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
6018 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
6019 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
6020 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
6021 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
6022 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
6023 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
6024 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
6025 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
6026 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
6027 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
6028 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
6029 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
6030 	X	python ast branch and pep and http mail python org pipermail python dev september html.
6031 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
6032 	X	this is a summary of traffic on the python dev mailing list from september through september.
6033 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
6034 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
6035 	X	comp lang python thread patch http sourceforge net tracker index phpfunc detail aid group id atid.
6036 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
6037 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
6038 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
6039 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
6040 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
6041 	X	it is intended to inform the wider python community of on going developments on the list on a semi monthly.
6042 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
6043 	X	these all favour multi processing over multi.
6044 	X	vendor packages directory http mail python org pipermail python dev september html.
6045 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
6046 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
6047 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
6048 	X	http mail python org pipermail python dev september html.
6049 	X	he pointed out that an implementation would really be needed to prove.
6050 	X	an archive of previous summaries is available.
6051 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
6052 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
6053 	X	the idea of a multiprocess module gained a reasonable amount of.
6054 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
6055 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
6056 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
6057 	X	phillip and martin pointed out that preventing any other interaction other than enqueued messages is the difficult part each active object would for example have to have its own sys.
6058 	X	an rss feed of the titles of the summaries is.
6059 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
6060 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
6061 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
6062 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
6063 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
6064 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
6065 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
6066 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
6067 	X	you can also watch comp lang python or comp lang python announce for new summaries or through their email gateways of python list or python announce respectively as found at http mail python org.
6068 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
6069 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
6070 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
6071 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
6072 	X	python ast branch and pep and http mail python org pipermail python dev september html.
6073 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
6074 	X	this is a summary of traffic on the python dev mailing list from september through september.
6075 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
6076 	X	this is the th summary written by the python dev summary duo of steve bethard and tony meyer i feel like the white rabbit in.
6077 	X	comp lang python thread patch http sourceforge net tracker index phpfunc detail aid group id atid.
6078 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
6079 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
6080 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
6081 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
6082 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
6083 	X	it is intended to inform the wider python community of on going developments on the list on a semi monthly.
6084 	X	items on the list were discussed further with some disagreement about what was.
6085 	X	to contact us please send email.
6086 	X	vendor packages directory http mail python org pipermail python dev september html.
6087 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
6088 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
6089 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
6090 	X	http mail python org pipermail python dev september html.
6091 	X	he pointed out that an implementation would really be needed to prove.
6092 	X	an archive of previous summaries is available.
6093 	X	steve bethard steven bethard at gmail com http gmail com tony meyer tony meyer at gmail com http gmail com.
6094 	X	the idea of a multiprocess module gained a reasonable amount of.
6095 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
6096 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
6097 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
6098 	X	phillip and martin pointed out that preventing any other interaction other than enqueued messages is the difficult part each active object would for example have to have its own sys.
6099 	X	an rss feed of the titles of the summaries is.
6100 	X	do not post to comp lang python if you wish to reach.
6101 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
6102 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
6103 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
6104 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
6105 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
6106 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
6107 	X	you can also watch comp lang python or comp lang python announce for new summaries or through their email gateways of python list or python announce respectively as found at http mail python org.
6108 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
6109 	X	the python software foundation is the non profit organization that holds the intellectual property for.
6110 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
6111 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
6112 	X	python ast branch and pep and http mail python org pipermail python dev september html.
6113 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
6114 	X	this is a summary of traffic on the python dev mailing list from september through september.
6115 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
6116 	X	this is the th summary written by the python dev summary duo of steve bethard and tony meyer i feel like the white rabbit in.
6117 	X	http mail python org pipermail python dev september html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
6118 	X	it also tries to advance the development and use of.
6119 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
6120 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
6121 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
6122 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
6123 	X	it is intended to inform the wider python community of on going developments on the list on a semi monthly.
6124 	X	items on the list were discussed further with some disagreement about what was.
6125 	X	to contact us please send email.
6126 	X	if you find the python dev summary helpful please consider making a.
6127 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
6128 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
6129 	X	http mail python org pipermail python dev september html.
6130 	X	he pointed out that an implementation would really be needed to prove.
6131 	X	an archive of previous summaries is available.
6132 	X	steve bethard steven bethard at gmail com http gmail com tony meyer tony meyer at gmail com http gmail com.
6133 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
6134 	X	you can make a donation at http python org psf donations html.
6135 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
6136 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
6137 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
6138 	X	phillip and martin pointed out that preventing any other interaction other than enqueued messages is the difficult part each active object would for example have to have its own sys.
6139 	X	an rss feed of the titles of the summaries is.
6140 	X	do not post to comp lang python if you wish to reach.
6141 	X	def f x y print x y.
6142 	X	every penny helps so even a small donation with a credit card check or by paypal.
6143 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
6144 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
6145 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
6146 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
6147 	X	you can also watch comp lang python or comp lang python announce for new summaries or through their email gateways of python list or python announce respectively as found at http mail python org.
6148 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
6149 	X	the python software foundation is the non profit organization that holds the intellectual property for.
6150 	X	youd have to write something like.
6151 	X	python ast branch and pep and http mail python org pipermail python dev september html.
6152 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
6153 	X	this is a summary of traffic on the python dev mailing list from september through september.
6154 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
6155 	X	this is the th summary written by the python dev summary duo of steve bethard and tony meyer i feel like the white rabbit in.
6156 	X	http mail python org pipermail python dev september html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
6157 	X	it also tries to advance the development and use of.
6158 	X	def f arg x y arg print x y.
6159 	X	to comment on anything mentioned here just post to comp lang python or email python list at python org which is a gateway to the newsgroup with a subject line mentioning what you are.
6160 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
6161 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
6162 	X	it is intended to inform the wider python community of on going developments on the list on a semi monthly.
6163 	X	items on the list were discussed further with some disagreement about what was.
6164 	X	to contact us please send email.
6165 	X	if you find the python dev summary helpful please consider making a.
6166 	X	brett with help from guido motivated this removal for python by a few factors.
6167 	X	all python dev members are interested in seeing ideas discussed by the community so dont hesitate to take a stance on.
6168 	X	http mail python org pipermail python dev september html.
6169 	X	he pointed out that an implementation would really be needed to prove.
6170 	X	an archive of previous summaries is available.
6171 	X	steve bethard steven bethard at gmail com http gmail com tony meyer tony meyer at gmail com http gmail com.
6172 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
6173 	X	you can make a donation at http python org psf donations html.
6174 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
6175 	X	and if all of this really interests you then get involved and join python dev.
6176 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
6177 	X	phillip and martin pointed out that preventing any other interaction other than enqueued messages is the difficult part each active object would for example have to have its own sys.
6178 	X	an rss feed of the titles of the summaries is.
6179 	X	do not post to comp lang python if you wish to reach.
6180 	X	def f x y print x y.
6181 	X	every penny helps so even a small donation with a credit card check or by paypal.
6182 	X	guido the feature can be difficult to read for some.
6183 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
6184 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
6185 	X	you can also watch comp lang python or comp lang python announce for new summaries or through their email gateways of python list or python announce respectively as found at http mail python org.
6186 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
6187 	X	the python software foundation is the non profit organization that holds the intellectual property for.
6188 	X	youd have to write something like.
6189 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
6190 	X	the in development version of the documentation for python can be found at http www python org dev doc devel and should be used when looking up any documentation for new code otherwise use the current documentation as found at http docs python org.
6191 	X	this is a summary of traffic on the python dev mailing list from september through september.
6192 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
6193 	X	this is the th summary written by the python dev summary duo of steve bethard and tony meyer i feel like the white rabbit in.
6194 	X	http mail python org pipermail python dev september html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
6195 	X	it also tries to advance the development and use of.
6196 	X	def f arg x y arg print x y.
6197 	X	to comment on anything mentioned here just post to comp lang python or email python list at python org which is a gateway to the newsgroup with a subject line mentioning what you are.
6198 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
6199 	X	peps python enhancement proposals are located at http www python org peps.
6200 	X	it is intended to inform the wider python community of on going developments on the list on a semi monthly.
6201 	X	items on the list were discussed further with some disagreement about what was.
6202 	X	to contact us please send email.
6203 	X	if you find the python dev summary helpful please consider making a.
6204 	X	brett with help from guido motivated this removal for python by a few factors.
6205 	X	all python dev members are interested in seeing ideas discussed by the community so dont hesitate to take a stance on.
6206 	X	in general people were undecided on this.
6207 	X	to view files in the python cvs online go to http cvs sourceforge net cgi bin viewcvs cgi python.
6208 	X	an archive of previous summaries is available.
6209 	X	steve bethard steven bethard at gmail com http gmail com tony meyer tony meyer at gmail com http gmail com.
6210 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
6211 	X	you can make a donation at http python org psf donations html.
6212 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
6213 	X	and if all of this really interests you then get involved and join python dev.
6214 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
6215 	X	reported bugs and suggested patches can be found at the sourceforge project.
6216 	X	an rss feed of the titles of the summaries is.
6217 	X	do not post to comp lang python if you wish to reach.
6218 	X	def f x y print x y.
6219 	X	every penny helps so even a small donation with a credit card check or by paypal.
6220 	X	guido the feature can be difficult to read for some.
6221 	X	no decision had been made at the time of the.
6222 	X	please note that this summary is written using restructuredtext.
6223 	X	you can also watch comp lang python or comp lang python announce for new summaries or through their email gateways of python list or python announce respectively as found at http mail python org.
6224 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
6225 	X	the python software foundation is the non profit organization that holds the intellectual property for.
6226 	X	youd have to write something like.
6227 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
6228 	X	the in development version of the documentation for python can be found at http www python org dev doc devel and should be used when looking up any documentation for new code otherwise use the current documentation as found at http docs python org.
6229 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
6230 	X	any unfamiliar punctuation is probably markup for rest otherwise it is probably regular expression syntax or a typo you can safely ignore.
6231 	X	this is the th summary written by the python dev summary duo of steve bethard and tony meyer i feel like the white rabbit in.
6232 	X	http mail python org pipermail python dev september html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
6233 	X	it also tries to advance the development and use of.
6234 	X	def f arg x y arg print x y.
6235 	X	to comment on anything mentioned here just post to comp lang python or email python list at python org which is a gateway to the newsgroup with a subject line mentioning what you are.
6236 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
6237 	X	peps python enhancement proposals are located at http www python org peps.
6238 	X	evaluating iterators in a boolean context.
6239 	X	we do suggest learning rest though its simple and is accepted for pep markup and can be turned into many different formats like html and.
6240 	X	to contact us please send email.
6241 	X	if you find the python dev summary helpful please consider making a.
6242 	X	brett with help from guido motivated this removal for python by a few factors.
6243 	X	all python dev members are interested in seeing ideas discussed by the community so dont hesitate to take a stance on.
6244 	X	in general people were undecided on this.
6245 	X	to view files in the python cvs online go to http cvs sourceforge net cgi bin viewcvs cgi python.
6246 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
6247 	X	unfortunately even though rest is standardized the wonders of programs that like to reformat text do not allow us to guarantee you will be able to run the text version of this summary through docutils as is unless it is from the original text file.
6248 	X	steve bethard steven bethard at gmail com http gmail com tony meyer tony meyer at gmail com http gmail com.
6249 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
6250 	X	you can make a donation at http python org psf donations html.
6251 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
6252 	X	and if all of this really interests you then get involved and join python dev.
6253 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
6254 	X	reported bugs and suggested patches can be found at the sourceforge project.
6255 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
6256 	X	comp lang python pep markup http www python org peps pep html.
6257 	X	do not post to comp lang python if you wish to reach.
6258 	X	def f x y print x y.
6259 	X	every penny helps so even a small donation with a credit card check or by paypal.
6260 	X	guido the feature can be difficult to read for some.
6261 	X	no decision had been made at the time of the.
6262 	X	please note that this summary is written using restructuredtext.
6263 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
6264 	X	docutils http docutils sf net rest restructuredtext http docutils sf net rst html psf python software foundation http python org psf.
6265 	X	the python software foundation is the non profit organization that holds the intellectual property for.
6266 	X	youd have to write something like.
6267 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
6268 	X	the in development version of the documentation for python can be found at http www python org dev doc devel and should be used when looking up any documentation for new code otherwise use the current documentation as found at http docs python org.
6269 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
6270 	X	any unfamiliar punctuation is probably markup for rest otherwise it is probably regular expression syntax or a typo you can safely ignore.
6271 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
6272 	X	it also tries to advance the development and use of.
6273 	X	def f arg x y arg print x y.
6274 	X	to comment on anything mentioned here just post to comp lang python or email python list at python org which is a gateway to the newsgroup with a subject line mentioning what you are.
6275 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
6276 	X	peps python enhancement proposals are located at http www python org peps.
6277 	X	evaluating iterators in a boolean context.
6278 	X	we do suggest learning rest though its simple and is accepted for pep markup and can be turned into many different formats like html and.
6279 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
6280 	X	if you find the python dev summary helpful please consider making a.
6281 	X	brett with help from guido motivated this removal for python by a few factors.
6282 	X	all python dev members are interested in seeing ideas discussed by the community so dont hesitate to take a stance on.
6283 	X	in general people were undecided on this.
6284 	X	to view files in the python cvs online go to http cvs sourceforge net cgi bin viewcvs cgi python.
6285 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
6286 	X	unfortunately even though rest is standardized the wonders of programs that like to reformat text do not allow us to guarantee you will be able to run the text version of this summary through docutils as is unless it is from the original text file.
6287 	X	testing for none http www python org peps pep html testing for none.
6288 	X	you can make a donation at http python org psf donations html.
6289 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
6290 	X	and if all of this really interests you then get involved and join python dev.
6291 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
6292 	X	reported bugs and suggested patches can be found at the sourceforge project.
6293 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
6294 	X	comp lang python pep markup http www python org peps pep html.
6295 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and http mail python org pipermail python dev september html.
6296 	X	every penny helps so even a small donation with a credit card check or by paypal.
6297 	X	guido the feature can be difficult to read for some.
6298 	X	no decision had been made at the time of the.
6299 	X	please note that this summary is written using restructuredtext.
6300 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
6301 	X	docutils http docutils sf net rest restructuredtext http docutils sf net rst html psf python software foundation http python org psf.
6302 	X	properties that only call the getter function once.
6303 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
6304 	X	the in development version of the documentation for python can be found at http www python org dev doc devel and should be used when looking up any documentation for new code otherwise use the current documentation as found at http docs python org.
6305 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
6306 	X	any unfamiliar punctuation is probably markup for rest otherwise it is probably regular expression syntax or a typo you can safely ignore.
6307 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
6308 	X	the html version of this summary will be available at http www python org dev summary html.
6309 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
6310 	X	to comment on anything mentioned here just post to comp lang python or email python list at python org which is a gateway to the newsgroup with a subject line mentioning what you are.
6311 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
6312 	X	peps python enhancement proposals are located at http www python org peps.
6313 	X	evaluating iterators in a boolean context.
6314 	X	we do suggest learning rest though its simple and is accepted for pep markup and can be turned into many different formats like html and.
6315 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
6316 	X	all python dev members are interested in seeing ideas discussed by the community so dont hesitate to take a stance on.
6317 	X	in general people were undecided on this.
6318 	X	to view files in the python cvs online go to http cvs sourceforge net cgi bin viewcvs cgi python.
6319 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
6320 	X	unfortunately even though rest is standardized the wonders of programs that like to reformat text do not allow us to guarantee you will be able to run the text version of this summary through docutils as is unless it is from the original text file.
6321 	X	testing for none http www python org peps pep html testing for none.
6322 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
6323 	X	def eggs self expensive computation of eggs.
6324 	X	and if all of this really interests you then get involved and join python dev.
6325 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
6326 	X	reported bugs and suggested patches can be found at the sourceforge project.
6327 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
6328 	X	comp lang python pep markup http www python org peps pep html.
6329 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and http mail python org pipermail python dev september html.
6330 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
6331 	X	no decision had been made at the time of the.
6332 	X	please note that this summary is written using restructuredtext.
6333 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
6334 	X	docutils http docutils sf net rest restructuredtext http docutils sf net rst html psf python software foundation http python org psf.
6335 	X	properties that only call the getter function once.
6336 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
6337 	X	would only do the eggs computation.
6338 	X	the in development version of the documentation for python can be found at http www python org dev doc devel and should be used when looking up any documentation for new code otherwise use the current documentation as found at http docs python org.
6339 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
6340 	X	any unfamiliar punctuation is probably markup for rest otherwise it is probably regular expression syntax or a typo you can safely ignore.
6341 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
6342 	X	the html version of this summary will be available at http www python org dev summary html.
6343 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
6344 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
6345 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
6346 	X	peps python enhancement proposals are located at http www python org peps.
6347 	X	evaluating iterators in a boolean context.
6348 	X	we do suggest learning rest though its simple and is accepted for pep markup and can be turned into many different formats like html and.
6349 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
6350 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
6351 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
6352 	X	to view files in the python cvs online go to http cvs sourceforge net cgi bin viewcvs cgi python.
6353 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
6354 	X	unfortunately even though rest is standardized the wonders of programs that like to reformat text do not allow us to guarantee you will be able to run the text version of this summary through docutils as is unless it is from the original text file.
6355 	X	testing for none http www python org peps pep html testing for none.
6356 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
6357 	X	def eggs self expensive computation of eggs.
6358 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
6359 	X	rfc readproperty http mail python org pipermail python dev september html.
6360 	X	reported bugs and suggested patches can be found at the sourceforge project.
6361 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
6362 	X	comp lang python pep markup http www python org peps pep html.
6363 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and http mail python org pipermail python dev september html.
6364 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
6365 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
6366 	X	please note that this summary is written using restructuredtext.
6367 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
6368 	X	docutils http docutils sf net rest restructuredtext http docutils sf net rst html psf python software foundation http python org psf.
6369 	X	properties that only call the getter function once.
6370 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
6371 	X	would only do the eggs computation.
6372 	X	we need to leave the syntax to.
6373 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
6374 	X	any unfamiliar punctuation is probably markup for rest otherwise it is probably regular expression syntax or a typo you can safely ignore.
6375 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
6376 	X	the html version of this summary will be available at http www python org dev summary html.
6377 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
6378 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
6379 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
6380 	X	weve already proved that we cant as a community agree on a.
6381 	X	some suggestions were made many of which micah integrated into the.
6382 	X	we do suggest learning rest though its simple and is accepted for pep markup and can be turned into many different formats like html and.
6383 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
6384 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
6385 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
6386 	X	thats what we have a bdfl.
6387 	X	the suggestion was made that an implementation should precede approval of the.
6388 	X	unfortunately even though rest is standardized the wonders of programs that like to reformat text do not allow us to guarantee you will be able to run the text version of this summary through docutils as is unless it is from the original text file.
6389 	X	testing for none http www python org peps pep html testing for none.
6390 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
6391 	X	def eggs self expensive computation of eggs.
6392 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
6393 	X	rfc readproperty http mail python org pipermail python dev september html.
6394 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
6395 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
6396 	X	comp lang python pep markup http www python org peps pep html.
6397 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and http mail python org pipermail python dev september html.
6398 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
6399 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
6400 	X	codetags pep http python org peps pep html.
6401 	X	docutils http docutils sf net rest restructuredtext http docutils sf net rst html psf python software foundation http python org psf.
6402 	X	properties that only call the getter function once.
6403 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
6404 	X	would only do the eggs computation.
6405 	X	we need to leave the syntax to.
6406 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
6407 	X	martin v lwis discovered that a little more than a mib could be saved in the size of python installer by using lzx instead of the standard mszip when compressing the cab.
6408 	X	pep codetags http mail python org pipermail python dev september html.
6409 	X	the html version of this summary will be available at http www python org dev summary html.
6410 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
6411 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
6412 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
6413 	X	weve already proved that we cant as a community agree on a.
6414 	X	some suggestions were made many of which micah integrated into the.
6415 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
6416 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
6417 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
6418 	X	thats what we have a bdfl.
6419 	X	the suggestion was made that an implementation should precede approval of the.
6420 	X	mib http en wikipedia org wiki mibibyte.
6421 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
6422 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
6423 	X	def eggs self expensive computation of eggs.
6424 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
6425 	X	rfc readproperty http mail python org pipermail python dev september html.
6426 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
6427 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
6428 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
6429 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
6430 	X	codetags pep http python org peps pep html.
6431 	X	http mail python org pipermail python dev september html.
6432 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
6433 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
6434 	X	would only do the eggs computation.
6435 	X	we need to leave the syntax to.
6436 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
6437 	X	martin v lwis discovered that a little more than a mib could be saved in the size of python installer by using lzx instead of the standard mszip when compressing the cab.
6438 	X	pep codetags http mail python org pipermail python dev september html.
6439 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and response guido suggested that that the conditional expression discussion of pep be.
6440 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivated from the key and its current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
6441 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
6442 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
6443 	X	weve already proved that we cant as a community agree on a.
6444 	X	some suggestions were made many of which micah integrated into the.
6445 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
6446 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
6447 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
6448 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
6449 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
6450 	X	thats what we have a bdfl.
6451 	X	the suggestion was made that an implementation should precede approval of the.
6452 	X	mib http en wikipedia org wiki mibibyte.
6453 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
6454 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
6455 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
6456 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
6457 	X	rfc readproperty http mail python org pipermail python dev september html.
6458 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
6459 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
6460 	X	although it has not been implemented yet the plan is for it to appear in python.
6461 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
6462 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
6463 	X	codetags pep http python org peps pep html.
6464 	X	http mail python org pipermail python dev september html.
6465 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
6466 	X	pep http www python org peps pep html.
6467 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
6468 	X	we need to leave the syntax to.
6469 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
6470 	X	martin v lwis discovered that a little more than a mib could be saved in the size of python installer by using lzx instead of the standard mszip when compressing the cab.
6471 	X	pep codetags http mail python org pipermail python dev september html.
6472 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and response guido suggested that that the conditional expression discussion of pep be.
6473 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivated from the key and its current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
6474 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
6475 	X	experimenting with this http pitrou net python sets.
6476 	X	weve already proved that we cant as a community agree on a.
6477 	X	some suggestions were made many of which micah integrated into the.
6478 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
6479 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
6480 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
6481 	X	c coding experiment http mail python org pipermail python dev september html.
6482 	X	thats what we have a bdfl.
6483 	X	the suggestion was made that an implementation should precede approval of the.
6484 	X	mib http en wikipedia org wiki mibibyte.
6485 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
6486 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
6487 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
6488 	X	once again the subject of removing the global interpreter lock gil came.
6489 	X	nathan bullock suggested a relpath path a path b addition to os paththat returns a relative path from path a to path b.
6490 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
6491 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
6492 	X	although it has not been implemented yet the plan is for it to appear in python.
6493 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
6494 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
6495 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
6496 	X	codetags pep http python org peps pep html.
6497 	X	http mail python org pipermail python dev september html.
6498 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
6499 	X	pep http www python org peps pep html.
6500 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
6501 	X	this kicked off several long threads about multi processor.
6502 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
6503 	X	martin v lwis discovered that a little more than a mib could be saved in the size of python installer by using lzx instead of the standard mszip when compressing the cab.
6504 	X	pep codetags http mail python org pipermail python dev september html.
6505 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and response guido suggested that that the conditional expression discussion of pep be.
6506 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivated from the key and its current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
6507 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
6508 	X	experimenting with this http pitrou net python sets.
6509 	X	a long time ago circa python greg stein experimented with free threading which did yield around a times speedup on a dual processor.
6510 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
6511 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
6512 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
6513 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
6514 	X	c coding experiment http mail python org pipermail python dev september html.
6515 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
6516 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
6517 	X	mib http en wikipedia org wiki mibibyte.
6518 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
6519 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
6520 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
6521 	X	once again the subject of removing the global interpreter lock gil came.
6522 	X	nathan bullock suggested a relpath path a path b addition to os paththat returns a relative path from path a to path b.
6523 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
6524 	X	although it has not been implemented yet the plan is for it to appear in python.
6525 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
6526 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
6527 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
6528 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
6529 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
6530 	X	http mail python org pipermail python dev september html.
6531 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
6532 	X	pep http www python org peps pep html.
6533 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
6534 	X	this kicked off several long threads about multi processor.
6535 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
6536 	X	with the threaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
6537 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
6538 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and response guido suggested that that the conditional expression discussion of pep be.
6539 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivated from the key and its current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
6540 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
6541 	X	experimenting with this http pitrou net python sets.
6542 	X	a long time ago circa python greg stein experimented with free threading which did yield around a times speedup on a dual processor.
6543 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
6544 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
6545 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
6546 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
6547 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
6548 	X	c coding experiment http mail python org pipermail python dev september html.
6549 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
6550 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
6551 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
6552 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
6553 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
6554 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
6555 	X	once again the subject of removing the global interpreter lock gil came.
6556 	X	nathan bullock suggested a relpath path a path b addition to os paththat returns a relative path from path a to path b.
6557 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
6558 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
6559 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
6560 	X	although it has not been implemented yet the plan is for it to appear in python.
6561 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
6562 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
6563 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
6564 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
6565 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
6566 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
6567 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
6568 	X	pep http www python org peps pep html.
6569 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
6570 	X	this kicked off several long threads about multi processor.
6571 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
6572 	X	with the threaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
6573 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
6574 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
6575 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
6576 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
6577 	X	experimenting with this http pitrou net python sets.
6578 	X	a long time ago circa python greg stein experimented with free threading which did yield around a times speedup on a dual processor.
6579 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
6580 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
6581 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
6582 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
6583 	X	comp lang python thread patch http sourceforge net tracker index phpfunc detail aid group id atid.
6584 	X	c coding experiment http mail python org pipermail python dev september html.
6585 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
6586 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
6587 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
6588 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
6589 	X	these all favour multi processing over multi.
6590 	X	vendor packages directory http mail python org pipermail python dev september html.
6591 	X	once again the subject of removing the global interpreter lock gil came.
6592 	X	nathan bullock suggested a relpath path a path b addition to os paththat returns a relative path from path a to path b.
6593 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
6594 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
6595 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
6596 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
6597 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
6598 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
6599 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
6600 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
6601 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
6602 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
6603 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
6604 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
6605 	X	this kicked off several long threads about multi processor.
6606 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
6607 	X	with the threaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
6608 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
6609 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
6610 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
6611 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
6612 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
6613 	X	a long time ago circa python greg stein experimented with free threading which did yield around a times speedup on a dual processor.
6614 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
6615 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
6616 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
6617 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
6618 	X	comp lang python thread patch http sourceforge net tracker index phpfunc detail aid group id atid.
6619 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
6620 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
6621 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
6622 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
6623 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
6624 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
6625 	X	these all favour multi processing over multi.
6626 	X	vendor packages directory http mail python org pipermail python dev september html.
6627 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
6628 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
6629 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
6630 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
6631 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
6632 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
6633 	X	the idea of a multiprocess module gained a reasonable amount of.
6634 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
6635 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
6636 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
6637 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
6638 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
6639 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
6640 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
6641 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
6642 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
6643 	X	with the threaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
6644 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
6645 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
6646 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
6647 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
6648 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
6649 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
6650 	X	python ast branch and pep and http mail python org pipermail python dev september html.
6651 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
6652 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
6653 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
6654 	X	comp lang python thread patch http sourceforge net tracker index phpfunc detail aid group id atid.
6655 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
6656 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
6657 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
6658 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
6659 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
6660 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
6661 	X	these all favour multi processing over multi.
6662 	X	vendor packages directory http mail python org pipermail python dev september html.
6663 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
6664 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
6665 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
6666 	X	http mail python org pipermail python dev september html.
6667 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
6668 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
6669 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
6670 	X	the idea of a multiprocess module gained a reasonable amount of.
6671 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
6672 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
6673 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
6674 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
6675 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
6676 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
6677 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
6678 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
6679 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
6680 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
6681 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
6682 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
6683 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
6684 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
6685 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
6686 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
6687 	X	python ast branch and pep and http mail python org pipermail python dev september html.
6688 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
6689 	X	this is a summary of traffic on the python dev mailing list from september through september.
6690 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
6691 	X	comp lang python thread patch http sourceforge net tracker index phpfunc detail aid group id atid.
6692 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
6693 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
6694 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
6695 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
6696 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
6697 	X	it is intended to inform the wider python community of on going developments on the list on a semi monthly.
6698 	X	these all favour multi processing over multi.
6699 	X	vendor packages directory http mail python org pipermail python dev september html.
6700 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
6701 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
6702 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
6703 	X	http mail python org pipermail python dev september html.
6704 	X	he pointed out that an implementation would really be needed to prove.
6705 	X	an archive of previous summaries is available.
6706 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
6707 	X	the idea of a multiprocess module gained a reasonable amount of.
6708 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
6709 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
6710 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
6711 	X	phillip and martin pointed out that preventing any other interaction other than enqueued messages is the difficult part each active object would for example have to have its own sys.
6712 	X	an rss feed of the titles of the summaries is.
6713 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
6714 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
6715 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
6716 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
6717 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
6718 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
6719 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
6720 	X	you can also watch comp lang python or comp lang python announce for new summaries or through their email gateways of python list or python announce respectively as found at http mail python org.
6721 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
6722 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
6723 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
6724 	X	python ast branch and pep and http mail python org pipermail python dev september html.
6725 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
6726 	X	this is a summary of traffic on the python dev mailing list from september through september.
6727 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
6728 	X	this is the th summary written by the python dev summary duo of steve bethard and tony meyer i feel like the white rabbit in.
6729 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
6730 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
6731 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
6732 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
6733 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
6734 	X	it is intended to inform the wider python community of on going developments on the list on a semi monthly.
6735 	X	items on the list were discussed further with some disagreement about what was.
6736 	X	to contact us please send email.
6737 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
6738 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
6739 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
6740 	X	http mail python org pipermail python dev september html.
6741 	X	he pointed out that an implementation would really be needed to prove.
6742 	X	an archive of previous summaries is available.
6743 	X	steve bethard steven bethard at gmail com http gmail com tony meyer tony meyer at gmail com http gmail com.
6744 	X	the idea of a multiprocess module gained a reasonable amount of.
6745 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
6746 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
6747 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
6748 	X	phillip and martin pointed out that preventing any other interaction other than enqueued messages is the difficult part each active object would for example have to have its own sys.
6749 	X	an rss feed of the titles of the summaries is.
6750 	X	do not post to comp lang python if you wish to reach.
6751 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
6752 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
6753 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
6754 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
6755 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
6756 	X	you can also watch comp lang python or comp lang python announce for new summaries or through their email gateways of python list or python announce respectively as found at http mail python org.
6757 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
6758 	X	the python software foundation is the non profit organization that holds the intellectual property for.
6759 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
6760 	X	python ast branch and pep and http mail python org pipermail python dev september html.
6761 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
6762 	X	this is a summary of traffic on the python dev mailing list from september through september.
6763 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
6764 	X	this is the th summary written by the python dev summary duo of steve bethard and tony meyer i feel like the white rabbit in.
6765 	X	http mail python org pipermail python dev september html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
6766 	X	it also tries to advance the development and use of.
6767 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
6768 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
6769 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
6770 	X	it is intended to inform the wider python community of on going developments on the list on a semi monthly.
6771 	X	items on the list were discussed further with some disagreement about what was.
6772 	X	to contact us please send email.
6773 	X	if you find the python dev summary helpful please consider making a.
6774 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
6775 	X	http mail python org pipermail python dev september html.
6776 	X	he pointed out that an implementation would really be needed to prove.
6777 	X	an archive of previous summaries is available.
6778 	X	steve bethard steven bethard at gmail com http gmail com tony meyer tony meyer at gmail com http gmail com.
6779 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
6780 	X	you can make a donation at http python org psf donations html.
6781 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
6782 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
6783 	X	phillip and martin pointed out that preventing any other interaction other than enqueued messages is the difficult part each active object would for example have to have its own sys.
6784 	X	an rss feed of the titles of the summaries is.
6785 	X	do not post to comp lang python if you wish to reach.
6786 	X	def f x y print x y.
6787 	X	every penny helps so even a small donation with a credit card check or by paypal.
6788 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
6789 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
6790 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
6791 	X	you can also watch comp lang python or comp lang python announce for new summaries or through their email gateways of python list or python announce respectively as found at http mail python org.
6792 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
6793 	X	the python software foundation is the non profit organization that holds the intellectual property for.
6794 	X	youd have to write something like.
6795 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
6796 	X	this is a summary of traffic on the python dev mailing list from september through september.
6797 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
6798 	X	this is the th summary written by the python dev summary duo of steve bethard and tony meyer i feel like the white rabbit in.
6799 	X	http mail python org pipermail python dev september html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
6800 	X	it also tries to advance the development and use of.
6801 	X	def f arg x y arg print x y.
6802 	X	to comment on anything mentioned here just post to comp lang python or email python list at python org which is a gateway to the newsgroup with a subject line mentioning what you are.
6803 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
6804 	X	it is intended to inform the wider python community of on going developments on the list on a semi monthly.
6805 	X	items on the list were discussed further with some disagreement about what was.
6806 	X	to contact us please send email.
6807 	X	if you find the python dev summary helpful please consider making a.
6808 	X	brett with help from guido motivated this removal for python by a few factors.
6809 	X	all python dev members are interested in seeing ideas discussed by the community so dont hesitate to take a stance on.
6810 	X	he pointed out that an implementation would really be needed to prove.
6811 	X	an archive of previous summaries is available.
6812 	X	steve bethard steven bethard at gmail com http gmail com tony meyer tony meyer at gmail com http gmail com.
6813 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
6814 	X	you can make a donation at http python org psf donations html.
6815 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
6816 	X	and if all of this really interests you then get involved and join python dev.
6817 	X	phillip and martin pointed out that preventing any other interaction other than enqueued messages is the difficult part each active object would for example have to have its own sys.
6818 	X	an rss feed of the titles of the summaries is.
6819 	X	do not post to comp lang python if you wish to reach.
6820 	X	def f x y print x y.
6821 	X	every penny helps so even a small donation with a credit card check or by paypal.
6822 	X	guido the feature can be difficult to read for some.
6823 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
6824 	X	you can also watch comp lang python or comp lang python announce for new summaries or through their email gateways of python list or python announce respectively as found at http mail python org.
6825 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
6826 	X	the python software foundation is the non profit organization that holds the intellectual property for.
6827 	X	youd have to write something like.
6828 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
6829 	X	the in development version of the documentation for python can be found at http www python org dev doc devel and should be used when looking up any documentation for new code otherwise use the current documentation as found at http docs python org.
6830 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
6831 	X	this is the th summary written by the python dev summary duo of steve bethard and tony meyer i feel like the white rabbit in.
6832 	X	http mail python org pipermail python dev september html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
6833 	X	it also tries to advance the development and use of.
6834 	X	def f arg x y arg print x y.
6835 	X	to comment on anything mentioned here just post to comp lang python or email python list at python org which is a gateway to the newsgroup with a subject line mentioning what you are.
6836 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
6837 	X	peps python enhancement proposals are located at http www python org peps.
6838 	X	items on the list were discussed further with some disagreement about what was.
6839 	X	to contact us please send email.
6840 	X	if you find the python dev summary helpful please consider making a.
6841 	X	brett with help from guido motivated this removal for python by a few factors.
6842 	X	all python dev members are interested in seeing ideas discussed by the community so dont hesitate to take a stance on.
6843 	X	in general people were undecided on this.
6844 	X	to view files in the python cvs online go to http cvs sourceforge net cgi bin viewcvs cgi python.
6845 	X	steve bethard steven bethard at gmail com http gmail com tony meyer tony meyer at gmail com http gmail com.
6846 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
6847 	X	you can make a donation at http python org psf donations html.
6848 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
6849 	X	and if all of this really interests you then get involved and join python dev.
6850 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
6851 	X	reported bugs and suggested patches can be found at the sourceforge project.
6852 	X	do not post to comp lang python if you wish to reach.
6853 	X	def f x y print x y.
6854 	X	every penny helps so even a small donation with a credit card check or by paypal.
6855 	X	guido the feature can be difficult to read for some.
6856 	X	no decision had been made at the time of the.
6857 	X	please note that this summary is written using restructuredtext.
6858 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
6859 	X	the python software foundation is the non profit organization that holds the intellectual property for.
6860 	X	youd have to write something like.
6861 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
6862 	X	the in development version of the documentation for python can be found at http www python org dev doc devel and should be used when looking up any documentation for new code otherwise use the current documentation as found at http docs python org.
6863 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
6864 	X	any unfamiliar punctuation is probably markup for rest otherwise it is probably regular expression syntax or a typo you can safely ignore.
6865 	X	http mail python org pipermail python dev september html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
6866 	X	it also tries to advance the development and use of.
6867 	X	def f arg x y arg print x y.
6868 	X	to comment on anything mentioned here just post to comp lang python or email python list at python org which is a gateway to the newsgroup with a subject line mentioning what you are.
6869 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
6870 	X	peps python enhancement proposals are located at http www python org peps.
6871 	X	evaluating iterators in a boolean context.
6872 	X	we do suggest learning rest though its simple and is accepted for pep markup and can be turned into many different formats like html and.
6873 	X	if you find the python dev summary helpful please consider making a.
6874 	X	brett with help from guido motivated this removal for python by a few factors.
6875 	X	all python dev members are interested in seeing ideas discussed by the community so dont hesitate to take a stance on.
6876 	X	in general people were undecided on this.
6877 	X	to view files in the python cvs online go to http cvs sourceforge net cgi bin viewcvs cgi python.
6878 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
6879 	X	unfortunately even though rest is standardized the wonders of programs that like to reformat text do not allow us to guarantee you will be able to run the text version of this summary through docutils as is unless it is from the original text file.
6880 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
6881 	X	you can make a donation at http python org psf donations html.
6882 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
6883 	X	and if all of this really interests you then get involved and join python dev.
6884 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
6885 	X	reported bugs and suggested patches can be found at the sourceforge project.
6886 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
6887 	X	comp lang python pep markup http www python org peps pep html.
6888 	X	def f x y print x y.
6889 	X	every penny helps so even a small donation with a credit card check or by paypal.
6890 	X	guido the feature can be difficult to read for some.
6891 	X	no decision had been made at the time of the.
6892 	X	please note that this summary is written using restructuredtext.
6893 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
6894 	X	docutils http docutils sf net rest restructuredtext http docutils sf net rst html psf python software foundation http python org psf.
6895 	X	youd have to write something like.
6896 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
6897 	X	the in development version of the documentation for python can be found at http www python org dev doc devel and should be used when looking up any documentation for new code otherwise use the current documentation as found at http docs python org.
6898 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
6899 	X	any unfamiliar punctuation is probably markup for rest otherwise it is probably regular expression syntax or a typo you can safely ignore.
6900 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
6901 	X	the html version of this summary will be available at http www python org dev summary html.
6902 	X	def f arg x y arg print x y.
6903 	X	to comment on anything mentioned here just post to comp lang python or email python list at python org which is a gateway to the newsgroup with a subject line mentioning what you are.
6904 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
6905 	X	peps python enhancement proposals are located at http www python org peps.
6906 	X	evaluating iterators in a boolean context.
6907 	X	we do suggest learning rest though its simple and is accepted for pep markup and can be turned into many different formats like html and.
6908 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
6909 	X	brett with help from guido motivated this removal for python by a few factors.
6910 	X	all python dev members are interested in seeing ideas discussed by the community so dont hesitate to take a stance on.
6911 	X	in general people were undecided on this.
6912 	X	to view files in the python cvs online go to http cvs sourceforge net cgi bin viewcvs cgi python.
6913 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
6914 	X	unfortunately even though rest is standardized the wonders of programs that like to reformat text do not allow us to guarantee you will be able to run the text version of this summary through docutils as is unless it is from the original text file.
6915 	X	testing for none http www python org peps pep html testing for none.
6916 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
6917 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
6918 	X	and if all of this really interests you then get involved and join python dev.
6919 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
6920 	X	reported bugs and suggested patches can be found at the sourceforge project.
6921 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
6922 	X	comp lang python pep markup http www python org peps pep html.
6923 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and http mail python org pipermail python dev september html.
6924 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
6925 	X	guido the feature can be difficult to read for some.
6926 	X	no decision had been made at the time of the.
6927 	X	please note that this summary is written using restructuredtext.
6928 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
6929 	X	docutils http docutils sf net rest restructuredtext http docutils sf net rst html psf python software foundation http python org psf.
6930 	X	properties that only call the getter function once.
6931 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
6932 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
6933 	X	the in development version of the documentation for python can be found at http www python org dev doc devel and should be used when looking up any documentation for new code otherwise use the current documentation as found at http docs python org.
6934 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
6935 	X	any unfamiliar punctuation is probably markup for rest otherwise it is probably regular expression syntax or a typo you can safely ignore.
6936 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
6937 	X	the html version of this summary will be available at http www python org dev summary html.
6938 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
6939 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
6940 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
6941 	X	peps python enhancement proposals are located at http www python org peps.
6942 	X	evaluating iterators in a boolean context.
6943 	X	we do suggest learning rest though its simple and is accepted for pep markup and can be turned into many different formats like html and.
6944 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
6945 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
6946 	X	in general people were undecided on this.
6947 	X	to view files in the python cvs online go to http cvs sourceforge net cgi bin viewcvs cgi python.
6948 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
6949 	X	unfortunately even though rest is standardized the wonders of programs that like to reformat text do not allow us to guarantee you will be able to run the text version of this summary through docutils as is unless it is from the original text file.
6950 	X	testing for none http www python org peps pep html testing for none.
6951 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
6952 	X	def eggs self expensive computation of eggs.
6953 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
6954 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
6955 	X	reported bugs and suggested patches can be found at the sourceforge project.
6956 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
6957 	X	comp lang python pep markup http www python org peps pep html.
6958 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and http mail python org pipermail python dev september html.
6959 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
6960 	X	no decision had been made at the time of the.
6961 	X	please note that this summary is written using restructuredtext.
6962 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
6963 	X	docutils http docutils sf net rest restructuredtext http docutils sf net rst html psf python software foundation http python org psf.
6964 	X	properties that only call the getter function once.
6965 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
6966 	X	would only do the eggs computation.
6967 	X	we need to leave the syntax to.
6968 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
6969 	X	any unfamiliar punctuation is probably markup for rest otherwise it is probably regular expression syntax or a typo you can safely ignore.
6970 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
6971 	X	the html version of this summary will be available at http www python org dev summary html.
6972 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
6973 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
6974 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
6975 	X	weve already proved that we cant as a community agree on a.
6976 	X	evaluating iterators in a boolean context.
6977 	X	we do suggest learning rest though its simple and is accepted for pep markup and can be turned into many different formats like html and.
6978 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
6979 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
6980 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
6981 	X	thats what we have a bdfl.
6982 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
6983 	X	unfortunately even though rest is standardized the wonders of programs that like to reformat text do not allow us to guarantee you will be able to run the text version of this summary through docutils as is unless it is from the original text file.
6984 	X	testing for none http www python org peps pep html testing for none.
6985 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
6986 	X	def eggs self expensive computation of eggs.
6987 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
6988 	X	rfc readproperty http mail python org pipermail python dev september html.
6989 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
6990 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
6991 	X	comp lang python pep markup http www python org peps pep html.
6992 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and http mail python org pipermail python dev september html.
6993 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
6994 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
6995 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
6996 	X	docutils http docutils sf net rest restructuredtext http docutils sf net rst html psf python software foundation http python org psf.
6997 	X	properties that only call the getter function once.
6998 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
6999 	X	would only do the eggs computation.
7000 	X	we need to leave the syntax to.
7001 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
7002 	X	martin v lwis discovered that a little more than a mib could be saved in the size of python installer by using lzx instead of the standard mszip when compressing the cab.
7003 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
7004 	X	the html version of this summary will be available at http www python org dev summary html.
7005 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
7006 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
7007 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
7008 	X	weve already proved that we cant as a community agree on a.
7009 	X	some suggestions were made many of which micah integrated into the.
7010 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
7011 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
7012 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
7013 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
7014 	X	thats what we have a bdfl.
7015 	X	the suggestion was made that an implementation should precede approval of the.
7016 	X	mib http en wikipedia org wiki mibibyte.
7017 	X	testing for none http www python org peps pep html testing for none.
7018 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
7019 	X	def eggs self expensive computation of eggs.
7020 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
7021 	X	rfc readproperty http mail python org pipermail python dev september html.
7022 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
7023 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
7024 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and http mail python org pipermail python dev september html.
7025 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
7026 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
7027 	X	codetags pep http python org peps pep html.
7028 	X	http mail python org pipermail python dev september html.
7029 	X	properties that only call the getter function once.
7030 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
7031 	X	would only do the eggs computation.
7032 	X	we need to leave the syntax to.
7033 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
7034 	X	martin v lwis discovered that a little more than a mib could be saved in the size of python installer by using lzx instead of the standard mszip when compressing the cab.
7035 	X	pep codetags http mail python org pipermail python dev september html.
7036 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and response guido suggested that that the conditional expression discussion of pep be.
7037 	X	the html version of this summary will be available at http www python org dev summary html.
7038 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
7039 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
7040 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
7041 	X	weve already proved that we cant as a community agree on a.
7042 	X	some suggestions were made many of which micah integrated into the.
7043 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
7044 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
7045 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
7046 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
7047 	X	thats what we have a bdfl.
7048 	X	the suggestion was made that an implementation should precede approval of the.
7049 	X	mib http en wikipedia org wiki mibibyte.
7050 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
7051 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
7052 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
7053 	X	def eggs self expensive computation of eggs.
7054 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
7055 	X	rfc readproperty http mail python org pipermail python dev september html.
7056 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
7057 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
7058 	X	although it has not been implemented yet the plan is for it to appear in python.
7059 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
7060 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
7061 	X	codetags pep http python org peps pep html.
7062 	X	http mail python org pipermail python dev september html.
7063 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
7064 	X	pep http www python org peps pep html.
7065 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
7066 	X	would only do the eggs computation.
7067 	X	we need to leave the syntax to.
7068 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
7069 	X	martin v lwis discovered that a little more than a mib could be saved in the size of python installer by using lzx instead of the standard mszip when compressing the cab.
7070 	X	pep codetags http mail python org pipermail python dev september html.
7071 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and response guido suggested that that the conditional expression discussion of pep be.
7072 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivated from the key and its current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
7073 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
7074 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
7075 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
7076 	X	weve already proved that we cant as a community agree on a.
7077 	X	some suggestions were made many of which micah integrated into the.
7078 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
7079 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
7080 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
7081 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
7082 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
7083 	X	thats what we have a bdfl.
7084 	X	the suggestion was made that an implementation should precede approval of the.
7085 	X	mib http en wikipedia org wiki mibibyte.
7086 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
7087 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
7088 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
7089 	X	once again the subject of removing the global interpreter lock gil came.
7090 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
7091 	X	rfc readproperty http mail python org pipermail python dev september html.
7092 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
7093 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
7094 	X	although it has not been implemented yet the plan is for it to appear in python.
7095 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
7096 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
7097 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
7098 	X	codetags pep http python org peps pep html.
7099 	X	http mail python org pipermail python dev september html.
7100 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
7101 	X	pep http www python org peps pep html.
7102 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
7103 	X	this kicked off several long threads about multi processor.
7104 	X	we need to leave the syntax to.
7105 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
7106 	X	martin v lwis discovered that a little more than a mib could be saved in the size of python installer by using lzx instead of the standard mszip when compressing the cab.
7107 	X	pep codetags http mail python org pipermail python dev september html.
7108 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and response guido suggested that that the conditional expression discussion of pep be.
7109 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivated from the key and its current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
7110 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
7111 	X	experimenting with this http pitrou net python sets.
7112 	X	a long time ago circa python greg stein experimented with free threading which did yield around a times speedup on a dual processor.
7113 	X	weve already proved that we cant as a community agree on a.
7114 	X	some suggestions were made many of which micah integrated into the.
7115 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
7116 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
7117 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
7118 	X	c coding experiment http mail python org pipermail python dev september html.
7119 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
7120 	X	thats what we have a bdfl.
7121 	X	the suggestion was made that an implementation should precede approval of the.
7122 	X	mib http en wikipedia org wiki mibibyte.
7123 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
7124 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
7125 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
7126 	X	once again the subject of removing the global interpreter lock gil came.
7127 	X	nathan bullock suggested a relpath path a path b addition to os paththat returns a relative path from path a to path b.
7128 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
7129 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
7130 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
7131 	X	although it has not been implemented yet the plan is for it to appear in python.
7132 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
7133 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
7134 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
7135 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
7136 	X	codetags pep http python org peps pep html.
7137 	X	http mail python org pipermail python dev september html.
7138 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
7139 	X	pep http www python org peps pep html.
7140 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
7141 	X	this kicked off several long threads about multi processor.
7142 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
7143 	X	with the threaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
7144 	X	martin v lwis discovered that a little more than a mib could be saved in the size of python installer by using lzx instead of the standard mszip when compressing the cab.
7145 	X	pep codetags http mail python org pipermail python dev september html.
7146 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and response guido suggested that that the conditional expression discussion of pep be.
7147 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivated from the key and its current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
7148 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
7149 	X	experimenting with this http pitrou net python sets.
7150 	X	a long time ago circa python greg stein experimented with free threading which did yield around a times speedup on a dual processor.
7151 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
7152 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
7153 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
7154 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
7155 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
7156 	X	c coding experiment http mail python org pipermail python dev september html.
7157 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
7158 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
7159 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
7160 	X	mib http en wikipedia org wiki mibibyte.
7161 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
7162 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
7163 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
7164 	X	once again the subject of removing the global interpreter lock gil came.
7165 	X	nathan bullock suggested a relpath path a path b addition to os paththat returns a relative path from path a to path b.
7166 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
7167 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
7168 	X	although it has not been implemented yet the plan is for it to appear in python.
7169 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
7170 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
7171 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
7172 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
7173 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
7174 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
7175 	X	http mail python org pipermail python dev september html.
7176 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
7177 	X	pep http www python org peps pep html.
7178 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
7179 	X	this kicked off several long threads about multi processor.
7180 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
7181 	X	with the threaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
7182 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
7183 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
7184 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and response guido suggested that that the conditional expression discussion of pep be.
7185 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivated from the key and its current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
7186 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
7187 	X	experimenting with this http pitrou net python sets.
7188 	X	a long time ago circa python greg stein experimented with free threading which did yield around a times speedup on a dual processor.
7189 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
7190 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
7191 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
7192 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
7193 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
7194 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
7195 	X	c coding experiment http mail python org pipermail python dev september html.
7196 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
7197 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
7198 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
7199 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
7200 	X	these all favour multi processing over multi.
7201 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
7202 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
7203 	X	once again the subject of removing the global interpreter lock gil came.
7204 	X	nathan bullock suggested a relpath path a path b addition to os paththat returns a relative path from path a to path b.
7205 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
7206 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
7207 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
7208 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
7209 	X	although it has not been implemented yet the plan is for it to appear in python.
7210 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
7211 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
7212 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
7213 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
7214 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
7215 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
7216 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
7217 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
7218 	X	pep http www python org peps pep html.
7219 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
7220 	X	this kicked off several long threads about multi processor.
7221 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
7222 	X	with the threaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
7223 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
7224 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
7225 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
7226 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
7227 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
7228 	X	experimenting with this http pitrou net python sets.
7229 	X	a long time ago circa python greg stein experimented with free threading which did yield around a times speedup on a dual processor.
7230 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
7231 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
7232 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
7233 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
7234 	X	comp lang python thread patch http sourceforge net tracker index phpfunc detail aid group id atid.
7235 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
7236 	X	c coding experiment http mail python org pipermail python dev september html.
7237 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
7238 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
7239 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
7240 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
7241 	X	these all favour multi processing over multi.
7242 	X	vendor packages directory http mail python org pipermail python dev september html.
7243 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
7244 	X	once again the subject of removing the global interpreter lock gil came.
7245 	X	nathan bullock suggested a relpath path a path b addition to os paththat returns a relative path from path a to path b.
7246 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
7247 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
7248 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
7249 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
7250 	X	the idea of a multiprocess module gained a reasonable amount of.
7251 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
7252 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
7253 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
7254 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
7255 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
7256 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
7257 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
7258 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
7259 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
7260 	X	this kicked off several long threads about multi processor.
7261 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
7262 	X	with the threaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
7263 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
7264 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
7265 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
7266 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
7267 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
7268 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
7269 	X	a long time ago circa python greg stein experimented with free threading which did yield around a times speedup on a dual processor.
7270 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
7271 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
7272 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
7273 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
7274 	X	comp lang python thread patch http sourceforge net tracker index phpfunc detail aid group id atid.
7275 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
7276 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
7277 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
7278 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
7279 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
7280 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
7281 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
7282 	X	these all favour multi processing over multi.
7283 	X	vendor packages directory http mail python org pipermail python dev september html.
7284 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
7285 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
7286 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
7287 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
7288 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
7289 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
7290 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
7291 	X	the idea of a multiprocess module gained a reasonable amount of.
7292 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
7293 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
7294 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
7295 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
7296 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
7297 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
7298 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
7299 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
7300 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
7301 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
7302 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
7303 	X	with the threaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
7304 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
7305 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
7306 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
7307 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
7308 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
7309 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
7310 	X	python ast branch and pep and http mail python org pipermail python dev september html.
7311 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
7312 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
7313 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
7314 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
7315 	X	comp lang python thread patch http sourceforge net tracker index phpfunc detail aid group id atid.
7316 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
7317 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
7318 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
7319 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
7320 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
7321 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
7322 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
7323 	X	these all favour multi processing over multi.
7324 	X	vendor packages directory http mail python org pipermail python dev september html.
7325 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
7326 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
7327 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
7328 	X	http mail python org pipermail python dev september html.
7329 	X	he pointed out that an implementation would really be needed to prove.
7330 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
7331 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
7332 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
7333 	X	the idea of a multiprocess module gained a reasonable amount of.
7334 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
7335 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
7336 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
7337 	X	phillip and martin pointed out that preventing any other interaction other than enqueued messages is the difficult part each active object would for example have to have its own sys.
7338 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
7339 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
7340 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
7341 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
7342 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
7343 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
7344 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
7345 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
7346 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
7347 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
7348 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
7349 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
7350 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
7351 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
7352 	X	python ast branch and pep and http mail python org pipermail python dev september html.
7353 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
7354 	X	this is a summary of traffic on the python dev mailing list from september through september.
7355 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
7356 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
7357 	X	comp lang python thread patch http sourceforge net tracker index phpfunc detail aid group id atid.
7358 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
7359 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
7360 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
7361 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
7362 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
7363 	X	it is intended to inform the wider python community of on going developments on the list on a semi monthly.
7364 	X	items on the list were discussed further with some disagreement about what was.
7365 	X	these all favour multi processing over multi.
7366 	X	vendor packages directory http mail python org pipermail python dev september html.
7367 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
7368 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
7369 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
7370 	X	http mail python org pipermail python dev september html.
7371 	X	he pointed out that an implementation would really be needed to prove.
7372 	X	an archive of previous summaries is available.
7373 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
7374 	X	the idea of a multiprocess module gained a reasonable amount of.
7375 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
7376 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
7377 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
7378 	X	phillip and martin pointed out that preventing any other interaction other than enqueued messages is the difficult part each active object would for example have to have its own sys.
7379 	X	an rss feed of the titles of the summaries is.
7380 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
7381 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
7382 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
7383 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
7384 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
7385 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
7386 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
7387 	X	you can also watch comp lang python or comp lang python announce for new summaries or through their email gateways of python list or python announce respectively as found at http mail python org.
7388 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
7389 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
7390 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
7391 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
7392 	X	python ast branch and pep and http mail python org pipermail python dev september html.
7393 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
7394 	X	this is a summary of traffic on the python dev mailing list from september through september.
7395 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
7396 	X	this is the th summary written by the python dev summary duo of steve bethard and tony meyer i feel like the white rabbit in.
7397 	X	http mail python org pipermail python dev september html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
7398 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
7399 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
7400 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
7401 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
7402 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
7403 	X	it is intended to inform the wider python community of on going developments on the list on a semi monthly.
7404 	X	items on the list were discussed further with some disagreement about what was.
7405 	X	to contact us please send email.
7406 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
7407 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
7408 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
7409 	X	http mail python org pipermail python dev september html.
7410 	X	he pointed out that an implementation would really be needed to prove.
7411 	X	an archive of previous summaries is available.
7412 	X	steve bethard steven bethard at gmail com http gmail com tony meyer tony meyer at gmail com http gmail com.
7413 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
7414 	X	the idea of a multiprocess module gained a reasonable amount of.
7415 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
7416 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
7417 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
7418 	X	phillip and martin pointed out that preventing any other interaction other than enqueued messages is the difficult part each active object would for example have to have its own sys.
7419 	X	an rss feed of the titles of the summaries is.
7420 	X	do not post to comp lang python if you wish to reach.
7421 	X	def f x y print x y.
7422 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
7423 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
7424 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
7425 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
7426 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
7427 	X	you can also watch comp lang python or comp lang python announce for new summaries or through their email gateways of python list or python announce respectively as found at http mail python org.
7428 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
7429 	X	the python software foundation is the non profit organization that holds the intellectual property for.
7430 	X	youd have to write something like.
7431 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
7432 	X	python ast branch and pep and http mail python org pipermail python dev september html.
7433 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
7434 	X	this is a summary of traffic on the python dev mailing list from september through september.
7435 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
7436 	X	this is the th summary written by the python dev summary duo of steve bethard and tony meyer i feel like the white rabbit in.
7437 	X	http mail python org pipermail python dev september html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
7438 	X	it also tries to advance the development and use of.
7439 	X	def f arg x y arg print x y.
7440 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
7441 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
7442 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
7443 	X	it is intended to inform the wider python community of on going developments on the list on a semi monthly.
7444 	X	items on the list were discussed further with some disagreement about what was.
7445 	X	to contact us please send email.
7446 	X	if you find the python dev summary helpful please consider making a.
7447 	X	brett with help from guido motivated this removal for python by a few factors.
7448 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
7449 	X	http mail python org pipermail python dev september html.
7450 	X	he pointed out that an implementation would really be needed to prove.
7451 	X	an archive of previous summaries is available.
7452 	X	steve bethard steven bethard at gmail com http gmail com tony meyer tony meyer at gmail com http gmail com.
7453 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
7454 	X	you can make a donation at http python org psf donations html.
7455 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
7456 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
7457 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
7458 	X	phillip and martin pointed out that preventing any other interaction other than enqueued messages is the difficult part each active object would for example have to have its own sys.
7459 	X	an rss feed of the titles of the summaries is.
7460 	X	do not post to comp lang python if you wish to reach.
7461 	X	def f x y print x y.
7462 	X	every penny helps so even a small donation with a credit card check or by paypal.
7463 	X	guido the feature can be difficult to read for some.
7464 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
7465 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
7466 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
7467 	X	you can also watch comp lang python or comp lang python announce for new summaries or through their email gateways of python list or python announce respectively as found at http mail python org.
7468 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
7469 	X	the python software foundation is the non profit organization that holds the intellectual property for.
7470 	X	youd have to write something like.
7471 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
7472 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
7473 	X	this is a summary of traffic on the python dev mailing list from september through september.
7474 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
7475 	X	this is the th summary written by the python dev summary duo of steve bethard and tony meyer i feel like the white rabbit in.
7476 	X	http mail python org pipermail python dev september html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
7477 	X	it also tries to advance the development and use of.
7478 	X	def f arg x y arg print x y.
7479 	X	to comment on anything mentioned here just post to comp lang python or email python list at python org which is a gateway to the newsgroup with a subject line mentioning what you are.
7480 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
7481 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
7482 	X	it is intended to inform the wider python community of on going developments on the list on a semi monthly.
7483 	X	items on the list were discussed further with some disagreement about what was.
7484 	X	to contact us please send email.
7485 	X	if you find the python dev summary helpful please consider making a.
7486 	X	brett with help from guido motivated this removal for python by a few factors.
7487 	X	all python dev members are interested in seeing ideas discussed by the community so dont hesitate to take a stance on.
7488 	X	in general people were undecided on this.
7489 	X	he pointed out that an implementation would really be needed to prove.
7490 	X	an archive of previous summaries is available.
7491 	X	steve bethard steven bethard at gmail com http gmail com tony meyer tony meyer at gmail com http gmail com.
7492 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
7493 	X	you can make a donation at http python org psf donations html.
7494 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
7495 	X	and if all of this really interests you then get involved and join python dev.
7496 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
7497 	X	phillip and martin pointed out that preventing any other interaction other than enqueued messages is the difficult part each active object would for example have to have its own sys.
7498 	X	an rss feed of the titles of the summaries is.
7499 	X	do not post to comp lang python if you wish to reach.
7500 	X	def f x y print x y.
7501 	X	every penny helps so even a small donation with a credit card check or by paypal.
7502 	X	guido the feature can be difficult to read for some.
7503 	X	no decision had been made at the time of the.
7504 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
7505 	X	you can also watch comp lang python or comp lang python announce for new summaries or through their email gateways of python list or python announce respectively as found at http mail python org.
7506 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
7507 	X	the python software foundation is the non profit organization that holds the intellectual property for.
7508 	X	youd have to write something like.
7509 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
7510 	X	the in development version of the documentation for python can be found at http www python org dev doc devel and should be used when looking up any documentation for new code otherwise use the current documentation as found at http docs python org.
7511 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
7512 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
7513 	X	this is the th summary written by the python dev summary duo of steve bethard and tony meyer i feel like the white rabbit in.
7514 	X	http mail python org pipermail python dev september html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
7515 	X	it also tries to advance the development and use of.
7516 	X	def f arg x y arg print x y.
7517 	X	to comment on anything mentioned here just post to comp lang python or email python list at python org which is a gateway to the newsgroup with a subject line mentioning what you are.
7518 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
7519 	X	peps python enhancement proposals are located at http www python org peps.
7520 	X	evaluating iterators in a boolean context.
7521 	X	items on the list were discussed further with some disagreement about what was.
7522 	X	to contact us please send email.
7523 	X	if you find the python dev summary helpful please consider making a.
7524 	X	brett with help from guido motivated this removal for python by a few factors.
7525 	X	all python dev members are interested in seeing ideas discussed by the community so dont hesitate to take a stance on.
7526 	X	in general people were undecided on this.
7527 	X	to view files in the python cvs online go to http cvs sourceforge net cgi bin viewcvs cgi python.
7528 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
7529 	X	steve bethard steven bethard at gmail com http gmail com tony meyer tony meyer at gmail com http gmail com.
7530 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
7531 	X	you can make a donation at http python org psf donations html.
7532 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
7533 	X	and if all of this really interests you then get involved and join python dev.
7534 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
7535 	X	reported bugs and suggested patches can be found at the sourceforge project.
7536 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
7537 	X	do not post to comp lang python if you wish to reach.
7538 	X	def f x y print x y.
7539 	X	every penny helps so even a small donation with a credit card check or by paypal.
7540 	X	guido the feature can be difficult to read for some.
7541 	X	no decision had been made at the time of the.
7542 	X	please note that this summary is written using restructuredtext.
7543 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
7544 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
7545 	X	the python software foundation is the non profit organization that holds the intellectual property for.
7546 	X	youd have to write something like.
7547 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
7548 	X	the in development version of the documentation for python can be found at http www python org dev doc devel and should be used when looking up any documentation for new code otherwise use the current documentation as found at http docs python org.
7549 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
7550 	X	any unfamiliar punctuation is probably markup for rest otherwise it is probably regular expression syntax or a typo you can safely ignore.
7551 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
7552 	X	http mail python org pipermail python dev september html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
7553 	X	it also tries to advance the development and use of.
7554 	X	def f arg x y arg print x y.
7555 	X	to comment on anything mentioned here just post to comp lang python or email python list at python org which is a gateway to the newsgroup with a subject line mentioning what you are.
7556 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
7557 	X	peps python enhancement proposals are located at http www python org peps.
7558 	X	evaluating iterators in a boolean context.
7559 	X	we do suggest learning rest though its simple and is accepted for pep markup and can be turned into many different formats like html and.
7560 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
7561 	X	if you find the python dev summary helpful please consider making a.
7562 	X	brett with help from guido motivated this removal for python by a few factors.
7563 	X	all python dev members are interested in seeing ideas discussed by the community so dont hesitate to take a stance on.
7564 	X	in general people were undecided on this.
7565 	X	to view files in the python cvs online go to http cvs sourceforge net cgi bin viewcvs cgi python.
7566 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
7567 	X	unfortunately even though rest is standardized the wonders of programs that like to reformat text do not allow us to guarantee you will be able to run the text version of this summary through docutils as is unless it is from the original text file.
7568 	X	testing for none http www python org peps pep html testing for none.
7569 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
7570 	X	you can make a donation at http python org psf donations html.
7571 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
7572 	X	and if all of this really interests you then get involved and join python dev.
7573 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
7574 	X	reported bugs and suggested patches can be found at the sourceforge project.
7575 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
7576 	X	comp lang python pep markup http www python org peps pep html.
7577 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and http mail python org pipermail python dev september html.
7578 	X	def f x y print x y.
7579 	X	every penny helps so even a small donation with a credit card check or by paypal.
7580 	X	guido the feature can be difficult to read for some.
7581 	X	no decision had been made at the time of the.
7582 	X	please note that this summary is written using restructuredtext.
7583 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
7584 	X	docutils http docutils sf net rest restructuredtext http docutils sf net rst html psf python software foundation http python org psf.
7585 	X	properties that only call the getter function once.
7586 	X	youd have to write something like.
7587 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
7588 	X	the in development version of the documentation for python can be found at http www python org dev doc devel and should be used when looking up any documentation for new code otherwise use the current documentation as found at http docs python org.
7589 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
7590 	X	any unfamiliar punctuation is probably markup for rest otherwise it is probably regular expression syntax or a typo you can safely ignore.
7591 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
7592 	X	the html version of this summary will be available at http www python org dev summary html.
7593 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
7594 	X	def f arg x y arg print x y.
7595 	X	to comment on anything mentioned here just post to comp lang python or email python list at python org which is a gateway to the newsgroup with a subject line mentioning what you are.
7596 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
7597 	X	peps python enhancement proposals are located at http www python org peps.
7598 	X	evaluating iterators in a boolean context.
7599 	X	we do suggest learning rest though its simple and is accepted for pep markup and can be turned into many different formats like html and.
7600 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
7601 	X	brett with help from guido motivated this removal for python by a few factors.
7602 	X	all python dev members are interested in seeing ideas discussed by the community so dont hesitate to take a stance on.
7603 	X	in general people were undecided on this.
7604 	X	to view files in the python cvs online go to http cvs sourceforge net cgi bin viewcvs cgi python.
7605 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
7606 	X	unfortunately even though rest is standardized the wonders of programs that like to reformat text do not allow us to guarantee you will be able to run the text version of this summary through docutils as is unless it is from the original text file.
7607 	X	testing for none http www python org peps pep html testing for none.
7608 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
7609 	X	def eggs self expensive computation of eggs.
7610 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
7611 	X	and if all of this really interests you then get involved and join python dev.
7612 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
7613 	X	reported bugs and suggested patches can be found at the sourceforge project.
7614 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
7615 	X	comp lang python pep markup http www python org peps pep html.
7616 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and http mail python org pipermail python dev september html.
7617 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
7618 	X	guido the feature can be difficult to read for some.
7619 	X	no decision had been made at the time of the.
7620 	X	please note that this summary is written using restructuredtext.
7621 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
7622 	X	docutils http docutils sf net rest restructuredtext http docutils sf net rst html psf python software foundation http python org psf.
7623 	X	properties that only call the getter function once.
7624 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
7625 	X	would only do the eggs computation.
7626 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
7627 	X	the in development version of the documentation for python can be found at http www python org dev doc devel and should be used when looking up any documentation for new code otherwise use the current documentation as found at http docs python org.
7628 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
7629 	X	any unfamiliar punctuation is probably markup for rest otherwise it is probably regular expression syntax or a typo you can safely ignore.
7630 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
7631 	X	the html version of this summary will be available at http www python org dev summary html.
7632 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
7633 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
7634 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
7635 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
7636 	X	peps python enhancement proposals are located at http www python org peps.
7637 	X	evaluating iterators in a boolean context.
7638 	X	we do suggest learning rest though its simple and is accepted for pep markup and can be turned into many different formats like html and.
7639 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
7640 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
7641 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
7642 	X	in general people were undecided on this.
7643 	X	to view files in the python cvs online go to http cvs sourceforge net cgi bin viewcvs cgi python.
7644 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
7645 	X	unfortunately even though rest is standardized the wonders of programs that like to reformat text do not allow us to guarantee you will be able to run the text version of this summary through docutils as is unless it is from the original text file.
7646 	X	testing for none http www python org peps pep html testing for none.
7647 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
7648 	X	def eggs self expensive computation of eggs.
7649 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
7650 	X	rfc readproperty http mail python org pipermail python dev september html.
7651 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
7652 	X	reported bugs and suggested patches can be found at the sourceforge project.
7653 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
7654 	X	comp lang python pep markup http www python org peps pep html.
7655 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and http mail python org pipermail python dev september html.
7656 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
7657 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
7658 	X	no decision had been made at the time of the.
7659 	X	please note that this summary is written using restructuredtext.
7660 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
7661 	X	docutils http docutils sf net rest restructuredtext http docutils sf net rst html psf python software foundation http python org psf.
7662 	X	properties that only call the getter function once.
7663 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
7664 	X	would only do the eggs computation.
7665 	X	we need to leave the syntax to.
7666 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
7667 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
7668 	X	any unfamiliar punctuation is probably markup for rest otherwise it is probably regular expression syntax or a typo you can safely ignore.
7669 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
7670 	X	the html version of this summary will be available at http www python org dev summary html.
7671 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
7672 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
7673 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
7674 	X	weve already proved that we cant as a community agree on a.
7675 	X	some suggestions were made many of which micah integrated into the.
7676 	X	evaluating iterators in a boolean context.
7677 	X	we do suggest learning rest though its simple and is accepted for pep markup and can be turned into many different formats like html and.
7678 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
7679 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
7680 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
7681 	X	thats what we have a bdfl.
7682 	X	the suggestion was made that an implementation should precede approval of the.
7683 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
7684 	X	unfortunately even though rest is standardized the wonders of programs that like to reformat text do not allow us to guarantee you will be able to run the text version of this summary through docutils as is unless it is from the original text file.
7685 	X	testing for none http www python org peps pep html testing for none.
7686 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
7687 	X	def eggs self expensive computation of eggs.
7688 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
7689 	X	rfc readproperty http mail python org pipermail python dev september html.
7690 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
7691 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
7692 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
7693 	X	comp lang python pep markup http www python org peps pep html.
7694 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and http mail python org pipermail python dev september html.
7695 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
7696 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
7697 	X	codetags pep http python org peps pep html.
7698 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
7699 	X	docutils http docutils sf net rest restructuredtext http docutils sf net rst html psf python software foundation http python org psf.
7700 	X	properties that only call the getter function once.
7701 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
7702 	X	would only do the eggs computation.
7703 	X	we need to leave the syntax to.
7704 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
7705 	X	martin v lwis discovered that a little more than a mib could be saved in the size of python installer by using lzx instead of the standard mszip when compressing the cab.
7706 	X	pep codetags http mail python org pipermail python dev september html.
7707 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
7708 	X	the html version of this summary will be available at http www python org dev summary html.
7709 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
7710 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
7711 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
7712 	X	weve already proved that we cant as a community agree on a.
7713 	X	some suggestions were made many of which micah integrated into the.
7714 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
7715 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
7716 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
7717 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
7718 	X	thats what we have a bdfl.
7719 	X	the suggestion was made that an implementation should precede approval of the.
7720 	X	mib http en wikipedia org wiki mibibyte.
7721 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
7722 	X	testing for none http www python org peps pep html testing for none.
7723 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
7724 	X	def eggs self expensive computation of eggs.
7725 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
7726 	X	rfc readproperty http mail python org pipermail python dev september html.
7727 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
7728 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
7729 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and http mail python org pipermail python dev september html.
7730 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
7731 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
7732 	X	codetags pep http python org peps pep html.
7733 	X	http mail python org pipermail python dev september html.
7734 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
7735 	X	properties that only call the getter function once.
7736 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
7737 	X	would only do the eggs computation.
7738 	X	we need to leave the syntax to.
7739 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
7740 	X	martin v lwis discovered that a little more than a mib could be saved in the size of python installer by using lzx instead of the standard mszip when compressing the cab.
7741 	X	pep codetags http mail python org pipermail python dev september html.
7742 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and response guido suggested that that the conditional expression discussion of pep be.
7743 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivated from the key and its current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
7744 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
7745 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
7746 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
7747 	X	weve already proved that we cant as a community agree on a.
7748 	X	some suggestions were made many of which micah integrated into the.
7749 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
7750 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
7751 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
7752 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
7753 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
7754 	X	thats what we have a bdfl.
7755 	X	the suggestion was made that an implementation should precede approval of the.
7756 	X	mib http en wikipedia org wiki mibibyte.
7757 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
7758 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
7759 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
7760 	X	def eggs self expensive computation of eggs.
7761 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
7762 	X	rfc readproperty http mail python org pipermail python dev september html.
7763 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
7764 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
7765 	X	although it has not been implemented yet the plan is for it to appear in python.
7766 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
7767 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
7768 	X	codetags pep http python org peps pep html.
7769 	X	http mail python org pipermail python dev september html.
7770 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
7771 	X	pep http www python org peps pep html.
7772 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
7773 	X	would only do the eggs computation.
7774 	X	we need to leave the syntax to.
7775 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
7776 	X	martin v lwis discovered that a little more than a mib could be saved in the size of python installer by using lzx instead of the standard mszip when compressing the cab.
7777 	X	pep codetags http mail python org pipermail python dev september html.
7778 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and response guido suggested that that the conditional expression discussion of pep be.
7779 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivated from the key and its current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
7780 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
7781 	X	experimenting with this http pitrou net python sets.
7782 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
7783 	X	weve already proved that we cant as a community agree on a.
7784 	X	some suggestions were made many of which micah integrated into the.
7785 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
7786 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
7787 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
7788 	X	c coding experiment http mail python org pipermail python dev september html.
7789 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
7790 	X	thats what we have a bdfl.
7791 	X	the suggestion was made that an implementation should precede approval of the.
7792 	X	mib http en wikipedia org wiki mibibyte.
7793 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
7794 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
7795 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
7796 	X	once again the subject of removing the global interpreter lock gil came.
7797 	X	nathan bullock suggested a relpath path a path b addition to os paththat returns a relative path from path a to path b.
7798 	X	rfc readproperty http mail python org pipermail python dev september html.
7799 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
7800 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
7801 	X	although it has not been implemented yet the plan is for it to appear in python.
7802 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
7803 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
7804 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
7805 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
7806 	X	codetags pep http python org peps pep html.
7807 	X	http mail python org pipermail python dev september html.
7808 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
7809 	X	pep http www python org peps pep html.
7810 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
7811 	X	this kicked off several long threads about multi processor.
7812 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
7813 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
7814 	X	martin v lwis discovered that a little more than a mib could be saved in the size of python installer by using lzx instead of the standard mszip when compressing the cab.
7815 	X	pep codetags http mail python org pipermail python dev september html.
7816 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and response guido suggested that that the conditional expression discussion of pep be.
7817 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivated from the key and its current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
7818 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
7819 	X	experimenting with this http pitrou net python sets.
7820 	X	a long time ago circa python greg stein experimented with free threading which did yield around a times speedup on a dual processor.
7821 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
7822 	X	some suggestions were made many of which micah integrated into the.
7823 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
7824 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
7825 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
7826 	X	c coding experiment http mail python org pipermail python dev september html.
7827 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
7828 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
7829 	X	the suggestion was made that an implementation should precede approval of the.
7830 	X	mib http en wikipedia org wiki mibibyte.
7831 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
7832 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
7833 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
7834 	X	once again the subject of removing the global interpreter lock gil came.
7835 	X	nathan bullock suggested a relpath path a path b addition to os paththat returns a relative path from path a to path b.
7836 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
7837 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
7838 	X	although it has not been implemented yet the plan is for it to appear in python.
7839 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
7840 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
7841 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
7842 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
7843 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
7844 	X	codetags pep http python org peps pep html.
7845 	X	http mail python org pipermail python dev september html.
7846 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
7847 	X	pep http www python org peps pep html.
7848 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
7849 	X	this kicked off several long threads about multi processor.
7850 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
7851 	X	with the threaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
7852 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
7853 	X	pep codetags http mail python org pipermail python dev september html.
7854 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and response guido suggested that that the conditional expression discussion of pep be.
7855 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivated from the key and its current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
7856 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
7857 	X	experimenting with this http pitrou net python sets.
7858 	X	a long time ago circa python greg stein experimented with free threading which did yield around a times speedup on a dual processor.
7859 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
7860 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
7861 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
7862 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
7863 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
7864 	X	c coding experiment http mail python org pipermail python dev september html.
7865 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
7866 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
7867 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
7868 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
7869 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
7870 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
7871 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
7872 	X	once again the subject of removing the global interpreter lock gil came.
7873 	X	nathan bullock suggested a relpath path a path b addition to os paththat returns a relative path from path a to path b.
7874 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
7875 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
7876 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
7877 	X	although it has not been implemented yet the plan is for it to appear in python.
7878 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
7879 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
7880 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
7881 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
7882 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
7883 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
7884 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
7885 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
7886 	X	pep http www python org peps pep html.
7887 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
7888 	X	this kicked off several long threads about multi processor.
7889 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
7890 	X	with the threaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
7891 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
7892 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
7893 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
7894 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivated from the key and its current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
7895 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
7896 	X	experimenting with this http pitrou net python sets.
7897 	X	a long time ago circa python greg stein experimented with free threading which did yield around a times speedup on a dual processor.
7898 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
7899 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
7900 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
7901 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
7902 	X	comp lang python thread patch http sourceforge net tracker index phpfunc detail aid group id atid.
7903 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
7904 	X	c coding experiment http mail python org pipermail python dev september html.
7905 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
7906 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
7907 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
7908 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
7909 	X	these all favour multi processing over multi.
7910 	X	vendor packages directory http mail python org pipermail python dev september html.
7911 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
7912 	X	once again the subject of removing the global interpreter lock gil came.
7913 	X	nathan bullock suggested a relpath path a path b addition to os paththat returns a relative path from path a to path b.
7914 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
7915 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
7916 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
7917 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
7918 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
7919 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
7920 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
7921 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
7922 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
7923 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
7924 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
7925 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
7926 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
7927 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
7928 	X	this kicked off several long threads about multi processor.
7929 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
7930 	X	with the threaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
7931 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
7932 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
7933 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
7934 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
7935 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
7936 	X	experimenting with this http pitrou net python sets.
7937 	X	a long time ago circa python greg stein experimented with free threading which did yield around a times speedup on a dual processor.
7938 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
7939 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
7940 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
7941 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
7942 	X	comp lang python thread patch http sourceforge net tracker index phpfunc detail aid group id atid.
7943 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
7944 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
7945 	X	c coding experiment http mail python org pipermail python dev september html.
7946 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
7947 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
7948 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
7949 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
7950 	X	these all favour multi processing over multi.
7951 	X	vendor packages directory http mail python org pipermail python dev september html.
7952 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
7953 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
7954 	X	thomas wouters checked in a patch for pep so python now has the long awaited conditional expressions.
7955 	X	pep http www python org dev peps pep.
7956 	X	pep http mail python org pipermail python dev february html.
7957 	X	from rhettinger at users sourceforge net rhettinger users sourceforge net date wed aug pep txt message id en qv sc pr cvs sourceforge net.
7958 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
7959 	X	modified files pep txt pep txt indicate the rejection of pep for an if then else.
7960 	X	s if then else expression gvr hettinger s built in curry type harris s reliable acquisition release pairs hudson moore i how to change pythons grammar hudson s extensions to the pickle protocol gvr peters.
7961 	X	sr if then else expression gvr hettinger s built in curry type harris s reliable acquisition release pairs hudson moore.
7962 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb author guido van rossum raymond d hettinger.
7963 	X	status draft content type text plain author guido van rossum raymond d hettinger.
7964 	X	status rejected content type text plain discussion and a discussion of short circuit.
7965 	X	following the discussion a vote was.
7966 	X	while there was an overall interest in having some form of if then else expressions no one format was able to draw majority.
7967 	X	accordingly the pep was rejected due to the lack of an overwhelming majority for.
7968 	X	also a python design principle is to prefer the status quo whenever there are doubts about which path to.
7969 	X	proposal the bdfls position is that short circuit behavior is essential for an if then else construct to be added to the.
7970 	X	votes with rank ordering total votes received.
7971 	X	accept reject total rank rank rank rank rank rank a b c d e f g h i j k l m n o p q z total rejectall total.
7972 	X	choice key a x if c else y b if c then x else y e c x.
7973 	X	detail for write in votes and their ranking q reject y x c elsethenif q accept c x.
7974 	X	c x y q accept x if c y otherwise q reject q reject none q accept select c val cx valx elseval q reject if c t else f q accept c selects x else y q accept iff c x y if function q accept y x c q accept c true x false y q accept c then x else y q reject q accept if c x elif c y else z q accept c x y q accept x if c y q accept if c x else y q accept c.
7975 	X	true false q accept if c x else y q accept c.
7976 	X	true false q accept if c x else y q accept x if c else y q accept ifelse c x y q reject x or y c q accept c x y required parens q accept iif c x y q accept.
7977 	X	c x y q accept switch case q accept multi line if else q accept c x else y q accept c x else y q accept if c x else y q accept x if c else y q reject choice c a c b z q accept if c then x else y q reject no other choice has x as the first element q accept xy.
7978 	X	from rhettinger at users sourceforge net rhettinger users sourceforge net date wed aug pep txt message id en qv sc pr cvs sourceforge net.
7979 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
7980 	X	modified files pep txt pep txt indicate the rejection of pep for an if then else.
7981 	X	s if then else expression gvr hettinger s built in curry type harris s reliable acquisition release pairs hudson moore i how to change pythons grammar hudson s extensions to the pickle protocol gvr peters.
7982 	X	sr if then else expression gvr hettinger s built in curry type harris s reliable acquisition release pairs hudson moore.
7983 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb author guido van rossum raymond d hettinger.
7984 	X	status draft content type text plain author guido van rossum raymond d hettinger.
7985 	X	status rejected content type text plain discussion and a discussion of short circuit.
7986 	X	following the discussion a vote was.
7987 	X	while there was an overall interest in having some form of if then else expressions no one format was able to draw majority.
7988 	X	accordingly the pep was rejected due to the lack of an overwhelming majority for.
7989 	X	also a python design principle is to prefer the status quo whenever there are doubts about which path to.
7990 	X	proposal the bdfls position is that short circuit behavior is essential for an if then else construct to be added to the.
7991 	X	votes with rank ordering total votes received.
7992 	X	accept reject total rank rank rank rank rank rank a b c d e f g h i j k l m n o p q z total rejectall total.
7993 	X	choice key a x if c else y b if c then x else y e c x.
7994 	X	detail for write in votes and their ranking q reject y x c elsethenif q accept c x.
7995 	X	c x y q accept x if c y otherwise q reject q reject none q accept select c val cx valx elseval q reject if c t else f q accept c selects x else y q accept iff c x y if function q accept y x c q accept c true x false y q accept c then x else y q reject q accept if c x elif c y else z q accept c x y q accept x if c y q accept if c x else y q accept c.
7996 	X	true false q accept if c x else y q accept c.
7997 	X	true false q accept if c x else y q accept x if c else y q accept ifelse c x y q reject x or y c q accept c x y required parens q accept iif c x y q accept.
7998 	X	c x y q accept switch case q accept multi line if else q accept c x else y q accept c x else y q accept if c x else y q accept x if c else y q reject choice c a c b z q accept if c then x else y q reject no other choice has x as the first element q accept xy.
7999 	X	from rhettinger at users sourceforge net rhettinger users sourceforge net date wed aug pep txt message id en qv sc pr cvs sourceforge net.
8000 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
8001 	X	modified files pep txt pep txt indicate the rejection of pep for an if then else.
8002 	X	s if then else expression gvr hettinger s built in curry type harris s reliable acquisition release pairs hudson moore i how to change pythons grammar hudson s extensions to the pickle protocol gvr peters.
8003 	X	sr if then else expression gvr hettinger s built in curry type harris s reliable acquisition release pairs hudson moore.
8004 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb author guido van rossum raymond d hettinger.
8005 	X	status draft content type text plain author guido van rossum raymond d hettinger.
8006 	X	status rejected content type text plain discussion and a discussion of short circuit.
8007 	X	following the discussion a vote was.
8008 	X	while there was an overall interest in having some form of if then else expressions no one format was able to draw majority.
8009 	X	accordingly the pep was rejected due to the lack of an overwhelming majority for.
8010 	X	also a python design principle is to prefer the status quo whenever there are doubts about which path to.
8011 	X	proposal the bdfls position is that short circuit behavior is essential for an if then else construct to be added to the.
8012 	X	votes with rank ordering total votes received.
8013 	X	accept reject total rank rank rank rank rank rank a b c d e f g h i j k l m n o p q z total rejectall total.
8014 	X	choice key a x if c else y b if c then x else y e c x.
8015 	X	detail for write in votes and their ranking q reject y x c elsethenif q accept c x.
8016 	X	c x y q accept x if c y otherwise q reject q reject none q accept select c val cx valx elseval q reject if c t else f q accept c selects x else y q accept iff c x y if function q accept y x c q accept c true x false y q accept c then x else y q reject q accept if c x elif c y else z q accept c x y q accept x if c y q accept if c x else y q accept c.
8017 	X	true false q accept if c x else y q accept c.
8018 	X	true false q accept if c x else y q accept x if c else y q accept ifelse c x y q reject x or y c q accept c x y required parens q accept iif c x y q accept.
8019 	X	c x y q accept switch case q accept multi line if else q accept c x else y q accept c x else y q accept if c x else y q accept x if c else y q reject choice c a c b z q accept if c then x else y q reject no other choice has x as the first element q accept xy.
8020 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id ehbuz wi sc pr cvs sourceforge net.
8021 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
8022 	X	modified files pep txt added files pep txt add pep if then else expression.
8023 	X	requests for an if then else ternary expression keep coming up on comp lang.
8024 	X	this pep contains a concrete proposal of a fairly pythonic.
8025 	X	this is the communitys one chance if this pep is approved with a clear majority it will be implemented in python.
8026 	X	if not the pep will be augmented with a summary of the reasons for rejection and the subject better not come up.
8027 	X	while i am the author of this pep i am neither in favor nor against this proposal it is up to the community to.
8028 	X	if the community cant decide ill reject the.
8029 	X	the proposed syntax is as follows.
8030 	X	if condition is true expression is evaluated and is the result of the whole.
8031 	X	if condition is false expression is evaluated and is the result of the whole.
8032 	X	note that at most one of expression and expression is.
8033 	X	this is called a shortcut expression it is similar to the way the second operand of and or is only evaluated if the first operand is true.
8034 	X	to disambiguate this in the context of other operators the else part in the middle acts like a left associative binary operator with a priority lower than that of or and higher than that of lambda.
8035 	X	examples of how this works out.
8036 	X	x if c else y if d else z x if c else y if d else z x or y if c else z x or y if c else z x if c else y or z x if c else y or z lambda x if c else y lambda x if c else y x if c else lambda y syntaxerror x if c else y z x if c else y z x y if c else z x y if c else z.
8037 	X	many c derived languages use this syntax.
8038 	X	i reject this for several reasons the colon already has many uses in python even though it would actually not be ambiguous because the question mark requires a matching colon for people not used to c derived language it is hard to.
8039 	X	eric raymond proposed a variant that doesnt have this problem.
8040 	X	while cute this suffers from the perlish problem of using arbitrary punctuation with an arbitrary meaning and its no easier to understand than the.
8041 	X	if we could live with adding a new keyword we could use.
8042 	X	if condition then expression else expression.
8043 	X	apart from the problem of introducing a new keyword for a minor feature this also suffers from ambiguity at the start of a statement for example.
8044 	X	if verbose then sys stdout write hello n else none.
8045 	X	could be an syntactically correct expression statement but starts with if which makes the parser believe it is the start of an if.
8046 	X	to resolve this the syntax would have to require parentheses which makes it.
8047 	X	however this form has the advantage of evaluating strictly from left to right not that that is a requirement for were pythonic list comprehensions dont.
8048 	X	this document is placed in the public.
8049 	X	local variables mode indented text indent tabs mode nil sentence end double space t fill column end.
8050 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id ehbuz wi sc pr cvs sourceforge net.
8051 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
8052 	X	modified files pep txt added files pep txt add pep if then else expression.
8053 	X	requests for an if then else ternary expression keep coming up on comp lang.
8054 	X	this pep contains a concrete proposal of a fairly pythonic.
8055 	X	this is the communitys one chance if this pep is approved with a clear majority it will be implemented in python.
8056 	X	if not the pep will be augmented with a summary of the reasons for rejection and the subject better not come up.
8057 	X	while i am the author of this pep i am neither in favor nor against this proposal it is up to the community to.
8058 	X	if the community cant decide ill reject the.
8059 	X	the proposed syntax is as follows.
8060 	X	if condition is true expression is evaluated and is the result of the whole.
8061 	X	if condition is false expression is evaluated and is the result of the whole.
8062 	X	note that at most one of expression and expression is.
8063 	X	this is called a shortcut expression it is similar to the way the second operand of and or is only evaluated if the first operand is true.
8064 	X	to disambiguate this in the context of other operators the else part in the middle acts like a left associative binary operator with a priority lower than that of or and higher than that of lambda.
8065 	X	examples of how this works out.
8066 	X	x if c else y if d else z x if c else y if d else z x or y if c else z x or y if c else z x if c else y or z x if c else y or z lambda x if c else y lambda x if c else y x if c else lambda y syntaxerror x if c else y z x if c else y z x y if c else z x y if c else z.
8067 	X	many c derived languages use this syntax.
8068 	X	i reject this for several reasons the colon already has many uses in python even though it would actually not be ambiguous because the question mark requires a matching colon for people not used to c derived language it is hard to.
8069 	X	eric raymond proposed a variant that doesnt have this problem.
8070 	X	while cute this suffers from the perlish problem of using arbitrary punctuation with an arbitrary meaning and its no easier to understand than the.
8071 	X	if we could live with adding a new keyword we could use.
8072 	X	if condition then expression else expression.
8073 	X	apart from the problem of introducing a new keyword for a minor feature this also suffers from ambiguity at the start of a statement for example.
8074 	X	if verbose then sys stdout write hello n else none.
8075 	X	could be an syntactically correct expression statement but starts with if which makes the parser believe it is the start of an if.
8076 	X	to resolve this the syntax would have to require parentheses which makes it.
8077 	X	however this form has the advantage of evaluating strictly from left to right not that that is a requirement for were pythonic list comprehensions dont.
8078 	X	this document is placed in the public.
8079 	X	local variables mode indented text indent tabs mode nil sentence end double space t fill column end.
8080 	X	from montanaro users sourceforge net montanaro users sourceforge net message id ehexw o sc pr cvs sourceforge net.
8081 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
8082 	X	modified files pep txt log message explain why adding a new builtin wont.
8083 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb is a requirement for were pythonic list comprehensions dont.
8084 	X	many people suggest adding a new builtin instead of extending the syntax of the language e g.
8085 	X	this wont work the way a syntax extension will because both expression and expression must be evaluated before the function is.
8086 	X	theres no way to short circuit the expression.
8087 	X	from montanaro users sourceforge net montanaro users sourceforge net message id ehexw o sc pr cvs sourceforge net.
8088 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
8089 	X	modified files pep txt log message explain why adding a new builtin wont.
8090 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb is a requirement for were pythonic list comprehensions dont.
8091 	X	many people suggest adding a new builtin instead of extending the syntax of the language e g.
8092 	X	this wont work the way a syntax extension will because both expression and expression must be evaluated before the function is.
8093 	X	theres no way to short circuit the expression.
8094 	X	from montanaro users sourceforge net montanaro users sourceforge net message id ehexw o sc pr cvs sourceforge net.
8095 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
8096 	X	modified files pep txt log message explain why adding a new builtin wont.
8097 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb is a requirement for were pythonic list comprehensions dont.
8098 	X	many people suggest adding a new builtin instead of extending the syntax of the language e g.
8099 	X	this wont work the way a syntax extension will because both expression and expression must be evaluated before the function is.
8100 	X	theres no way to short circuit the expression.
8101 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id ehgku l sc pr cvs sourceforge net.
8102 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
8103 	X	modified files pep txt credit where credit is.
8104 	X	also add an extra blank line before the section on.
8105 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb.
8106 	X	eric raymond proposed a variant that doesnt have this problem.
8107 	X	david ascher proposed and eric raymond even implemented a.
8108 	X	variant that doesnt have this problem advantage of evaluating strictly from left to right not that that is a requirement for were pythonic list comprehensions dont.
8109 	X	many people suggest adding a new builtin instead of extending the.
8110 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id ehgku l sc pr cvs sourceforge net.
8111 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
8112 	X	modified files pep txt credit where credit is.
8113 	X	also add an extra blank line before the section on.
8114 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb.
8115 	X	eric raymond proposed a variant that doesnt have this problem.
8116 	X	david ascher proposed and eric raymond even implemented a.
8117 	X	variant that doesnt have this problem advantage of evaluating strictly from left to right not that that is a requirement for were pythonic list comprehensions dont.
8118 	X	many people suggest adding a new builtin instead of extending the.
8119 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id ehgku l sc pr cvs sourceforge net.
8120 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
8121 	X	modified files pep txt credit where credit is.
8122 	X	also add an extra blank line before the section on.
8123 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb.
8124 	X	eric raymond proposed a variant that doesnt have this problem.
8125 	X	david ascher proposed and eric raymond even implemented a.
8126 	X	variant that doesnt have this problem advantage of evaluating strictly from left to right not that that is a requirement for were pythonic list comprehensions dont.
8127 	X	many people suggest adding a new builtin instead of extending the.
8128 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id ehh sc pr cvs sourceforge net.
8129 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
8130 	X	modified files pep txt explain that e if c without the else part is a bad.
8131 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb.
8132 	X	it is proposed to make the else part.
8133 	X	this would be a really bad.
8134 	X	to several people and they all thought that if c was false it would leave x.
8135 	X	so dont even think about this one.
8136 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id ehh sc pr cvs sourceforge net.
8137 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
8138 	X	modified files pep txt explain that e if c without the else part is a bad.
8139 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb.
8140 	X	it is proposed to make the else part.
8141 	X	this would be a really bad.
8142 	X	to several people and they all thought that if c was false it would leave x.
8143 	X	so dont even think about this one.
8144 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id ehh sc pr cvs sourceforge net.
8145 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
8146 	X	modified files pep txt explain that e if c without the else part is a bad.
8147 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb.
8148 	X	it is proposed to make the else part.
8149 	X	this would be a really bad.
8150 	X	to several people and they all thought that if c was false it would leave x.
8151 	X	so dont even think about this one.
8152 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb to c derived language it is hard to.
8153 	X	david ascher proposed and eric raymond even implemented a easier to understand than the.
8154 	X	if we could live with adding a new keyword we could use is a requirement for were pythonic list comprehensions dont.
8155 	X	to deal with the problem of adding a new keyword this variant is proposed.
8156 	X	this has the same ambiguity problem as the previous one i would even say more so and lacks.
8157 	X	it also begs the question why there isnt a colon after the.
8158 	X	is even more confusing because it resembles the if statement so.
8159 	X	a solution that doesnt resemble the if statement is better imo since it should be obvious at first glance whether were dealing with an if expression or with an if.
8160 	X	placing the if in the middle somehow satisfies this.
8161 	X	many people suggest adding a new builtin instead of extending the.
8162 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id ehhg g sc pr cvs sourceforge net.
8163 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
8164 	X	modified files pep txt add if c e else.
8165 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb to c derived language it is hard to.
8166 	X	david ascher proposed and eric raymond even implemented a easier to understand than the.
8167 	X	if we could live with adding a new keyword we could use is a requirement for were pythonic list comprehensions dont.
8168 	X	to deal with the problem of adding a new keyword this variant is proposed.
8169 	X	this has the same ambiguity problem as the previous one i would even say more so and lacks.
8170 	X	it also begs the question why there isnt a colon after the.
8171 	X	is even more confusing because it resembles the if statement so.
8172 	X	a solution that doesnt resemble the if statement is better imo since it should be obvious at first glance whether were dealing with an if expression or with an if.
8173 	X	placing the if in the middle somehow satisfies this.
8174 	X	many people suggest adding a new builtin instead of extending the.
8175 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id ehhg g sc pr cvs sourceforge net.
8176 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
8177 	X	modified files pep txt add if c e else.
8178 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb to c derived language it is hard to.
8179 	X	david ascher proposed and eric raymond even implemented a easier to understand than the.
8180 	X	if we could live with adding a new keyword we could use is a requirement for were pythonic list comprehensions dont.
8181 	X	to deal with the problem of adding a new keyword this variant is proposed.
8182 	X	this has the same ambiguity problem as the previous one i would even say more so and lacks.
8183 	X	it also begs the question why there isnt a colon after the.
8184 	X	is even more confusing because it resembles the if statement so.
8185 	X	a solution that doesnt resemble the if statement is better imo since it should be obvious at first glance whether were dealing with an if expression or with an if.
8186 	X	placing the if in the middle somehow satisfies this.
8187 	X	many people suggest adding a new builtin instead of extending the.
8188 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id ehhg g sc pr cvs sourceforge net.
8189 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
8190 	X	modified files pep txt add if c e else.
8191 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id ehjhz gk sc pr cvs sourceforge net.
8192 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
8193 	X	modified files pep txt add and or alternative and why it doesnt always.
8194 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb x y if c else z x y if c else z note a common way to emulate an if then else expression is.
8195 	X	however this doesnt work the same way it returns expression when expression is false.
8196 	X	see faq for alternatives that work however they are pretty ugly and require much more effort to.
8197 	X	i reject this for several reasons the colon already has many uses in python even though it would actually not be ambiguous because the question mark requires a matching colon for people not used to c derived language it is hard to.
8198 	X	david ascher proposed and eric raymond even implemented a.
8199 	X	reasons the colon already has many uses in python even though it.
8200 	X	would actually not be ambiguous because the question mark.
8201 	X	requires a matching colon for people not used to c derived.
8202 	X	david ascher proposed a variant that doesnt have this problem x e if c to several people and they all thought that if c was false it.
8203 	X	so dont even think about this one.
8204 	X	x e if c to several.
8205 	X	they all thought that if c was false it would.
8206 	X	so dont even think about this one.
8207 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id ehjhz gk sc pr cvs sourceforge net.
8208 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
8209 	X	modified files pep txt add and or alternative and why it doesnt always.
8210 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb x y if c else z x y if c else z note a common way to emulate an if then else expression is.
8211 	X	however this doesnt work the same way it returns expression when expression is false.
8212 	X	see faq for alternatives that work however they are pretty ugly and require much more effort to.
8213 	X	i reject this for several reasons the colon already has many uses in python even though it would actually not be ambiguous because the question mark requires a matching colon for people not used to c derived language it is hard to.
8214 	X	david ascher proposed and eric raymond even implemented a.
8215 	X	reasons the colon already has many uses in python even though it.
8216 	X	would actually not be ambiguous because the question mark.
8217 	X	requires a matching colon for people not used to c derived.
8218 	X	david ascher proposed a variant that doesnt have this problem x e if c to several people and they all thought that if c was false it.
8219 	X	so dont even think about this one.
8220 	X	x e if c to several.
8221 	X	they all thought that if c was false it would.
8222 	X	so dont even think about this one.
8223 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id ehjhz gk sc pr cvs sourceforge net.
8224 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
8225 	X	modified files pep txt add and or alternative and why it doesnt always.
8226 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb x y if c else z x y if c else z note a common way to emulate an if then else expression is.
8227 	X	however this doesnt work the same way it returns expression when expression is false.
8228 	X	see faq for alternatives that work however they are pretty ugly and require much more effort to.
8229 	X	i reject this for several reasons the colon already has many uses in python even though it would actually not be ambiguous because the question mark requires a matching colon for people not used to c derived language it is hard to.
8230 	X	david ascher proposed and eric raymond even implemented a.
8231 	X	reasons the colon already has many uses in python even though it.
8232 	X	would actually not be ambiguous because the question mark.
8233 	X	requires a matching colon for people not used to c derived.
8234 	X	david ascher proposed a variant that doesnt have this problem x e if c to several people and they all thought that if c was false it.
8235 	X	so dont even think about this one.
8236 	X	x e if c to several.
8237 	X	they all thought that if c was false it would.
8238 	X	so dont even think about this one.
8239 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id ehku l sc pr cvs sourceforge net.
8240 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
8241 	X	modified files pep txt add when.
8242 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb leave x.
8243 	X	so dont even think about this one.
8244 	X	another variant proposes to use when instead of if.
8245 	X	i dont see the advantage of when over if it adds a new keyword which is a major extra hurdle to introduce.
8246 	X	i think that using a different keyword suggests that the semantics are different than those of an if statement but they really arent only the syntax is different.
8247 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id ehku l sc pr cvs sourceforge net.
8248 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
8249 	X	modified files pep txt add when.
8250 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb leave x.
8251 	X	so dont even think about this one.
8252 	X	another variant proposes to use when instead of if.
8253 	X	i dont see the advantage of when over if it adds a new keyword which is a major extra hurdle to introduce.
8254 	X	i think that using a different keyword suggests that the semantics are different than those of an if statement but they really arent only the syntax is different.
8255 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id ehku l sc pr cvs sourceforge net.
8256 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
8257 	X	modified files pep txt add when.
8258 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb leave x.
8259 	X	so dont even think about this one.
8260 	X	another variant proposes to use when instead of if.
8261 	X	i dont see the advantage of when over if it adds a new keyword which is a major extra hurdle to introduce.
8262 	X	i think that using a different keyword suggests that the semantics are different than those of an if statement but they really arent only the syntax is different.
8263 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id ehvdy bj sc pr cvs sourceforge net.
8264 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
8265 	X	modified files pep txt it is right associative.
8266 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb to disambiguate this in the context of other operators the.
8267 	X	else part in the middle acts like a left associative binary.
8268 	X	operator with a priority lower than that of or and higher than.
8269 	X	examples of how this works out to disambiguate this in the context of other operators the.
8270 	X	else part in the middle acts like a right associative.
8271 	X	binary operator with a priority lower than that of or and.
8272 	X	examples of how this works out.
8273 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id ehvdy bj sc pr cvs sourceforge net.
8274 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
8275 	X	modified files pep txt it is right associative.
8276 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb to disambiguate this in the context of other operators the.
8277 	X	else part in the middle acts like a left associative binary.
8278 	X	operator with a priority lower than that of or and higher than.
8279 	X	examples of how this works out to disambiguate this in the context of other operators the.
8280 	X	else part in the middle acts like a right associative.
8281 	X	binary operator with a priority lower than that of or and.
8282 	X	examples of how this works out.
8283 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id ehvdy bj sc pr cvs sourceforge net.
8284 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
8285 	X	modified files pep txt it is right associative.
8286 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb to disambiguate this in the context of other operators the.
8287 	X	else part in the middle acts like a left associative binary.
8288 	X	operator with a priority lower than that of or and higher than.
8289 	X	examples of how this works out to disambiguate this in the context of other operators the.
8290 	X	else part in the middle acts like a right associative.
8291 	X	binary operator with a priority lower than that of or and.
8292 	X	examples of how this works out.
8293 	X	from goodger users sourceforge net goodger users sourceforge net message id ehjlw ap sc pr cvs sourceforge net.
8294 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serva.
8295 	X	modified files pep txt pep txt log message fixed status.
8296 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb author guido van rossum tim peters.
8297 	X	status active content type text plain author guido van rossum tim peters.
8298 	X	status draft content type text plain.
8299 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb author guido van rossum.
8300 	X	status active content type text plain author guido van rossum.
8301 	X	status draft content type text plain.
8302 	X	from goodger users sourceforge net goodger users sourceforge net message id ehjlw ap sc pr cvs sourceforge net.
8303 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serva.
8304 	X	modified files pep txt pep txt log message fixed status.
8305 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb author guido van rossum tim peters.
8306 	X	status active content type text plain author guido van rossum tim peters.
8307 	X	status draft content type text plain.
8308 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb author guido van rossum.
8309 	X	status active content type text plain author guido van rossum.
8310 	X	status draft content type text plain.
8311 	X	in reply to ehjlw ap sc pr cvs sourceforge net references ehjlw ap sc pr cvs sourceforge net message id.
8312 	X	goodger goodger goodger users sourceforge net writes.
8313 	X	goodger log message goodger fixed status goodger index pep txt active draft.
8314 	X	judging from the traffic on c l py surrounding this pep id just its still active.
8315 	X	in reply to ehjlw ap sc pr cvs sourceforge net references ehjlw ap sc pr cvs sourceforge net message id.
8316 	X	goodger goodger goodger users sourceforge net writes.
8317 	X	goodger log message goodger fixed status goodger index pep txt active draft.
8318 	X	judging from the traffic on c l py surrounding this pep id just its still active.
8319 	X	skip montanaro wrote goodger goodger goodger users sourceforge net writes goodger log message goodger fixed status goodger index pep txt active draft.
8320 	X	judging from the traffic on c l py surrounding this pep id just its still active.
8321 	X	active doesnt apply to standards track peps no matter how active the discussion.
8322 	X	some informational peps may also have a status of active if they are never meant to be.
8323 	X	peps that are meant to be completed go draft accepted final or rejected if unsuccessful after which they become historical.
8324 	X	david goodger http starship python net goodger python enhancement proposal pep editor http www python org peps.
8325 	X	please cc all pep correspondence to peps python org.
8326 	X	skip montanaro wrote goodger goodger goodger users sourceforge net writes goodger log message goodger fixed status goodger index pep txt active draft.
8327 	X	judging from the traffic on c l py surrounding this pep id just its still active.
8328 	X	active doesnt apply to standards track peps no matter how active the discussion.
8329 	X	some informational peps may also have a status of active if they are never meant to be.
8330 	X	peps that are meant to be completed go draft accepted final or rejected if unsuccessful after which they become historical.
8331 	X	david goodger http starship python net goodger python enhancement proposal pep editor http www python org peps.
8332 	X	please cc all pep correspondence to peps python org.
8333 	X	note a common way to emulate an if then else expression is alternatives many c derived languages use this syntax.
8334 	X	adding a new keyword is to be generally.
8335 	X	but the form is clear short and.
8336 	X	reasons the colon already has many uses in python even though it.
8337 	X	confusion with function syntax which implies that all the arguments are evaluated rather than short.
8338 	X	would actually not be ambiguous because the question mark requires a matching colon for people not used to c derived language it is hard to.
8339 	X	this idea was presented by the bdfl and should be considered a contender for the final.
8340 	X	alternatives the original version of this pep proposed the following syntax.
8341 	X	the exact keyword is still an open.
8342 	X	the out of order arrangement was found to be too uncomfortable for many of participants in the.
8343 	X	many c derived languages use this syntax.
8344 	X	but it looks like a typo and can be confused with if and only if which has a different well defined mathematical.
8345 	X	the fourth position is much more.
8346 	X	several reasons the colon already has many uses in python even.
8347 	X	function cond is trivially easy to implement and fits easily.
8348 	X	though it would actually not be ambiguous because the question mark requires a matching colon for people not used to c derived language it is hard to.
8349 	X	if we could live with adding a new keyword we could use.
8350 	X	if condition then expression else expression.
8351 	X	python will find it trivial to.
8352 	X	apart from the problem of introducing a new keyword for a minor.
8353 	X	the downside is that it does not provide the sought after short circuit.
8354 	X	feature this also suffers from ambiguity at the start of a.
8355 	X	evaluation see the discussion below on the need for this.
8356 	X	the bigger downside is that the bdfl opposes any solution that.
8357 	X	if verbose then sys stdout write hello n else none could be an syntactically correct expression statement but starts with if which makes the parser believe it is the start of an.
8358 	X	to resolve this the syntax would have to require.
8359 	X	keeping the language simple and concise maintaining backwards.
8360 	X	advantage of evaluating strictly from left to right not that that is a requirement for were pythonic list comprehensions dont.
8361 	X	compatibility and that any every use cases can already be already.
8362 	X	to deal with the problem of adding a new keyword this variant has.
8363 	X	expressed in terms of if and else.
8364 	X	this has the same ambiguity problem as the previous one i would.
8365 	X	an exception as they require the conditional to be factored out into a separate function.
8366 	X	even say more so and lacks.
8367 	X	the arguments against doing nothing are that the other choices.
8368 	X	allow greater economy of expression and that current practices.
8369 	X	why there isnt a colon after the.
8370 	X	show a propensity for erroneous uses of and or or one their.
8371 	X	if condition expression else expression is even more confusing because it resembles the if statement so.
8372 	X	it should also be mentioned that most supporters of any of the.
8373 	X	a solution that doesnt resemble the if statement is.
8374 	X	first four positions do not want an imperfect solution and would sooner have no change than create a wart to attain.
8375 	X	better imo since it should be obvious at first glance whether.
8376 	X	were dealing with an if expression or with an if.
8377 	X	placing the if in the middle somehow satisfies this.
8378 	X	the principal difference between the ternary operator and the cond function is that the latter provides an expression.
8379 	X	many people suggest adding a new builtin instead of extending the.
8380 	X	form but does not provide short circuit.
8381 	X	syntax of the language e g.
8382 	X	short circuit evaluation is desirable on three occasions.
8383 	X	when an expression has side effects when one or both of the expressions are resource intensive when the condition serves as a guard for the validity of the.
8384 	X	this wont work the way a syntax extension will because both.
8385 	X	example where all three reasons apply.
8386 	X	expression and expression must be evaluated before the function is.
8387 	X	data isinstance source file source readlines.
8388 	X	theres no way to short circuit the expression.
8389 	X	it is proposed to make the else part.
8390 	X	readlines moves the file pointer for long sources both alternatives take time split is only valid for strings and readlines is only valid for file.
8391 	X	supporters of the cond function point out that the need for.
8392 	X	x e if c to several.
8393 	X	code directories they found that if else did not occur often.
8394 	X	they all thought that if c was false it would.
8395 	X	and of those only a few contained expressions that could be.
8396 	X	helped by cond or a ternary operator and that most of those.
8397 	X	so dont even think about this one.
8398 	X	had no need for short circuit.
8399 	X	another variant proposes to use when instead of if.
8400 	X	suffice for most needs and would spare efforts to alter the.
8401 	X	i dont see the advantage of when over if it adds a new.
8402 	X	keyword which is a major extra hurdle to introduce.
8403 	X	more supporting evidence comes from scans of c code.
8404 	X	i think that using a different keyword suggests that the semantics are.
8405 	X	bases which show that its ternary operator used very rarely as a percentage of lines of code.
8406 	X	different than those of an if statement but they really arent.
8407 	X	a counter point to that analysis is that the availability of a ternary operator helped the programmer in every case because it spared the need to search for side.
8408 	X	further it would preclude errors arising from distant.
8409 	X	raymond hettinger proposed a variant that removes the.
8410 	X	the latter case has become more of a reality with the advent of properties.
8411 	X	the and are not arbitrary as they strongly suggest testing and.
8412 	X	where even attribute access can be given side.
8413 	X	another merit is that that existing operators are not.
8414 	X	still the point is moot since the bdfl opposes solutions which do not provide short circuit.
8415 	X	having two characters at each step also.
8416 	X	from rhettinger users sourceforge net rhettinger users sourceforge net message id eitd xf sc pr cvs sourceforge net.
8417 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
8418 	X	alas the bdfl prefers the proposed syntax and considers this as.
8419 	X	modified files pep txt updated the pep for.
8420 	X	out of order evaluation is out of.
8421 	X	many people suggest adding a new builtin instead of extending the.
8422 	X	so are ideas that do not provide for short.
8423 	X	syntax of the language e g.
8424 	X	if condition expression else condition is in.
8425 	X	condition expression expression is a new.
8426 	X	this wont work the way a syntax extension will because both.
8427 	X	cond condition expression condition is viable if implemented as a keyword and has short circuit.
8428 	X	expression and expression must be evaluated before the function is.
8429 	X	added a summary of a few ideas from the last couple hundred posts from comp lang.
8430 	X	theres no way to short circuit the expression.
8431 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb last modified date.
8432 	X	summary of the current state of the discussion.
8433 	X	author guido van rossum type standards track last modified date.
8434 	X	groups are falling into one of five camps adopt a ternary operator built using punctuation.
8435 	X	author guido van rossum and raymond d hettinger type standards track the proposed syntax is as follows.
8436 	X	it would look something like condition expression expression adopt a ternary operator built using existing.
8437 	X	expression if condition else expression this is evaluated like this the proposed syntax is as follows.
8438 	X	the proposal listed above is the leading.
8439 	X	adopt a ternary operator built using a new.
8440 	X	this is evaluated like this note that at most one of expression and expression is.
8441 	X	the leading contender looks like this.
8442 	X	this is called a shortcut expression it is similar to the way the second operand of and or is only evaluated if the first operand is true.
8443 	X	cond condition expression expression adopt a function without short circuit behavior.
8444 	X	to disambiguate this in the context of other operators the else part in the middle acts like a right associative binary operator with a priority lower than that of or and higher than that of lambda.
8445 	X	examples of how this works out.
8446 	X	the first two positions are relatively.
8447 	X	x if c else y if d else z x if c else y if d else z x or y if c else z x or y if c else z x if c else y or z x if c else y or z lambda x if c else y lambda x if c else y x if c else lambda y syntaxerror x if c else y z x if c else y z x y if c else z x y if c else z.
8448 	X	some find that any form of punctuation makes the language more.
8449 	X	note a common way to emulate an if then else expression is note that at most one of expression and expression is.
8450 	X	others find that punctuation style is appropriate for expressions rather than statements and helps avoid a cobol.
8451 	X	this is called a short circuit expression it is similar to the way the second operand of and or is only evaluated if the first operand is true.
8452 	X	note a common way to emulate an if then else expression is alternatives many c derived languages use this syntax.
8453 	X	adapting existing keywords attempts to improve on punctuation.
8454 	X	through explicit meaning and a more tidy.
8455 	X	the downside is some loss of the economy of expression provided by punctuation.
8456 	X	reasons the colon already has many uses in python even though it.
8457 	X	the other downside is that it creates some degree of.
8458 	X	would actually not be ambiguous because the question mark requires a matching colon for people not used to c derived language it is hard to.
8459 	X	confusion between the two meanings and two usages of the.
8460 	X	alternatives the original version of this pep proposed the following syntax.
8461 	X	the third form introduces a new keyword and arranges the arguments.
8462 	X	the out of order arrangement was found to be too uncomfortable for many of participants in the.
8463 	X	many c derived languages use this syntax.
8464 	X	adding a new keyword is to be generally.
8465 	X	but the form is clear short and.
8466 	X	several reasons the colon already has many uses in python even.
8467 	X	confusion with function syntax which implies that all the arguments are evaluated rather than short.
8468 	X	though it would actually not be ambiguous because the question mark requires a matching colon for people not used to c derived language it is hard to.
8469 	X	this idea was presented by the bdfl and should be considered a contender for the final.
8470 	X	if we could live with adding a new keyword we could use.
8471 	X	the exact keyword is still an open.
8472 	X	if condition then expression else expression.
8473 	X	apart from the problem of introducing a new keyword for a minor.
8474 	X	but it looks like a typo and can be confused with if and only if which has a different well defined mathematical.
8475 	X	feature this also suffers from ambiguity at the start of a.
8476 	X	the fourth position is much more.
8477 	X	if verbose then sys stdout write hello n else none could be an syntactically correct expression statement but starts with if which makes the parser believe it is the start of an.
8478 	X	function cond is trivially easy to implement and fits easily.
8479 	X	to resolve this the syntax would have to require.
8480 	X	python will find it trivial to.
8481 	X	advantage of evaluating strictly from left to right not that that is a requirement for were pythonic list comprehensions dont.
8482 	X	the downside is that it does not provide the sought after short circuit.
8483 	X	to deal with the problem of adding a new keyword this variant has.
8484 	X	evaluation see the discussion below on the need for this.
8485 	X	the bigger downside is that the bdfl opposes any solution that.
8486 	X	this has the same ambiguity problem as the previous one i would.
8487 	X	even say more so and lacks.
8488 	X	why there isnt a colon after the.
8489 	X	keeping the language simple and concise maintaining backwards.
8490 	X	compatibility and that any every use cases can already be already.
8491 	X	if condition expression else expression is even more confusing because it resembles the if statement so.
8492 	X	expressed in terms of if and else.
8493 	X	a solution that doesnt resemble the if statement is.
8494 	X	better imo since it should be obvious at first glance whether.
8495 	X	an exception as they require the conditional to be factored out into a separate function.
8496 	X	were dealing with an if expression or with an if.
8497 	X	the arguments against doing nothing are that the other choices.
8498 	X	placing the if in the middle somehow satisfies this.
8499 	X	allow greater economy of expression and that current practices.
8500 	X	many people suggest adding a new builtin instead of extending the.
8501 	X	show a propensity for erroneous uses of and or or one their.
8502 	X	syntax of the language e g.
8503 	X	it should also be mentioned that most supporters of any of the.
8504 	X	this wont work the way a syntax extension will because both.
8505 	X	first four positions do not want an imperfect solution and would sooner have no change than create a wart to attain.
8506 	X	expression and expression must be evaluated before the function is.
8507 	X	theres no way to short circuit the expression.
8508 	X	it is proposed to make the else part.
8509 	X	the principal difference between the ternary operator and the cond function is that the latter provides an expression.
8510 	X	form but does not provide short circuit.
8511 	X	short circuit evaluation is desirable on three occasions.
8512 	X	when an expression has side effects when one or both of the expressions are resource intensive when the condition serves as a guard for the validity of the.
8513 	X	x e if c to several.
8514 	X	example where all three reasons apply.
8515 	X	they all thought that if c was false it would.
8516 	X	data isinstance source file source readlines.
8517 	X	so dont even think about this one.
8518 	X	readlines moves the file pointer for long sources both alternatives take time split is only valid for strings and readlines is only valid for file.
8519 	X	another variant proposes to use when instead of if.
8520 	X	supporters of the cond function point out that the need for.
8521 	X	i dont see the advantage of when over if it adds a new.
8522 	X	keyword which is a major extra hurdle to introduce.
8523 	X	code directories they found that if else did not occur often.
8524 	X	i think that using a different keyword suggests that the semantics are.
8525 	X	and of those only a few contained expressions that could be.
8526 	X	different than those of an if statement but they really arent.
8527 	X	helped by cond or a ternary operator and that most of those.
8528 	X	had no need for short circuit.
8529 	X	raymond hettinger proposed a variant that removes the.
8530 	X	suffice for most needs and would spare efforts to alter the.
8531 	X	the and are not arbitrary as they strongly suggest testing and.
8532 	X	another merit is that that existing operators are not.
8533 	X	more supporting evidence comes from scans of c code.
8534 	X	having two characters at each step also.
8535 	X	bases which show that its ternary operator used very rarely as a percentage of lines of code.
8536 	X	a counter point to that analysis is that the availability of a ternary operator helped the programmer in every case because it spared the need to search for side.
8537 	X	alas the bdfl prefers the proposed syntax and considers this as.
8538 	X	further it would preclude errors arising from distant.
8539 	X	many people suggest adding a new builtin instead of extending the.
8540 	X	the latter case has become more of a reality with the advent of properties.
8541 	X	syntax of the language e g.
8542 	X	where even attribute access can be given side.
8543 	X	still the point is moot since the bdfl opposes solutions which do not provide short circuit.
8544 	X	this wont work the way a syntax extension will because both.
8545 	X	from rhettinger users sourceforge net rhettinger users sourceforge net message id eitd xf sc pr cvs sourceforge net.
8546 	X	expression and expression must be evaluated before the function is.
8547 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
8548 	X	theres no way to short circuit the expression.
8549 	X	modified files pep txt updated the pep for.
8550 	X	summary of the current state of the discussion.
8551 	X	out of order evaluation is out of.
8552 	X	groups are falling into one of five camps adopt a ternary operator built using punctuation.
8553 	X	so are ideas that do not provide for short.
8554 	X	it would look something like condition expression expression adopt a ternary operator built using existing.
8555 	X	if condition expression else condition is in.
8556 	X	the proposal listed above is the leading.
8557 	X	condition expression expression is a new.
8558 	X	adopt a ternary operator built using a new.
8559 	X	cond condition expression condition is viable if implemented as a keyword and has short circuit.
8560 	X	the leading contender looks like this.
8561 	X	added a summary of a few ideas from the last couple hundred posts from comp lang.
8562 	X	cond condition expression expression adopt a function without short circuit behavior.
8563 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb last modified date.
8564 	X	author guido van rossum type standards track last modified date.
8565 	X	the first two positions are relatively.
8566 	X	author guido van rossum and raymond d hettinger type standards track the proposed syntax is as follows.
8567 	X	some find that any form of punctuation makes the language more.
8568 	X	expression if condition else expression this is evaluated like this the proposed syntax is as follows.
8569 	X	others find that punctuation style is appropriate for expressions rather than statements and helps avoid a cobol.
8570 	X	this is evaluated like this note that at most one of expression and expression is.
8571 	X	adapting existing keywords attempts to improve on punctuation.
8572 	X	this is called a shortcut expression it is similar to the way the second operand of and or is only evaluated if the first operand is true.
8573 	X	through explicit meaning and a more tidy.
8574 	X	to disambiguate this in the context of other operators the else part in the middle acts like a right associative binary operator with a priority lower than that of or and higher than that of lambda.
8575 	X	the downside is some loss of the economy of expression provided by punctuation.
8576 	X	examples of how this works out.
8577 	X	the other downside is that it creates some degree of.
8578 	X	x if c else y if d else z x if c else y if d else z x or y if c else z x or y if c else z x if c else y or z x if c else y or z lambda x if c else y lambda x if c else y x if c else lambda y syntaxerror x if c else y z x if c else y z x y if c else z x y if c else z.
8579 	X	confusion between the two meanings and two usages of the.
8580 	X	note a common way to emulate an if then else expression is note that at most one of expression and expression is.
8581 	X	the third form introduces a new keyword and arranges the arguments.
8582 	X	this is called a short circuit expression it is similar to the way the second operand of and or is only evaluated if the first operand is true.
8583 	X	note a common way to emulate an if then else expression is alternatives many c derived languages use this syntax.
8584 	X	adding a new keyword is to be generally.
8585 	X	but the form is clear short and.
8586 	X	reasons the colon already has many uses in python even though it.
8587 	X	confusion with function syntax which implies that all the arguments are evaluated rather than short.
8588 	X	would actually not be ambiguous because the question mark requires a matching colon for people not used to c derived language it is hard to.
8589 	X	this idea was presented by the bdfl and should be considered a contender for the final.
8590 	X	alternatives the original version of this pep proposed the following syntax.
8591 	X	the exact keyword is still an open.
8592 	X	the out of order arrangement was found to be too uncomfortable for many of participants in the.
8593 	X	many c derived languages use this syntax.
8594 	X	but it looks like a typo and can be confused with if and only if which has a different well defined mathematical.
8595 	X	the fourth position is much more.
8596 	X	several reasons the colon already has many uses in python even.
8597 	X	function cond is trivially easy to implement and fits easily.
8598 	X	though it would actually not be ambiguous because the question mark requires a matching colon for people not used to c derived language it is hard to.
8599 	X	if we could live with adding a new keyword we could use.
8600 	X	if condition then expression else expression.
8601 	X	python will find it trivial to.
8602 	X	apart from the problem of introducing a new keyword for a minor.
8603 	X	the downside is that it does not provide the sought after short circuit.
8604 	X	feature this also suffers from ambiguity at the start of a.
8605 	X	evaluation see the discussion below on the need for this.
8606 	X	the bigger downside is that the bdfl opposes any solution that.
8607 	X	if verbose then sys stdout write hello n else none could be an syntactically correct expression statement but starts with if which makes the parser believe it is the start of an.
8608 	X	to resolve this the syntax would have to require.
8609 	X	keeping the language simple and concise maintaining backwards.
8610 	X	advantage of evaluating strictly from left to right not that that is a requirement for were pythonic list comprehensions dont.
8611 	X	compatibility and that any every use cases can already be already.
8612 	X	to deal with the problem of adding a new keyword this variant has.
8613 	X	expressed in terms of if and else.
8614 	X	this has the same ambiguity problem as the previous one i would.
8615 	X	an exception as they require the conditional to be factored out into a separate function.
8616 	X	even say more so and lacks.
8617 	X	the arguments against doing nothing are that the other choices.
8618 	X	allow greater economy of expression and that current practices.
8619 	X	why there isnt a colon after the.
8620 	X	show a propensity for erroneous uses of and or or one their.
8621 	X	if condition expression else expression is even more confusing because it resembles the if statement so.
8622 	X	it should also be mentioned that most supporters of any of the.
8623 	X	a solution that doesnt resemble the if statement is.
8624 	X	first four positions do not want an imperfect solution and would sooner have no change than create a wart to attain.
8625 	X	better imo since it should be obvious at first glance whether.
8626 	X	were dealing with an if expression or with an if.
8627 	X	placing the if in the middle somehow satisfies this.
8628 	X	the principal difference between the ternary operator and the cond function is that the latter provides an expression.
8629 	X	many people suggest adding a new builtin instead of extending the.
8630 	X	form but does not provide short circuit.
8631 	X	syntax of the language e g.
8632 	X	short circuit evaluation is desirable on three occasions.
8633 	X	when an expression has side effects when one or both of the expressions are resource intensive when the condition serves as a guard for the validity of the.
8634 	X	this wont work the way a syntax extension will because both.
8635 	X	example where all three reasons apply.
8636 	X	expression and expression must be evaluated before the function is.
8637 	X	data isinstance source file source readlines.
8638 	X	theres no way to short circuit the expression.
8639 	X	it is proposed to make the else part.
8640 	X	readlines moves the file pointer for long sources both alternatives take time split is only valid for strings and readlines is only valid for file.
8641 	X	supporters of the cond function point out that the need for.
8642 	X	x e if c to several.
8643 	X	code directories they found that if else did not occur often.
8644 	X	they all thought that if c was false it would.
8645 	X	and of those only a few contained expressions that could be.
8646 	X	helped by cond or a ternary operator and that most of those.
8647 	X	so dont even think about this one.
8648 	X	had no need for short circuit.
8649 	X	another variant proposes to use when instead of if.
8650 	X	suffice for most needs and would spare efforts to alter the.
8651 	X	i dont see the advantage of when over if it adds a new.
8652 	X	keyword which is a major extra hurdle to introduce.
8653 	X	more supporting evidence comes from scans of c code.
8654 	X	i think that using a different keyword suggests that the semantics are.
8655 	X	bases which show that its ternary operator used very rarely as a percentage of lines of code.
8656 	X	different than those of an if statement but they really arent.
8657 	X	a counter point to that analysis is that the availability of a ternary operator helped the programmer in every case because it spared the need to search for side.
8658 	X	further it would preclude errors arising from distant.
8659 	X	raymond hettinger proposed a variant that removes the.
8660 	X	the latter case has become more of a reality with the advent of properties.
8661 	X	the and are not arbitrary as they strongly suggest testing and.
8662 	X	where even attribute access can be given side.
8663 	X	another merit is that that existing operators are not.
8664 	X	still the point is moot since the bdfl opposes solutions which do not provide short circuit.
8665 	X	having two characters at each step also.
8666 	X	alas the bdfl prefers the proposed syntax and considers this as.
8667 	X	many people suggest adding a new builtin instead of extending the.
8668 	X	syntax of the language e g.
8669 	X	this wont work the way a syntax extension will because both.
8670 	X	from rhettinger users sourceforge net rhettinger users sourceforge net message id eitd xf sc pr cvs sourceforge net.
8671 	X	expression and expression must be evaluated before the function is.
8672 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
8673 	X	theres no way to short circuit the expression.
8674 	X	modified files pep txt updated the pep for.
8675 	X	summary of the current state of the discussion.
8676 	X	out of order evaluation is out of.
8677 	X	groups are falling into one of five camps adopt a ternary operator built using punctuation.
8678 	X	so are ideas that do not provide for short.
8679 	X	it would look something like condition expression expression adopt a ternary operator built using existing.
8680 	X	if condition expression else condition is in.
8681 	X	the proposal listed above is the leading.
8682 	X	condition expression expression is a new.
8683 	X	adopt a ternary operator built using a new.
8684 	X	cond condition expression condition is viable if implemented as a keyword and has short circuit.
8685 	X	the leading contender looks like this.
8686 	X	added a summary of a few ideas from the last couple hundred posts from comp lang.
8687 	X	cond condition expression expression adopt a function without short circuit behavior.
8688 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb last modified date.
8689 	X	author guido van rossum type standards track last modified date.
8690 	X	the first two positions are relatively.
8691 	X	author guido van rossum and raymond d hettinger type standards track the proposed syntax is as follows.
8692 	X	some find that any form of punctuation makes the language more.
8693 	X	expression if condition else expression this is evaluated like this the proposed syntax is as follows.
8694 	X	others find that punctuation style is appropriate for expressions rather than statements and helps avoid a cobol.
8695 	X	this is evaluated like this note that at most one of expression and expression is.
8696 	X	adapting existing keywords attempts to improve on punctuation.
8697 	X	this is called a shortcut expression it is similar to the way the second operand of and or is only evaluated if the first operand is true.
8698 	X	through explicit meaning and a more tidy.
8699 	X	to disambiguate this in the context of other operators the else part in the middle acts like a right associative binary operator with a priority lower than that of or and higher than that of lambda.
8700 	X	the downside is some loss of the economy of expression provided by punctuation.
8701 	X	examples of how this works out.
8702 	X	the other downside is that it creates some degree of.
8703 	X	x if c else y if d else z x if c else y if d else z x or y if c else z x or y if c else z x if c else y or z x if c else y or z lambda x if c else y lambda x if c else y x if c else lambda y syntaxerror x if c else y z x if c else y z x y if c else z x y if c else z.
8704 	X	confusion between the two meanings and two usages of the.
8705 	X	note a common way to emulate an if then else expression is note that at most one of expression and expression is.
8706 	X	the third form introduces a new keyword and arranges the arguments.
8707 	X	this is called a short circuit expression it is similar to the way the second operand of and or is only evaluated if the first operand is true.
8708 	X	mark requires a matching colon for people not used to c derived language it is hard to.
8709 	X	condition expression expression the and are not arbitrary as they strongly suggest testing and.
8710 	X	directories they found that if else did not occur often and of.
8711 	X	another merit is that that existing operators are not.
8712 	X	those only a few contained expressions that could be helped by.
8713 	X	having two characters at each step also.
8714 	X	cond or a ternary operator and that most of those had no need for short circuit.
8715 	X	alas the bdfl prefers the proposed syntax and considers this as.
8716 	X	most needs and would spare efforts to alter the syntax of the.
8717 	X	more supporting evidence comes from scans of c code bases which show that its ternary operator used very rarely as a percentage of lines of code.
8718 	X	condition expression expression the and are not arbitrary as they strongly suggest testing and.
8719 	X	a counter point to that analysis is that the availability of a.
8720 	X	another merit is that that existing operators are not.
8721 	X	ternary operator helped the programmer in every case because it.
8722 	X	having two characters at each step also helps.
8723 	X	spared the need to search for side.
8724 	X	preclude errors arising from distant modifications which introduce.
8725 	X	prefers the proposed syntax and considers this alternative too.
8726 	X	the latter case has become more of a reality with the advent of properties where even attribute access can be given.
8727 	X	syntax of the language e g.
8728 	X	the bdfls position is that short circuit behavior is essential for an if then else construct to be added to the.
8729 	X	ifelse condition expression expression this wont work the way a syntax extension will because both expression and expression must be evaluated before the function is.
8730 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id eibsx ib sc pr cvs sourceforge net.
8731 	X	theres no way to short circuit the expression.
8732 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
8733 	X	syntax of the language e g.
8734 	X	cond condition expression expression this wont work the way a syntax extension will because both expression and expression must be evaluated before the function is.
8735 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb created feb.
8736 	X	theres no way to short circuit the expression.
8737 	X	it could work if cond or some other name were.
8738 	X	post history feb feb if the community cant decide ill reject the.
8739 	X	made a keyword but that has all the disadvantages of adding a new.
8740 	X	after unprecedented community response very food arguments were made both pro and con this pep is revised with the help of raymond.
8741 	X	keyword plus confusing syntax it looks like a function call so a casual reader might expect both expression and expression to be.
8742 	X	without going through a complete revision history the main changes are a different proposed syntax an overview of proposed alternatives the state of the curent discussion and a discussion of short circuit.
8743 	X	some find that any form of punctuation makes the language more.
8744 	X	proposal note that at most one of expression and expression is.
8745 	X	others find that punctuation style is appropriate for expressions rather than statements and helps avoid a cobol.
8746 	X	this is called a short circuit expression it is similar to the way the second operand of and or is only evaluated if the first operand is true.
8747 	X	style plus times adapting existing keywords attempts to improve on punctuation some find that any form of punctuation makes the language more.
8748 	X	note a common way to emulate an if then else expression is note that at most one of expression and expression is.
8749 	X	others find that punctuation style is appropriate for.
8750 	X	this is called a short circuit expression it is.
8751 	X	expressions rather than statements and helps avoid a cobol style plus times adapting existing keywords attempts to improve on punctuation the third form introduces a new keyword and arranges the arguments.
8752 	X	similar to the way the second operand of and or is only evaluated if the first operand is true.
8753 	X	a common way to emulate an if then else expression is however this doesnt work the same way it returns expression when expression is false.
8754 	X	adding a new keyword is to be generally.
8755 	X	but the form is clear short and.
8756 	X	work however they are pretty ugly and require much more.
8757 	X	confusion with function syntax which implies that all the arguments are evaluated rather than short.
8758 	X	however this doesnt work the same way it returns expression when expression is false.
8759 	X	this idea was presented by the bdfl and should be considered a contender for the final.
8760 	X	the exact keyword is still an open.
8761 	X	work however they are pretty ugly and require much more effort to.
8762 	X	the out of order arrangement was found to be too uncomfortable for many of participants in the.
8763 	X	but it looks like a typo and can be confused with if and only if which has a different well defined mathematical.
8764 	X	the out of order arrangement was found to be too uncomfortable for many of participants in the discussion especially when expression is long its easy to miss the conditional while.
8765 	X	the fourth position is much more.
8766 	X	adding a new function cond is trivially easy to implement and fits easily within the existing python.
8767 	X	the bdfl rejected this for several reasons the colon already has many uses in python even.
8768 	X	though it would actually not be ambiguous because the question mark.
8769 	X	python will find it trivial to.
8770 	X	requires a matching colon for people not used to c derived language it is hard to.
8771 	X	the downside is that it does not provide the sought after short circuit.
8772 	X	evaluation see the discussion below on the need for this.
8773 	X	the bdfl rejected this for several reasons the colon already has many uses in python even.
8774 	X	the bigger downside is that the bdfl opposes any solution that.
8775 	X	though it would actually not be ambiguous because the question.
8776 	X	mark requires a matching colon for people not used to c derived language it is hard to.
8777 	X	arguments in favor include keeping the language simple and concise maintaining backwards compatibility and that any every use cases can already be already.
8778 	X	condition expression expression the and are not arbitrary as they strongly suggest testing and.
8779 	X	expressed in terms of if and else.
8780 	X	another merit is that that existing operators are not.
8781 	X	having two characters at each step also.
8782 	X	an exception as they require the conditional to be factored out into a separate function.
8783 	X	the arguments against doing nothing are that the other choices the third form introduces a new keyword and arranges the arguments.
8784 	X	alas the bdfl prefers the proposed syntax and considers this as.
8785 	X	adding a new keyword is to be generally.
8786 	X	condition expression expression the and are not arbitrary as they strongly suggest testing and.
8787 	X	but the form is clear short and.
8788 	X	another merit is that that existing operators are not.
8789 	X	having two characters at each step also helps.
8790 	X	possible confusion with function syntax which implies that all the.
8791 	X	arguments are evaluated rather than short.
8792 	X	this idea was presented by the bdfl and should be considered a contender for the final.
8793 	X	prefers the proposed syntax and considers this alternative too.
8794 	X	the exact keyword is still an open.
8795 	X	syntax of the language e g.
8796 	X	proposal was iif but it looks like a typo and can be confused with if and only if which has a different well defined.
8797 	X	ifelse condition expression expression this wont work the way a syntax extension will because both expression and expression must be evaluated before the function is.
8798 	X	the fourth position is much more.
8799 	X	theres no way to short circuit the expression.
8800 	X	adding a new function cond is trivially easy to implement and fits easily within the existing python.
8801 	X	syntax of the language e g.
8802 	X	cond condition expression expression this wont work the way a syntax extension will because both expression and expression must be evaluated before the function is.
8803 	X	python will find it trivial to.
8804 	X	theres no way to short circuit the expression.
8805 	X	it could work if cond or some other name were.
8806 	X	does not provide the sought after short circuit evaluation see the discussion below on the need for this.
8807 	X	made a keyword but that has all the disadvantages of adding a new.
8808 	X	the bigger downside is that the bdfl opposes any solution that does not provide.
8809 	X	keyword plus confusing syntax it looks like a function call so a casual reader might expect both expression and expression to be.
8810 	X	some find that any form of punctuation makes the language more.
8811 	X	others find that punctuation style is appropriate for expressions rather than statements and helps avoid a cobol.
8812 	X	arguments in favor include keeping the language simple and concise maintaining backwards compatibility and that any every use cases can already be already.
8813 	X	style plus times adapting existing keywords attempts to improve on punctuation some find that any form of punctuation makes the language more.
8814 	X	expressed in terms of if and else.
8815 	X	others find that punctuation style is appropriate for.
8816 	X	expressions rather than statements and helps avoid a cobol style plus times adapting existing keywords attempts to improve on punctuation the third form introduces a new keyword and arranges the arguments.
8817 	X	exception as they require the conditional to be factored out into.
8818 	X	adding a new keyword is to be generally.
8819 	X	the arguments against doing nothing are that the other choices it should also be mentioned that most supporters of any of the.
8820 	X	but the form is clear short and.
8821 	X	first four positions do not want an imperfect solution and would sooner have no change than create a wart to attain.
8822 	X	confusion with function syntax which implies that all the arguments are evaluated rather than short.
8823 	X	this idea was presented by the bdfl and should be considered a contender for the final.
8824 	X	the principal difference between the ternary operator and the cond function is that the latter provides an expression.
8825 	X	the exact keyword is still an open.
8826 	X	form but does not provide short circuit.
8827 	X	short circuit evaluation is desirable on three occasions it should also be mentioned that most supporters of any of the.
8828 	X	but it looks like a typo and can be confused with if and only if which has a different well defined mathematical.
8829 	X	first four positions do not want an imperfect solution and would.
8830 	X	the fourth position is much more.
8831 	X	sooner have no change than create a wart to attain their desired.
8832 	X	adding a new function cond is trivially easy to implement and fits easily within the existing python.
8833 	X	the principal difference between the ternary operator and the.
8834 	X	python will find it trivial to.
8835 	X	cond function is that the latter provides an expression form but.
8836 	X	the downside is that it does not provide the sought after short circuit.
8837 	X	evaluation see the discussion below on the need for this.
8838 	X	short circuit evaluation is desirable on three occasions supporters of the cond function point out that the need for.
8839 	X	the bigger downside is that the bdfl opposes any solution that.
8840 	X	code directories they found that if else did not occur often.
8841 	X	arguments in favor include keeping the language simple and concise maintaining backwards compatibility and that any every use cases can already be already.
8842 	X	and of those only a few contained expressions that could be.
8843 	X	expressed in terms of if and else.
8844 	X	helped by cond or a ternary operator and that most of those.
8845 	X	had no need for short circuit.
8846 	X	an exception as they require the conditional to be factored out into a separate function.
8847 	X	the arguments against doing nothing are that the other choices the third form introduces a new keyword and arranges the arguments.
8848 	X	suffice for most needs and would spare efforts to alter the.
8849 	X	adding a new keyword is to be generally.
8850 	X	more supporting evidence comes from scans of c code.
8851 	X	but the form is clear short and.
8852 	X	bases which show that its ternary operator used very rarely as a percentage of lines of code.
8853 	X	a counter point to that analysis is that the availability of a ternary operator helped the programmer in every case because it spared the need to search for side.
8854 	X	possible confusion with function syntax which implies that all the.
8855 	X	further it would preclude errors arising from distant.
8856 	X	arguments are evaluated rather than short.
8857 	X	this idea was presented by the bdfl and should be considered a contender for the final.
8858 	X	the latter case has become more of a reality with the advent of properties.
8859 	X	the exact keyword is still an open.
8860 	X	where even attribute access can be given side.
8861 	X	proposal was iif but it looks like a typo and can be confused with if and only if which has a different well defined.
8862 	X	still the point is moot since the bdfl opposes solutions which do not provide short circuit.
8863 	X	the fourth position is much more.
8864 	X	supporters of the cond function point out that the need for.
8865 	X	adding a new function cond is trivially easy to implement and fits easily within the existing python.
8866 	X	python will find it trivial to.
8867 	X	directories they found that if else did not occur often and of.
8868 	X	those only a few contained expressions that could be helped by.
8869 	X	does not provide the sought after short circuit evaluation see the discussion below on the need for this.
8870 	X	cond or a ternary operator and that most of those had no need for short circuit.
8871 	X	the bigger downside is that the bdfl opposes any solution that does not provide.
8872 	X	most needs and would spare efforts to alter the syntax of the.
8873 	X	more supporting evidence comes from scans of c code bases which show that its ternary operator used very rarely as a percentage of lines of code.
8874 	X	arguments in favor include keeping the language simple and concise maintaining backwards compatibility and that any every use cases can already be already.
8875 	X	a counter point to that analysis is that the availability of a.
8876 	X	expressed in terms of if and else.
8877 	X	ternary operator helped the programmer in every case because it.
8878 	X	spared the need to search for side.
8879 	X	exception as they require the conditional to be factored out into.
8880 	X	preclude errors arising from distant modifications which introduce.
8881 	X	the arguments against doing nothing are that the other choices it should also be mentioned that most supporters of any of the.
8882 	X	the latter case has become more of a reality with the advent of properties where even attribute access can be given.
8883 	X	first four positions do not want an imperfect solution and would sooner have no change than create a wart to attain.
8884 	X	the bdfls position is that short circuit behavior is essential for an if then else construct to be added to the.
8885 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id eibsx ib sc pr cvs sourceforge net.
8886 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
8887 	X	the principal difference between the ternary operator and the cond function is that the latter provides an expression.
8888 	X	form but does not provide short circuit.
8889 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb created feb.
8890 	X	short circuit evaluation is desirable on three occasions it should also be mentioned that most supporters of any of the.
8891 	X	first four positions do not want an imperfect solution and would.
8892 	X	post history feb feb if the community cant decide ill reject the.
8893 	X	sooner have no change than create a wart to attain their desired.
8894 	X	after unprecedented community response very food arguments were made both pro and con this pep is revised with the help of raymond.
8895 	X	without going through a complete revision history the main changes are a different proposed syntax an overview of proposed alternatives the state of the curent discussion and a discussion of short circuit.
8896 	X	the principal difference between the ternary operator and the.
8897 	X	proposal note that at most one of expression and expression is.
8898 	X	cond function is that the latter provides an expression form but.
8899 	X	this is called a short circuit expression it is similar to the way the second operand of and or is only evaluated if the first operand is true.
8900 	X	note a common way to emulate an if then else expression is note that at most one of expression and expression is.
8901 	X	short circuit evaluation is desirable on three occasions supporters of the cond function point out that the need for.
8902 	X	this is called a short circuit expression it is.
8903 	X	similar to the way the second operand of and or is only evaluated if the first operand is true.
8904 	X	a common way to emulate an if then else expression is however this doesnt work the same way it returns expression when expression is false.
8905 	X	code directories they found that if else did not occur often.
8906 	X	and of those only a few contained expressions that could be.
8907 	X	work however they are pretty ugly and require much more.
8908 	X	helped by cond or a ternary operator and that most of those.
8909 	X	had no need for short circuit.
8910 	X	however this doesnt work the same way it returns expression when expression is false.
8911 	X	suffice for most needs and would spare efforts to alter the.
8912 	X	work however they are pretty ugly and require much more effort to.
8913 	X	the out of order arrangement was found to be too uncomfortable for many of participants in the.
8914 	X	more supporting evidence comes from scans of c code.
8915 	X	the out of order arrangement was found to be too uncomfortable for many of participants in the discussion especially when expression is long its easy to miss the conditional while.
8916 	X	bases which show that its ternary operator used very rarely as a percentage of lines of code.
8917 	X	a counter point to that analysis is that the availability of a ternary operator helped the programmer in every case because it spared the need to search for side.
8918 	X	the bdfl rejected this for several reasons the colon already has many uses in python even.
8919 	X	further it would preclude errors arising from distant.
8920 	X	though it would actually not be ambiguous because the question mark.
8921 	X	requires a matching colon for people not used to c derived language it is hard to.
8922 	X	the latter case has become more of a reality with the advent of properties.
8923 	X	where even attribute access can be given side.
8924 	X	the bdfl rejected this for several reasons the colon already has many uses in python even.
8925 	X	still the point is moot since the bdfl opposes solutions which do not provide short circuit.
8926 	X	though it would actually not be ambiguous because the question.
8927 	X	supporters of the cond function point out that the need for.
8928 	X	mark requires a matching colon for people not used to c derived language it is hard to.
8929 	X	condition expression expression the and are not arbitrary as they strongly suggest testing and.
8930 	X	directories they found that if else did not occur often and of.
8931 	X	another merit is that that existing operators are not.
8932 	X	those only a few contained expressions that could be helped by.
8933 	X	having two characters at each step also.
8934 	X	cond or a ternary operator and that most of those had no need for short circuit.
8935 	X	alas the bdfl prefers the proposed syntax and considers this as.
8936 	X	most needs and would spare efforts to alter the syntax of the.
8937 	X	more supporting evidence comes from scans of c code bases which show that its ternary operator used very rarely as a percentage of lines of code.
8938 	X	condition expression expression the and are not arbitrary as they strongly suggest testing and.
8939 	X	a counter point to that analysis is that the availability of a.
8940 	X	another merit is that that existing operators are not.
8941 	X	ternary operator helped the programmer in every case because it.
8942 	X	having two characters at each step also helps.
8943 	X	spared the need to search for side.
8944 	X	preclude errors arising from distant modifications which introduce.
8945 	X	prefers the proposed syntax and considers this alternative too.
8946 	X	the latter case has become more of a reality with the advent of properties where even attribute access can be given.
8947 	X	syntax of the language e g.
8948 	X	the bdfls position is that short circuit behavior is essential for an if then else construct to be added to the.
8949 	X	ifelse condition expression expression this wont work the way a syntax extension will because both expression and expression must be evaluated before the function is.
8950 	X	theres no way to short circuit the expression.
8951 	X	syntax of the language e g.
8952 	X	cond condition expression expression this wont work the way a syntax extension will because both expression and expression must be evaluated before the function is.
8953 	X	theres no way to short circuit the expression.
8954 	X	it could work if cond or some other name were.
8955 	X	made a keyword but that has all the disadvantages of adding a new.
8956 	X	keyword plus confusing syntax it looks like a function call so a casual reader might expect both expression and expression to be.
8957 	X	some find that any form of punctuation makes the language more.
8958 	X	others find that punctuation style is appropriate for expressions rather than statements and helps avoid a cobol.
8959 	X	style plus times adapting existing keywords attempts to improve on punctuation some find that any form of punctuation makes the language more.
8960 	X	others find that punctuation style is appropriate for.
8961 	X	expressions rather than statements and helps avoid a cobol style plus times adapting existing keywords attempts to improve on punctuation the third form introduces a new keyword and arranges the arguments.
8962 	X	adding a new keyword is to be generally.
8963 	X	but the form is clear short and.
8964 	X	confusion with function syntax which implies that all the arguments are evaluated rather than short.
8965 	X	this idea was presented by the bdfl and should be considered a contender for the final.
8966 	X	the exact keyword is still an open.
8967 	X	but it looks like a typo and can be confused with if and only if which has a different well defined mathematical.
8968 	X	the fourth position is much more.
8969 	X	adding a new function cond is trivially easy to implement and fits easily within the existing python.
8970 	X	python will find it trivial to.
8971 	X	the downside is that it does not provide the sought after short circuit.
8972 	X	evaluation see the discussion below on the need for this.
8973 	X	the bigger downside is that the bdfl opposes any solution that.
8974 	X	arguments in favor include keeping the language simple and concise maintaining backwards compatibility and that any every use cases can already be already.
8975 	X	expressed in terms of if and else.
8976 	X	an exception as they require the conditional to be factored out into a separate function.
8977 	X	the arguments against doing nothing are that the other choices the third form introduces a new keyword and arranges the arguments.
8978 	X	adding a new keyword is to be generally.
8979 	X	but the form is clear short and.
8980 	X	possible confusion with function syntax which implies that all the.
8981 	X	arguments are evaluated rather than short.
8982 	X	this idea was presented by the bdfl and should be considered a contender for the final.
8983 	X	the exact keyword is still an open.
8984 	X	proposal was iif but it looks like a typo and can be confused with if and only if which has a different well defined.
8985 	X	the fourth position is much more.
8986 	X	adding a new function cond is trivially easy to implement and fits easily within the existing python.
8987 	X	python will find it trivial to.
8988 	X	does not provide the sought after short circuit evaluation see the discussion below on the need for this.
8989 	X	the bigger downside is that the bdfl opposes any solution that does not provide.
8990 	X	arguments in favor include keeping the language simple and concise maintaining backwards compatibility and that any every use cases can already be already.
8991 	X	expressed in terms of if and else.
8992 	X	exception as they require the conditional to be factored out into.
8993 	X	the arguments against doing nothing are that the other choices it should also be mentioned that most supporters of any of the.
8994 	X	first four positions do not want an imperfect solution and would sooner have no change than create a wart to attain.
8995 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id eibsx ib sc pr cvs sourceforge net.
8996 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
8997 	X	the principal difference between the ternary operator and the cond function is that the latter provides an expression.
8998 	X	form but does not provide short circuit.
8999 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb created feb.
9000 	X	short circuit evaluation is desirable on three occasions it should also be mentioned that most supporters of any of the.
9001 	X	first four positions do not want an imperfect solution and would.
9002 	X	post history feb feb if the community cant decide ill reject the.
9003 	X	sooner have no change than create a wart to attain their desired.
9004 	X	after unprecedented community response very food arguments were made both pro and con this pep is revised with the help of raymond.
9005 	X	without going through a complete revision history the main changes are a different proposed syntax an overview of proposed alternatives the state of the curent discussion and a discussion of short circuit.
9006 	X	the principal difference between the ternary operator and the.
9007 	X	proposal note that at most one of expression and expression is.
9008 	X	cond function is that the latter provides an expression form but.
9009 	X	this is called a short circuit expression it is similar to the way the second operand of and or is only evaluated if the first operand is true.
9010 	X	note a common way to emulate an if then else expression is note that at most one of expression and expression is.
9011 	X	short circuit evaluation is desirable on three occasions supporters of the cond function point out that the need for.
9012 	X	this is called a short circuit expression it is.
9013 	X	similar to the way the second operand of and or is only evaluated if the first operand is true.
9014 	X	a common way to emulate an if then else expression is however this doesnt work the same way it returns expression when expression is false.
9015 	X	code directories they found that if else did not occur often.
9016 	X	and of those only a few contained expressions that could be.
9017 	X	work however they are pretty ugly and require much more.
9018 	X	helped by cond or a ternary operator and that most of those.
9019 	X	had no need for short circuit.
9020 	X	however this doesnt work the same way it returns expression when expression is false.
9021 	X	suffice for most needs and would spare efforts to alter the.
9022 	X	work however they are pretty ugly and require much more effort to.
9023 	X	the out of order arrangement was found to be too uncomfortable for many of participants in the.
9024 	X	more supporting evidence comes from scans of c code.
9025 	X	the out of order arrangement was found to be too uncomfortable for many of participants in the discussion especially when expression is long its easy to miss the conditional while.
9026 	X	bases which show that its ternary operator used very rarely as a percentage of lines of code.
9027 	X	a counter point to that analysis is that the availability of a ternary operator helped the programmer in every case because it spared the need to search for side.
9028 	X	the bdfl rejected this for several reasons the colon already has many uses in python even.
9029 	X	further it would preclude errors arising from distant.
9030 	X	though it would actually not be ambiguous because the question mark.
9031 	X	requires a matching colon for people not used to c derived language it is hard to.
9032 	X	the latter case has become more of a reality with the advent of properties.
9033 	X	where even attribute access can be given side.
9034 	X	the bdfl rejected this for several reasons the colon already has many uses in python even.
9035 	X	still the point is moot since the bdfl opposes solutions which do not provide short circuit.
9036 	X	though it would actually not be ambiguous because the question.
9037 	X	supporters of the cond function point out that the need for.
9038 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id eiciq n sc pr cvs sourceforge net.
9039 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
9040 	X	modified files pep txt typo foo good.
9041 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb if the community cant decide ill reject the.
9042 	X	after unprecedented community response very food arguments were made both pro and con this pep is revised with the help of raymond.
9043 	X	without going through a complete revision if the community cant decide ill reject the.
9044 	X	after unprecedented community response very good arguments were made both pro and con this pep is revised with the help of raymond.
9045 	X	without going through a complete revision.
9046 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id eiciq n sc pr cvs sourceforge net.
9047 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
9048 	X	modified files pep txt typo foo good.
9049 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb if the community cant decide ill reject the.
9050 	X	after unprecedented community response very food arguments were made both pro and con this pep is revised with the help of raymond.
9051 	X	without going through a complete revision if the community cant decide ill reject the.
9052 	X	after unprecedented community response very good arguments were made both pro and con this pep is revised with the help of raymond.
9053 	X	without going through a complete revision.
9054 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id eiciq n sc pr cvs sourceforge net.
9055 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
9056 	X	modified files pep txt typo foo good.
9057 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb if the community cant decide ill reject the.
9058 	X	after unprecedented community response very food arguments were made both pro and con this pep is revised with the help of raymond.
9059 	X	without going through a complete revision if the community cant decide ill reject the.
9060 	X	after unprecedented community response very good arguments were made both pro and con this pep is revised with the help of raymond.
9061 	X	without going through a complete revision.
9062 	X	from rhettinger users sourceforge net rhettinger users sourceforge net message id eigof lb sc pr cvs sourceforge net.
9063 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
9064 	X	modified files pep txt several people requested that the parenthesis requirement be.
9065 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb if condition expression else expression.
9066 	X	this is evaluated like this first condition is.
9067 	X	note that the enclosing parethesis are not.
9068 	X	the resulting expression is evaluated like this first condition is.
9069 	X	from rhettinger users sourceforge net rhettinger users sourceforge net message id eigof lb sc pr cvs sourceforge net.
9070 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
9071 	X	modified files pep txt several people requested that the parenthesis requirement be.
9072 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb if condition expression else expression.
9073 	X	this is evaluated like this first condition is.
9074 	X	note that the enclosing parethesis are not.
9075 	X	the resulting expression is evaluated like this first condition is.
9076 	X	from rhettinger users sourceforge net rhettinger users sourceforge net message id eigof lb sc pr cvs sourceforge net.
9077 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
9078 	X	modified files pep txt several people requested that the parenthesis requirement be.
9079 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb if condition expression else expression.
9080 	X	this is evaluated like this first condition is.
9081 	X	note that the enclosing parethesis are not.
9082 	X	the resulting expression is evaluated like this first condition is.
9083 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id eiizp ta sc pr cvs sourceforge net.
9084 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
9085 	X	modified files pep txt i just thought of something now the syntax looks like if c e else e we can also allow one or more elif.
9086 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb result of the whole.
9087 	X	a natural extension of this syntax is to allow one or more elif parts.
9088 	X	if cond expr elif cond expr else exprn.
9089 	X	this will be implemented if the proposal is.
9090 	X	note that at most one of expression and expression is.
9091 	X	this is called a short circuit expression it is.
9092 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id eiizp ta sc pr cvs sourceforge net.
9093 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
9094 	X	modified files pep txt i just thought of something now the syntax looks like if c e else e we can also allow one or more elif.
9095 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb result of the whole.
9096 	X	a natural extension of this syntax is to allow one or more elif parts.
9097 	X	if cond expr elif cond expr else exprn.
9098 	X	this will be implemented if the proposal is.
9099 	X	note that at most one of expression and expression is.
9100 	X	this is called a short circuit expression it is.
9101 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id eiizp ta sc pr cvs sourceforge net.
9102 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
9103 	X	modified files pep txt i just thought of something now the syntax looks like if c e else e we can also allow one or more elif.
9104 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb result of the whole.
9105 	X	a natural extension of this syntax is to allow one or more elif parts.
9106 	X	if cond expr elif cond expr else exprn.
9107 	X	this will be implemented if the proposal is.
9108 	X	note that at most one of expression and expression is.
9109 	X	this is called a short circuit expression it is.
9110 	X	note that the enclosing parethesis are not.
9111 	X	the resulting expression is evaluated like this if condition expression else expression.
9112 	X	note that the enclosing parentheses are not.
9113 	X	the resulting expression is evaluated like this expression is long its easy to miss the conditional while.
9114 	X	holger krekel proposed a new minimally invasive variant.
9115 	X	the concept behind it is that a nearly complete ternary operator already exists with and or and this proposal is the least invasive change that makes it.
9116 	X	many respondants on the newsgroup found this to be the most pleasing.
9117 	X	however a couple of respondants were able to post examples that were mentally difficult to.
9118 	X	from rhettinger users sourceforge net rhettinger users sourceforge net message id eilr y sc pr cvs sourceforge net.
9119 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
9120 	X	modified files pep txt log message add holgers new well received.
9121 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb if condition expression else expression.
9122 	X	note that the enclosing parethesis are not.
9123 	X	the resulting expression is evaluated like this if condition expression else expression.
9124 	X	note that the enclosing parentheses are not.
9125 	X	the resulting expression is evaluated like this expression is long its easy to miss the conditional while.
9126 	X	holger krekel proposed a new minimally invasive variant.
9127 	X	the concept behind it is that a nearly complete ternary operator already exists with and or and this proposal is the least invasive change that makes it.
9128 	X	many respondants on the newsgroup found this to be the most pleasing.
9129 	X	however a couple of respondants were able to post examples that were mentally difficult to.
9130 	X	from rhettinger users sourceforge net rhettinger users sourceforge net message id eilr y sc pr cvs sourceforge net.
9131 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
9132 	X	modified files pep txt log message add holgers new well received.
9133 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb if condition expression else expression.
9134 	X	note that the enclosing parethesis are not.
9135 	X	the resulting expression is evaluated like this if condition expression else expression.
9136 	X	note that the enclosing parentheses are not.
9137 	X	the resulting expression is evaluated like this expression is long its easy to miss the conditional while.
9138 	X	holger krekel proposed a new minimally invasive variant.
9139 	X	the concept behind it is that a nearly complete ternary operator already exists with and or and this proposal is the least invasive change that makes it.
9140 	X	many respondants on the newsgroup found this to be the most pleasing.
9141 	X	however a couple of respondants were able to post examples that were mentally difficult to.
9142 	X	from rhettinger users sourceforge net rhettinger users sourceforge net message id eilr y sc pr cvs sourceforge net.
9143 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
9144 	X	modified files pep txt log message add holgers new well received.
9145 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb if condition expression else expression.
9146 	X	from rhettinger users sourceforge net rhettinger users sourceforge net message id eiocy ru sc pr cvs sourceforge net.
9147 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
9148 	X	modified files pep txt chris tismers proposal is also were well.
9149 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb that were mentally difficult to.
9150 	X	christian tismer proposed a variant of the same idea.
9151 	X	from rhettinger users sourceforge net rhettinger users sourceforge net message id eiocy ru sc pr cvs sourceforge net.
9152 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
9153 	X	modified files pep txt chris tismers proposal is also were well.
9154 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb that were mentally difficult to.
9155 	X	christian tismer proposed a variant of the same idea.
9156 	X	from rhettinger users sourceforge net rhettinger users sourceforge net message id eiocy ru sc pr cvs sourceforge net.
9157 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
9158 	X	modified files pep txt chris tismers proposal is also were well.
9159 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb that were mentally difficult to.
9160 	X	christian tismer proposed a variant of the same idea.
9161 	X	in reply to eiocy ru sc pr cvs sourceforge net from rhettinger users sourceforge net on tue feb at pm references eiocy ru sc pr cvs sourceforge net message id b nyman amk ca.
9162 	X	on tue feb at pm rhettinger users sourceforge net wrote expression then condition else expression.
9163 	X	im not following these threads closely but the above seems wrong should it be condition then expression else expression.
9164 	X	from rhettinger users sourceforge net rhettinger users sourceforge net message id eiwo za sc pr cvs sourceforge net.
9165 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
9166 	X	modified files pep txt put variables in correct.
9167 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb holger krekel proposed a new minimally invasive variant.
9168 	X	expression and condition else expression the concept behind it is that a nearly complete ternary operator holger krekel proposed a new minimally invasive variant.
9169 	X	condition and expression else expression the concept behind it is that a nearly complete ternary operator christian tismer proposed a variant of the same idea.
9170 	X	expression then condition else expression christian tismer proposed a variant of the same idea.
9171 	X	from rhettinger users sourceforge net rhettinger users sourceforge net message id eiwo za sc pr cvs sourceforge net.
9172 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
9173 	X	modified files pep txt put variables in correct.
9174 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb holger krekel proposed a new minimally invasive variant.
9175 	X	expression and condition else expression the concept behind it is that a nearly complete ternary operator holger krekel proposed a new minimally invasive variant.
9176 	X	condition and expression else expression the concept behind it is that a nearly complete ternary operator christian tismer proposed a variant of the same idea.
9177 	X	expression then condition else expression christian tismer proposed a variant of the same idea.
9178 	X	from rhettinger users sourceforge net rhettinger users sourceforge net message id eiwo za sc pr cvs sourceforge net.
9179 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
9180 	X	modified files pep txt put variables in correct.
9181 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb holger krekel proposed a new minimally invasive variant.
9182 	X	expression and condition else expression the concept behind it is that a nearly complete ternary operator holger krekel proposed a new minimally invasive variant.
9183 	X	condition and expression else expression the concept behind it is that a nearly complete ternary operator christian tismer proposed a variant of the same idea.
9184 	X	expression then condition else expression christian tismer proposed a variant of the same idea.
9185 	X	the bigger downside is that the bdfl opposes any solution that does not provide.
9186 	X	arguments in favor include keeping the language simple and concise maintaining backwards.
9187 	X	compatibility and that any every use cases can already be already expressed in terms of if and else.
9188 	X	lambda expressions are an exception as they require the conditional to be factored out into confusion between the two meanings and two usages of the.
9189 	X	those difficulties are overcome by options which introduce new.
9190 	X	keywords which take more effort to.
9191 	X	arguments in favor include keeping the language simple and concise maintaining backwards.
9192 	X	compatibility and that any every use case can already be already expressed in terms of if and else.
9193 	X	lambda expressions are an exception as they require the conditional to be factored out into allow greater economy of expression and that current practices show a propensity for erroneous uses of and or or one their.
9194 	X	it should also be mentioned that most supporters of any of the.
9195 	X	first four positions do not want an imperfect solution and would.
9196 	X	sooner have no change than create a wart to attain their desired.
9197 	X	allow greater economy of expression and that current practices show a propensity for erroneous uses of and or or one their.
9198 	X	example where all three reasons apply.
9199 	X	data isinstance source file source readlines.
9200 	X	source split readlines moves the file pointer example where all three reasons apply.
9201 	X	source split readlines moves the file pointer valid for file.
9202 	X	supporters of the cond function point out that the need for short circuit evaluation is.
9203 	X	scanning through existing code directories they found that if else did not occur often and of valid for file.
9204 	X	supporters of a cond function point out that the need for short circuit evaluation is.
9205 	X	scanning through existing code directories they found that if else did not occur often and of.
9206 	X	from rhettinger users sourceforge net rhettinger users sourceforge net message id ejdlk rx sc pr cvs sourceforge net.
9207 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
9208 	X	modified files pep txt amended the pep to reflect some convergence on the newgroup.
9209 	X	listed the downsides of the current.
9210 	X	listed why cond then expr else expr is starting to be preferred over cond and expr or expr.
9211 	X	after bdfl comments i withdrew my proposed cab syntax and deleted the rejected cab.
9212 	X	the remaining punctuation based contender is ca b.
9213 	X	after bdfl rejection of non short circuiting options advocacy dropped.
9214 	X	removed it from the list of.
9215 	X	the leading options on the table are.
9216 	X	if cond expr else expr cond then expr else expr cond.
9217 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb this will be implemented if the proposal is.
9218 	X	the downsides to the proposal are.
9219 	X	the required parentheses confusability with statement syntax additional semantic loading of colons.
9220 	X	note that at most one of expression and expression is.
9221 	X	this is called a short circuit expression it is alternatives the original version of this pep proposed the following syntax.
9222 	X	the out of order arrangement was found to be too uncomfortable for many of participants in the discussion especially when expression is long its easy to miss the conditional while.
9223 	X	holger krekel proposed a new minimally invasive variant newsgroup found this to be the most pleasing.
9224 	X	however a couple of respondants were able to post examples that were mentally difficult to.
9225 	X	christian tismer proposed a variant of the same idea newsgroup found this to be the most pleasing.
9226 	X	however a couple of respondants were able to post examples that were mentally difficult to.
9227 	X	out that this construct works by having the else change the.
9228 	X	as a result there is increasing support for christian tismers.
9229 	X	proposed variant of the same idea the advantages are simple visual parsing no required parenthesis no change in the semantics of existing keywords not as likely as the proposal to be confused with statement syntax and does not further overload the.
9230 	X	the disadvantage is the implementation costs of introducing a new.
9231 	X	however unlike other new keywords the word then seems unlikely to have been used as a name in existing.
9232 	X	david ascher proposed a variant that doesnt have this problem.
9233 	X	while cute this suffers from the perlish problem of using.
9234 	X	arbitrary punctuation with an arbitrary meaning and its no.
9235 	X	raymond hettinger proposed a variant that removes the.
9236 	X	from rhettinger users sourceforge net rhettinger users sourceforge net message id ejdlk rx sc pr cvs sourceforge net.
9237 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
9238 	X	the and are not arbitrary as they strongly suggest testing and.
9239 	X	modified files pep txt amended the pep to reflect some convergence on the newgroup.
9240 	X	another merit is that that existing operators are not.
9241 	X	listed the downsides of the current.
9242 	X	having two characters at each step also helps.
9243 	X	listed why cond then expr else expr is starting to be preferred over cond and expr or expr.
9244 	X	after bdfl comments i withdrew my proposed cab syntax and deleted the rejected cab.
9245 	X	the remaining punctuation based contender is ca b.
9246 	X	prefers the proposed syntax and considers this alternative too.
9247 	X	after bdfl rejection of non short circuiting options advocacy dropped.
9248 	X	many people suggest adding a new builtin instead of extending the.
9249 	X	removed it from the list of.
9250 	X	syntax of the language e g cond condition expression expression.
9251 	X	the leading options on the table are.
9252 	X	the original version of this pep proposed the following syntax.
9253 	X	if cond expr else expr cond then expr else expr cond.
9254 	X	the out of order arrangement was found to be too uncomfortable for many of participants in the discussion especially when expression is long its easy to miss the conditional while.
9255 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb this will be implemented if the proposal is.
9256 	X	some have suggested adding a new builtin instead of extending the.
9257 	X	the downsides to the proposal are.
9258 	X	the required parentheses confusability with statement syntax additional semantic loading of colons.
9259 	X	for example cond condition expression expression summary of the current state of the discussion.
9260 	X	note that at most one of expression and expression is.
9261 	X	groups are falling into one of five camps adopt a ternary operator built using punctuation.
9262 	X	this is called a short circuit expression it is alternatives the original version of this pep proposed the following syntax.
9263 	X	it would look something like condition expression expression adopt a ternary operator built using existing.
9264 	X	the out of order arrangement was found to be too uncomfortable for many of participants in the discussion especially when expression is long its easy to miss the conditional while.
9265 	X	the proposal listed above is the leading.
9266 	X	holger krekel proposed a new minimally invasive variant newsgroup found this to be the most pleasing.
9267 	X	adopt a ternary operator built using a new.
9268 	X	however a couple of respondants were able to post examples that were mentally difficult to.
9269 	X	the leading contender looks like this.
9270 	X	christian tismer proposed a variant of the same idea newsgroup found this to be the most pleasing.
9271 	X	cond condition expression expression adopt a function without short circuit behavior.
9272 	X	however a couple of respondants were able to post examples that were mentally difficult to.
9273 	X	the first two positions are relatively.
9274 	X	out that this construct works by having the else change the.
9275 	X	summary of the current state of the discussion.
9276 	X	groups are falling into one of three camps adopt a ternary operator built using punctuation characters.
9277 	X	as a result there is increasing support for christian tismers.
9278 	X	expression expression adopt a ternary operator built using new or existing.
9279 	X	proposed variant of the same idea the advantages are simple visual parsing no required parenthesis no change in the semantics of existing keywords not as likely as the proposal to be confused with statement syntax and does not further overload the.
9280 	X	the disadvantage is the implementation costs of introducing a new.
9281 	X	however unlike other new keywords the word then seems unlikely to have been used as a name in existing.
9282 	X	david ascher proposed a variant that doesnt have this problem.
9283 	X	the first two positions are relatively.
9284 	X	while cute this suffers from the perlish problem of using.
9285 	X	confusion between the two meanings and two usages of the.
9286 	X	arbitrary punctuation with an arbitrary meaning and its no.
9287 	X	the third form introduces a new keyword and arranges the arguments.
9288 	X	raymond hettinger proposed a variant that removes the.
9289 	X	adding a new keyword is to be generally.
9290 	X	but the form is clear short and.
9291 	X	the and are not arbitrary as they strongly suggest testing and.
9292 	X	another merit is that that existing operators are not.
9293 	X	possible confusion with function syntax which implies that all the.
9294 	X	having two characters at each step also helps.
9295 	X	arguments are evaluated rather than short.
9296 	X	this idea was presented by the bdfl and should be considered a contender for the final.
9297 	X	the exact keyword is still an open.
9298 	X	prefers the proposed syntax and considers this alternative too.
9299 	X	proposal was iif but it looks like a typo and can be confused with if and only if which has a different well defined.
9300 	X	many people suggest adding a new builtin instead of extending the.
9301 	X	the fourth position is much more.
9302 	X	syntax of the language e g cond condition expression expression.
9303 	X	the original version of this pep proposed the following syntax.
9304 	X	function cond is trivially easy to implement and fits easily.
9305 	X	the out of order arrangement was found to be too uncomfortable for many of participants in the discussion especially when expression is long its easy to miss the conditional while.
9306 	X	some have suggested adding a new builtin instead of extending the.
9307 	X	python will find it trivial to.
9308 	X	for example cond condition expression expression summary of the current state of the discussion.
9309 	X	does not provide the sought after short circuit evaluation see the discussion below on the need for this.
9310 	X	groups are falling into one of five camps adopt a ternary operator built using punctuation.
9311 	X	the bigger downside is that the bdfl opposes any solution that does not provide.
9312 	X	it would look something like condition expression expression adopt a ternary operator built using existing.
9313 	X	the proposal listed above is the leading.
9314 	X	adopt a ternary operator built using a new.
9315 	X	arguments in favor include keeping the language simple and concise maintaining backwards.
9316 	X	the leading contender looks like this.
9317 	X	compatibility and that any every use cases can already be already expressed in terms of if and else.
9318 	X	cond condition expression expression adopt a function without short circuit behavior.
9319 	X	lambda expressions are an exception as they require the conditional to be factored out into confusion between the two meanings and two usages of the.
9320 	X	those difficulties are overcome by options which introduce new.
9321 	X	the first two positions are relatively.
9322 	X	keywords which take more effort to.
9323 	X	summary of the current state of the discussion.
9324 	X	groups are falling into one of three camps adopt a ternary operator built using punctuation characters.
9325 	X	arguments in favor include keeping the language simple and concise maintaining backwards.
9326 	X	expression expression adopt a ternary operator built using new or existing.
9327 	X	compatibility and that any every use case can already be already expressed in terms of if and else.
9328 	X	lambda expressions are an exception as they require the conditional to be factored out into allow greater economy of expression and that current practices show a propensity for erroneous uses of and or or one their.
9329 	X	it should also be mentioned that most supporters of any of the.
9330 	X	the first two positions are relatively.
9331 	X	first four positions do not want an imperfect solution and would.
9332 	X	confusion between the two meanings and two usages of the.
9333 	X	sooner have no change than create a wart to attain their desired.
9334 	X	the third form introduces a new keyword and arranges the arguments.
9335 	X	allow greater economy of expression and that current practices show a propensity for erroneous uses of and or or one their.
9336 	X	adding a new keyword is to be generally.
9337 	X	example where all three reasons apply.
9338 	X	but the form is clear short and.
9339 	X	data isinstance source file source readlines.
9340 	X	source split readlines moves the file pointer example where all three reasons apply.
9341 	X	possible confusion with function syntax which implies that all the.
9342 	X	arguments are evaluated rather than short.
9343 	X	this idea was presented by the bdfl and should be considered a contender for the final.
9344 	X	source split readlines moves the file pointer valid for file.
9345 	X	the exact keyword is still an open.
9346 	X	supporters of the cond function point out that the need for short circuit evaluation is.
9347 	X	proposal was iif but it looks like a typo and can be confused with if and only if which has a different well defined.
9348 	X	scanning through existing code directories they found that if else did not occur often and of valid for file.
9349 	X	the fourth position is much more.
9350 	X	supporters of a cond function point out that the need for short circuit evaluation is.
9351 	X	scanning through existing code directories they found that if else did not occur often and of.
9352 	X	function cond is trivially easy to implement and fits easily.
9353 	X	python will find it trivial to.
9354 	X	does not provide the sought after short circuit evaluation see the discussion below on the need for this.
9355 	X	the bigger downside is that the bdfl opposes any solution that does not provide.
9356 	X	arguments in favor include keeping the language simple and concise maintaining backwards.
9357 	X	compatibility and that any every use cases can already be already expressed in terms of if and else.
9358 	X	lambda expressions are an exception as they require the conditional to be factored out into confusion between the two meanings and two usages of the.
9359 	X	those difficulties are overcome by options which introduce new.
9360 	X	keywords which take more effort to.
9361 	X	arguments in favor include keeping the language simple and concise maintaining backwards.
9362 	X	compatibility and that any every use case can already be already expressed in terms of if and else.
9363 	X	lambda expressions are an exception as they require the conditional to be factored out into allow greater economy of expression and that current practices show a propensity for erroneous uses of and or or one their.
9364 	X	it should also be mentioned that most supporters of any of the.
9365 	X	first four positions do not want an imperfect solution and would.
9366 	X	sooner have no change than create a wart to attain their desired.
9367 	X	allow greater economy of expression and that current practices show a propensity for erroneous uses of and or or one their.
9368 	X	example where all three reasons apply.
9369 	X	data isinstance source file source readlines.
9370 	X	source split readlines moves the file pointer example where all three reasons apply.
9371 	X	source split readlines moves the file pointer valid for file.
9372 	X	supporters of the cond function point out that the need for short circuit evaluation is.
9373 	X	scanning through existing code directories they found that if else did not occur often and of valid for file.
9374 	X	supporters of a cond function point out that the need for short circuit evaluation is.
9375 	X	scanning through existing code directories they found that if else did not occur often and of.
9376 	X	from rhettinger users sourceforge net rhettinger users sourceforge net message id ejdlk rx sc pr cvs sourceforge net.
9377 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
9378 	X	modified files pep txt amended the pep to reflect some convergence on the newgroup.
9379 	X	listed the downsides of the current.
9380 	X	listed why cond then expr else expr is starting to be preferred over cond and expr or expr.
9381 	X	after bdfl comments i withdrew my proposed cab syntax and deleted the rejected cab.
9382 	X	the remaining punctuation based contender is ca b.
9383 	X	after bdfl rejection of non short circuiting options advocacy dropped.
9384 	X	removed it from the list of.
9385 	X	the leading options on the table are.
9386 	X	if cond expr else expr cond then expr else expr cond.
9387 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb this will be implemented if the proposal is.
9388 	X	the downsides to the proposal are.
9389 	X	the required parentheses confusability with statement syntax additional semantic loading of colons.
9390 	X	note that at most one of expression and expression is.
9391 	X	this is called a short circuit expression it is alternatives the original version of this pep proposed the following syntax.
9392 	X	the out of order arrangement was found to be too uncomfortable for many of participants in the discussion especially when expression is long its easy to miss the conditional while.
9393 	X	holger krekel proposed a new minimally invasive variant newsgroup found this to be the most pleasing.
9394 	X	however a couple of respondants were able to post examples that were mentally difficult to.
9395 	X	christian tismer proposed a variant of the same idea newsgroup found this to be the most pleasing.
9396 	X	however a couple of respondants were able to post examples that were mentally difficult to.
9397 	X	out that this construct works by having the else change the.
9398 	X	as a result there is increasing support for christian tismers.
9399 	X	proposed variant of the same idea the advantages are simple visual parsing no required parenthesis no change in the semantics of existing keywords not as likely as the proposal to be confused with statement syntax and does not further overload the.
9400 	X	the disadvantage is the implementation costs of introducing a new.
9401 	X	however unlike other new keywords the word then seems unlikely to have been used as a name in existing.
9402 	X	david ascher proposed a variant that doesnt have this problem.
9403 	X	while cute this suffers from the perlish problem of using.
9404 	X	arbitrary punctuation with an arbitrary meaning and its no.
9405 	X	raymond hettinger proposed a variant that removes the.
9406 	X	the and are not arbitrary as they strongly suggest testing and.
9407 	X	another merit is that that existing operators are not.
9408 	X	having two characters at each step also helps.
9409 	X	prefers the proposed syntax and considers this alternative too.
9410 	X	many people suggest adding a new builtin instead of extending the.
9411 	X	syntax of the language e g cond condition expression expression.
9412 	X	the original version of this pep proposed the following syntax.
9413 	X	the out of order arrangement was found to be too uncomfortable for many of participants in the discussion especially when expression is long its easy to miss the conditional while.
9414 	X	some have suggested adding a new builtin instead of extending the.
9415 	X	for example cond condition expression expression summary of the current state of the discussion.
9416 	X	groups are falling into one of five camps adopt a ternary operator built using punctuation.
9417 	X	it would look something like condition expression expression adopt a ternary operator built using existing.
9418 	X	the proposal listed above is the leading.
9419 	X	adopt a ternary operator built using a new.
9420 	X	the leading contender looks like this.
9421 	X	cond condition expression expression adopt a function without short circuit behavior.
9422 	X	the first two positions are relatively.
9423 	X	summary of the current state of the discussion.
9424 	X	groups are falling into one of three camps adopt a ternary operator built using punctuation characters.
9425 	X	expression expression adopt a ternary operator built using new or existing.
9426 	X	the first two positions are relatively.
9427 	X	confusion between the two meanings and two usages of the.
9428 	X	the third form introduces a new keyword and arranges the arguments.
9429 	X	adding a new keyword is to be generally.
9430 	X	but the form is clear short and.
9431 	X	possible confusion with function syntax which implies that all the.
9432 	X	arguments are evaluated rather than short.
9433 	X	this idea was presented by the bdfl and should be considered a contender for the final.
9434 	X	the exact keyword is still an open.
9435 	X	proposal was iif but it looks like a typo and can be confused with if and only if which has a different well defined.
9436 	X	the fourth position is much more.
9437 	X	function cond is trivially easy to implement and fits easily.
9438 	X	python will find it trivial to.
9439 	X	does not provide the sought after short circuit evaluation see the discussion below on the need for this.
9440 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id ejksc ee sc pr cvs sourceforge net.
9441 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
9442 	X	modified files pep txt avoid i now theres more than one.
9443 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb last modified date.
9444 	X	author guido van rossum and raymond d hettinger type standards track last modified date.
9445 	X	author guido van rossum raymond d hettinger type standards track in python.
9446 	X	if not the pep will be augmented with a summary of the reasons for rejection and the subject better not come up.
9447 	X	while i am the author of this pep i am neither in favor.
9448 	X	nor against this proposal it is up to the community to.
9449 	X	if the community cant decide ill reject the.
9450 	X	after unprecedented community response very good arguments were in python.
9451 	X	if not the pep will be augmented with a summary of the reasons for rejection and the subject better not come up.
9452 	X	while the bdfl is co author of this pep he is neither in.
9453 	X	favor nor against this proposal it is up to the community to.
9454 	X	if the community cant decide the bdfl will reject the.
9455 	X	after unprecedented community response very good arguments were valid for file.
9456 	X	supporters of a cond function point out that the need for short circuit evaluation is.
9457 	X	scanning through existing code directories they found that if else did not occur often and of valid for file.
9458 	X	supporters of a cond function point out that the need for short circuit evaluation is.
9459 	X	scanning through existing code directories they found that if else did not occur often and of.
9460 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id ejksc ee sc pr cvs sourceforge net.
9461 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
9462 	X	modified files pep txt avoid i now theres more than one.
9463 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb last modified date.
9464 	X	author guido van rossum and raymond d hettinger type standards track last modified date.
9465 	X	author guido van rossum raymond d hettinger type standards track in python.
9466 	X	if not the pep will be augmented with a summary of the reasons for rejection and the subject better not come up.
9467 	X	while i am the author of this pep i am neither in favor.
9468 	X	nor against this proposal it is up to the community to.
9469 	X	if the community cant decide ill reject the.
9470 	X	after unprecedented community response very good arguments were in python.
9471 	X	if not the pep will be augmented with a summary of the reasons for rejection and the subject better not come up.
9472 	X	while the bdfl is co author of this pep he is neither in.
9473 	X	favor nor against this proposal it is up to the community to.
9474 	X	if the community cant decide the bdfl will reject the.
9475 	X	after unprecedented community response very good arguments were valid for file.
9476 	X	supporters of a cond function point out that the need for short circuit evaluation is.
9477 	X	scanning through existing code directories they found that if else did not occur often and of valid for file.
9478 	X	supporters of a cond function point out that the need for short circuit evaluation is.
9479 	X	scanning through existing code directories they found that if else did not occur often and of.
9480 	X	from gvanrossum users sourceforge net gvanrossum users sourceforge net message id ejksc ee sc pr cvs sourceforge net.
9481 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
9482 	X	modified files pep txt avoid i now theres more than one.
9483 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb last modified date.
9484 	X	author guido van rossum and raymond d hettinger type standards track last modified date.
9485 	X	author guido van rossum raymond d hettinger type standards track in python.
9486 	X	if not the pep will be augmented with a summary of the reasons for rejection and the subject better not come up.
9487 	X	while i am the author of this pep i am neither in favor.
9488 	X	nor against this proposal it is up to the community to.
9489 	X	if the community cant decide ill reject the.
9490 	X	after unprecedented community response very good arguments were in python.
9491 	X	if not the pep will be augmented with a summary of the reasons for rejection and the subject better not come up.
9492 	X	while the bdfl is co author of this pep he is neither in.
9493 	X	favor nor against this proposal it is up to the community to.
9494 	X	if the community cant decide the bdfl will reject the.
9495 	X	after unprecedented community response very good arguments were valid for file.
9496 	X	supporters of a cond function point out that the need for short circuit evaluation is.
9497 	X	scanning through existing code directories they found that if else did not occur often and of valid for file.
9498 	X	supporters of a cond function point out that the need for short circuit evaluation is.
9499 	X	scanning through existing code directories they found that if else did not occur often and of.
9500 	X	from goodger users sourceforge net goodger users sourceforge net message id ejyjy cp sc pr cvs sourceforge net.
9501 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv python nondist peps.
9502 	X	added files pep txt log message simple implicit lambda by suzi martelli.
9503 	X	author roman suzi rnd at onego ru alex martelli aleax at aleax it post history.
9504 	X	this pep proposes to make argumentless lambda keyword optional in some cases where it is not grammatically.
9505 	X	lambdas are useful for defining anonymous functions e g for use as callbacks or pseudo lazy evaluation.
9506 	X	often lambdas are not used when they would be appropriate just because the keyword lambda makes code look.
9507 	X	omitting lambda in some special cases is possible with small and backwards compatible changes to the grammar and provides a cheap cure against such lambdaphobia.
9508 	X	sometimes people do not use lambdas because they fear to introduce a term with a theory behind.
9509 	X	this proposal makes introducing argumentless lambdas easier by omitting the lambda.
9510 	X	implementation can be done simply changing grammar so it lets the lambda keyword be implied in a few well known.
9511 	X	in particular adding surrounding brackets lets you specify nullary lambda.
9512 	X	an argumentless lambda keyword can be omitted in the following cases.
9513 	X	immediately after in named parameter assignment or default value assignment.
9514 	X	immediately after a in a function argument list.
9515 	X	immediately after a in a dictionary literal not implemented.
9516 	X	in an assignment statement not implemented.
9517 	X	old syntax print ifelse a b lambda a lambda b.
9518 	X	parts a and b may require extensive processing as in print ifelse a b ext proc a ext proc b.
9519 	X	def with alock acallable alock acquire try acallable finally alock release.
9520 	X	implementation requires some tweaking of the grammar grammar file in the python sources and some adjustment of modules parsermodule c to make syntactic and pragmatic.
9521 	X	some grammar parser guru is needed to make a full.
9522 	X	here are the changes needed to grammar to allow implicit lambda.
9523 	X	atom imptestlist listmaker dictmaker testlist name number string.
9524 	X	three new non terminals are needed imptest for the place where implicit lambda may occur implambdef for the implicit lambda definition itself imptestlist for a place where imptests may.
9525 	X	first because some files in parser module need to be.
9526 	X	second some additional places arent implemented see syntax section.
9527 	X	this feature is not a high visibility one the only novel part is the absence of lambda.
9528 	X	the feature is intended to make null ary lambdas more appealing syntactically to provide lazy evaluation of expressions in some simple.
9529 	X	this proposal is not targeted at more advanced cases demanding arguments for the lambda.
9530 	X	there is an alternative proposition for implicit lambda implicit lambda with unused.
9531 	X	in this case the function defined by such lambda can accept any parameters i e be equivalent to lambda args.
9532 	X	grep in the standard library revealed that such lambdas are indeed in.
9533 	X	one more extension can provide a way to have a list of parameters passed to a function defined by implicit.
9534 	X	however such parameters need some special name to be accessed and are unlikely to be included in the.
9535 	X	possible local names for such parameters are args.
9536 	X	these forms do not look very nice and in the pep authors opinion do not justify the removal of the lambda keyword in such.
9537 	X	the idea of dropping lambda was first coined by paul rubin at feb in comp lang python while discussing the thread for review pep if then else expression.
9538 	X	this document is placed in the public.
9539 	X	local variables mode indented text indent tabs mode nil sentence end double space t fill column end.
9540 	X	modified files pep txt pep txt log message editorial tweaks.
9541 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb pep.
9542 	X	title simplified global interpreter lock acquisition for extensions status draft.
9543 	X	type post history feb feb open issues.
9544 	X	this is where i note comments from people that are yet to be.
9545 	X	justvr prefers a pygil prefix over.
9546 	X	jackj notes that the auto prefix will look a little silly pep.
9547 	X	title simplified global interpreter lock acquisition for extensions status draft.
9548 	X	type standards track post history feb feb.
9549 	X	this is where i note comments from people that are yet to be.
9550 	X	justvr prefers a pygil prefix over.
9551 	X	jackj notes that the auto prefix will look a little silly is my limitation regarding pyeval initthreads ok.
9552 	X	limitations and exclusions this api will not perform automatic initialization of python or initialize python for multi threaded.
9553 	X	must continue to call py initialize and for multi threaded applications pyeval.
9554 	X	the reason for this is that the first thread to call pyeval initthreads is nominated as the main thread by python and so forcing the extension author to specifiy the main thread by forcing her to make this first call removes.
9555 	X	as py initialize must be called before.
9556 	X	pyeval initthreads and as both of these functions currently support were called multiple times the burden this places on extension.
9557 	X	it is intended that this api be all that is necessary to acquire this api will not perform automatic initialization of python or initialize python for multi threaded.
9558 	X	must continue to call py initialize and for multi threaded applications pyeval.
9559 	X	the reason for this is that the first thread to call pyeval initthreads is nominated as the main thread by python and so forcing the extension author to specify the main thread by forcing her to make this first call removes.
9560 	X	as py initialize must be called before.
9561 	X	pyeval initthreads and as both of these functions currently.
9562 	X	support were called multiple times the burden this places on.
9563 	X	it is intended that this api be all that is necessary to acquire are free to continue to use the existing thread state.
9564 	X	proposal state will be unknown to the caller hence the use of the autothreadstate.
9565 	X	every call to pyautothreadstate ensure must be matched by a call to pyautothreadstate release on the same.
9566 	X	state will be unknown to the caller hence the use of the autothreadstate.
9567 	X	every call to pyautothreadstate ensure must be matched by a call to pyautothreadstate release on the same.
9568 	X	design and implementation the general operation of pyautothreadstate ensure will be assert python is.
9569 	X	get a pythreadstate for the current thread creating and saving if.
9570 	X	remember the current state of the lock owned not owned if the current state does not own the gil acquire.
9571 	X	increment a counter for how many calls to pyautothreadstate ensure have been made on the current.
9572 	X	return the general operation of pyautothreadstate release will be assert our thread currently holds the.
9573 	X	if old state indicates lock as previously unlocked release.
9574 	X	design and implementation the general operation of pyautothreadstate ensure will be.
9575 	X	get a pythreadstate for the current thread creating and saving.
9576 	X	remember the current state of the lock owned not owned if the current state does not own the gil acquire.
9577 	X	increment a counter for how many calls to.
9578 	X	pyautothreadstate ensure have been made on the current.
9579 	X	return the general operation of pyautothreadstate release will be.
9580 	X	assert our thread currently holds the.
9581 	X	if old state indicates lock as previously unlocked release.
9582 	X	an implementation of this proposal can be found at http www python org sf references http mail python org pipermail python dev december html copyright.
9583 	X	an implementation of this proposal can be found at http www python org sf.
9584 	X	references http mail python org pipermail python dev december html.
9585 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff c d r r pep txt feb post history.
9586 	X	abstract some cases where it is not grammatically.
9587 	X	motivation lambdas are useful for defining anonymous functions e g for use as callbacks or pseudo lazy evaluation.
9588 	X	often lambdas are not used when they would be appropriate just because the keyword.
9589 	X	cases is possible with small and backwards compatible changes to the grammar and provides a cheap cure against such lambdaphobia.
9590 	X	rationale some cases where it is not grammatically.
9591 	X	motivation lambdas are useful for defining anonymous functions e g for use as callbacks or pseudo lazy evaluation.
9592 	X	often lambdas are not used when they would be appropriate just because the.
9593 	X	special cases is possible with small and backwards compatible.
9594 	X	changes to the grammar and provides a cheap cure against such.
9595 	X	implementation can be done simply changing grammar so it lets the lambda keyword be implied in a few well known.
9596 	X	in particular adding surrounding brackets lets you specify nullary.
9597 	X	an argumentless lambda keyword can be omitted in the following cases.
9598 	X	immediately after in named parameter assignment or default value.
9599 	X	assignment immediately after in any expression.
9600 	X	implementation can be done simply changing grammar so it lets the lambda keyword be implied in a few well known.
9601 	X	in particular adding surrounding brackets lets you specify.
9602 	X	an argumentless lambda keyword can be omitted in the following.
9603 	X	immediately after in named parameter assignment or default.
9604 	X	value assignment immediately after in any expression immediately after a in a function argument list.
9605 	X	immediately after a in a dictionary literal not implemented in an assignment statement not implemented examples of use immediately after a in a function argument list.
9606 	X	immediately after a in a dictionary literal not.
9607 	X	implemented in an assignment statement not implemented.
9608 	X	examples of use with mylock x y z foo implementation implementation requires some tweaking of the grammar grammar file in the python sources and some adjustment of modules parsermodule c to make syntactic and pragmatic.
9609 	X	some grammar parser guru is needed to make a full.
9610 	X	here are the changes needed to grammar to allow implicit lambda with mylock x y z foo.
9611 	X	implementation implementation requires some tweaking of the grammar grammar file in the python sources and some adjustment of.
9612 	X	modules parsermodule c to make syntactic and pragmatic.
9613 	X	some grammar parser guru is needed to make a full.
9614 	X	here are the changes needed to grammar to allow implicit lambda imptest test implambdef.
9615 	X	atom imptestlist listmaker dictmaker testlist name number string implambdef test.
9616 	X	three new non terminals are needed imptest for the place where implicit.
9617 	X	lambda may occur implambdef for the implicit lambda definition itself.
9618 	X	imptestlist for a place where imptests may.
9619 	X	first because some files in parser module need to be.
9620 	X	second some additional places arent implemented see syntax section.
9621 	X	atom imptestlist listmaker dictmaker testlist name number string implambdef test.
9622 	X	three new non terminals are needed imptest for the place where.
9623 	X	implicit lambda may occur implambdef for the implicit lambda.
9624 	X	definition itself imptestlist for a place where imptests may.
9625 	X	discussion do not justify the removal of the lambda keyword in such.
9626 	X	credits thread for review pep if then else expression.
9627 	X	copyright this document is placed in the public.
9628 	X	from goodger users sourceforge net goodger users sourceforge net message id ejhbz rj sc pr cvs sourceforge net.
9629 	X	update of cvsroot python python nondist peps in directory sc pr cvs tmp cvs serv.
9630 	X	from anthonybaxter at users sourceforge net anthonybaxter users sourceforge net message id ecmr w i sc pr cvs sourceforge net.
9631 	X	update of cvsroot python python nondist peps in directory sc pr cvs sourceforge net tmp cvs serv.
9632 	X	modified files pep txt im done with this.
9633 	X	itll need a further update when guido makes a.
9634 	X	this is still a work in.
9635 	X	please note that the point of this pep is not to provide an open slather of plusses and minuses for each syntax but is instead to justify the choice.
9636 	X	if in the syntax is changed the pep will be updated to match this complete with the arguments for the.
9637 	X	the final decision on the syntax for is not yet.
9638 	X	this will be done before and this document will be updated to.
9639 	X	note also that this document does not attempt to cover the huge number of potential alternative syntaxes nor is it an attempt to exhaustively list all the positives and negatives of each.
9640 	X	abstract decorator concept before encountering it in.
9641 	X	theres just no strong preexisting meme that captures the.
9642 	X	syntax discussions in general appear to cause more contention than almost anything.
9643 	X	readers are pointed to the ternary operator discussions that were associated with pep for another example of.
9644 	X	background rather than attempting to work through these individual syntaxes its worthwhile to break the syntax discussion down into a number of.
9645 	X	attempting to discuss each possible syntax individually would be an act of madness and produce a completely unwieldly.
9646 	X	act of madness and produce a completely unwieldy.
9647 	X	a large number http www python org moin pythondecorators will be in will also require one decorator per line in a multiple decorators can be specified on the same line.
9648 	X	people also complained that the syntax got unwieldly quickly when people also complained that the syntax got unworldly quickly when multiple decorators were.
9649 	X	the point was made though that the chances of a large number of decorators were used on a single function were small and thus this was not a large.
9650 	X	properly without having to go back and change your initial perceptions if the syntax did not come before the function.
9651 	X	guido decided he preferred having the decorators on the line before the def because it was felt that a long argument list would mean that the decorators would be hidden.
9652 	X	the second form is the decorators between the def and the function name or the function name and the argument list.
9653 	X	def bar lowhigh accepts intint returns float pass.
9654 	X	guido summarised the arguments against this form many of which guido summarized the arguments against this form many of which also apply to the previous form as.
9655 	X	it hides crucial information e g that it is a static method its cumbersome to cut and paste a decorator list for reuse because it starts and ends in the middle of a line.
9656 	X	summarised the arguments summarized the arguments.
9657 	X	the next form is that the decorator syntax go inside the method syntax forms.
9658 	X	accepts intint returns float def bar lowhigh pass.
9659 	X	the major objections against this syntax are that the symbol is not currently used in python and is used in both ipython and leo that the symbol is not meaningful and that the symbol is not.
9660 	X	another objection is that this wastes a currently unused character from a limited set on something that is not perceived as a major.
9661 	X	accepts intint returns float def bar lowhigh pass.
9662 	X	this is a variant on the decorator syntax it has the advantage that it does not break ipython and.
9663 	X	its major disadvantage compared to the syntax is that the symbol looks like both a capital i and a lowercase l.
9664 	X	accepts intint returns float def bar lowhigh pass.
9665 	X	the major objection to the list syntax is that its currently meaningful when used in the form before the method.
9666 	X	its also lacking any indication that the expression is a.
9667 	X	none of these alternatives gained much.
9668 	X	the alternatives which involve square brackets only serve to make it obvious that the decorator construct is not a.
9669 	X	they do nothing to make parsing any.
9670 	X	the alternative presents parsing problems because and already parse as un.
9671 	X	they present a further parsing ambiguity because a right angle bracket might be a greater than symbol instead of a closer for the.
9672 	X	both jp calderone and philip eby produced implementations of functions that did.
9673 	X	guido was pretty firmly against this with no new syntax the magicness of a function like this is extremely.
9674 	X	the text in this section will be integrated into the previous.
9675 	X	several other syntaxes have been proposed.
9676 	X	def func arg arg as dec dec pass.
9677 	X	the absence of brackets makes it cumbersome to break long lists of decorators across multiple lines and the keyword as doesnt have the same meaning as its use in the import.
9678 	X	plenty of alternatives to as have been.
9679 	X	alternatives to as http groups google com groupshl.
9680 	X	en lr ie utf oe utf threadm.
9681 	X	python list python org rnum prev groups fq dpython bpep b hl den lr d ie dutf oe dutf selm.
9682 	X	this form has the disadvantage that the decorators visually assume higher priority than the function name and argument.
9683 	X	def func dec dec arg arg pass.
9684 	X	quixotes python template language uses this form but only supports a single decorator chosen from a restricted.
9685 	X	for short lists it works okay but for long list it separates the argument list from the function.
9686 	X	using dec dec def foo arg arg pass.
9687 	X	the function definition is not nested within the using block making it impossible to tell which objects following the block will be.
9688 	X	nesting the function definition within the using block suggests nesting of namespaces that doesnt.
9689 	X	the name foo would actually exist at the same scope as the using.
9690 	X	finally it would require the introduction of a new.
9691 	X	the obvious alternative that nests the function within the block.
9692 	X	using dec dec def foo arg arg pass.
9693 	X	having the minimal indent level be three deep for methods is painful for those using limited width.
9694 	X	the inconsistent indentation between methods of the same class with and without decorators would be a readability.
9695 	X	finally adding or removing decorators would require reindenting the entire function method.
9696 	X	guido proposed and implemented a patch to support interpretation of a list of decorators as a prefix to function definitions.
9697 	X	dec dec def foo arg arg pass.
9698 	X	for a while this was guidos preferred solution but negative sentiment ran high mostly because that syntax though useless except for side effects of the list is already legal and thus creates a special.
9699 	X	one attraction people later had to the syntax though was the possibility of implementing a backwards compatible implementation of decorators so that versions prior to back to could also use the new.
9700 	X	but it was decided this was not a valid argument since the feature is new it should not be restricted just so that previous versions could possibly use.
9701 	X	list of decorators http python org sf.
9702 	X	another variant on the list syntax that was initially favored was.
9703 	X	def func arg arg dec dec pass.
9704 	X	guido decided he preferred having the decorators on the line before the def because it was felt that a long argument list would mean that the decorators would be hidden.
9705 	X	phillip eby and jp calderone both proposed variants that required no new syntax but instead used some fairly advanced introspection to provide decorator like behavoiur but guido was unimpressed by these stating this is extremely high.
9706 	X	using functions with action at a distance through sys settraceback may be okay for an obscure feature that cant be their design needs to be forward looking not constrained by what can be implemented in.
9707 	X	a page on the python wiki was created to summarize a number of the.
9708 	X	once it stabilizes perhaps someone would care to incorporate its content into this pep hint hint.
9709 	X	page on the python wiki http www python org moin pythondecorators this idea was the consensus alternate from comp lang.
9710 	X	robert brewer wrote up a detailed j proposal document outlining the arguments in favor of.
9711 	X	the issues with this form are that it requires a new keyword and therefore a from future import decorators statement it seems like there is no obvious choice for the keyword using is the choice of the proposal and implementation and that the form produces something that looks like a normal code block but.
9712 	X	attempts to use statements in this block will cause a syntax.
9713 	X	its also going to potentially confuse users who dont expect a block to contain bare.
9714 	X	there are plenty of other variants and proposals on the wiki page.
9715 	X	the wiki page http www python org moin pythondecorators.
9716 	X	the alternatives which involve square brackets only serve to make it obvious that the decorator construct is not a.
9717 	X	they do nothing to make parsing any.
9718 	X	the alternative presents parsing problems because and already parse as un.
9719 	X	they present a further parsing ambiguity because a right angle bracket might be a greater than symbol instead of a closer for the.
9720 	X	javadoc comments http java sun com jse javadoc writingdoccomments.
9721 	X	guido asked for a voluteer to implement his preferred syntax and mark guido asked for a volunteer to implement his preferred syntax and mark russell stepped up and posted a patch to.
9722 	X	patch http www python org sf previous patch http starship python net crew mwh hacks meth syntax sugar diff.
9723 	X	after was released in response to community reaction guido stated that hed re examine a community proposal if the community could come up with a community consensus a decent proposal and an.
9724 	X	after an amazing number of posts collecting a vast number of alternatives in the python wiki the proposed j syntax the new keyword using in a block before the def.
9725 	X	robert brewer wrote a detailed proposal for this form and michael sparks produced a patch.
9726 	X	as at time of writing were waiting for guidos.
9727 	X	python wiki http www python org moin pythondecorators detailed proposal a patch http www python org sf.
9728 	X	note that this example is probably not suitable for real usage but is for example purposes.
9729 	X	define a class with a singleton.
9730 	X	note that once the class disappears enterprising programmers would have to be more creative to create more.
9731 	X	from shane hathaway on python dev.
9732 	X	note that this is not exactly correct as the returned new f doesnt have func as its func name.
9733 	X	note that this copies the func name attribute from the old to the new.
9734 	X	func name was made writable in python.
9735 	X	def accepts types def check accepts f assert isinstance a t arg r does not match s at return f args kwds new f func name f func name return new f return check accepts.
9736 	X	assert isinstance result rtype return value r does not match s resultrtype return result new f func name f func name return new f return check returns.
9737 	X	their design needs to be forward looking not constrained by what can be implemented in.
9738 	X	new keyword and block new keyword and block.
9739 	X	this idea was the consensus alternate from comp lang.
9740 	X	robert brewer wrote up a detailed j proposal document outlining the arguments in favor of.
9741 	X	the issues with this form are that it requires a new keyword and therefore a from future import decorators statement it seems like there is no obvious choice for the keyword using is the choice of the proposal and implementation and that the form produces something that looks like a normal code block but.
9742 	X	attempts to use statements in this block will cause a syntax.
9743 	X	its also going to potentially confuse users who dont expect a block to contain bare.
9744 	X	this idea was the consensus alternate from comp lang.
9745 	X	robert brewer wrote up a detailed j proposal document outlining the arguments in favor of.
9746 	X	the issues with this form are.
9747 	X	it requires a new keyword and therefore a from future import decorators.
9748 	X	j proposal the choice of keyword is.
9749 	X	however using emerged as the consensus choice and is used in the proposal and.
9750 	X	the keyword block form produces something that looks like a normal code block but.
9751 	X	attempts to use statements in this block will cause a syntax.
9752 	X	it may confuse users who dont expect a block to contain bare.
9753 	X	on the other hand the syntax is bound to cause at least as much.
9754 	X	there are plenty of other variants and proposals on the wiki page.
9755 	X	the wiki page http www python org moin pythondecorators.
9756 	X	javadoc comments http java sun com jse javadoc writingdoccomments annotations patch http www python org sf previous patch http starship python net crew mwh hacks meth syntax sugar diff.
9757 	X	after an amazing number of posts collecting a vast number of alternatives in the python wiki the proposed j syntax the new keyword using in a block before the def.
9758 	X	robert brewer wrote a detailed proposal for this form and michael sparks produced a patch.
9759 	X	as at time of writing were waiting for guidos.
9760 	X	after an amazing number of posts collecting a vast number of alternatives in the python wiki a community consensus emerged below.
9761 	X	as at time of writing were waiting for guidos.
9762 	X	python wiki http www python org moin pythondecorators.
9763 	X	the consensus that emerged was for the proposed j syntax the new keyword using prefixing a block of decorators before the def.
9764 	X	using classmethod synchronized lock def func cls pass.
9765 	X	the main arguments for this syntax fall under the readability counts.
9766 	X	a suite is better than multiple.
9767 	X	the using keyword and block transforms the single block def statement into a multiple block compound construct akin to try finally and.
9768 	X	a keyword is better than punctuation for a new.
9769 	X	a keyword matches the existing use of.
9770 	X	a keyword distinguishes python decorators from java annotations and net attributes which are significantly different.
9771 	X	robert brewer wrote a detailed proposal for this form and michael sparks produced a patch.
9772 	X	from goodger at users sourceforge net goodger users sourceforge net message id ecnei kr co sc pr cvs sourceforge net.
9773 	X	update of cvsroot python python nondist peps in directory sc pr cvs sourceforge net tmp cvs serv.
9774 	X	modified files pep txt made j proposal more prominent and removed some perceived.
9775 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff u d r r pep txt aug warningwarningwarning.
9776 	X	the final decision on the syntax for is not yet.
9777 	X	this will be done before and this document will be updated to.
9778 	X	note also that this document does not attempt to cover the huge number of potential alternative syntaxes nor is it an attempt to exhaustively list all the positives and negatives of each.
9779 	X	the final decision on the syntax for is not yet.
9780 	X	this will be done before and this document will be updated to.
9781 	X	note also that this document does not attempt to cover the huge number of potential alternative syntaxes nor is it an attempt to exhaustively list all the positives and negatives of each.
9782 	X	abstract discussions that were associated with pep for another example of.
9783 	X	note that the function isnt actually wrapped in the usual.
9784 	X	define a class with a singleton.
9785 	X	note that once the class disappears enterprising programmers would have to be more creative to create more.
9786 	X	from shane hathaway on python dev.
9787 	X	disappears enterprising programmers would have to be more creative to create more.
9788 	X	from shane hathaway on python dev.
9789 	X	its not yet certain that class decorators will be incorporated into the language at this.
9790 	X	guido expressed skepticism about into the language at a future.
9791 	X	guido expressed skepticism about the concept but various people have made some strong arguments search for pep posting draft on their behalf in python dev.
9792 	X	its exceedingly unlikely that class decorators will be in python.
9793 	X	the choice of the character will be re examined before python.
9794 	X	from anthonybaxter at users sourceforge net anthonybaxter users sourceforge net message id ecwd bx i sc pr cvs sourceforge net.
9795 	X	update of cvsroot python python nondist peps in directory sc pr cvs sourceforge net tmp cvs serv.
9796 	X	modified files pep txt log message ding dong the witch is.
9797 	X	im not sure if the community concensus section should be trimmed down radically now its a lot of words for a rejected form and the case for the form is still available on the web and in the mailing list opinions anyone.
9798 	X	the final decision on the syntax for is not yet.
9799 	X	this will be done before and this document will be updated to.
9800 	X	note also that this document does not attempt to cover the huge number of potential alternative syntaxes nor is it an attempt to exhaustively list all the positives and negatives of each.
9801 	X	this document is meant to describe the decorator syntax and the process that resulted in the decisions that were.
9802 	X	it does not attempt to cover the huge number of potential alternative syntaxes nor is it an attempt to exhaustively list all the positives and negatives of each.
9803 	X	the current method for transforming functions and methods for instance declaring them as a class or static method is awkward and can lead to code that is difficult to.
9804 	X	ideally these transformations should be made at the same point in the code where the declaration itself is.
9805 	X	this pep introduces new syntax for transformations of a function or method.
9806 	X	the current method for transforming functions and methods for instance declaring them as a class or static method is awkward and can lead to code that is difficult to.
9807 	X	ideally these transformations should be made at the same point in the code where the declaration itself is.
9808 	X	this pep introduces new syntax for transformations of a function or method.
9809 	X	the current method of applying a transformation to a function or method places the actual translation after the function.
9810 	X	for large functions this separates a key component of the functions behavior from the definition of the rest of the functions external.
9811 	X	for example the current method of applying a transformation to a function or method places the actual translation after the function.
9812 	X	for large functions this separates a key component of the functions behavior from the definition of the rest of the functions external.
9813 	X	def foo self perform method operation foo classmethod foo.
9814 	X	this becomes less readable with longer.
9815 	X	it also seems less than pythonic to name the function three times for what is conceptually a single.
9816 	X	a solution to this problem is to move the transformation of the method closer to the methods own.
9817 	X	while the new syntax is not yet final the intent is to replace than pythonic to name the function three times for what is conceptually a single.
9818 	X	a solution to this problem is to move the transformation of the method closer to the methods own.
9819 	X	while the new syntax is not yet final the intent is to replace.
9820 	X	def foo cls pass def foo cls pass.
9821 	X	modifying classes in this fashion is also possible though the benefits are not as immediately.
9822 	X	almost certainly anything which could be done with class decorators could be done using metaclasses but using metaclasses is sufficiently obscure that there is some attraction to having an easier way to make simple modifications to.
9823 	X	for python only function method decorators are were.
9824 	X	modifying classes in this fashion is also possible though the benefits are not as immediately.
9825 	X	almost certainly anything which could be done with class decorators could be done using metaclasses but using metaclasses is sufficiently obscure that there is some attraction to having an easier way to make simple modifications to.
9826 	X	for python only function method decorators are were.
9827 	X	two decorators classmethod and staticmethod have been available in python since version.
9828 	X	its been assumed since two decorators classmethod and staticmethod have been available in python since version.
9829 	X	its been assumed since approximately that time that some syntactic support for them would eventually be added to the.
9830 	X	given this assumption one might wonder why its been so difficult to arrive at a.
9831 	X	discussions have raged off and on at times in both comp lang python and the python dev mailing list about how best to implement function.
9832 	X	there is no one clear reason why this should be so but a few problems seem to be most.
9833 	X	wonder why its been so difficult to arrive at a.
9834 	X	discussions have raged off and on at times in both comp lang python and the python dev mailing list about how best to implement function.
9835 	X	there is no one clear reason why this should be so but a few problems seem to be most.
9836 	X	disagreement about where the declaration of intent.
9837 	X	almost everyone agrees that decorating transforming a function at the end of its definition is.
9838 	X	beyond that there seems to be no clear consensus where to place this.
9839 	X	almost everyone agrees that decorating transforming a function at the end of its definition is.
9840 	X	beyond that there seems to be no clear consensus where to place this.
9841 	X	python is a syntactically simple language with fairly strong constraints on what can and cant be done without messing things up both visually and with regards to the language parser.
9842 	X	theres no obvious way to structure this information so that people new to the concept will think oh yeah i know what youre.
9843 	X	the best that seems possible is to keep new users from creating a wildly incorrect mental model of what the syntax.
9844 	X	the best that seems possible is to keep new users from creating a wildly incorrect mental model of what the syntax.
9845 	X	for people who have a passing acquaintance with algebra or even basic arithmetic or have strong preexisting meme that captures the.
9846 	X	syntax discussions in general appear to cause more contention than almost anything.
9847 	X	readers are pointed to the ternary operator almost anything.
9848 	X	readers are pointed to the ternary operator discussions that were associated with pep for another example of.
9849 	X	there is general agreement that syntactic support is desirable to the current state of.
9850 	X	guido mentioned syntactic support for decorators in his devday keynote presentation at the th python conference though he later said it was only one of several extensions he proposed there semi jokingly.
9851 	X	michael hudson raised the topic on python dev shortly after the conference there is general agreement that syntactic support is desirable to the current state of.
9852 	X	guido mentioned syntactic support for decorators in his devday keynote presentation at the th python conference though he later said it was only one of several extensions he proposed there semi jokingly.
9853 	X	michael hudson raised the topic on python dev shortly after the conference attributing the initial bracketed syntax to an earlier proposal on comp lang python by gareth mccaughan.
9854 	X	en lr ie utf oe utf selm.
9855 	X	class decorations seem like an obvious next step because class definition and function definition are syntactically.
9856 	X	definition and function definition are syntactically similar however guido remains unconvinced and class decorators will almost certainly not be in python.
9857 	X	the discussion continued on and off on python dev from february through july.
9858 	X	hundreds and hundreds of posts were made with people proposing many possible syntax.
9859 	X	guido took a list of proposals to europython where a discussion took.
9860 	X	subsequent to this he decided that for wed have the java style decorator.
9861 	X	barry warsaw named this the pie decorator syntax in honor of the pie thon parrot shootout which was announced about the same time as the decorator syntax and because the looks a little like a.
9862 	X	guido outlined his case on python dev including this piece on the various rejected.
9863 	X	the discussion continued on and off on python dev from february through july.
9864 	X	hundreds and hundreds of posts were made with people proposing many possible syntax.
9865 	X	guido took a list of proposals to europython where a discussion took.
9866 	X	subsequent to this he decided that wed have the java style decorator syntax and this appeared for the first time in.
9867 	X	barry warsaw named this the pie decorator syntax in honor of the pie thon parrot shootout which was occured around the same time as the decorator syntax and because the looks a little like a.
9868 	X	guido outlined his case on python dev including this piece on some of the many rejected.
9869 	X	europython http www python org doc essays ppt euro euro pdf frequently.
9870 	X	not make it more difficult to scan through code.
9871 	X	it should still be easy to search for all definitions a particular definition or the arguments that a function accepts still be easy to search for all definitions a particular definition or the arguments that a function accepts.
9872 	X	not needlessly complicate secondary support tools such as language sensitive editors and other toy parser tools out.
9873 	X	allow future compilers to optimize for.
9874 	X	with the hope of a jit compiler for python coming into existence at some point this tends to require the syntax for decorators to come before the function definition tends to require the syntax for decorators to come before the function definition.
9875 	X	move from the end of the function where its currently hidden to the front where it is more in your face func dec dec func.
9876 	X	without the intermediate assignment to the variable func.
9877 	X	the decorators are near the function.
9878 	X	the sign makes it clear that something new is going on.
9879 	X	the sign makes it clear that something new is going on.
9880 	X	the decorator statement is limited in what it can accept arbitrary expressions will not.
9881 	X	guido preferred this because of a gut the first syntax point is the location of the.
9882 	X	for the following examples we use the syntax used in.
9883 	X	decorators before the def statement are the first alternative and the syntax used in decorators before the def statement are the first alternative and the syntax used in.
9884 	X	classmethod def foo argarg def bar lowhigh pass.
9885 	X	there have been a number of objections raised to this location the primary one is that its the first real python case where a line of code has a result on a following.
9886 	X	the syntax that will be in will also require one decorator per line in a multiple decorators can be specified on the same line.
9887 	X	there have been a number of objections raised to this location the primary one is that its the first real python case where a line of code has a result on a following.
9888 	X	the syntax available for in requires one decorator per line in a multiple decorators could be specified on the same line.
9889 	X	people also complained that the syntax got unworldly quickly when multiple decorators were.
9890 	X	the point was made though that the chances of a large number of decorators were used on a single function were small and thus this was not a large.
9891 	X	some of the advantages of this form are that the decorators live outside the method body they are obviously executed at the time the function is.
9892 	X	some of the advantages of this form are that the decorators live outside the method body they are obviously executed at the time the function is.
9893 	X	another advantage is that were prefix to the function definition fit the idea of knowing about a change to the semantics of the code before the code itself thus knowing how to interpret the codes semantics another advantage is that were prefix to the function definition fit the idea of knowing about a change to the semantics of the code before the code itself thus knowing how to interpret the codes semantics properly without having to go back and change your initial perceptions if the syntax did not come before the function.
9894 	X	guido decided he preferred having the decorators on the line before the def because it was felt that a long argument list would mean that the decorators would be hidden the def because it was felt that a long argument list would mean that the decorators would be hidden.
9895 	X	the second form is the decorators between the def and the function name or the function name and the argument list the second form is the decorators between the def and the function name or the function name and the argument list.
9896 	X	def classmethod foo argarg pass there are a couple of objections to this.
9897 	X	the first is that it breaks easily greppability of the source you can no longer search for def foo and find the definition of the.
9898 	X	the second more serious objection is that in the case of multiple decorators the syntax would be extremely.
9899 	X	more serious objection is that in the case of multiple decorators the syntax would be extremely.
9900 	X	the next form which has had a number of strong proponents is to have the decorators between the argument list and the trailing in the def line the next form which has had a number of strong proponents is to have the decorators between the argument list and the trailing in the def line.
9901 	X	def foo argarg classmethod pass def bar lowhigh accepts intint returns float pass.
9902 	X	guido summarized the arguments against this form many of which also apply to the previous form as guido summarized the arguments against this form many of which also apply to the previous form as.
9903 	X	it hides crucial information e g that it is a static method after the signature where it is easily missed summarized the arguments.
9904 	X	the next form is that the decorator syntax go inside the method body at the start in the same place that docstrings currently live the next form is that the decorator syntax go inside the method body at the start in the same place that docstrings currently live.
9905 	X	def foo argarg classmethod returns float pass.
9906 	X	the primary objection to this form is that it requires peeking inside the method body to determine the.
9907 	X	in addition even though the code is inside the method body it is not executed when the method is.
9908 	X	guido felt that docstrings were not a good counter example and that it was quite possible that a docstring decorator could help move the docstring to outside the function.
9909 	X	the primary objection to this form is that it requires peeking inside the method body to determine the.
9910 	X	in addition even though the code is inside the method body it is not executed when the method is.
9911 	X	guido felt that docstrings were not a good counter example and that it was quite possible that a docstring decorator could help move the docstring to outside the function.
9912 	X	the final form is a new block that encloses the methods.
9913 	X	for this example well use a decorate keyword as it makes no sense with the.
9914 	X	the final form is a new block that encloses the methods.
9915 	X	for this example well use a decorate keyword as it makes no sense with the.
9916 	X	this form would result in inconsistent indentation for decorated and undecorated.
9917 	X	in addition a decorated methods body would start three indent levels.
9918 	X	in addition a decorated methods body would start three indent levels.
9919 	X	the major objections against this syntax are that the symbol is not currently used in python and is used in both ipython and leo and that the symbol is not.
9920 	X	another objection is that and that the symbol is not.
9921 	X	another objection is that this wastes a currently unused character from a limited set on something that is not perceived as a major.
9922 	X	this is a variant on the decorator syntax it has the advantage that it does not break ipython and.
9923 	X	its major disadvantage compared to the syntax is that the symbol looks like both a capital i and a lowercase l compared to the syntax is that the symbol looks like both a capital i and a lowercase l.
9924 	X	the decorate proposal was that no new syntax be implemented instead a magic function that used introspection to manipulate the following.
9925 	X	both jp calderone and philip eby produced the decorate proposal was that no new syntax be implemented the following.
9926 	X	both jp calderone and philip eby produced implementations of functions that did.
9927 	X	guido was pretty firmly against this with no new syntax the magicness of a function like this is extremely high.
9928 	X	using functions with action at a distance through sys settraceback may be okay for an obscure feature that cant be had any other way yet doesnt merit changes to the language but thats not the situation for.
9929 	X	the widely held view here is that decorators need to be added as a syntactic feature to avoid the problems with the postfix notation used in and.
9930 	X	decorators are slated to be an important new language feature and their design needs to be forward looking not constrained by what can be implemented in.
9931 	X	using functions with action at a distance through sys settraceback may be okay for an obscure feature that cant be had any other way yet doesnt merit changes to the language but thats not the situation for.
9932 	X	the widely held view here is that decorators need to be added as a syntactic feature to avoid the problems with the postfix notation used in and.
9933 	X	decorators are slated to be an important new language feature and their design needs to be forward looking not constrained by what can be implemented in.
9934 	X	this idea was the consensus alternate from comp lang.
9935 	X	robert brewer wrote up a detailed j proposal document outlining the arguments in favor of.
9936 	X	the issues with this form are this idea was the consensus alternate from comp lang python more on this in community consensus.
9937 	X	robert brewer wrote up a detailed j proposal document outlining the arguments in favor of this.
9938 	X	the initial issues with this form are.
9939 	X	it requires a new keyword and therefore a from future import decorators.
9940 	X	attempts to use statements in this block will cause a syntax error which may confuse.
9941 	X	a few days later guido rejected the proposal on two main grounds firstly.
9942 	X	the syntactic form of an indented block strongly suggests that its contents should be a sequence of statements but in fact it is not only expressions are allowed and there is an implicit collecting of these expressions going on until they can be applied to the subsequent function.
9943 	X	the keyword starting the line that heads a block draws a lot of attention to.
9944 	X	but the using keyword or any other keyword in its place doesnt deserve that attention the emphasis should be on the decorator or decorators inside the suite since those are the important modifiers to the function definition that.
9945 	X	readers are invited to read the full response.
9946 	X	there are plenty of other variants and proposals on the wiki page.
9947 	X	there are plenty of other variants and proposals on the wiki page.
9948 	X	the wiki page http www python org moin pythondecorators why.
9949 	X	there is some history in java using initially as a marker in javadoc comments and later in java for annotations which are similar to python.
9950 	X	the fact that was previously unused as a token in python also means its clear there is no possibility of such code were parsed by an earlier version of python leading to possibly subtle semantic.
9951 	X	it also means that ambiguity of what is a decorator and what isnt is of that said is still a fairly arbitrary.
9952 	X	there is some history in java using initially as a marker in javadoc comments and later in java for annotations which are similar to python.
9953 	X	the fact that was previously unused as a token in python also means its clear there is no possibility of such code were parsed by an earlier version of python leading to possibly subtle semantic.
9954 	X	it also means that ambiguity of what is a decorator and what isnt is of that said is still a fairly arbitrary.
9955 	X	javadoc comments http java sun com jse javadoc writingdoccomments.
9956 	X	guido asked for a volunteer to implement his preferred syntax and mark russell stepped up and posted a patch to.
9957 	X	the syntax accepted for is russell stepped up and posted a patch to.
9958 	X	this new syntax was available in.
9959 	X	though without the intermediate creation of a variable named func.
9960 	X	the version implemented in allowed multiple decorator clauses on a single.
9961 	X	in this was tightened up to only allowing one decorator per.
9962 	X	a previous patch from michael hudson which implements the list after def syntax is also still kicking.
9963 	X	could come up with a community consensus a decent proposal and an.
9964 	X	after an amazing number of posts collecting a vast number of alternatives in the python wiki a community consensus emerged below.
9965 	X	as at time of writing were waiting for guidos.
9966 	X	guido subsequently rejected this alternate form but added.
9967 	X	in python to be released this thursday everything remains as currently in.
9968 	X	for i will consider a change of to some other single character even though i think that has the advantage of were the same character used by a similar feature in.
9969 	X	its been argued that its not quite the same since in java is used for attributes that dont change.
9970 	X	but pythons dynamic nature makes that its syntactic elements never mean quite the same thing as similar constructs in other languages and there is definitely significant.
9971 	X	regarding the impact on rd party tools ipythons author doesnt think theres going to be much impact leos author has said that leo will survive although it will cause him and his users some transitional pain.
9972 	X	i actually expect that picking a character thats already used elsewhere in pythons syntax might be harder for external tools to adapt to since parsing will have to be more subtle in that.
9973 	X	but im frankly undecided so theres some wiggle room.
9974 	X	i dont want to consider further syntactic alternatives at this point the buck has to stop at some point everyone has had their say and the show must go.
9975 	X	python wiki http www python org moin pythondecorators subsequently rejected.
9976 	X	the consensus that emerged was for the proposed j syntax the new keyword using prefixing a block of decorators before the def.
9977 	X	for example editors note should this section be removed now.
9978 	X	the consensus that emerged on comp lang python was the proposed j syntax the j was how it was referenced on the pythondecorators wiki page the new keyword using prefixing a block of decorators before the def.
9979 	X	using classmethod a patch http www python org sf.
9980 	X	as noted previously guido rejected this form outlining his problems with it in a message to python dev and comp lang.
9981 	X	much of the discussion on comp lang python and the python dev mailing list focuses on the use of decorators as a cleaner way to use the staticmethod and classmethod.
9982 	X	this capability is much more powerful than.
9983 	X	this section presents some examples of the staticmethod and classmethod.
9984 	X	this capability is much more powerful than.
9985 	X	this section presents some examples of.
9986 	X	define a function to be executed at.
9987 	X	from rhettinger at users sourceforge net rhettinger users sourceforge net date fri sep cest pep txt message id.
9988 	X	update of cvsroot python python nondist peps in directory sc pr cvs sourceforge net tmp cvs serv.
9989 	X	modified files pep txt pep txt record pronouncement on conditional.
9990 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff u d r r pep txt sep.
9991 	X	accepted peps accepted may not be implemented yet.
9992 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff u d r r pep txt sep post history feb feb.
9993 	X	on guido decided to add conditional expressions in the form of x if c else y.
9994 	X	the motivating use case was the prevalance of error prone attempts to achieve the same effect using and and or previous community efforts to add a conditional expression were stymied by a lack of consensus on the best.
9995 	X	that issue was resolved by simply deferring to a bdfl best judgment.
9996 	X	the decision was validated by reviewing the how the syntax fared when applied throughout the standard library this review approximates a sampling of real world use cases across a variety of applications written by a number of programmers with diverse backgrounds.
9997 	X	review in the context of real world code fragments.
9998 	X	introduction to earlier draft of the pep kept for historical purposes.
9999 	X	requests for an if then else ternary expression keep coming up on comp lang.
10000 	X	this pep contains a concrete proposal of a.
10001 	X	from rhettinger at users sourceforge net rhettinger users sourceforge net date fri sep cest pep txt message id.
10002 	X	update of cvsroot python python nondist peps in directory sc pr cvs sourceforge net tmp cvs serv.
10003 	X	modified files pep txt pep txt record pronouncement on conditional.
10004 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff u d r r pep txt sep.
10005 	X	accepted peps accepted may not be implemented yet.
10006 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff u d r r pep txt sep post history feb feb.
10007 	X	on guido decided to add conditional expressions in the form of x if c else y.
10008 	X	the motivating use case was the prevalance of error prone attempts to achieve the same effect using and and or previous community efforts to add a conditional expression were stymied by a lack of consensus on the best.
10009 	X	that issue was resolved by simply deferring to a bdfl best judgment.
10010 	X	the decision was validated by reviewing the how the syntax fared when applied throughout the standard library this review approximates a sampling of real world use cases across a variety of applications written by a number of programmers with diverse backgrounds.
10011 	X	review in the context of real world code fragments.
10012 	X	introduction to earlier draft of the pep kept for historical purposes.
10013 	X	requests for an if then else ternary expression keep coming up on comp lang.
10014 	X	this pep contains a concrete proposal of a.
10015 	X	from goodger at users sourceforge net goodger users sourceforge net message id.
10016 	X	update of cvsroot python python nondist peps in directory sc pr cvs sourceforge net tmp cvs serv.
10017 	X	modified files pep txt log message fixed typo added whitespace.
10018 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff u d r r pep txt sep post history feb feb.
10019 	X	on guido decided to add conditional expressions in the stymied by a lack of consensus on the best.
10020 	X	that issue was resolved by simply deferring to a bdfl best judgment.
10021 	X	the decision was validated by reviewing the how the syntax fared when the decision was validated by reviewing how the syntax fared when applied throughout the standard library this review approximates a sampling of real world use cases across a variety of applications written by a number of programmers with diverse backgrounds.
10022 	X	from goodger at users sourceforge net goodger users sourceforge net message id.
10023 	X	update of cvsroot python python nondist peps in directory sc pr cvs sourceforge net tmp cvs serv.
10024 	X	modified files pep txt log message fixed typo added whitespace.
10025 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff u d r r pep txt sep post history feb feb.
10026 	X	on guido decided to add conditional expressions in the stymied by a lack of consensus on the best.
10027 	X	that issue was resolved by simply deferring to a bdfl best judgment.
10028 	X	the decision was validated by reviewing the how the syntax fared when the decision was validated by reviewing how the syntax fared when applied throughout the standard library this review approximates a sampling of real world use cases across a variety of applications written by a number of programmers with diverse backgrounds.
10029 	X	from gvanrossum at users sourceforge net gvanrossum users sourceforge net date fri sep cest pep txt message id.
10030 	X	update of cvsroot python python nondist peps in directory sc pr cvs sourceforge net tmp cvs serv.
10031 	X	modified files pep txt pep txt rename pep to conditional expressions.
10032 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff u d r r pep txt sep.
10033 	X	accepted peps accepted may not be implemented yet.
10034 	X	sa if then else expression gvr hettinger sa conditional expressions gvr hettinger sa imports multi line and absolute relative aahz sa coroutines via enhanced generators gvr eby sa anonymous block redux and generator enhancements gvr sf csv file api montanaro et al i how to change pythons grammar hudson sf extensions to the pickle protocol gvr peters sa if then else expression gvr hettinger sa conditional expressions gvr hettinger sf partial function application harris s reliable acquisition release pairs hudson moore sf simplified gil acquisition for extensions hammond.
10035 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff u d r r pep txt sep author guido van rossum raymond d hettinger.
10036 	X	from gvanrossum at users sourceforge net gvanrossum users sourceforge net date fri sep cest pep txt message id.
10037 	X	update of cvsroot python python nondist peps in directory sc pr cvs sourceforge net tmp cvs serv.
10038 	X	modified files pep txt pep txt rename pep to conditional expressions.
10039 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff u d r r pep txt sep.
10040 	X	accepted peps accepted may not be implemented yet.
10041 	X	sa if then else expression gvr hettinger sa conditional expressions gvr hettinger sa imports multi line and absolute relative aahz sa coroutines via enhanced generators gvr eby sa anonymous block redux and generator enhancements gvr sf csv file api montanaro et al i how to change pythons grammar hudson sf extensions to the pickle protocol gvr peters sa if then else expression gvr hettinger sa conditional expressions gvr hettinger sf partial function application harris s reliable acquisition release pairs hudson moore sf simplified gil acquisition for extensions hammond.
10042 	X	index pep txt rcs file cvsroot python python nondist peps pep txtv retrieving revision retrieving revision diff u d r r pep txt sep author guido van rossum raymond d hettinger.
10043 	X	from python checkins at python org andrew kuchling subject python checkins r python trunk misc news message id bbebe bag python org.
10044 	X	modified python trunk misc news some typo grammar fixes.
10045 	X	modified python trunk misc news python trunk misc news sat apr to error is triggered when raising a warning for raising string.
10046 	X	co generator allowed is no longer defined this behavior is the.
10047 	X	co generator allowed is no longer.
10048 	X	the name was removed from include code h.
10049 	X	pep conditional expressions were added x if cond else y.
10050 	X	patch the copy module now copies function objects as atomic objects.
10051 	X	patch work around signal handling bug in visual studio.
10052 	X	bug py buildvalue now works correct even with unsigned longs bug py buildvalue now works correctly even with unsigned longs and long.
10053 	X	sf bug setdlopenflags leads to crash upon import it was possible dlerror returns a null pointer use a default error message in this.
10054 	X	it was possible for dlerror to return a null pointer so it will now use a default error message in this.
10055 	X	replaced most unicode charmap codecs with new ones using the new unicode translate string feature in the builtin charmap.
10056 	X	added a few more codecs for mac os encodings.
10057 	X	a new ast parser implementation was.
10058 	X	the abstract syntax tree is available for read only non compile access to python code an ast module was.
10059 	X	sf bug fix incorrect code were for generator.
10060 	X	sf bug fix incorrect code were produced for generator.
10061 	X	the following code now raises a syntaxerror foo a i for i in range.
10062 	X	sf bug fix systemerror when mtime of an imported file is.
10063 	X	sf bug unknown encoding results in.
10064 	X	all iterators now have a boolean value of.
10065 	X	formerly some iterators all iterators now have a boolean value of.
10066 	X	formerly some iterators supported a len method which evaluated to false when the iterator was.
10067 	X	sf bug pythons small object memory allocator took over a block managed by the platform c library whenever a realloc specified a small new.
10068 	X	however theres no portable way to know then how much of the address space following the pointer is valid so no much of the address space following the pointer is valid so theres no portable way to copy data from the c managed block into pythons small object space without risking a memory.
10069 	X	pythons small object realloc now leaves such blocks under the control of the platform c bug make idna return an empty string when the input is.
10070 	X	use crlf as default output separator and do not output trailing.
10071 	X	separator and do not output trailing.
10072 	X	patch urllib urlretrieve now raises a new exception named contenttooshortexception when the actually downloaded size does not bug dont cache the dev urandom file descriptor for os urandom as this can cause problems with apps closing all file.
10073 	X	bug fix an attempt to access sys argv in the warnings module bug fix an attempt to access sys argv in the warnings module it can be missing in embedded interpreters.
10074 	X	bug fix a bug which affected http responses in.
10075 	X	the tokenize module has a new untokenize function to support a full roundtrip from lexed tokens back to python.
10076 	X	in addition roundtrip from lexed tokens back to python source.
10077 	X	in addition the generate tokens function now accepts a callable argument that terminates by raising.
10078 	X	pep conditional expressions http www python org dev peps pep.
10079 	X	from python checkins at python org thomas wouters message id cade bag python org.
10080 	X	modified peps trunk pep txt log.
10081 	X	clarify the listcomp problem and promise to fix.
10082 	X	modified peps trunk pep txt peps trunk pep txt mon apr owner jeremy hylton http python org sf.
10083 	X	list generator comprehensions dont support multiple if stmts may not be specifically related to ast possibly a grammar issue http python org sf list generator comprehensions dont support multiple if stmts a grammar issue introduced by the pep patch owner thomas wouters http python org sf.
10084 	X	xmlplus xmlcore situation wrt elementtree needs resolution owners fred drake martin von loewis fredrik lundh.
10085 	X	from python checkins at python org andrew kuchling subject python checkins r python trunk doc whatsnew whatsnew tex message id cfe bag python org.
10086 	X	modified python trunk doc whatsnew whatsnew tex log.
10087 	X	modified python trunk doc whatsnew whatsnew tex python trunk doc whatsnew whatsnew tex wed apr id.
10088 	X	fix xxx comments distutils upload pep the easy install stuff stateful codec changes ascii is now default encoding for modules.
10089 	X	section pep uploading modules to pypi.
10090 	X	pep describes an http based protocol for submitting software packages to a central.
10091 	X	the python package index at url http cheeseshop python org now supports package uploads and the new command upload distutils command will upload a package to the.
10092 	X	before a package can be uploaded you must be able to build a distribution using the command sdist distutils.
10093 	X	once that works you can run code python setup py upload to add your package to the pypi.
10094 	X	optionally you can gpg sign the package by supplying the programopt sign and programopt identity.
10095 	X	seepep module repository upload mechanism pep written by sean reifschneider implemented by martin von l owis and richard.
10096 	X	note that the pep doesnt exactly describe whats implemented in.
10097 	X	for a long time people have been requesting a way to write.
10098 	X	from python checkins at python org neal norwitz message id daaea bag python org.
10099 	X	modified peps trunk pep txt these bugs multiple ifs in comprehensions and pyrun api changes have been.
10100 	X	modified peps trunk pep txt peps trunk pep txt wed apr.
10101 	X	bdist wininst preinstall scripts broken by lack of pyrun simplestring and others.
10102 	X	ast compiler problems owner jeremy hylton eval str sys maxint should produce an int not.
10103 	X	owner jeremy hylton http python org sf.
10104 	X	list generator comprehensions dont support multiple if stmts a grammar issue introduced by the pep patch owner thomas wouters http python org sf.
10105 	X	xmlplus xmlcore situation wrt elementtree needs resolution owners fred drake martin von loewis fredrik lundh.
10106 	X	from python checkins at python org guido van rossum message id.
10107 	X	modified peps trunk pep txt add making a general.
10108 	X	modified peps trunk pep txt peps trunk pep txt wed apr support only new style classes classic classes will be gone replace print by a function do something so you can catch multiple exceptions using except e e e.
10109 	X	maybe use except e e e as err if you want the e.
10110 	X	probably use except e e e as err if you want the error variable.
10111 	X	none true and false become keywords or perhaps just none.
10112 	X	to become a general expression element as becomes a keyword probably in already have list comprehensions be syntactic sugar for passing an equivalent generator expression to list as a consequence the pep conditional expressions http www python org dev peps pep.
10113 	X	pep pep changing the division operator http www python org dev peps pep.
10114 	X	section pep conditional expressions section pep conditional expressions label pep.
10115 	X	for a long time people have been requesting a way to write conditional expressions expressions that return value a or value b.
10116 	X	section pep conditional expressions section pep conditional expressions label pep.
10117 	X	for a long time people have been requesting a way to write conditional expressions expressions that return value a or value b.
10118 	X	lambdas may have to be parenthesized pep.
10119 	X	builtin module init function names pymodinit func will be prefixed with py or py.
10120 	X	currently they arent namespace safe since the names with builtin.
10121 	X	keeping both with confusingly similar spellings and semantics is.
10122 	X	attributes on functions of the form func whatever will be renamed whatever set literals and comprehensions done whatever set literals and comprehensions done x means set x x y means set x y.
10123 	X	f x for x in s if p x means set f x for x in s if p x.
10124 	X	range x means set range x not set range x.
10125 	X	theres no literal for an empty set use set or.
10126 	X	theres no frozenset literal they are too rarely.
10127 	X	pep conditional expressions pep pep conditional expressions http www python org dev peps pep.
10128 	X	sf patch sys id and sys intern http www python org sf.
10129 	X	from python checkins at python org guido van rossum message id.
10130 	X	modified peps trunk pep txt clarify the new syntax and note a backwards.
10131 	X	modified peps trunk pep txt peps trunk pep txt sun feb sampling of real world use cases across a variety of applications written by a number of programmers with diverse backgrounds.
10132 	X	the following change will be made to the.
10133 	X	the or test symbols is new the others are.
10134 	X	test or test if or test else test lambdef or test and test or and test testlist safe or test or test gen for for exprlist in or test gen iter.
10135 	X	the new syntax introduces a minor syntactical backwards.
10136 	X	in previous python versions the following is legal.
10137 	X	f for f in lambda x x lambda x x if f.
10138 	X	i e a list comprehension where the sequence following in is an unparenthesized series of lambdas or just one lambda.
10139 	X	in python the series of lambdas will have to be parenthesized.
10140 	X	f for f in lambda x x lambda x x if f.
10141 	X	this is because lambda binds less tight than the if else expression but in this context the lambda could already be followed by an if keyword that binds less tightly still for details consider the grammar changes shown above.
10142 	X	given that this is a rather odd corner of the syntax the bdfl does not believe this backwards incompatibility requires us to use a future statement to enable the new.
10143 	X	from python checkins at python org guido van rossum message id.
10144 	X	modified peps trunk pep txt clarify the new syntax and note a backwards.
10145 	X	modified peps trunk pep txt peps trunk pep txt sun feb sampling of real world use cases across a variety of applications written by a number of programmers with diverse backgrounds.
10146 	X	the following change will be made to the.
10147 	X	the or test symbols is new the others are.
10148 	X	test or test if or test else test lambdef or test and test or and test testlist safe or test or test gen for for exprlist in or test gen iter.
10149 	X	the new syntax introduces a minor syntactical backwards.
10150 	X	in previous python versions the following is legal.
10151 	X	f for f in lambda x x lambda x x if f.
10152 	X	i e a list comprehension where the sequence following in is an unparenthesized series of lambdas or just one lambda.
10153 	X	in python the series of lambdas will have to be parenthesized.
10154 	X	f for f in lambda x x lambda x x if f.
10155 	X	this is because lambda binds less tight than the if else expression but in this context the lambda could already be followed by an if keyword that binds less tightly still for details consider the grammar changes shown above.
10156 	X	given that this is a rather odd corner of the syntax the bdfl does not believe this backwards incompatibility requires us to use a future statement to enable the new.
10157 	X	from python checkins at python org guido van rossum message id.
10158 	X	modified peps trunk pep txt clarify the new syntax and note a backwards.
10159 	X	modified peps trunk pep txt peps trunk pep txt sun feb sampling of real world use cases across a variety of applications written by a number of programmers with diverse backgrounds.
10160 	X	the following change will be made to the.
10161 	X	the or test symbols is new the others are.
10162 	X	test or test if or test else test lambdef or test and test or and test testlist safe or test or test gen for for exprlist in or test gen iter.
10163 	X	the new syntax introduces a minor syntactical backwards.
10164 	X	in previous python versions the following is legal.
10165 	X	f for f in lambda x x lambda x x if f.
10166 	X	i e a list comprehension where the sequence following in is an unparenthesized series of lambdas or just one lambda.
10167 	X	in python the series of lambdas will have to be parenthesized.
10168 	X	f for f in lambda x x lambda x x if f.
10169 	X	this is because lambda binds less tight than the if else expression but in this context the lambda could already be followed by an if keyword that binds less tightly still for details consider the grammar changes shown above.
10170 	X	given that this is a rather odd corner of the syntax the bdfl does not believe this backwards incompatibility requires us to use a future statement to enable the new.
10171 	X	modified python trunk include graminit h python trunk include graminit h mon feb define try stmt define except clause define suite define test define and test define not test define comparison define comp op define expr define xor expr define and expr define shift expr define arith expr define term define factor define power define atom define listmaker define testlist gexp define lambdef define trailer define subscriptlist define subscript define sliceop define exprlist define testlist define testlist safe define dictmaker define classdef define arglist define argument define list iter define list for define list if define gen iter define gen for define gen if define testlist define encoding decl define yield expr define testlist safe define old test define old lambdef define test define or test define and test define not test define comparison define comp op define expr define xor expr define and expr define shift expr define arith expr define term define factor define power define atom define listmaker define testlist gexp define lambdef define trailer define subscriptlist define subscript define sliceop define exprlist define testlist define dictmaker define classdef define arglist define argument define list iter define list for define list if define gen iter define gen for define gen if define testlist define encoding decl define yield expr.
10172 	X	modified python trunk lib test test grammar py python trunk lib test test grammar py mon feb x t false g ij for i in range x if t for j in range x x t true verify ij for i in range for j in range list g.
10173 	X	test ifelse expressions in various cases def checkeval msg ret helper to check that evaluation of expressions is done correctly print x return ret.
10174 	X	verify x for x in lambda true lambda false if x true verify x for x in lambda true lambda false if x true verify x false for x in lambda x false if x else true lambda x true if x else false if x false true verify if else checkeval check verify checkeval check if else verify and if else verify and if else verify and if else verify or checkeval check if else verify or checkeval check if else checkeval check verify or if else checkeval check verify not if else false verify not if else verify if else verify if else verify if else verify if else verify if else.
10175 	X	modified python trunk python ast c python trunk python ast c mon feb return lambda args expression lineno n c c arena.
10176 	X	static expr ty ast for ifexpr struct compiling c const node n test or test if or test else test expr ty expression body orelse.
10177 	X	count the number of for loop in a list.
10178 	X	ast for expr struct compiling c const node n handle the full range of simple expressions test and test or and test lambdef test or test if or test else test lambdef or test and test or and test and test not test and not test not test not not test comparison comparison expr comp op expr term factor factor factor factor power power atom trailer factor.
10179 	X	as well as modified versions that exist for backward compatibility to explicitly allow x for x in lambda lambda which would be ambiguous without these extra rules old test or test old lambdef old lambdef lambda vararglist old test.
10180 	X	asdl seq seq loop switch type n case test if type child n lambdef case old test if type child n lambdef type child n old lambdef return ast for lambdef c child n fall through to and test else if nch n return ast for ifexpr c n fallthrough case or test case and test if nch n n child n.
10181 	X	modified python trunk python compile c python trunk python compile c mon feb.
10182 	X	static int compiler lambda struct compiler c expr ty e pycodeobject co break case lambda kind return compiler lambda c e case ifexp kind return compiler ifexp c e case dict kind xxx get rid of arg addop i c build map.
10183 	X	from python checkins at python org thomas wouters subject python checkins r in python trunk doc ref ref tex grammar grammar include python ast h include graminit h lib test test grammar py parser python asdl python python ast c python ast c python compile c python graminit c python symtable c message id.
10184 	X	modified python trunk doc ref ref tex python trunk grammar grammar python trunk include python ast h python trunk include graminit h python trunk lib test test grammar py python trunk parser python asdl python trunk python python ast c python trunk python ast c python trunk python compile c python trunk python graminit c python trunk python symtable c log.
10185 	X	breaks the parser module because it adds the if else construct as well as two new grammar rules for backward.
10186 	X	if no one else fixes parsermodule i guess ill go ahead and fix it later this.
10187 	X	the tex code was checked with texcheck py but not.
10188 	X	there is actually a slight incompatibility.
10189 	X	x for x in lambda file stdin line in module typeerror iteration over non sequence.
10190 	X	x for x in lambda file stdin line x for x in lambda syntaxerror invalid syntax.
10191 	X	since theres no way the former version can be useful its probably a bugfix.
10192 	X	modified python trunk doc ref ref tex python trunk doc ref ref tex mon feb.
10193 	X	begin productionlist production test token and test or token and test token lambda form token or test token lambda form production testlist token test token test production list display.
10194 	X	begin productionlist production expression token or test token lambda form token or test token if token or test token else token test token lambda form production or test token and test token or test or token and test production and test code false.
10195 	X	the expression code var x if var c else var y first evaluates var c emph not var x if var c is true var x is evaluated and its value is returned otherwise var y is evaluated and its value is.
10196 	X	the expression code var x and var y first evaluates var x if var x is false its value is returned otherwise var y is evaluated and the resulting value is.
10197 	X	modified python trunk grammar grammar python trunk grammar grammar mon feb except clause except test test suite simple stmt newline indent stmt dedent.
10198 	X	test and test or and test lambdef backward compatibility cruft to support x for x in lambda true lambda false if x even while also allowing lambda x if x else but not a mix of the two testlist safe old test old test old test or test old lambdef old lambdef lambda varargslist old test.
10199 	X	test or test if or test else test lambdef or test and test or and test and test not test and not test not test not not test comparison comparison expr comp op expr sliceop test exprlist expr expr testlist test test testlist safe test test dictmaker test test test test.
10200 	X	classdef class name testlist suite list if if test list iter.
10201 	X	gen iter gen for gen if gen for for exprlist in test gen iter gen for for exprlist in or test gen iter gen if if test gen iter.
10202 	X	modified python trunk include python ast h python trunk include python ast h mon feb.
10203 	X	from python checkins at python org thomas wouters subject python checkins r python trunk python ast c message id efbe bag python org.
10204 	X	modified python trunk python ast c log.
10205 	X	modified python trunk python ast c python trunk python ast c mon feb return null.
10206 	X	for i i nch n i req child n i test assert type child n i test type child n i old test.
10207 	X	from python checkins at python org thomas wouters subject python checkins r python trunk modules parsermodule c message id cee bag python org.
10208 	X	modified python trunk modules parsermodule c log.
10209 	X	modified python trunk modules parsermodule c python trunk modules parsermodule c mon feb validater testlist validater gen for validater gen iter validater gen if validater old test validater old lambdef.
10210 	X	validate testlist safe node tree return validate repeating list tree testlist safe validate test testlist safe validate old test testlist safe.
10211 	X	res validate name child tree for validate exprlist child tree validate name child tree in validate test child tree validate or test child tree.
10212 	X	return res res nch validate lambdef child tree else if res res validate or test child tree res res nch nch validate name child tree if validate or test child tree validate name child tree else validate test child tree return res.
10213 	X	static int validate old test node tree int nch nch tree int res validate ntype tree old test nch.
10214 	X	if res type child tree old lambdef res validate old lambdef child tree else if res res validate or test child tree return res.
10215 	X	static int validate or test node tree int nch nch tree int res validate ntype tree or test is odd nch.
10216 	X	if res int pos res validate and test child tree for pos res pos nch pos.
10217 	X	static int validate old lambdef node tree int nch nch tree int res validate ntype tree old lambdef nch nch validate name child tree lambda validate colon child tree nch validate test child tree nch.
10218 	X	if res nch res validate varargslist child tree else if res pyerr occurred void validate numnodes tree old lambdef.
10219 	X	from python checkins at python org neal norwitz subject python checkins r python trunk misc news message id.
10220 	X	modified python trunk misc news add an entry for.
10221 	X	modified python trunk misc news python trunk misc news mon feb core and builtins.
10222 	X	patch the copy module now copies function objects as atomic objects.
10223 	X	getitem now looks for a missing hook before raising.
10224 	X	from python checkins at python org guido van rossum date mon feb cet peps trunk pep txt message id.
10225 	X	modified peps trunk pep txt peps trunk pep txt pep is.
10226 	X	a great many thanks go to thomas wouters.
10227 	X	modified peps trunk pep txt peps trunk pep txt mon feb.
10228 	X	accepted peps accepted may not be implemented yet.
10229 	X	modified peps trunk pep txt peps trunk pep txt mon feb created feb gen for for exprlist in or test gen iter.
10230 	X	the new syntax introduces a minor syntactical backwards the new syntax nearly introduced a minor syntactical backwards.
10231 	X	in previous python versions the following is legal.
10232 	X	i e a list comprehension where the sequence following in is an unparenthesized series of lambdas or just one lambda.
10233 	X	in python the series of lambdas will have to be parenthesized in python the series of lambdas will have to be parenthesized e g.
10234 	X	f for f in lambda x x lambda x x if f.
10235 	X	followed by an if keyword that binds less tightly still for details consider the grammar changes shown above.
10236 	X	given that this is a rather odd corner of the syntax the bdfl does not believe this backwards incompatibility requires us to use a future statement to enable the new.
10237 	X	however in python a slightly different grammar is used that is more backwards compatible but constrains the grammar of a lambda used in this position by forbidding the lambdas body to contain an unparenthesized condition.
10238 	X	f for f in lambda x x if x else ok f for f in lambda x x if x else ok f for f in lambda x x if x else ok f for f in lambda x x if x else invalid.
10239 	X	from python checkins at python org guido van rossum date mon feb cet peps trunk pep txt message id.
10240 	X	modified peps trunk pep txt peps trunk pep txt pep is.
10241 	X	a great many thanks go to thomas wouters.
10242 	X	modified peps trunk pep txt peps trunk pep txt mon feb.
10243 	X	accepted peps accepted may not be implemented yet.
10244 	X	modified peps trunk pep txt peps trunk pep txt mon feb created feb gen for for exprlist in or test gen iter.
10245 	X	the new syntax introduces a minor syntactical backwards the new syntax nearly introduced a minor syntactical backwards.
10246 	X	in previous python versions the following is legal.
10247 	X	i e a list comprehension where the sequence following in is an unparenthesized series of lambdas or just one lambda.
10248 	X	in python the series of lambdas will have to be parenthesized in python the series of lambdas will have to be parenthesized e g.
10249 	X	f for f in lambda x x lambda x x if f.
10250 	X	followed by an if keyword that binds less tightly still for details consider the grammar changes shown above.
10251 	X	given that this is a rather odd corner of the syntax the bdfl does not believe this backwards incompatibility requires us to use a future statement to enable the new.
10252 	X	however in python a slightly different grammar is used that is more backwards compatible but constrains the grammar of a lambda used in this position by forbidding the lambdas body to contain an unparenthesized condition.
10253 	X	f for f in lambda x x if x else ok f for f in lambda x x if x else ok f for f in lambda x x if x else ok f for f in lambda x x if x else invalid.
10254 	X	from python checkins at python org guido van rossum date mon feb cet peps trunk pep txt message id.
10255 	X	modified peps trunk pep txt peps trunk pep txt pep is.
10256 	X	a great many thanks go to thomas wouters.
10257 	X	modified peps trunk pep txt peps trunk pep txt mon feb.
10258 	X	accepted peps accepted may not be implemented yet.
10259 	X	modified peps trunk pep txt peps trunk pep txt mon feb created feb gen for for exprlist in or test gen iter.
10260 	X	the new syntax introduces a minor syntactical backwards the new syntax nearly introduced a minor syntactical backwards.
10261 	X	in previous python versions the following is legal.
10262 	X	i e a list comprehension where the sequence following in is an unparenthesized series of lambdas or just one lambda.
10263 	X	in python the series of lambdas will have to be parenthesized in python the series of lambdas will have to be parenthesized e g.
10264 	X	f for f in lambda x x lambda x x if f.
10265 	X	followed by an if keyword that binds less tightly still for details consider the grammar changes shown above.
10266 	X	given that this is a rather odd corner of the syntax the bdfl does not believe this backwards incompatibility requires us to use a future statement to enable the new.
10267 	X	however in python a slightly different grammar is used that is more backwards compatible but constrains the grammar of a lambda used in this position by forbidding the lambdas body to contain an unparenthesized condition.
10268 	X	f for f in lambda x x if x else ok f for f in lambda x x if x else ok f for f in lambda x x if x else ok f for f in lambda x x if x else invalid.
10269 	X	from python checkins at python org neal norwitz message id.
10270 	X	modified peps trunk pep txt add note from.
10271 	X	modified peps trunk pep txt peps trunk pep txt mon feb list comprehensions will require parentheses around the.
10272 	X	this will make list comprehensions more similar to generator.
10273 	X	x for x in will need to be x for x in lambdas will have to be parenthesized.
10274 	X	from python checkins at python org neal norwitz message id.
10275 	X	modified peps trunk pep txt update status thomas did.
10276 	X	modified peps trunk pep txt peps trunk pep txt mon feb.
10277 	X	pep metadata for python software packages should pep be marked final.
10278 	X	target for inclusion of each feature by march.
10279 	X	at that point we should re evaluate schedule or consider dropping.
10280 	X	pep conditional expressions someone volunteered on python dev work should be starting thomas wouters has an unfinished.
10281 	X	he can finish in a few days if no one else completes an.
10282 	X	pep absolute relative imports http python org sf.
10283 	X	from python checkins at python org neal norwitz subject python checkins r in python trunk lib future py message id.
10284 	X	modified python trunk lib future py python trunk misc news finish removal of co generator.
10285 	X	modified python trunk lib future py python trunk lib future py tue feb theyre not exported in all because they dont really belong to this.
10286 	X	co nested x nested scopes co generator allowed x generators co generator allowed generators obsolete was x co future division x division.
10287 	X	modified python trunk misc news python trunk misc news tue feb core and builtins.
10288 	X	co generator allowed is no longer defined this behavior is the.
10289 	X	the name was removed from include code h.
10290 	X	pep conditional expressions http www python org dev peps pep.
10291 	X	pep conditional expressions http www python org dev peps pep.
10292 	X	from python checkins at python org andrew kuchling subject python checkins r python trunk doc whatsnew whatsnew tex message id.
10293 	X	modified python trunk doc whatsnew whatsnew tex add introductory paragraphs summarizing the release minor edits.
10294 	X	modified python trunk doc whatsnew whatsnew tex python trunk doc whatsnew whatsnew tex tue jun maketitle tableofcontents.
10295 	X	this article explains the new features in python.
10296 	X	no release date for python is set it will probably be released in the autumn of.
10297 	X	this article explains the new features in python.
10298 	X	the final release of python is scheduled for august pep describes the planned release.
10299 	X	comments suggestions and error reports are welcome please e mail them to the author or open a bug in the python bug.
10300 	X	xxx compare with previous release in sentences.
10301 	X	this article doesnt attempt to provide a complete specification of the new features but instead provides a convenient.
10302 	X	for full details you should refer to the documentation for python.
10303 	X	the changes in python are an interesting mix of language and library.
10304 	X	the library changes will be more important to pythons user community i think because several widely useful packages were added to the standard library the additions include elementtree for xml processing section ref module etree the sqlite database module section ref module sqlite and the module ctypes module for calling c functions section ref module ctypes.
10305 	X	the language changes are of middling.
10306 	X	some pleasant new features were added but most of them arent features that youll use every.
10307 	X	conditional expressions were finally added to the language using a novel syntax see section ref pep.
10308 	X	the new keyword with statement will make writing cleanup code easier section ref pep.
10309 	X	values can now be passed into generators section ref pep.
10310 	X	imports are now visible as either absolute or relative section ref pep.
10311 	X	some corner cases of exception handling are handled better section ref pep.
10312 	X	all these improvements are worthwhile but theyre improvements to one specific language feature or another none of them are broad modifications to pythons.
10313 	X	this article doesnt attempt to be a complete specification of the new features but instead is a brief introduction to each new.
10314 	X	for full details you should refer to the documentation for python.
10315 	X	xxx add hyperlink when the documentation becomes available.
10316 	X	if you want to understand the complete implementation and design rationale refer to the pep for a particular new.
10317 	X	for a long time people have been requesting a way to write conditional expressions expressions that return value a or value b depending on whether a boolean value is true or.
10318 	X	a conditional expression lets you write a single assignment statement that has the same effect as the following conditional expressions which are expressions that return value a or value b depending on whether a boolean value is true or.
10319 	X	a conditional expression lets you write a single assignment statement that has the same effect as the following.
10320 	X	from python checkins at python org andrew kuchling subject python checkins r python trunk doc whatsnew whatsnew tex message id aee bag python org.
10321 	X	modified python trunk doc whatsnew whatsnew tex minor edits and rearrangements markup fix.
10322 	X	modified python trunk doc whatsnew whatsnew tex python trunk doc whatsnew whatsnew tex tue jun usepackage distutils id.
10323 	X	wsgiref section fix xxx comments count up the patches and bugs.
10324 	X	release of python is scheduled for august pep describes the planned release.
10325 	X	comments suggestions and error reports are welcome please e mail them to the author or open a bug in the python bug.
10326 	X	xxx compare with previous release in sentences.
10327 	X	the changes in python are an interesting mix of language and library.
10328 	X	the library changes will be more important to pythons user community i think because several widely useful packages were added to the standard library the additions include elementtree for xml processing section ref module etree the sqlite database module section ref module sqlite and the module ctypes module for calling c functions section ref module ctypes.
10329 	X	the changes in python are an interesting mix of language and library.
10330 	X	the library enhancements will be more important to pythons user community i think because several widely useful packages were.
10331 	X	new modules include elementtree for xml processing section ref module etree the sqlite database module section ref module sqlite and the module ctypes module for calling c functions section ref module ctypes.
10332 	X	the language changes are of middling.
10333 	X	some pleasant new features were added but most of them arent features that youll use language feature or another none of them are broad modifications to pythons.
10334 	X	this article doesnt attempt to be a complete specification of the new features but instead is a brief introduction to each new.
10335 	X	for full details you should refer to the documentation for python.
10336 	X	this article doesnt try to be a complete specification of the new features instead changes are briefly introduced using helpful.
10337 	X	for full details you should always refer to the documentation for python.
10338 	X	xxx add hyperlink when the documentation becomes available.
10339 	X	if you want to understand the complete implementation and design rationale refer to the pep for a particular new.
10340 	X	comments suggestions and error reports for this document are welcome please e mail them to the author or open a bug in the python bug.
10341 	X	from python checkins at python org andrew kuchling subject python checkins r python trunk doc whatsnew whatsnew tex message id.
10342 	X	modified python trunk doc whatsnew whatsnew tex write a section.
10343 	X	modified python trunk doc whatsnew whatsnew tex python trunk doc whatsnew whatsnew tex thu mar.
10344 	X	xxx write this for a long time people have been requesting a way to write conditional expressions expressions that return value a or value b depending on whether a boolean value is true or.
10345 	X	a conditional expression lets you write a single assignment statement that has the same effect as the following.
10346 	X	begin verbatim if condition x true value else x false value end verbatim.
10347 	X	there have been endless tedious discussions of syntax on both python dev and comp lang python and even a vote that found the majority of voters wanted some way to write conditional expressions but there was no syntax that was clearly preferred by a.
10348 	X	gvr eventually chose a surprising syntax.
10349 	X	begin verbatim x true value if condition else false value end verbatim.
10350 	X	evaluation is still lazy as in existing boolean expression so the evaluation jumps around a.
10351 	X	the var condition expression is evaluated first and the var true value expression is evaluated only if the condition was.
10352 	X	similarly the var false value expression is only evaluated when the condition is.
10353 	X	this syntax may seem strange and backwards why does the condition go in the emph middle of the expression and not in the front as in cs code c x y.
10354 	X	the decision was checked by applying the new syntax to the modules in the standard library and seeing how the resulting code.
10355 	X	in many cases where a conditional expression is used one value seems to be the common case and one value is an exceptional case used only on rarer occasions when the condition isnt.
10356 	X	the conditional syntax makes this pattern a bit more obvious.
10357 	X	begin verbatim contents doc n if doc else end verbatim.
10358 	X	i read the above statement as meaning here var contents is usually assigned a value of code doc n sometimes var doc is empty in which special case an empty string is.
10359 	X	i doubt i will use conditional expressions very often where there isnt a clear common and uncommon.
10360 	X	there was some discussion of whether the language should require surrounding conditional expressions with.
10361 	X	the decision was made to emph not require parentheses in the python languages grammar but as a matter of style i think you should always use.
10362 	X	begin verbatim first version no parens level if logging else.
10363 	X	second version with parens level if logging else end verbatim.
10364 	X	in the first version i think a readers eye might group the statement into level if logging else and think that the condition decides whether the assignment to var level is.
10365 	X	the second version reads better in my opinion because it makes it clear that the assignment is always performed and the choice is were made between two.
10366 	X	another reason for including the brackets a few odd combinations of list comprehensions and lambdas could look like incorrect conditional.
10367 	X	if you put parentheses around your conditional expressions you wont run into this.
10368 	X	seepep conditional expressions pep written by guido van rossum and raymond d hettinger implemented by thomas.
10369 	X	patch the copy module now copies function objects as atomic objects.
10370 	X	getitem now looks for a missing hook before raising.
10371 	X	subject python checkins r in python trunk lib distutils sysconfig py encodings init py in reply to cde bag python org guido van rossums message of wed mar cet references cde bag python org message id mveugsxp fsf starship python net.
10372 	X	guido van rossum python checkins at python org writes.
10373 	X	modified python trunk lib distutils sysconfig py python trunk lib encodings init py use relative imports in a few places where i noticed the.
10374 	X	ideally all packages in python will use the relative import syntax for all their relative import.
10375 	X	abusing something i wrote recently to analyse the twisted source found these local imports.
10376 	X	xmlcore etree elementinclude local import elementtree ctypes macholib dyld local import framework ctypes macholib dyld local import dylib xmlcore sax saxutils local import handler xmlcore sax saxutils local import xmlreader xmlcore etree elementtree local import elementpath xmlcore.
10377 	X	init local import exceptions xmlcore sax xmlreader local import handler xmlcore sax xmlreader local import exceptions xmlcore sax xmlreader incrementalparser parse local import saxutils.
10378 	X	it could have missed a few it uses python compiler package or indeed new style relative.
10379 	X	vegai umm i mean glasses from twisted quotes.
10380 	X	from python checkins at python org andrew kuchling subject python checkins r python trunk doc whatsnew whatsnew tex message id.
10381 	X	modified python trunk doc whatsnew whatsnew tex the pypi upload material is moved into the section on.
10382 	X	modified python trunk doc whatsnew whatsnew tex python trunk doc whatsnew whatsnew tex tue may.
10383 	X	section pep uploading modules to pypi label pep.
10384 	X	pep describes an http based protocol for submitting software packages to a central.
10385 	X	the python package index at url http cheeseshop python org now supports package uploads and the new command upload distutils command will upload a package to the.
10386 	X	before a package can be uploaded you must be able to build a distribution using the command sdist distutils.
10387 	X	once that works you can run code python setup py upload to add your package to the pypi.
10388 	X	optionally you can gpg sign the package by supplying the longprogramopt sign and longprogramopt identity.
10389 	X	seepep module repository upload mechanism pep written by sean reifschneider implemented by martin von l owis and richard.
10390 	X	note that the pep doesnt exactly describe whats implemented in.
10391 	X	section pep conditional expressions label pep.
10392 	X	for a long time people have been requesting a way to write version end verbatim.
10393 	X	another new enhancement to the python package index at url http cheeseshop python org is storing source and binary archives for a.
10394 	X	the new command upload distutils command will upload a package to the.
10395 	X	before a package can be uploaded you must be able to build a distribution using the command sdist distutils.
10396 	X	once that works you can run code python setup py upload to add your package to the pypi.
10397 	X	optionally you can gpg sign the package by supplying the longprogramopt sign and longprogramopt identity.
10398 	X	package uploading was implemented by martin von l owis and richard.
10399 	X	sf patch sys id and sys intern http www python org sf.
10400 	X	pep pep imports multi line and absolute relative http www python org dev peps pep.
10401 	X	from python checkins at python org georg brandl message id.
10402 	X	modified peps trunk pep txt log sys id and sys intern are.
10403 	X	reduce write a loop instead done pep conditional expressions http www python org dev peps pep.
10404 	X	pep conditional expressions were added x if cond else y.
10405 	X	patch the copy module now copies function objects as atomic objects.
10406 	X	getitem now looks for a missing hook before raising.
10407 	X	pep conditional expressions were added x if cond else y.
10408 	X	patch the copy module now copies function objects as atomic objects.
10409 	X	getitem now looks for a missing hook before raising.
10410 	X	pep conditional expressions were added x if cond else y.
10411 	X	patch the copy module now copies function objects as atomic objects.
10412 	X	getitem now looks for a missing hook before raising.
10413 	X	pep conditional expressions were added x if cond else y.
10414 	X	patch the copy module now copies function objects as atomic objects.
10415 	X	getitem now looks for a missing hook before raising.
10416 	X	pep conditional expressions were added x if cond else y.
10417 	X	patch the copy module now copies function objects as atomic objects.
10418 	X	getitem now looks for a missing hook before raising.
10419 	X	pep conditional expressions were added x if cond else y.
10420 	X	patch the copy module now copies function objects as atomic objects.
10421 	X	getitem now looks for a missing hook before raising.
10422 	X	therefore a complete threads implementation requires thread support for c.
10423 	X	one increasingly popular technique test directed development calls for writing parts of the test suite first before you write any of the actual.
10424 	X	gdb local bin python gdb run myscript py gdb continue repeat until your extension is loaded gdb finish so that your extension is loaded gdb br myfunction c gdb continue gdb local bin python gdb run myscript py gdb continue repeat until your extension is loaded gdb finish so that your extension is loaded gdb br myfunction c gdb continue.
10425 	X	how do i get a beta test version of python.
10426 	X	when freezing tkinter applications the applications will not be truly stand alone as the application will still need the tcl and tk.
10427 	X	use the mod queue module to create a queue containing a list of.
10428 	X	to poll you can call connect ex again later or errno eisconn indicate that youre connected or you can pass this socket to select to check if its.
10429 	X	if a variable is ever assigned a new value inside the function the variable is implicitly local and you need to explicitly declare it as.
10430 	X	if the clock says now what did it say hours ago is useful is a bug waiting to.
10431 	X	class objects are used as templates to create instance objects which embody both the data attributes and code methods specific to a.
10432 	X	warning this technique is not fool.
10433 	X	hkey local machine system currentcontrolset services wsvc parameters scriptmap.
10434 	X	answer fortunately there is stackless python http www stackless com which has a completely redesigned interpreter loop that avoids the c.
10435 	X	of course python allows you to be sloppy and not write test cases at.
10436 	X	i want to compile a python module on my linux system but some files are.
10437 	X	alpha and beta releases are available from http www python org download.
10438 	X	one solution is to ship the application with the tcl and tk libraries and point to them at run time using the tcl library and tk library one solution is to ship the application with the tcl and tk libraries and point to them at run time using the envvar tcl library and envvar tk library environment.
10439 	X	the class queue queue class maintains a list of objects with put obj to add an item to the queue and get to return an.
10440 	X	the select module is commonly used to help with asynchronous i o on.
10441 	X	though a bit surprising at first a moments consideration explains.
10442 	X	how do i convert a string to a number.
10443 	X	a class can be based on one or more other classes called its base class es.
10444 	X	in particular modules containing statements like.
10445 	X	and enter the following line making any specific changes that your system may need and enter the following line making any specific changes that your system may need.
10446 	X	its still experimental but looks very.
10447 	X	why are default values shared between objects.
10448 	X	most packaged versions of python dont include the usr lib python x config directory which contains various files required for compiling python.
10449 	X	all releases are announced on the comp lang python and comp lang python announce newsgroups and on the python home page at http www python org an rss feed of news is.
10450 	X	to get truly stand alone applications the tcl scripts that form the library have to be integrated into the application as.
10451 	X	the class will take care of the locking necessary to ensure that each job is handed out exactly.
10452 	X	to prevent the tcp connect from blocking you can set the socket to non blocking.
10453 	X	on one hand requiring global for assigned variables provides a bar against unintended side.
10454 	X	for integers use the built in int type constructor e g int.
10455 	X	it then inherits the attributes and methods of its base.
10456 	X	reg sz c path to python python exe u s s.
10457 	X	although it is binary compatible with standard python its still unclear whether stackless will make it into the core maybe its just too.
10458 	X	this type of bug commonly bites neophyte.
10459 	X	alpha and beta releases are available from http www python org download.
10460 	X	one tool supporting that is sam stand alone modules which is part of the tix distribution http tix mne com.
10461 	X	then when you do the connect you will either connect immediately unlikely or get an exception that contains the error number as errno.
10462 	X	on the other hand if global was required for all global references youd be using global all the.
10463 	X	this allows an object model to be successively refined by.
10464 	X	will continue to work with the old version of the imported.
10465 	X	this line will allow you to call your script with a simple reference like http yourserver scripts yourscript py provided scripts is an executable directory for your server which it usually is by default.
10466 	X	why cant lambda forms contain statements.
10467 	X	x config directory which contains various files required for compiling python.
10468 	X	all releases are announced on the comp lang python and comp lang python announce newsgroups and on the python home page at http www python org an rss feed of news is.
10469 	X	build tix with sam enabled perform the appropriate call to tclsam init etc inside pythons modules tkappinit c and link with libtclsam to get truly stand alone applications the tcl scripts that form the library have to be integrated into the application as.
10470 	X	errno einprogress indicates that the connection is in progress but hasnt finished.
10471 	X	youd have to declare as global every reference to a builtin function or to a component of an imported.
10472 	X	by default these interpret the number as decimal so that int and int x raises valueerror.
10473 	X	you might have a generic mailbox class that provides basic accessor methods for a mailbox and subclasses such as mboxmailbox maildirmailbox outlookmailbox that handle various specific mailbox.
10474 	X	if the module contains class definitions existing class instances will not be updated to use the new class.
10475 	X	the u flag specifies unbuffered and binary mode for stdin needed when working with binary.
10476 	X	python lambda forms cannot contain statements because pythons syntactic framework cant handle statements nested inside.
10477 	X	def foo d danger shared reference to one dict for all calls compute something d key value return d.
10478 	X	for red hat install the python devel rpm to get the necessary.
10479 	X	you can also access the development version of python through.
10480 	X	one tool supporting that is sam stand alone modules which is part of the tix distribution http tix mne com.
10481 	X	the worker thread gets jobs off the.
10482 	X	different oses will return different values so youre going to have to check whats returned on your.
10483 	X	this clutter would defeat the usefulness of the global declaration for identifying side.
10484 	X	int string base takes the base to convert from as a second optional argument so int x.
10485 	X	this can result in the following paradoxical behaviour.
10486 	X	specifies unbuffered and binary mode for stdin needed when working with binary.
10487 	X	however in python this is not a serious.
10488 	X	the first time you call this function d contains a single.
10489 	X	what does systemerror pyimport fixupextension module yourmodule not loaded mean.
10490 	X	see http www python org dev devfaq html subversion svn for.
10491 	X	build tix with sam enabled perform the appropriate call to tclsam init etc inside pythons modules tkappinit c and link with libtclsam and libtksam you might include the tix libraries as well.
10492 	X	when the queue is empty it assumes there will be no more work and.
10493 	X	you can use the connect ex method to avoid creating an.
10494 	X	in python variables that are only referenced inside a function are implicitly.
10495 	X	if the base is specified as the number is interpreted using pythons for integers use the built in func int type constructor e g int.
10496 	X	a method is a function on some object x that you normally call as x name.
10497 	X	import cls c cls c create an instance of c reload cls isinstance c cls c isinstance is false false.
10498 	X	in addition it is recommended that using py may not be a good idea for the file extensions when used in this context you might want to reserve py for support modules and use cgi or cgp for main program scripts.
10499 	X	unlike lambda forms in other languages where they add functionality python lambdas are only a shorthand notation if youre too lazy to define a.
10500 	X	the second time d contains two items because when foo begins executing d starts out with an item already in.
10501 	X	this means that you have created an extension module named yourmodule but your module init function does not initialize with that.
10502 	X	you can also access the development version of python through.
10503 	X	can i have tk events handled while waiting for i o yes and you dont even need threads.
10504 	X	it will just return the errno.
10505 	X	if a variable is assigned a new value anywhere within the functions body its assumed to be a.
10506 	X	methods are defined as functions inside the class definition x name.
10507 	X	the nature of the problem is made clear if you print out the class objects.
10508 	X	for support modules and use cgi or cgp for main program scripts.
10509 	X	functions are already first class objects in python and can be declared in a local.
10510 	X	it is often expected that a function call creates new objects for default.
10511 	X	this means that you have created an extension module named yourmodule but your module init function does not initialize with that.
10512 	X	see http www python org dev devfaq html subversion svn for.
10513 	X	but youll have to restructure your i o code a.
10514 	X	def worker print running worker time sleep while true try arg q get block false except queue empty print worker threading currentthread print queue empty break else print worker threading currentthread print running with argument arg time sleep.
10515 	X	to poll you can call connect ex again later or errno eisconn indicate that youre connected or you can pass this socket to select to check if its.
10516 	X	if a variable is ever assigned a new value inside the function the variable is implicitly local and you need to explicitly declare it as.
10517 	X	by default these interpret the number as decimal so that int and int x raises exc valueerror.
10518 	X	methods are defined as functions inside the class definition.
10519 	X	c class cls c c class cls c.
10520 	X	in order to set up internet information services to use python for cgi processing please see the following links.
10521 	X	therefore the only advantage of using a lambda form instead of a locally defined function is that you dont need to invent a name for the function but thats just a local variable to which the function object which is exactly the same type of object that a lambda form yields is assigned.
10522 	X	every module init function will have a line similar to.
10523 	X	how do i submit bug reports and patches for python.
10524 	X	tk has the equivalent of xts xtaddinput call which allows you to register a callback function which will be called from the tk mainloop when i o is possible on a file.
10525 	X	are there any interfaces to database packages in python.
10526 	X	though a bit surprising at first a moments consideration explains.
10527 	X	int string base takes the base to convert from as a second optional argument so int x.
10528 	X	class c def meth self arg return arg self attribute.
10529 	X	modified sandbox trunk faq windows rst sandbox trunk faq windows rst sun oct tocdepth.
10530 	X	then give your python cgi scripts the extension py and put them in the cgi bin.
10531 	X	python this is not a serious.
10532 	X	default values are created exactly once when the function is.
10533 	X	module py initmodule yourmodule yourmodule functions module py initmodule yourmodule yourmodule functions.
10534 	X	to report a bug or submit a patch please use the roundup installation at http bugs python org.
10535 	X	start a pool of workers for i in range t threading thread target worker name worker i i t start.
10536 	X	python includes the bsddb package which provides an interface to the berkeleydb http docs python org library bsddb.
10537 	X	on one hand requiring keyword global for assigned variables provides a bar against unintended side.
10538 	X	if the base is specified as the number is interpreted using pythons rules a leading indicates octal and x indicates a hex.
10539 	X	class c def meth self arg return arg self attribute.
10540 	X	then give your python cgi scripts the extension py and put them in the cgi bin.
10541 	X	unlike lambda forms in other languages where they add functionality python lambdas are only a shorthand notation if youre too lazy to define a.
10542 	X	if that object is changed like the dictionary in this example subsequent calls to the function will refer to this changed.
10543 	X	if the string passed to this function is not the same name as your extension module the systemerror exception will be.
10544 	X	to report a bug or submit a patch please use the roundup installation at http bugs python org.
10545 	X	from tkinter import tkinter tkinter createfilehandler file mask callback.
10546 	X	begin adding work to the queue for i in range q put i.
10547 	X	interfaces to disk based hashes such as dbm http docs python org library dbm and gdbm http docs python org library gdbm are also included with standard.
10548 	X	on the other hand if global was required for all global references youd be using global all the.
10549 	X	do not use the built in function eval if all you need is to convert strings to.
10550 	X	how do i keep editors from inserting tabs into my python source.
10551 	X	functions are already first class objects in python and can be declared in a local.
10552 	X	by definition immutable objects such as numbers strings tuples and none are safe from.
10553 	X	if the string passed to this function is not the same name as your extension module the exc systemerror exception will be.
10554 	X	you must have a roundup account to report bugs this makes it possible for us to contact you if we have follow up.
10555 	X	the file may be a python file or socket object actually anything with a fileno method or an integer file.
10556 	X	give threads time to run print main thread sleeping time sleep the worker thread gets jobs off the.
10557 	X	xxx remove bsddb in pyk fix other module names.
10558 	X	youd have to declare as global every reference to a builtin function or to a component of an imported.
10559 	X	eval will be significantly slower and it presents a security risk someone could pass you a python expression that might have unwanted side.
10560 	X	self is merely a conventional name for the first argument of a.
10561 	X	how do i run a python program under windows.
10562 	X	the faq does not recommend using tabs and the python style guide http www python org dev peps pep recommends spaces for distributed python code this is also the emacs python mode.
10563 	X	therefore the only advantage of using a lambda form instead of a locally defined function is that you dont need to invent a name for the function but thats just a local variable to which the function object which is exactly the same type of object that a lambda form yields is assigned.
10564 	X	changes to mutable objects such as dictionaries lists and class instances can lead to.
10565 	X	how do i tell incomplete input from invalid input.
10566 	X	it will also enable roundup to send you updates as we act on your.
10567 	X	the mask is one of the constants tkinter readable or tkinter.
10568 	X	when the queue is empty it assumes there will be no more work and.
10569 	X	support for most relational databases is.
10570 	X	this clutter would defeat the usefulness of the global declaration for identifying side.
10571 	X	for example someone could pass import os system rm rf home which would erase your home.
10572 	X	a method defined as meth self a b c should be called as x meth a b c for some instance x of the class in which the definition occurs the called method will think it is called as meth x a b c.
10573 	X	this is not necessarily a straightforward.
10574 	X	under any editor mixing tabs and spaces is a bad.
10575 	X	can python be compiled to machine code c or some other language.
10576 	X	def foo d danger shared reference to one dict for all calls compute something d key value return d.
10577 	X	sometimes you want to emulate the python interactive interpreters behavior where it gives you a continuation prompt when the input is incomplete e g you typed the start of an if statement or you didnt close your parentheses or triple string quotes but it gives you a syntax error message immediately when the input is.
10578 	X	if you had previously used sourceforge to report bugs to python you can obtain your roundup password through roundups you must have a roundup account to report bugs this makes it possible for us to contact you if we have follow up.
10579 	X	the callback is called as follows.
10580 	X	see the databaseprogramming wiki page http wiki python org moin databaseprogramming for.
10581 	X	how do i share global variables across modules.
10582 	X	eval also has the effect of interpreting numbers as python expressions so that e g eval gives a syntax error because python regards numbers starting with as octal base.
10583 	X	if you are already familiar with running programs from the windows command line then everything will seem obvious otherwise you might need a little more.
10584 	X	msvc is no different in this respect and is easily configured to use spaces take tools options tabs and for file type default set tab size and indent size to and select the insert spaces radio.
10585 	X	pythons high level data types dynamic typing of objects and run time invocation of the interpreter using eval or exec together mean that a compiled python program would probably consist mostly of calls into the python run time system even for seemingly simple operations like run time invocation of the interpreter using func eval or keyword exec together mean that a compiled python program would probably consist mostly of calls into the python run time system even for seemingly simple operations like x.
10586 	X	the first time you call this function d contains a single.
10587 	X	in python you can use the codeop module which approximates the parsers behavior.
10588 	X	it will also enable roundup to send you updates as we act on your.
10589 	X	yes and you dont even need threads.
10590 	X	def worker print running worker time sleep while true try arg q get block false except queue empty print worker threading currentthread print queue empty break else print worker threading currentthread print running with argument arg time sleep.
10591 	X	python includes the mod bsddb package which provides an interface to the berkeleydb.
10592 	X	the canonical way to share information across modules within a single program is to create a special module often called config or cfg.
10593 	X	do not use the built in function func eval if all you need is to convert strings to.
10594 	X	self is merely a conventional name for the first argument of a.
10595 	X	there are also differences between windows nt me and xp which can add to the.
10596 	X	if you suspect mixed tabs and spaces are causing problems in leading whitespace run python with the t switch or run tools scripts tabnanny py to check a directory tree in batch.
10597 	X	several projects described in the python newsgroup or at past python conferences community workshops have shown that this approach is feasible although the speedups reached so far are only modest e g x.
10598 	X	the second time d contains two items because when foo begins executing d starts out with an item already in.
10599 	X	if you had previously used sourceforge to report bugs to python you can obtain your roundup password through roundups password reset procedure http bugs python org user.
10600 	X	but youll have to restructure your i o code a.
10601 	X	interfaces to disk based hashes such as mod dbm dbm and mod gdbm gdbm are also included with standard.
10602 	X	just import the config module in all modules of your application the module then becomes available as a global.
10603 	X	func eval will be significantly slower and it presents a security risk someone could pass you a python expression that might have unwanted side.
10604 	X	a method defined as meth self a b c should be called as x meth a b c for some instance x of the class in which the definition occurs the called method will think it is called as meth x a b c.
10605 	X	this is not necessarily a straightforward.
10606 	X	the faq does not recommend using tabs and the python style guide pep recommends spaces for distributed python code this is also the emacs python mode.
10607 	X	jython uses the same strategy for compiling to java.
10608 	X	it is often expected that a function call creates new objects for default.
10609 	X	the easiest way to do it in c is to call pyrun interactiveloop perhaps in a separate thread and let the python interpreter handle the input for.
10610 	X	tk has the equivalent of xts xtaddinput call which allows you to register a callback function which will be called from the tk mainloop when i o is possible on a file.
10611 	X	start a pool of workers for i in range t threading thread target worker name worker i i t start.
10612 	X	support for most relational databases is.
10613 	X	because there is only one instance of each module any changes made to the module object get reflected.
10614 	X	for example someone could pass import os system rm rf home which would erase your home.
10615 	X	see also why must self be used explicitly in method definitions and calls.
10616 	X	if you are already familiar with running programs from the windows command line then everything will seem obvious otherwise you might need a little more.
10617 	X	under any editor mixing tabs and spaces is a bad.
10618 	X	jim hugunin has demonstrated that in combination with whole program analysis speedups of x are feasible for small demo.
10619 	X	you can also set the pyos readlinefunctionpointer to point at your custom input.
10620 	X	for more information on how python is developed consult the python developers guide dev.
10621 	X	begin adding work to the queue for i in range q put i.
10622 	X	see the databaseprogramming wiki page http wiki python org moin databaseprogramming for.
10623 	X	for example the canonical way to share information across modules within a single program is to create a special module often called config or cfg.
10624 	X	func eval also has the effect of interpreting numbers as python expressions so that e g eval gives a syntax error because python regards numbers starting with as octal base.
10625 	X	doc faq general why must self be used explicitly in method definitions and calls.
10626 	X	there are also differences between windows nt me and xp which can add to the.
10627 	X	msvc is no different in this respect and is easily configured to use spaces take menuselection tools options tabs and for file type default set tab size and indent size to and select the insert spaces radio.
10628 	X	see the proceedings from the python conference community workshops proceedings for more.
10629 	X	default values are created exactly once when the function is.
10630 	X	see modules readline c and parser myreadline c for more.
10631 	X	xxx adapt link to dev guide.
10632 	X	from tkinter import tkinter tkinter createfilehandler file mask callback.
10633 	X	give threads time to run print main thread sleeping time sleep.
10634 	X	how do you implement persistent objects in python.
10635 	X	just import the config module in all modules of your application the module then becomes available as a global.
10636 	X	how do i convert a number to a string.
10637 	X	how do i check if an object is an instance of a given class or of a subclass of it.
10638 	X	sidebar python development on xp subtitle python development on xp.
10639 	X	if you suspect mixed tabs and spaces are causing problems in leading whitespace run python with the option t switch or run tools scripts tabnanny py to check a directory tree in batch.
10640 	X	from python checkins at python org georg brandl subject python checkins r in sandbox trunk faq design rst extending rst general rst gui rst index rst installed rst library rst programming rst windows rst message id.
10641 	X	conferences community workshops have shown that this approach is feasible although the speedups reached so far are only modest e g x.
10642 	X	if that object is changed like the dictionary in this example subsequent calls to the function will refer to this changed.
10643 	X	however sometimes you have to run the embedded python interpreter in the same thread as your rest application and you cant allow the pyrun interactiveloop to stop while waiting for user.
10644 	X	for more information on how python is developed consult the python developers guide dev.
10645 	X	the file may be a python file or socket object actually anything with a fileno method or an integer file.
10646 	X	when run this will produce the following output.
10647 	X	the pickle library module http docs python org library pickle solves this in a very general way though you still cant store things like open files sockets or windows and the shelve library module http docs python org library shelve uses pickle and g dbm to create persistent mappings containing arbitrary python.
10648 	X	because there is only one instance of each module any changes made to the module object get reflected.
10649 	X	to convert e the number to the string use the built in type constructor func str.
10650 	X	use the built in function isinstance obj cls.
10651 	X	this series of screencasts aims to get you up and running with python on windows.
10652 	X	how do i check for a keypress without blocking.
10653 	X	jython uses the same strategy for compiling to java.
10654 	X	by definition immutable objects such as numbers strings tuples and none are safe from.
10655 	X	the one solution then is to call pyparser parsestring and test for e error equal to e eof which means the input is incomplete.
10656 	X	are there any published articles about python that i can reference.
10657 	X	the mask is one of the constants tkinter readable or tkinter.
10658 	X	consult the modules documentation for more details the queue class provides a featureful.
10659 	X	for better performance you can use the cpickle module http docs python org library pickle module cpickle.
10660 	X	x default value of the x configuration setting x default value of the x configuration setting.
10661 	X	if you want a hexadecimal or octal representation use the built in functions hex or oct.
10662 	X	use the built in function isinstance obj cls.
10663 	X	the knowledge is distilled into hours and will get you up and running with the right python distribution coding in your choice of ide and debugging and writing solid code with unit.
10664 	X	jim hugunin has demonstrated that in combination with whole program analysis speedups of x are feasible for small demo.
10665 	X	changes to mutable objects such as dictionaries lists and class instances can lead to.
10666 	X	heres a sample code fragment untested inspired by code from alex farber.
10667 	X	its probably best to cite your favorite book about.
10668 	X	the callback is called as follows.
10669 	X	consult the modules documentation for more details the queue class provides a featureful.
10670 	X	a more awkward way of doing things is to use pickles little sister.
10671 	X	import config config x import config config x.
10672 	X	for fancy formatting use ref the operator string formatting on strings e g d yields and yields.
10673 	X	note that most programs do not use isinstance on user defined classes very.
10674 	X	python development on xp image images python video icon png python development on xp http www showmedo com videos seriesname.
10675 	X	this is a standard windows specific extension.
10676 	X	general style update for inclusion in doc.
10677 	X	see the proceedings from the python conference community workshops proceedings for more.
10678 	X	because of this feature it is good programming practice to not use mutable objects as default.
10679 	X	include python h include node h include errcode h include grammar h include parsetok h include compile h.
10680 	X	the very first article about python was written in and is now quite.
10681 	X	callback file mask callback file mask.
10682 	X	what kinds of global value mutation are thread safe.
10683 	X	the marshal module http docs python org library marshal provides very fast ways to store noncircular basic python types to files and strings and back.
10684 	X	import config import mod print config x import config import mod print config x.
10685 	X	see the library reference manual for.
10686 	X	if you are developing the classes yourself a more proper object oriented style is to define methods on the classes that encapsulate a particular behaviour instead of checking the objects class and doing a different thing based on what class it.
10687 	X	and running with the right python distribution coding in your choice of ide and debugging and writing solid code with unit.
10688 	X	it defines a function kbhit which checks whether a keyboard hit is present and getch which gets one character without echoing.
10689 	X	also fixed some errors and updated some sections as i went along and added some xxx comments where more work needs to be.
10690 	X	internally python source code is always translated into a bytecode representation and this bytecode is then executed by the python virtual.
10691 	X	instead use none as the default value and inside the function check if the parameter is none and create a new list dictionary whatever if it.
10692 	X	int testcomplete char code code should end in n return for error for incomplete for complete node n perrdetail e.
10693 	X	its probably best to cite your favorite book about.
10694 	X	you must unregister the callback when youre done using.
10695 	X	a global interpreter lock gil is used internally to ensure that only one thread runs in the python vm at a.
10696 	X	although marshal does not do fancy things like store instances or handle shared references properly it does run extremely.
10697 	X	note that using a module is also the basis for implementing the singleton design pattern for the same.
10698 	X	to convert e the number to the string use the built in function str.
10699 	X	for example if you have a function that does something.
10700 	X	unless you use some sort of integrated development environment you will end up typing windows commands into what is variously referred to as a dos window or command prompt window.
10701 	X	it defines a function kbhit which checks whether a keyboard hit is present and getch which gets one character without echoing.
10702 	X	modified sandbox trunk faq design rst sandbox trunk faq extending rst sandbox trunk faq general rst sandbox trunk faq gui rst sandbox trunk faq index rst sandbox trunk faq installed rst sandbox trunk faq library rst sandbox trunk faq programming rst sandbox trunk faq windows rst.
10703 	X	in order to avoid the overhead of repeatedly parsing and translating modules that rarely change this byte code is written into a file whose name ends in pyc whenever a module is.
10704 	X	for example dont write objects as default.
10705 	X	n pyparser parsestring code pyparser grammar py file input e if n null if e error e eof return return.
10706 	X	guido van rossum and jelke de boer interactively testing remote servers using the python programming language cwi quarterly volume issue december amsterdam pp.
10707 	X	tkinter deletefilehandler file tkinter deletefilehandler file.
10708 	X	in general python offers to switch among threads only between bytecode instructions how frequently it switches can be set via sys setcheckinterval.
10709 	X	for example loading a half megabyte of data may take less than a third of a.
10710 	X	note that using a module is also the basis for implementing the singleton design pattern for the same.
10711 	X	if you want a hexadecimal or octal representation use the built in functions hex or oct.
10712 	X	a better approach is to define a search method on all the classes and just call it.
10713 	X	usually you can create such a window from your start menu under windows the menu selection is start programs accessories command prompt.
10714 	X	how do i emulate os kill in windows.
10715 	X	modified sandbox trunk faq design rst sandbox trunk faq design rst sun oct.
10716 	X	when the corresponding py file is changed it is parsed and translated again and the pyc file is.
10717 	X	instead use none as the default value and inside the function check if the parameter is none and create a new list dictionary whatever if it.
10718 	X	the very first article about python was written in and is now quite.
10719 	X	note since you dont know how many bytes are available for reading you cant use the python file objects read or readline methods since these will insist on reading a predefined number of.
10720 	X	each bytecode instruction and therefore all the c implementation code reached from each instruction is therefore atomic from the point of view of a python.
10721 	X	this often beats doing something more complex and general such as using gdbm with pickle.
10722 	X	what are the best practices for using import in a module.
10723 	X	for fancy formatting use the operator http docs python org library stdtypes string formatting operations on strings e g d yields and yields.
10724 	X	class mailbox def search self code to search a mailbox.
10725 	X	you should be able to recognize when you have started such a window because you will see a windows command prompt which usually looks like this python development on xp image http python org images python video icon png python development on xp http www showmedo com videos seriesname.
10726 	X	def kill pid kill function for win import winapi handle winapi openprocess pid return.
10727 	X	there is no performance difference once the pyc file is loaded as the bytecode read from the pyc file is exactly the same as the bytecode created by direct.
10728 	X	another solution is trying to compile the received string with py compilestring.
10729 	X	guido van rossum and jelke de boer interactively testing remote servers using the python programming language cwi quarterly volume issue december amsterdam pp.
10730 	X	for sockets the recv or recvfrom methods will work fine for other files use os read file fileno maxbytecount.
10731 	X	in theory this means an exact accounting requires an exact understanding of the pvm bytecode.
10732 	X	in general dont use from modulename import.
10733 	X	see the library reference manual for.
10734 	X	class document def search self code to search a document note that most programs do not use func isinstance on user defined classes very.
10735 	X	unless you use some sort of integrated development environment you will end up typing windows commands into what is variously referred to as a dos window or command prompt window.
10736 	X	winapi terminateprocess handle def kill pid kill function for win import winapi handle winapi openprocess pid return.
10737 	X	why does python use indentation for grouping of statements.
10738 	X	the only difference is that loading code from a pyc file is faster than parsing and translating a py file so the presence of precompiled pyc files improves the start up time of python.
10739 	X	def foo dict def foo dict.
10740 	X	if it compiles without errors try to execute the returned code object by calling pyeval evalcode.
10741 	X	are there any books on python.
10742 	X	note since you dont know how many bytes are available for reading you cant use the python file objects read or readline methods since these will insist on reading a predefined number of.
10743 	X	in practice it means that operations on shared variables of builtin data types ints lists dicts etc that look atomic really.
10744 	X	the default format used by the pickle module is a slow one that results in readable.
10745 	X	how do i modify a string in place.
10746 	X	if you are developing the classes yourself a more proper object oriented style is to define methods on the classes that encapsulate a particular behaviour instead of checking the objects class and doing a different thing based on what class it.
10747 	X	usually you can create such a window from your start menu under windows the menu selection is menuselection start programs accessories command prompt.
10748 	X	guido van rossum believes that using indentation for grouping is extremely elegant and contributes a lot to the clarity of the average python.
10749 	X	if desired the lib compileall py module can be used to create valid pyc files for a given set of.
10750 	X	def foo dict none if dict is none dict create a new dict for local namespace.
10751 	X	yes there are many and more are were.
10752 	X	for sockets the meth recv or meth recvfrom methods will work fine for other files use os read file fileno maxbytecount.
10753 	X	for example the following operations are all atomic l l l are lists d d d are dicts x y are objects i j are ints.
10754 	X	making it the default but it would break backward compatibility how do you implement persistent objects in python.
10755 	X	some people avoid this idiom even with the few modules that were designed to be imported in this.
10756 	X	for example if you have a function that does something.
10757 	X	you should be able to recognize when you have started such a window because you will see a windows command prompt which usually looks like this.
10758 	X	why does os path isdir fail on nt shared directories.
10759 	X	most people learn to love this feature after.
10760 	X	note that the main script executed by python even if its filename ends in py is not compiled to a pyc.
10761 	X	if the compilation fails find out if its an error or just more input is required by extracting the message string from the exception tuple and comparing it to the string unexpected eof while parsing.
10762 	X	see the python org wiki at http wiki python org moin pythonbooks for a.
10763 	X	i cant get key bindings to work in tkinter why.
10764 	X	l extend l x l i x l pop l sort x y x field y d x y a global interpreter lock gil is used internally to ensure that only one thread runs in the python vm at a.
10765 	X	largestring z mypickle cpickle dumps largestring protocol the mod pickle library module solves this in a very general way though you still cant store things like open files sockets or windows and the mod shelve library module uses pickle and g dbm to create persistent mappings containing arbitrary python.
10766 	X	modules designed in this manner include tkinter and threading.
10767 	X	if you need an object with this ability try converting the string to a list or use the array module.
10768 	X	a better approach is to define a search method on all the classes and just call it.
10769 	X	the letter may be different and there might be other things after it so you might just as easily see something like.
10770 	X	the solution appears to be always append the on the end of shared.
10771 	X	guido van rossum believes that using indentation for grouping is extremely elegant and contributes a lot to the clarity of the average python.
10772 	X	it is compiled to bytecode but the bytecode is not saved to a.
10773 	X	when you have a function thats time consuming to compute a common technique is to cache the parameters and the resulting value of each call to the function and return the cached value if the same value is requested.
10774 	X	here is a complete example using the gnu readline library you may want to ignore sigint while calling readline.
10775 	X	yes there are many and more are were.
10776 	X	an often heard complaint is that event handlers bound to events with the bind method dont get handled even when the appropriate key is.
10777 	X	in general python offers to switch among threads only between bytecode instructions how frequently it switches can be set via func sys setcheckinterval.
10778 	X	for better performance you can use the mod cpickle.
10779 	X	import modules at the top of a.
10780 	X	class mailbox def search self code to search a mailbox.
10781 	X	import os os path isdir rorschach public os path isdir rorschach public import os os path isdir rorschach public os path isdir rorschach public.
10782 	X	most people learn to love this feature after.
10783 	X	usually main scripts are quite short so this doesnt cost much.
10784 	X	this is called memoizing and can be implemented like this.
10785 	X	include stdio h include readline h.
10786 	X	see the python org wiki at http wiki python org moin pythonbooks for a.
10787 	X	the most common cause is that the widget to which the binding applies doesnt have keyboard focus.
10788 	X	each bytecode instruction and therefore all the c implementation code reached from each instruction is therefore atomic from the point of view of a python.
10789 	X	a more awkward way of doing things is to use pickles little sister.
10790 	X	doing so makes it clear what other modules your code requires and avoids questions of whether the module name is in.
10791 	X	import array a array array c s print a array c hello world a y print a array c yello world a tostring yello world you cant because strings are.
10792 	X	class document def search self code to search a document.
10793 	X	depending on how your computer is set up and what else you have recently done with.
10794 	X	it helps to think of share points as were like drive.
10795 	X	since there are no begin end brackets there cannot be a disagreement between grouping perceived by the parser and the human.
10796 	X	there are also several programs which make it easier to intermingle python and c code in various ways to increase.
10797 	X	callers will never provide a third parameter for this.
10798 	X	include python h include object h include compile h include eval h.
10799 	X	you can also search online bookstores for python and filter out the monty python references or perhaps search for python and language.
10800 	X	check out the tk documentation for the focus.
10801 	X	in theory this means an exact accounting requires an exact understanding of the pvm bytecode.
10802 	X	the mod marshal module provides very fast ways to store noncircular basic python types to files and strings and back.
10803 	X	using one import per line makes it easy to add and delete module imports but using multiple imports per line uses less screen.
10804 	X	if you need an object with this ability try converting the string to a list or use the array module.
10805 	X	once you have started such a window you are well on the way to done with.
10806 	X	k is not a directory k is a directory k media is a directory k media is not a directory k is not a directory k is a directory k media is a directory k media is not a directory.
10807 	X	occasionally c programmers will encounter a fragment of code like this.
10808 	X	see for example psyco http psyco sourceforge net pyrex http www cosc canterbury ac nz greg python pyrex pyinline representation and this bytecode is then executed by the python virtual.
10809 	X	def expensive arg arg cache if cache has key arg arg return cache arg arg.
10810 	X	py initialize loc pydict new glb pydict new pydict setitemstring glb builtins pyeval getbuiltins.
10811 	X	you can also search online bookstores for python and filter out the monty python references or perhaps search for python and language.
10812 	X	usually a widget is given the keyboard focus by clicking in it but not for labels see the takefocus option.
10813 	X	in practice it means that operations on shared variables of builtin data types ints lists dicts etc that look atomic really.
10814 	X	although marshal does not do fancy things like store instances or handle shared references properly it does run extremely.
10815 	X	in general dont use from modulename import.
10816 	X	once you have started such a window you are well on the way to running python.
10817 	X	the same rules apply if you substitute k with conky foo.
10818 	X	if x y x y z.
10819 	X	in order to avoid the overhead of repeatedly parsing and translating modules that rarely change this byte code is written into a file whose name ends in pyc whenever a module is.
10820 	X	calculate the value result expensive computation cache arg arg result store result in the cache return result you could use a global variable containing a dictionary instead of the default value its a matter of.
10821 	X	where in the world is www python org located.
10822 	X	an often heard complaint is that event handlers bound to events with the meth bind method dont get handled even when the appropriate key is.
10823 	X	for example the following operations are all atomic l l l are lists d d d are dicts x y are objects i j are ints.
10824 	X	for example loading a half megabyte of data may take less than a third of a.
10825 	X	import array a array array c s print a array c hello world a y print a array c yello world a tostring yello world.
10826 	X	delegation is an object oriented technique also called a design pattern.
10827 	X	you need to realize that your python scripts have to be processed by another program called the python.
10828 	X	conky foo is not a directory conky foo is a directory conky foo media is a directory conky foo media is not a directory conky foo is not a directory conky foo is a directory conky foo media is a directory conky foo media is not a directory.
10829 	X	only the x statement is executed if the condition is true but the indentation leads you to believe.
10830 	X	when the corresponding py file is changed it is parsed and translated again and the pyc file is.
10831 	X	def foo dict none if dict is none dict create a new dict for local namespace.
10832 	X	if null line ctrl d pressed done else i strlen line.
10833 	X	its currently in amsterdam graciously hosted by xsall http www xsall nl.
10834 	X	the most common cause is that the widget to which the binding applies doesnt have keyboard focus.
10835 	X	l extend l x l i x l pop l sort x y x field y d x y d keys.
10836 	X	this often beats doing something more complex and general such as using gdbm with pickle.
10837 	X	some people avoid this idiom even with the few modules that were designed to be imported in this.
10838 	X	how do i use strings to call functions methods.
10839 	X	lets say you have an object x and want to change the behaviour of just one of its.
10840 	X	the interpreter reads your script program called the python.
10841 	X	cgi py or other cgi programming doesnt work sometimes on nt or win.
10842 	X	even experienced c programmers will sometimes stare at it a long time wondering why y is were decremented even for x y.
10843 	X	there is no performance difference once the pyc file is loaded as the bytecode read from the pyc file is exactly the same as the bytecode created by direct.
10844 	X	if i add history line save non empty lines.
10845 	X	thanks to thomas wouters for his work in arranging python orgs.
10846 	X	check out the tk documentation for the focus.
10847 	X	i i l i l j d x d x.
10848 	X	modules designed in this manner include mod tkinter and mod threading.
10849 	X	you can create a new class that provides a new implementation of the method youre interested in changing and delegates all other methods to the corresponding method of x.
10850 	X	the interpreter reads your script compiles it into bytecodes and then executes the bytecodes to run your.
10851 	X	be sure you have the latest python exe that you are using python exe rather than a gui version of python and that you have configured the server to execute than a gui version of python and that you have configured the server to execute.
10852 	X	if x y x y z.
10853 	X	the only difference is that loading code from a pyc file is faster than parsing and translating a py file so the presence of precompiled pyc files improves the start up time of python.
10854 	X	when you have a function thats time consuming to compute a common technique is to cache the parameters and the resulting value of each call to the function and return the cached value if the same value is requested.
10855 	X	if null code nothing in code yet j else j strlen code.
10856 	X	usually a widget is given the keyboard focus by clicking in it but not for labels see the takefocus option.
10857 	X	operations that replace other objects may invoke those other objects del method when their reference count reaches zero and that can affect.
10858 	X	import modules at the top of a.
10859 	X	the best is to use a dictionary that maps strings to.
10860 	X	delegation is an object oriented technique also called a design pattern.
10861 	X	so how do you arrange for the interpreter to handle your python.
10862 	X	only the x statement is executed if the condition is true but the indentation leads you to believe.
10863 	X	if desired the lib compileall py module can be used to create valid pyc files for a given set of.
10864 	X	this is called memoizing and can be implemented like this.
10865 	X	code realloc code i j if null code out of memory exit.
10866 	X	thanks to thomas wouters for his work in arranging python orgs.
10867 	X	modified sandbox trunk faq index rst sandbox trunk faq index rst sun oct.
10868 	X	this is especially true for the mass updates to dictionaries and.
10869 	X	the default format used by the pickle module is a slow one that results in readable.
10870 	X	doing so makes it clear what other modules your code requires and avoids questions of whether the module name is in.
10871 	X	the primary advantage of this technique is that the strings do not need to match the names of the.
10872 	X	lets say you have an object x and want to change the behaviour of just one of its.
10873 	X	first you need to make sure that your command window recognises the word python as an instruction to start the.
10874 	X	the u unbuffered option on nt and win prevents the interpreter from altering newlines in the standard input and.
10875 	X	even experienced c programmers will sometimes stare at it a long time wondering why y is were decremented even for x y.
10876 	X	note that the main script executed by python even if its filename ends in py is not compiled to a pyc.
10877 	X	callers will never provide a third parameter for this.
10878 	X	if j code was empty so code keep strncat happy.
10879 	X	when in doubt use a mutex.
10880 	X	making it the default but it would break backward compatibility.
10881 	X	using one import per line makes it easy to add and delete module imports but using multiple imports per line uses less screen.
10882 	X	this is also the primary technique used to emulate a case construct the best is to use a dictionary that maps strings to.
10883 	X	you can create a new class that provides a new implementation of the method youre interested in changing and delegates all other methods to the corresponding method of x.
10884 	X	if you have opened a python as an instruction to start the.
10885 	X	without it post multipart requests will seem to have the wrong length and binary e g.
10886 	X	because there are no begin end brackets python is much less prone to coding style.
10887 	X	it is compiled to bytecode but the bytecode is not saved to a.
10888 	X	def expensive arg arg cache if cache has key arg arg return cache arg arg.
10889 	X	strncat code line i append line to code code i j n append n to code code i j.
10890 	X	when he began implementing python guido van rossum was also reading the published scripts from monty pythons flying circus http pythonline com a bbc comedy series from the.
10891 	X	modified sandbox trunk faq installed rst sandbox trunk faq installed rst sun oct.
10892 	X	i i l i l j d x d x.
10893 	X	largestring z mypickle cpickle dumps largestring protocol.
10894 	X	its good practice if you import modules in the following order.
10895 	X	the primary advantage of this technique is that the strings do not need to match the names of the.
10896 	X	if you have opened a command window you should try entering the command python and hitting.
10897 	X	gif responses may get garbled resulting in broken images pdf for the cgi.
10898 	X	in c there are many different ways to place the.
10899 	X	usually main scripts are quite short so this doesnt cost much.
10900 	X	calculate the value result expensive computation cache arg arg result store result in the cache return result.
10901 	X	src py compilestring code stdin py single input.
10902 	X	van rossum thought he needed a name that was short unique and slightly mysterious so he decided to call the language.
10903 	X	why is python installed on my computer.
10904 	X	operations that replace other objects may invoke those other objects meth del method when their reference count reaches zero and that can affect.
10905 	X	if my program crashes with a bsddb or anydbm database open it gets.
10906 	X	this is also the primary technique used to emulate a case construct.
10907 	X	for example the following class implements a class that behaves like a file but converts all written data to uppercase python programmers can easily implement.
10908 	X	you should then see something like.
10909 	X	the option u unbuffered option on nt and win prevents the interpreter from altering newlines in the standard input and.
10910 	X	if youre used to reading and writing code that uses one style you will feel at least slightly uneasy when reading or were required to write another.
10911 	X	xxx check which of these projects are still alive.
10912 	X	you could use a global variable containing a dictionary instead of the default value its a matter of.
10913 	X	this is especially true for the mass updates to dictionaries and.
10914 	X	databases opened for write access with the bsddb module and often by the anydbm module since it will preferentially use bsddb must explicitly be closed using the close method of the.
10915 	X	if youre writing code thats in the package sub m module and want to import package sub m do not just write import m even though its.
10916 	X	def a pass def a pass.
10917 	X	for example the following class implements a class that behaves like a file but converts all written data to uppercase.
10918 	X	python dec msc bit intel on win type help copyright credits or license for more.
10919 	X	without it post multipart requests will seem to have the wrong length and binary e g.
10920 	X	many coding styles place begin end brackets on a line by.
10921 	X	there are also several programs which make it easier to intermingle python and c code in various ways to increase.
10922 	X	src compiled just fine if ps prompt or n code i j and double n so execute it dum pyeval evalcode pycodeobject src glb loc py xdecref dum py xdecref src free code code null if pyerr occurred pyerr print prompt ps syntax error or e eof else if pyerr exceptionmatches pyexc syntaxerror pyerr fetch exc val trb clears exception.
10923 	X	when he began implementing python guido van rossum was also reading the published scripts from monty pythons flying circus http pythonline com a bbc comedy series from the.
10924 	X	when in doubt use a mutex.
10925 	X	the underlying library caches database contents which need to be converted to on disk form and.
10926 	X	def b pass def b pass.
10927 	X	you have started the interpreter in interactive mode.
10928 	X	gif responses may get garbled resulting in broken images pdf files and other binary downloads failing.
10929 	X	this makes programs considerably longer and wastes valuable screen space making it harder to get a good overview of a.
10930 	X	see for example psyco http psyco sourceforge net pyrex http www cosc canterbury ac nz greg python pyrex pyinline http pyinline sourceforge net pycmod http sourceforge net projects pycmod and weave http www scipy org site content weave.
10931 	X	you can use exceptions to provide a structured goto that even works across function.
10932 	X	if pyarg parsetuple val so msg obj strcmp msg unexpected eof while parsing e eof py xdecref exc py xdecref val py xdecref trb prompt ps else some other syntax error pyerr restore exc val trb pyerr print free code code null prompt ps else some non syntax error pyerr print free code code null prompt ps.
10933 	X	van rossum thought he needed a name that was short unique and slightly mysterious so he decided to call the language.
10934 	X	cant we get rid of the global interpreter lock.
10935 	X	if you have initialized a new bsddb database but not written anything to it before the program crashes you will often wind up with a zero length file and encounter an exception the next time the file is.
10936 	X	relative imports can lead to a module were initialized twice leading to confusing.
10937 	X	dispatch go a stop b note lack of parens for funcs dispatch go a stop b note lack of parens for funcs.
10938 	X	that means you can enter python statements or expressions interactively and have them executed or evaluated while you.
10939 	X	why doesnt os popen work in pythonwin on nt.
10940 	X	ideally a function should fit on one screen say lines.
10941 	X	many feel that exceptions can conveniently emulate all reasonable uses of the go or goto constructs of c fortran and other.
10942 	X	do i have to like monty pythons flying circus.
10943 	X	its used in some high schools and colleges as an introductory programming language because python is easy to learn but its also used by professional software developers at places such as google nasa and lucasfilm.
10944 	X	databases opened for write access with the bsddb module and often by the anydbm module since it will preferentially use bsddb must explicitly be closed using the close method of the.
10945 	X	it is sometimes necessary to move imports to a function or class to avoid problems with circular.
10946 	X	dispatch get input note trailing parens to call function dispatch get input note trailing parens to call function.
10947 	X	outfile outfile def init self outfile.
10948 	X	this is one of pythons strongest.
10949 	X	the reason that os popen doesnt work from within pythonwin is due to a bug in microsofts c runtime library crt.
10950 	X	lines of python can do a lot more work than lines of c.
10951 	X	the details of python memory management depend on the.
10952 	X	for example you can use exceptions to provide a structured goto that even works across function.
10953 	X	sometimes you want to emulate the python interactive interpreters behavior where it gives you a continuation prompt when the input is incomplete e g you typed the start of an if statement or you didnt close your parentheses or triple string quotes but it gives you a syntax error message immediately when the input is.
10954 	X	the global interpreter lock gil is often seen as a hindrance to pythons deployment on high end multiprocessor server machines because a multi threaded python program effectively only uses one cpu due to the insistence that almost all python code can only run while the gil is.
10955 	X	the underlying library caches database contents which need to be converted to on disk form and.
10956 	X	use the built in function getattr use the built in function func getattr.
10957 	X	check it python dec msc bit intel on win type help copyright credits or license for more.
10958 	X	the crt assumes you have a win console attached to the.
10959 	X	this is not solely due to the lack of begin end brackets the lack of declarations and the high level data types are also responsible but the indentation based syntax certainly.
10960 	X	the standard c implementation of python uses reference counting to detect inaccessible objects and another mechanism to collect reference cycles periodically executing a cycle detection algorithm which looks for inaccessible cycles and deletes the objects.
10961 	X	many feel that exceptions can conveniently emulate all reasonable uses of the go or goto constructs of c fortran and other.
10962 	X	in python you can use the mod codeop module which approximates the parsers behavior.
10963 	X	back in the days of python greg stein actually implemented a comprehensive patch set the free threading patches that removed the gil and replaced it with fine grained.
10964 	X	if you have initialized a new bsddb database but not written anything to it before the program crashes you will often wind up with a zero length file and encounter an exception the next time the file is.
10965 	X	circular imports are fine where both modules use the import module form of.
10966 	X	import foo getattr foo bar import foo getattr foo bar.
10967 	X	outfile write s upper def write self s.
10968 	X	you have started the interpreter in interactive mode.
10969 	X	the reason that os popen doesnt work from within pythonwin is due to a bug in microsofts c runtime library crt.
10970 	X	the gc module provides functions to perform a garbage collection obtain debugging statistics and tune the collectors.
10971 	X	class label pass declare a label.
10972 	X	its used in some high schools and colleges as an introductory programming language because python is easy to learn but its also used by professional software developers at places such as google nasa and lucasfilm.
10973 	X	unfortunately even on windows where locks are very efficient this ran ordinary python code about twice as slow as the interpreter using the.
10974 	X	i tried to open berkeley db file but bsddb produces bsddb error invalid argument.
10975 	X	they fail when the nd module wants to grab a name out of the first from module import name and the import is at the top.
10976 	X	note that getattr works on any object including classes class note that func getattr works on any object including classes class instances modules and so.
10977 	X	that means you can enter python statements or expressions interactively and have them executed or evaluated while you.
10978 	X	the crt assumes you have a win console attached to the.
10979 	X	in c there are many different ways to place the.
10980 	X	jython relies on the java runtime so the jvms garbage collector is.
10981 	X	the easiest way to do it in c is to call cfunc pyrun interactiveloop perhaps in a separate thread and let the python interpreter handle the input for.
10982 	X	new stable releases have been coming out roughly every to months since and this seems likely to.
10983 	X	if you wish to learn more about python start with the beginners guide to python http wiki python org moin beginnersguide.
10984 	X	on linux the performance loss was even worse because pthread locks arent as.
10985 	X	help how can i restore my data.
10986 	X	thats because names in the st are not yet available because the first module is busy importing the.
10987 	X	this is used in several places in the standard library like this this is used in several places in the standard library like this.
10988 	X	def getattr self name return getattr.
10989 	X	this is one of pythons strongest.
10990 	X	you should use the winpipe modules popen instead which doesnt depend on having an attached win.
10991 	X	if youre used to reading and writing code that uses one style you will feel at least slightly uneasy when reading or were required to write another.
10992 	X	this difference can cause some subtle porting problems if your python code depends on the behavior of the reference counting.
10993 	X	this doesnt allow you to jump into the middle of a loop but thats usually considered an abuse of goto.
10994 	X	you can also set the cfunc pyos readlinefunctionpointer to point at your custom input.
10995 	X	currently there are usually around months between major.
10996 	X	if you wish to learn more about python start with the beginners guide to python http wiki python org moin beginnersguide.
10997 	X	since then the idea of getting rid of the gil has occasionally come up but nobody has found a way to deal with the expected slowdown and users who dont use threads would not be happy if their code ran at half at the.
10998 	X	in this case if the second module is only used in one function then the import can easily be moved into that.
10999 	X	outfile name def getattr self name return getattr.
11000 	X	check it by entering a few expressions of your choice and seeing the results.
11001 	X	import winpipe f winpipe popen dir c c print f readlines f close import winpipe f winpipe popen dir c c print f readlines f close.
11002 	X	many coding styles place begin end brackets on a line by.
11003 	X	the details of python memory management depend on the.
11004 	X	this doesnt allow you to jump into the middle of a loop but thats usually considered an abuse of goto.
11005 	X	see modules readline c and parser myreadline c for more.
11006 	X	the developers issue bugfix releases of older versions so the stability of existing releases gradually.
11007 	X	why is python installed on my machine.
11008 	X	gregs free threading patch set has not been kept up to date for later python.
11009 	X	the most frequent cause for the error is that you tried to open an earlier berkeley db file with a later version of the berkeley db.
11010 	X	by the time the import is called the first module will have finished initializing and the second module can do its.
11011 	X	here the upperout class redefines the write method to convert the argument string to uppercase before calling the underlying.
11012 	X	why doesnt os popen winpipe popen work on winx.
11013 	X	this makes programs considerably longer and wastes valuable screen space making it harder to get a good overview of a.
11014 	X	the standard c implementation of python uses reference counting to detect inaccessible objects and another mechanism to collect reference cycles periodically executing a cycle detection algorithm which looks for inaccessible cycles and deletes the objects.
11015 	X	why cant raw strings r strings end with a backslash.
11016 	X	however sometimes you have to run the embedded python interpreter in the same thread as your rest application and you cant allow the cfunc pyrun interactiveloop to stop while waiting for user.
11017 	X	bugfix releases indicated by a third component of the version number e g are managed for stability only fixes for known problems are included in a bugfix release and its guaranteed that interfaces will remain the same throughout a series of bugfix.
11018 	X	if you find python installed on your system but dont remember installing it there are several possible ways it could have gotten.
11019 	X	this doesnt mean that you cant make good use of python on multi cpu machines.
11020 	X	many linux systems now have all three versions of berkeley db.
11021 	X	it may also be necessary to move imports out of the top level of code if some of the modules are platform.
11022 	X	f getattr foo instance do opname f.
11023 	X	many people use the interactive mode as a convenient yet highly programmable.
11024 	X	there is a bug in winx that prevents os popen winpipe popen from.
11025 	X	ideally a function should fit on one screen say lines.
11026 	X	the mod gc module provides functions to perform a garbage collection obtain debugging statistics and tune the collectors.
11027 	X	more precisely they cant end with an odd number of backslashes the unpaired backslash at the end escapes the closing quote character leaving an unterminated.
11028 	X	the one solution then is to call cfunc pyparser parsestring and test for e error equal to e eof which means the input is incomplete.
11029 	X	new stable releases have been coming out roughly every to months since and this seems likely to.
11030 	X	if you find python installed on your system but dont remember installing it there are several possible ways it could have gotten.
11031 	X	you just have to be creative with dividing the work up between multiple processes rather than multiple threads.
11032 	X	if you are migrating from version to a newer version use db dump to dump a plain text version of the.
11033 	X	in that case it may not even be possible to import all of the modules at the top of the.
11034 	X	use locals or eval to resolve the function name use func locals or func eval to resolve the function name.
11035 	X	all other methods are delegated to the underlying.
11036 	X	when you want to end your interactive python session hold the ctrl key down while you enter a z then hit the enter key to get back to your windows command.
11037 	X	the good news is there is a way to work around this.
11038 	X	lines of python can do a lot more work than lines of c.
11039 	X	jython relies on the java runtime so the jvms garbage collector is.
11040 	X	raw strings were designed to ease creating input for processors chiefly regular expression engines that want to do their own backslash escape.
11041 	X	heres a sample code fragment untested inspired by code from alex farber.
11042 	X	currently there are usually around months between major.
11043 	X	perhaps another user on the computer wanted to learn programming and installed it youll have to figure out whos been using the machine and might have installed.
11044 	X	judicious use of c extensions will also help if you use a c extension to perform a time consuming task the extension can release the gil while the thread of execution is in the c code and allow other threads to get some work.
11045 	X	if you are migrating from version to version use db dump to create a plain text version of the.
11046 	X	in this case importing the correct modules in the corresponding platform specific code is a good.
11047 	X	def myfunc print hello def myfunc print hello.
11048 	X	the delegation is accomplished via the getattr method consult the language reference http docs python org reference datamodel html customizing attribute access getattr method consult ref the language reference attribute access for more information about controlling attribute.
11049 	X	you may also find that you have a start menu entry such as start programs python python command line that results in you seeing the prompt in a new.
11050 	X	this is not solely due to the lack of begin end brackets the lack of declarations and the high level data types are also responsible but the indentation based syntax certainly.
11051 	X	this difference can cause some subtle porting problems if your python code depends on the behavior of the reference counting.
11052 	X	such processors consider an unmatched trailing backslash to be an error anyway so raw strings disallow.
11053 	X	include python h include node h include errcode h include grammar h include parsetok h include compile h.
11054 	X	the developers issue bugfix releases of older versions so the stability of existing releases gradually.
11055 	X	a third party application installed on the machine might have been written in python and included a python.
11056 	X	it is suggested that the gil should be a per interpreter state lock rather than truly global interpreters then wouldnt be able to share.
11057 	X	in either case use db load to create a new native database for the latest version installed on your.
11058 	X	only move imports into a local scope such as inside a function definition if its necessary to solve a problem such as avoiding a circular import or are trying to reduce the initialization time of a.
11059 	X	note that for more general cases delegation can get.
11060 	X	if so the window will disappear after you enter the ctrl z character windows is running a single python command in the window and closes it when you terminate the.
11061 	X	pyrun simplefile crashes on windows but not on unix why.
11062 	X	why am i getting strange results with simple arithmetic operations.
11063 	X	sometimes objects get stuck in tracebacks temporarily and hence are not deallocated when you might.
11064 	X	in return they allow you to pass on the string quote character by escaping it with a.
11065 	X	int testcomplete char code code should end in n return for error for incomplete for complete node n perrdetail e.
11066 	X	bugfix releases indicated by a third component of the version number e g are managed for stability only fixes for known problems are included in a bugfix release and its guaranteed that interfaces will remain the same throughout a series of bugfix.
11067 	X	for a home computer the most common such application is pysol http pysolfc sourceforge net a solitaire game that includes over different games and.
11068 	X	unfortunately this isnt likely to happen.
11069 	X	if you have version of berkeley db installed you should be able to use db load to create a native version.
11070 	X	this technique is especially helpful if many of the imports are unnecessary depending on how the program.
11071 	X	f locals fname f f locals fname f.
11072 	X	when attributes must be set as well as retrieved the class must define a settattr method too and it must do so.
11073 	X	when you want to end your interactive python session hold the ctrl key down while you enter a z then hit the enter key to get back to your windows command.
11074 	X	this is very sensitive to the compiler vendor version and perhaps even.
11075 	X	these rules work well when r strings are used for their intended.
11076 	X	n pyparser parsestring code pyparser grammar py file input e if n null if e error e eof return return.
11077 	X	the release download is recommended production ready version at this point in.
11078 	X	some windows machines also have python.
11079 	X	it would be a tremendous amount of work because many object implementations currently have global.
11080 	X	you may also want to move imports into a function if the modules are only ever used in that.
11081 	X	f eval fname f f eval fname f.
11082 	X	the basic implementation of setattr is roughly equivalent to the following note that for more general cases delegation can get.
11083 	X	you may also find that you have a start menu entry such as menuselection start programs python python command line that results in you seeing the prompt in a new.
11084 	X	if the file structure in your embedding program isnt the same as is assumed by the python interpreter it wont.
11085 	X	why are floating point calculations so inaccurate.
11086 	X	they contain a portion of the program state extracted during the handling of an exception usually the most recent exception.
11087 	X	more precisely they cant end with an odd number of backslashes the unpaired backslash at the end escapes the closing quote character leaving an unterminated.
11088 	X	python is also considered production ready but may be.
11089 	X	at this writing were aware of computers from hewlett packard and compaq that include.
11090 	X	for example small integers and short strings are cached these caches would have to be moved to the interpreter.
11091 	X	the most frequent cause for the error is that you tried to open an earlier berkeley db file with a later version of the berkeley db.
11092 	X	note that loading a module the first time may be expensive because of the one time initialization of the module but loading a module multiple times is virtually free costing only a couple of dictionary.
11093 	X	note using eval is slow and.
11094 	X	when attributes must be set as well as retrieved the class must define a meth setattr method too and it must do so.
11095 	X	if so the window will disappear after you enter the ctrl z character windows is running a single python command in the window and closes it when you terminate the.
11096 	X	if the file structure in your embedding program isnt the same as is assumed by the python interpreter it wont.
11097 	X	people are often very surprised by results like this.
11098 	X	in the absence of circularities and tracebacks python programs need not explicitly manage.
11099 	X	raw strings were designed to ease creating input for processors chiefly regular expression engines that want to do their own backslash escape.
11100 	X	another solution is trying to compile the received string with cfunc py compilestring.
11101 	X	how many people are using python.
11102 	X	apparently some of hp compaqs administrative tools are written in.
11103 	X	other object types have their own free list these free lists would have to be moved to the interpreter.
11104 	X	many linux systems now have all three versions of berkeley db.
11105 	X	even if the module name has gone out of scope the module is probably available in sys.
11106 	X	if you dont have absolute control over the contents of the string someone could pass a string that note using func eval is slow and.
11107 	X	the basic implementation of meth setattr is roughly equivalent to the following.
11108 	X	if the python command instead of displaying the interpreter prompt gives you a message like.
11109 	X	in the absence of circularities and tracebacks python programs need not explicitly manage.
11110 	X	such processors consider an unmatched trailing backslash to be an error anyway so raw strings disallow.
11111 	X	if it compiles without errors try to execute the returned code object by calling cfunc pyeval evalcode.
11112 	X	there are probably tens of thousands of users though its difficult to obtain an exact.
11113 	X	all apple computers running mac os x have python installed its included in the base.
11114 	X	if you are migrating from version to a newer version use db dump to dump a plain text version of the.
11115 	X	if only instances of a specific class use a module then it is reasonable to import the module in the classs init method and then assign the module to an instance variable so that the module is always available via that instance variable during the life of the.
11116 	X	if you dont have absolute control over the contents of the string someone could pass a string that resulted in an arbitrary function were.
11117 	X	class x def setattr self name value.
11118 	X	python is not recognized as an internal or external command operable program or batch.
11119 	X	dlls python dll are all compiled with ms vc and with multithreading dll options md.
11120 	X	and think it is a bug in.
11121 	X	why doesnt python use a more traditional garbage collection scheme.
11122 	X	in return they allow you to pass on the string quote character by escaping it with a.
11123 	X	there are probably tens of thousands of users though its difficult to obtain an exact.
11124 	X	perhaps another user on the computer wanted to learn programming and installed it youll have to figure out whos been using the machine and might have installed.
11125 	X	and i doubt that it can even be done in finite time because the same problem exists for rd party.
11126 	X	if you are migrating from version to version use db dump to create a plain text version of the.
11127 	X	note that to delay an import until the class is instantiated the import must be inside a.
11128 	X	is there an equivalent to perls chomp for removing trailing newlines from strings.
11129 	X	if the python command instead of displaying the interpreter prompt gives you a message like.
11130 	X	if you cant change compilers or flags try using py.
11131 	X	this has nothing to do with python but with how the underlying c platform handles floating point numbers and ultimately with the inaccuracies introduced when writing down numbers as a string of a fixed number of.
11132 	X	for one thing this is not a c standard feature and hence its not.
11133 	X	these rules work well when r strings are used for their intended.
11134 	X	if the compilation fails find out if its an error or just more input is required by extracting the message string from the exception tuple and comparing it to the string unexpected eof while parsing.
11135 	X	python is available for free download so there are no sales figures and its available from many different sites and packaged with many linux distributions so download statistics dont tell the whole story.
11136 	X	a third party application installed on the machine might have been written in python and included a python.
11137 	X	it is likely that rd party extensions are were written at a faster rate than you can convert them to store all their global state in the interpreter.
11138 	X	in either case use db load to create a new native database for the latest version installed on your.
11139 	X	putting the import inside the class but outside of any method still causes the import to occur when the module is.
11140 	X	starting with python you can use s rstrip r n to remove all occurences of any line terminator from the end of the string s without removing other trailing.
11141 	X	python is not recognized as an internal or external command operable program or batch.
11142 	X	a trick to get it to run an arbitrary file is to construct a call to execfile with the name of your file as.
11143 	X	the internal representation of floating point numbers uses a fixed number of binary digits to represent a decimal.
11144 	X	yes we know about the boehm gc.
11145 	X	if youre trying to build windows pathnames note that all windows system calls accept forward slashes too if youre trying to build windows pathnames note that all windows system calls accept forward slashes too.
11146 	X	here is a complete example using the gnu readline library you may want to ignore sigint while calling readline.
11147 	X	python is available for free download so there are no sales figures and its available from many different sites and packaged with many linux distributions so download statistics dont tell the whole story.
11148 	X	for a home computer the most common such application is pysol http pysolfc sourceforge net a solitaire game that includes over different games and.
11149 	X	the global interpreter lock gil is often seen as a hindrance to pythons deployment on high end multiprocessor server machines because a multi threaded python program effectively only uses one cpu due to the insistence that almost all python code can only run while the gil is.
11150 	X	if you have version of berkeley db installed you should be able to use db load to create a native version.
11151 	X	if the string s represents more than one line with several empty lines at the end the line terminators for all the blank lines will be removed.
11152 	X	dict to store local state for self without causing an infinite.
11153 	X	sidebar adding python to dos path subtitle adding python to dos path.
11154 	X	if you cant change compilers or flags try using cfunc py runsimplestring.
11155 	X	some decimal numbers cant be represented exactly in binary resulting in small roundoff.
11156 	X	it has bits of assembler code for most common platforms not for all of them and although it is mostly transparent it isnt completely transparent patches are required to get python to work with.
11157 	X	f open mydir file txt works fine.
11158 	X	include stdio h include readline h.
11159 	X	the comp lang python newsgroup is very active but not all python users post to the group or even read.
11160 	X	some windows machines also have python.
11161 	X	back in the days of python greg stein actually implemented a comprehensive patch set the free threading patches that removed the gil and replaced it with fine grained.
11162 	X	you should move away from berkeley db version files because the hash file code contains known bugs that can corrupt your.
11163 	X	if youre writing code thats in the package sub m module and want to import package sub m do not just write import m even though its.
11164 	X	lines line r n r n r n lines rstrip n r line starting with python you can use s rstrip r n to remove all occurences of any line terminator from the end of the string s without removing other trailing.
11165 	X	python is not added to the dos path by.
11166 	X	a trick to get it to run an arbitrary file is to construct a call to func execfile with the name of your file as.
11167 	X	why doesnt python use a more traditional garbage collection scheme.
11168 	X	f open mydir file txt works fine.
11169 	X	include python h include object h include compile h include eval h.
11170 	X	the comp lang python newsgroup is very active but not all python users post to the group or even read.
11171 	X	at this writing were aware of computers from hewlett packard and compaq that include.
11172 	X	unfortunately even on windows where locks are very efficient this ran ordinary python code about twice as slow as the interpreter using the.
11173 	X	you should move away from berkeley db version files because the hash file code contains known bugs that can corrupt your.
11174 	X	if the string s represents more than one line with several empty lines at the end the line terminators for all the blank lines will be removed.
11175 	X	this screencast will walk you through the steps to add the correct entry to the system path allowing python to be executed from the command line by all.
11176 	X	also note that you can not mix and match debug and release.
11177 	X	equals equals resulting in the binary fractional number.
11178 	X	for one thing this is not a c standard feature and hence its not.
11179 	X	if youre trying to build a pathname for a dos command try e g one of.
11180 	X	py initialize loc pydict new glb pydict new pydict setitemstring glb builtins pyeval getbuiltins.
11181 	X	have any significant projects been done in python.
11182 	X	apparently some of hp compaqs administrative tools are written in.
11183 	X	on linux the performance loss was even worse because pthread locks arent as.
11184 	X	relative imports can lead to a module were initialized twice leading to confusing.
11185 	X	lines line r n r n r n lines rstrip n r line.
11186 	X	most meth setattr implementations must modify.
11187 	X	you through the steps to add the correct entry to the system path allowing python to be executed from the command line by all.
11188 	X	if you wish to use the debug multithreaded dll then your module must have an d wish to use the debug multithreaded dll then your module must have an d appended to the base.
11189 	X	floating point numbers only have or bits of precision so the digits are cut off at some point and the resulting number is in decimal not.
11190 	X	yes we know about the boehm gc.
11191 	X	dir r this is my dos dir dir r this is my dos dir dir this is my dos dir dir r this is my dos dir dir r this is my dos dir dir this is my dos dir.
11192 	X	see http python org about success for a list of projects that use.
11193 	X	all apple computers running mac os x have python installed its included in the base.
11194 	X	since then the idea of getting rid of the gil has occasionally come up but nobody has found a way to deal with the expected slowdown and users who dont use threads would not be happy if their code ran at half at the.
11195 	X	how do i generate random numbers in python.
11196 	X	it is sometimes necessary to move imports to a function or class to avoid problems with circular.
11197 	X	since this is typically only desired when reading text one line at a time using s rstrip this way works.
11198 	X	dict to store local state for self without causing an infinite.
11199 	X	adding python to dos path image images python video icon png adding python to dos path http showmedo com videos videoname fromseriesid adding python to dos path image http python org images python video icon png adding python to dos path http showmedo com videos videoname fromseriesid.
11200 	X	importing tkinter fails on windows why.
11201 	X	and think it is a bug in.
11202 	X	it has bits of assembler code for most common platforms not for all of them and although it is mostly transparent it isnt completely transparent patches are required to get python to work with.
11203 	X	why doesnt python have a with statement for attribute assignments.
11204 	X	if null line ctrl d pressed done else i strlen line.
11205 	X	consulting the proceedings for past python conferences community workshops will reveal contributions from many different companies and.
11206 	X	gregs free threading patch set has not been kept up to date for later python.
11207 	X	the standard module random http docs python org library random implements a random number.
11208 	X	since this is typically only desired when reading text one line at a time using s rstrip this way works.
11209 	X	how do i call a method defined in a base class from a derived class that overrides it.
11210 	X	bad command or filename bad command or filename.
11211 	X	sometimes the import of tkinter fails on windows or complaining with a message like the following sometimes the import of tkinter fails on windows or complaining with a message like the following.
11212 	X	this has nothing to do with python but with how the underlying c platform handles floating point numbers and ultimately with the inaccuracies introduced when writing down numbers as a string of a fixed number of.
11213 	X	traditional gc also becomes a problem when python is embedded into other.
11214 	X	python has a with statement that wraps the execution of a block calling code on the entrance and exit from the.
11215 	X	if i add history line save non empty lines.
11216 	X	see http python org about success for a list of projects that use.
11217 	X	that depends on where python came.
11218 	X	this doesnt mean that you cant make good use of python on multi cpu machines.
11219 	X	circular imports are fine where both modules use the import module form of.
11220 	X	for older versions of python there are two partial substitutes.
11221 	X	if youre using new style classes use the built in func super function.
11222 	X	then you need to make sure that your computer knows where to find the python.
11223 	X	importerror dll load failed one of the library files needed to run this application cannot be.
11224 	X	the internal representation of floating point numbers uses a fixed number of binary digits to represent a decimal.
11225 	X	while in a standalone python its fine to replace the standard malloc and free with versions provided by the gc library an application embedding python may want to have its own substitute for malloc and free and may not want.
11226 	X	some language have a construct that looks like this.
11227 	X	if null code nothing in code yet j else j strlen code.
11228 	X	consulting the proceedings for past python conferences http python org community workshops will reveal contributions from many different companies and.
11229 	X	if someone installed it deliberately you can remove it without hurting.
11230 	X	you just have to be creative with dividing the work up between multiple processes rather than multiple threads.
11231 	X	import random random random the standard module mod random implements a random number.
11232 	X	they fail when the nd module wants to grab a name out of the first from module import name and the import is at the top.
11233 	X	if you want to remove all trailing whitespace use the rstrip method of string.
11234 	X	if youre using new style classes use the built in super function class derived base def meth self super derived self meth.
11235 	X	to do this you will have to modify a setting called path which is a list of directories where windows will look for.
11236 	X	importerror dll load failed one of the library files needed to run this application cannot be.
11237 	X	some decimal numbers cant be represented exactly in binary resulting in small roundoff.
11238 	X	right now python works with anything that implements malloc and free.
11239 	X	with obj a equivalent to obj a total total obj total obj total python has a with statement that wraps the execution of a block calling code on the entrance and exit from the.
11240 	X	code realloc code i j if null code out of memory exit.
11241 	X	high profile python projects include the mailman mailing list manager http www list org and the zope application server http www zope org.
11242 	X	on windows use the add remove programs icon in the control.
11243 	X	judicious use of c extensions will also help if you use a c extension to perform a time consuming task the extension can release the gil while the thread of execution is in the c code and allow other threads to get some work.
11244 	X	thats because names in the st are not yet available because the first module is busy importing the.
11245 	X	this removes all trailing whitespace not just a single.
11246 	X	if youre using classic classes for a class definition such as class derived base you can call method meth defined in base or one of base s base classes as base meth self arguments.
11247 	X	to do this you will have to modify a setting called path which is a list of directories where windows will look for.
11248 	X	it could be that you havent installed tcl tk but if you did install tcl tk and the wish application works correctly the problem may be that its installer didnt manage to edit the autoexec bat file.
11249 	X	in jython the following code which is fine in cpython will probably run out of file descriptors long before it runs out of memory.
11250 	X	some language have a construct that looks like this.
11251 	X	if j code was empty so code keep strncat happy.
11252 	X	several linux distributions most notably red hat http www redhat com have written part or all of their installer and system administration software in.
11253 	X	if python was installed by a third party application you can also remove it but that application will no longer.
11254 	X	it is suggested that the gil should be a per interpreter state lock rather than truly global interpreters then wouldnt be able to share.
11255 	X	in this case if the second module is only used in one function then the import can easily be moved into that.
11256 	X	if you want to remove all trailing whitespace use the rstrip method of string.
11257 	X	here base meth is an unbound method so you need to provide the self.
11258 	X	you should arrange for pythons installation directory to be added to the path of every command window as it.
11259 	X	it tries to add a statement that changes the path environment variable to include the tcl tk bin subdirectory but sometimes this edit doesnt quite.
11260 	X	equals equals resulting in the binary fractional number.
11261 	X	for file in very long list of files f open file c f read.
11262 	X	with obj a equivalent to obj a total total obj total obj total.
11263 	X	strncat code line i append line to code code i j n append n to code code i j.
11264 	X	companies that use python internally include google yahoo and lucasfilm http www zope org.
11265 	X	you should use that applications uninstaller rather than removing python.
11266 	X	unfortunately this isnt likely to happen.
11267 	X	this returns a random floating point number in the range.
11268 	X	by the time the import is called the first module will have finished initializing and the second module can do its.
11269 	X	this removes all trailing whitespace not just a single.
11270 	X	class derived base def meth self super derived self meth.
11271 	X	if you installed python fairly recently of every command window as it.
11272 	X	opening it with notepad usually reveals what the problem and the wish application works correctly the problem may be that its installer didnt manage to edit the autoexec bat file.
11273 	X	floating point numbers only have or bits of precision so the digits are cut off at some point and the resulting number is in decimal not.
11274 	X	using the current reference counting and destructor scheme each new assignment to f closes the previous.
11275 	X	in python such a construct would be.
11276 	X	src py compilestring code stdin py single input.
11277 	X	several linux distributions most notably red hat http www redhat com have written part or all of their installer and system administration software in.
11278 	X	if python came with your operating system removing it is not.
11279 	X	it would be a tremendous amount of work because many object implementations currently have global.
11280 	X	there are also many other specialized generators in this module such as there are also many other specialized generators in this module such as.
11281 	X	it may also be necessary to move imports out of the top level of code if some of the modules are platform.
11282 	X	otherwise if there is only one line in the string s use s splitlines.
11283 	X	if youre using classic classes for a class definition such as class derived base you can call method meth defined in base or one of base s base classes as base meth self arguments.
11284 	X	if you installed python fairly recently then the command.
11285 	X	it tries to add a statement that changes the path environment variable to include the tcl tk bin subdirectory but sometimes this edit doesnt quite.
11286 	X	a floating point numbers repr function prints as many digits are necessary to make eval repr f f true for any float f.
11287 	X	other languages such as object pascal delphi and c use static types so its possible to know in an unambiguous way what member is were assigned.
11288 	X	companies that use python internally include google yahoo and lucasfilm.
11289 	X	if you remove it whatever tools were written in python will no longer run and some of them might be important to.
11290 	X	for example small integers and short strings are cached these caches would have to be moved to the interpreter.
11291 	X	randrange a b chooses an integer in the range a b.
11292 	X	in that case it may not even be possible to import all of the modules at the top of the.
11293 	X	is there a scanf or sscanf equivalent.
11294 	X	here base meth is an unbound method so you need to provide the self.
11295 	X	dir c py dir c py.
11296 	X	opening it with notepad usually reveals what the problem.
11297 	X	the str function prints fewer digits and this often results in the more sensible number that was probably intended.
11298 	X	if you want to write code that will work with any python implementation you should explicitly close the file this will work regardless of gc.
11299 	X	this is the main point of static typing the compiler always knows the scope of every variable at compile.
11300 	X	src compiled just fine if ps prompt or n code i j and double n so execute it dum pyeval evalcode pycodeobject src glb loc py xdecref dum py xdecref src free code code null if pyerr occurred pyerr print prompt ps syntax error or e eof else if pyerr exceptionmatches pyexc syntaxerror pyerr fetch exc val trb clears exception.
11301 	X	what new developments are expected for python in the future.
11302 	X	reinstalling the whole system would then be required to fix things.
11303 	X	other object types have their own free list these free lists would have to be moved to the interpreter.
11304 	X	uniform a b chooses a floating point number in the range a b.
11305 	X	in this case importing the correct modules in the corresponding platform specific code is a good.
11306 	X	how can i organize my code to make it easier to change the base class.
11307 	X	will probably tell you where it is installed the usual location is something like c python.
11308 	X	one additional hint noted by david szafranski you cant use long filenames here e g use c progra tcl bin instead of c program files tcl bin.
11309 	X	for file in very long list of files f open file c f read f close.
11310 	X	if pyarg parsetuple val so msg obj strcmp msg unexpected eof while parsing e eof py xdecref exc py xdecref val py xdecref trb prompt ps else some other syntax error pyerr restore exc val trb pyerr print free code code null prompt ps else some non syntax error pyerr print free code code null prompt ps.
11311 	X	see http www python org dev peps for the python enhancement proposals peps.
11312 	X	if someone installed it deliberately you can remove it without hurting.
11313 	X	choice s chooses random element from a given sequence shuffle l shuffles a list in place i e permutes it randomly.
11314 	X	only move imports into a local scope such as inside a function definition if its necessary to solve a problem such as avoiding a circular import or are trying to reduce the initialization time of a.
11315 	X	for simple input parsing the easiest approach is usually to split the line into whitespace delimited words using the split method of string objects and then convert decimal strings to numeric values using int or float.
11316 	X	you could define an alias for the base class assign the real base class to it before your class definition and use the alias throughout your.
11317 	X	otherwise you will be reduced to a search of your whole disk use tools find or hit the search button and look for python exe.
11318 	X	here e g use c progra tcl bin instead of c program files tcl bin.
11319 	X	one of the consequences of this is that it is error prone to compare the result of some computation to a float with.
11320 	X	while in a standalone python its fine to replace the standard malloc and free with versions provided by the gc library an application embedding python may want to have its own substitute for malloc and free and may not want.
11321 	X	it is impossible to know in advance which attribute will be referenced at.
11322 	X	peps are design documents describing a suggested new feature for python providing a concise technical specification and a.
11323 	X	on windows use the add remove programs icon in the control.
11324 	X	and i doubt that it can even be done in finite time because the same problem exists for rd party.
11325 	X	theres also a random class you can instantiate to create independent multiple random number.
11326 	X	this technique is especially helpful if many of the imports are unnecessary depending on how the program.
11327 	X	split supports an optional sep parameter which is useful if the line uses something other than whitespace as a.
11328 	X	then all you have to change is the value assigned to the.
11329 	X	supposing you discover that python is installed in the c python directory the default at the time of writing you should make sure that entering the command.
11330 	X	how do i extract the downloaded documentation on windows.
11331 	X	right now python works with anything that implements malloc and free.
11332 	X	member attributes may be added or removed from objects on the.
11333 	X	how do i find undefined g symbols builtin new or pure virtual.
11334 	X	look for a pep titled python x y release schedule where x y is a version that hasnt been publicly released.
11335 	X	if python was installed by a third party application you can also remove it but that application will no longer.
11336 	X	it is likely that rd party extensions are were written at a faster rate than you can convert them to store all their global state in the interpreter.
11337 	X	theres also a random class you can instantiate to create independent multiple random number.
11338 	X	you may also want to move imports into a function if the modules are only ever used in that.
11339 	X	for simple input parsing the easiest approach is usually to split the line into whitespace delimited words using the meth str split method of string objects and then convert decimal strings to numeric values using func int or func float.
11340 	X	incidentally this trick is also handy if you want to decide dynamically e g depending on availability of resources which base class to.
11341 	X	sometimes when you download the documentation package to a windows machine using a web browser the file extension of the saved file ends up were.
11342 	X	instead you have to check that the difference between the two numbers is less than a certain threshold necessary to make eval repr f f true for any float f.
11343 	X	in jython the following code which is fine in cpython will probably run out of file descriptors long before it runs out of memory.
11344 	X	this makes it impossible to know from a simple reading what attribute is were referenced a local one a global one or a member attribute.
11345 	X	to dynamically load g extension modules you must recompile python relink it using g change linkcc in the python modules makefile and link your extension module using g e g shared o mymodule so mymodule o.
11346 	X	peps are design documents describing a suggested new feature for python providing a concise technical specification and a.
11347 	X	you should use that applications uninstaller rather than removing python.
11348 	X	and finally once you have multiple interpreters not sharing any state what have you gained over running each interpreter in a separate process.
11349 	X	modified sandbox trunk faq programming rst sandbox trunk faq programming rst sun oct tocdepth.
11350 	X	note that loading a module the first time may be expensive because of the one time initialization of the module but loading a module multiple times is virtually free costing only a couple of dictionary.
11351 	X	split supports an optional sep parameter which is useful if the line uses something other than whitespace as a.
11352 	X	starts up the interpreter as above and dont forget youll need a ctrl z and an enter to get out of it.
11353 	X	this is a mistake the extension should be.
11354 	X	the str function prints fewer digits and this often results in the more sensible number that was probably intended.
11355 	X	for file in very long list of files f open file c f read.
11356 	X	other languages such as object pascal delphi and c use static types so its possible to know in an unambiguous way what member is were assigned.
11357 	X	to dynamically load g extension modules you must recompile python relink it using g change linkcc in the python modules makefile and link your extension module using g e g shared o mymodule so mymodule o.
11358 	X	look for a pep titled python x y release schedule where x y is a version that hasnt been publicly released.
11359 	X	if python came with your operating system removing it is not.
11360 	X	and finally once you have multiple interpreters not sharing any state what have you gained over running each interpreter in a separate process.
11361 	X	is there a source code level debugger with breakpoints single stepping.
11362 	X	even if the module name has gone out of scope the module is probably available in data sys modules.
11363 	X	for more complicated input parsing regular expressions more powerful than cs sscanf and better suited for the.
11364 	X	class derived basealias def meth self basealias meth self.
11365 	X	once you have verified the directory you need to add it to the start up routines your computer goes.
11366 	X	simply rename the downloaded file to have the tgz extension and winzip will be able to handle.
11367 	X	using the current reference counting and destructor scheme each new assignment to f closes the previous.
11368 	X	this is the main point of static typing the compiler always knows the scope of every variable at compile.
11369 	X	can i create an object class with some methods implemented in c and others in python e g through inheritance.
11370 	X	new development is discussed on the python dev mailing list http mail python org mailman listinfo python dev.
11371 	X	if you remove it whatever tools were written in python will no longer run and some of them might be important to.
11372 	X	the pdb module is a simple but adequate console mode debugger for.
11373 	X	if only instances of a specific class use a module then it is reasonable to import the module in the classs init method and then assign the module to an instance variable so that the module is always available via that instance variable during the life of the.
11374 	X	for more complicated input parsing regular expressions more powerful than cs cfunc sscanf and better suited for the.
11375 	X	you could define an alias for the base class assign the real base class to it before your class definition and use the alias throughout your.
11376 	X	for older versions of windows the easiest way to do this is to edit the c autoexec bat.
11377 	X	if your copy of winzip doesnt get a newer one from simply rename the downloaded file to have the tgz extension and winzip will be able to handle.
11378 	X	one of the consequences of this is that it is error prone to compare the result of some computation to a float with.
11379 	X	can i create an object class with some methods implemented in c and others in python e g through inheritance.
11380 	X	new development is discussed on the python dev mailing list http mail python org mailman listinfo python dev.
11381 	X	reinstalling the whole system would then be required to fix things.
11382 	X	how do i delete a file.
11383 	X	it is part of the standard python library and is documented in the library reference manual http docs python org library pdb html.
11384 	X	note that to delay an import until the class is instantiated the import must be inside a.
11385 	X	what does unicodeerror ascii decodingencoding error ordinal not in range mean.
11386 	X	then all you have to change is the value assigned to the.
11387 	X	you would want to add a line like the following to autoexec bat.
11388 	X	if your copy of winzip doesnt get a newer one from http www winzip.
11389 	X	if you want to write code that will work with any python implementation you should explicitly close the file this will work regardless of gc.
11390 	X	it is impossible to know in advance which attribute will be referenced at.
11391 	X	in python you can inherit from builtin classes such as int list dict.
11392 	X	is it reasonable to propose incompatible changes to python.
11393 	X	modified sandbox trunk faq library rst sandbox trunk faq library rst sun oct tocdepth.
11394 	X	you can also write your own debugger by using the code for pdb as an.
11395 	X	putting the import inside the class but outside of any method still causes the import to occur when the module is.
11396 	X	this error indicates that your python installation can handle only bit ascii.
11397 	X	incidentally this trick is also handy if you want to decide dynamically e g depending on availability of resources which base class to.
11398 	X	missing cwmt dll or missing cw dll.
11399 	X	instead you have to check that the difference between the two numbers is less than a certain threshold.
11400 	X	for file in very long list of files f open file c f read f close.
11401 	X	member attributes may be added or removed from objects on the.
11402 	X	in python you can inherit from builtin classes such as class int class list class dict.
11403 	X	use os remove filename or os unlink filename for documentation see the posix module http docs python org library posix.
11404 	X	the idle interactive development environment which is part of the standard python distribution normally available as tools scripts idle includes a graphical.
11405 	X	how can i pass optional or keyword parameters from one function to another.
11406 	X	there are a couple ways to fix or work around the.
11407 	X	for windows nt and i assume xp you will need to add a string such as.
11408 	X	sometimes when using tkinter on windows you get an error that cwmt dll or cw dll is.
11409 	X	epsilon tiny allowed error expected result epsilon tiny allowed error expected result.
11410 	X	why isnt all memory freed when python exits.
11411 	X	this makes it impossible to know from a simple reading what attribute is were referenced a local one a global one or a member attribute.
11412 	X	the boost python library bpl http www boost org libs python doc index html provides a way of doing this from c i e you can inherit from an extension class written in c using the bpl.
11413 	X	there are already millions of lines of python code around the world so any change in the language that invalidates more than a very small fraction of existing programs has to be frowned.
11414 	X	the two functions are identical unlink is simply the name of the unix system call for this.
11415 	X	there is documentation for the idle debugger at http www python org idle doc idle html debugger.
11416 	X	collect the arguments using the and specifiers in the functions parameter list this gives you the positional arguments as a tuple and the keyword arguments as a.
11417 	X	if your programs must handle data in arbitrary character set encodings the environment the application runs in will generally identify the encoding of the data it is handing.
11418 	X	class derived basealias def meth self basealias meth self.
11419 	X	to the current setting for the path environment variable which you will find in the properties window of my computer under the advanced.
11420 	X	sometimes when using tkinter on windows you get an error that cwmt dll or cw dll is.
11421 	X	if expected result epsilon computation expected result epsilon if expected result epsilon computation expected result epsilon.
11422 	X	objects referenced from the global namespaces of python modules are not always deallocated when python.
11423 	X	for instance take the following incomplete snippet.
11424 	X	provides a way of doing this from c i e you can inherit from an extension class written in c using the bpl.
11425 	X	even if you can provide a conversion program theres still the problem of updating all documentation many books have been written about python and we dont want to invalidate them all at a single.
11426 	X	how do i find a module or application to perform task x.
11427 	X	to remove a directory use os rmdir use os mkdir to create.
11428 	X	pythonwin is a python ide that includes a gui debugger based on.
11429 	X	you can then pass these arguments when calling another function by using and.
11430 	X	you need to convert the input to unicode data using that.
11431 	X	note that if you have sufficient privilege you might get a choice of installing the settings either for the current user or for.
11432 	X	cause you have an old tcl tk dll built with cygwin in your path probably c windows.
11433 	X	please see the chapter on floating point arithmetic http docs python org tutorial floatingpoint in the python tutorial for more.
11434 	X	this may happen if there are circular.
11435 	X	def foo a with a print x with a print x.
11436 	X	when importing module x why do i get undefined symbol pyunicodeucs.
11437 	X	providing a gradual upgrade path is necessary if a feature has to be.
11438 	X	check the library reference http docs python org library to see if theres a relevant standard library.
11439 	X	os makedirs path will create any intermediate directories in path that dont.
11440 	X	the pythonwin debugger colors breakpoints and has quite a few cool features such as debugging non pythonwin.
11441 	X	in the unlikely case that you care about python versions older than use apply.
11442 	X	for example a program that handles email or web input will typically find character set encoding information in content type.
11443 	X	static data in the sense of c or java is easy static methods again in the sense of c or java are not supported.
11444 	X	the latter is preferred if you want everybody to be able to run python on the.
11445 	X	you must use the tcl tk dlls from the standard tcl tk installation python comes with one.
11446 	X	please see the chapter on floating point arithmetic http docs python org tutorial floatingpoint in the python tutorial for more.
11447 	X	there are also certain bits of memory that are allocated by the c library that are impossible to free e g a tool like purify will complain about these.
11448 	X	the snippet assumes that a must have a member attribute called x.
11449 	X	you are using a version of python that uses a byte representation for unicode characters but some c extension module you are importing was compiled using a python that uses a byte representation for unicode characters the default.
11450 	X	pep http python org dev peps pep describes the procedure followed for introducing backward incompatible changes while minimizing disruption for.
11451 	X	eventually youll learn whats in the standard library and will able to skip this.
11452 	X	os removedirs path will remove intermediate directories as long as theyre empty if you want to delete an entire directory tree and its contents use shutil rmtree.
11453 	X	pythonwin is available as part of the python for windows extensions http sourceforge net projects pywin project and as a part of the activepython distribution see http www activestate com products activepython index html.
11454 	X	parameter list this gives you the positional arguments as a tuple and the keyword arguments as a.
11455 	X	this can then be used to properly convert input data to.
11456 	X	if you arent confident doing any of these manipulations yourself ask for help.
11457 	X	warning about ctld version from installer.
11458 	X	python is however aggressive about cleaning up memory on exit and does try to destroy every single.
11459 	X	however there is nothing in python that tells the interpreter.
11460 	X	if instead the name of the undefined symbol starts with pyunicodeucs the problem is the reverse python was built using byte unicode characters and the extension module was compiled using a python with byte unicode.
11461 	X	check ref the library reference library index to see if theres a relevant standard library.
11462 	X	use os remove filename or os unlink filename for documentation see the mod os.
11463 	X	boa constructor http boa constructor sourceforge net is an ide and gui builder that uses.
11464 	X	you can then pass these arguments when calling another function by using and.
11465 	X	assuming the string referred to by value is encoded as utf.
11466 	X	for static data simply define a class.
11467 	X	at this stage you may want to reboot your system to make absolutely sure the new setting has taken.
11468 	X	the python installer issues a warning like this.
11469 	X	objects referenced from the global namespaces of python modules are not always deallocated when python.
11470 	X	what should happen if a is let us say an integer.
11471 	X	this can easily occur when using pre built extension.
11472 	X	there are already millions of lines of python code around the world so any change in the language that invalidates more than a very small fraction of existing programs has to be frowned.
11473 	X	eventually youll learn whats in the standard library and will able to skip this.
11474 	X	the two functions are identical func unlink is simply the name of the unix system call for this.
11475 	X	it offers visual frame creation and manipulation an object inspector many views on the source like object browsers inheritance hierarchies doc string generated html documentation an advanced debugger integrated help and zope.
11476 	X	in the unlikely case that you care about python versions older than use func apply.
11477 	X	to assign a new value to the attribute you have to explicitly use the class name in the assignment static data in the sense of c or java is easy static methods again in the sense of c or java are not supported.
11478 	X	you probably wont need to reboot for windows nt xp or.
11479 	X	this version uses ctld dll which is not the correct.
11480 	X	this may happen if there are circular.
11481 	X	if there is a global variable named x will it be used inside the with block.
11482 	X	redhat linux x in particular provided a python binary that is compiled with byte.
11483 	X	even if you can provide a conversion program theres still the problem of updating all documentation many books have been written about python and we dont want to invalidate them all at a single.
11484 	X	search the python package index http pypi python org pypi.
11485 	X	to remove a directory use func os rmdir use func os mkdir to create.
11486 	X	eric http www die offenbachs de eric index html is an ide built on pyqt and the scintilla editing.
11487 	X	how do i write a function with output parameters call by reference.
11488 	X	class c count number of times c init called for static data simply define a class.
11489 	X	you can also avoid it in earlier versions by editing the file c windows command cmdinit bat instead of autoexec bat.
11490 	X	this version is used for windows nt applications.
11491 	X	one is performance knowing that a string is immutable means we can allocate space for it at creation time and the storage requirements are fixed and.
11492 	X	there are also certain bits of memory that are allocated by the c library that are impossible to free e g a tool like purify will complain about these.
11493 	X	as you see the dynamic nature of python makes such choices much.
11494 	X	this only causes the link failure if the extension uses any of the pyunicode.
11495 	X	providing a gradual upgrade path is necessary if a feature has to be.
11496 	X	next check the vaults of parnassus http www vex net parnassus an older index of.
11497 	X	os makedirs path will create any intermediate directories in path that dont.
11498 	X	pydb is a version of the standard python debugger pdb modified for use with ddd data display debugger a popular graphical debugger front.
11499 	X	remember that arguments are passed by assignment in.
11500 	X	if the data is not correctly encoded as utf the above call will raise a unicodeerror.
11501 	X	to assign a new value to the attribute you have to explicitly use the class name in the assignment.
11502 	X	disk use menuselection tools find or hit the guilabel search button and look for python exe.
11503 	X	this version uses ctld dll which is not the correct.
11504 	X	this is also one of the reasons for the distinction between tuples and.
11505 	X	python is however aggressive about cleaning up memory on exit and does try to destroy every single.
11506 	X	the primary benefit of with and similar language features reduction of code volume can however easily be achieved in python by.
11507 	X	it is also a problem if an extension uses any of the unicode related format specifiers for py buildvalue or similar or parameter specifications for pyarg parsetuple.
11508 	X	pep dev peps pep describes the procedure followed for introducing backward incompatible changes while minimizing disruption for.
11509 	X	next check the vaults of parnassus http www vex net parnassus an older index of.
11510 	X	os removedirs path will remove intermediate directories as long as theyre empty if you want to delete an entire directory tree and its contents use func shutil rmtree.
11511 	X	pydb can be found at http bashdb sourceforge net pydb and ddd can be found at http www gnu org software.
11512 	X	since assignment just creates references to objects theres no alias between an argument name in the caller and callee and so no call by reference per.
11513 	X	if you only want strings converted to unicode which have non ascii data you can try converting them first assuming an ascii encoding and then generate unicode objects if that fails.
11514 	X	def init self c count c count class c count number of times c init called.
11515 	X	supposing you discover that python is installed in the c python directory the default at the time of writing you should make sure that entering the command.
11516 	X	this version is used for windows nt applications.
11517 	X	another advantage is that strings in python are considered as elemental as.
11518 	X	if you want to force python to delete certain things on deallocation use the sys exitfunc hook to run a function that will force those.
11519 	X	function args dict index index a function args dict index index b function args dict index index c the snippet assumes that a must have a member attribute called x.
11520 	X	you can check the size of the unicode character a python interpreter is using by checking the value of sys maxunicode.
11521 	X	finally try google http www google com or other web search.
11522 	X	to rename a file use os rename old path new path.
11523 	X	there are a number of commercial python ides that include graphical.
11524 	X	you can achieve the desired effect in a number of.
11525 	X	try x unicode value ascii except unicodeerror value unicode value utf else value was valid ascii data pass.
11526 	X	def getcount self return c count or return self count def init self c count c count.
11527 	X	tim peters this is a microsoft dll and a notorious source of.
11528 	X	no amount of activity will change the value to anything else and in python no amount of activity will change the string eight to anything.
11529 	X	if you want to force python to delete certain things on deallocation use the mod atexit module to run a function that will force those.
11530 	X	however there is nothing in python that tells the interpreter.
11531 	X	if instead the name of the undefined symbol starts with pyunicodeucs the problem is the reverse python was built using byte unicode characters and the extension module was compiled using a python with byte unicode.
11532 	X	searching for python plus a keyword or two for your topic of interest will usually find something.
11533 	X	to truncate a file open it using f open filename r and use f truncate offset offset defaults to the current seek.
11534 	X	they include the pdb module is a simple but adequate console mode debugger for.
11535 	X	remember that arguments are passed by assignment in.
11536 	X	its possible to set a default encoding in a file called sitecustomize py thats part of the python.
11537 	X	c count also refers to c count for any c such that isinstance c c holds unless overridden by c itself or by some class on the base class search path from c class back to c.
11538 	X	starts up the interpreter as above and dont forget youll need a ctrl z and an enter to get out of it.
11539 	X	the message means what it says you have the wrong version of this dll for your operating.
11540 	X	one is performance knowing that a string is immutable means we can allocate space for it at creation time and the storage requirements are fixed and.
11541 	X	why are there separate tuple and list data types.
11542 	X	what should happen if a is let us say an integer.
11543 	X	this can easily occur when using pre built extension.
11544 	X	as of august no major problems have been reported and yk compliance seems to be a non.
11545 	X	finally try google http www google com or other web search.
11546 	X	theres also os ftruncate fd offset for files opened with os open where fd is the file descriptor a small integer.
11547 	X	it is part of the standard python library and is mod documented in the library reference manual pdb.
11548 	X	since assignment just creates references to objects theres no alias between an argument name in the caller and callee and so no call by reference per.
11549 	X	however this isnt recommended because changing the python wide default encoding may cause third party extension modules to.
11550 	X	def getcount self return c count or return self count.
11551 	X	once you have verified the directory you need to add it to the start up routines your computer goes.
11552 	X	the python installation did not cause this something else you installed previous to this overwrote the dll that came with your os probably older shareware of some sort but theres no way to tell now.
11553 	X	this is also one of the reasons for the distinction between tuples and.
11554 	X	lists and tuples while similar in many respects are generally used in fundamentally different.
11555 	X	if there is a global variable named x will it be used inside the with block.
11556 	X	redhat linux x in particular provided a python binary that is compiled with byte.
11557 	X	as of august no major problems have been reported and yk compliance seems to be a non.
11558 	X	searching for python plus a keyword or two for your topic of interest will usually find something.
11559 	X	f truncate offset offset defaults to the current seek.
11560 	X	you can also write your own debugger by using the code for pdb as an.
11561 	X	you can achieve the desired effect in a number of.
11562 	X	this error indicates that your python installation can handle only bit ascii.
11563 	X	caution within a method of c an assignment like self count creates a new and unrelated instance vrbl named count in self s own.
11564 	X	for older versions of windows the easiest way to do this is to edit the c autoexec bat.
11565 	X	if you search for ctld using any search engine altavista for example youll find hundreds and hundreds of web pages complaining about the same problem with all sorts of installation.
11566 	X	another advantage is that strings in python are considered as elemental as.
11567 	X	tuples can be thought of as were similar to pascal records or c structs theyre small collections of related data which may be of different types which are operated on as a.
11568 	X	as you see the dynamic nature of python makes such choices much.
11569 	X	this only causes the link failure if the extension uses any of the pyunicode.
11570 	X	python does very few date calculations and for those it does perform relies on the c library.
11571 	X	where is the math py socket py regex py source file.
11572 	X	theres also os ftruncate fd offset for files opened with func os open where fd is the file descriptor a small integer.
11573 	X	the idle interactive development environment which is part of the standard python distribution normally available as tools scripts idle includes a graphical.
11574 	X	by returning a tuple of the results.
11575 	X	there are a couple ways to fix or work around the.
11576 	X	rebinding of a class static data name must always specify the class whether inside a method or not c count also refers to c count for any c such that isinstance c c holds unless overridden by c itself or by some class on the base class search path from c class back to c.
11577 	X	you would want to add a line like the following to autoexec bat.
11578 	X	theyll point you to ways to get the correct version reinstalled on your system since python doesnt cause this we cant fix it.
11579 	X	no amount of activity will change the value to anything else and in python no amount of activity will change the string eight to anything.
11580 	X	for example a cartesian coordinate is appropriately represented as a tuple of two or three.
11581 	X	the primary benefit of with and similar language features reduction of code volume can however easily be achieved in python by.
11582 	X	it is also a problem if an extension uses any of the unicode related format specifiers for cfunc py buildvalue or similar or parameter specifications for cfunc pyarg parsetuple.
11583 	X	python generally represents times either as seconds since or as a year month day tuple where the year is expressed with four digits which makes yk bugs.
11584 	X	if you cant find a source file for a module it may be a builtin or dynamically loaded module implemented in c c or other compiled.
11585 	X	the mod shutil module also contains a number of functions to work on files including func shutil copyfile func shutil copytree and func shutil rmtree.
11586 	X	there is documentation for the idle debugger at http www python org idle doc idle html.
11587 	X	this is almost always the clearest.
11588 	X	if your programs must handle data in arbitrary character set encodings the environment the application runs in will generally identify the encoding of the data it is handing.
11589 	X	caution within a method of c an assignment like self count creates a new and unrelated instance vrbl named count in self s own.
11590 	X	this is a microsoft dll and a notorious source of.
11591 	X	lists on the other hand are more like arrays in other.
11592 	X	function args dict index index a function args dict index index b function args dict index index c.
11593 	X	you can check the size of the unicode character a python interpreter is using by checking the value of sys maxunicode.
11594 	X	so as long as your c library is okay python should be.
11595 	X	in this case you may not have the source file or it may be something like mathmodule c somewhere in a c source directory not on the python path.
11596 	X	the shutil module also contains a number of functions to work on files including copyfile copytree and rmtree.
11597 	X	pythonwin is a python ide that includes a gui debugger based on.
11598 	X	you need to convert the input to unicode data using that.
11599 	X	rebinding of a class static data name must always specify the class whether inside a method or not.
11600 	X	for windows nt and i assume xp you will need to add a string such as.
11601 	X	the message means what it says you have the wrong version of this dll for your operating.
11602 	X	why must self be used explicitly in method definitions and calls.
11603 	X	they tend to hold a varying number of objects all of which have the same type and which are operated on one by.
11604 	X	ref function args dict index index ref a ref b ref c.
11605 	X	of course its possible that a particular application written in python makes assumptions about digit.
11606 	X	if you cant find a source file for a module it may be a builtin or dynamically loaded module implemented in c c or other compiled.
11607 	X	how do i copy a file.
11608 	X	the pythonwin debugger colors breakpoints and has quite a few cool features such as debugging non pythonwin.
11609 	X	this isnt thread safe and is not.
11610 	X	for example a program that handles email or web input will typically find character set encoding information in content type.
11611 	X	static methods are possible since python.
11612 	X	to the current setting for the path environment variable which you will find in the properties window of my computer under the advanced.
11613 	X	the python installation did not cause this something else you installed previous to this overwrote the dll that came with your os probably older shareware of some sort but theres no way to tell now.
11614 	X	the idea was borrowed from modula it turns out to be very useful for a variety of.
11615 	X	for example os listdir returns a list of strings representing the files in the current.
11616 	X	this also has the side effect of increasing execution speed because name bindings are resolved at run time in python and the second version only needs to perform the resolution.
11617 	X	the only way to solve this problem is to use extension modules compiled with a python binary built using the same size for unicode.
11618 	X	because python is available free of charge there are no absolute.
11619 	X	in this case you may not have the source file or it may be something like mathmodule c somewhere in a c source directory not on the python path.
11620 	X	the shutil module contains a copyfile.
11621 	X	pythonwin is available as part of the python for windows extensions http sourceforge net projects pywin project and as a part of the activepython distribution see http www activestate com products activepython index html.
11622 	X	this can then be used to properly convert input data to.
11623 	X	note that if you have sufficient privilege you might get a choice of installing the settings either for the current user or for.
11624 	X	if you search for ctld using any search engine altavista for example youll find hundreds and hundreds of web pages complaining about the same problem with all sorts of installation.
11625 	X	first its more obvious that you are using a method or instance attribute instead of a local.
11626 	X	functions which operate on this output would generally not break if you added another file or two to the.
11627 	X	if the referenced object does not have a b and c attributes of course the end result is still a run time.
11628 	X	the only way to solve this problem is to use extension modules compiled with a python binary built using the same size for unicode.
11629 	X	if there are unforeseen problems liability is the users problem rather than the developers and there is nobody you can sue for.
11630 	X	there are at least three kinds of modules in python.
11631 	X	note that on macos it doesnt copy the resource fork and finder.
11632 	X	boa constructor http boa constructor sourceforge net is an ide and gui builder that uses.
11633 	X	this isnt thread safe and is not.
11634 	X	assuming the string referred to by value is encoded as utf.
11635 	X	the latter is preferred if you want everybody to be able to run python on the.
11636 	X	theyll point you to ways to get the correct version reinstalled on your system since python doesnt cause this we cant fix it.
11637 	X	reading self x or self meth makes it absolutely clear that an instance variable or method is used even if you dont know the class definition by.
11638 	X	tuples are immutable meaning that once a tuple is created you cant replace any of its elements with a new.
11639 	X	ref function args dict index index ref a ref b ref c.
11640 	X	modified sandbox trunk faq general rst sandbox trunk faq general rst sun oct tocdepth.
11641 	X	the python copyright notice contains the following disclaimer python does very few date calculations and for those it does perform relies on the c library.
11642 	X	modules written in python py modules written in c and dynamically loaded dll pyd so sl etc modules written in c and linked with the interpreter to get a list of these type modules written in c and linked with the interpreter to get a list of these type.
11643 	X	the mod shutil module contains a func shutil copyfile.
11644 	X	it offers visual frame creation and manipulation an object inspector many views on the source like object browsers inheritance hierarchies doc string generated html documentation an advanced debugger integrated help and zope.
11645 	X	by passing a mutable changeable in place object.
11646 	X	if you arent confident doing any of these manipulations yourself ask for help.
11647 	X	david a burton has written a little program to fix.
11648 	X	in c you can sort of tell by the lack of a local variable declaration assuming globals are rare or easily recognizable but in python there are no local variable declarations so youd have to look up the class definition to be.
11649 	X	lists are mutable meaning that you can always change a lists.
11650 	X	this also has the side effect of increasing execution speed because name bindings are resolved at run time in python and the second version only needs to perform the resolution.
11651 	X	python generally represents times either as seconds since or as a year month day tuple where the year is expressed with four digits which makes yk bugs.
11652 	X	import sys print sys builtin module names.
11653 	X	note that on macos it doesnt copy the resource fork and finder.
11654 	X	eric http www die offenbachs de eric index html is an ide built on pyqt and the scintilla editing.
11655 	X	how do you make a higher order function in python.
11656 	X	with python decorators this can also be written as.
11657 	X	at this stage you may want to reboot your system to make absolutely sure the new setting has taken.
11658 	X	go to http www burtonsys com download html and click on ctldfix zip http www burtonsys com download html and click on ctldfix zip.
11659 	X	some c and java coding standards call for instance attributes to have an m prefix so this explicitness is still useful in those languages.
11660 	X	only immutable elements can be used as dictionary keys and hence only tuples and not lists can be used as.
11661 	X	if the referenced object does not have a b and c attributes of course the end result is still a run time.
11662 	X	so as long as your c library is okay python should be.
11663 	X	import sys print sys builtin module names.
11664 	X	how do i read or write binary data.
11665 	X	pydb is a version of the standard python debugger pdb modified for use with ddd data display debugger a popular graphical debugger front.
11666 	X	you have two choices you can use nested scopes or you can use callable.
11667 	X	if the data is not correctly encoded as utf the above call will raise a exc unicodeerror.
11668 	X	you probably wont need to reboot for windows nt xp or.
11669 	X	second it means that no special syntax is necessary if you want to explicitly reference or call the method from a particular.
11670 	X	lists and tuples while similar in many respects are generally used in fundamentally different.
11671 	X	why are colons required for the if while def class statements.
11672 	X	python is an interpreted interactive object oriented programming.
11673 	X	of course its possible that a particular application written in python makes assumptions about digit.
11674 	X	how do i make a python script executable on unix.
11675 	X	to read or write complex binary data formats its best to use the mod struct.
11676 	X	pydb can be found at http bashdb sourceforge net pydb and ddd can be found at http www gnu org software.
11677 	X	for example suppose you wanted to define linear ab which returns a function f x that computes the value a x b.
11678 	X	if you only want strings converted to unicode which have non ascii data you can try converting them first assuming an ascii encoding and then generate unicode objects if that fails.
11679 	X	however a far more straightforward way to get the effect of a static method is via a simple module level function.
11680 	X	you can also avoid it in earlier versions by editing the file c windows command cmdinit bat instead of autoexec bat.
11681 	X	in c if you want to use a method from a base class which is overridden in a derived class you have to use the operator in python you can write baseclass methodname self argument list.
11682 	X	tuples can be thought of as were similar to pascal records or c structs theyre small collections of related data which may be of different types which are operated on as a.
11683 	X	the colon is required primarily to enhance readability one of the results of the experimental abc language.
11684 	X	it incorporates modules exceptions dynamic typing very high level dynamic data types and.
11685 	X	because python is available free of charge there are no absolute.
11686 	X	you need to do two things the script files mode must be executable and the first line must begin with.
11687 	X	it allows you to take a string containing binary data usually numbers and convert it to python objects and vice.
11688 	X	wing ide http wingware com komodo ide http www activestate com products komodo there are a number of commercial python ides that include graphical.
11689 	X	try x unicode value ascii except unicodeerror value unicode value utf else value was valid ascii data pass.
11690 	X	you should now be able to start a new command window enter python at the c or whatever prompt and see the prompt that indicates the c or whatever prompt and see the prompt that indicates the python interpreter is reading interactive.
11691 	X	this is particularly useful for init methods and in general in cases where a derived class method wants to extend the base class method of the same name and thus has to call the base class method.
11692 	X	for example a cartesian coordinate is appropriately represented as a tuple of two or three.
11693 	X	consider this the colon is required primarily to enhance readability one of the results of the experimental abc language.
11694 	X	python combines remarkable power with very clear.
11695 	X	if there are unforeseen problems liability is the users problem rather than the developers and there is nobody you can sue for.
11696 	X	followed by the path of the python.
11697 	X	for example the following code reads two byte integers and one byte integer in big endian format from a file.
11698 	X	wing ide http wingware com komodo ide http www activestate com products komodo.
11699 	X	def linear a b def result x return a x b return result.
11700 	X	note that on windows there is an encoding known as mbcs which uses an encoding specific to your current.
11701 	X	if your code is structured so as to define one class or tightly related class hierarchy per module this supplies the desired.
11702 	X	lets suppose you have a program called pytest py in directory c steve projects python.
11703 	X	finally for instance variables it solves a syntactic problem with assignment since local variables in python are by definition those variables to which a value assigned in a function body and that arent explicitly declared global there has to be some way to tell the interpreter that an assignment was meant to assign to an instance variable instead of to a local variable and it should preferably be syntactic for efficiency reasons.
11704 	X	lists on the other hand are more like arrays in other.
11705 	X	if a b print a if a b print a.
11706 	X	it has interfaces to many system calls and libraries as well as to various window systems and is extensible in c or c.
11707 	X	the python copyright notice contains the following disclaimer.
11708 	X	you need to do two things the script files mode must be executable and the first line must begin with.
11709 	X	f open filename rb open in binary mode for portability s f read x y z struct unpack hhl s.
11710 	X	is there a tool to help find bugs or perform static analysis.
11711 	X	you have two choices you can use nested scopes or you can use callable.
11712 	X	in many cases and particularly when working with com this may be an appropriate default encoding to.
11713 	X	a session to run that program might look like c steve projects python.
11714 	X	c does this through declarations but python doesnt have declarations and it would be a pity having to introduce them just for this.
11715 	X	they tend to hold a varying number of objects all of which have the same type and which are operated on one by.
11716 	X	if a b print a if a b print a.
11717 	X	it is also usable as an extension language for applications that need a programmable.
11718 	X	psf is making python available to licensee on an as is.
11719 	X	followed by the path of the python.
11720 	X	or complex data formats its best to use the struct module http docs python org library struct.
11721 	X	pychecker is a static analysis tool that finds bugs in python source code and warns about code complexity and.
11722 	X	for example suppose you wanted to define linear ab which returns a function f x that computes the value a x b.
11723 	X	its possible to set a default encoding in a file called sitecustomize py thats part of the python.
11724 	X	however a far more straightforward way to get the effect of a static method is via a simple module level function.
11725 	X	a session to run that program might look like this.
11726 	X	using the explicit self var solves this.
11727 	X	for example os listdir returns a list of strings representing the files in the current.
11728 	X	notice how the second one is slightly easier to.
11729 	X	finally python is portable it runs on many unix variants on the mac and on pcs under ms dos windows windows nt and os.
11730 	X	psf makes no representations or warranties express or.
11731 	X	the first is done by executing chmod x scriptfile or perhaps chmod scriptfile.
11732 	X	it allows you to take a string containing binary data usually numbers and convert it to python objects and vice.
11733 	X	you can get pychecker from http pychecker sf.
11734 	X	however this isnt recommended because changing the python wide default encoding may cause third party extension modules to.
11735 	X	c steve projects python python pytest py.
11736 	X	similarly for using instance variables having to write self var means that references to unqualified names inside a method dont have to search the instances.
11737 	X	functions which operate on this output would generally not break if you added another file or two to the.
11738 	X	notice further how a colon sets off the example in this faq answer its a standard usage in.
11739 	X	to find out more start with ref tutorial index.
11740 	X	by way of example but not limitation psf makes no and disclaims any representation or warranty of merchantability or fitness for any particular purpose or that the use of python will not infringe any third party.
11741 	X	the first is done by executing chmod x scriptfile or perhaps chmod scriptfile.
11742 	X	for example the following code reads two byte integers and one byte integer in big endian format from a file.
11743 	X	pylint http www logilab org projects pylint is another tool that checks if a module satisfies a coding standard and also makes it possible to write plug ins to add a custom.
11744 	X	def linear a b def result x return a x b return result.
11745 	X	note that on windows there is an encoding known as mbcs which uses an encoding specific to your current.
11746 	X	if your code is structured so as to define one class or tightly related class hierarchy per module this supplies the desired.
11747 	X	because you added a file name to the command to start the interpreter when it starts up it reads the python script in the named file compiles it executes it and terminates so you see another c.
11748 	X	to put it another way local variables and instance variables live in two different namespaces and you need to tell python which namespace to.
11749 	X	tuples are immutable meaning that once a tuple is created you cant replace any of its elements with a new.
11750 	X	notice how the second one is slightly easier to.
11751 	X	the beginners guide to python http wiki python org moin beginnersguide links to other introductory tutorials and resources for learning.
11752 	X	psf makes no representations or warranties express or.
11753 	X	the second can be done in a number of.
11754 	X	f open filename rb open in binary mode for portability s f read x y z struct unpack hhl s.
11755 	X	in addition to the bug checking that pychecker performs pylint offers some additional features such as checking line length whether variable names are well formed according to your coding standard whether declared interfaces are fully implemented and.
11756 	X	in many cases and particularly when working with com this may be an appropriate default encoding to.
11757 	X	how can i overload constructors or methods in python.
11758 	X	the idea was borrowed from modula it turns out to be very useful for a variety of.
11759 	X	lists are mutable meaning that you can always change a lists.
11760 	X	notice further how a colon sets off the example in the second line of this faq answer its a standard usage in.
11761 	X	python is an interpreted interactive object oriented programming.
11762 	X	by way of example but not limitation psf makes no and disclaims any representation or warranty of merchantability or fitness for any particular purpose or that the use of python will not infringe any third party.
11763 	X	the most straightforward way is to write the second can be done in a number of.
11764 	X	the in the format string forces big endian data the letter h reads one short integer bytes and l reads one long integer bytes from the.
11765 	X	http www logilab org projects pylint documentation provides a full list of pylints.
11766 	X	this answer actually applies to all methods but the question usually comes up first in the context of.
11767 	X	c python steve projects python pytest py.
11768 	X	first its more obvious that you are using a method or instance attribute instead of a local.
11769 	X	only immutable elements can be used as dictionary keys and hence only tuples and not lists can be used as.
11770 	X	another minor reason is that the colon makes it easier for editors with syntax highlighting they can look for colons to decide when indentation needs to be increased instead of having to do a more elaborate parsing of the program.
11771 	X	it incorporates modules exceptions dynamic typing very high level dynamic data types and.
11772 	X	psf shall not be liable to licensee or any other users of python for any incidental special or consequential damages or loss as a result of modifying distributing or otherwise using python or any derivative thereof even if advised of the possibility.
11773 	X	the most straightforward way is to write.
11774 	X	the in the format string forces big endian data the letter h reads one short integer bytes and l reads one long integer bytes from the.
11775 	X	pychecker is a static analysis tool that finds bugs in python source code and warns about code complexity and.
11776 	X	def init self a b self a self b a b def init self a b self a self b a b.
11777 	X	how do i convert between tuples and lists.
11778 	X	this answer actually applies to all methods but the question usually comes up first in the context of.
11779 	X	if you hadnt wanted to change your current.
11780 	X	reading self x or self meth makes it absolutely clear that an instance variable or method is used even if you dont know the class definition by.
11781 	X	another minor reason is that the colon makes it easier for editors with syntax highlighting they can look for colons to decide when indentation needs to be increased instead of having to do a more elaborate parsing of the program.
11782 	X	python combines remarkable power with very clear.
11783 	X	the good news is that if you encounter a problem you have full source available to track it down and fix.
11784 	X	for data that is more regular e g a homogeneous list of ints or thefloats you can also use the mod array.
11785 	X	you can get pychecker from http pychecker sf.
11786 	X	def call self x return self a x self b def call self x return self a x self b.
11787 	X	the function tuple seq converts any sequence actually any the type constructor tuple seq converts any sequence actually any iterable into a tuple with the same items in the same.
11788 	X	under nt and xp you may well find that the installation process has also arranged that the command pytest py or if the file isnt in the current directory c steve projects python pytest py will automatically recognize the py extension and run the python interpreter on the named.
11789 	X	in c you can sort of tell by the lack of a local variable declaration assuming globals are rare or easily recognizable but in python there are no local variable declarations so youd have to look up the class definition to be.
11790 	X	pythons lists are really variable length arrays not lisp style linked.
11791 	X	why does python allow commas at the end of lists and tuples.
11792 	X	it has interfaces to many system calls and libraries as well as to various window systems and is extensible in c or c.
11793 	X	this is one advantage of an open source programming.
11794 	X	as the very first line of your file using the pathname for where the python interpreter is installed on your.
11795 	X	for data that is more regular e g a homogeneous list of ints or thefloats you can also use the array module http docs python org library array.
11796 	X	pylint http www logilab org projects pylint is another tool that checks if a module satisfies a coding standard and also makes it possible to write plug ins to add a custom.
11797 	X	using this feature is fine but some versions of windows have bugs which mean that this form isnt exactly equivalent to using the interpreter explicitly so be.
11798 	X	some c and java coding standards call for instance attributes to have an m prefix so this explicitness is still useful in those languages.
11799 	X	the implementation uses a contiguous array of references to other objects and keeps a pointer to this array and the arrays length in a list head.
11800 	X	python lets you add a trailing comma at the end of lists tuples and python lets you add a trailing comma at the end of lists tuples and dictionaries.
11801 	X	it is also usable as an extension language for applications that need a programmable.
11802 	X	the good news is that if you encounter a problem you have full source available to track it down and fix.
11803 	X	as the very first line of your file using the pathname for where the python interpreter is installed on your.
11804 	X	i cant seem to use os read on a pipe created with os popen why.
11805 	X	in addition to the bug checking that pychecker performs pylint offers some additional features such as checking line length whether variable names are well formed according to your coding standard whether declared interfaces are fully implemented and.
11806 	X	if the argument is a tuple it does not make a copy but returns the same object so it is cheap to call tuple when you arent sure that an object is already a.
11807 	X	class c c cout no arguments n c int i cout argument is i n.
11808 	X	directory c steve projects python pytest py will automatically recognize the py extension and run the python interpreter on the named.
11809 	X	second it means that no special syntax is necessary if you want to explicitly reference or call the method from a particular.
11810 	X	pythons lists are really variable length arrays not lisp style linked.
11811 	X	there are several reasons to allow.
11812 	X	finally python is portable it runs on many unix variants on the mac and on pcs under ms dos windows windows nt and os.
11813 	X	this is one advantage of an open source programming.
11814 	X	if you would like the script to be independent of where the python interpreter lives you can use the env.
11815 	X	func os read is a low level function which takes a file descriptor a small integer representing the opened.
11816 	X	http www logilab org projects pylint documentation provides a full list of pylints.
11817 	X	gives a callable object where taxes e e.
11818 	X	the function list seq converts any sequence or iterable into a list with the same items in the same.
11819 	X	in python you have to write a single constructor that catches all cases using default.
11820 	X	using this feature is fine but some versions of windows have bugs which mean that this form isnt exactly equivalent to using the interpreter explicitly so be.
11821 	X	in c if you want to use a method from a base class which is overridden in a derived class you have to use the operator in python you can write baseclass methodname self argument list.
11822 	X	the implementation uses a contiguous array of references to other objects and keeps a pointer to this array and the arrays length in a list head.
11823 	X	when you have a literal value for a list tuple or dictionary spread across multiple lines its easier to add more elements because you dont have to remember to add a comma to the previous.
11824 	X	to find out more start with ref tutorial index.
11825 	X	is python a good language for beginning programmers.
11826 	X	almost all unix variants support the following assuming the python interpreter is in a directory on the users path.
11827 	X	func os popen creates a high level file object the same type returned by the builtin func open.
11828 	X	how can i create a stand alone binary from a python script.
11829 	X	the callable object approach has the disadvantage that it is a bit slower and results in slightly longer.
11830 	X	for example in python you have to write a single constructor that catches all cases using default.
11831 	X	the important things to remember are.
11832 	X	this is particularly useful for meth init methods and in general in cases where a derived class method wants to extend the base class method of the same name and thus has to call the base class method.
11833 	X	this makes indexing a list a i an operation whose cost is independent of the size of the list or the value of the.
11834 	X	the lines can also be sorted in your editor without creating a syntax.
11835 	X	the beginners guide to python http wiki python org moin beginnersguide links to other introductory tutorials and resources for learning.
11836 	X	it is still common to start students with a procedural and statically typed language such as pascal c or a subset of c or.
11837 	X	thus to read n bytes from a pipe p created with func os popen you need to use p read n.
11838 	X	you dont need the ability to compile python to c code if all you want is a stand alone program that users can download and run without having to install the python distribution.
11839 	X	however note that a collection of callables can share their signature via inheritance.
11840 	X	if the argument is a list it makes a copy just like seq.
11841 	X	class c def init self i none if i is none print no arguments else print argument is i class c def init self i none if i is none print no arguments else print argument is i.
11842 	X	start python from the start menu or make sure the path is set correctly so windows can find the python.
11843 	X	finally for instance variables it solves a syntactic problem with assignment since local variables in python are by definition those variables to which a value assigned in a function body and that arent explicitly declared global there has to be some way to tell the interpreter that an assignment was meant to assign to an instance variable instead of to a local variable and it should preferably be syntactic for efficiency reasons.
11844 	X	when items are appended or inserted the array of references is.
11845 	X	when you have a literal value for a list tuple or dictionary spread across multiple lines its easier to add more elements because you dont have to remember to add a comma to the previous.
11846 	X	what is the python software foundation.
11847 	X	students may be better served by learning python as their first.
11848 	X	os read is a low level function which takes a file descriptor a small integer representing the opened.
11849 	X	there are a number of tools that determine the set of modules required by a program and bind these modules together with a python binary to produce a single.
11850 	X	class exponential linear init inherited def call self x return self a x self b the callable object approach has the disadvantage that it is a bit slower and results in slightly longer.
11851 	X	this is not entirely equivalent but close enough in.
11852 	X	should give you a prompt from the python.
11853 	X	c does this through declarations but python doesnt have declarations and it would be a pity having to introduce them just for this.
11854 	X	some cleverness is applied to improve the performance of appending items repeatedly when the array must be grown some extra space is allocated so the next few times dont require an actual.
11855 	X	the lines can also be sorted in your editor without creating a syntax.
11856 	X	the python software foundation is an independent non profit organization that holds the copyright on python versions and.
11857 	X	python has a very simple and consistent syntax and a large standard library and most importantly using python in a beginning programming course lets students concentrate on important programming skills such as problem decomposition and data type.
11858 	X	the path variable for cgi scripts is often very minimal so you need to use the actual absolute pathname of the.
11859 	X	os popen creates a high level file object the same type returned by the builtin open.
11860 	X	one is to use the freeze tool which is included in the python source tree as tools freeze.
11861 	X	however note that a collection of callables can share their signature via inheritance.
11862 	X	python sequences are indexed with positive numbers and negative.
11863 	X	you could also try a variable length argument list e g.
11864 	X	dont forget the ctrl z and enter to terminate the interpreter and if you started the window from the start menu make the window disappear.
11865 	X	using the explicit self var solves this.
11866 	X	when items are appended or inserted the array of references is.
11867 	X	accidentally omitting the comma can lead to errors that are hard to.
11868 	X	the psfs mission is to advance open source technology related to the python programming language and to publicize the use of.
11869 	X	with python students can be quickly introduced to basic concepts such as loops and.
11870 	X	occasionally a users environment is so full that the usr bin env program fails or theres no env program at.
11871 	X	thus to read n bytes from a pipe p created with os popen you need to use p read n.
11872 	X	it converts python byte code to c arrays a c compiler you can embed all your modules into a new program which is then linked with the standard python.
11873 	X	class exponential linear init inherited def call self x return self a x self b.
11874 	X	for positive numbers is the first index is the second index and so.
11875 	X	def init self args def init self args.
11876 	X	should give you a prompt from the python.
11877 	X	similarly for using instance variables having to write self var means that references to unqualified names inside a method dont have to search the instances.
11878 	X	some cleverness is applied to improve the performance of appending items repeatedly when the array must be grown some extra space is allocated so the next few times dont require an actual.
11879 	X	for example accidentally omitting the comma can lead to errors that are hard to.
11880 	X	the psfs home page is at http www python org psf.
11881 	X	they can probably even work with user defined objects in their very first.
11882 	X	in that case you can try the following hack due to alex rezinsky.
11883 	X	how do i run a subprocess with pipes connected to both input and output.
11884 	X	it works by scanning your source recursively for import statements in both forms and looking for the modules in the standard python path as well as in the source directory for built in modules.
11885 	X	object can encapsulate state for several methods.
11886 	X	for negative indices is the last index and is the penultimate next to last index and so.
11887 	X	the same approach works for all method.
11888 	X	dont forget the ctrl z and enter to terminate the interpreter and if you started the window from the start menu make the window disappear.
11889 	X	to put it another way local variables and instance variables live in two different namespaces and you need to tell python which namespace to.
11890 	X	the python software foundation is an independent non profit organization that holds the copyright on python versions and.
11891 	X	for a student who has never programmed before using a statically typed language seems.
11892 	X	bin sh exec python if you would like the script to be independent of where the python interpreter lives you can use the env.
11893 	X	use the popen module http docs python org library popen.
11894 	X	it then turns the bytecode for modules written in python into c code array initializers that can be turned into code objects using the marshal module and creates a custom made config file that only contains those built in modules which are actually used in the.
11895 	X	think of seq n as the same as seq len seq n.
11896 	X	i try to use spam and i get an error about someclassname.
11897 	X	once this works you run programs with commands.
11898 	X	why cant i use an assignment in an expression.
11899 	X	pythons dictionaries are implemented as resizable hash.
11900 	X	this list looks like it has four elements but it actually contains three fee fiefoo and fum.
11901 	X	the psfs mission is to advance open source technology related to the python programming language and to publicize the use of.
11902 	X	it presents additional complexity that the student must master and slows the pace of the.
11903 	X	almost all unix variants support the following assuming the python interpreter is in a directory on the users path.
11904 	X	import popen fromchild tochild popen popen command tochild write input n tochild flush output fromchild readline.
11905 	X	it then compiles the generated c code and links it with the rest of the python interpreter to form a self contained binary which acts exactly like your.
11906 	X	using negative indices can be very.
11907 	X	variables with double leading underscore are mangled to provide a simple but effective way to define class private.
11908 	X	python program file python program file.
11909 	X	many people used to c or perl complain that they want to use this c idiom many people used to c or perl complain that they want to use this c idiom.
11910 	X	compared to b trees this gives better performance for lookup the most common operation by far under most circumstances and the implementation is.
11911 	X	always adding the comma avoids this source of.
11912 	X	the psfs home page is at http www python org psf.
11913 	X	the students are trying to learn to think like a computer decompose problems design consistent interfaces and encapsulate.
11914 	X	warning in general it is unwise to do this because you can easily cause a deadlock where your process is blocked waiting for output from the child while the child is blocked waiting for input from.
11915 	X	you dont need the ability to compile python to c code if all you want is a stand alone program that users can download and run without having to install the python distribution.
11916 	X	def set self x self value x def set self x self value x.
11917 	X	for example s is all of the string except for its last character which is useful for removing the trailing newline from a.
11918 	X	any identifier of the form spam at least two leading underscores at most one trailing underscore is textually replaced with classname spam where classname is the current class name with any leading underscores.
11919 	X	when you know the commands to use you can build windows shortcuts to run the python interpreter on any of your scripts naming particular working.
11920 	X	while line readline f do something with code block c.
11921 	X	dictionaries work by computing a hash code for each key stored in the dictionary using the hash built in.
11922 	X	this list looks like it has four elements but it actually contains three fee fiefoo and fum.
11923 	X	donations to the psf are tax exempt in the.
11924 	X	while learning to use a statically typed language is important in the long term it is not necessarily the best topic to address in the students first programming.
11925 	X	this can be caused because the parent expects the child to output more text than it does or it can be caused by data were stuck in stdio buffers due to lack of.
11926 	X	there are a number of tools that determine the set of modules required by a program and bind these modules together with a python binary to produce a single.
11927 	X	def up self self value self value def up self self value self value.
11928 	X	this doesnt guarantee privacy an outside user can still deliberately access the classname spam attribute and private values are visible in the objects dict.
11929 	X	when you know the commands to use you can build windows shortcuts to run the python interpreter on any of your scripts naming particular working directories and adding them to your.
11930 	X	while line readline f do something with line.
11931 	X	the hash code varies widely depending on the key for example python hashes to while python a string that differs by a single bit hashes to.
11932 	X	always adding the comma avoids this source of.
11933 	X	if you use python and find it helpful please contribute via the psf donation page donations to the psf are tax exempt in the.
11934 	X	many other aspects of python make it a good first.
11935 	X	the path variable for cgi scripts is often very minimal so you need to use the actual absolute pathname of the.
11936 	X	the python parent can of course explicitly flush the data it sends to the child before it reads any output but if the child is a naive c program it may have been written to never explicitly flush its output even if it is interactive since flushing is normally.
11937 	X	one is to use the freeze tool which is included in the python source tree as tools freeze.
11938 	X	def down self self value self value def down self self value self value.
11939 	X	if the argument is a tuple it does not make a copy but returns the same object so it is cheap to call func tuple when you arent sure that an object is already a.
11940 	X	many python programmers never bother to use private variable names at.
11941 	X	where in python youre forced to write this.
11942 	X	the hash code is then used to calculate a location in an internal array where the value will be.
11943 	X	allowing the trailing comma may also make programmatic code generation.
11944 	X	if you use python and find it helpful please contribute via the psf donation page http www python org psf donations.
11945 	X	like java python has a large standard library so that students can be assigned programming projects very early in the course that do.
11946 	X	occasionally a users environment is so full that the usr bin env program fails or theres no env program at.
11947 	X	note that a deadlock is also possible if you use popen to read stdout and.
11948 	X	it converts python byte code to c arrays a c compiler you can embed all your modules into a new program which is then linked with the standard python.
11949 	X	count counter inc dec reset count up count down count set count counter inc dec reset count up count down count set.
11950 	X	the type constructor list seq converts any sequence or iterable into a list with the same items in the same.
11951 	X	variable names with double leading underscores are mangled to provide a simple but effective way to define class private.
11952 	X	while true line f readline if not line break do something with.
11953 	X	assuming that youre storing keys that all have different hash values this means that dictionaries take constant time o in computer science notation to retrieve a.
11954 	X	allowing the trailing comma may also make programmatic code generation.
11955 	X	are there copyright restrictions on the use of python.
11956 	X	assignments arent restricted to the standard four function calculator and check balancing.
11957 	X	in that case you can try the following hack due to alex rezinsky.
11958 	X	if one of the two is too large for the internal buffer increasing the buffer size does not help and you read the other one first there is a deadlock.
11959 	X	it works by scanning your source recursively for import statements in both forms and looking for the modules in the standard python path as well as in the source directory for built in modules.
11960 	X	here inc dec and reset act like functions which share the same counting.
11961 	X	any identifier of the form spam at least two leading underscores at most one trailing underscore is textually replaced with classname spam where classname is the current class name with any leading underscores.
11962 	X	the reason for not allowing assignment in python expressions is a common hard to find bug in those other languages caused by this construct while true line f readline if not line break do something with line.
11963 	X	it also means that no sorted order of the keys is maintained and traversing the array as the keys and items do will output the dictionarys content in some arbitrary jumbled.
11964 	X	modified sandbox trunk faq extending rst sandbox trunk faq extending rst sun oct extending embedding faq.
11965 	X	you can do anything you want with the source as long as you leave the copyrights in and display those copyrights in any documentation about python that you.
11966 	X	by using the standard library students can gain the satisfaction of working on realistic applications as they learn the fundamentals of.
11967 	X	note on a bug in popen unless your program calls wait or waitpid finished child processes are never removed and eventually calls to popen will fail because of a limit on the number of child.
11968 	X	it then turns the bytecode for modules written in python into c code array initializers that can be turned into code objects using the marshal module and creates a custom made config file that only contains those built in modules which are actually used in the.
11969 	X	how do i copy an object in python.
11970 	X	if the argument is a list it makes a copy just like seq.
11971 	X	this doesnt guarantee privacy an outside user can still deliberately access the classname spam attribute and private values are visible in the objects dict.
11972 	X	interactive mode where you see the prompt is best used for checking that individual statements and expressions do what you think they will and for developing code by.
11973 	X	the reason for not allowing assignment in python expressions is a common hard to find bug in those other languages caused by this construct.
11974 	X	pythons dictionaries are implemented as resizable hash.
11975 	X	if you honor the copyright rules its ok to use python for commercial use to sell copies of python in source or binary form modified or unmodified or to sell products that incorporate python in some.
11976 	X	using the standard library also teaches students about code.
11977 	X	the minor disadvantage is that this defines the scripts doc.
11978 	X	calling os waitpid with the os wnohang option can prevent this a good place to insert such a call would be before calling popen.
11979 	X	it then compiles the generated c code and links it with the rest of the python interpreter to form a self contained binary which acts exactly like your.
11980 	X	in general try copy copy or copy deepcopy for the general.
11981 	X	many python programmers never bother to use private variable names at.
11982 	X	interactive mode where you see the prompt is best used for checking that individual statements and expressions do what you think they will and for developing code by.
11983 	X	compared to b trees this gives better performance for lookup the most common operation by far under most circumstances and the implementation is.
11984 	X	can i create my own functions in c yes you can create built in modules containing functions variables exceptions and even new types in c.
11985 	X	we would still like to know about all commercial use of python of.
11986 	X	third party modules such as pygame are also helpful in extending the students.
11987 	X	however you can fix that by adding.
11988 	X	in many cases all you really need is to run some data through a command and get the result.
11989 	X	not all objects can be copied but most.
11990 	X	python sequences are indexed with positive numbers and negative.
11991 	X	my class defines del but it is not called when i delete the.
11992 	X	how do i make python scripts executable.
11993 	X	if x error error handling else code that only works for nonzero code that only works for nonzero x.
11994 	X	dictionaries work by computing a hash code for each key stored in the dictionary using the func hash built in.
11995 	X	this is explained in the document extending and embedding the python interpreter http docs python org ext ext html.
11996 	X	see the psf license page psf license to find further explanations and a link to the full text of the.
11997 	X	pythons interactive interpreter enables students to test language features while theyre.
11998 	X	unless the amount of data is very large the easiest way to do this is to write it to a temporary file and run the command with that temporary file as.
11999 	X	there are several other utilities which.
12000 	X	in general try func copy copy or func copy deepcopy for the general.
12001 	X	for positive numbers is the first index is the second index and so.
12002 	X	there are several possible reasons for.
12003 	X	on windows the standard python installer already associates the py extension with a file type python file and gives that file type an open command that runs the interpreter d program files python python exe.
12004 	X	the error is a simple typo x which assigns to the variable x the error is a simple typo x which assigns to the variable x was written while the comparison x is certainly what was.
12005 	X	the hash code varies widely depending on the key for example python hashes to while python a string that differs by a single bit hashes to.
12006 	X	yes you can create built in modules containing functions variables exceptions and even new types in c.
12007 	X	the python logo is trademarked and in certain cases permission is required to use.
12008 	X	they can keep a window with the interpreter running while they enter their programs source in another.
12009 	X	is there a curses termcap package for python.
12010 	X	the standard module tempfile http docs python org library tempfile exports a mktemp function to generate unique temporary file.
12011 	X	one is thomas hellers pyexe windows only at obviously freeze requires a c.
12012 	X	not all objects can be copied but most.
12013 	X	for negative indices is the last index and is the penultimate next to last index and so.
12014 	X	the del statement does not necessarily call del it simply the del statement does not necessarily call meth del it simply decrements the objects reference count and if this reaches zero del is.
12015 	X	this is enough to make scripts executable from the command prompt as foo.
12016 	X	the hash code is then used to calculate a location in an internal array where the value will be.
12017 	X	this is explained in the document extending and embedding the python interpreter http docs python org ext ext html.
12018 	X	consult the trademark usage policy http www python org psf trademarks for more.
12019 	X	if they cant remember the methods for a list they can do something like this.
12020 	X	for unix variants the standard python source distribution comes with a curses module in the modules subdirectory though its not compiled by default note that this is not available in the windows distribution there is no curses module for windows.
12021 	X	import tempfile import os class popen this is a deadlock safe version of popen that returns an object with errorlevel out a string and err a string.
12022 	X	there are several other utilities which.
12023 	X	some objects can be copied more.
12024 	X	think of seq n as the same as seq len seq n.
12025 	X	if youd rather be able to execute the script by simple typing foo with no extension you need to add py to the pathext environment.
12026 	X	most are hacks that save some typing but use arbitrary or cryptic syntax or keywords and fail the simple criterion for language change proposals it should intuitively suggest the proper meaning to a human reader who has not yet been introduced to the.
12027 	X	assuming that youre storing keys that all have different hash values this means that dictionaries take constant time o in computer science notation to retrieve a.
12028 	X	most intermediate or advanced python books will also cover this.
12029 	X	you can do anything you want with the source as long as you leave the copyrights in and display those copyrights in any documentation about python that you.
12030 	X	l dir l append count extend index insert pop remove reverse sort help l append help on built in function append.
12031 	X	the curses module supports basic curses features as well as many additional functions from ncurses and sysv curses such as colour alternative character set support pads and mouse.
12032 	X	one is thomas hellers pyexe windows only at.
12033 	X	some objects can be copied more.
12034 	X	using negative indices can be very.
12035 	X	if your data structures contain circular links e g a tree where each child has a parent reference and each parent has a list of children the reference counts will never go back to.
12036 	X	on windows nt the steps taken by the installer as described above allow you to run a script with foo py but a longtime bug in the nt command processor prevents you from redirecting the input or output of any script executed in this.
12037 	X	an interesting phenomenon is that most experienced python programmers recognize the while true idiom and dont seem to be missing the assignment in expression construct much its only newcomers who express a strong desire to add this to the.
12038 	X	it also means that no sorted order of the keys is maintained and traversing the array as the keys and items do will output the dictionarys content in some arbitrary jumbled.
12039 	X	most intermediate or advanced python books will also cover this.
12040 	X	if you honor the copyright rules its ok to use python for commercial use to sell copies of python in source or binary form modified or unmodified or to sell products that incorporate python in some.
12041 	X	append l append object append object to end l.
12042 	X	this means the module isnt compatible with operating systems that only have bsd curses but there dont seem to be any currently maintained oses that fall into this.
12043 	X	example print popen grep spam n nhere spam n n out def init selfcommandinput nonecapturestderr none outfile tempfile mktemp command s s commandoutfile if input infile tempfile mktemp open infile w write input command command infile if capturestderr errfile tempfile mktemp command command errfile self errorlevel os system command self out open outfile r read os remove outfile if input os remove infile if capturestderr self err open errfile r read os remove errfile.
12044 	X	dictionaries have a meth dict copy method.
12045 	X	for example s is all of the string except for its last character which is useful for removing the trailing newline from a.
12046 	X	once in a while python runs an algorithm to detect such cycles but the garbage collector might run some time after the last reference to your data structure vanishes so your del method may be called at an inconvenient and random.
12047 	X	theres an alternative way of spelling this that seems attractive but is generally less robust than the while true solution.
12048 	X	why must dictionary keys be immutable.
12049 	X	can i create my own functions in c yes using the c compatibility features found in c.
12050 	X	we would still like to know about all commercial use of python of.
12051 	X	with the interpreter documentation is never far from the student as hes.
12052 	X	xxx curses is built by default isnt it.
12053 	X	note that many interactive programs e g vi dont work well with pipes substituted for standard input and.
12054 	X	another is christian tismers sqfreeze http starship python net crew pirx which appends the byte code to a specially prepared python interpreter that can find the byte code in the.
12055 	X	how do i iterate over a sequence in reverse order.
12056 	X	this is inconvenient if youre trying to reproduce a.
12057 	X	command that runs the interpreter d program files python python exe.
12058 	X	line f readline while line do something with line f readline.
12059 	X	the hash table implementation of dictionaries uses a hash value calculated from the key value to find the.
12060 	X	place extern c around the python include files and put extern c before each function that is going to be called by the python.
12061 	X	see the psf license page psf license to find further explanations and a link to the full text of the.
12062 	X	there are also good ides for.
12063 	X	for windows use the consolelib module http effbot org zone console index htm.
12064 	X	you will have to use pseudo ttys ptys instead of.
12065 	X	another is christian tismers sqfreeze http starship python net crew pirx which appends the byte code to a specially prepared python interpreter that can find the byte code in the.
12066 	X	how can i find the methods or attributes of an object.
12067 	X	use the reversed builtin function which is new in python use the func reversed builtin function which is new in python.
12068 	X	worse the order in which objects del methods are executed is.
12069 	X	this is enough to make scripts executable from the command prompt as foo.
12070 	X	the problem with this is that if you change your mind about exactly how you get the next line e g you want to change it into sys stdin readline you have to remember to change two places in your program the second occurrence is hidden at the bottom of the.
12071 	X	if the key were a mutable object its value could change and thus its hash could also.
12072 	X	global or static c objects with constructors are probably not a good.
12073 	X	the python logo is trademarked and in certain cases permission is required to use.
12074 	X	idle is a cross platform ide for python that is written in python using.
12075 	X	for unix variants the standard python source distribution comes with a curses module in the modules subdirectory though its not compiled by default note that this is not available in the windows distribution there is no curses module for windows.
12076 	X	or you can use a python interface to don libes expect.
12077 	X	other tools include fredrik lundhs squeeze http www pythonware com products python squeeze and anthony tuiningas cx freeze http starship python net crew atuining cx freeze index html.
12078 	X	for an instance x of a user defined class dir x returns an alphabetized list of the names containing the instance attributes and methods and attributes defined by its.
12079 	X	this wont touch your original sequence but build a new copy with reversed order to iterate.
12080 	X	you can run gc collect to force a collection but there are pathological cases where objects will never be.
12081 	X	if youd rather be able to execute the script by simple typing foo with no extension you need to add py to the pathext environment.
12082 	X	the best approach is to use iterators making it possible to loop through objects using the for.
12083 	X	but since whoever changes the key object cant tell that it was were used as a dictionary key it cant move the entry around in the.
12084 	X	yes using the c compatibility features found in c.
12085 	X	consult the trademark usage policy http www python org psf trademarks for more.
12086 	X	the curses module supports basic curses features as well as many additional functions from ncurses and sysv curses such as colour alternative character set support pads and mouse.
12087 	X	a python extension that interfaces to expect is called expy and available from http expectpy sourceforge.
12088 	X	http www pythonware com products python squeeze and anthony tuiningas cx freeze http starship python net crew atuining cx freeze index html.
12089 	X	for an instance x of a user defined class dir x returns an alphabetized list of the names containing the instance attributes and methods and attributes defined by its.
12090 	X	this wont touch your original sequence but build a new copy with reversed order to iterate.
12091 	X	despite the cycle collector its still a good idea to define an explicit close method on objects to be called whenever youre done with.
12092 	X	on windows nt the steps taken by the installer as described above allow you to run a script with foo py but a longtime bug in the nt command processor prevents you from redirecting the input or output of any script executed in this.
12093 	X	for example in the current version of python file objects support the iterator protocol so you can now write simply many alternatives have been.
12094 	X	then when you try to look up the same object in the dictionary it wont be found because its hash value is.
12095 	X	place extern c around the python include files and put extern c before each function that is going to be called by the python.
12096 	X	why was python created in the first place.
12097 	X	emacs users will be happy to know that there is a very good python mode for.
12098 	X	this means the module isnt compatible with operating systems that only have bsd curses but there dont seem to be any currently maintained oses that fall into this.
12099 	X	a pure python solution that works like expect is pexpect http pexpect sourceforge net.
12100 	X	are there coding standards or a style guide for python programs.
12101 	X	how can my code discover the name of an object.
12102 	X	with python you can use an extended slice syntax.
12103 	X	the close method can then remove attributes that refer to.
12104 	X	most are hacks that save some typing but use arbitrary or cryptic syntax or keywords and fail the simple criterion for language change proposals it should intuitively suggest the proper meaning to a human reader who has not yet been introduced to the.
12105 	X	if you tried to look up the old value it wouldnt be found either because the value of the object found in that hash bin would be.
12106 	X	global or static c objects with constructors are probably not a good.
12107 	X	heres a very brief summary of what started it all written by guido van rossum.
12108 	X	all of these programming environments provide syntax highlighting auto indenting and access to the interactive interpreter while.
12109 	X	for windows use the consolelib module http effbot org zone console index htm.
12110 	X	the coding style required for standard library modules is documented as pep dev peps pep.
12111 	X	generally speaking it cant because objects dont really have.
12112 	X	how do you remove duplicates from a list.
12113 	X	dont call del directly del should call close and close should make sure that it can be called more than once for the same.
12114 	X	the incantation for making a python script executable under winnt is to give the file an extension of cmd and add the following as the first line the incantation for making a python script executable under winnt is to give the file an extension of cmd and add the following as the first line.
12115 	X	an interesting phenomenon is that most experienced python programmers recognize the while true idiom and dont seem to be missing the assignment in expression construct much its only newcomers who express a strong desire to add this to the.
12116 	X	if you want a dictionary indexed with a list simply convert the list to a tuple first the function tuple l creates a tuple with the same entries as the list l.
12117 	X	writing c is hard are there any alternatives.
12118 	X	i had extensive experience with implementing an interpreted language in the abc group at cwi and from working with this group i had learned a lot about language.
12119 	X	consult http www python org editors for a full list of python editing.
12120 	X	is there an equivalent to cs onexit in python.
12121 	X	the coding style required for standard library modules is documented as pep.
12122 	X	essentially assignment always binds a name to a value the same is true of def and class statements but in that case the value is a.
12123 	X	see the python cookbook for a long discussion of many ways to do this.
12124 	X	another way to avoid cyclical references is to use the weakref module which allows you to point to objects without incrementing their reference.
12125 	X	setlocal enableextensions python x f goto eof setlocal enableextensions python x f goto eof.
12126 	X	theres an alternative way of spelling this that seems attractive but is generally less robust than the while true solution.
12127 	X	tuples are immutable and can therefore be used as dictionary.
12128 	X	there are a number of alternatives to writing your own c extensions depending on what youre trying to.
12129 	X	this is the origin of many python features including the use of indentation for statement grouping and the inclusion of very high level data types although the details are all different in python.
12130 	X	it is still common to start students with a procedural and statically typed language such as pascal c or a subset of c or.
12131 	X	the atexit module http docs python org library atexit provides a register function that is similar to cs.
12132 	X	import popen fromchild tochild popen popen command tochild write input n tochild flush output fromchild readline.
12133 	X	http aspn activestate com aspn cookbook python recipe.
12134 	X	tree data structures for instance should use weak references for their parent and sibling references if they need them.
12135 	X	why does python sometimes take so long to start.
12136 	X	line f readline while line do something with line line f readline.
12137 	X	the hash table implementation of dictionaries uses a hash value calculated from the key value to find the.
12138 	X	there are a number of alternatives to writing your own c extensions depending on what youre trying to.
12139 	X	i had a number of gripes about the abc language but also liked many of its.
12140 	X	students may be better served by learning python as their first.
12141 	X	why dont my signal handlers work.
12142 	X	warning in general it is unwise to do this because you can easily cause a deadlock where your process is blocked waiting for output from the child while the child is blocked waiting for input from.
12143 	X	how do i speed it up.
12144 	X	if you dont mind reordering the list sort it and then scan from the end of the list deleting duplicates as you go if you dont mind reordering the list sort it and then scan from the end of the list deleting duplicates as you go.
12145 	X	if the object has ever been a local variable in a function that caught an expression in an except clause chances are that a reference to the object still exists in that functions stack frame as contained in the stack.
12146 	X	usually python starts very quickly on windows but occasionally there are bug reports that python suddenly begins to take a long time to start.
12147 	X	the problem with this is that if you change your mind about exactly how you get the next line e g you want to change it into sys stdin readline you have to remember to change two places in your program the second occurrence is hidden at the bottom of the.
12148 	X	if the key were a mutable object its value could change and thus its hash could also.
12149 	X	xxx make sure these all work mention cython.
12150 	X	it was impossible to extend the abc language or its implementation to remedy my complaints in fact its lack of extensibility was one of its biggest.
12151 	X	python has a very simple and consistent syntax and a large standard library and most importantly using python in a beginning programming course lets students concentrate on important programming skills such as problem decomposition and data type.
12152 	X	the most common problem is that the signal handler is declared with the wrong argument.
12153 	X	this can be caused because the parent expects the child to output more text than it does or it can be caused by data were stuck in stdio buffers due to lack of.
12154 	X	a b b a print b print a.
12155 	X	if list list sort last list for i in range len list if last list i del list i else last list i.
12156 	X	normally calling sys exc clear will take care of this by clearing the last recorded.
12157 	X	this is the problem may be caused by a misconfiguration of virus checking software on the problem.
12158 	X	the best approach is to use iterators making it possible to loop through objects using the for.
12159 	X	but since whoever changes the key object cant tell that it was were used as a dictionary key it cant move the entry around in the.
12160 	X	if you need more speed psyco http psyco sourceforge net generates x assembly code from python.
12161 	X	i had some experience with using modula and talked with the designers of modula and read the modula.
12162 	X	with python students can be quickly introduced to basic concepts such as loops and.
12163 	X	it is called as is there an equivalent to cs onexit in python.
12164 	X	the python parent can of course explicitly flush the data it sends to the child before it reads any output but if the child is a naive c program it may have been written to never explicitly flush its output even if it is interactive since flushing is normally.
12165 	X	there are many tricks to speed up python code consider rewriting parts in c as a last.
12166 	X	arguably the class has a name even though it is bound to two names and invoked through the name b the created instance is still reported as an instance of class a however it is impossible to say whether the instances name is a or b since both names are bound to the same.
12167 	X	if all elements of the list may be used as dictionary keys i e they are all hashable this is often faster if list list sort last list for i in range len list if last list i del list i else last list i.
12168 	X	if your data structures contain circular links e g a tree where each child has a parent reference and each parent has a list of children the reference counts will never go back to.
12169 	X	some virus scanners have been known to introduce startup overhead of two orders of magnitude when the scanner is configured to monitor all reads from the.
12170 	X	for example in the current version of python file objects support the iterator protocol so you can now write simply.
12171 	X	then when you try to look up the same object in the dictionary it wont be found because its hash value is.
12172 	X	you can use psyco to compile the most time critical functions in your code and gain a significant improvement with very little effort as long as youre running on a machine with an x compatible.
12173 	X	modula is the origin of the syntax and semantics used for exceptions and some other python.
12174 	X	they can probably even work with user defined objects in their very first.
12175 	X	handler signum frame the mod atexit module provides a register function that is similar to cs.
12176 	X	note that a deadlock is also possible if you use func popen to read stdout and.
12177 	X	generally speaking it should not be necessary for your code to know the names of particular.
12178 	X	if all elements of the list may be used as dictionary keys i e they are all hashable this is often faster.
12179 	X	once in a while python runs an algorithm to detect such cycles but the garbage collector might run some time after the last reference to your data structure vanishes so your meth del method may be called at an inconvenient and random.
12180 	X	try checking the configuration of virus scanning software on your systems to ensure that they are indeed configured.
12181 	X	why does python use methods for some functionality e g list index but functions for other e g len list.
12182 	X	if you tried to look up the old value it wouldnt be found either because the value of the object found in that hash bin would be.
12183 	X	pyrex http www cosc canterbury ac nz greg python pyrex is a compiler that accepts a slightly modified form of python and generates the corresponding c.
12184 	X	i was working in the amoeba distributed operating system group at.
12185 	X	for a student who has never programmed before using a statically typed language seems.
12186 	X	so it should be declared with two arguments.
12187 	X	if one of the two is too large for the internal buffer increasing the buffer size does not help and you read the other one first there is a deadlock.
12188 	X	there are many tricks to speed up python code consider rewriting parts in c as a last.
12189 	X	unless you are deliberately writing introspective programs this is usually an indication that a change of approach might be.
12190 	X	this is inconvenient if youre trying to reproduce a.
12191 	X	mcafee when configured to scan all file system read activity is a particular.
12192 	X	if you want a dictionary indexed with a list simply convert the list to a tuple first the function tuple l creates a tuple with the same entries as the list l.
12193 	X	pyrex makes it possible to write an extension without having to learn pythons c.
12194 	X	we needed a better way to do system administration than by writing either c programs or bourne shell scripts since amoeba had its own system call interface which wasnt easily accessible from the bourne.
12195 	X	it presents additional complexity that the student must master and slows the pace of the.
12196 	X	def handler signum frame why dont my signal handlers work.
12197 	X	note on a bug in popen unless your program calls wait or waitpid finished child processes are never removed and eventually calls to popen will fail because of a limit on the number of child.
12198 	X	in some cases its possible to automatically translate python to c or x assembly language meaning that you dont have to modify your code to gain increased.
12199 	X	in comp lang python fredrik lundh once gave an excellent analogy in answer to this question.
12200 	X	in python and later the following is possible instead.
12201 	X	worse the order in which objects meth del methods are executed is.
12202 	X	functions were used for those operations that were generic for a group of types and which were intended to work even for objects that didnt have methods at all e g tuples.
12203 	X	tuples are immutable and can therefore be used as dictionary.
12204 	X	if you need to interface to some c or c library for which no python extension currently exists you can try wrapping the librarys data types and functions with a tool such as swig http www swig org.
12205 	X	my experience with error handling in amoeba made me acutely aware of the importance of exceptions as a programming language.
12206 	X	the students are trying to learn to think like a computer decompose problems design consistent interfaces and encapsulate.
12207 	X	the most common problem is that the signal handler is declared with the wrong argument.
12208 	X	calling func os waitpid with the data os wnohang option can prevent this a good place to insert such a call would be before calling popen.
12209 	X	pyrex http www cosc canterbury ac nz greg python pyrex can compile a slightly modified version of python code into a c extension and can be used on many different.
12210 	X	the same way as you get the name of that cat you found on your porch the cat object itself cannot tell you its name and it doesnt really care so the only way to find out what its called is to ask all your neighbours namespaces if its their cat object generally speaking it cant because objects dont really have.
12211 	X	list list set list list list set list.
12212 	X	you can run func gc collect to force a collection but there are pathological cases where objects will never be.
12213 	X	try checking the configuration of virus scanning software on your systems to ensure that they are indeed configured.
12214 	X	it is also convenient to have a function that can readily be applied to an amorphous collection of objects when you use the functional features of python map apply et al.
12215 	X	some unacceptable solutions that have been proposed.
12216 	X	sip if you need more speed psyco http psyco sourceforge net generates x assembly code from python.
12217 	X	it occurred to me that a scripting language with a syntax like abc but with access to the amoeba system calls would fill the.
12218 	X	while learning to use a statically typed language is important in the long term it is not necessarily the best topic to address in the students first programming.
12219 	X	in many cases all you really need is to run some data through a command and get the result.
12220 	X	psyco http psyco sourceforge net is a just in time compiler that translates python code into x assembly.
12221 	X	essentially assignment always binds a name to a value the same is true of def and class statements but in that case the value is a.
12222 	X	this converts the list into a set thereby removing duplicates and then back into a.
12223 	X	despite the cycle collector its still a good idea to define an explicit close method on objects to be called whenever youre done with.
12224 	X	mcafee when configured to scan all file system read activity is a particular.
12225 	X	in fact implementing len max min as a built in function is actually less code than implementing them as methods for each.
12226 	X	hash lists by their address object id.
12227 	X	you can use psyco to compile the most time critical functions in your code and gain a significant improvement with very little effort as long as youre running on a machine with an x compatible.
12228 	X	i realized that it would be foolish to write an amoeba specific language so i decided that i needed a language that was generally.
12229 	X	many other aspects of python make it a good first.
12230 	X	unless the amount of data is very large the easiest way to do this is to write it to a temporary file and run the command with that temporary file as.
12231 	X	if you can use it psyco can provide dramatic speedups for critical.
12232 	X	this converts the list into a set thereby removing duplicates and then back into a.
12233 	X	the close method can then remove attributes that refer to.
12234 	X	one can quibble about individual cases but its a part of python and its too late to make such fundamental changes.
12235 	X	this doesnt work because if you construct a new list with the same value it wont be found e g.
12236 	X	pyrex http www cosc canterbury ac nz greg python pyrex is a compiler that accepts a slightly modified form of python and generates the corresponding c.
12237 	X	during the christmas holidays i had a lot of time on my hand so i decided to give it a.
12238 	X	like java python has a large standard library so that students can be assigned programming projects very early in the course that do.
12239 	X	so it should be declared with two arguments.
12240 	X	the standard module mod tempfile exports a mktemp function to generate unique temporary file.
12241 	X	the rest of this answer will discuss various tricks for squeezing a bit more speed out of python.
12242 	X	how do you make an array in python.
12243 	X	dont call meth del directly meth del should call close and close should make sure that it can be called more than once for the same.
12244 	X	freeze is a program that allows you to ship a python program as a single stand alone executable.
12245 	X	the functions have to remain to avoid massive code.
12246 	X	pyrex makes it possible to write an extension without having to learn pythons c.
12247 	X	during the next year while still mostly working on it in my own time python was used in the amoeba project with increasing success and the feedback from colleagues made me add many early.
12248 	X	assignments arent restricted to the standard four function calculator and check balancing.
12249 	X	never apply any optimization tricks unless you know you need them after profiling has indicated that a particular function is the heavily executed hot spot in the.
12250 	X	a b b a print b print a.
12251 	X	another way to avoid cyclical references is to use the mod weakref module which allows you to point to objects without incrementing their reference.
12252 	X	it is not a compiler your programs dont run.
12253 	X	would raise a keyerror exception because the id of the used in the second line differs from that in the first.
12254 	X	if you need to interface to some c or c library for which no python extension currently exists you can try wrapping the librarys data types and functions with a tool such as swig http www swig org.
12255 	X	heres a very brief summary of what started it all written by guido van rossum.
12256 	X	by using the standard library students can gain the satisfaction of working on realistic applications as they learn the fundamentals of.
12257 	X	how do i test a python program or component.
12258 	X	class popen this is a deadlock safe version of popen that returns an object with errorlevel out a string and err a string.
12259 	X	optimizations almost always make the code less clear and you shouldnt pay the costs of reduced clarity increased development time greater likelihood of bugs unless the resulting performance in some cases its possible to automatically translate python to c or x assembly language meaning that you dont have to modify your code to gain increased.
12260 	X	arguably the class has a name even though it is bound to two names and invoked through the name b the created instance is still reported as an instance of class a however it is impossible to say whether the instances name is a or b since both names are bound to the same.
12261 	X	tree data structures for instance should use weak references for their parent and sibling references if they need them.
12262 	X	is a pyd file the same as a dll.
12263 	X	functions were used for those operations that were generic for a group of types and which were intended to work even for objects that didnt have methods at all e g tuples.
12264 	X	in other words dictionary keys should be compared using not using.
12265 	X	sip http www riverbankcomputing co uk sip cxx http cxx sourceforge net boost http www boost org libs python doc index html or weave http www scipy org site content weave are also alternatives for wrapping c.
12266 	X	in february after just over a year of development i decided to post to.
12267 	X	using the standard library also teaches students about code.
12268 	X	xxx seems to have overlap with other questions.
12269 	X	generally speaking it should not be necessary for your code to know the names of particular.
12270 	X	lists are equivalent to c or pascal arrays in their time complexity the primary difference is that a python list can contain objects of many different.
12271 	X	if the object has ever been a local variable in a function that caught an expression in an except clause chances are that a reference to the object still exists in that functions stack frame as contained in the stack.
12272 	X	xxx update for pyk pyinit foo.
12273 	X	it is also convenient to have a function that can readily be applied to an amorphous collection of objects when you use the functional features of python map apply et al.
12274 	X	make a copy when using a list as a.
12275 	X	http www scipy org site content weave are also alternatives for wrapping c.
12276 	X	the rest is in the misc history.
12277 	X	third party modules such as pygame are also helpful in extending the students.
12278 	X	the doctest module http docs python org library doctest finds examples in the docstrings for a module and runs them comparing the output with the expected output given in the.
12279 	X	example print popen grep spam n nhere spam n n out def init selfcommandinput nonecapturestderr none outfile tempfile mktemp command s s commandoutfile if input infile tempfile mktemp open infile w write input command command infile if capturestderr errfile tempfile mktemp command command errfile self errorlevel os system command self out open outfile r read os remove outfile if input os remove infile if capturestderr self err open errfile r read os remove errfile.
12280 	X	pyrex http www cosc canterbury ac nz greg python pyrex can compile a slightly modified version of python code into a c extension and can be used on many different.
12281 	X	unless you are deliberately writing introspective programs this is usually an indication that a change of approach might be.
12282 	X	lists are equivalent to c or pascal arrays in their time complexity the primary difference is that a python list can contain objects of many different.
12283 	X	normally calling func sys exc clear will take care of this by clearing the last recorded.
12284 	X	yes pyd files are dlls but there are a few.
12285 	X	in fact implementing len max min as a built in function is actually less code than implementing them as methods for each.
12286 	X	this doesnt work because the list were a mutable object could contain a reference to itself and then the copying code would run into an infinite.
12287 	X	how can i execute arbitrary python statements from c the highest level function to do this is pyrun simplestring which takes.
12288 	X	i had extensive experience with implementing an interpreted language in the abc group at cwi and from working with this group i had learned a lot about language.
12289 	X	pythons interactive interpreter enables students to test language features while theyre.
12290 	X	the unittest module http docs python org library unittest is a fancier testing framework modelled on java and smalltalk testing.
12291 	X	note that many interactive programs e g vi dont work well with pipes substituted for standard input and.
12292 	X	psyco http psyco sourceforge net is a just in time compiler that translates python code into x assembly.
12293 	X	in comp lang python fredrik lundh once gave an excellent analogy in answer to this question.
12294 	X	the array module also provides methods for creating arrays of fixed types with compact representations but they are slower to index than.
12295 	X	finally if your del method raises an exception a warning message is printed to sys.
12296 	X	if you have a dll named foo pyd then it must have a function.
12297 	X	one can quibble about individual cases but its a part of python and its too late to make such fundamental changes.
12298 	X	allow lists as keys but tell the user not to modify.
12299 	X	the highest level function to do this is cfunc pyrun simplestring which takes a single string argument to be executed in the context of the module main and returns for success and when an exception occurred including syntaxerror.
12300 	X	this is the origin of many python features including the use of indentation for statement grouping and the inclusion of very high level data types although the details are all different in python.
12301 	X	they can keep a window with the interpreter running while they enter their programs source in another.
12302 	X	for testing it helps to write the program so that it may be easily tested by using good modular.
12303 	X	you will have to use pseudo ttys ptys instead of.
12304 	X	if you can use it psyco can provide dramatic speedups for critical.
12305 	X	the same way as you get the name of that cat you found on your porch the cat object itself cannot tell you its name and it doesnt really care so the only way to find out what its called is to ask all your neighbours namespaces if its their cat object.
12306 	X	also note that the numeric extensions and others define array like structures with various characteristics as.
12307 	X	finally if your meth del method raises an exception a warning message is printed to data sys stderr.
12308 	X	you can then write python import foo and python will search for foo pyd as well as foo py foo pyc and if it finds it will attempt to call initfoo to initialize.
12309 	X	the functions have to remain to avoid massive code.
12310 	X	this would allow a class of hard to track bugs in programs when you forgot or modified a list by.
12311 	X	if you want more control use pyrun string see the source for pyrun simplestring in python pythonrun c including syntaxerror.
12312 	X	i had a number of gripes about the abc language but also liked many of its.
12313 	X	if they cant remember the methods for a list they can do something like this.
12314 	X	your program should have almost all functionality encapsulated in either functions or class methods and this sometimes has the surprising and delightful effect of making the program run faster because local variable accesses are faster than global accesses.
12315 	X	or you can use a python interface to don libes expect.
12316 	X	the rest of this answer will discuss various tricks for squeezing a bit more speed out of python.
12317 	X	and dont be surprised if youll find that its known by many names or no name at all and dont be surprised if youll find that its known by many names or no name at all.
12318 	X	the array module also provides methods for creating arrays of fixed types with compact representations but they are slower to index than.
12319 	X	how do i get a list of all instances of a given class.
12320 	X	you do not link your exe with foo lib as that would cause windows to require the dll to be.
12321 	X	it also invalidates an important invariant of dictionaries every value in d keys is usable as a key of the.
12322 	X	if you want more control use cfunc pyrun string see the source for cfunc pyrun simplestring in python pythonrun c.
12323 	X	it was impossible to extend the abc language or its implementation to remedy my complaints in fact its lack of extensibility was one of its biggest.
12324 	X	l dir l append count extend index insert pop remove reverse sort help l append help on built in function append.
12325 	X	furthermore the program should avoid depending on mutating global variables since this makes testing much more difficult to.
12326 	X	a python extension that interfaces to expect is called expy and available from http expectpy sourceforge.
12327 	X	never apply any optimization tricks unless you know you need them after profiling has indicated that a particular function is the heavily executed hot spot in the.
12328 	X	whats up with the comma operators precedence.
12329 	X	also note that the numeric extensions and others define array like structures with various characteristics as.
12330 	X	python does not keep track of all instances of a class or of a built in type.
12331 	X	named foo pyd then it must have a function initfoo.
12332 	X	note that for string operations python has moved from external functions the string module to.
12333 	X	mark lists as read only once they are used as a dictionary.
12334 	X	how can i evaluate an arbitrary python expression from c call the function pyrun string from the previous question with the start symbol py eval input it parses an expression evaluates it and returns its.
12335 	X	i had some experience with using modula and talked with the designers of modula and read the modula.
12336 	X	append l append object append object to end l append l.
12337 	X	a pure python solution that works like expect is pexpect http pexpect sourceforge net.
12338 	X	optimizations almost always make the code less clear and you shouldnt pay the costs of reduced clarity increased development time greater likelihood of bugs unless the resulting performance benefit is worth.
12339 	X	comma is not an operator in.
12340 	X	to get lisp style linked lists you can emulate cons cells using tuples.
12341 	X	you can program the classs constructor to keep track of all instances by keeping a list of weak references to each.
12342 	X	you can then write python import foo and python will search for foo pyd as well as foo py foo pyc and if it finds it will attempt to call initfoo to initialize.
12343 	X	the problem is that its not just the top level object that could change its value you could use a tuple containing a list as a.
12344 	X	call the function cfunc pyrun string from the previous question with the start symbol cdata py eval input it parses an expression evaluates it and returns its.
12345 	X	modula is the origin of the syntax and semantics used for exceptions and some other python.
12346 	X	with the interpreter documentation is never far from the student as hes.
12347 	X	the mod doctest module finds examples in the docstrings for a module and runs them comparing the output with the expected output given in the.
12348 	X	how do i access the serial rs port.
12349 	X	there is a page on the wiki devoted to performance tips guido van rossum has written up an anecdote related to optimization at http www python org doc essays liststr.
12350 	X	lisp list like this example none lisp list like this example none.
12351 	X	python does not keep track of all instances of a class or of a built in type.
12352 	X	you do not link your exe with foo lib as that would cause windows to require the dll to be.
12353 	X	note that for string operations python has moved from external functions the string module to.
12354 	X	entering anything as a key into a dictionary would require marking all objects reachable from there as read only and again self referential objects could cause an infinite.
12355 	X	how do i extract c values from a python object.
12356 	X	i was working in the amoeba distributed operating system group at.
12357 	X	there are also good ides for.
12358 	X	the mod unittest module is a fancier testing framework modelled on java and smalltalk testing.
12359 	X	one thing to notice is that function and especially method calls are rather expensive if you have designed a purely oo interface with lots of tiny functions that dont do much more than get or set an instance variable or call another method you might consider using a more direct way such as directly accessing instance.
12360 	X	if mutability is desired you could use lists instead of.
12361 	X	you can program the classs constructor to keep track of all instances by keeping a list of weak references to each.
12362 	X	note that the search path for foo pyd is pythonpath not the same as the path that windows uses to search for foo.
12363 	X	there is a trick to get around this if you need to but use it at your own risk you can wrap a mutable structure inside a class instance which has both a cmp and a hash.
12364 	X	we needed a better way to do system administration than by writing either c programs or bourne shell scripts since amoeba had its own system call interface which wasnt easily accessible from the bourne.
12365 	X	idle is a cross platform ide for python that is written in python using.
12366 	X	for testing it helps to write the program so that it may be easily tested by using good modular.
12367 	X	http pyserial sourceforge net http pyserial sourceforge net.
12368 	X	also see the standard module profile described in the library reference manual http docs python org library profile html which makes it possible to find out where your program is spending most of its time if you have some patience the profiling itself can slow your program down by an order of magnitude.
12369 	X	the same is true of the various assignment operators etc.
12370 	X	here the analogue of lisp car is lisp list and the analogue of cdr is lisp list.
12371 	X	modules how do i create a pyc file.
12372 	X	also foo pyd need not be present to run your program whereas if you linked your program with a dll the dll is.
12373 	X	why is join a string method instead of a list or tuple method.
12374 	X	you must then make sure that the hash value for all such wrapper objects that reside in a dictionary or other hash based structure remain fixed while the object is in the dictionary or other structure.
12375 	X	if its a tuple pytuplesize o returns its length and pytuple getitem o i returns its ith.
12376 	X	my experience with error handling in amoeba made me acutely aware of the importance of exceptions as a programming language.
12377 	X	your program should have almost all functionality encapsulated in either functions or class methods and this sometimes has the surprising and delightful effect of making the program run faster because local variable accesses are faster than global accesses.
12378 	X	for unix see a usenet post by mitch chapman.
12379 	X	remember that many standard optimization heuristics you may know from other programming experience may well apply to.
12380 	X	they are not truly operators but syntactic delimiters in assignment.
12381 	X	only do this if youre sure you really need to because its usually a lot slower than using python.
12382 	X	when a module is imported for the first time or when the source is more recent than the current compiled file a pyc file containing the compiled code should be created in the same directory as the py.
12383 	X	of course foo pyd is required if you want to say import foo.
12384 	X	strings became much more like other standard types starting in python when methods were added which give the same functionality that has always been available using the functions of the string.
12385 	X	hash lists by their address object id.
12386 	X	lists have similar functions pylistsize o and pylist getitem o i.
12387 	X	it occurred to me that a scripting language with a syntax like abc but with access to the amoeba system calls would fill the.
12388 	X	emacs users will be happy to know that there is a very good python mode for.
12389 	X	furthermore the program should avoid depending on mutating global variables since this makes testing much more difficult to.
12390 	X	for example it may be faster to send output to output devices using larger writes rather than smaller ones in order to reduce the overhead of kernel system.
12391 	X	the same is true of the various assignment operators etc.
12392 	X	if mutability is desired you could use lists instead of.
12393 	X	one reason that a pyc file may not be created is permissions problems with the.
12394 	X	in a dll linkage is declared in the source code with declspec dllexport.
12395 	X	most of these new methods have been widely accepted but the one which appears to make some programmers feel uncomfortable is strings became much more like other standard types starting in python when methods were added which give the same functionality that has always been available using the functions of the string.
12396 	X	this doesnt work because if you construct a new list with the same value it wont be found e g.
12397 	X	for strings pystring size o returns its length and pystring asstring o a pointer to its.
12398 	X	i realized that it would be foolish to write an amoeba specific language so i decided that i needed a language that was generally.
12399 	X	all of these programming environments provide syntax highlighting auto indenting and access to the interactive interpreter while.
12400 	X	the global main logic of your program may be as simple as the global main logic of your program may be as simple as.
12401 	X	a cf at ohioee com http groups google com groupsselm.
12402 	X	thus cgi scripts that write all output in one shot may be faster than those that write lots of small pieces of.
12403 	X	they are not truly operators but syntactic delimiters in assignment.
12404 	X	here the analogue of lisp car is lisp list and the analogue of cdr is lisp list.
12405 	X	this can happen for example if you develop as one user but run as another such as if you are testing with a web.
12406 	X	in a pyd linkage is defined in a list of available.
12407 	X	most of these new methods have been widely accepted but the one which appears to make some programmers feel uncomfortable is.
12408 	X	note that python strings may contain null bytes so cs strlen should not be.
12409 	X	during the christmas holidays i had a lot of time on my hand so i decided to give it a.
12410 	X	consult http www python org editors for a full list of python editing.
12411 	X	if name main if name main main logic.
12412 	X	also be sure to use pythons core features where.
12413 	X	is there an equivalent of cs.
12414 	X	only do this if youre sure you really need to because its usually a lot slower than using python.
12415 	X	creation of a pyc file is automatic if youre importing a module and python has the ability permissions free space to write the compiled module back to the.
12416 	X	of course foo pyd is required if you want to say import foo.
12417 	X	would raise a keyerror exception because the id of the used in the second line differs from that in the first.
12418 	X	to test the type of an object first make sure it isnt null and then use pystring check o pytuple check o pylist check o.
12419 	X	during the next year while still mostly working on it in my own time python was used in the amoeba project with increasing success and the feedback from colleagues made me add many early.
12420 	X	if you want to discuss pythons use in education you may be interested in joining the edu sig mailing list http python org community sigs current edu sig.
12421 	X	at the bottom of the main module of your.
12422 	X	why doesnt closing sys stdout stdin stderr really close it.
12423 	X	for example slicing allows programs to chop up lists and other sequence objects in a single tick of the interpreters mainloop using highly optimized c.
12424 	X	yes this feature was added in python.
12425 	X	how do i create a multidimensional list.
12426 	X	running python on a top level script is not considered an import and no pyc will be.
12427 	X	in a dll linkage is declared in the source code with declspec dllexport.
12428 	X	in other words dictionary keys should be compared using not using keyword is.
12429 	X	there is also a high level api to python objects which is provided by the so called abstract interface read include abstract h for further.
12430 	X	in february after just over a year of development i decided to post to.
12431 	X	if you want to discuss pythons use in education you may be interested in joining the edu sig mailing list community sigs current edu sig.
12432 	X	once your program is organized as a tractable collection of functions and class behaviours you should write test functions that exercise the.
12433 	X	python file objects are a high level layer of abstraction on top of c streams which in turn are a medium level layer of abstraction on top of among other things low level c file.
12434 	X	thus to get the same effect as one thing to notice is that function and especially method calls are rather expensive if you have designed a purely oo interface with lots of tiny functions that dont do much more than get or set an instance variable or call another method you might consider using a more direct way such as directly accessing instance.
12435 	X	the syntax would be as follows.
12436 	X	you probably tried to make a multidimensional array like this.
12437 	X	for example if you have a top level module abc py that imports another module xyz py when you run abc xyz pyc will be created since xyz is imported but no abc pyc file will be created since abc py isnt were.
12438 	X	in a pyd linkage is defined in a list of available.
12439 	X	make a copy when using a list as a.
12440 	X	it allows interfacing with any kind of python sequence using calls like pysequence length pysequence getitem as well as many other useful.
12441 	X	the rest is in the misc history.
12442 	X	what is this bsddb module my application keeps complaining about.
12443 	X	a test suite can be associated with each module which automates a sequence of.
12444 	X	for most file objects you create in python via the builtin file constructor f close marks the python file object as were closed from pythons point of view and also arranges to close the underlying c.
12445 	X	also see the standard module mod profile which makes it possible to find out where your program is spending most of its time if you have some patience the profiling itself can slow your program down by an order of magnitude.
12446 	X	on true if expression else on false yes this feature was added in python.
12447 	X	if you need to create abc pyc that is to create a pyc file for a module that is not imported you can using the py compile and compileall.
12448 	X	how can i embed python into a windows application.
12449 	X	there are two common arguments against this.
12450 	X	this doesnt work because the list were a mutable object could contain a reference to itself and then the copying code would run into an infinite.
12451 	X	starting with the distribution includes the pybsddb package http pybsddb sf net as a replacement for the old bsddb.
12452 	X	this sounds like a lot of work but since python is so terse and flexible its surprisingly.
12453 	X	this also happens automatically in fs destructor when f becomes.
12454 	X	remember that many standard optimization heuristics you may know from other programming experience may well apply to.
12455 	X	the syntax would be as follows.
12456 	X	this looks correct if you print it.
12457 	X	the py compile module can manually compile any.
12458 	X	embedding the python interpreter in a windows app can be summarized as follows embedding the python interpreter in a windows app can be summarized as follows.
12459 	X	the first runs along the lines of it looks really ugly using a method of a string literal string constant to which the answer is that it might but a string literal is just a fixed.
12460 	X	allow lists as keys but tell the user not to modify.
12461 	X	if its a tuple cfunc pytuple size returns its length and cfunc pytuple getitem returns the item at a specified.
12462 	X	python is a high level general purpose programming language that can be applied to many different classes of.
12463 	X	it includes functions which provide backward compatibility at the api level but requires a newer version of the underlying berkeley db http www sleepycat com.
12464 	X	you can make coding much more pleasant and fun by writing your test functions in parallel with the production code since this makes it easy to find bugs and even design flaws.
12465 	X	but stdin stdout and stderr are treated specially by python because of the special status also given to them by c running sys stdout close marks the python level file object as were closed but does not close the associated c.
12466 	X	for example it may be faster to send output to output devices using larger writes rather than smaller ones in order to reduce the overhead of kernel system.
12467 	X	a none none none none none none a none none none none none none.
12468 	X	one way is to use the compile function in that module interactively.
12469 	X	do not build python into your exe file.
12470 	X	if the methods are to be allowed on names bound to strings there is no logical reason to make them unavailable on.
12471 	X	this would allow a class of hard to track bugs in programs when you forgot or modified a list by.
12472 	X	lists have similar functions cfunc pylistsize and cfunc pylist getitem.
12473 	X	look at the table of contents for ref library index to get an idea of whats.
12474 	X	files created with the older bsddb module cant be opened directly using the new.
12475 	X	once your program is organized as a tractable collection of functions and class behaviours you should write test functions that exercise the.
12476 	X	to close the underlying c stream for one of these three you should first be sure thats what you really want to do e you may confuse extension modules trying to do i o.
12477 	X	thus cgi scripts that write all output in one shot may be faster than those that write lots of small pieces of.
12478 	X	but when you assign a value it shows up in multiple places.
12479 	X	import py compile py compile compile abc py.
12480 	X	on windows python must be a dll to handle importing modules that are themselves.
12481 	X	the second objection is typically cast as i am really telling a sequence to join its members together with a string constant.
12482 	X	it also invalidates an important invariant of dictionaries every value in d keys is usable as a key of the.
12483 	X	for strings cfunc pystring size returns its length and cfunc pystring asstring a pointer to its.
12484 	X	a wide variety of third party extensions are also.
12485 	X	using your old version of python and a pair of scripts which are part of python dbpickle py and pickledb py in the tools scripts directory you can convert your old database files to the new.
12486 	X	a test suite can be associated with each module which automates a sequence of.
12487 	X	if it is use os close python file objects are a high level layer of abstraction on top of c streams which in turn are a medium level layer of abstraction on top of among other things low level c file.
12488 	X	also be sure to use pythons core features where.
12489 	X	this will write the pyc to the same location as abc py or you can override that with the optional parameter cfile.
12490 	X	this is the first key undocumented.
12491 	X	mark lists as read only once they are used as a dictionary.
12492 	X	note that python strings may contain null bytes so cs cfunc strlen should not be.
12493 	X	consult the python package index http pypi python org pypi to find packages of interest to.
12494 	X	using your old python version run the dbpickle py script to convert it to a pickle e g includes functions which provide backward compatibility at the api level but requires a newer version of the underlying berkeley db http www sleepycat com.
12495 	X	this sounds like a lot of work but since python is so terse and flexible its surprisingly.
12496 	X	for most file objects you create in python via the builtin file constructor f close marks the python file object as were closed from pythons point of view and also arranges to close the underlying c.
12497 	X	for example slicing allows programs to chop up lists and other sequence objects in a single tick of the interpreters mainloop using highly optimized c.
12498 	X	for versions previous to the answer would be.
12499 	X	the reason is that replicating a list with doesnt create copies it only creates references to the existing.
12500 	X	you can also automatically compile all files in a directory or directories using the compileall.
12501 	X	instead link to pythonnn dll it is.
12502 	X	for some reason there seems to be much less difficulty with having split as a string method since in that case it is easy to see that.
12503 	X	the problem is that its not just the top level object that could change its value you could use a tuple containing a list as a.
12504 	X	to test the type of an object first make sure it isnt null and then use cfunc pystring check cfunc pytuple check cfunc pylist check.
12505 	X	python is a high level general purpose programming language that can be applied to many different classes of.
12506 	X	files created with the older bsddb module cant be opened directly using the new.
12507 	X	you can make coding much more pleasant and fun by writing your test functions in parallel with the production code since this makes it easy to find bugs and even design flaws.
12508 	X	this also happens automatically in fs destructor when f becomes.
12509 	X	thus to get the same effect as.
12510 	X	in many cases you can mimic ab c with a and b or c but theres a flaw if b is zero or empty or none anything that tests false then c will be selected.
12511 	X	the creates a list containing references to the same list of length.
12512 	X	you can do it from the shell prompt by running compileall py and providing the path of a directory containing python files to compile how do i create a pyc file.
12513 	X	do not build python into your exe file.
12514 	X	entering anything as a key into a dictionary would require marking all objects reachable from there as read only and again self referential objects could cause an infinite.
12515 	X	there is also a high level api to python objects which is provided by the so called abstract interface read include abstract h for further.
12516 	X	look at the table of contents for ref library index to get an idea of whats.
12517 	X	using your old version of python and a pair of scripts which are part of python dbpickle py and pickledb py in the tools scripts directory you can convert your old database files to the new.
12518 	X	support modules that are not intended to be the main module of a program may include a self test of the.
12519 	X	but stdin stdout and stderr are treated specially by python because of the special status also given to them by c running sys stdout close marks the python level file object as were closed but does not close the associated c.
12520 	X	l for i in range l for i in range l append l i.
12521 	X	in many cases you can prove by looking at the code that this cant happen e g because b is a constant or has a type that can never be false but in general this can be a.
12522 	X	changes to one row will show in all rows which is almost certainly not what you.
12523 	X	on windows python must be a dll to handle importing modules that are themselves.
12524 	X	is an instruction to a string literal to return the substrings delimited by the given separator or by default arbitrary runs of white space.
12525 	X	there is a trick to get around this if you need to but use it at your own risk you can wrap a mutable structure inside a class instance which has both a meth cmp and a meth hash.
12526 	X	it allows interfacing with any kind of python sequence using calls like cfunc pysequence length cfunc pysequence getitem as well as many other useful.
12527 	X	a wide variety of third party extensions are also.
12528 	X	using your old python version run the dbpickle py script to convert it to a pickle e g.
12529 	X	support modules that are not intended to be the main module of a program may include a self test of the.
12530 	X	to close the underlying c stream for one of these three you should first be sure thats what you really want to do e you may confuse extension modules trying to do i o.
12531 	X	it is much shorter and far faster to use.
12532 	X	tim peters who wishes it was steve majewski suggested the following solution a and b or c.
12533 	X	when a module is imported for the first time or when the source is more recent than the current compiled file a pyc file containing the compiled code should be created in the same directory as the py.
12534 	X	this is the first key undocumented.
12535 	X	in this case a unicode string returns a list of unicode strings an ascii string returns a list of ascii strings and everyone is.
12536 	X	you must then make sure that the hash value for all such wrapper objects that reside in a dictionary or other hash based structure remain fixed while the object is in the dictionary or other structure.
12537 	X	how do i use py buildvalue to create a tuple of arbitrary length.
12538 	X	consult the python package index http pypi python org pypi to find packages of interest to.
12539 	X	pathto dbpickley py database db database pck.
12540 	X	if name main self test self test.
12541 	X	if it is use os close.
12542 	X	l list l list is redundant if l is a.
12543 	X	because b is a singleton list it is never false so the wrong path is never taken then applying to the whole thing gets the b or c that you really.
12544 	X	the reason is that replicating a list with doesnt create copies it only creates references to the existing.
12545 	X	one reason that a pyc file may not be created is permissions problems with the.
12546 	X	instead link to file python nn dll it is typically installed in c windows system.
12547 	X	join is a string method because in using it you are telling the separator string to iterate over a sequence of strings and insert itself between adjacent.
12548 	X	class listwrapper def init self the list self the list the list def cmp self other return self the list other the list def hash self l self the list result len l for i in range len l try result result hash l i i except result result i return result.
12549 	X	use t pytuple new n instead and fill it with objects using pytuple setitem t i o note that this eats a reference count of o so you have to py incref.
12550 	X	how does the python version numbering scheme work.
12551 	X	pathto dbpickley py database db database pck.
12552 	X	even programs that interact with complex external interfaces may be tested when the external interfaces are unavailable by using fake interfaces implemented in.
12553 	X	os close close cs stdin stream os close close cs stdout stream os close close cs stderr stream.
12554 	X	l list l list is redundant if l is a.
12555 	X	ugly but it gets you there in the rare cases where it is really inconvenient to rewrite your code using.
12556 	X	the creates a list containing references to the same list of length.
12557 	X	this can happen for example if you develop as one user but run as another such as if you are testing with a web.
12558 	X	nn is the python version a number such as for python.
12559 	X	this method can be used with any argument which obeys the rules for sequence objects including any new classes you might define.
12560 	X	note that the hash computation is complicated by the possibility that some members of the list may be unhashable and also by the possibility of arithmetic.
12561 	X	lists have similar functions pylist new n and pylist setitem l i o.
12562 	X	python versions are numbered a b c or a b a is the major version number it is only incremented for really major changes in the.
12563 	X	even programs that interact with complex external interfaces may be tested when the external interfaces are unavailable by using fake interfaces implemented in.
12564 	X	note that the functionally oriented builtins such as map zip and friends can be a convenient accelerator for loops that perform a single.
12565 	X	the best course is usually to write a simple else.
12566 	X	changes to one row will show in all rows which is almost certainly not what you.
12567 	X	creation of a pyc file is automatic if youre importing a module and python has the ability permissions free space to write the compiled module back to the.
12568 	X	you can link to python statically or.
12569 	X	because this is a string method it can work for unicode strings as well as plain ascii.
12570 	X	furthermore it must always be the case that if o o ie.
12571 	X	note that you must set all the tuple items to some value before you pass the tuple to python code pytuple new n initializes them to null which isnt a valid python.
12572 	X	b is the minor version number incremented for less earth shattering.
12573 	X	mv database db olddatabase db mv database db olddatabase db.
12574 	X	what www tools are there for python.
12575 	X	for example to pair the elements of two lists together note that the functionally oriented builtins such as func map func zip and friends can be a convenient accelerator for loops that perform a single.
12576 	X	another solution is to implement the.
12577 	X	the suggested approach is to create a list of the desired length first and then fill in each element with a newly created list the suggested approach is to create a list of the desired length first and then fill in each element with a newly created list.
12578 	X	running python on a top level script is not considered an import and no pyc will be.
12579 	X	linking statically means linking against pythonnn lib while dynamically linking means linking against pythonnn.
12580 	X	if join were a method of the sequence types then the sequence types would have to decide which type of string to return depending on the type of the.
12581 	X	cmp o then hash o hash o ie.
12582 	X	use t pytuple new n instead and fill it with objects using pytuple setitem t i o note that this eats a reference count of o so you have to cfunc py incref.
12583 	X	c is the micro level it is incremented for more information about bugfix.
12584 	X	now convert the pickle file to a new format database.
12585 	X	the pydoc module http docs python org library pydoc can create html from the doc strings in your python source.
12586 	X	see the chapters titled ref internet and ref netdata in the library reference.
12587 	X	for example to pair the elements of two lists together.
12588 	X	a none for i in range a i none a i none.
12589 	X	for example if you have a top level module abc py that imports another module xyz py when you run abc xyz pyc will be created since xyz is imported but no abc pyc file will be created since abc py isnt were.
12590 	X	the drawback to dynamic linking is that your app wont run if pythonnn dll does not exist on your.
12591 	X	if none of these arguments persuade you then for the moment you can continue to use the join function from the string module which allows you to write string literal string constant to which the answer is that it might but a string literal is just a fixed.
12592 	X	hash regardless of whether the object is in a dictionary or.
12593 	X	lists have similar functions pylist new n and pylist setitem l i o.
12594 	X	pathto pickledb py database db database pck python pathto pickledb py database db database pck.
12595 	X	an alternative is pythondoc xxx mention sphinx epydoc.
12596 	X	python has many modules that will help you build server side and client side web.
12597 	X	or to compute a number of sines.
12598 	X	def q cond on true on false if cond if not isfunction on true return on true else return apply on true else if not isfunction on false return on false else return apply on false.
12599 	X	this generates a list containing different lists of length.
12600 	X	if you need to create abc pyc that is to create a pyc file for a module that is not imported you can using the mod py compile and mod compileall.
12601 	X	general note pythonnn lib is the so called import lib corresponding to python.
12602 	X	if the methods are to be allowed on names bound to strings there is no logical reason to make them unavailable on.
12603 	X	if you fail to meet these restrictions dictionaries and other hash based structures will.
12604 	X	note that you must set all the tuple items to some value before you pass the tuple to python code pytuple new n initializes them to null which isnt a valid python.
12605 	X	in the run up to a new major release a series of development releases are made denoted as alpha beta or release.
12606 	X	the precise commands you use will vary depending on the particulars of your.
12607 	X	the mod pydoc module can create html from the doc strings in your python source.
12608 	X	see the chapters titled internet protocols and support http docs python org lib internet and internet data handling http docs python org lib netdata in the library reference.
12609 	X	the operation completes very quickly in such.
12610 	X	in most cases youll pass b and c directly q a b c.
12611 	X	this generates a list containing different lists of length.
12612 	X	the mod py compile module can manually compile any.
12613 	X	it merely defines symbols for the.
12614 	X	the second objection is typically cast as i am really telling a sequence to join its members together with a string constant.
12615 	X	in the case of listwrapper whenever the wrapper object is in a dictionary the wrapped list must not change to avoid.
12616 	X	how do i call an objects method from c the pyobject callmethod function can be used to call an arbitrary method of an.
12617 	X	alphas are early releases in which interfaces arent yet finalized its not unexpected to see an interface change between two alpha.
12618 	X	for full details about operation of these two scripts check the doc string at the start of each.
12619 	X	an alternative is pythondoc http starship python net crew danilo pythondoc.
12620 	X	python has many modules that will help you build server side and client side web.
12621 	X	other examples include the join and split methods of string.
12622 	X	to avoid evaluating b or c when they shouldnt be encapsulate them within a lambda function e g q a lambda b lambda c.
12623 	X	you can also use a list comprehension.
12624 	X	one way is to use the compile function in that module interactively.
12625 	X	linking against file python nn lib while dynamically linking means linking against file python nn dll.
12626 	X	dont do this unless you are prepared to think hard about the requirements and the consequences of not meeting them.
12627 	X	the parameters are the object the name of the method to call a format string like that used with py buildvalue and the argument values.
12628 	X	betas are more stable preserving existing interfaces but possibly adding new modules and release candidates are frozen making no changes except as needed to fix critical.
12629 	X	for full details about operation of these two scripts check the doc string at the start of each.
12630 	X	how do i get a single keypress at a time.
12631 	X	xxx check if wiki page is still up to date.
12632 	X	for example if s are large k strings then join sssssss may be far faster than the more obvious s s s s s s s since the summation will compute many subexpressions whereas join does all the copying in one.
12633 	X	it is asked why python has no if then else.
12634 	X	w h a none w for i in range h.
12635 	X	import py compile py compile compile abc py.
12636 	X	the drawback to dynamic linking is that your app wont run if file python nn dll does not exist on your.
12637 	X	for some reason there seems to be much less difficulty with having meth str split as a string method since in that case it is easy to see that.
12638 	X	pyobject pyobject callmethod pyobject object char method name char arg format.
12639 	X	alpha beta and release candidate versions have an additional.
12640 	X	modified sandbox trunk faq gui rst sandbox trunk faq gui rst sun oct tocdepth.
12641 	X	its straightforward to do this using curses but curses is a fairly large module to.
12642 	X	a summary of available frameworks is maintained by paul boddie at http wiki python org moin webprogramming.
12643 	X	for manipulating strings use the replace method on string.
12644 	X	there are several answers many languages do just fine without one it can easily lead to less readable code no sufficiently pythonic syntax is discovered a search of the standard library found remarkably few places where using an xxx remove rest.
12645 	X	or you can use an extension that provides a matrix datatype numeric python http www pfdubois com numpy is the best.
12646 	X	this will write the pyc to the same location as abc py or you can override that with the optional parameter cfile.
12647 	X	general note file python nn lib is the so called import lib corresponding to file python dll.
12648 	X	def init self the list self the list the list def cmp self other return self the list other the list def hash self l self the list result len l for i in range len l try result result hash l i i except result result i return result.
12649 	X	this works for any object that has methods whether built in or user.
12650 	X	you may also find version numbers with a suffix e g.
12651 	X	how can i mimic cgi form submission method post.
12652 	X	use other examples include the join and split methods of string.
12653 	X	in many cases you can mimic a.
12654 	X	or you can use an extension that provides a matrix datatype numeric python http www pfdubois com numpy is the best.
12655 	X	you can also automatically compile all files in a directory or directories using the mod compileall.
12656 	X	it merely defines symbols for the.
12657 	X	is an instruction to a string literal to return the substrings delimited by the given separator or by default arbitrary runs of white space.
12658 	X	note that the hash computation is complicated by the possibility that some members of the list may be unhashable and also by the possibility of arithmetic.
12659 	X	you are responsible for eventually py decref ing the return.
12660 	X	these are unreleased versions built directly from the subversion.
12661 	X	import termios fcntl sys os fd sys stdin fileno.
12662 	X	i would like to retrieve web pages that are the result of posting a.
12663 	X	for example if s are large k strings then join sssssss may be far faster than the more obvious s s s s s s s since the summation will compute many subexpressions whereas join does all the copying in one.
12664 	X	b c with a and b or c but theres a flaw if b is zero or empty or none anything that tests false then c will be selected.
12665 	X	how do i apply a method to a sequence of objects.
12666 	X	you can do it from the shell prompt by running compileall py and providing the path of a directory containing python files to compile.
12667 	X	linking dynamically greatly simplifies link options everything happens at run.
12668 	X	in this case a unicode string returns a list of unicode strings an ascii string returns a list of ascii strings and everyone is.
12669 	X	furthermore it must always be the case that if o o ie.
12670 	X	to call e a file objects seek method with arguments assuming the file object pointer is f.
12671 	X	in practice after a final minor release is made the subversion trunk is incremented to the next minor version which becomes the a version.
12672 	X	what platform independent gui toolkits exist for python.
12673 	X	oldterm termios tcgetattr fd newattr termios tcgetattr fd newattr newattr termios icanon termios echo termios tcsetattr fd termios tcsanow newattr.
12674 	X	is there existing code that would let me do this easily.
12675 	X	for manipulating strings use the replace method on string.
12676 	X	in many cases you can prove by looking at the code that this cant happen e g because b is a constant or has a type that can never be false but in general this can be a.
12677 	X	your code must load pythonnn dll using the windows loadlibraryex.
12678 	X	meth str join is a string method because in using it you are telling the separator string to iterate over a sequence of strings and insert itself between adjacent.
12679 	X	cmp o then hash o hash o ie.
12680 	X	res pyobject callmethod f seek ii if res null an exception occurred else py decref res.
12681 	X	python versions are numbered a b c or a b a is the major version number it is only incremented for really major changes in the.
12682 	X	depending on what platform s you are aiming at there are.
12683 	X	oldflags fcntl fcntl fd fcntl f getfl fcntl fcntl fd fcntl f setfl oldflags os o nonblock.
12684 	X	i would like to retrieve web pages that are the result of posting a.
12685 	X	use regular expressions only when youre not dealing with constant string.
12686 	X	tim peters who wishes it was steve majewski suggested the following solution a and b or c.
12687 	X	result obj method for obj in list result obj method for obj in list.
12688 	X	how do i find the current module name.
12689 	X	the code must also use access routines and data in pythonnn dll that is pythons c apis using pointers obtained by the windows getprocaddress.
12690 	X	this method can be used with any argument which obeys the rules for sequence objects including any new classes you might define.
12691 	X	hash regardless of whether the object is in a dictionary or.
12692 	X	note that since pyobject callobject always wants a tuple for the argument list to call a function without arguments pass for the format and to call a function with one argument surround the argument in parentheses e g i.
12693 	X	b is the minor version number incremented for less earth shattering.
12694 	X	try while try c sys stdin read print got character c except ioerror pass finally termios tcsetattr fd termios tcsaflush oldterm fcntl fcntl fd fcntl f setfl oldflags.
12695 	X	is there existing code that would let me do this easily.
12696 	X	consider using the string formatting operations string tuple and string dictionary.
12697 	X	because b is a singleton list it is never false so the wrong path is never taken then applying to the whole thing gets the b or c that you really.
12698 	X	more generically you can try the following function.
12699 	X	a module can find out its own module name by looking at the predefined global variable name.
12700 	X	macros can make using these pointers transparent to any c code that calls routines in pythons c run.
12701 	X	because this is a string method it can work for unicode strings as well as plain ascii.
12702 	X	if you fail to meet these restrictions dictionaries and other hash based structures will.
12703 	X	the cfunc pyobject callmethod function can be used to call an arbitrary method of an.
12704 	X	c is the micro level it is incremented for each bugfix.
12705 	X	you need the termios and the fcntl module for any of this to work and ive only tried it on linux though it should work.
12706 	X	heres a simple example that uses httplib.
12707 	X	consider using the string formatting operations string tuple and string dictionary.
12708 	X	ugly but it gets you there in the rare cases where it is really inconvenient to rewrite your code using.
12709 	X	how can i get a dictionary to display its keys in a consistent order.
12710 	X	if this has the value main the program is running as a.
12711 	X	your code must load file python nn dll using the windows loadlibraryex.
12712 	X	if join were a method of the sequence types then the sequence types would have to decide which type of string to return depending on the type of the.
12713 	X	in the case of listwrapper whenever the wrapper object is in a dictionary the wrapped list must not change to avoid.
12714 	X	the parameters are the object the name of the method to call a format string like that used with cfunc py buildvalue and the argument values.
12715 	X	see pep dev peps pep for more information about bugfix.
12716 	X	standard builds of python include an object oriented interface to the tcl tk widget set called.
12717 	X	in this code characters are read and printed one at a.
12718 	X	be sure to use the list sort builtin method to do sorting and see the sorting mini howto http wiki python org moin howto sorting for examples of moderately advanced.
12719 	X	the best course is usually to write a simple else.
12720 	X	dictionaries store their keys in an unpredictable order so the display order of a dictionarys elements will be similarly.
12721 	X	many modules that are usually used by importing them also provide a command line interface or a self test and only execute this code after checking name.
12722 	X	the code must also use access routines and data in file python nn dll that is pythons c apis using pointers obtained by the windows getprocaddress.
12723 	X	string join xxx remove next paragraph eventually.
12724 	X	dont do this unless you are prepared to think hard about the requirements and the consequences of not meeting them.
12725 	X	pyobject pyobject callmethod pyobject object char method name char arg format.
12726 	X	this is probably the easiest to install and.
12727 	X	termios tcsetattr turns off stdins echoing and disables canonical.
12728 	X	list sort beats other techniques for sorting in all but the most extreme.
12729 	X	another solution is to implement the.
12730 	X	this can be frustrating if you want to save a printable version to a file make some changes and then compare it with some other printed.
12731 	X	macros can make using these pointers transparent to any c code that calls routines in pythons c.
12732 	X	if none of these arguments persuade you then for the moment you can continue to use the join function from the string module which allows you to write.
12733 	X	this works for any object that has methods whether built in or user.
12734 	X	in the run up to a new major release a series of development releases are made denoted as alpha beta or release.
12735 	X	for more info about tk including pointers to the source see the tcl tk home page at http www tcl.
12736 	X	fcntl fnctl is used to obtain stdins file descriptor flags and modify them for non blocking.
12737 	X	another common trick is to push loops into functions or.
12738 	X	in this case use the pprint module to pretty print the dictionary the items will be presented in order sorted by the.
12739 	X	a module can find out its own module name by looking at the predefined global variable name.
12740 	X	borland note convert pythonnn lib to omf format using coffomf exe.
12741 	X	why doesnt list sort return the sorted list.
12742 	X	you are responsible for eventually cfunc py decref ing the return.
12743 	X	alphas are early releases in which interfaces arent yet finalized its not unexpected to see an interface change between two alpha.
12744 	X	tcl tk is fully portable to the macos windows and unix.
12745 	X	since reading stdin when it is empty results in an ioerror this error is caught and.
12746 	X	build the query string qs first josephine mi q last public build the query string qs first josephine mi q last public.
12747 	X	for example suppose you have a program that runs slowly and you use the profiler to determine that a python function ff is were called lots of.
12748 	X	def q cond on true on false if cond if not isfunction on true return on true else return apply on true else if not isfunction on false return on false else return apply on false.
12749 	X	a more complicated solution is to subclass userdict userdict to create a sorteddict class that prints itself in a predictable.
12750 	X	if this has the value main the program is running as a.
12751 	X	borland note convert file python nn lib to omf format using coffomf exe.
12752 	X	in situations where performance matters making a copy of the list just to sort it would be.
12753 	X	to call e a file objects seek method with arguments assuming the file object pointer is f.
12754 	X	betas are more stable preserving existing interfaces but possibly adding new modules and release candidates are frozen making no changes except as needed to fix critical.
12755 	X	standard builds of python include an object oriented interface to the tcl tk widget set called.
12756 	X	for unix variants there are several.
12757 	X	sys stdout write httpobj getfile read.
12758 	X	if you notice that ff be sure to use the meth list sort builtin method to do sorting and see the sorting mini howto http wiki python org moin howto sorting for examples of moderately advanced.
12759 	X	in most cases youll pass b and c directly q a b c.
12760 	X	heres one simpleminded implementation of such a class.
12761 	X	many modules that are usually used by importing them also provide a command line interface or a self test and only execute this code after checking name.
12762 	X	if you use swig it is easy to create a python extension module that will make the apps data and methods available to.
12763 	X	a try except block is extremely.
12764 	X	therefore meth list sort sorts the list in.
12765 	X	res pyobject callmethod f seek ii if res null an exception occurred else py decref res.
12766 	X	alpha beta and release candidate versions have an additional.
12767 	X	this is probably the easiest to install and.
12768 	X	its straightforward to do this using curses but curses is a fairly large module to.
12769 	X	note that in general for url encoded post operations query strings must be quoted by using urllib quote.
12770 	X	meth list sort beats other techniques for sorting in all but the most extreme.
12771 	X	to avoid evaluating b or c when they shouldnt be encapsulate them within a lambda function e g q a lambda b lambda c.
12772 	X	def main print running if name main main if name main main.
12773 	X	swig will handle just also simplifies.
12774 	X	in order to remind you of that fact it does not return the sorted.
12775 	X	note that since cfunc pyobject callobject always wants a tuple for the argument list to call a function without arguments pass for the format and to call a function with one argument surround the argument in parentheses e g i.
12776 	X	you may also find version numbers with a suffix e g.
12777 	X	for more info about tk including pointers to the source see the tcl tk home page at http www tcl.
12778 	X	sys stdout write httpobj getfile read.
12779 	X	another common trick is to push loops into functions or.
12780 	X	it is asked why python has no if then else.
12781 	X	class sorteddict userdict userdict def repr self result append result append keys self data keys keys sort for k in keys append s s k self data k return s string join result.
12782 	X	how can i have modules that mutually import each other.
12783 	X	swig will create an init function a c function whose name depends on the name of the extension.
12784 	X	in versions of python prior to it was common to use this idiom.
12785 	X	this way you wont be fooled into accidentally overwriting a list when you need a sorted copy but also need to keep the unsorted version.
12786 	X	how do i catch the output from pyerr print or anything that prints to stdout stderr.
12787 	X	these are unreleased versions built directly from the subversion.
12788 	X	tcl tk is fully portable to the macos windows and unix.
12789 	X	import termios fcntl sys os fd sys stdin fileno.
12790 	X	note that in general for url encoded post operations query strings must be quoted by using func urllib quote.
12791 	X	for example suppose you have a program that runs slowly and you use the profiler to determine that a python function ff is were called lots of.
12792 	X	there are several answers many languages do just fine without one it can easily lead to less readable code no sufficiently pythonic syntax is discovered a search of the standard library found remarkably few places where using an if then else expression would make the code more.
12793 	X	this will work for many common situations you might encounter though its far from a perfect.
12794 	X	suppose you have the following modules.
12795 	X	for example if the name of the module is leo the init function will be called.
12796 	X	try value dict key except keyerror dict key getvalue key value dict key.
12797 	X	in python a new builtin func sorted is.
12798 	X	in python code define an object that supports the write.
12799 	X	in practice after a final minor release is made the subversion trunk is incremented to the next minor version which becomes the a version e g.
12800 	X	wxwindows is a portable gui class library written in c thats a portable interface to various platform specific libraries wxwidgets is a python interface to.
12801 	X	oldterm termios tcgetattr fd newattr termios tcgetattr fd newattr newattr termios icanon termios echo termios tcsetattr fd termios tcsanow newattr.
12802 	X	for example to send name guy steele.
12803 	X	in pep dev peps pep was written proposing several possible syntaxes and the community was asked to vote on the.
12804 	X	the largest flaw is that if some values in the dictionary are also dictionaries their values wont be presented in any particular.
12805 	X	from bar import bar var foo var from bar import bar var foo var.
12806 	X	if you use swig shadow classes as you should the init function will be called.
12807 	X	this only made sense when you expected the dict to have the key almost all the.
12808 	X	this function creates a new list from a provided iterable sorts it and returns.
12809 	X	assign this object to sys stdout and sys stderr.
12810 	X	see also the documentation for sys version sys hexversion and.
12811 	X	wxwindows supports windows and macos on unix variants it supports both gtk and motif.
12812 	X	oldflags fcntl fcntl fd fcntl f getfl fcntl fcntl fd fcntl f setfl oldflags os o nonblock.
12813 	X	from urllib import quote x quote guy steele.
12814 	X	tends to be called in loops like.
12815 	X	dictionaries store their keys in an unpredictable order so the display order of a dictionarys elements will be similarly.
12816 	X	from foo import foo var bar var from foo import foo var bar var.
12817 	X	this initializes a mostly hidden helper class used by the shadow.
12818 	X	if that wasnt the case you coded it like this.
12819 	X	for example heres how to iterate over the keys of a dictionary in sorted order.
12820 	X	call print error or just allow the standard traceback mechanism to.
12821 	X	how do i obtain a copy of the python source.
12822 	X	wxwindows preserves the look and feel of the underlying graphics toolkit and there is quite a rich widget set and collection of gdi.
12823 	X	try while try c sys stdin read print got character c except ioerror pass finally termios tcsetattr fd termios tcsaflush oldterm fcntl fcntl fd fcntl f setfl oldflags.
12824 	X	what module should i use to help with generating html.
12825 	X	then you can often eliminate function call overhead by rewriting ff to then you can often eliminate function call overhead by rewriting ff to.
12826 	X	most people liked one of the syntaxes but also hated other syntaxes many votes implied that people preferred no ternary operator rather than having a syntax they.
12827 	X	this can be frustrating if you want to save a printable version to a file make some changes and then compare it with some other printed.
12828 	X	the problem is that the interpreter will perform the following steps.
12829 	X	if dict has key key value dict key else dict key getvalue key value dict key a try except block is extremely.
12830 	X	for key in sorted dict iterkeys do whatever with dict key.
12831 	X	then the output will go wherever your write method sends.
12832 	X	the latest python source distribution is always available from python org at http www python org download.
12833 	X	see the wxwindows page http www wxwindows org for more.
12834 	X	you need the mod termios and the mod fcntl module for any of this to work and ive only tried it on linux though it should work.
12835 	X	and rewrite the two examples to list ffseq oldlist and to.
12836 	X	in pep dev peps pep was written proposing several possible syntaxes and the community was asked to vote on the.
12837 	X	in this case use the pprint module to pretty print the dictionary the items will be presented in order sorted by the.
12838 	X	bar imports foo which is a no op since there already is a module named foo bar foo var foo foo var.
12839 	X	for example if the name of the module is leo the init function will be called.
12840 	X	in situations where performance matters making a copy of the list just to sort it would be.
12841 	X	the easiest way to do this is to use the stringio class in the standard.
12842 	X	the latest development sources can be obtained via anonymous subversion at http svn python org projects python.
12843 	X	wxwidgets http wxwidgets org is an extension module that wraps many of the wxwindows c classes and is quickly gaining popularity amongst python.
12844 	X	in this code characters are read and printed one at a.
12845 	X	there are many different modules available.
12846 	X	single calls to ff x translate to ffseq x with little.
12847 	X	a more complicated solution is to subclass userdict userdict to create a sorteddict class that prints itself in a predictable.
12848 	X	the last step fails because python isnt done with interpreting foo yet and the global symbol dictionary for foo is still.
12849 	X	if you use swig shadow classes as you should the init function will be called.
12850 	X	in versions of python prior to it was common to use this idiom.
12851 	X	therefore list sort sorts the list in.
12852 	X	sample code and use for catching stdout.
12853 	X	the source distribution is a gzipped tar file containing the complete c source sphinx formatted documentation python library modules example programs and several useful pieces of freely distributable.
12854 	X	you can get wxwidgets as part of the source or cvs distribution of wxwindows or directly from its home.
12855 	X	func termios tcsetattr turns off stdins echoing and disables canonical.
12856 	X	htmlgen is a class library of objects corresponding to all the html markup.
12857 	X	of course this technique is not always appropriate and there are other variants which you can figure.
12858 	X	most people liked one of the syntaxes but also hated other syntaxes many votes implied that people preferred no ternary operator rather than having a syntax they.
12859 	X	heres one simpleminded implementation of such a class.
12860 	X	the last step fails because python isnt done with interpreting foo yet and the global symbol dictionary for foo is still.
12861 	X	this initializes a mostly hidden helper class used by the shadow.
12862 	X	try value dict key except keyerror dict key getvalue key value dict key.
12863 	X	in order to remind you of that fact it does not return the sorted.
12864 	X	in python code define an object that supports the write.
12865 	X	the source will compile and run out of the box on most unix.
12866 	X	wxwindows is a portable gui class library written in c thats a portable interface to various platform specific libraries wxwidgets is a python interface to.
12867 	X	func fcntl fnctl is used to obtain stdins file descriptor flags and modify them for non blocking.
12868 	X	its used when you are writing in python and wish to synthesize html pages for generating a web or for cgi forms documenttemplate and zope page templates are two different systems that are htmlgen is a class library of objects corresponding to all the html markup.
12869 	X	single calls to ff x translate to ffseq x with little.
12870 	X	is it possible to write obfuscated one liners in python.
12871 	X	the same thing happens when you use import foo and then try to access foo foo var in global.
12872 	X	the reason you can link the c code in step into your exe file is that calling the initialization function is equivalent to importing the module into python.
12873 	X	this only made sense when you expected the dict to have the key almost all the.
12874 	X	this way you wont be fooled into accidentally overwriting a list when you need a sorted copy but also need to keep the unsorted version.
12875 	X	assign this object to data sys stdout and data sys stderr.
12876 	X	the latest python source distribution is always available from python org at http www python org download.
12877 	X	wxwindows supports windows and macos on unix variants it supports both gtk and motif.
12878 	X	since reading stdin when it is empty results in an exc ioerror this error is caught and.
12879 	X	its used when you are writing in python and wish to synthesize html pages for generating a web or for cgi forms.
12880 	X	of course this technique is not always appropriate and there are other variants which you can figure.
12881 	X	usually this is done by nesting lambda within lambda.
12882 	X	class sorteddict userdict userdict def repr self result append result append keys self data keys keys sort for k in keys append s s k self data k return s string join result.
12883 	X	the same thing happens when you use import foo and then try to access foo foo var in global.
12884 	X	this is the second key undocumented.
12885 	X	if that wasnt the case you coded it like this.
12886 	X	in python a new builtin sorted is.
12887 	X	call print error or just allow the standard traceback mechanism to.
12888 	X	the latest development sources can be obtained via anonymous subversion at http svn python org projects python.
12889 	X	wxwindows preserves the look and feel of the underlying graphics toolkit and there is quite a rich widget set and collection of gdi.
12890 	X	how do i program using threads.
12891 	X	documenttemplate and zope page templates are two different systems that are part of.
12892 	X	you can gain some performance by explicitly storing the results of a function or method lookup into a local.
12893 	X	see the following three examples due to ulf bartelt.
12894 	X	this will work for many common situations you might encounter though its far from a perfect.
12895 	X	there are at least three possible workarounds for this.
12896 	X	in short you can use the following code to initialize the python interpreter with your extension.
12897 	X	if dict has key key value dict key else dict key getvalue key value dict key.
12898 	X	this function creates a new list from a provided iterable sorts it and returns.
12899 	X	then the output will go wherever your write method sends.
12900 	X	the source distribution is a gzipped tar file containing the complete c source sphinx formatted documentation python library modules example programs and several useful pieces of freely distributable.
12901 	X	see the wxwindows page http www wxwindows org for more.
12902 	X	be sure to use the threading module http docs python org library threading and not the thread.
12903 	X	quixotes ptl uses python syntax to assemble strings of.
12904 	X	a loop like you can gain some performance by explicitly storing the results of a function or method lookup into a local.
12905 	X	first fibonacci numbers print map lambda xf lambda xf x or f x f f x f f xf range.
12906 	X	the largest flaw is that if some values in the dictionary are also dictionaries their values wont be presented in any particular.
12907 	X	there are at least three possible workarounds for this.
12908 	X	in short you can use the following code to initialize the python interpreter with your extension.
12909 	X	in python and higher you can code this as value dict setdefault key getvalue key.
12910 	X	for example heres how to iterate over the keys of a dictionary in sorted order.
12911 	X	the easiest way to do this is to use the stringio class in the standard.
12912 	X	the source will compile and run out of the box on most unix.
12913 	X	wxwidgets http wxwidgets org is an extension module that wraps many of the wxwindows c classes and is quickly gaining popularity amongst python.
12914 	X	the threading module builds convenient abstractions on top of the low level primitives provided by the thread.
12915 	X	consult the web programming wiki pages http wiki python org moin webprogramming for more.
12916 	X	usually this is done by nesting keyword lambda within keyword lambda.
12917 	X	i want to do a complicated sort can you do a schwartzian transform in python.
12918 	X	guido van rossum recommends avoiding all uses of from module import and placing all code inside.
12919 	X	in python and higher you can code this as value dict setdefault key getvalue key.
12920 	X	for key in sorted dict iterkeys do whatever with dict key.
12921 	X	sample code and use for catching stdout.
12922 	X	consult the developer faq http www python org dev devfaq html subversion svn for more information on getting the source code and compiling.
12923 	X	you can get wxwidgets as part of the source or cvs distribution of wxwindows or directly from its home.
12924 	X	consult the web programming wiki pages http wiki python org moin webprogramming for more.
12925 	X	for key in token dict key dict get key for key in token dict key dict get key.
12926 	X	see the following three examples due to ulf bartelt.
12927 	X	the technique attributed to randal schwartz of the perl community sorts the elements of a list by a metric which maps each element to its sort value.
12928 	X	initializations of global variables and class variables should use constants or built in functions.
12929 	X	include python h py initialize initialize.
12930 	X	why isnt there a switch or case statement in python.
12931 	X	how do you specify and enforce an interface spec in python.
12932 	X	how do i access a module written in python from c.
12933 	X	consult the developer faq http www python org dev devfaq html subversion svn for more information on getting the source code and compiling.
12934 	X	aahz has a set of slides from his threading tutorial that are helpful see http starship python net crew aahz oscon.
12935 	X	how do i send mail from a python script.
12936 	X	first fibonacci numbers print map lambda xf lambda xf x or f x f f x f f xf range.
12937 	X	in python just use the key argument for the sort method the technique attributed to randal schwartz of the perl community sorts the elements of a list by a metric which maps each element to its sort value.
12938 	X	this means everything from an imported module is referenced as module.
12939 	X	there have been some proposals for switch statement syntax but there is no consensus yet on whether and how to do range.
12940 	X	an interface specification for a module as provided by languages such as c and java describes the prototypes for the methods and functions of the.
12941 	X	you can get a pointer to the module object as follows.
12942 	X	how do i get documentation on python.
12943 	X	there are bindings available for the qt toolkit pyqt http www riverbankcomputing co uk pyqt and for kde pykde.
12944 	X	be sure to use the mod threading module and not the mod thread.
12945 	X	use the standard library module smtplib http docs python org library smtplib.
12946 	X	if the method isnt going to change a slightly faster implementation is resolves dict get every.
12947 	X	in python just use the key argument for the sort method.
12948 	X	guido van rossum recommends avoiding all uses of from module import and placing all code inside.
12949 	X	pyrun simplestring import myapp import the shadow.
12950 	X	see pep dev peps pep for complete details and the current.
12951 	X	many feel that compile time enforcement of interface specifications helps in the construction of large.
12952 	X	module pyimport importmodule modulename module pyimport importmodule modulename.
12953 	X	if youre writing open source software you dont need to pay for pyqt but if you want to write proprietary applications you must buy a pyqt license from riverbank computing http www riverbankcomputing co uk and a qt license from http www riverbankcomputing co uk pyqt and for kde pykde.
12954 	X	the mod threading module builds convenient abstractions on top of the low level primitives provided by the mod thread.
12955 	X	use the standard library module mod smtplib.
12956 	X	if the method isnt going to change a slightly faster implementation is.
12957 	X	isorted sort key lambda s int s.
12958 	X	initializations of global variables and class variables should use constants or built in functions.
12959 	X	there are two problems with pythons c api which will become apparent if you use a compiler other than msvc the compiler used to build pythonnn.
12960 	X	http python org dev peps pep for complete details and the current.
12961 	X	python adds an abc module that lets you define abstract base classes abcs.
12962 	X	if the module hasnt been imported yet i e it is not yet present in sys modules this initializes the module otherwise it simply returns the value of sys modules modulename.
12963 	X	the standard documentation for the current stable version of python is available at http docs python org.
12964 	X	if youre writing open source software you dont need to pay for pyqt but if you want to write proprietary applications you must buy a pyqt license from riverbank computing http www riverbankcomputing co uk and a qt license from trolltech http www trolltech com.
12965 	X	aahz has a set of slides from his threading tutorial that are helpful see http starship python net crew aahz oscon.
12966 	X	heres a very simple interactive mail sender that uses.
12967 	X	dict get dict get look up the method once for key in token dict key dict get key dict get dict get look up the method once for key in token dict key dict get key.
12968 	X	how do i specify hexadecimal and octal integers.
12969 	X	the key argument is new in python for older versions this kind of sorting is quite simple to do with list.
12970 	X	this means everything from an imported module is referenced as module.
12971 	X	include python h py initialize initialize.
12972 	X	for cases where you need to choose from a very large number of possibilities you can create a dictionary mapping case values to functions to.
12973 	X	you can then use isinstance and issubclass to check whether an instance or a class implements a particular.
12974 	X	note that it doesnt enter the module into any namespace it only ensures it is initialized and is stored in sys modules.
12975 	X	pdf plain text and downloadable html versions are also.
12976 	X	none of my threads seem to run why.
12977 	X	this method will work on any host that supports an smtp.
12978 	X	default arguments can be used to determine values once at compile time instead of at run.
12979 	X	to specify an octal digit precede the octal value with a.
12980 	X	to sort a list of strings by their uppercase values the key argument is new in python for older versions this kind of sorting is quite simple to do with list.
12981 	X	jim roskind suggests performing steps in the following order in each module jim roskind suggests performing steps in the following order in each module.
12982 	X	the collections modules defines a set of useful abcs such as iterable container and mutablemapping.
12983 	X	data sys modules this initializes the module otherwise it simply returns the value of sys modules modulename.
12984 	X	the documentation is written using the sphinx documentation tool http sphinx pocoo org.
12985 	X	pygtk bindings for the gtk toolkit http www gtk org have been implemented by by james henstridge see ftp ftp gtk org pub gtk python.
12986 	X	as soon as the main thread exits all threads are.
12987 	X	heres a very simple interactive mail sender that uses.
12988 	X	this can only be done for functions or objects which will not be changed during program execution such as replacing default arguments can be used to determine values once at compile time instead of at run.
12989 	X	for example to set the variable a to the octal value in decimal type.
12990 	X	to sort a list of strings by their uppercase values.
12991 	X	exports globals functions and classes that dont need imported base classes exports globals functions and classes that dont need imported base classes import statements active code including globals that are initialized from imported values.
12992 	X	pyrun simplestring import myapp import the shadow.
12993 	X	for python many of the advantages of interface specifications can be obtained by an appropriate test discipline for.
12994 	X	note that it doesnt enter the module into any namespace it only ensures it is initialized and is stored in data sys modules.
12995 	X	the sphinx source for the documentation is part of the python source.
12996 	X	pygtk bindings for the gtk toolkit http www gtk org have been implemented by by james henstridge see ftp ftp gtk org pub gtk python.
12997 	X	your main thread is running too quickly giving the threads no time to do any.
12998 	X	this method will work on any host that supports an smtp.
12999 	X	this can only be done for functions or objects which will not be changed during program execution such as replacing.
13000 	X	tmp x upper x for x in l schwartzian transform tmp sort usorted x for x in tmp.
13001 	X	van rossum doesnt like this approach much because the imports appear in a strange place but it does.
13002 	X	there are two problems with pythons c api which will become apparent if you use a compiler other than msvc the compiler used to build pythonnn.
13003 	X	there is also a tool pychecker which can be used to find problems due to.
13004 	X	you can then access the modules attributes i e any name defined in the module as follows you can then access the modules attributes i e any name defined in the module as follows.
13005 	X	the standard documentation for the current stable version of python is available at http docs python org.
13006 	X	none of my threads seem to run why.
13007 	X	def degree sin deg return math sin deg math pi def degree sin deg return math sin deg math pi.
13008 	X	to sort by the integer value of a subfield extending from positions in each string to sort by the integer value of a subfield extending from positions in each string.
13009 	X	van rossum doesnt like this approach much because the imports appear in a strange place but it does.
13010 	X	problem the so called very high level functions that take file arguments will not work in a multi compiler environment because each compilers notion of a struct file will be.
13011 	X	for cases where you need to choose from a very large number of possibilities you can create a dictionary mapping case values to functions to.
13012 	X	a good test suite for a module can both provide a regression test and serve as a module interface specification and a set of.
13013 	X	attr pyobject getattrstring module attrname attr pyobject getattrstring module attrname.
13014 	X	pdf plain text and downloadable html versions are also available at http docs python org download.
13015 	X	python bindings for the fltk toolkit http www fltk org a simple yet powerful and mature cross platform windowing system are available from the python bindings for the fltk toolkit http www fltk org a simple yet powerful and mature cross platform windowing system are available from the pyfltk project http pyfltk sourceforge net.
13016 	X	a simple fix is to add a sleep to the end of the program thats long enough for all the threads to finish as soon as the main thread exits all threads are.
13017 	X	fromaddr raw input from toaddrs raw input to split print enter message end with d msg while line sys stdin readline if not line break msg msg line.
13018 	X	def degree sin deg factor math pi sin math sin return sin deg factor def degree sin deg factor math pi sin math sin return sin deg factor.
13019 	X	simply precede the hexadecimal number with a zero and then a lower or uppercase x.
13020 	X	tmp int s s for s in l schwartzian transform tmp sort isorted sort icmp.
13021 	X	matthias urlichs recommends restructuring your code so that the recursive import is not necessary in the first.
13022 	X	from an implementation standpoint these are very low level.
13023 	X	many python modules can be run as a script to provide a simple self.
13024 	X	calling pyobject setattrstring to assign to variables in the module also.
13025 	X	the documentation is written in restructuredtext and processed by the sphinx documentation tool http sphinx pocoo org.
13026 	X	your main thread is running too quickly giving the threads no time to do any.
13027 	X	the actual mail send server smtplib smtp localhost server sendmail fromaddr toaddrs msg server quit.
13028 	X	because this trick uses default arguments for terms which should not be changed it should only be used when you are not concerned with presenting a possibly confusing api to your.
13029 	X	hexadecimal digits can be specified in lower or.
13030 	X	but since this method calls intfield many times for each element of l it is slower than the schwartzian.
13031 	X	matthias urlichs recommends restructuring your code so that the recursive import is not necessary in the first.
13032 	X	compilers notion of a struct file will be.
13033 	X	even modules which use complex external interfaces can often be tested in isolation using trivial stub emulations of the external.
13034 	X	calling cfunc pyobject setattrstring to assign to variables in the module also.
13035 	X	the restructuredtext source for the documentation is part of the python source.
13036 	X	a wrapper for the fox toolkit http www fox toolkit org called fxpy http fxpy sourceforge net is.
13037 	X	import threading time a simple fix is to add a sleep to the end of the program thats long enough for all the threads to finish.
13038 	X	because this trick uses default arguments for terms which should not be changed it should only be used when you are not concerned with presenting a possibly confusing api to your.
13039 	X	for example in the python interpreter.
13040 	X	but since this method calls intfield many times for each element of l it is slower than the schwartzian.
13041 	X	from an implementation standpoint these are very low level.
13042 	X	the doctest and unittest modules or third party test frameworks can be used to construct an interface specification for a module as provided by languages such as c and java describes the prototypes for the methods and functions of the.
13043 	X	how do i interface to c objects from python.
13044 	X	fox supports both unix variants and.
13045 	X	def thread task name n for i in range n print name i import threading time.
13046 	X	the location of the sendmail program varies between systems sometimes it is usr lib sendmail sometime usr sbin sendmail.
13047 	X	how do you set a global variable in a function.
13048 	X	a xa a b xb b to specify an octal digit precede the octal value with a.
13049 	X	how can i sort one list by values from another list.
13050 	X	import x y z returns module x how do i get z.
13051 	X	problem swig generates the following code when generating wrappers to void functions.
13052 	X	for calling methods on objects you can simplify yet further by using the getattr built in to retrieve methods with a particular name.
13053 	X	many feel that compile time enforcement of interface specifications helps in the construction of large.
13054 	X	depending on your requirements there are many.
13055 	X	a wrapper for the fox toolkit http www fox toolkit org called fxpy http fxpy sourceforge net is.
13056 	X	for i in range t threading thread target thread task args str i i t start def thread task name n for i in range n print name i.
13057 	X	the sendmail manual page will help you.
13058 	X	for example to set the variable a to the octal value in decimal type.
13059 	X	merge them into a single list of tuples sort the resulting list and then pick out the element you.
13060 	X	import x y z y z for i in s split m getattr m i.
13061 	X	problem swig generates the following code when generating wrappers to void functions code block c.
13062 	X	python adds an mod abc module that lets you define abstract base classes abcs.
13063 	X	to do this manually begin by reading the extending and embedding document http docs python org ext ext html.
13064 	X	there are numerous tutorials and books.
13065 	X	fox supports both unix variants and.
13066 	X	time sleep for i in range t threading thread target thread task args str i i t start.
13067 	X	merge them into a single list of tuples sort the resulting list and then pick out the element you.
13068 	X	see mod importlib for a convenience function called func importlib import module.
13069 	X	py incref py none resultobj py none.
13070 	X	def dispatch self value method name visit str value method getattr self method name method.
13071 	X	you can then use func isinstance and func issubclass to check whether an instance or a class implements a particular.
13072 	X	realize that for the python run time system there isnt a whole lot of difference between c and c so the strategy of building a new python type around a c structure pointer type will also work for c.
13073 	X	the standard documentation includes ref tutorial index.
13074 	X	but now on many platforms the threads dont run in parallel but appear to run sequentially one at a time.
13075 	X	sendmail usr sbin sendmail sendmail location import os p os popen s t i sendmail w p write to receiver at example com n p write subject test n p write n blank line separating headers from body p write some text n p write some more text n sts p close if sts.
13076 	X	def f print x try to print the global for j in range if q x.
13077 	X	an alternative for the last step is.
13078 	X	when i edit an imported module and reimport it the changes dont show.
13079 	X	alas py none is a macro that expands to a reference to a complex data structure called py nonestruct inside pythonnn.
13080 	X	its suggested that you use a prefix for the method names such as visit in this.
13081 	X	the mod collections modules defines a set of useful abcs such as class iterable class container and class mutablemapping.
13082 	X	for c libraries you can look at sip http www riverbankcomputing co uk sip cxx http cxx sourceforge net boost http www boost org libs python doc index html weave http www scipy org site content weave or swig http www swig org.
13083 	X	there are numerous tutorials and books.
13084 	X	for opengl bindings see pyopengl http pyopengl sourceforge net.
13085 	X	the reason is that the os thread scheduler doesnt start a new thread until the previous thread is.
13086 	X	print sendmail exit status sts fromaddr raw input from toaddrs raw input to split print enter message end with d msg while true line sys stdin readline if not line break msg line.
13087 	X	any variable assigned in a function is local to that.
13088 	X	simply precede the hexadecimal number with a zero and then a lower or uppercase x.
13089 	X	result for p in pairs result append p result for p in pairs result append p.
13090 	X	again this code will fail in a mult compiler.
13091 	X	without such a prefix if values are coming from an untrusted source an attacker would be able to call any method on your.
13092 	X	for python many of the advantages of interface specifications can be obtained by an appropriate test discipline for.
13093 	X	depending on your requirements there are many.
13094 	X	the standard documentation includes ref tutorial index.
13095 	X	what platform specific gui toolkits exist for python.
13096 	X	the actual mail send server smtplib smtp localhost server sendmail fromaddr toaddrs msg server quit.
13097 	X	hexadecimal digits can be specified in lower or.
13098 	X	if you find this more legible you might prefer to use this instead of the final list.
13099 	X	for reasons of efficiency as well as consistency python only reads the module file on the first time a module is.
13100 	X	replace such code by fail in a mult compiler.
13101 	X	for calling methods on objects you can simplify yet further by using the func getattr built in to retrieve methods with a particular name.
13102 	X	there is also a tool pychecker which can be used to find problems due to.
13103 	X	to do this manually begin by reading ref the extending and embedding document extending index.
13104 	X	consult the beginners guide http wiki python org moin beginnersguide to find information for beginning python programmers including lists of.
13105 	X	the mac port download mac by jack jansen has a rich and ever growing set of modules that support the native mac toolbox.
13106 	X	a simple fix is to add a tiny sleep to the start of the run function but now on many platforms the threads dont run in parallel but appear to run sequentially one at a time.
13107 	X	since a value is bound to x as the last statement of the function body the compiler assumes that x is.
13108 	X	for example in the python interpreter.
13109 	X	however it is almost twice as slow for long.
13110 	X	if it didnt in a program consisting of many modules where each one imports the same basic module the basic module would be parsed and re parsed many.
13111 	X	a good test suite for a module can both provide a regression test and serve as a module interface specification and a set of.
13112 	X	realize that for the python run time system there isnt a whole lot of difference between c and c so the strategy of building a new python type around a c structure pointer type will also work for c.
13113 	X	consult the beginners guide http wiki python org moin beginnersguide to find information for beginning python programmers including lists of.
13114 	X	the port includes support for macos and macos xs carbon.
13115 	X	the reason is that the os thread scheduler doesnt start a new thread until the previous thread is.
13116 	X	the location of the sendmail program varies between systems sometimes it is usr lib sendmail sometime usr sbin sendmail.
13117 	X	consequently the print x attempts to print an uninitialized local variable and will trigger a nameerror.
13118 	X	why first the append operation has to reallocate memory and while it uses some tricks to avoid doing that each time it still has to do it occasionally and that costs quite a.
13119 	X	to force rereading of a changed module do this.
13120 	X	def dispatch self value method name visit str value method getattr self method name method.
13121 	X	many python modules can be run as a script to provide a simple self.
13122 	X	for c libraries you can look at sip http www riverbankcomputing co uk sip cxx http cxx sourceforge net boost http www boost org libs python doc index html weave http www scipy org site content weave or swig http www swig org.
13123 	X	is there a newsgroup or mailing list devoted to python.
13124 	X	by installing the pyobjc objective c bridge http pyobjc sourceforge net python programs can use macos xs cocoa.
13125 	X	def thread task name n time sleep for i in range n print name i a simple fix is to add a tiny sleep to the start of the run function.
13126 	X	the sendmail manual page will help you.
13127 	X	print x try to print the global for j in range if q x.
13128 	X	second the expression result append requires an extra attribute lookup and third theres a speed reduction from having to make if you find this more legible you might prefer to use this instead of the final list.
13129 	X	its suggested that you use a prefix for the method names such as visit in this.
13130 	X	even modules which use complex external interfaces can often be tested in isolation using trivial stub emulations of the external.
13131 	X	i added a module using the setup file and the make fails why.
13132 	X	there is a newsgroup comp lang python and a mailing list python list http mail python org mailman listinfo python list.
13133 	X	see the documentation that comes with the mac.
13134 	X	for i in range t threading thread target thread task args str i i t start def thread task name n time sleep for i in range n print name i.
13135 	X	any variable assigned in a function is local to that.
13136 	X	its primarily driven by the desire that i j have the same sign as j.
13137 	X	however it is almost twice as slow for long.
13138 	X	warning this technique is not fool.
13139 	X	it may be possible to use swigs typemap command to make the change it may be possible to use swigs typemap command to make the change automatically though i have not been able to get this to work im a complete swig newbie.
13140 	X	without such a prefix if values are coming from an untrusted source an attacker would be able to call any method on your.
13141 	X	the mod doctest and mod unittest modules or third party test frameworks can be used to construct exhaustive test suites that exercise every line of code in a.
13142 	X	setup must end in a newline if there is no newline there the build process.
13143 	X	the newsgroup and mailing list are gatewayed into each other if you can read news its unnecessary to subscribe to the mailing.
13144 	X	pythonwin windows by mark hammond includes an interface to the microsoft foundation classes and a python programming environment using it thats written mostly in.
13145 	X	time sleep for i in range t threading thread target thread task args str i i t start.
13146 	X	sendmail usr sbin sendmail sendmail location import os p os popen s t i sendmail w p write to receiver at example com n p write subject test n p write n blank line separating headers from body p write some text n p write some more text n sts p close if sts.
13147 	X	if you want that and also want its primarily driven by the desire that i j have the same sign as j.
13148 	X	why first the append operation has to reallocate memory and while it uses some tricks to avoid doing that each time it still has to do it occasionally and that costs quite a.
13149 	X	in particular modules containing statements like.
13150 	X	using a python shell script to put up a python interpreter window from inside your windows app is not a good idea the resulting window will be independent of your apps windowing.
13151 	X	cant you emulate threads in the interpreter instead of relying on an os specific thread implementation.
13152 	X	an appropriate testing discipline can help build large complex applications in python as well as having interface specifications.
13153 	X	fixing this requires some ugly shell script hackery and this bug is so minor that it doesnt seem worth the.
13154 	X	comp lang python is high traffic receiving hundreds of postings every day and usenet readers are often more able to cope with this.
13155 	X	the mac port http python org download mac by jack jansen has a rich and ever growing set of modules that support the native mac toolbox.
13156 	X	instead of trying to guess how long a time sleep delay will be enough its better to use some kind of semaphore.
13157 	X	since a value is bound to x as the last statement of the function body the compiler assumes that x is.
13158 	X	if you want that and also want.
13159 	X	second the expression result append requires an extra attribute lookup and third theres a speed reduction from having to make all those function.
13160 	X	rather you or the wxpythonwindow class should create a native interpreter.
13161 	X	answer unfortunately the interpreter pushes at least one c stack frame for each python stack.
13162 	X	in fact it can be better because an interface specification cannot test certain properties of a.
13163 	X	setup must end in a newline if there is no newline there the build process.
13164 	X	there is a newsgroup newsgroup comp lang python and a mailing list python list http mail python org mailman listinfo python list.
13165 	X	the port includes support for macos and macos xs carbon.
13166 	X	one idea is to use the queue module http docs python org library queue to create a queue object let each thread append a token to the queue when it finishes and let the main thread read as many tokens from the queue as there are.
13167 	X	how do i avoid blocking in the connect method of a socket.
13168 	X	consequently the print x attempts to print an uninitialized local variable and will trigger a nameerror.
13169 	X	i i j j i j.
13170 	X	will continue to work with the old version of the imported.
13171 	X	it is easy to connect that window to the python.
13172 	X	also extensions can call back into python at almost random.
13173 	X	for example the append method is expected to add new elements to the end of some internal list an interface specification cannot test that your append implementation will actually do this correctly but its an appropriate testing discipline can help build large complex applications in python as well as having interface specifications.
13174 	X	fixing this requires some ugly shell script hackery and this bug is so minor that it doesnt seem worth the.
13175 	X	the newsgroup and mailing list are gatewayed into each other if you can read news its unnecessary to subscribe to the mailing.
13176 	X	by installing the pyobjc objective c bridge http pyobjc sourceforge net python programs can use macos xs cocoa.
13177 	X	the select module is commonly used to help with asynchronous i o on.
13178 	X	the solution is to insert an explicit global declaration at the start of the function the solution is to insert an explicit global declaration at the start of the function.
13179 	X	then integer division has to return the.
13180 	X	a class is the particular object type created by executing a class.
13181 	X	if the module contains class definitions existing class instances will not be updated to use the new class.
13182 	X	you can redirect pythons i o to any object that supports read and write so all you need is a python object defined in your extension module that contains read and write.
13183 	X	therefore a complete threads implementation requires thread support for c.
13184 	X	in fact it can be better because an interface specification cannot test certain properties of a.
13185 	X	how do i debug an extension.
13186 	X	newsgroup comp lang python is high traffic receiving hundreds of postings every day and usenet readers are often more able to cope with this.
13187 	X	see the documentation that comes with the mac.
13188 	X	instead of trying to guess how long a func time sleep delay will be enough its better to use some kind of semaphore.
13189 	X	to prevent the tcp connect from blocking you can set the socket to non blocking.
13190 	X	def f global x print x try to print the global for j in range if q x global x print x try to print the global for j in range if q x.
13191 	X	c also requires that identity to hold and then compilers that truncate i j need to make i j have the same sign as i.
13192 	X	class objects are used as templates to create instance objects which embody both the data attributes and code methods specific to a.
13193 	X	this can result in the following paradoxical behaviour.
13194 	X	using a python shell script to put up a python interpreter window from inside your windows app is not a good idea the resulting window will be independent of your apps windowing.
13195 	X	answer fortunately there is stackless python http www stackless com which has a completely redesigned interpreter loop that avoids the c.
13196 	X	for example the meth append method is expected to add new elements to the end of some internal list an interface specification cannot test that your meth append implementation will actually do this correctly but its trivial to check this property in a test.
13197 	X	when using gdb with dynamically loaded extensions you cant set a breakpoint in your extension until your extension is.
13198 	X	announcements of new software releases and events can be found in comp lang python announce a low traffic moderated list that receives about five postings per.
13199 	X	pythonwin http python org doc windows by mark hammond includes an interface to the microsoft foundation classes and a python programming environment using it thats written mostly in.
13200 	X	one idea is to use the mod queue module to create a queue object let each thread append a token to the queue when it finishes and let the main thread read as many tokens from the queue as there are.
13201 	X	then when you do the connect you will either connect immediately unlikely or get an exception that contains the error number as errno.
13202 	X	in this case all references to x are interpreted as references to the x from the module.
13203 	X	then integer division has to return the.
13204 	X	a class can be based on one or more other classes called its base class es.
13205 	X	import cls c cls c create an instance of c reload cls isinstance c cls c isinstance is false.
13206 	X	rather you or the wxpythonwindow class should create a native interpreter.
13207 	X	its still experimental but looks very.
13208 	X	writing test suites is very helpful and you might want to design your code with an eye to making it easily.
13209 	X	when using gdb with dynamically loaded extensions you cant set a breakpoint in your extension until your extension is.
13210 	X	its available as the python announce mailing list http mail python org mailman listinfo python announce list.
13211 	X	how do i freeze tkinter applications.
13212 	X	how do i parcel out work among a bunch of worker threads.
13213 	X	errno einprogress indicates that the connection is in progress but hasnt finished.
13214 	X	in this case all references to x are interpreted as references to the x from the module.
13215 	X	c also requires that identity to hold and then compilers that truncate i j need to make i j have the same sign as i.
13216 	X	it then inherits the attributes and methods of its base.
13217 	X	for reasons of efficiency as well as consistency python only reads the module file on the first time a module is.
13218 	X	it is easy to connect that window to the python.
13219 	X	although it is binary compatible with standard python its still unclear whether stackless will make it into the core maybe its just too.
13220 	X	one increasingly popular technique test directed development calls for writing parts of the test suite first before you write any of the actual.
13221 	X	in your gdbinit file or interactively add the command.
13222 	X	comp lang python announce a low traffic moderated list that receives about five postings per.
13223 	X	freeze is a tool to create stand alone.
13224 	X	use the queue module http docs python org library queue to create a queue containing a list of.
13225 	X	different oses will return different values so youre going to have to check whats returned on your.
13226 	X	what are the rules for local and global variables in python.
13227 	X	there are few real use cases for i j when j is.
13228 	X	this allows an object model to be successively refined by.
13229 	X	if it didnt in a program consisting of many modules where each one imports the same basic module the basic module would be parsed and re parsed many.
13230 	X	you can redirect pythons i o to any object that supports read and write so all you need is a python object defined in your extension module that contains read and write.
13231 	X	answer unfortunately the interpreter pushes at least one c stack frame for each python stack.
13232 	X	of course python allows you to be sloppy and not write test cases at.
13233 	X	br pyimport loaddynamicmodule br pyimport loaddynamicmodule.
13234 	X	its available as the python announce mailing list http mail python org mailman listinfo python announce list.
13235 	X	when freezing tkinter applications the applications will not be truly stand alone as the application will still need the tcl and tk.
13236 	X	the queue class maintains a list of objects with put obj to add an item to the queue and get to return an.
13237 	X	you can use the connect ex method to avoid creating an.
13238 	X	in python variables that are only referenced inside a function are implicitly.
13239 	X	when j is positive there are many and in virtually all of them its more useful for i j to be.
13240 	X	you might have a generic mailbox class that provides basic accessor methods for a mailbox and subclasses such as mboxmailbox maildirmailbox outlookmailbox that handle various specific mailbox.
13241 	X	to force rereading of a changed module do this.
13242 	X	how do i use python for cgi.
13243 	X	also extensions can call back into python at almost random.
13244 	X	writing test suites is very helpful and you might want to design your code with an eye to making it easily.
13245 	X	more info about other mailing lists and newsgroups can be found at http www python org community lists.
13246 	X	freeze is a tool to create stand alone.
13247 	X	the class will take care of the locking necessary to ensure that each job is handed out exactly.
13248 	X	it will just return the errno.
13249 	X	if a variable is assigned a new value anywhere within the functions body its assumed to be a.
13250 	X	if the clock says now what did it say hours ago is useful is a bug waiting to is positive there are many and in virtually all of them its more useful for i j to be.
13251 	X	a class is the particular object type created by executing a class.
13252 	X	on the microsoft iis server or on the win ms personal web server you set up python in the same way that you would set up any other scripting.
13253 	X	from python checkins at python org georg brandl subject python checkins r in sandbox trunk faq design rst extending rst general rst gui rst programming rst message id.
13254 	X	fix remaining links that either are now internal or now must be.
13255 	X	modified sandbox trunk faq design rst sandbox trunk faq extending rst sandbox trunk faq general rst sandbox trunk faq gui rst sandbox trunk faq programming rst.
13256 	X	modified sandbox trunk faq design rst sandbox trunk faq design rst sun oct if expected result epsilon computation expected result epsilon.
13257 	X	please see the chapter on floating point arithmetic http docs python org tutorial floatingpoint in the python tutorial for more.
13258 	X	please see the chapter on ref floating point arithmetic tut fp issues in the python tutorial for more.
13259 	X	you can do this easily enough with a sequence of el el else.
13260 	X	there have been some proposals for switch statement syntax but there is no consensus yet on whether and how to do range.
13261 	X	see pep http python org dev peps pep for complete details and the current.
13262 	X	consensus yet on whether and how to do range.
13263 	X	see pep for complete details and the current.
13264 	X	for cases where you need to choose from a very large number of possibilities you can create a dictionary mapping case values to functions to.
13265 	X	several projects described in the python newsgroup or at past python conferences community workshops have shown that this approach is feasible conferences http python org community workshops have shown that this approach is feasible although the speedups reached so far are only modest e g x.
13266 	X	jython uses the same strategy for compiling to java.
13267 	X	jim hugunin has demonstrated that in combination with whole program analysis speedups of x are feasible for small demo.
13268 	X	see the proceedings from the python conference community workshops proceedings for more.
13269 	X	http python org community workshops proceedings for more.
13270 	X	internally python source code is always translated into a bytecode representation and this bytecode is then executed by the python virtual.
13271 	X	modified sandbox trunk faq extending rst sandbox trunk faq extending rst sun oct.
13272 	X	yes you can create built in modules containing functions variables exceptions and even new types in c.
13273 	X	this is explained in the document extending and embedding the python interpreter http docs python org ext ext html.
13274 	X	and even new types in c.
13275 	X	this is explained in the document ref extending index.
13276 	X	most intermediate or advanced python books will also cover this.
13277 	X	modified sandbox trunk faq general rst sandbox trunk faq general rst sun oct unmodified or to sell products that incorporate python in some.
13278 	X	we would still like to know about all commercial use of python of.
13279 	X	see the psf license page psf license to find further explanations and a link to the full text of the.
13280 	X	see the psf license page http python org psf license to find further explanations and a link to the full text of the.
13281 	X	the python logo is trademarked and in certain cases permission is required to use.
13282 	X	consult the trademark usage policy python versions are numbered a b c or a b a is the major version number it is only incremented for really major changes in the.
13283 	X	b is the minor version number incremented for less earth shattering.
13284 	X	c is the micro level it is incremented for each bugfix.
13285 	X	see pep dev peps pep for more information about bugfix.
13286 	X	micro level it is incremented for each bugfix.
13287 	X	see pep for more information about bugfix.
13288 	X	in the run up to a new major release a series of development releases are made denoted as alpha beta or release xxx adapt link to dev guide.
13289 	X	for more information on how python is developed consult the python developers guide dev.
13290 	X	are there any published articles about python that i can reference.
13291 	X	guaranteed that interfaces will remain the same throughout a series of bugfix.
13292 	X	the release download is recommended production ready version at this point in.
13293 	X	python is also considered production ready but may be less useful since currently there is more third party software available for python than for python python code will generally not run unchanged in python xxx this gets out of date pretty often.
13294 	X	the release http python org download is recommended production ready version at this point in.
13295 	X	python is also considered production ready but may be less useful since currently there is more third party software available for python than for python python code will generally not run unchanged in python.
13296 	X	how many people are using python.
13297 	X	providing a gradual upgrade path is necessary if a feature has to be.
13298 	X	for introducing backward incompatible changes while minimizing disruption for.
13299 	X	pep describes the procedure followed for introducing backward incompatible changes while minimizing disruption for.
13300 	X	modified sandbox trunk faq gui rst sandbox trunk faq gui rst sun oct can use macos xs cocoa.
13301 	X	see the documentation that comes with the mac.
13302 	X	pythonwin http python org doc windows by mark hammond includes an interface to the microsoft foundation classes and a python programming environment using it thats written mostly in.
13303 	X	ref pythonwin windows faq by mark hammond includes an interface to the microsoft foundation classes and a python programming environment using it thats written mostly in.
13304 	X	modified sandbox trunk faq programming rst sandbox trunk faq programming rst sun oct search of the standard library found remarkably few places where using an if then else expression would make the code more.
13305 	X	in pep dev peps pep was written proposing several possible syntaxes and the community was asked to vote on the.
13306 	X	most people liked one of the syntaxes but also hated other syntaxes many votes implied that people preferred no ternary operator rather than having a syntax they.
13307 	X	in pep was written proposing several possible syntaxes and the community was asked to vote on the.
13308 	X	most people liked one of the syntaxes but also hated other syntaxes many votes implied that people preferred no ternary operator rather than having a syntax they.
13309 	X	is it possible to write obfuscated one liners in python.
13310 	X	for red hat install the python devel rpm to get the necessary.
13311 	X	most people learn to love this feature after.
13312 	X	you can then use isinstance and issubclass to check whether an instance or a class implements a particular.
13313 	X	since reading stdin when it is empty results in an ioerror this error is caught and.
13314 	X	are there coding standards or a style guide for python programs.
13315 	X	to convert e the number to the string use the built in function str.
13316 	X	another way to avoid cyclical references is to use the weakref module which allows you to point to objects without incrementing their reference.
13317 	X	conky foo is not a directory conky foo is a directory conky foo media is a directory conky foo media is not a directory.
13318 	X	for debian run apt get install python dev.
13319 	X	since there are no begin end brackets there cannot be a disagreement between grouping perceived by the parser and the human.
13320 	X	the collections modules defines a set of useful abcs such as iterable container and mutablemapping.
13321 	X	how do i program using threads.
13322 	X	the coding style required for standard library modules is documented as pep dev peps pep.
13323 	X	if you want a hexadecimal or octal representation use the built in functions hex or oct.
13324 	X	tree data structures for instance should use weak references for their parent and sibling references if they need them.
13325 	X	cgi py or other cgi programming doesnt work sometimes on nt or win.
13326 	X	what does systemerror pyimport fixupextension module yourmodule not loaded mean.
13327 	X	occasionally c programmers will encounter a fragment of code like this.
13328 	X	for python many of the advantages of interface specifications can be obtained by an appropriate test discipline for.
13329 	X	be sure to use the threading module http docs python org library threading and not the thread.
13330 	X	for fancy formatting use the operator http docs python org library stdtypes string formatting operations on strings e g d yields and yields.
13331 	X	if the object has ever been a local variable in a function that caught an expression in an except clause chances are that a reference to the object still exists in that functions stack frame as contained in the stack.
13332 	X	be sure you have the latest python exe that you are using python exe rather than a gui version of python and that you have configured the server to execute.
13333 	X	this means that you have created an extension module named yourmodule but your module init function does not initialize with that.
13334 	X	if x y x y z.
13335 	X	there is also a tool pychecker which can be used to find problems due to.
13336 	X	the threading module builds convenient abstractions on top of the low level primitives provided by the thread.
13337 	X	how do i speed it up.
13338 	X	see the library reference manual for.
13339 	X	normally calling sys exc clear will take care of this by clearing the last recorded.
13340 	X	every module init function will have a line similar to.
13341 	X	only the x statement is executed if the condition is true but the indentation leads you to believe.
13342 	X	a good test suite for a module can both provide a regression test and serve as a module interface specification and a set of.
13343 	X	aahz has a set of slides from his threading tutorial that are helpful see http starship python net crew aahz oscon.
13344 	X	how do i modify a string in place.
13345 	X	finally if your del method raises an exception a warning message is printed to sys.
13346 	X	module py initmodule yourmodule yourmodule functions.
13347 	X	even experienced c programmers will sometimes stare at it a long time wondering why y is were decremented even for x y.
13348 	X	many python modules can be run as a script to provide a simple self.
13349 	X	none of my threads seem to run why.
13350 	X	there are many tricks to speed up python code consider rewriting parts in c as a last.
13351 	X	how do i get a list of all instances of a given class.
13352 	X	the u unbuffered option on nt and win prevents the interpreter from altering newlines in the standard input and.
13353 	X	if the string passed to this function is not the same name as your extension module the systemerror exception will be.
13354 	X	because there are no begin end brackets python is much less prone to coding style.
13355 	X	even modules which use complex external interfaces can often be tested in isolation using trivial stub emulations of the external.
13356 	X	as soon as the main thread exits all threads are.
13357 	X	in some cases its possible to automatically translate python to c or x assembly language meaning that you dont have to modify your code to gain increased.
13358 	X	if you need an object with this ability try converting the string to a list or use the array module.
13359 	X	python does not keep track of all instances of a class or of a built in type.
13360 	X	without it post multipart requests will seem to have the wrong length and binary e g.
13361 	X	how do i tell incomplete input from invalid input.
13362 	X	in c there are many different ways to place the.
13363 	X	the doctest and unittest modules or third party test frameworks can be used to construct exhaustive test suites that exercise every line of code in a.
13364 	X	your main thread is running too quickly giving the threads no time to do any.
13365 	X	pyrex http www cosc canterbury ac nz greg python pyrex can compile a slightly modified version of python code into a c extension and can be used on many different.
13366 	X	you can program the classs constructor to keep track of all instances by keeping a list of weak references to each.
13367 	X	gif responses may get garbled resulting in broken images pdf files and other binary downloads failing.
13368 	X	sometimes you want to emulate the python interactive interpreters behavior where it gives you a continuation prompt when the input is incomplete e g you typed the start of an if statement or you didnt close your parentheses or triple string quotes but it gives you a syntax error message immediately when the input is.
13369 	X	if youre used to reading and writing code that uses one style you will feel at least slightly uneasy when reading or were required to write another.
13370 	X	an appropriate testing discipline can help build large complex applications in python as well as having interface specifications.
13371 	X	a simple fix is to add a sleep to the end of the program thats long enough for all the threads to finish.
13372 	X	psyco http psyco sourceforge net is a just in time compiler that translates python code into x assembly.
13373 	X	import array a array array c s print a array c hello world a y print a array c yello world a tostring yello world.
13374 	X	modules how do i create a pyc file.
13375 	X	why doesnt os popen work in pythonwin on nt.
13376 	X	in python you can use the codeop module which approximates the parsers behavior.
13377 	X	many coding styles place begin end brackets on a line by.
13378 	X	in fact it can be better because an interface specification cannot test certain properties of a.
13379 	X	if you can use it psyco can provide dramatic speedups for critical.
13380 	X	how do i use strings to call functions methods.
13381 	X	when a module is imported for the first time or when the source is more recent than the current compiled file a pyc file containing the compiled code should be created in the same directory as the py.
13382 	X	the reason that os popen doesnt work from within pythonwin is due to a bug in microsofts c runtime library crt.
13383 	X	this makes programs considerably longer and wastes valuable screen space making it harder to get a good overview of a.
13384 	X	for example the append method is expected to add new elements to the end of some internal list an interface specification cannot test that your append implementation will actually do this correctly but its trivial to check this property in a test.
13385 	X	def thread task name n for i in range n print name i.
13386 	X	the rest of this answer will discuss various tricks for squeezing a bit more speed out of python.
13387 	X	one reason that a pyc file may not be created is permissions problems with the.
13388 	X	the crt assumes you have a win console attached to the.
13389 	X	the easiest way to do it in c is to call pyrun interactiveloop perhaps in a separate thread and let the python interpreter handle the input for.
13390 	X	ideally a function should fit on one screen say lines.
13391 	X	writing test suites is very helpful and you might want to design your code with an eye to making it easily.
13392 	X	for i in range t threading thread target thread task args str i i t start.
13393 	X	never apply any optimization tricks unless you know you need them after profiling has indicated that a particular function is the heavily executed hot spot in the.
13394 	X	the best is to use a dictionary that maps strings to.
13395 	X	this can happen for example if you develop as one user but run as another such as if you are testing with a web.
13396 	X	you should use the winpipe modules popen instead which doesnt depend on having an attached win.
13397 	X	you can also set the pyos readlinefunctionpointer to point at your custom input.
13398 	X	lines of python can do a lot more work than lines of c.
13399 	X	one increasingly popular technique test directed development calls for writing parts of the test suite first before you write any of the actual.
13400 	X	optimizations almost always make the code less clear and you shouldnt pay the costs of reduced clarity increased development time greater likelihood of bugs unless the resulting performance benefit is worth.
13401 	X	the primary advantage of this technique is that the strings do not need to match the names of the.
13402 	X	creation of a pyc file is automatic if youre importing a module and python has the ability permissions free space to write the compiled module back to the.
13403 	X	import winpipe f winpipe popen dir c c print f readlines f close.
13404 	X	see modules readline c and parser myreadline c for more.
13405 	X	this is not solely due to the lack of begin end brackets the lack of declarations and the high level data types are also responsible but the indentation based syntax certainly.
13406 	X	of course python allows you to be sloppy and not write test cases at.
13407 	X	but now on many platforms the threads dont run in parallel but appear to run sequentially one at a time.
13408 	X	there is a page on the wiki devoted to performance tips http wiki python org moin pythonspeed performancetips.
13409 	X	this is also the primary technique used to emulate a case construct.
13410 	X	running python on a top level script is not considered an import and no pyc will be.
13411 	X	why doesnt os popen winpipe popen work on winx.
13412 	X	however sometimes you have to run the embedded python interpreter in the same thread as your rest application and you cant allow the pyrun interactiveloop to stop while waiting for user.
13413 	X	why am i getting strange results with simple arithmetic operations.
13414 	X	why are default values shared between objects.
13415 	X	the reason is that the os thread scheduler doesnt start a new thread until the previous thread is.
13416 	X	guido van rossum has written up an anecdote related to optimization at http www python org doc essays liststr.
13417 	X	for example if you have a top level module abc py that imports another module xyz py when you run abc xyz pyc will be created since xyz is imported but no abc pyc file will be created since abc py isnt were.
13418 	X	there is a bug in winx that prevents os popen winpipe popen from.
13419 	X	the one solution then is to call pyparser parsestring and test for e error equal to e eof which means the input is incomplete.
13420 	X	this type of bug commonly bites neophyte.
13421 	X	a simple fix is to add a tiny sleep to the start of the run function.
13422 	X	one thing to notice is that function and especially method calls are rather expensive if you have designed a purely oo interface with lots of tiny functions that dont do much more than get or set an instance variable or call another method you might consider using a more direct way such as directly accessing instance.
13423 	X	if you need to create abc pyc that is to create a pyc file for a module that is not imported you can using the py compile and compileall.
13424 	X	the good news is there is a way to work around this.
13425 	X	heres a sample code fragment untested inspired by code from alex farber.
13426 	X	why are floating point calculations so inaccurate.
13427 	X	def thread task name n time sleep for i in range n print name i.
13428 	X	also see the standard module profile described in the library reference manual http docs python org library profile html which makes it possible to find out where your program is spending most of its time if you have some patience the profiling itself can slow your program down by an order of magnitude.
13429 	X	dispatch go a stop b note lack of parens for funcs.
13430 	X	the py compile module can manually compile any.
13431 	X	the microsoft knowledge base article that you need to lookup is.
13432 	X	include python h include node h include errcode h include grammar h include parsetok h include compile h.
13433 	X	people are often very surprised by results like this.
13434 	X	def foo d danger shared reference to one dict for all calls compute something d key value return d.
13435 	X	for i in range t threading thread target thread task args str i i t start.
13436 	X	remember that many standard optimization heuristics you may know from other programming experience may well apply to.
13437 	X	dispatch get input note trailing parens to call function.
13438 	X	one way is to use the compile function in that module interactively.
13439 	X	you will find links to the knowledge base at http www microsoft com.
13440 	X	int testcomplete char code code should end in n return for error for incomplete for complete node n perrdetail e.
13441 	X	the first time you call this function d contains a single.
13442 	X	for example it may be faster to send output to output devices using larger writes rather than smaller ones in order to reduce the overhead of kernel system.
13443 	X	use the built in function getattr.
13444 	X	import py compile py compile compile abc py.
13445 	X	pyrun simplefile crashes on windows but not on unix why.
13446 	X	n pyparser parsestring code pyparser grammar py file input e if n null if e error e eof return return.
13447 	X	and think it is a bug in.
13448 	X	the second time d contains two items because when foo begins executing d starts out with an item already in.
13449 	X	instead of trying to guess how long a time sleep delay will be enough its better to use some kind of semaphore.
13450 	X	thus cgi scripts that write all output in one shot may be faster than those that write lots of small pieces of.
13451 	X	this will write the pyc to the same location as abc py or you can override that with the optional parameter cfile.
13452 	X	this is very sensitive to the compiler vendor version and perhaps even.
13453 	X	this has nothing to do with python but with how the underlying c platform handles floating point numbers and ultimately with the inaccuracies introduced when writing down numbers as a string of a fixed number of.
13454 	X	it is often expected that a function call creates new objects for default.
13455 	X	one idea is to use the queue module http docs python org library queue to create a queue object let each thread append a token to the queue when it finishes and let the main thread read as many tokens from the queue as there are.
13456 	X	also be sure to use pythons core features where.
13457 	X	note that getattr works on any object including classes class instances modules and so.
13458 	X	you can also automatically compile all files in a directory or directories using the compileall.
13459 	X	if the file structure in your embedding program isnt the same as is assumed by the python interpreter it wont.
13460 	X	another solution is trying to compile the received string with py compilestring.
13461 	X	the internal representation of floating point numbers uses a fixed number of binary digits to represent a decimal.
13462 	X	how do i parcel out work among a bunch of worker threads.
13463 	X	for example slicing allows programs to chop up lists and other sequence objects in a single tick of the interpreters mainloop using highly optimized c.
13464 	X	this is used in several places in the standard library like this.
13465 	X	you can do it from the shell prompt by running compileall py and providing the path of a directory containing python files to compile.
13466 	X	if it compiles without errors try to execute the returned code object by calling pyeval evalcode.
13467 	X	some decimal numbers cant be represented exactly in binary resulting in small roundoff.
13468 	X	default values are created exactly once when the function is.
13469 	X	use the queue module http docs python org library queue to create a queue containing a list of.
13470 	X	thus to get the same effect as.
13471 	X	dlls python dll are all compiled with ms vc and with multithreading dll options md.
13472 	X	if that object is changed like the dictionary in this example subsequent calls to the function will refer to this changed.
13473 	X	the queue class maintains a list of objects with put obj to add an item to the queue and get to return an.
13474 	X	l for i in range l append l i.
13475 	X	how do i find the current module name.
13476 	X	if you cant change compilers or flags try using py.
13477 	X	if the compilation fails find out if its an error or just more input is required by extracting the message string from the exception tuple and comparing it to the string unexpected eof while parsing.
13478 	X	equals equals resulting in the binary fractional number.
13479 	X	by definition immutable objects such as numbers strings tuples and none are safe from.
13480 	X	the class will take care of the locking necessary to ensure that each job is handed out exactly.
13481 	X	it is much shorter and far faster to use.
13482 	X	f getattr foo instance do opname f.
13483 	X	a module can find out its own module name by looking at the predefined global variable name.
13484 	X	a trick to get it to run an arbitrary file is to construct a call to execfile with the name of your file as.
13485 	X	here is a complete example using the gnu readline library you may want to ignore sigint while calling readline.
13486 	X	floating point numbers only have or bits of precision so the digits are cut off at some point and the resulting number is in decimal not.
13487 	X	changes to mutable objects such as dictionaries lists and class instances can lead to.
13488 	X	l list l list is redundant if l is a.
13489 	X	use locals or eval to resolve the function name.
13490 	X	if this has the value main the program is running as a.
13491 	X	also note that you can not mix and match debug and release.
13492 	X	include stdio h include readline h.
13493 	X	a floating point numbers repr function prints as many digits are necessary to make eval repr f f true for any float f.
13494 	X	because of this feature it is good programming practice to not use mutable objects as default.
13495 	X	note that the functionally oriented builtins such as map zip and friends can be a convenient accelerator for loops that perform a single.
13496 	X	many modules that are usually used by importing them also provide a command line interface or a self test and only execute this code after checking name.
13497 	X	if you wish to use the debug multithreaded dll then your module must have an d appended to the base.
13498 	X	include python h include object h include compile h include eval h.
13499 	X	the str function prints fewer digits and this often results in the more sensible number that was probably intended.
13500 	X	instead use none as the default value and inside the function check if the parameter is none and create a new list dictionary whatever if it.
13501 	X	the worker thread gets jobs off the.
13502 	X	for example to pair the elements of two lists together.
13503 	X	def main print running if name main main.
13504 	X	importing tkinter fails on windows why.
13505 	X	py initialize loc pydict new glb pydict new pydict setitemstring glb builtins pyeval getbuiltins.
13506 	X	when the queue is empty it assumes there will be no more work and.
13507 	X	how can i have modules that mutually import each other.
13508 	X	sometimes the import of tkinter fails on windows or complaining with a message like the following.
13509 	X	one of the consequences of this is that it is error prone to compare the result of some computation to a float with.
13510 	X	or to compute a number of sines.
13511 	X	note using eval is slow and.
13512 	X	suppose you have the following modules.
13513 	X	importerror dll load failed one of the library files needed to run this application cannot be.
13514 	X	if null line ctrl d pressed done else i strlen line.
13515 	X	def foo dict none if dict is none dict create a new dict for local namespace.
13516 	X	def worker print running worker time sleep while true try arg q get block false except queue empty print worker threading currentthread print queue empty break else print worker threading currentthread print running with argument arg time sleep.
13517 	X	the operation completes very quickly in such.
13518 	X	if you dont have absolute control over the contents of the string someone could pass a string that resulted in an arbitrary function were.
13519 	X	from bar import bar var foo var.
13520 	X	it could be that you havent installed tcl tk but if you did install tcl tk and the wish application works correctly the problem may be that its installer didnt manage to edit the autoexec bat file.
13521 	X	if i add history line save non empty lines.
13522 	X	instead you have to check that the difference between the two numbers is less than a certain threshold.
13523 	X	other examples include the join and split methods of string.
13524 	X	is there an equivalent to perls chomp for removing trailing newlines from strings.
13525 	X	from foo import foo var bar var.
13526 	X	it tries to add a statement that changes the path environment variable to include the tcl tk bin subdirectory but sometimes this edit doesnt quite.
13527 	X	if null code nothing in code yet j else j strlen code.
13528 	X	epsilon tiny allowed error expected result.
13529 	X	when you have a function thats time consuming to compute a common technique is to cache the parameters and the resulting value of each call to the function and return the cached value if the same value is requested.
13530 	X	start a pool of workers for i in range t threading thread target worker name worker i i t start.
13531 	X	for example if s are large k strings then join sssssss may be far faster than the more obvious s s s s s s s since the summation will compute many subexpressions whereas join does all the copying in one.
13532 	X	starting with python you can use s rstrip r n to remove all occurences of any line terminator from the end of the string s without removing other trailing.
13533 	X	the problem is that the interpreter will perform the following steps.
13534 	X	opening it with notepad usually reveals what the problem.
13535 	X	code realloc code i j if null code out of memory exit.
13536 	X	if expected result epsilon computation expected result epsilon.
13537 	X	this is called memoizing and can be implemented like this.
13538 	X	begin adding work to the queue for i in range q put i.
13539 	X	for manipulating strings use the replace method on string.
13540 	X	if the string s represents more than one line with several empty lines at the end the line terminators for all the blank lines will be removed.
13541 	X	main imports foo empty globals for foo are created foo is compiled and starts executing foo imports bar empty globals for bar are created bar is compiled and starts executing bar imports foo which is a no op since there already is a module named foo bar foo var foo foo var.
13542 	X	one additional hint noted by david szafranski you cant use long filenames here e g use c progra tcl bin instead of c program files tcl bin.
13543 	X	if j code was empty so code keep strncat happy.
13544 	X	please see the chapter on floating point arithmetic http docs python org tutorial floatingpoint in the python tutorial for more.
13545 	X	callers will never provide a third parameter for this.
13546 	X	give threads time to run print main thread sleeping time sleep.
13547 	X	use regular expressions only when youre not dealing with constant string.
13548 	X	lines line r n r n r n lines rstrip n r line.
13549 	X	the last step fails because python isnt done with interpreting foo yet and the global symbol dictionary for foo is still.
13550 	X	how do i extract the downloaded documentation on windows.
13551 	X	strncat code line i append line to code code i j n append n to code code i j.
13552 	X	def expensive arg arg cache if cache has key arg arg return cache arg arg.
13553 	X	when run this will produce the following output.
13554 	X	consider using the string formatting operations string tuple and string dictionary.
13555 	X	since this is typically only desired when reading text one line at a time using s rstrip this way works.
13556 	X	the same thing happens when you use import foo and then try to access foo foo var in global.
13557 	X	sometimes when you download the documentation package to a windows machine using a web browser the file extension of the saved file ends up were.
13558 	X	src py compilestring code stdin py single input.
13559 	X	calculate the value result expensive computation cache arg arg result store result in the cache return result you could use a global variable containing a dictionary instead of the default value its a matter of.
13560 	X	running worker running worker running worker running worker running worker main thread sleeping worker thread worker started running with argument worker thread worker started running with argument worker thread worker started running with argument worker thread worker started running with argument worker thread worker started running with argument worker thread worker started running with argument.
13561 	X	be sure to use the list sort builtin method to do sorting and see the sorting mini howto http wiki python org moin howto sorting for examples of moderately advanced.
13562 	X	for older versions of python there are two partial substitutes.
13563 	X	there are at least three possible workarounds for this.
13564 	X	this is a mistake the extension should be.
13565 	X	one is performance knowing that a string is immutable means we can allocate space for it at creation time and the storage requirements are fixed and.
13566 	X	consult the modules documentation for more details the queue class provides a featureful.
13567 	X	list sort beats other techniques for sorting in all but the most extreme.
13568 	X	if you want to remove all trailing whitespace use the rstrip method of string.
13569 	X	guido van rossum recommends avoiding all uses of from module import and placing all code inside.
13570 	X	simply rename the downloaded file to have the tgz extension and winzip will be able to handle.
13571 	X	src compiled just fine if ps prompt or n code i j and double n so execute it dum pyeval evalcode pycodeobject src glb loc py xdecref dum py xdecref src free code code null if pyerr occurred pyerr print prompt ps syntax error or e eof else if pyerr exceptionmatches pyexc syntaxerror pyerr fetch exc val trb clears exception.
13572 	X	this is also one of the reasons for the distinction between tuples and.
13573 	X	you can use exceptions to provide a structured goto that even works across function.
13574 	X	what kinds of global value mutation are thread safe.
13575 	X	another common trick is to push loops into functions or.
13576 	X	this removes all trailing whitespace not just a single.
13577 	X	initializations of global variables and class variables should use constants or built in functions.
13578 	X	if your copy of winzip doesnt get a newer one from http www winzip.
13579 	X	if pyarg parsetuple val so msg obj strcmp msg unexpected eof while parsing e eof py xdecref exc py xdecref val py xdecref trb prompt ps else some other syntax error pyerr restore exc val trb pyerr print free code code null prompt ps else some non syntax error pyerr print free code code null prompt ps.
13580 	X	another advantage is that strings in python are considered as elemental as.
13581 	X	many feel that exceptions can conveniently emulate all reasonable uses of the go or goto constructs of c fortran and other.
13582 	X	a global interpreter lock gil is used internally to ensure that only one thread runs in the python vm at a.
13583 	X	for example suppose you have a program that runs slowly and you use the profiler to determine that a python function ff is were called lots of.
13584 	X	otherwise if there is only one line in the string s use s splitlines.
13585 	X	this means everything from an imported module is referenced as module.
13586 	X	missing cwmt dll or missing cw dll.
13587 	X	no amount of activity will change the value to anything else and in python no amount of activity will change the string eight to anything.
13588 	X	class label pass declare a label.
13589 	X	in general python offers to switch among threads only between bytecode instructions how frequently it switches can be set via sys setcheckinterval.
13590 	X	is there a scanf or sscanf equivalent.
13591 	X	jim roskind suggests performing steps in the following order in each module.
13592 	X	sometimes when using tkinter on windows you get an error that cwmt dll or cw dll is.
13593 	X	how do i find undefined g symbols builtin new or pure virtual.
13594 	X	why must self be used explicitly in method definitions and calls.
13595 	X	try if condition raise label goto label except label where to goto pass.
13596 	X	each bytecode instruction and therefore all the c implementation code reached from each instruction is therefore atomic from the point of view of a python.
13597 	X	def ff x do something with x computing return result.
13598 	X	exports globals functions and classes that dont need imported base classes import statements active code including globals that are initialized from imported values.
13599 	X	cause you have an old tcl tk dll built with cygwin in your path probably c windows.
13600 	X	to dynamically load g extension modules you must recompile python relink it using g change linkcc in the python modules makefile and link your extension module using g e g shared o mymodule so mymodule o.
13601 	X	the idea was borrowed from modula it turns out to be very useful for a variety of.
13602 	X	this doesnt allow you to jump into the middle of a loop but thats usually considered an abuse of goto.
13603 	X	in theory this means an exact accounting requires an exact understanding of the pvm bytecode.
13604 	X	tends to be called in loops like.
13605 	X	for simple input parsing the easiest approach is usually to split the line into whitespace delimited words using the split method of string objects and then convert decimal strings to numeric values using int or float.
13606 	X	van rossum doesnt like this approach much because the imports appear in a strange place but it does.
13607 	X	you must use the tcl tk dlls from the standard tcl tk installation python comes with one.
13608 	X	can i create an object class with some methods implemented in c and others in python e g through inheritance.
13609 	X	first its more obvious that you are using a method or instance attribute instead of a local.
13610 	X	why cant raw strings r strings end with a backslash.
13611 	X	in practice it means that operations on shared variables of builtin data types ints lists dicts etc that look atomic really.
13612 	X	split supports an optional sep parameter which is useful if the line uses something other than whitespace as a.
13613 	X	matthias urlichs recommends restructuring your code so that the recursive import is not necessary in the first.
13614 	X	warning about ctld version from installer.
13615 	X	in python you can inherit from builtin classes such as int list dict.
13616 	X	reading self x or self meth makes it absolutely clear that an instance variable or method is used even if you dont know the class definition by.
13617 	X	more precisely they cant end with an odd number of backslashes the unpaired backslash at the end escapes the closing quote character leaving an unterminated.
13618 	X	for example the following operations are all atomic l l l are lists d d d are dicts x y are objects i j are ints.
13619 	X	for x in sequence value ff x do something with.
13620 	X	for more complicated input parsing regular expressions more powerful than cs sscanf and better suited for the.
13621 	X	the python installer issues a warning like this.
13622 	X	the boost python library bpl http www boost org libs python doc index html provides a way of doing this from c i e you can inherit from an extension class written in c using the bpl.
13623 	X	in c you can sort of tell by the lack of a local variable declaration assuming globals are rare or easily recognizable but in python there are no local variable declarations so youd have to look up the class definition to be.
13624 	X	raw strings were designed to ease creating input for processors chiefly regular expression engines that want to do their own backslash escape.
13625 	X	l extend l x l i x l pop l sort x y x field y d x y d keys.
13626 	X	then you can often eliminate function call overhead by rewriting ff to.
13627 	X	what does unicodeerror ascii decodingencoding error ordinal not in range mean.
13628 	X	import x y z returns module x how do i get z try.
13629 	X	this version uses ctld dll which is not the correct.
13630 	X	when importing module x why do i get undefined symbol pyunicodeucs.
13631 	X	some c and java coding standards call for instance attributes to have an m prefix so this explicitness is still useful in those languages.
13632 	X	such processors consider an unmatched trailing backslash to be an error anyway so raw strings disallow.
13633 	X	i i l i l j d x d x.
13634 	X	def ffseq seq resultseq for x in seq do something with x computing resultseq append result return resultseq.
13635 	X	this error indicates that your python installation can handle only bit ascii.
13636 	X	import x y z y z.
13637 	X	this version is used for windows nt applications.
13638 	X	you are using a version of python that uses a byte representation for unicode characters but some c extension module you are importing was compiled using a python that uses a byte representation for unicode characters the default.
13639 	X	second it means that no special syntax is necessary if you want to explicitly reference or call the method from a particular.
13640 	X	in return they allow you to pass on the string quote character by escaping it with a.
13641 	X	operations that replace other objects may invoke those other objects del method when their reference count reaches zero and that can affect.
13642 	X	and rewrite the two examples to list ffseq oldlist and to.
13643 	X	there are a couple ways to fix or work around the.
13644 	X	for more realistic situations you may have to do something like.
13645 	X	tim peters this is a microsoft dll and a notorious source of.
13646 	X	if instead the name of the undefined symbol starts with pyunicodeucs the problem is the reverse python was built using byte unicode characters and the extension module was compiled using a python with byte unicode.
13647 	X	in c if you want to use a method from a base class which is overridden in a derived class you have to use the operator in python you can write baseclass methodname self argument list.
13648 	X	these rules work well when r strings are used for their intended.
13649 	X	this is especially true for the mass updates to dictionaries and.
13650 	X	for value in ffseq sequence do something with.
13651 	X	if your programs must handle data in arbitrary character set encodings the environment the application runs in will generally identify the encoding of the data it is handing.
13652 	X	m import s for i in s split m getattr m i.
13653 	X	the message means what it says you have the wrong version of this dll for your operating.
13654 	X	this can easily occur when using pre built extension.
13655 	X	this is particularly useful for init methods and in general in cases where a derived class method wants to extend the base class method of the same name and thus has to call the base class method.
13656 	X	if youre trying to build windows pathnames note that all windows system calls accept forward slashes too.
13657 	X	when in doubt use a mutex.
13658 	X	single calls to ff x translate to ffseq x with little.
13659 	X	you need to convert the input to unicode data using that.
13660 	X	when i edit an imported module and reimport it the changes dont show.
13661 	X	the python installation did not cause this something else you installed previous to this overwrote the dll that came with your os probably older shareware of some sort but theres no way to tell now.
13662 	X	redhat linux x in particular provided a python binary that is compiled with byte.
13663 	X	finally for instance variables it solves a syntactic problem with assignment since local variables in python are by definition those variables to which a value assigned in a function body and that arent explicitly declared global there has to be some way to tell the interpreter that an assignment was meant to assign to an instance variable instead of to a local variable and it should preferably be syntactic for efficiency reasons.
13664 	X	f open mydir file txt works fine.
13665 	X	cant we get rid of the global interpreter lock.
13666 	X	of course this technique is not always appropriate and there are other variants which you can figure.
13667 	X	for example a program that handles email or web input will typically find character set encoding information in content type.
13668 	X	if you search for ctld using any search engine altavista for example youll find hundreds and hundreds of web pages complaining about the same problem with all sorts of installation.
13669 	X	this only causes the link failure if the extension uses any of the pyunicode.
13670 	X	c does this through declarations but python doesnt have declarations and it would be a pity having to introduce them just for this.
13671 	X	if youre trying to build a pathname for a dos command try e g one of.
13672 	X	the global interpreter lock gil is often seen as a hindrance to pythons deployment on high end multiprocessor server machines because a multi threaded python program effectively only uses one cpu due to the insistence that almost all python code can only run while the gil is.
13673 	X	you can gain some performance by explicitly storing the results of a function or method lookup into a local.
13674 	X	this can then be used to properly convert input data to.
13675 	X	for reasons of efficiency as well as consistency python only reads the module file on the first time a module is.
13676 	X	theyll point you to ways to get the correct version reinstalled on your system since python doesnt cause this we cant fix it.
13677 	X	it is also a problem if an extension uses any of the unicode related format specifiers for py buildvalue or similar or parameter specifications for pyarg parsetuple.
13678 	X	using the explicit self var solves this.
13679 	X	dir r this is my dos dir dir r this is my dos dir dir this is my dos dir.
13680 	X	back in the days of python greg stein actually implemented a comprehensive patch set the free threading patches that removed the gil and replaced it with fine grained.
13681 	X	assuming the string referred to by value is encoded as utf.
13682 	X	if it didnt in a program consisting of many modules where each one imports the same basic module the basic module would be parsed and re parsed many.
13683 	X	david a burton has written a little program to fix.
13684 	X	you can check the size of the unicode character a python interpreter is using by checking the value of sys maxunicode.
13685 	X	similarly for using instance variables having to write self var means that references to unqualified names inside a method dont have to search the instances.
13686 	X	why doesnt python have a with statement for attribute assignments.
13687 	X	unfortunately even on windows where locks are very efficient this ran ordinary python code about twice as slow as the interpreter using the.
13688 	X	for key in token dict key dict get key.
13689 	X	to force rereading of a changed module do this.
13690 	X	go to http www burtonsys com download html and click on ctldfix zip.
13691 	X	to put it another way local variables and instance variables live in two different namespaces and you need to tell python which namespace to.
13692 	X	python has a with statement that wraps the execution of a block calling code on the entrance and exit from the.
13693 	X	on linux the performance loss was even worse because pthread locks arent as.
13694 	X	the only way to solve this problem is to use extension modules compiled with a python binary built using the same size for unicode.
13695 	X	why cant i use an assignment in an expression.
13696 	X	some language have a construct that looks like this.
13697 	X	since then the idea of getting rid of the gil has occasionally come up but nobody has found a way to deal with the expected slowdown and users who dont use threads would not be happy if their code ran at half at the.
13698 	X	if the method isnt going to change a slightly faster implementation is.
13699 	X	if the data is not correctly encoded as utf the above call will raise a unicodeerror.
13700 	X	warning this technique is not fool.
13701 	X	added sandbox trunk faq general rst sandbox trunk faq general rst wed sep.
13702 	X	many people used to c or perl complain that they want to use this c idiom.
13703 	X	with obj a equivalent to obj a total total obj total obj total.
13704 	X	gregs free threading patch set has not been kept up to date for later python.
13705 	X	dict get dict get look up the method once for key in token dict key dict get key.
13706 	X	if you only want strings converted to unicode which have non ascii data you can try converting them first assuming an ascii encoding and then generate unicode objects if that fails.
13707 	X	in particular modules containing statements like.
13708 	X	while line readline f do something with.
13709 	X	in python such a construct would be.
13710 	X	this doesnt mean that you cant make good use of python on multi cpu machines.
13711 	X	default arguments can be used to determine values once at compile time instead of at run.
13712 	X	try x unicode value ascii except unicodeerror value unicode value utf else value was valid ascii data pass.
13713 	X	where in python youre forced to write this.
13714 	X	other languages such as object pascal delphi and c use static types so its possible to know in an unambiguous way what member is were assigned.
13715 	X	you just have to be creative with dividing the work up between multiple processes rather than multiple threads.
13716 	X	this can only be done for functions or objects which will not be changed during program execution such as replacing.
13717 	X	its possible to set a default encoding in a file called sitecustomize py thats part of the python.
13718 	X	will continue to work with the old version of the imported.
13719 	X	python is an interpreted interactive object oriented programming.
13720 	X	while true line f readline if not line break do something with.
13721 	X	this is the main point of static typing the compiler always knows the scope of every variable at compile.
13722 	X	judicious use of c extensions will also help if you use a c extension to perform a time consuming task the extension can release the gil while the thread of execution is in the c code and allow other threads to get some work.
13723 	X	def degree sin deg return math sin deg math pi.
13724 	X	however this isnt recommended because changing the python wide default encoding may cause third party extension modules to.
13725 	X	if the module contains class definitions existing class instances will not be updated to use the new class.
13726 	X	it incorporates modules exceptions dynamic typing very high level dynamic data types and.
13727 	X	the reason for not allowing assignment in python expressions is a common hard to find bug in those other languages caused by this construct.
13728 	X	it is suggested that the gil should be a per interpreter state lock rather than truly global interpreters then wouldnt be able to share.
13729 	X	def degree sin deg factor math pi sin math sin return sin deg factor.
13730 	X	note that on windows there is an encoding known as mbcs which uses an encoding specific to your current.
13731 	X	this can result in the following paradoxical behaviour.
13732 	X	python combines remarkable power with very clear.
13733 	X	if x error else code that only works for nonzero.
13734 	X	it is impossible to know in advance which attribute will be referenced at.
13735 	X	unfortunately this isnt likely to happen.
13736 	X	because this trick uses default arguments for terms which should not be changed it should only be used when you are not concerned with presenting a possibly confusing api to your.
13737 	X	in many cases and particularly when working with com this may be an appropriate default encoding to.
13738 	X	import cls c cls c create an instance of c reload cls isinstance c cls c isinstance is false false.
13739 	X	it has interfaces to many system calls and libraries as well as to various window systems and is extensible in c or c.
13740 	X	the error is a simple typo x which assigns to the variable x was written while the comparison x is certainly what was.
13741 	X	member attributes may be added or removed from objects on the.
13742 	X	it would be a tremendous amount of work because many object implementations currently have global.
13743 	X	how do you set a global variable in a function.
13744 	X	the nature of the problem is made clear if you print out the class objects.
13745 	X	it is also usable as an extension language for applications that need a programmable.
13746 	X	this makes it impossible to know from a simple reading what attribute is were referenced a local one a global one or a member attribute.
13747 	X	for example small integers and short strings are cached these caches would have to be moved to the interpreter.
13748 	X	how do i convert between tuples and lists.
13749 	X	finally python is portable it runs on many unix variants on the mac and on pcs under ms dos windows windows nt and os.
13750 	X	most are hacks that save some typing but use arbitrary or cryptic syntax or keywords and fail the simple criterion for language change proposals it should intuitively suggest the proper meaning to a human reader who has not yet been introduced to the.
13751 	X	for instance take the following incomplete snippet.
13752 	X	other object types have their own free list these free lists would have to be moved to the interpreter.
13753 	X	the function tuple seq converts any sequence actually any iterable into a tuple with the same items in the same.
13754 	X	added sandbox trunk faq windows rst sandbox trunk faq windows rst wed sep.
13755 	X	to find out more start with the beginners guide to python http wiki python org moin beginnersguide.
13756 	X	an interesting phenomenon is that most experienced python programmers recognize the while true idiom and dont seem to be missing the assignment in expression construct much its only newcomers who express a strong desire to add this to the.
13757 	X	def foo a with a print x.
13758 	X	def f print x try to print the global for j in range if q x.
13759 	X	why was python created in the first place.
13760 	X	theres an alternative way of spelling this that seems attractive but is generally less robust than the while true solution.
13761 	X	the snippet assumes that a must have a member attribute called x.
13762 	X	and i doubt that it can even be done in finite time because the same problem exists for rd party.
13763 	X	any variable assigned in a function is local to that.
13764 	X	if the argument is a tuple it does not make a copy but returns the same object so it is cheap to call tuple when you arent sure that an object is already a.
13765 	X	how do i run a python program under windows.
13766 	X	heres a very brief summary of what started it all written by guido van rossum.
13767 	X	line f readline while line do something with line f readline.
13768 	X	however there is nothing in python that tells the interpreter.
13769 	X	it is likely that rd party extensions are were written at a faster rate than you can convert them to store all their global state in the interpreter.
13770 	X	the function list seq converts any sequence or iterable into a list with the same items in the same.
13771 	X	this is not necessarily a straightforward.
13772 	X	i had extensive experience with implementing an interpreted language in the abc group at cwi and from working with this group i had learned a lot about language.
13773 	X	the problem with this is that if you change your mind about exactly how you get the next line e g you want to change it into sys stdin readline you have to remember to change two places in your program the second occurrence is hidden at the bottom of the.
13774 	X	what should happen if a is let us say an integer.
13775 	X	and finally once you have multiple interpreters not sharing any state what have you gained over running each interpreter in a separate process.
13776 	X	since a value is bound to x as the last statement of the function body the compiler assumes that x is.
13777 	X	if you are already familiar with running programs from the windows command line then everything will seem obvious otherwise you might need a little more.
13778 	X	this is the origin of many python features including the use of indentation for statement grouping and the inclusion of very high level data types although the details are all different in python.
13779 	X	the best approach is to use iterators making it possible to loop through objects using the for.
13780 	X	if there is a global variable named x will it be used inside the with block.
13781 	X	consequently the print x attempts to print an uninitialized local variable and will trigger a nameerror.
13782 	X	if the argument is a list it makes a copy just like seq.
13783 	X	there are also differences between windows nt me and xp which can add to the.
13784 	X	i had a number of gripes about the abc language but also liked many of its.
13785 	X	for example in the current version of python file objects support the iterator protocol so you can now write simply.
13786 	X	as you see the dynamic nature of python makes such choices much.
13787 	X	how do i delete a file.
13788 	X	the solution is to insert an explicit global declaration at the start of the function.
13789 	X	sidebar python development on xp subtitle python development on xp.
13790 	X	it was impossible to extend the abc language or its implementation to remedy my complaints in fact its lack of extensibility was one of its biggest.
13791 	X	for line in f do something with line.
13792 	X	the primary benefit of with and similar language features reduction of code volume can however easily be achieved in python by.
13793 	X	def f global x print x try to print the global for j in range if q x.
13794 	X	python sequences are indexed with positive numbers and negative.
13795 	X	this series of screencasts aims to get you up and running with python on windows.
13796 	X	i had some experience with using modula and talked with the designers of modula and read the modula.
13797 	X	why does python use methods for some functionality e g list index but functions for other e g len list.
13798 	X	function args dict index index a function args dict index index b function args dict index index c.
13799 	X	use os remove filename or os unlink filename for documentation see the posix module http docs python org library posix.
13800 	X	in this case all references to x are interpreted as references to the x from the module.
13801 	X	for positive numbers is the first index is the second index and so.
13802 	X	the knowledge is distilled into hours and will get you up and running with the right python distribution coding in your choice of ide and debugging and writing solid code with unit.
13803 	X	modula is the origin of the syntax and semantics used for exceptions and some other python.
13804 	X	ref function args dict index index ref a ref b ref c.
13805 	X	the two functions are identical unlink is simply the name of the unix system call for this.
13806 	X	what are the rules for local and global variables in python.
13807 	X	for negative indices is the last index and is the penultimate next to last index and so.
13808 	X	python development on xp image images python video icon png python development on xp http www showmedo com videos seriesname.
13809 	X	i was working in the amoeba distributed operating system group at.
13810 	X	functions were used for those operations that were generic for a group of types and which were intended to work even for objects that didnt have methods at all e g tuples.
13811 	X	this also has the side effect of increasing execution speed because name bindings are resolved at run time in python and the second version only needs to perform the resolution.
13812 	X	to remove a directory use os rmdir use os mkdir to create.
13813 	X	in python variables that are only referenced inside a function are implicitly.
13814 	X	think of seq n as the same as seq len seq n.
13815 	X	unless you use some sort of integrated development environment you will end up typing windows commands into what is variously referred to as a dos window or command prompt window.
13816 	X	we needed a better way to do system administration than by writing either c programs or bourne shell scripts since amoeba had its own system call interface which wasnt easily accessible from the bourne.
13817 	X	it is also convenient to have a function that can readily be applied to an amorphous collection of objects when you use the functional features of python map apply et al.
13818 	X	if the referenced object does not have a b and c attributes of course the end result is still a run time.
13819 	X	os makedirs path will create any intermediate directories in path that dont.
13820 	X	if a variable is assigned a new value anywhere within the functions body its assumed to be a.
13821 	X	using negative indices can be very.
13822 	X	usually you can create such a window from your start menu under windows the menu selection is start programs accessories command prompt.
13823 	X	my experience with error handling in amoeba made me acutely aware of the importance of exceptions as a programming language.
13824 	X	in fact implementing len max min as a built in function is actually less code than implementing them as methods for each.
13825 	X	why are colons required for the if while def class statements.
13826 	X	os removedirs path will remove intermediate directories as long as theyre empty if you want to delete an entire directory tree and its contents use shutil rmtree.
13827 	X	if a variable is ever assigned a new value inside the function the variable is implicitly local and you need to explicitly declare it as.
13828 	X	for example s is all of the string except for its last character which is useful for removing the trailing newline from a.
13829 	X	you should be able to recognize when you have started such a window because you will see a windows command prompt which usually looks like this.
13830 	X	it occurred to me that a scripting language with a syntax like abc but with access to the amoeba system calls would fill the.
13831 	X	one can quibble about individual cases but its a part of python and its too late to make such fundamental changes.
13832 	X	the colon is required primarily to enhance readability one of the results of the experimental abc language.
13833 	X	to rename a file use os rename old path new path.
13834 	X	though a bit surprising at first a moments consideration explains.
13835 	X	how do i iterate over a sequence in reverse order.
13836 	X	the letter may be different and there might be other things after it so you might just as easily see something like.
13837 	X	i realized that it would be foolish to write an amoeba specific language so i decided that i needed a language that was generally.
13838 	X	the functions have to remain to avoid massive code.
13839 	X	to truncate a file open it using f open filename r and use f truncate offset offset defaults to the current seek.
13840 	X	on one hand requiring global for assigned variables provides a bar against unintended side.
13841 	X	use the reversed builtin function which is new in python.
13842 	X	during the christmas holidays i had a lot of time on my hand so i decided to give it a.
13843 	X	note that for string operations python has moved from external functions the string module to.
13844 	X	theres also os ftruncate fd offset for files opened with os open where fd is the file descriptor a small integer.
13845 	X	on the other hand if global was required for all global references youd be using global all the.
13846 	X	for x in reversed sequence do something with.
13847 	X	depending on how your computer is set up and what else you have recently done with.
13848 	X	during the next year while still mostly working on it in my own time python was used in the amoeba project with increasing success and the feedback from colleagues made me add many early.
13849 	X	notice how the second one is slightly easier to.
13850 	X	the shutil module also contains a number of functions to work on files including copyfile copytree and rmtree.
13851 	X	youd have to declare as global every reference to a builtin function or to a component of an imported.
13852 	X	this wont touch your original sequence but build a new copy with reversed order to iterate.
13853 	X	once you have started such a window you are well on the way to running python.
13854 	X	in february after just over a year of development i decided to post to.
13855 	X	why is join a string method instead of a list or tuple method.
13856 	X	notice further how a colon sets off the example in the second line of this faq answer its a standard usage in.
13857 	X	how do i copy a file.
13858 	X	this clutter would defeat the usefulness of the global declaration for identifying side.
13859 	X	with python you can use an extended slice syntax.
13860 	X	you need to realize that your python scripts have to be processed by another program called the python.
13861 	X	the rest is in the misc history.
13862 	X	strings became much more like other standard types starting in python when methods were added which give the same functionality that has always been available using the functions of the string.
13863 	X	another minor reason is that the colon makes it easier for editors with syntax highlighting they can look for colons to decide when indentation needs to be increased instead of having to do a more elaborate parsing of the program.
13864 	X	the shutil module contains a copyfile.
13865 	X	how do i share global variables across modules.
13866 	X	for x in sequence do something with.
13867 	X	the interpreter reads your script compiles it into bytecodes and then executes the bytecodes to run your.
13868 	X	most of these new methods have been widely accepted but the one which appears to make some programmers feel uncomfortable is.
13869 	X	why does python allow commas at the end of lists and tuples.
13870 	X	note that on macos it doesnt copy the resource fork and finder.
13871 	X	the canonical way to share information across modules within a single program is to create a special module often called config or cfg.
13872 	X	how do you remove duplicates from a list.
13873 	X	so how do you arrange for the interpreter to handle your python.
13874 	X	python is a high level general purpose programming language that can be applied to many different classes of.
13875 	X	python lets you add a trailing comma at the end of lists tuples and dictionaries.
13876 	X	how do i read or write binary data.
13877 	X	just import the config module in all modules of your application the module then becomes available as a global.
13878 	X	see the python cookbook for a long discussion of many ways to do this.
13879 	X	first you need to make sure that your command window recognises the word python as an instruction to start the.
13880 	X	look at the table of contents for the library reference http docs python org library to get an idea of whats.
13881 	X	a b c d a b last trailing comma is optional but good style.
13882 	X	or complex data formats its best to use the struct module http docs python org library struct.
13883 	X	because there is only one instance of each module any changes made to the module object get reflected.
13884 	X	http aspn activestate com aspn cookbook python recipe.
13885 	X	if you have opened a command window you should try entering the command python and hitting.
13886 	X	a wide variety of third party extensions are also.
13887 	X	there are several reasons to allow.
13888 	X	it allows you to take a string containing binary data usually numbers and convert it to python objects and vice.
13889 	X	x default value of the x configuration setting.
13890 	X	if you dont mind reordering the list sort it and then scan from the end of the list deleting duplicates as you go.
13891 	X	you should then see something like.
13892 	X	consult the python package index http pypi python org pypi to find packages of interest to.
13893 	X	there are two common arguments against this.
13894 	X	when you have a literal value for a list tuple or dictionary spread across multiple lines its easier to add more elements because you dont have to remember to add a comma to the previous.
13895 	X	for example the following code reads two byte integers and one byte integer in big endian format from a file.
13896 	X	if list list sort last list for i in range len list if last list i del list i else last list i.
13897 	X	python dec msc bit intel on win type help copyright credits or license for more.
13898 	X	how does the python version numbering scheme work.
13899 	X	the first runs along the lines of it looks really ugly using a method of a string literal string constant to which the answer is that it might but a string literal is just a fixed.
13900 	X	the lines can also be sorted in your editor without creating a syntax.
13901 	X	f open filename rb open in binary mode for portability s f read x y z struct unpack hhl s.
13902 	X	if all elements of the list may be used as dictionary keys i e they are all hashable this is often faster.
13903 	X	you have started the interpreter in interactive mode.
13904 	X	python versions are numbered a b c or a b a is the major version number it is only incremented for really major changes in the.
13905 	X	if the methods are to be allowed on names bound to strings there is no logical reason to make them unavailable on.
13906 	X	accidentally omitting the comma can lead to errors that are hard to.
13907 	X	the in the format string forces big endian data the letter h reads one short integer bytes and l reads one long integer bytes from the.
13908 	X	note that using a module is also the basis for implementing the singleton design pattern for the same.
13909 	X	d for x in list d x x list d values.
13910 	X	that means you can enter python statements or expressions interactively and have them executed or evaluated while you.
13911 	X	b is the minor version number incremented for less earth shattering.
13912 	X	the second objection is typically cast as i am really telling a sequence to join its members together with a string constant.
13913 	X	for data that is more regular e g a homogeneous list of ints or thefloats you can also use the array module http docs python org library array.
13914 	X	what are the best practices for using import in a module.
13915 	X	in python and later the following is possible instead.
13916 	X	this is one of pythons strongest.
13917 	X	c is the micro level it is incremented for more information about bugfix.
13918 	X	this list looks like it has four elements but it actually contains three fee fiefoo and fum.
13919 	X	i cant seem to use os read on a pipe created with os popen why.
13920 	X	in general dont use from modulename import.
13921 	X	check it by entering a few expressions of your choice and seeing the results.
13922 	X	for some reason there seems to be much less difficulty with having split as a string method since in that case it is easy to see that.
13923 	X	always adding the comma avoids this source of.
13924 	X	os read is a low level function which takes a file descriptor a small integer representing the opened.
13925 	X	this converts the list into a set thereby removing duplicates and then back into a.
13926 	X	in the run up to a new major release a series of development releases are made denoted as alpha beta or release.
13927 	X	allowing the trailing comma may also make programmatic code generation.
13928 	X	os popen creates a high level file object the same type returned by the builtin open.
13929 	X	some people avoid this idiom even with the few modules that were designed to be imported in this.
13930 	X	how do you make an array in python.
13931 	X	many people use the interactive mode as a convenient yet highly programmable.
13932 	X	alphas are early releases in which interfaces arent yet finalized its not unexpected to see an interface change between two alpha.
13933 	X	is an instruction to a string literal to return the substrings delimited by the given separator or by default arbitrary runs of white space.
13934 	X	added sandbox trunk faq gui rst sandbox trunk faq gui rst wed sep.
13935 	X	thus to read n bytes from a pipe p created with os popen you need to use p read n.
13936 	X	modules designed in this manner include tkinter and threading.
13937 	X	when you want to end your interactive python session hold the ctrl key down while you enter a z then hit the enter key to get back to your windows command.
13938 	X	betas are more stable preserving existing interfaces but possibly adding new modules and release candidates are frozen making no changes except as needed to fix critical.
13939 	X	in this case a unicode string returns a list of unicode strings an ascii string returns a list of ascii strings and everyone is.
13940 	X	how do i run a subprocess with pipes connected to both input and output.
13941 	X	import modules at the top of a.
13942 	X	you may also find that you have a start menu entry such as start programs python python command line that results in you seeing the prompt in a new.
13943 	X	alpha beta and release candidate versions have an additional.
13944 	X	join is a string method because in using it you are telling the separator string to iterate over a sequence of strings and insert itself between adjacent.
13945 	X	use the popen module http docs python org library popen.
13946 	X	doing so makes it clear what other modules your code requires and avoids questions of whether the module name is in.
13947 	X	lists are equivalent to c or pascal arrays in their time complexity the primary difference is that a python list can contain objects of many different.
13948 	X	if so the window will disappear after you enter the ctrl z character windows is running a single python command in the window and closes it when you terminate the.
13949 	X	you may also find version numbers with a suffix e g.
13950 	X	this method can be used with any argument which obeys the rules for sequence objects including any new classes you might define.
13951 	X	what platform independent gui toolkits exist for python.
13952 	X	import popen fromchild tochild popen popen command tochild write input n tochild flush output fromchild readline.
13953 	X	using one import per line makes it easy to add and delete module imports but using multiple imports per line uses less screen.
13954 	X	the array module also provides methods for creating arrays of fixed types with compact representations but they are slower to index than.
13955 	X	if the python command instead of displaying the interpreter prompt gives you a message like.
13956 	X	these are unreleased versions built directly from the subversion.
13957 	X	because this is a string method it can work for unicode strings as well as plain ascii.
13958 	X	depending on what platform s you are aiming at there are.
13959 	X	warning in general it is unwise to do this because you can easily cause a deadlock where your process is blocked waiting for output from the child while the child is blocked waiting for input from.
13960 	X	its good practice if you import modules in the following order.
13961 	X	also note that the numeric extensions and others define array like structures with various characteristics as.
13962 	X	python is not recognized as an internal or external command operable program or batch.
13963 	X	in practice after a final minor release is made the subversion trunk is incremented to the next minor version which becomes the a version e g.
13964 	X	if join were a method of the sequence types then the sequence types would have to decide which type of string to return depending on the type of the.
13965 	X	standard builds of python include an object oriented interface to the tcl tk widget set called.
13966 	X	this can be caused because the parent expects the child to output more text than it does or it can be caused by data were stuck in stdio buffers due to lack of.
13967 	X	to get lisp style linked lists you can emulate cons cells using tuples.
13968 	X	sidebar adding python to dos path subtitle adding python to dos path.
13969 	X	see also the documentation for sys version sys hexversion and sys version info.
13970 	X	if none of these arguments persuade you then for the moment you can continue to use the join function from the string module which allows you to write.
13971 	X	this is probably the easiest to install and.
13972 	X	the python parent can of course explicitly flush the data it sends to the child before it reads any output but if the child is a naive c program it may have been written to never explicitly flush its output even if it is interactive since flushing is normally.
13973 	X	if youre writing code thats in the package sub m module and want to import package sub m do not just write import m even though its.
13974 	X	lisp list like this example none.
13975 	X	python is not added to the dos path by.
13976 	X	are there copyright restrictions on the use of python.
13977 	X	for more info about tk including pointers to the source see the tcl tk home page at http www tcl.
13978 	X	note that a deadlock is also possible if you use popen to read stdout and.
13979 	X	if mutability is desired you could use lists instead of.
13980 	X	this screencast will walk you through the steps to add the correct entry to the system path allowing python to be executed from the command line by all.
13981 	X	you can do anything you want with the source as long as you leave the copyrights in and display those copyrights in any documentation about python that you.
13982 	X	tcl tk is fully portable to the macos windows and unix.
13983 	X	if one of the two is too large for the internal buffer increasing the buffer size does not help and you read the other one first there is a deadlock.
13984 	X	relative imports can lead to a module were initialized twice leading to confusing.
13985 	X	here the analogue of lisp car is lisp list and the analogue of cdr is lisp list.
13986 	X	adding python to dos path image images python video icon png adding python to dos path http showmedo com videos videoname fromseriesid.
13987 	X	if you honor the copyright rules its ok to use python for commercial use to sell copies of python in source or binary form modified or unmodified or to sell products that incorporate python in some.
13988 	X	a try except block is extremely.
13989 	X	wxwindows is a portable gui class library written in c thats a portable interface to various platform specific libraries wxwidgets is a python interface to.
13990 	X	note on a bug in popen unless your program calls wait or waitpid finished child processes are never removed and eventually calls to popen will fail because of a limit on the number of child.
13991 	X	it is sometimes necessary to move imports to a function or class to avoid problems with circular.
13992 	X	only do this if youre sure you really need to because its usually a lot slower than using python.
13993 	X	we would still like to know about all commercial use of python of.
13994 	X	wxwindows supports windows and macos on unix variants it supports both gtk and motif.
13995 	X	calling os waitpid with the os wnohang option can prevent this a good place to insert such a call would be before calling popen.
13996 	X	how do i create a multidimensional list.
13997 	X	then you need to make sure that your computer knows where to find the python.
13998 	X	see the psf license page psf license to find further explanations and a link to the full text of the.
13999 	X	in versions of python prior to it was common to use this idiom.
14000 	X	wxwindows preserves the look and feel of the underlying graphics toolkit and there is quite a rich widget set and collection of gdi.
14001 	X	in many cases all you really need is to run some data through a command and get the result.
14002 	X	circular imports are fine where both modules use the import module form of.
14003 	X	you probably tried to make a multidimensional array like this.
14004 	X	to do this you will have to modify a setting called path which is a list of directories where windows will look for.
14005 	X	how do i obtain a copy of the python source.
14006 	X	try value dict key except keyerror dict key getvalue key value dict key.
14007 	X	see the wxwindows page http www wxwindows org for more.
14008 	X	unless the amount of data is very large the easiest way to do this is to write it to a temporary file and run the command with that temporary file as.
14009 	X	they fail when the nd module wants to grab a name out of the first from module import name and the import is at the top.
14010 	X	you should arrange for pythons installation directory to be added to the path of every command window as it.
14011 	X	the latest python source distribution is always available from python org at http www python org download.
14012 	X	this only made sense when you expected the dict to have the key almost all the.
14013 	X	wxwidgets http wxwidgets org is an extension module that wraps many of the wxwindows c classes and is quickly gaining popularity amongst python.
14014 	X	the standard module tempfile http docs python org library tempfile exports a mktemp function to generate unique temporary file.
14015 	X	thats because names in the st are not yet available because the first module is busy importing the.
14016 	X	this looks correct if you print it.
14017 	X	if you installed python fairly recently then the command.
14018 	X	the latest development sources can be obtained via anonymous subversion at http svn python org projects python trunk.
14019 	X	if that wasnt the case you coded it like this.
14020 	X	you can get wxwidgets as part of the source or cvs distribution of wxwindows or directly from its home.
14021 	X	import tempfile import os class popen this is a deadlock safe version of popen that returns an object with errorlevel out a string and err a string.
14022 	X	in this case if the second module is only used in one function then the import can easily be moved into that.
14023 	X	the source distribution is a gzipped tar file containing the complete c source latex documentation python library modules example programs and several useful pieces of freely distributable.
14024 	X	if dict has key key value dict key else dict key getvalue key value dict key.
14025 	X	there are bindings available for the qt toolkit pyqt http www riverbankcomputing co uk pyqt and for kde pykde.
14026 	X	by the time the import is called the first module will have finished initializing and the second module can do its.
14027 	X	but when you assign a value it shows up in multiple places.
14028 	X	will probably tell you where it is installed the usual location is something like c python.
14029 	X	this will compile and run out of the box on most unix.
14030 	X	in python and higher you can code this as value dict setdefault key getvalue key.
14031 	X	if youre writing open source software you dont need to pay for pyqt but if you want to write proprietary applications you must buy a pyqt license from riverbank computing http www riverbankcomputing co uk and a qt license from trolltech http www trolltech com.
14032 	X	example print popen grep spam n nhere spam n n out def init selfcommandinput nonecapturestderr none outfile tempfile mktemp command s s commandoutfile if input infile tempfile mktemp open infile w write input command command infile if capturestderr errfile tempfile mktemp command command errfile self errorlevel os system command self out open outfile r read os remove outfile if input os remove infile if capturestderr self err open errfile r read os remove errfile.
14033 	X	it may also be necessary to move imports out of the top level of code if some of the modules are platform.
14034 	X	otherwise you will be reduced to a search of your whole disk use tools find or hit the search button and look for python exe.
14035 	X	consult the developer faq http www python org dev devfaq html subversion svn for more information on getting the source code and compiling.
14036 	X	why isnt there a switch or case statement in python.
14037 	X	pygtk bindings for the gtk toolkit http www gtk org have been implemented by by james henstridge see ftp ftp gtk org pub gtk python.
14038 	X	note that many interactive programs e g vi dont work well with pipes substituted for standard input and.
14039 	X	in that case it may not even be possible to import all of the modules at the top of the.
14040 	X	the reason is that replicating a list with doesnt create copies it only creates references to the existing.
14041 	X	supposing you discover that python is installed in the c python directory the default at the time of writing you should make sure that entering the command.
14042 	X	how do i get documentation on python.
14043 	X	you can do this easily enough with a sequence of el el else.
14044 	X	python bindings for the fltk toolkit http www fltk org a simple yet powerful and mature cross platform windowing system are available from the pyfltk project http pyfltk sourceforge net.
14045 	X	you will have to use pseudo ttys ptys instead of.
14046 	X	in this case importing the correct modules in the corresponding platform specific code is a good.
14047 	X	the creates a list containing references to the same list of length.
14048 	X	all documentation is available on line starting at http www python org doc.
14049 	X	there have been some proposals for switch statement syntax but there is no consensus yet on whether and how to do range.
14050 	X	a wrapper for the fox toolkit http www fox toolkit org called fxpy http fxpy sourceforge net is.
14051 	X	or you can use a python interface to don libes expect.
14052 	X	only move imports into a local scope such as inside a function definition if its necessary to solve a problem such as avoiding a circular import or are trying to reduce the initialization time of a.
14053 	X	changes to one row will show in all rows which is almost certainly not what you.
14054 	X	starts up the interpreter as above and dont forget youll need a ctrl z and an enter to get out of it.
14055 	X	the standard documentation for the current stable version of python is also available at http docs python org.
14056 	X	see pep dev peps pep for complete details and the current.
14057 	X	fox supports both unix variants and.
14058 	X	a python extension that interfaces to expect is called expy and available from http expectpy sourceforge.
14059 	X	this technique is especially helpful if many of the imports are unnecessary depending on how the program.
14060 	X	the suggested approach is to create a list of the desired length first and then fill in each element with a newly created list.
14061 	X	once you have verified the directory you need to add it to the start up routines your computer goes.
14062 	X	pdf and downloadable html versions are also.
14063 	X	for cases where you need to choose from a very large number of possibilities you can create a dictionary mapping case values to functions to.
14064 	X	for opengl bindings see pyopengl http pyopengl sourceforge net.
14065 	X	a pure python solution that works like expect is pexpect http pexpect sourceforge net.
14066 	X	you may also want to move imports into a function if the modules are only ever used in that.
14067 	X	a none for i in range a i none.
14068 	X	for older versions of windows the easiest way to do this is to edit the c autoexec bat.
14069 	X	the documentation is written using the sphinx documentation tool http sphinx pocoo org.
14070 	X	what platform specific gui toolkits exist for python.
14071 	X	how do i access the serial rs port.
14072 	X	note that loading a module the first time may be expensive because of the one time initialization of the module but loading a module multiple times is virtually free costing only a couple of dictionary.
14073 	X	this generates a list containing different lists of length.
14074 	X	you would want to add a line like the following to autoexec bat.
14075 	X	the sphinx source for the documentation is part of the python source.
14076 	X	the mac port download mac by jack jansen has a rich and ever growing set of modules that support the native mac toolbox.
14077 	X	even if the module name has gone out of scope the module is probably available in sys.
14078 	X	you can also use a list comprehension.
14079 	X	the port includes support for macos and macos xs carbon.
14080 	X	if only instances of a specific class use a module then it is reasonable to import the module in the classs init method and then assign the module to an instance variable so that the module is always available via that instance variable during the life of the.
14081 	X	w h a none w for i in range h.
14082 	X	for windows nt and i assume xp you will need to add a string such as.
14083 	X	for calling methods on objects you can simplify yet further by using the getattr built in to retrieve methods with a particular name.
14084 	X	by installing the pyobjc objective c bridge http pyobjc sourceforge net python programs can use macos xs cocoa.
14085 	X	for unix see a usenet post by mitch chapman.
14086 	X	note that to delay an import until the class is instantiated the import must be inside a.
14087 	X	or you can use an extension that provides a matrix datatype numeric python http www pfdubois com numpy is the best.
14088 	X	to the current setting for the path environment variable which you will find in the properties window of my computer under the advanced.
14089 	X	there are numerous tutorials and books.
14090 	X	see the documentation that comes with the mac.
14091 	X	putting the import inside the class but outside of any method still causes the import to occur when the module is.
14092 	X	how do i apply a method to a sequence of objects.
14093 	X	note that if you have sufficient privilege you might get a choice of installing the settings either for the current user or for.
14094 	X	consult the beginners guide http wiki python org moin beginnersguide to find information for beginning python programmers including lists of.
14095 	X	def dispatch self value method name visit str value method getattr self method name method.
14096 	X	pythonwin windows by mark hammond includes an interface to the microsoft foundation classes and a python programming environment using it thats written mostly in.
14097 	X	how can i pass optional or keyword parameters from one function to another.
14098 	X	the latter is preferred if you want everybody to be able to run python on the.
14099 	X	are there other ftp sites that mirror the python distribution.
14100 	X	its suggested that you use a prefix for the method names such as visit in this.
14101 	X	how do i freeze tkinter applications.
14102 	X	why doesnt closing sys stdout stdin stderr really close it.
14103 	X	collect the arguments using the and specifiers in the functions parameter list this gives you the positional arguments as a tuple and the keyword arguments as a.
14104 	X	result obj method for obj in list.
14105 	X	if you arent confident doing any of these manipulations yourself ask for help.
14106 	X	mirroring is discontinued as of march.
14107 	X	without such a prefix if values are coming from an untrusted source an attacker would be able to call any method on your.
14108 	X	freeze is a tool to create stand alone.
14109 	X	python file objects are a high level layer of abstraction on top of c streams which in turn are a medium level layer of abstraction on top of among other things low level c file.
14110 	X	you can then pass these arguments when calling another function by using and.
14111 	X	more generically you can try the following function.
14112 	X	at this stage you may want to reboot your system to make absolutely sure the new setting has taken.
14113 	X	please download here http www python org download.
14114 	X	cant you emulate threads in the interpreter instead of relying on an os specific thread implementation.
14115 	X	when freezing tkinter applications the applications will not be truly stand alone as the application will still need the tcl and tk.
14116 	X	for most file objects you create in python via the builtin file constructor f close marks the python file object as were closed from pythons point of view and also arranges to close the underlying c.
14117 	X	in the unlikely case that you care about python versions older than use apply.
14118 	X	how can i get a dictionary to display its keys in a consistent order.
14119 	X	you probably wont need to reboot for windows nt xp or.
14120 	X	is there a newsgroup or mailing list devoted to python.
14121 	X	answer unfortunately the interpreter pushes at least one c stack frame for each python stack.
14122 	X	one solution is to ship the application with the tcl and tk libraries and point to them at run time using the tcl library and tk library environment.
14123 	X	this also happens automatically in fs destructor when f becomes.
14124 	X	how do i write a function with output parameters call by reference.
14125 	X	dictionaries store their keys in an unpredictable order so the display order of a dictionarys elements will be similarly.
14126 	X	you can also avoid it in earlier versions by editing the file c windows command cmdinit bat instead of autoexec bat.
14127 	X	there is a newsgroup comp lang python and a mailing list python list http mail python org mailman listinfo python list.
14128 	X	also extensions can call back into python at almost random.
14129 	X	to get truly stand alone applications the tcl scripts that form the library have to be integrated into the application as.
14130 	X	but stdin stdout and stderr are treated specially by python because of the special status also given to them by c running sys stdout close marks the python level file object as were closed but does not close the associated c.
14131 	X	remember that arguments are passed by assignment in.
14132 	X	this can be frustrating if you want to save a printable version to a file make some changes and then compare it with some other printed.
14133 	X	you should now be able to start a new command window enter python at the c or whatever prompt and see the prompt that indicates the python interpreter is reading interactive.
14134 	X	the newsgroup and mailing list are gatewayed into each other if you can read news its unnecessary to subscribe to the mailing.
14135 	X	therefore a complete threads implementation requires thread support for c.
14136 	X	one tool supporting that is sam stand alone modules which is part of the tix distribution http tix mne com.
14137 	X	to close the underlying c stream for one of these three you should first be sure thats what you really want to do e you may confuse extension modules trying to do i o.
14138 	X	since assignment just creates references to objects theres no alias between an argument name in the caller and callee and so no call by reference per.
14139 	X	in this case use the pprint module to pretty print the dictionary the items will be presented in order sorted by the.
14140 	X	lets suppose you have a program called pytest py in directory c steve projects python.
14141 	X	comp lang python is high traffic receiving hundreds of postings every day and usenet readers are often more able to cope with this.
14142 	X	answer fortunately there is stackless python http www stackless com which has a completely redesigned interpreter loop that avoids the c.
14143 	X	build tix with sam enabled perform the appropriate call to tclsam init etc inside pythons modules tkappinit c and link with libtclsam and libtksam you might include the tix libraries as well.
14144 	X	if it is use os close.
14145 	X	you can achieve the desired effect in a number of.
14146 	X	a more complicated solution is to subclass userdict userdict to create a sorteddict class that prints itself in a predictable.
14147 	X	a session to run that program might look like this.
14148 	X	announcements of new software releases and events can be found in comp lang python announce a low traffic moderated list that receives about five postings per.
14149 	X	its still experimental but looks very.
14150 	X	can i have tk events handled while waiting for i o yes and you dont even need threads.
14151 	X	os close close cs stdin stream os close close cs stdout stream os close close cs stderr stream.
14152 	X	by returning a tuple of the results.
14153 	X	heres one simpleminded implementation of such a class.
14154 	X	c steve projects python python pytest py.
14155 	X	its available as the python announce mailing list http mail python org mailman listinfo python announce list.
14156 	X	although it is binary compatible with standard python its still unclear whether stackless will make it into the core maybe its just too.
14157 	X	but youll have to restructure your i o code a.
14158 	X	def func a b a new value a and b are local names b b assigned to new objects return a b return new values.
14159 	X	because you added a file name to the command to start the interpreter when it starts up it reads the python script in the named file compiles it executes it and terminates so you see another c.
14160 	X	more info about other mailing lists and newsgroups can be found at http www python org community lists.
14161 	X	why cant lambda forms contain statements.
14162 	X	tk has the equivalent of xts xtaddinput call which allows you to register a callback function which will be called from the tk mainloop when i o is possible on a file.
14163 	X	what www tools are there for python.
14164 	X	x y old value x y func x y print x y output new value.
14165 	X	class sorteddict userdict userdict def repr self result append result append keys self data keys keys sort for k in keys append s s k self data k return s string join result.
14166 	X	how do i get a beta test version of python.
14167 	X	python lambda forms cannot contain statements because pythons syntactic framework cant handle statements nested inside.
14168 	X	see the chapters titled internet protocols and support http docs python org lib internet and internet data handling http docs python org lib netdata in the library reference.
14169 	X	this is almost always the clearest.
14170 	X	this will work for many common situations you might encounter though its far from a perfect.
14171 	X	c python steve projects python pytest py.
14172 	X	alpha and beta releases are available from http www python org download.
14173 	X	however in python this is not a serious.
14174 	X	from tkinter import tkinter tkinter createfilehandler file mask callback.
14175 	X	python has many modules that will help you build server side and client side web.
14176 	X	the largest flaw is that if some values in the dictionary are also dictionaries their values wont be presented in any particular.
14177 	X	if you hadnt wanted to change your current.
14178 	X	all releases are announced on the comp lang python and comp lang python announce newsgroups and on the python home page at http www python org an rss feed of news is.
14179 	X	unlike lambda forms in other languages where they add functionality python lambdas are only a shorthand notation if youre too lazy to define a.
14180 	X	the file may be a python file or socket object actually anything with a fileno method or an integer file.
14181 	X	a summary of available frameworks is maintained by paul boddie at http wiki python org moin webprogramming.
14182 	X	this isnt thread safe and is not.
14183 	X	i want to do a complicated sort can you do a schwartzian transform in python.
14184 	X	under nt and xp you may well find that the installation process has also arranged that the command pytest py or if the file isnt in the current directory c steve projects python pytest py will automatically recognize the py extension and run the python interpreter on the named.
14185 	X	you can also access the development version of python through.
14186 	X	functions are already first class objects in python and can be declared in a local.
14187 	X	the mask is one of the constants tkinter readable or tkinter.
14188 	X	cameron laird maintains a useful set of pages about python web technologies at http phaseit net claird comp lang python web.
14189 	X	by passing a mutable changeable in place object.
14190 	X	the technique attributed to randal schwartz of the perl community sorts the elements of a list by a metric which maps each element to its sort value.
14191 	X	using this feature is fine but some versions of windows have bugs which mean that this form isnt exactly equivalent to using the interpreter explicitly so be.
14192 	X	see http www python org dev devfaq html subversion svn for.
14193 	X	therefore the only advantage of using a lambda form instead of a locally defined function is that you dont need to invent a name for the function but thats just a local variable to which the function object which is exactly the same type of object that a lambda form yields is assigned.
14194 	X	the callback is called as follows.
14195 	X	how can i mimic cgi form submission method post.
14196 	X	def func a a new value a references a mutable list a a changes a shared object.
14197 	X	in python just use the key argument for the sort method.
14198 	X	the important things to remember are.
14199 	X	how do i submit bug reports and patches for python.
14200 	X	can python be compiled to machine code c or some other language.
14201 	X	i would like to retrieve web pages that are the result of posting a.
14202 	X	args old value func args print args args output new value.
14203 	X	isorted sort key lambda s int s.
14204 	X	start python from the start menu or make sure the path is set correctly so windows can find the python.
14205 	X	to report a bug or submit a patch please use the roundup installation at http bugs python org.
14206 	X	pythons high level data types dynamic typing of objects and run time invocation of the interpreter using eval or exec together mean that a compiled python program would probably consist mostly of calls into the python run time system even for seemingly simple operations like x.
14207 	X	you must unregister the callback when youre done using.
14208 	X	is there existing code that would let me do this easily.
14209 	X	by passing in a dictionary that gets mutated.
14210 	X	the key argument is new in python for older versions this kind of sorting is quite simple to do with list.
14211 	X	should give you a prompt from the python.
14212 	X	you must have a roundup account to report bugs this makes it possible for us to contact you if we have follow up.
14213 	X	several projects described in the python newsgroup or at past python conferences community workshops have shown that this approach is feasible although the speedups reached so far are only modest e g x.
14214 	X	heres a simple example that uses httplib.
14215 	X	def func args args a new value args is a mutable dictionary args b args b change it in place.
14216 	X	to sort a list of strings by their uppercase values.
14217 	X	dont forget the ctrl z and enter to terminate the interpreter and if you started the window from the start menu make the window disappear.
14218 	X	it will also enable roundup to send you updates as we act on your.
14219 	X	jython uses the same strategy for compiling to java.
14220 	X	note since you dont know how many bytes are available for reading you cant use the python file objects read or readline methods since these will insist on reading a predefined number of.
14221 	X	args a old value b func args print args a args b.
14222 	X	tmp x upper x for x in l schwartzian transform tmp sort usorted x for x in tmp.
14223 	X	once this works you run programs with commands.
14224 	X	if you had previously used sourceforge to report bugs to python you can obtain your roundup password through roundups password reset procedure http bugs python org user.
14225 	X	jim hugunin has demonstrated that in combination with whole program analysis speedups of x are feasible for small demo.
14226 	X	for sockets the recv or recvfrom methods will work fine for other files use os read file fileno maxbytecount.
14227 	X	or bundle up values in a class instance.
14228 	X	to sort by the integer value of a subfield extending from positions in each string.
14229 	X	see the proceedings from the python conference community workshops proceedings for more.
14230 	X	i cant get key bindings to work in tkinter why.
14231 	X	build the query string qs first josephine mi q last public.
14232 	X	class callbyref def init self args for key value in args items setattr self key value.
14233 	X	tmp int s s for s in l schwartzian transform tmp sort isorted x for x in tmp.
14234 	X	when you know the commands to use you can build windows shortcuts to run the python interpreter on any of your scripts naming particular working directories and adding them to your.
14235 	X	for more information on how python is developed consult the python developers guide dev.
14236 	X	internally python source code is always translated into a bytecode representation and this bytecode is then executed by the python virtual.
14237 	X	an often heard complaint is that event handlers bound to events with the bind method dont get handled even when the appropriate key is.
14238 	X	sys stdout write httpobj getfile read.
14239 	X	def func args args a new value args is a mutable callbyref args b args b change object in place.
14240 	X	note that isorted may also be computed by.
14241 	X	are there any published articles about python that i can reference.
14242 	X	in order to avoid the overhead of repeatedly parsing and translating modules that rarely change this byte code is written into a file whose name ends in pyc whenever a module is.
14243 	X	the most common cause is that the widget to which the binding applies doesnt have keyboard focus.
14244 	X	note that in general for url encoded post operations query strings must be quoted by using urllib quote.
14245 	X	args callbyref a old value b func args print args a.
14246 	X	its probably best to cite your favorite book about.
14247 	X	when the corresponding py file is changed it is parsed and translated again and the pyc file is.
14248 	X	check out the tk documentation for the focus.
14249 	X	for example to send name guy steele.
14250 	X	theres almost never a good reason to get this.
14251 	X	def icmp s s return cmp intfield s intfield s.
14252 	X	interactive mode where you see the prompt is best used for checking that individual statements and expressions do what you think they will and for developing code by.
14253 	X	the very first article about python is this very old article thats now quite.
14254 	X	there is no performance difference once the pyc file is loaded as the bytecode read from the pyc file is exactly the same as the bytecode created by direct.
14255 	X	usually a widget is given the keyboard focus by clicking in it but not for labels see the takefocus option.
14256 	X	from urllib import quote x quote guy steele x guy steele query string name x query string name guy steele.
14257 	X	your best choice is to return a tuple containing the multiple.
14258 	X	how do i make python scripts executable.
14259 	X	guido van rossum and jelke de boer interactively testing remote servers using the python programming language cwi quarterly volume issue december amsterdam pp.
14260 	X	the only difference is that loading code from a pyc file is faster than parsing and translating a py file so the presence of precompiled pyc files improves the start up time of python.
14261 	X	added sandbox trunk faq index rst sandbox trunk faq index rst wed sep.
14262 	X	what module should i use to help with generating html.
14263 	X	how do you make a higher order function in python.
14264 	X	but since this method calls intfield many times for each element of l it is slower than the schwartzian.
14265 	X	on windows the standard python installer already associates the py extension with a file type python file and gives that file type an open command that runs the interpreter d program files python python exe.
14266 	X	are there any books on python.
14267 	X	if desired the lib compileall py module can be used to create valid pyc files for a given set of.
14268 	X	there are many different modules available.
14269 	X	you have two choices you can use nested scopes or you can use callable.
14270 	X	how can i sort one list by values from another list.
14271 	X	this is enough to make scripts executable from the command prompt as foo.
14272 	X	yes there are many and more are were.
14273 	X	note that the main script executed by python even if its filename ends in py is not compiled to a pyc.
14274 	X	htmlgen is a class library of objects corresponding to all the html markup.
14275 	X	for example suppose you wanted to define linear ab which returns a function f x that computes the value a x b.
14276 	X	merge them into a single list of tuples sort the resulting list and then pick out the element you.
14277 	X	if youd rather be able to execute the script by simple typing foo with no extension you need to add py to the pathext environment.
14278 	X	see the python org wiki at http wiki python org moin pythonbooks for a.
14279 	X	it is compiled to bytecode but the bytecode is not saved to a.
14280 	X	its used when you are writing in python and wish to synthesize html pages for generating a web or for cgi forms documenttemplate and zope page templates are two different systems that are part of.
14281 	X	an alternative for the last step is.
14282 	X	on windows nt the steps taken by the installer as described above allow you to run a script with foo py but a longtime bug in the nt command processor prevents you from redirecting the input or output of any script executed in this.
14283 	X	you can also search online bookstores for python and filter out the monty python references or perhaps search for python and language.
14284 	X	usually main scripts are quite short so this doesnt cost much.
14285 	X	general rst programming rst library rst extending rst windows rst gui rst installed rst.
14286 	X	quixotes ptl uses python syntax to assemble strings of.
14287 	X	def linear a b def result x return a x b return result.
14288 	X	result for p in pairs result append p.
14289 	X	where in the world is www python org located.
14290 	X	there are also several programs which make it easier to intermingle python and c code in various ways to increase.
14291 	X	added sandbox trunk faq installed rst sandbox trunk faq installed rst wed sep.
14292 	X	consult the web programming wiki pages http wiki python org moin webprogramming for more.
14293 	X	if you find this more legible you might prefer to use this instead of the final list.
14294 	X	the incantation for making a python script executable under winnt is to give the file an extension of cmd and add the following as the first line.
14295 	X	its currently in amsterdam graciously hosted by xsall http www xsall nl.
14296 	X	see for example psyco http psyco sourceforge net pyrex http www cosc canterbury ac nz greg python pyrex pyinline http pyinline sourceforge net pycmod http sourceforge net projects pycmod and weave http www scipy org site content weave.
14297 	X	why is python installed on my computer.
14298 	X	how do i send mail from a python script.
14299 	X	def init self a b self a self b a b.
14300 	X	however it is almost twice as slow for long.
14301 	X	setlocal enableextensions python x f goto eof.
14302 	X	thanks to thomas wouters for his work in arranging python orgs.
14303 	X	use the standard library module smtplib http docs python org library smtplib.
14304 	X	def call self x return self a x.
14305 	X	why first the append operation has to reallocate memory and while it uses some tricks to avoid doing that each time it still has to do it occasionally and that costs quite a.
14306 	X	why does python sometimes take so long to start.
14307 	X	the details of python memory management depend on the.
14308 	X	heres a very simple interactive mail sender that uses.
14309 	X	second the expression result append requires an extra attribute lookup and third theres a speed reduction from having to make all those function.
14310 	X	usually python starts very quickly on windows but occasionally there are bug reports that python suddenly begins to take a long time to start.
14311 	X	at the time when he began implementing python guido van rossum was also reading the published scripts from monty pythons flying circus a bbc comedy series from the seventies in the unlikely case you didnt know.
14312 	X	the standard c implementation of python uses reference counting to detect inaccessible objects and another mechanism to collect reference cycles periodically executing a cycle detection algorithm which looks for inaccessible cycles and deletes the objects.
14313 	X	this method will work on any host that supports an smtp.
14314 	X	this is made even more puzzling because python will work fine on other windows systems which appear to be configured.
14315 	X	it occurred to him that he needed a name that was short unique and slightly mysterious so he decided to call the language.
14316 	X	the gc module provides functions to perform a garbage collection obtain debugging statistics and tune the collectors.
14317 	X	its used in some high schools and colleges as an introductory programming language because python is easy to learn but its also used by professional software developers at places such as google nasa and industrial light.
14318 	X	gives a callable object where taxes e e.
14319 	X	a class is the particular object type created by executing a class.
14320 	X	the problem may be caused by a misconfiguration of virus checking software on the problem.
14321 	X	do i have to like monty pythons flying circus.
14322 	X	jython relies on the java runtime so the jvms garbage collector is.
14323 	X	if youre curious about finding out more about python start with the beginners guide to python http wiki python org moin beginnersguide.
14324 	X	fromaddr raw input from toaddrs raw input to split print enter message end with d msg while line sys stdin readline if not line break msg msg line.
14325 	X	the callable object approach has the disadvantage that it is a bit slower and results in slightly longer.
14326 	X	class objects are used as templates to create instance objects which embody both the data attributes and code methods specific to a.
14327 	X	some virus scanners have been known to introduce startup overhead of two orders of magnitude when the scanner is configured to monitor all reads from the.
14328 	X	this difference can cause some subtle porting problems if your python code depends on the behavior of the reference counting.
14329 	X	why is python installed on my machine.
14330 	X	the actual mail send server smtplib smtp localhost server sendmail fromaddr toaddrs msg server quit.
14331 	X	however note that a collection of callables can share their signature via inheritance.
14332 	X	a class can be based on one or more other classes called its base class es.
14333 	X	try checking the configuration of virus scanning software on your systems to ensure that they are indeed configured.
14334 	X	sometimes objects get stuck in tracebacks temporarily and hence are not deallocated when you might.
14335 	X	if you find python installed on your system but dont remember installing it there are several possible ways it could have gotten.
14336 	X	class exponential linear init inherited def call self x return self a x self b.
14337 	X	it then inherits the attributes and methods of its base.
14338 	X	mcafee when configured to scan all file system read activity is a particular.
14339 	X	perhaps another user on the computer wanted to learn programming and installed it youll have to figure out whos been using the machine and might have installed.
14340 	X	the location of the sendmail program varies between systems sometimes it is usr lib sendmail sometime usr sbin sendmail.
14341 	X	object can encapsulate state for several methods.
14342 	X	this allows an object model to be successively refined by.
14343 	X	new stable releases have been coming out roughly every to months since and this seems likely to.
14344 	X	import sys sys exc clear sys exc traceback sys last traceback none.
14345 	X	a third party application installed on the machine might have been written in python and included a python.
14346 	X	the sendmail manual page will help you.
14347 	X	def set self x self value x.
14348 	X	you might have a generic mailbox class that provides basic accessor methods for a mailbox and subclasses such as mboxmailbox maildirmailbox outlookmailbox that handle various specific mailbox.
14349 	X	freeze is a program that allows you to ship a python program as a single stand alone executable.
14350 	X	currently there are usually around months between major.
14351 	X	tracebacks are used for reporting errors implementing debuggers and related.
14352 	X	for a home computer the most common such application is pysol http www oberhumer com opensource pysol a solitaire game that includes over different games and.
14353 	X	def up self self value self value.
14354 	X	it is not a compiler your programs dont run any faster but they are more easily distributable at least to platforms with the same os and.
14355 	X	with the introduction of retrospective bugfix releases the stability of existing releases is were.
14356 	X	they contain a portion of the program state extracted during the handling of an exception usually the most recent exception.
14357 	X	some windows machines also have python.
14358 	X	sendmail usr sbin sendmail sendmail location import os p os popen s t i sendmail w p write to receiver at example com n p write subject test n p write n blank line separating headers from body p write some text n p write some more text n sts p close if sts.
14359 	X	def down self self value self value.
14360 	X	a method is a function on some object x that you normally call as x name.
14361 	X	read the readme file of the freeze program for more.
14362 	X	bugfix releases indicated by a third component of the version number e g.
14363 	X	in the absence of circularities and tracebacks python programs need not explicitly manage.
14364 	X	at this writing were aware of computers from hewlett packard and compaq that include.
14365 	X	count counter inc dec reset count up count down count set.
14366 	X	methods are defined as functions inside the class definition.
14367 	X	you can use freeze on windows but you must download the source tree see http www python org download source.
14368 	X	are managed for stability only fixes for known problems are included in a bugfix release and its guaranteed that interfaces will remain the same throughout a series of bugfix.
14369 	X	why doesnt python use a more traditional garbage collection scheme.
14370 	X	apparently some of hp compaqs administrative tools are written in.
14371 	X	how do i avoid blocking in the connect method of a socket.
14372 	X	here inc dec and reset act like functions which share the same counting.
14373 	X	class c def meth self arg return arg self attribute.
14374 	X	the freeze program is in the tools freeze subdirectory of the source.
14375 	X	the release download is recommended production ready version at this point in.
14376 	X	for one thing this is not a c standard feature and hence its not.
14377 	X	all apple computers running mac os x have python installed its included in the base.
14378 	X	the select module is commonly used to help with asynchronous i o on.
14379 	X	how do i copy an object in python.
14380 	X	you need the microsoft vc compiler and you probably need to build.
14381 	X	python is also considered production ready but may be less useful since currently there is more third party software available for python than for python python code will generally not run unchanged in python.
14382 	X	yes we know about the boehm gc.
14383 	X	to prevent the tcp connect from blocking you can set the socket to non blocking.
14384 	X	in general try copy copy or copy deepcopy for the general.
14385 	X	self is merely a conventional name for the first argument of a.
14386 	X	the required project files are in the pcbuild.
14387 	X	how many people are using python.
14388 	X	it has bits of assembler code for most common platforms not for all of them and although it is mostly transparent it isnt completely transparent patches are required to get python to work with.
14389 	X	that depends on where python came.
14390 	X	then when you do the connect you will either connect immediately unlikely or get an exception that contains the error number as errno.
14391 	X	not all objects can be copied but most.
14392 	X	a method defined as meth self a b c should be called as x meth a b c for some instance x of the class in which the definition occurs the called method will think it is called as meth x a b c.
14393 	X	is a pyd file the same as a dll.
14394 	X	probably tens of thousands of users though its difficult to obtain an exact.
14395 	X	traditional gc also becomes a problem when python is embedded into other.
14396 	X	if someone installed it deliberately you can remove it without hurting.
14397 	X	errno einprogress indicates that the connection is in progress but hasnt finished.
14398 	X	some objects can be copied more.
14399 	X	see also why must self be used explicitly in method definitions and calls.
14400 	X	yes pyd files are dlls but there are a few.
14401 	X	python is available for free download so there are no sales figures and its available from many different sites and packaged with many linux distributions so download statistics dont tell the whole story.
14402 	X	while in a standalone python its fine to replace the standard malloc and free with versions provided by the gc library an application embedding python may want to have its own substitute for malloc and free and may not want.
14403 	X	on windows use the add remove programs icon in the control.
14404 	X	different oses will return different values so youre going to have to check whats returned on your.
14405 	X	doc faq general why must self be used explicitly in method definitions and calls.
14406 	X	if you have a dll named foo pyd then it must have a function.
14407 	X	the comp lang python newsgroup is very active but not all python users post to the group or even read.
14408 	X	right now python works with anything that implements malloc and free.
14409 	X	if python was installed by a third party application you can also remove it but that application will no longer.
14410 	X	you can use the connect ex method to avoid creating an.
14411 	X	how do i check if an object is an instance of a given class or of a subclass of it.
14412 	X	you can then write python import foo and python will search for foo pyd as well as foo py foo pyc and if it finds it will attempt to call initfoo to initialize.
14413 	X	overall there is no accurate estimate of the number of subscribers or python.
14414 	X	in jython the following code which is fine in cpython will probably run out of file descriptors long before it runs out of memory.
14415 	X	you should probably use that applications uninstaller rather than removing python.
14416 	X	it will just return the errno.
14417 	X	sequences can be copied by slicing.
14418 	X	use the built in function isinstance obj cls.
14419 	X	you do not link your exe with foo lib as that would cause windows to require the dll to be.
14420 	X	have any significant projects been done in python.
14421 	X	for file in very long list of files f open file c f read.
14422 	X	if python came with your operating system removing it is not.
14423 	X	to poll you can call connect ex again later or errno eisconn indicate that youre connected or you can pass this socket to select to check if its.
14424 	X	note that most programs do not use isinstance on user defined classes very.
14425 	X	note that the search path for foo pyd is pythonpath not the same as the path that windows uses to search for foo.
14426 	X	from python checkins at python org andrew kuchling subject python checkins r in sandbox trunk faq readme extending rst general rst gui rst index rst installed rst library rst programming rst windows rst message id.
14427 	X	see http python org about success for a list of projects that use.
14428 	X	using the current reference counting and destructor scheme each new assignment to f closes the previous.
14429 	X	if you remove it whatever tools were written in python will no longer run and some of them might be important to.
14430 	X	are there any interfaces to database packages in python.
14431 	X	how can i find the methods or attributes of an object.
14432 	X	if you are developing the classes yourself a more proper object oriented style is to define methods on the classes that encapsulate a particular behaviour instead of checking the objects class and doing a different thing based on what class it.
14433 	X	also foo pyd need not be present to run your program whereas if you linked your program with a dll the dll is.
14434 	X	consulting the proceedings for past python conferences community workshops will reveal contributions from many different companies and.
14435 	X	reinstalling the whole system would then be required to fix things.
14436 	X	python includes the bsddb package which provides an interface to the berkeleydb http docs python org library bsddb.
14437 	X	for an instance x of a user defined class dir x returns an alphabetized list of the names containing the instance attributes and methods and attributes defined by its.
14438 	X	for example if you have a function that does something.
14439 	X	of course foo pyd is required if you want to say import foo.
14440 	X	high profile python projects include the mailman mailing list manager http www list org and the zope application server http www zope org.
14441 	X	if you want to write code that will work with any python implementation you should explicitly close the file this will work regardless of gc.
14442 	X	added sandbox trunk faq library rst sandbox trunk faq library rst wed sep.
14443 	X	interfaces to disk based hashes such as dbm http docs python org library dbm and gdbm http docs python org library gdbm are also included with standard.
14444 	X	how can my code discover the name of an object.
14445 	X	a better approach is to define a search method on all the classes and just call it.
14446 	X	in a dll linkage is declared in the source code with declspec dllexport.
14447 	X	several linux distributions most notably red hat http www redhat com have written part or all of their installer and system administration software in.
14448 	X	for file in very long list of files f open file c f read f close.
14449 	X	support for most relational databases is.
14450 	X	generally speaking it cant because objects dont really have.
14451 	X	class mailbox def search self code to search a mailbox.
14452 	X	in a pyd linkage is defined in a list of available.
14453 	X	added sandbox trunk faq sandbox trunk faq readme sandbox trunk faq extending rst sandbox trunk faq general rst sandbox trunk faq gui rst sandbox trunk faq index rst sandbox trunk faq installed rst sandbox trunk faq library rst sandbox trunk faq programming rst sandbox trunk faq windows rst.
14454 	X	companies that use python internally include google yahoo and industrial light.
14455 	X	why isnt all memory freed when python exits.
14456 	X	see the databaseprogramming wiki page http wiki python org moin databaseprogramming for.
14457 	X	essentially assignment always binds a name to a value the same is true of def and class statements but in that case the value is a.
14458 	X	class document def search self code to search a document.
14459 	X	how can i embed python into a windows application.
14460 	X	added sandbox trunk faq readme sandbox trunk faq readme wed sep.
14461 	X	what new developments are expected for python in the future.
14462 	X	objects referenced from the global namespaces of python modules are not always deallocated when python.
14463 	X	how do i find a module or application to perform task x.
14464 	X	how do you implement persistent objects in python.
14465 	X	embedding the python interpreter in a windows app can be summarized as follows.
14466 	X	to add the faq to the python documentation set.
14467 	X	see http www python org dev peps for the python enhancement proposals peps.
14468 	X	this may happen if there are circular.
14469 	X	check the library reference http docs python org library to see if theres a relevant standard library.
14470 	X	the pickle library module http docs python org library pickle solves this in a very general way though you still cant store things like open files sockets or windows and the shelve library module http docs python org library shelve uses pickle and g dbm to create persistent mappings containing arbitrary python.
14471 	X	delegation is an object oriented technique also called a design pattern.
14472 	X	do not build python into your exe file.
14473 	X	create a symlink from doc faq to this.
14474 	X	peps are design documents describing a suggested new feature for python providing a concise technical specification and a.
14475 	X	there are also certain bits of memory that are allocated by the c library that are impossible to free e g a tool like purify will complain about these.
14476 	X	eventually youll learn whats in the standard library and will able to skip this.
14477 	X	for better performance you can use the cpickle module http docs python org library pickle module cpickle.
14478 	X	a b b a print b print a.
14479 	X	lets say you have an object x and want to change the behaviour of just one of its.
14480 	X	on windows python must be a dll to handle importing modules that are themselves.
14481 	X	make the following change to contents rst.
14482 	X	pep dev peps pep explains the pep process and pep format read it first if you want to submit a.
14483 	X	python is however aggressive about cleaning up memory on exit and does try to destroy every single.
14484 	X	search the python package index http pypi python org pypi.
14485 	X	a more awkward way of doing things is to use pickles little sister.
14486 	X	arguably the class has a name even though it is bound to two names and invoked through the name b the created instance is still reported as an instance of class a however it is impossible to say whether the instances name is a or b since both names are bound to the same.
14487 	X	you can create a new class that provides a new implementation of the method youre interested in changing and delegates all other methods to the corresponding method of x.
14488 	X	this is the first key undocumented.
14489 	X	index contents rst contents rst working copy install index rst documenting index rst howto index rst faq index rst glossary rst.
14490 	X	new developments are discussed on the python dev mailing list http mail python org mailman listinfo python dev.
14491 	X	if you want to force python to delete certain things on deallocation use the sys exitfunc hook to run a function that will force those.
14492 	X	next check the vaults of parnassus http www vex net parnassus an older index of.
14493 	X	the marshal module http docs python org library marshal provides very fast ways to store noncircular basic python types to files and strings and back.
14494 	X	generally speaking it should not be necessary for your code to know the names of particular.
14495 	X	instead link to pythonnn dll it is typically installed in c windows system.
14496 	X	optional to add the faqs to the top level table of contents apply the following.
14497 	X	is it reasonable to propose incompatible changes to python.
14498 	X	why are there separate tuple and list data types.
14499 	X	finally try google http www google com or other web search.
14500 	X	although marshal does not do fancy things like store instances or handle shared references properly it does run extremely.
14501 	X	unless you are deliberately writing introspective programs this is usually an indication that a change of approach might be.
14502 	X	for example the following class implements a class that behaves like a file but converts all written data to uppercase.
14503 	X	nn is the python version a number such as for python.
14504 	X	index tools sphinxext indexcontent html tools sphinxext indexcontent html working copy p class biglink a class biglink href pathto faq index faqs a br span class linkdescr frequently asked questions span p.
14505 	X	lists and tuples while similar in many respects are generally used in fundamentally different.
14506 	X	searching for python plus a keyword or two for your topic of interest will usually find something.
14507 	X	for example loading a half megabyte of data may take less than a third of a.
14508 	X	in comp lang python fredrik lundh once gave an excellent analogy in answer to this question.
14509 	X	you can link to python statically or.
14510 	X	added sandbox trunk faq extending rst sandbox trunk faq extending rst wed sep extending embedding faq.
14511 	X	there are already millions of lines of python code around the world so any change in the language that invalidates more than a very small fraction of existing programs has to be frowned.
14512 	X	tuples can be thought of as were similar to pascal records or c structs theyre small collections of related data which may be of different types which are operated on as a.
14513 	X	where is the math py socket py regex py source file.
14514 	X	this often beats doing something more complex and general such as using gdbm with pickle.
14515 	X	the same way as you get the name of that cat you found on your porch the cat object itself cannot tell you its name and it doesnt really care so the only way to find out what its called is to ask all your neighbours namespaces if its their cat object.
14516 	X	linking statically means linking against pythonnn lib while dynamically linking means linking against pythonnn.
14517 	X	can i create my own functions in c yes you can create built in modules containing functions variables exceptions and even new types in c.
14518 	X	even if you can provide a conversion program theres still the problem of updating all documentation many books have been written about python and we dont want to invalidate them all at a single.
14519 	X	for example a cartesian coordinate is appropriately represented as a tuple of two or three.
14520 	X	if you cant find a source file for a module it may be a builtin or dynamically loaded module implemented in c c or other compiled.
14521 	X	and dont be surprised if youll find that its known by many names or no name at all.
14522 	X	the drawback to dynamic linking is that your app wont run if pythonnn dll does not exist on your.
14523 	X	this is explained in the document extending and embedding the python interpreter http docs python org ext ext html.
14524 	X	providing a gradual upgrade path is necessary if a feature has to be.
14525 	X	lists on the other hand are more like arrays in other.
14526 	X	in this case you may not have the source file or it may be something like mathmodule c somewhere in a c source directory not on the python path.
14527 	X	the default format used by the pickle module is a slow one that results in readable.
14528 	X	whats up with the comma operators precedence.
14529 	X	def getattr self name return getattr.
14530 	X	general note pythonnn lib is the so called import lib corresponding to python.
14531 	X	most intermediate or advanced python books will also cover this.
14532 	X	pep dev peps pep describes the procedure followed for introducing backward incompatible changes while minimizing disruption for.
14533 	X	they tend to hold a varying number of objects all of which have the same type and which are operated on one by.
14534 	X	there are at least three kinds of modules in python.
14535 	X	making it the default but it would break backward compatibility.
14536 	X	comma is not an operator in.
14537 	X	here the upperout class redefines the write method to convert the argument string to uppercase before calling the underlying.
14538 	X	it merely defines symbols for the.
14539 	X	can i create my own functions in c yes using the c compatibility features found in c.
14540 	X	what is the python software foundation.
14541 	X	for example os listdir returns a list of strings representing the files in the current.
14542 	X	modules written in python py modules written in c and dynamically loaded dll pyd so sl etc modules written in c and linked with the interpreter to get a list of these type.
14543 	X	largestring z mypickle cpickle dumps largestring protocol.
14544 	X	linking dynamically greatly simplifies link options everything happens at run.
14545 	X	place extern c around the python include files and put extern c before each function that is going to be called by the python.
14546 	X	the python software foundation is an independent non profit organization that holds the copyright on python versions and.
14547 	X	functions which operate on this output would generally not break if you added another file or two to the.
14548 	X	import sys print sys builtin module names.
14549 	X	if my program crashes with a bsddb or anydbm database open it gets.
14550 	X	all other methods are delegated to the underlying.
14551 	X	your code must load pythonnn dll using the windows loadlibraryex.
14552 	X	global or static c objects with constructors are probably not a good.
14553 	X	the psfs mission is to advance open source technology related to the python programming language and to publicize the use of.
14554 	X	tuples are immutable meaning that once a tuple is created you cant replace any of its elements with a new.
14555 	X	how do i make a python script executable on unix.
14556 	X	databases opened for write access with the bsddb module and often by the anydbm module since it will preferentially use bsddb must explicitly be closed using the close method of the.
14557 	X	since the comma is not an operator but a separator between expressions the above is evaluated as if you had entered.
14558 	X	the delegation is accomplished via the getattr method consult the language reference http docs python org reference datamodel html customizing attribute access for more information about controlling attribute.
14559 	X	the code must also use access routines and data in pythonnn dll that is pythons c apis using pointers obtained by the windows getprocaddress.
14560 	X	writing c is hard are there any alternatives.
14561 	X	the psfs home page is at http www python org psf.
14562 	X	lists are mutable meaning that you can always change a lists.
14563 	X	you need to do two things the script files mode must be executable and the first line must begin with.
14564 	X	the underlying library caches database contents which need to be converted to on disk form and.
14565 	X	note that for more general cases delegation can get.
14566 	X	macros can make using these pointers transparent to any c code that calls routines in pythons c.
14567 	X	there are a number of alternatives to writing your own c extensions depending on what youre trying to.
14568 	X	donations to the psf are tax exempt in the.
14569 	X	only immutable elements can be used as dictionary keys and hence only tuples and not lists can be used as.
14570 	X	followed by the path of the python.
14571 	X	if you have initialized a new bsddb database but not written anything to it before the program crashes you will often wind up with a zero length file and encounter an exception the next time the file is.
14572 	X	when attributes must be set as well as retrieved the class must define a settattr method too and it must do so.
14573 	X	borland note convert pythonnn lib to omf format using coffomf exe.
14574 	X	if you need more speed psyco http psyco sourceforge net generates x assembly code from python.
14575 	X	if you use python and find it helpful please contribute via the psf donation page psf donations.
14576 	X	the first is done by executing chmod x scriptfile or perhaps chmod scriptfile.
14577 	X	i tried to open berkeley db file but bsddb produces bsddb error invalid argument.
14578 	X	the same is true of the various assignment operators etc.
14579 	X	the basic implementation of setattr is roughly equivalent to the following.
14580 	X	if you use swig it is easy to create a python extension module that will make the apps data and methods available to.
14581 	X	you can use psyco to compile the most time critical functions in your code and gain a significant improvement with very little effort as long as youre running on a machine with an x compatible.
14582 	X	pythons lists are really variable length arrays not lisp style linked.
14583 	X	the second can be done in a number of.
14584 	X	help how can i restore my data.
14585 	X	they are not truly operators but syntactic delimiters in assignment.
14586 	X	class x def setattr self name value.
14587 	X	swig will handle just about all the grungy details for.
14588 	X	pyrex http www cosc canterbury ac nz greg python pyrex is a compiler that accepts a slightly modified form of python and generates the corresponding c.
14589 	X	as of august no major problems have been reported and yk compliance seems to be a non.
14590 	X	the implementation uses a contiguous array of references to other objects and keeps a pointer to this array and the arrays length in a list head.
14591 	X	the most straightforward way is to write.
14592 	X	is there an equivalent of cs.
14593 	X	the result is c code that you link into your exe file.
14594 	X	pyrex makes it possible to write an extension without having to learn pythons c.
14595 	X	python does very few date calculations and for those it does perform relies on the c library.
14596 	X	this makes indexing a list a i an operation whose cost is independent of the size of the list or the value of the.
14597 	X	the most frequent cause for the error is that you tried to open an earlier berkeley db file with a later version of the berkeley db.
14598 	X	yes this feature was added in python.
14599 	X	you do not have to create a dll file and this also simplifies.
14600 	X	if you need to interface to some c or c library for which no python extension currently exists you can try wrapping the librarys data types and functions with a tool such as swig http www swig org.
14601 	X	python generally represents times either as seconds since or as a year month day tuple where the year is expressed with four digits which makes yk bugs.
14602 	X	when items are appended or inserted the array of references is.
14603 	X	as the very first line of your file using the pathname for where the python interpreter is installed on your.
14604 	X	many linux systems now have all three versions of berkeley db.
14605 	X	the syntax would be as follows.
14606 	X	dict to store local state for self without causing an infinite.
14607 	X	swig will create an init function a c function whose name depends on the name of the extension.
14608 	X	sip http www riverbankcomputing co uk sip cxx http cxx sourceforge net boost http www boost org libs python doc index html or weave http www scipy org site content weave are also alternatives for wrapping c.
14609 	X	so as long as your c library is okay python should be.
14610 	X	some cleverness is applied to improve the performance of appending items repeatedly when the array must be grown some extra space is allocated so the next few times dont require an actual.
14611 	X	if you would like the script to be independent of where the python interpreter lives you can use the env.
14612 	X	if you are migrating from version to a newer version use db dump to dump a plain text version of the.
14613 	X	how do i call a method defined in a base class from a derived class that overrides it.
14614 	X	for example if the name of the module is leo the init function will be called.
14615 	X	how can i execute arbitrary python statements from c the highest level function to do this is pyrun simplestring which takes a single string argument to be executed in the context of the module main and returns for success and when an exception occurred including syntaxerror.
14616 	X	of course its possible that a particular application written in python makes assumptions about digit.
14617 	X	almost all unix variants support the following assuming the python interpreter is in a directory on the users path.
14618 	X	if you are migrating from version to version use db dump to create a plain text version of the.
14619 	X	if youre using new style classes use the built in super function.
14620 	X	if you use swig shadow classes as you should the init function will be called.
14621 	X	if you want more control use pyrun string see the source for pyrun simplestring in python pythonrun c.
14622 	X	because python is available free of charge there are no absolute.
14623 	X	pythons dictionaries are implemented as resizable hash.
14624 	X	in either case use db load to create a new native database for the latest version installed on your.
14625 	X	class derived base def meth self super derived self meth.
14626 	X	this initializes a mostly hidden helper class used by the shadow.
14627 	X	how can i evaluate an arbitrary python expression from c call the function pyrun string from the previous question with the start symbol py eval input it parses an expression evaluates it and returns its.
14628 	X	if there are unforeseen problems liability is the users problem rather than the developers and there is nobody you can sue for.
14629 	X	compared to b trees this gives better performance for lookup the most common operation by far under most circumstances and the implementation is.
14630 	X	if you have version of berkeley db installed you should be able to use db load to create a native version.
14631 	X	for versions previous to the answer would be.
14632 	X	if youre using classic classes for a class definition such as class derived base you can call method meth defined in base or one of base s base classes as base meth self arguments.
14633 	X	the reason you can link the c code in step into your exe file is that calling the initialization function is equivalent to importing the module into python.
14634 	X	how do i extract c values from a python object.
14635 	X	the python copyright notice contains the following disclaimer.
14636 	X	dictionaries work by computing a hash code for each key stored in the dictionary using the hash built in.
14637 	X	the path variable for cgi scripts is often very minimal so you need to use the actual absolute pathname of the.
14638 	X	you should move away from berkeley db version files because the hash file code contains known bugs that can corrupt your.
14639 	X	in many cases you can mimic ab c with a and b or c but theres a flaw if b is zero or empty or none anything that tests false then c will be selected.
14640 	X	here base meth is an unbound method so you need to provide the self.
14641 	X	this is the second key undocumented.
14642 	X	psf is making python available to licensee on an as is.
14643 	X	the hash code varies widely depending on the key for example python hashes to while python a string that differs by a single bit hashes to.
14644 	X	occasionally a users environment is so full that the usr bin env program fails or theres no env program at.
14645 	X	in many cases you can prove by looking at the code that this cant happen e g because b is a constant or has a type that can never be false but in general this can be a.
14646 	X	how can i organize my code to make it easier to change the base class.
14647 	X	in short you can use the following code to initialize the python interpreter with your extension.
14648 	X	if its a tuple pytuplesize o returns its length and pytuple getitem o i returns its ith.
14649 	X	psf makes no representations or warranties express or.
14650 	X	the hash code is then used to calculate a location in an internal array where the value will be.
14651 	X	in that case you can try the following hack due to alex rezinsky.
14652 	X	how do i generate random numbers in python.
14653 	X	tim peters who wishes it was steve majewski suggested the following solution a and b or c.
14654 	X	you could define an alias for the base class assign the real base class to it before your class definition and use the alias throughout your.
14655 	X	include python h py initialize initialize.
14656 	X	lists have similar functions pylistsize o and pylist getitem o i.
14657 	X	by way of example but not limitation psf makes no and disclaims any representation or warranty of merchantability or fitness for any particular purpose or that the use of python will not infringe any third party.
14658 	X	assuming that youre storing keys that all have different hash values this means that dictionaries take constant time o in computer science notation to retrieve a.
14659 	X	the standard module random http docs python org library random implements a random number.
14660 	X	because b is a singleton list it is never false so the wrong path is never taken then applying to the whole thing gets the b or c that you really.
14661 	X	then all you have to change is the value assigned to the.
14662 	X	for strings pystring size o returns its length and pystring asstring o a pointer to its.
14663 	X	psf shall not be liable to licensee or any other users of python for any incidental special or consequential damages or loss as a result of modifying distributing or otherwise using python or any derivative thereof even if advised of the possibility.
14664 	X	it also means that no sorted order of the keys is maintained and traversing the array as the keys and items do will output the dictionarys content in some arbitrary jumbled.
14665 	X	the minor disadvantage is that this defines the scripts doc.
14666 	X	ugly but it gets you there in the rare cases where it is really inconvenient to rewrite your code using.
14667 	X	incidentally this trick is also handy if you want to decide dynamically e g depending on availability of resources which base class to.
14668 	X	pyrun simplestring import myapp import the shadow.
14669 	X	note that python strings may contain null bytes so cs strlen should not be.
14670 	X	the good news is that if you encounter a problem you have full source available to track it down and fix.
14671 	X	why must dictionary keys be immutable.
14672 	X	however you can fix that by adding.
14673 	X	the best course is usually to write a simple else.
14674 	X	there are two problems with pythons c api which will become apparent if you use a compiler other than msvc the compiler used to build pythonnn.
14675 	X	to test the type of an object first make sure it isnt null and then use pystring check o pytuple check o pylist check o.
14676 	X	this is one advantage of an open source programming.
14677 	X	the hash table implementation of dictionaries uses a hash value calculated from the key value to find the.
14678 	X	this returns a random floating point number in the range.
14679 	X	another solution is to implement the.
14680 	X	class derived basealias def meth self basealias meth self.
14681 	X	problem the so called very high level functions that take file arguments will not work in a multi compiler environment because each compilers notion of a struct file will be.
14682 	X	there is also a high level api to python objects which is provided by the so called abstract interface read include abstract h for further.
14683 	X	is python a good language for beginning programmers.
14684 	X	if the key were a mutable object its value could change and thus its hash could also.
14685 	X	is there a curses termcap package for python.
14686 	X	there are also many other specialized generators in this module such as.
14687 	X	from an implementation standpoint these are very low level.
14688 	X	it allows interfacing with any kind of python sequence using calls like pysequence length pysequence getitem as well as many other useful.
14689 	X	it is still common to start students with a procedural subset of a statically typed language such as pascal c or a subset of c or.
14690 	X	but since whoever changes the key object cant tell that it was were used as a dictionary key it cant move the entry around in the.
14691 	X	for unix variants the standard python source distribution comes with a curses module in the modules subdirectory though its not compiled by default note that this is not available in the windows distribution there is no curses module for windows.
14692 	X	randrange a b chooses an integer in the range a b.
14693 	X	def q cond on true on false if cond if not isfunction on true return on true else return apply on true else if not isfunction on false return on false else return apply on false.
14694 	X	static data in the sense of c or java is easy static methods again in the sense of c or java are not supported.
14695 	X	problem swig generates the following code when generating wrappers to void functions.
14696 	X	how do i use py buildvalue to create a tuple of arbitrary length.
14697 	X	students may be better served by learning python as their first.
14698 	X	then when you try to look up the same object in the dictionary it wont be found because its hash value is.
14699 	X	the curses module supports basic curses features as well as many additional functions from ncurses and sysv curses such as colour alternative character set support pads and mouse.
14700 	X	uniform a b chooses a floating point number in the range a b.
14701 	X	in most cases youll pass b and c directly q a b c.
14702 	X	for static data simply define a class.
14703 	X	py incref py none resultobj py none return resultobj.
14704 	X	use t pytuple new n instead and fill it with objects using pytuple setitem t i o note that this eats a reference count of o so you have to py incref.
14705 	X	python has a very simple and consistent syntax and a large standard library and most importantly using python in a beginning programming course lets students concentrate on important programming skills such as problem decomposition and data type.
14706 	X	if you tried to look up the old value it wouldnt be found either because the value of the object found in that hash bin would be.
14707 	X	this means the module isnt compatible with operating systems that only have bsd curses but there dont seem to be any currently maintained oses that fall into this.
14708 	X	normalvariate mean sdev samples the normal gaussian.
14709 	X	to avoid evaluating b or c when they shouldnt be encapsulate them within a lambda function e g q a lambda b lambda c.
14710 	X	to assign a new value to the attribute you have to explicitly use the class name in the assignment.
14711 	X	alas py none is a macro that expands to a reference to a complex data structure called py nonestruct inside pythonnn.
14712 	X	lists have similar functions pylist new n and pylist setitem l i o.
14713 	X	with python students can be quickly introduced to basic concepts such as loops and.
14714 	X	if you want a dictionary indexed with a list simply convert the list to a tuple first the function tuple l creates a tuple with the same entries as the list l.
14715 	X	for windows use the consolelib module http effbot org zone console index htm.
14716 	X	some higher level functions operate on sequences directly such as.
14717 	X	it is asked why python has no if then else.
14718 	X	class c count number of times c init called.
14719 	X	again this code will fail in a mult compiler.
14720 	X	note that you must set all the tuple items to some value before you pass the tuple to python code pytuple new n initializes them to null which isnt a valid python.
14721 	X	they can probably even work with user defined objects in their very first.
14722 	X	tuples are immutable and can therefore be used as dictionary.
14723 	X	is there an equivalent to cs onexit in python.
14724 	X	choice s chooses random element from a given sequence shuffle l shuffles a list in place i e permutes it randomly.
14725 	X	there are several answers many languages do just fine without one it can easily lead to less readable code no sufficiently pythonic syntax is discovered a search of the standard library found remarkably few places where using an if then else expression would make the code more.
14726 	X	def init self c count c count.
14727 	X	how do i call an objects method from c the pyobject callmethod function can be used to call an arbitrary method of an.
14728 	X	for a student who has never programmed before using a statically typed language seems.
14729 	X	some unacceptable solutions that have been proposed.
14730 	X	the atexit module http docs python org library atexit provides a register function that is similar to cs.
14731 	X	theres also a random class you can instantiate to create independent multiple random number.
14732 	X	in pep dev peps pep was written proposing several possible syntaxes and the community was asked to vote on the.
14733 	X	def getcount self return c count or return self count.
14734 	X	the parameters are the object the name of the method to call a format string like that used with py buildvalue and the argument values.
14735 	X	it presents additional complexity that the student must master and slows the pace of the.
14736 	X	hash lists by their address object id.
14737 	X	why dont my signal handlers work.
14738 	X	added sandbox trunk faq programming rst sandbox trunk faq programming rst wed sep programming faq.
14739 	X	c count also refers to c count for any c such that isinstance c c holds unless overridden by c itself or by some class on the base class search path from c class back to c.
14740 	X	it may be possible to use swigs typemap command to make the change automatically though i have not been able to get this to work im a complete swig newbie.
14741 	X	pyobject pyobject callmethod pyobject object char method name char arg format.
14742 	X	the students are trying to learn to think like a computer decompose problems design consistent interfaces and encapsulate.
14743 	X	this doesnt work because if you construct a new list with the same value it wont be found e g.
14744 	X	the most common problem is that the signal handler is declared with the wrong argument.
14745 	X	is there a source code level debugger with breakpoints single stepping.
14746 	X	most people liked one of the syntaxes but also hated other syntaxes many votes implied that people preferred no ternary operator rather than having a syntax they.
14747 	X	caution within a method of c an assignment like self count creates a new and unrelated instance vrbl named count in self s own.
14748 	X	using a python shell script to put up a python interpreter window from inside your windows app is not a good idea the resulting window will be independent of your apps windowing.
14749 	X	this works for any object that has methods whether built in or user.
14750 	X	while learning to use a statically typed language is important in the long term it is not necessarily the best topic to address in the students first programming.
14751 	X	the pdb module is a simple but adequate console mode debugger for.
14752 	X	is it possible to write obfuscated one liners in python.
14753 	X	rebinding of a class static data name must always specify the class whether inside a method or not.
14754 	X	rather you or the wxpythonwindow class should create a native interpreter.
14755 	X	you are responsible for eventually py decref ing the return.
14756 	X	many other aspects of python make it a good first.
14757 	X	would raise a keyerror exception because the id of the used in the second line differs from that in the first.
14758 	X	it is part of the standard python library and is documented in the library reference manual http docs python org library pdb html.
14759 	X	usually this is done by nesting lambda within lambda.
14760 	X	static methods are possible since python.
14761 	X	it is easy to connect that window to the python.
14762 	X	to call e a file objects seek method with arguments assuming the file object pointer is f.
14763 	X	like java python has a large standard library so that students can be assigned programming projects very early in the course that do.
14764 	X	in other words dictionary keys should be compared using not using.
14765 	X	so it should be declared with two arguments.
14766 	X	you can also write your own debugger by using the code for pdb as an.
14767 	X	see the following three examples due to ulf bartelt.
14768 	X	you can redirect pythons i o to any object that supports read and write so all you need is a python object defined in your extension module that contains read and write.
14769 	X	res pyobject callmethod f seek ii if res null an exception occurred else py decref res.
14770 	X	assignments arent restricted to the standard four function calculator and check balancing.
14771 	X	make a copy when using a list as a.
14772 	X	the idle interactive development environment which is part of the standard python distribution normally available as tools scripts idle includes a graphical.
14773 	X	first fibonacci numbers print map lambda xf lambda xf x or f x f f x f f xf range.
14774 	X	how do i use python for cgi.
14775 	X	note that since pyobject callobject always wants a tuple for the argument list to call a function without arguments pass for the format and to call a function with one argument surround the argument in parentheses e g i.
14776 	X	by using the standard library students can gain the satisfaction of working on realistic applications as they learn the fundamentals of.
14777 	X	this doesnt work because the list were a mutable object could contain a reference to itself and then the copying code would run into an infinite.
14778 	X	how do i test a python program or component.
14779 	X	there is documentation for the idle debugger at http www python org idle doc idle html debugger.
14780 	X	with python decorators this can also be written as.
14781 	X	on the microsoft iis server or on the win ms personal web server you set up python in the same way that you would set up any other scripting.
14782 	X	how do i catch the output from pyerr print or anything that prints to stdout stderr.
14783 	X	using the standard library also teaches students about code.
14784 	X	allow lists as keys but tell the user not to modify.
14785 	X	pythonwin is a python ide that includes a gui debugger based on.
14786 	X	in python code define an object that supports the write.
14787 	X	third party modules such as pygame are also helpful in extending the students.
14788 	X	this would allow a class of hard to track bugs in programs when you forgot or modified a list by.
14789 	X	the doctest module http docs python org library doctest finds examples in the docstrings for a module and runs them comparing the output with the expected output given in the.
14790 	X	the pythonwin debugger colors breakpoints and has quite a few cool features such as debugging non pythonwin.
14791 	X	how do i specify hexadecimal and octal integers.
14792 	X	however a far more straightforward way to get the effect of a static method is via a simple module level function.
14793 	X	hkey local machine system currentcontrolset services wsvc parameters scriptmap.
14794 	X	assign this object to sys stdout and sys stderr.
14795 	X	pythons interactive interpreter enables students to test language features while theyre.
14796 	X	it also invalidates an important invariant of dictionaries every value in d keys is usable as a key of the.
14797 	X	the unittest module http docs python org library unittest is a fancier testing framework modelled on java and smalltalk testing.
14798 	X	pythonwin is available as part of the python for windows extensions http sourceforge net projects pywin project and as a part of the activepython distribution see http www activestate com products activepython index html.
14799 	X	to specify an octal digit precede the octal value with a.
14800 	X	and enter the following line making any specific changes that your system may need.
14801 	X	call print error or just allow the standard traceback mechanism to.
14802 	X	they can keep a window with the interpreter running while they enter their programs source in another.
14803 	X	mark lists as read only once they are used as a dictionary.
14804 	X	for testing it helps to write the program so that it may be easily tested by using good modular.
14805 	X	boa constructor http boa constructor sourceforge net is an ide and gui builder that uses.
14806 	X	for example to set the variable a to the octal value in decimal type.
14807 	X	if your code is structured so as to define one class or tightly related class hierarchy per module this supplies the desired.
14808 	X	reg sz c path to python python exe u s s.
14809 	X	then the output will go wherever your write method sends.
14810 	X	if they cant remember the methods for a list they can do something like this.
14811 	X	the problem is that its not just the top level object that could change its value you could use a tuple containing a list as a.
14812 	X	your program should have almost all functionality encapsulated in either functions or class methods and this sometimes has the surprising and delightful effect of making the program run faster because local variable accesses are faster than global accesses.
14813 	X	it offers visual frame creation and manipulation an object inspector many views on the source like object browsers inheritance hierarchies doc string generated html documentation an advanced debugger integrated help and zope.
14814 	X	how can i overload constructors or methods in python.
14815 	X	this line will allow you to call your script with a simple reference like http yourserver scripts yourscript py provided scripts is an executable directory for your server which it usually is by default.
14816 	X	the easiest way to do this is to use the stringio class in the standard.
14817 	X	l dir l append count extend index insert pop remove reverse sort help l append help on built in function append.
14818 	X	entering anything as a key into a dictionary would require marking all objects reachable from there as read only and again self referential objects could cause an infinite.
14819 	X	furthermore the program should avoid depending on mutating global variables since this makes testing much more difficult to.
14820 	X	eric http www die offenbachs de eric index html is an ide built on pyqt and the scintilla editing.
14821 	X	this answer actually applies to all methods but the question usually comes up first in the context of.
14822 	X	the u flag specifies unbuffered and binary mode for stdin needed when working with binary.
14823 	X	sample code and use for catching stdout.
14824 	X	append l append object append object to end l.
14825 	X	there is a trick to get around this if you need to but use it at your own risk you can wrap a mutable structure inside a class instance which has both a cmp and a hash.
14826 	X	the global main logic of your program may be as simple as.
14827 	X	pydb is a version of the standard python debugger pdb modified for use with ddd data display debugger a popular graphical debugger front.
14828 	X	simply precede the hexadecimal number with a zero and then a lower or uppercase x.
14829 	X	in addition it is recommended that using py may not be a good idea for the file extensions when used in this context you might want to reserve py for support modules and use cgi or cgp for main program scripts.
14830 	X	how do i access a module written in python from c you can get a pointer to the module object as follows.
14831 	X	with the interpreter documentation is never far from the student as hes.
14832 	X	you must then make sure that the hash value for all such wrapper objects that reside in a dictionary or other hash based structure remain fixed while the object is in the dictionary or other structure.
14833 	X	pydb can be found at http bashdb sourceforge net pydb and ddd can be found at http www gnu org software.
14834 	X	hexadecimal digits can be specified in lower or.
14835 	X	class c c cout no arguments n c int i cout argument is i n.
14836 	X	in order to set up internet information services to use python for cgi processing please see the following links.
14837 	X	there are also good ides for.
14838 	X	class listwrapper def init self the list self the list the list def cmp self other return self the list other the list def hash self l self the list result len l for i in range len l try result result hash l i i except result result i return result.
14839 	X	at the bottom of the main module of your.
14840 	X	there are a number of commercial python ides that include graphical.
14841 	X	for example in the python interpreter.
14842 	X	in python you have to write a single constructor that catches all cases using default.
14843 	X	http www e coli net pyiis server html for wink server http www e coli net pyiis html for wink pro.
14844 	X	if the module hasnt been imported yet i e it is not yet present in sys modules this initializes the module otherwise it simply returns the value of sys modules modulename.
14845 	X	idle is a cross platform ide for python that is written in python using.
14846 	X	note that the hash computation is complicated by the possibility that some members of the list may be unhashable and also by the possibility of arithmetic.
14847 	X	once your program is organized as a tractable collection of functions and class behaviours you should write test functions that exercise the.
14848 	X	wing ide http wingware com komodo ide http www activestate com products komodo.
14849 	X	class c def init self i none if i is none print no arguments else print argument is i.
14850 	X	note that it doesnt enter the module into any namespace it only ensures it is initialized and is stored in sys modules.
14851 	X	furthermore it must always be the case that if o o ie.
14852 	X	a test suite can be associated with each module which automates a sequence of.
14853 	X	is there a tool to help find bugs or perform static analysis.
14854 	X	this is not entirely equivalent but close enough in.
14855 	X	in the apache configuration file httpd conf add the following line at the end of the file.
14856 	X	you can then access the modules attributes i e any name defined in the module as follows.
14857 	X	emacs users will be happy to know that there is a very good python mode for.
14858 	X	cmp o then hash o hash o ie.
14859 	X	this sounds like a lot of work but since python is so terse and flexible its surprisingly.
14860 	X	pychecker is a static analysis tool that finds bugs in python source code and warns about code complexity and.
14861 	X	its primarily driven by the desire that i j have the same sign as j.
14862 	X	you could also try a variable length argument list e g.
14863 	X	then give your python cgi scripts the extension py and put them in the cgi bin.
14864 	X	all of these programming environments provide syntax highlighting auto indenting and access to the interactive interpreter while.
14865 	X	hash regardless of whether the object is in a dictionary or.
14866 	X	you can make coding much more pleasant and fun by writing your test functions in parallel with the production code since this makes it easy to find bugs and even design flaws.
14867 	X	you can get pychecker from http pychecker sf.
14868 	X	if you want that and also want.
14869 	X	how do i keep editors from inserting tabs into my python source.
14870 	X	calling pyobject setattrstring to assign to variables in the module also.
14871 	X	consult http www python org editors for a full list of python editing.
14872 	X	if you fail to meet these restrictions dictionaries and other hash based structures will.
14873 	X	support modules that are not intended to be the main module of a program may include a self test of the.
14874 	X	pylint http www logilab org projects pylint is another tool that checks if a module satisfies a coding standard and also makes it possible to write plug ins to add a custom.
14875 	X	i i j j i j.
14876 	X	the same approach works for all method.
14877 	X	the faq does not recommend using tabs and the python style guide http www python org dev peps pep recommends spaces for distributed python code this is also the emacs python mode.
14878 	X	how do i interface to c objects from python.
14879 	X	if you want to discuss pythons use in education then you may be interested in joining the edu sig mailing list community sigs current edu sig.
14880 	X	in the case of listwrapper whenever the wrapper object is in a dictionary the wrapped list must not change to avoid.
14881 	X	in addition to the bug checking that pychecker performs pylint offers some additional features such as checking line length whether variable names are well formed according to your coding standard whether declared interfaces are fully implemented and.
14882 	X	then integer division has to return the.
14883 	X	i try to use spam and i get an error about someclassname.
14884 	X	under any editor mixing tabs and spaces is a bad.
14885 	X	depending on your requirements there are many.
14886 	X	what is this bsddb module my application keeps complaining about.
14887 	X	dont do this unless you are prepared to think hard about the requirements and the consequences of not meeting them.
14888 	X	even programs that interact with complex external interfaces may be tested when the external interfaces are unavailable by using fake interfaces implemented in.
14889 	X	http www logilab org projects pylint documentation provides a full list of pylints.
14890 	X	c also requires that identity to hold and then compilers that truncate i j need to make i j have the same sign as i.
14891 	X	variables with double leading underscore are mangled to provide a simple but effective way to define class private.
14892 	X	msvc is no different in this respect and is easily configured to use spaces take tools options tabs and for file type default set tab size and indent size to and select the insert spaces radio.
14893 	X	to do this manually begin by reading the extending and embedding document http docs python org ext ext html.
14894 	X	starting with the distribution includes the pybsddb package http pybsddb sf net as a replacement for the old bsddb.
14895 	X	how can i create a stand alone binary from a python script.
14896 	X	there are few real use cases for i j when j is.
14897 	X	any identifier of the form spam at least two leading underscores at most one trailing underscore is textually replaced with classname spam where classname is the current class name with any leading underscores.
14898 	X	if you suspect mixed tabs and spaces are causing problems in leading whitespace run python with the t switch or run tools scripts tabnanny py to check a directory tree in batch.
14899 	X	realize that for the python run time system there isnt a whole lot of difference between c and c so the strategy of building a new python type around a c structure pointer type will also work for c.
14900 	X	it includes functions which provide backward compatibility at the api level but requires a newer version of the underlying berkeley db http www sleepycat com.
14901 	X	why doesnt list sort return the sorted list.
14902 	X	the pydoc module http docs python org library pydoc can create html from the doc strings in your python source.
14903 	X	you dont need the ability to compile python to c code if all you want is a stand alone program that users can download and run without having to install the python distribution.
14904 	X	when j is positive there are many and in virtually all of them its more useful for i j to be.
14905 	X	this doesnt guarantee privacy an outside user can still deliberately access the classname spam attribute and private values are visible in the objects dict.
14906 	X	how do i check for a keypress without blocking.
14907 	X	for c libraries you can look at sip http www riverbankcomputing co uk sip cxx http cxx sourceforge net boost http www boost org libs python doc index html weave http www scipy org site content weave or swig http www swig org.
14908 	X	files created with the older bsddb module cant be opened directly using the new.
14909 	X	in situations where performance matters making a copy of the list just to sort it would be.
14910 	X	an alternative is pythondoc http starship python net crew danilo pythondoc.
14911 	X	there are a number of tools that determine the set of modules required by a program and bind these modules together with a python binary to produce a single.
14912 	X	if the clock says now what did it say hours ago is useful is a bug waiting to.
14913 	X	many python programmers never bother to use private variable names at.
14914 	X	i added a module using the setup file and the make fails why.
14915 	X	using your old version of python and a pair of scripts which are part of python dbpickle py and pickledb py in the tools scripts directory you can convert your old database files to the new.
14916 	X	therefore list sort sorts the list in.
14917 	X	how do i get a single keypress at a time.
14918 	X	one is to use the freeze tool which is included in the python source tree as tools freeze.
14919 	X	how do i convert a string to a number.
14920 	X	my class defines del but it is not called when i delete the.
14921 	X	this is a standard windows specific extension.
14922 	X	setup must end in a newline if there is no newline there the build process.
14923 	X	using your old python version run the dbpickle py script to convert it to a pickle e g.
14924 	X	in order to remind you of that fact it does not return the sorted.
14925 	X	its straightforward to do this using curses but curses is a fairly large module to.
14926 	X	it converts python byte code to c arrays a c compiler you can embed all your modules into a new program which is then linked with the standard python.
14927 	X	for integers use the built in int type constructor e g int.
14928 	X	there are several possible reasons for.
14929 	X	it defines a function kbhit which checks whether a keyboard hit is present and getch which gets one character without echoing.
14930 	X	fixing this requires some ugly shell script hackery and this bug is so minor that it doesnt seem worth the.
14931 	X	pathto dbpickley py database db database pck.
14932 	X	this way you wont be fooled into accidentally overwriting a list when you need a sorted copy but also need to keep the unsorted version.
14933 	X	it works by scanning your source recursively for import statements in both forms and looking for the modules in the standard python path as well as in the source directory for built in modules.
14934 	X	the del statement does not necessarily call del it simply decrements the objects reference count and if this reaches zero del is.
14935 	X	how do i emulate os kill in windows.
14936 	X	how do i debug an extension.
14937 	X	in python a new builtin sorted is.
14938 	X	import termios fcntl sys os fd sys stdin fileno.
14939 	X	it then turns the bytecode for modules written in python into c code array initializers that can be turned into code objects using the marshal module and creates a custom made config file that only contains those built in modules which are actually used in the.
14940 	X	by default these interpret the number as decimal so that int and int x raises valueerror.
14941 	X	if your data structures contain circular links e g a tree where each child has a parent reference and each parent has a list of children the reference counts will never go back to.
14942 	X	def kill pid kill function for win import winapi handle winapi openprocess pid return.
14943 	X	when using gdb with dynamically loaded extensions you cant set a breakpoint in your extension until your extension is.
14944 	X	this function creates a new list from a provided iterable sorts it and returns.
14945 	X	oldterm termios tcgetattr fd newattr termios tcgetattr fd newattr newattr termios icanon termios echo termios tcsetattr fd termios tcsanow newattr.
14946 	X	it then compiles the generated c code and links it with the rest of the python interpreter to form a self contained binary which acts exactly like your.
14947 	X	int string base takes the base to convert from as a second optional argument so int x.
14948 	X	once in a while python runs an algorithm to detect such cycles but the garbage collector might run some time after the last reference to your data structure vanishes so your del method may be called at an inconvenient and random.
14949 	X	in your gdbinit file or interactively add the command.
14950 	X	now convert the pickle file to a new format database.
14951 	X	for example heres how to iterate over the keys of a dictionary in sorted order.
14952 	X	oldflags fcntl fcntl fd fcntl f getfl fcntl fcntl fd fcntl f setfl oldflags os o nonblock.
14953 	X	if the base is specified as the number is interpreted using pythons rules a leading indicates octal and x indicates a hex.
14954 	X	this is inconvenient if youre trying to reproduce a.
14955 	X	why does os path isdir fail on nt shared directories.
14956 	X	pathto pickledb py database db database pck.
14957 	X	for key in sorted dict iterkeys do whatever with dict key.
14958 	X	try while try c sys stdin read print got character c except ioerror pass finally termios tcsetattr fd termios tcsaflush oldterm fcntl fcntl fd fcntl f setfl oldflags.
14959 	X	there are several other utilities which.
14960 	X	do not use the built in function eval if all you need is to convert strings to.
14961 	X	worse the order in which objects del methods are executed is.
14962 	X	the solution appears to be always append the on the end of shared.
14963 	X	the precise commands you use will vary depending on the particulars of your.
14964 	X	how do you specify and enforce an interface spec in python.
14965 	X	you need the termios and the fcntl module for any of this to work and ive only tried it on linux though it should work.
14966 	X	one is thomas hellers pyexe windows only at.
14967 	X	eval will be significantly slower and it presents a security risk someone could pass you a python expression that might have unwanted side.
14968 	X	you can run gc collect to force a collection but there are pathological cases where objects will never be.
14969 	X	import os os path isdir rorschach public os path isdir rorschach public.
14970 	X	gdb local bin python gdb run myscript py gdb continue repeat until your extension is loaded gdb finish so that your extension is loaded gdb br myfunction c gdb continue.
14971 	X	for full details about operation of these two scripts check the doc string at the start of each.
14972 	X	an interface specification for a module as provided by languages such as c and java describes the prototypes for the methods and functions of the.
14973 	X	in this code characters are read and printed one at a.
14974 	X	for example someone could pass import os system rm rf home which would erase your home.
14975 	X	despite the cycle collector its still a good idea to define an explicit close method on objects to be called whenever youre done with.
14976 	X	it helps to think of share points as were like drive.
14977 	X	i want to compile a python module on my linux system but some files are.
14978 	X	why does python use indentation for grouping of statements.
14979 	X	many feel that compile time enforcement of interface specifications helps in the construction of large.
14980 	X	termios tcsetattr turns off stdins echoing and disables canonical.
14981 	X	another is christian tismers sqfreeze http starship python net crew pirx which appends the byte code to a specially prepared python interpreter that can find the byte code in the.
14982 	X	eval also has the effect of interpreting numbers as python expressions so that e g eval gives a syntax error because python regards numbers starting with as octal base.
14983 	X	the close method can then remove attributes that refer to.
14984 	X	k is not a directory k is a directory k media is a directory k media is not a directory.
14985 	X	most packaged versions of python dont include the usr lib python x config directory which contains various files required for compiling python.
14986 	X	guido van rossum believes that using indentation for grouping is extremely elegant and contributes a lot to the clarity of the average python.
14987 	X	python adds an abc module that lets you define abstract base classes abcs.
14988 	X	fcntl fnctl is used to obtain stdins file descriptor flags and modify them for non blocking.
14989 	X	other tools include fredrik lundhs squeeze http www pythonware com products python squeeze and anthony tuiningas cx freeze http starship python net crew atuining cx freeze index html.
14990 	X	how do i convert a number to a string.
14991 	X	dont call del directly del should call close and close should make sure that it can be called more than once for the same.
14992 	X	the same rules apply if you substitute k with conky foo.
14993 	X	from python checkins at python org georg brandl subject python checkins utf qpeps a add pep by chris angelico.
14994 	X	utf q e message id fsvglbmzstc mail python org.
14995 	X	http hg python org peps rev ecdee changeset ecdee user georg brandl georg at python org date tue feb summary.
14996 	X	diff git a pep txt b pep txt new file mode b pep txt post history feb.
14997 	X	just as pep introduced a means of value based conditions in an expression this system allows exception based conditions to be used as part of an.
14998 	X	a number of functions and methods have parameters which will cause them to return a specified value instead of raising an.
14999 	X	the current system is ad hoc and inconsistent and requires that each function be individually written to have this functionality not all support.
15000 	X	dict get key default second positional argument in place of keyerror.
15001 	X	next iter default second positional argument in place of stopiteration.
15002 	X	list pop no way to return a default.
15003 	X	seq index no way to handle a bounds error.
15004 	X	min sequence default default keyword argument in place of valueerror.
15005 	X	sum sequence start default slightly different but can do the same job.
15006 	X	statistics mean data no way to handle an empty iterator.
15007 	X	additionally this syntax would allow a convenient way to capture exceptions in interactive python returned values are captured by but exceptions currently are.
15008 	X	expr except exception as e e.
15009 	X	the current system requires that a function author predict the need for a default and implement support for.
15010 	X	if this is not done a full try except block is.
15011 	X	since try except is a statement it is impossible to catch exceptions in the middle of an.
15012 	X	just as if else does for conditionals and lambda does for function definitions so does this allow exception catching in an expression.
15013 	X	this provides a clean and consistent way for a function to provide a default it simply raises an appropriate exception and the caller catches.
15014 	X	theres no convenient way to write a helper function to do this the nearest is something ugly using either lambda.
15015 	X	def except expression exception list default try return expression except exception list as e return default e value except lambda x zerodivisionerror lambda e float nan.
15016 	X	which is clunky and unable to handle multiple exception clauses or eval.
15017 	X	def except expression exception list default try return eval expression globals of caller locals of caller except exception list as exc l locals of caller copy l exc exc return eval default globals of caller l.
15018 	X	value except x zerodivisionerror cant divide by zero.
15019 	X	which is even clunkier and relies on implementation dependent.
15020 	X	writing globals of caller and locals of caller for interpreters other than cpython is left as an exercise for the.
15021 	X	raymond hettinger expresses a desire for such a consistent.
15022 	X	something similar is requested multiple times in the.
15023 	X	https mail python org pipermail python ideas march html https mail python org pipermail python ideas august html https mail python org pipermail python ideas august html.
15024 	X	just as the or operator and the three part if else expression give short circuiting methods of catching a falsy value and replacing it this syntax gives a short circuiting method of catching an exception and replacing.
15025 	X	lst none value lst or no value.
15026 	X	lst value lst except indexerror no value.
15027 	X	expr except exc as e default except exc as e default.
15028 	X	where expr exc and default are all.
15029 	X	if no exception is raised its value is the value of the overall.
15030 	X	if any exception is raised exc is evaluated and should result in either a type or a tuple just as with the statement form of try.
15031 	X	any matching exception will result in the corresponding default expression were evaluated and becoming the value of the.
15032 	X	as with the statement form of try except subsequent except clauses will be checked if the first one does not match and if none match the raised exception will propagate.
15033 	X	also as with the try except statement the keyword as can be used to bind the exception object to a local.
15034 	X	omitting the exception list should be legal just as with the statement form of try except though this should of course be discouraged by pep.
15035 	X	the exception object can be captured just as in a normal try except block.
15036 	X	return the next yielded or returned value from a generator value next it except stopiteration as e e args.
15037 	X	try next it except stopiteration as e e args value.
15038 	X	this ternary operator would be between lambda and if else in.
15039 	X	multiple except keywords can be used and they will all catch exceptions raised in the original expression only.
15040 	X	will catch any of the listed exceptions thrown by expr any exception thrown by a default expression will.
15041 	X	value expr except exception as e default except exception as e default except exceptionn as e defaultn.
15042 	X	using parentheses to force an alternative interpretation works as expected.
15043 	X	will catch an exception thrown by either expr or default value expr except exception default except exception default will catch an exception thrown by default only value expr except exception default except exception default.
15044 	X	this last form is confusing and should be discouraged by pep but it is syntactically legal you can put any sort of expression inside a ternary except ternary except is an expression therefore you can put a ternary except inside a ternary.
15045 	X	discussion on python ideas brought up the following syntax suggestions.
15046 	X	value expr except default if exception as e value expr except default for exception as e value expr except default from exception as e value expr except exception as e return default value expr except exception as e default value expr except exception as e try default value expr except exception as e continue with default value default except exception as e else expr value try expr except exception as e default value expr except exception as e pass default.
15047 	X	it has also been suggested that a new keyword be created rather than reusing an existing.
15048 	X	such proposals fall into the same structure as the last form but with a different keyword in place of.
15049 	X	additionally the following is suggested as a similar short hand though not technically an expression.
15050 	X	where there are multiple except clauses should they be separated by commas.
15051 	X	it may be easier for the parser that way.
15052 	X	value expr except exception as e default except exception as e default except exceptionn as e defaultn.
15053 	X	with an optional comma after the last as per tuple.
15054 	X	downside omitting the comma would be syntactically valid and would have almost identical semantics but would nest the entire preceding expression in its exception catching rig a matching exception raised in the default clause would be caught by the subsequent except.
15055 	X	as this difference is so subtle it runs the risk of were a major bug.
15056 	X	as a mitigation of this risk this form.
15057 	X	value expr except exception default except exception default.
15058 	X	could be syntactically forbidden and parentheses required if the programmer actually wants that behaviour.
15059 	X	value expr except exception default except exception default.
15060 	X	this would prevent the accidental omission of a comma from changing the expressions.
15061 	X	generator expressions require parentheses unless they would be strictly.
15062 	X	ambiguities with except expressions could be resolved in the same way forcing nested except in except trees to be correctly parenthesized and requiring that the outer expression be clearly.
15063 	X	should it be legal to parenthesize the except clauses separately from the expression that could raise.
15064 	X	value expr except exception as e default except exception as e default except exceptionn as e defaultn.
15065 	X	in a try except block the use of as to capture the exception object creates a local name binding and implicitly deletes that binding in a finally.
15066 	X	as finally is not a part of this proposal see below this makes it tricky to describe also this use of as gives a way to create a name binding in an expression.
15067 	X	should the default clause have an inner scope in which the name exists shadowing anything of the same name elsewhere.
15068 	X	should it behave the same way the statement try except does and unbind the name.
15069 	X	should it bind the name and leave it bound.
15070 	X	almost certainly not this behaviour was changed in python for good.
15071 	X	the inner scope idea is tempting but currently cpython handles list comprehensions with a nested function call as this is considered.
15072 	X	it may be of value to simplify both comprehensions and except expressions but that is a completely separate proposal to this pep alternatively it may be better to stick with whats known to.
15073 	X	for each example an approximately equivalent statement form is given to show how the expression will be.
15074 	X	these are not always strictly equivalent but will accomplish the same.
15075 	X	it is not safe for the interpreter to translate one into the.
15076 	X	perform some lengthy calculations in eafp mode handling division by zero as a sort of sticky nan.
15077 	X	value calculate x except zerodivisionerror float nan.
15078 	X	try value calculate x except zerodivisionerror value float nan.
15079 	X	retrieving from a generator either the next yielded value or the returned and coping with the absence of such a return value.
15080 	X	value next it except stopiteration as e e args except indexerror none.
15081 	X	try value next it except stopiteration as e try value e args except indexerror value none.
15082 	X	calculate the mean of a series of numbers falling back on zero.
15083 	X	value statistics mean lst except statistics statisticserror.
15084 	X	try value statistics mean lst except statistics statisticserror value.
15085 	X	set a pygtk label to a human readable result from fetching a url.
15086 	X	display set text urllib request urlopen url except urllib error httperror as e error d s x getcode x msg except valueerror urllib error urlerror as e invalid url str e.
15087 	X	try display set text urllib request urlopen url except urllib error httperror as e display set text error d s x getcode x msg except valueerror urllib error urlerror as e display set text invalid url str e.
15088 	X	retrieving a message from either a cache or the internetwith auth check.
15089 	X	logging info message shown to user s cache k except lookuperror backend read k except oserror resource not available if check permission k else access denied except im an idiot and using a bare except clause.
15090 	X	try if check permission k try cache k except lookuperror try backend read k except oserror resource not available else access denied except im an idiot and using a bare except clause logging info message shown to user s.
15091 	X	looking up objects in a sparse list of overrides.
15092 	X	overrides x or default except indexerror default ping.
15093 	X	try overrides x or default ping except indexerror default ping.
15094 	X	the statement form finally or finally has no logical corresponding expression.
15095 	X	therefore the finally keyword is not a part of this proposal in any.
15096 	X	this document is placed in the public.
15097 	X	local variables mode indented text indent tabs mode nil sentence end double space t fill column coding utf end.
15098 	X	repository url http hg python org peps.
15099 	X	anders j munch andersjm at dancontrol dk wrote in news bcca edfadbf at dspool news tele dk.
15100 	X	presumably divmod is unhappy at only getting one.
15101 	X	well the bracket fans can be happy here because well now need to write.
15102 	X	abs x mod divmod if x x else x.
15103 	X	or just to keep the alternatives alive simultaneously.
15104 	X	abs x mod divmod if x then x else x.
15105 	X	thats a tricky one i agree but we have to choose one alternative or the.
15106 	X	if we make dominate over if else then the original example returns a dictionary tupled with b.
15107 	X	perhaps needs to dominate bind more loosely after.
15108 	X	oh well someone needs to check the grammar im not sure what other operators bind as loosely as not too many i hope.
15109 	X	anders j munch andersjm at dancontrol dk wrote in news bcbfda edfadbf at dspool news tele dk.
15110 	X	go for maximal munch i cant think of anything wrong with.
15111 	X	the above expression then returns the dictionary only.
15112 	X	michael abbott michael at rcp co uk wrote in message news xnscbfadmichaelrcpcouk at.
15113 	X	maximal munch is certainly one of the better options but its not.
15114 	X	what should be the output from.
15115 	X	x abs x mod divmod if x x else x print abs x mod.
15116 	X	wir brauchen maximal munch oder vielleicht was anders munch ly yrs anders.
15117 	X	on tue oct anders j munch andersjm at dancontrol dk.
15118 	X	get you complained at in the code review.
15119 	X	tim peters tim one at home com wrote in message news.
15120 	X	python list at python rules currently implemented by his.
15121 	X	i see a problem with adding precedence.
15122 	X	there doesnt seem to be a natural precedence for the conditional expression.
15123 	X	c and c have been struggling with this for years c and c have different rules for this compilers have warnings that say suggest parentheses to clarify precedence.
15124 	X	after years of c and c programming i still couldnt tell you the precedence of.
15125 	X	quick what does this snippet do if return as map is true.
15126 	X	return if return as map then a ab b else ab.
15127 	X	rather than open up a new venue of obfuscation possibilities in python id go for mandatory parentheses around the conditional.
15128 	X	anyone heard about the results ofpep voting.
15129 	X	what do people think of this particularly pythonic internals and syntax parsing experts i am not one.
15130 	X	isnt that amount of love and support worth a paradigm change.
15131 	X	im very happy that i became converted to this remarkable language in such a short.
15132 	X	it took me only two days to do the whole implementation that is abandoning almost all of the code.
15133 	X	i will spend the next six months doing the debugging and the next years doing the porting.
15134 	X	im now happy to tell this to all my customers and sponsors after having ported all your code from stackless python to and almost to i now would like to be paid for porting your whole python application to stackless perl.
15135 	X	i know you are happy with this since you knew from the beginning that this would be most effective in the first.
15136 	X	sorry for messing with python for all the.
15137 	X	this was a major design flaw that i realized a few days.
15138 	X	this principle of very fast design changes makes open source so attractive to.
15139 	X	downloads are avaliable here http stackless apriperl org.
15140 	X	this was a statement about stackless perl just an intermediate step towards stackless perl which will make use of the outstanding feature of white space overloading with.
15141 	X	this feature will be presented on the python perl integration marathon sprint session in august in.
15142 	X	please apply early this is a really small.
15143 	X	can any knowleadgeable body please give me a crash course in perl programming.
15144 	X	i would like to be able to produce some testing code but i didnt have the time to rtfm.
15145 	X	cheers chris at stackless apriperl org.
15146 	X	this message was intentionally not cross posted since most readers will be assimilated to the perl community anyway the sooner or.
15147 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
15148 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
15149 	X	insiders have known this from the beginning and they were waiting for this to happen for much too long time.
15150 	X	stackless is dead born from the.
15151 	X	the new live language is stsckless perl.
15152 	X	this is not due to the nature of stackless it is due to the nature of.
15153 	X	there is a better language than python and its name is perl.
15154 	X	python has always been a recursively implemented.
15155 	X	perl is stackless from the very early.
15156 	X	my brain has always been thinking the python.
15157 	X	but my heart always was beating the perl rhythm.
15158 	X	now my time has come and there is again.
15159 	X	finally after all the years of development it became not only natural but also consequent to abandon the very hard way of merging the principles of stackless python and into.
15160 	X	i just had to drop percent of my c implementation for stackless python change the object model and to invent three new perl.
15161 	X	stackless tasklet about methods stackless channel about methods stackless continuation about methods.
15162 	X	the latter is a re incarnation of an old idea which was most popular in many scheme dialects but seems to me most appropriate in the stackless perl.
15163 	X	there are now infinitely countable ways to express new ways to express new or existing control structures by perl.
15164 	X	this is an incredible outstanding feature which clearly contradicts the python one size fits all.
15165 	X	or was it there is only one way to do it.
15166 	X	stackless perl has default universal methods for example.
15167 	X	isa returns true if its object is blessed into a subclass of tasklet.
15168 	X	isa is also exportable and can be called as a sub with two.
15169 	X	this allows the ability to check what a reference points.
15170 	X	can check to see if its object has a method called become if it does then a reference to the sub is returned if it does not then undef is.
15171 	X	the number of well formed examples is so incredible.
15172 	X	another very relevant example is the solution to all existing pep proposals the stackless perl dynamic syntax parser is extended in a way that covers every possible pep alternative to implement ternary operators in a completely individual way every individual is now able to spell her his own way of understanding the myriads of possible solutions to implement the different incarnations of if expr elif expr else expr endif perl constructs and their relatives in any imaginable and unimaginable perlish.
15173 	X	this is of course due to the radical use of continuations together with dynamic syntax.
15174 	X	i have to admit that this example code took me another two days and three days of theoretically testing every thinkable implementation.
15175 	X	there is no single way to say.
15176 	X	python people will just say say what or ni.
15177 	X	perl people will love and support my.
15178 	X	messias you did so absolutely right finally.
15179 	X	tdd as in test driven development.
15180 	X	got any good urls to look at.
15181 	X	youre right its not a big.
15182 	X	i never use apply anymore since python provides a very convenient syntactic sugaring as a.
15183 	X	but i still want to point out the fact that this construct is python.
15184 	X	on the other hand apply can be implemented with nearly identical behavior in many other languages if it doesnt exist.
15185 	X	i assume youre talking about the itertools.
15186 	X	im very interested in this module though i havent fully grokked.
15187 	X	i think itd be good to have a module called functional where the more unusual functional tools can live and i know that its been brought up.
15188 	X	polluting the built ins further is obviously a bad thing for backward compatability not to mention the learning.
15189 	X	but it would at least make a statement that functional programming is possible and supported in.
15190 	X	daniel w moore dan at hotmail com wrote in message news.
15191 	X	ddcc at posting google am not one.
15192 	X	i dont belive guido has said what if anything hes going to.
15193 	X	right now hes busy with release.
15194 	X	when he makes up his mind youll see it in the pep.
15195 	X	either hell reject it or hell put in the way he intends to implement.
15196 	X	daniel w moore dan at hotmail com wrote in message news.
15197 	X	i believe status quo more or less won depending on.
15198 	X	dave benjamin ramen at lackingtalent com wrote in message news slrnbonq sho ramen at lackingtalent.
15199 	X	snip long post about functional constructs.
15200 	X	i got turned on to the existing functional constructs while i was doing a tdd.
15201 	X	i managed to do that with exactly one if statement and no loops because of the functional.
15202 	X	however losing apply isnt a big deal because there is an exactly equivalent.
15203 	X	id hate to see the rest of them go away especially since the possible implementation of pep will remove one of the restrictions on.
15204 	X	also notice that there are a set of new functional constructs in.
15205 	X	oh god is it april already.
15206 	X	emile van sebille emile at fenx com.
15207 	X	to pythonistas python list at python org stackless at tismer com sent monday march pm.
15208 	X	tasklet undef in with pythons http starship python net bf.
15209 	X	i have been reading a book about the evolution of the basic programming.
15210 	X	the author states that basic particularly microsofts version is full of compromises which crept in along the languages year.
15211 	X	what to you think python largest compromises are.
15212 	X	you can not use statements in.
15213 	X	what python realy needs here is some means to make an expression from a list of statements called suite in the syntax defintion.
15214 	X	that given pep if then else expression or pep function method decorator syntax are mostly.
15215 	X	suppose there some special braces like and a exit operator like a unary one can write a conditional expession like that if f truevalue else falsevalue.
15216 	X	classmethods can be declared as follows cm def im arg arg return answer classmethod im.
15217 	X	or cm classmethod def im arg arg return answer im.
15218 	X	obvously this demands for some means to write anonymous functions like.
15219 	X	cm def arg arg return answer.
15220 	X	ok i admit that this is difficult to be integrated in the existing.
15221 	X	perhaps we can not drop the braces around such.
15222 	X	is this worth writing a pep.
15223 	X	no we use unit testing in zope.
15224 	X	i am still missing a simple testing.
15225 	X	doctest is a good idea but conflicts with syntax hilighting in most.
15226 	X	that said obvious basic compromised by using things such as option explicit thereby allowing both dynamic and more static style.
15227 	X	yahoo groups moved from python to c due to dynamic.
15228 	X	they key to speed is using extension written in c for.
15229 	X	normaly you will find one that sloves your.
15230 	X	non compiled obviously there are times when performance matters more than other.
15231 	X	google i believe uses python to prototype or used and then turns to c for heavy.
15232 	X	im not sure i understand guidos preference for.
15233 	X	in fact the array module provides mutable.
15234 	X	gerald comment using gnupg with debian http enigmail mozdev org.
15235 	X	skip montanaro skip at pobox com wrote in message news.
15236 	X	python list at python sucumb one base.
15237 	X	i think the discussion on this thread is a reasonably good example grin.
15238 	X	the responses to my comment about method calls with no arguements should say everything that needs to be said about.
15239 	X	lets skip the fluf and get to the.
15240 	X	there are four languages not counting minor entries in the space python.
15241 	X	in alphabetical order they are perl python ruby and.
15242 	X	the originators of those languages have very different language design.
15243 	X	larry wall perl theres more than one way to do.
15244 	X	guido vanrossum python there should only be one obvious way to do anything.
15245 	X	metz ruby i want a language thats both productive and fun to.
15246 	X	i want a language i can embed in tools as a common scripting.
15247 	X	notice that there is only one polarity here perl vs.
15248 	X	ruby goes meta on the discussion in that it looks at what the customer the developer wants rather than what the language designer thinks they should.
15249 	X	a fairly large number of people i respect have used python and have migrated to.
15250 	X	for a long time the basic flow was from perl to python for reasons that we dont need to hash over.
15251 	X	most businesses would look at a competitor who is stealing customers as an opportunity to figure out what those customers want that they arent.
15252 	X	the jihad against the functional builtins is a good case in.
15253 	X	the replacements for apply map and filter seem to be adequate and in the case of list comprehensions pretty darned useful although i think that its a rather baroque addition to an otherwise very clear and comprehensible.
15254 	X	on the other hand claiming that sum is an adequate replacement for reduce is so silly that it borders on the.
15255 	X	the only explanation i can come up with for that level of absurdity is a desire to get rid of a feature regardless of what it looks.
15256 	X	in other words a jihad holy.
15257 	X	there is no replacement for lambda in sight even though lambda is arguably the largest single one of the functional constructs that needs work and has obviously needed work for a long.
15258 	X	the obvious replacement for lambda which is some form of inline block has not been seriously discussed with proposed syntax and examples anywhere ive seen.
15259 	X	clearly im not ominiscient so that doesnt mean it hasnt.
15260 	X	the pep mess has left a rather sour taste in a lot of peoples mouths there was a clear majority in favor of doing something but the voting was rigged although i doubt if it was done deliberately to make certain that no single proposal would get a.
15261 	X	john the biggest problem is that i think python is beginning to sucumb john to the were better so we dont have to try harder.
15262 	X	john one of these days someone is going to start chewing up the user john base and for a while it looked like ruby might have been.
15263 	X	can you give some concrete examples which support your contention.
15264 	X	john i think the discussion on this thread is a reasonably good example john grin.
15265 	X	john the responses to my comment about method calls with no arguements john should say everything that needs to be said about.
15266 	X	youre holding this discussion on comp lang python not on python dev at python.
15267 	X	i interpreted your statement about not having to try harder as were aimed at the people who work on the language and the standard.
15268 	X	in any case i dont see it as necessarily a bad thing that there are multiple languages out there with overlapping features and.
15269 	X	they absorb some ideas but not others and when they do they dont absorb them in precisely the same.
15270 	X	you can interpret that as not trying harder but i.
15271 	X	pythons design doesnt admit the option of calling functions without the.
15272 	X	on the other hand functions are first class objects in.
15273 	X	i dont know about ruby but in perl if a function is called or treated as a piece of data is very context dependent to the point of near madness for people like myself who dont use it day in and day.
15274 	X	john lets skip the fluf and get to the.
15275 	X	there are four languages john not counting minor entries in the space python.
15276 	X	john larry wall perl theres more than one way to do.
15277 	X	john guido vanrossum python there should only be one obvious way to john do anything.
15278 	X	john metz ruby i want a language thats both productive and fun to john.
15279 	X	i want a language i can embed in tools as a john common scripting.
15280 	X	john notice that there is only one polarity here perl vs.
15281 	X	ruby john goes meta on the discussion in that it looks at what the customer john the developer wants rather than what the language designer john thinks they should.
15282 	X	different design philosophies result in different.
15283 	X	if ruby floats your boat use.
15284 	X	advocate for it if you like but dont expect that because you like rubys philosophy better that python necessarily ought to move in that.
15285 	X	i happen to think python is both productive and fun to.
15286 	X	john most businesses would look at a competitor who is stealing john customers as an opportunity to figure out what those customers john want that they arent.
15287 	X	we have no shareholders or board of directors to.
15288 	X	if ruby relieves itching for more people than python so be.
15289 	X	nobodys going to go out of business because of.
15290 	X	john the jihad against the functional builtins is a good case in john.
15291 	X	the replacements for apply map and filter seem to be john adequate and in the case of list comprehensions pretty darned john useful although i think that its a rather baroque addition to an john otherwise very clear and comprehensible.
15292 	X	why do you call it a jihad.
15293 	X	guido has stated on multiple occasions that he regretted adding functional constructs to the.
15294 	X	i still cant get to the python website have to wait another two hours for my isp to reload its tables but heres a google pointer to an html ized version of his oscon powerpoint slides.
15295 	X	http searchq cache qztdkncjgj www python org doc essays ppt regrets pythonregrets ppt oscon python regrets hl en ie utf.
15296 	X	john on the other hand claiming that sum is an adequate replacement john for reduce is so silly that it borders on the.
15297 	X	people have looked at the use of reduce in a number of different.
15298 	X	in all but the rarest of cases reduce was used to sum a list of.
15299 	X	sum is a perfectly adequate replacement in all but those rare cases and is easier to read as.
15300 	X	as guido mentioned in the talk i referenced above.
15301 	X	reduce nobody uses it few understand it a for loop is clearer usually faster.
15302 	X	john the only explanation i can come up with for that level of john absurdity is a desire to get rid of a feature regardless of what john it looks.
15303 	X	in other words a jihad holy.
15304 	X	no its simply not used very.
15305 	X	python never is a very strong functional.
15306 	X	its always been a very strong object oriented.
15307 	X	john there is no replacement for lambda in sight even though lambda is john arguably the largest single one of the functional constructs john that needs work and has obviously needed work for a long.
15308 	X	once again you desire python to be something it is.
15309 	X	if you want a strong functional language program in lisp or.
15310 	X	john the obvious replacement for lambda which is some form of inline john block has not been seriously discussed with proposed syntax and john examples anywhere ive seen.
15311 	X	clearly im not ominiscient so john that doesnt mean it hasnt.
15312 	X	anonymous blocks are not a replacement for lambdas named functions.
15313 	X	how do you pass parameters to an anonymous block.
15314 	X	john the pep mess has left a rather sour taste in a lot of peoples john mouths there was a clear majority in favor of doing something john but the voting was rigged although i doubt if it was done john deliberately to make certain that no single proposal would get a john.
15315 	X	again its something that doesnt fit easily into pythons.
15316 	X	there were several ternary operator proposals advanced but none was a clear.
15317 	X	guidos a conservative language designer for the most.
15318 	X	its better to leave it out than to put something in youll regret.
15319 	X	pep wasnt the first time the ternary operator discussion has come up by the.
15320 	X	functional programming ternary operators anonymous code.
15321 	X	theyve all been issues for a long.
15322 	X	you seem to have a burr under your saddle about this.
15323 	X	maybe its time to get out the curry.
15324 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote light more light.
15325 	X	the last words of goethe a personal guide to online multiplayer first person.
15326 	X	hans nowak wurmy at earthlink net writes.
15327 	X	hmm what if bools grew an if method.
15328 	X	we could then write z x y if whentrue whenfalse this strikes me as much more elegant than the other.
15329 	X	you joke but thats basically what smalltalk.
15330 	X	not true but andrew koenig probably found a way to make this happen changing the grammar and adding to it.
15331 	X	i believe the opposing reactions are far more varied and far deeper than the superficial theory youre pushing.
15332 	X	the main concerns i see are.
15333 	X	when quickly parsing the code the value appears to be one thing but then youre presented with a test which indicates that it may not the code branches after youve specified the value that may or may not be the result of the.
15334 	X	the statement form of if elif else is much clearer you do the test first and the results of the test are perfectly.
15335 	X	nothing to do with the new expression syntax not were familiar or.
15336 	X	paul rubin phr nb at nospamnightsong com writes.
15337 	X	no you have to know what get arg.
15338 	X	i posted out of context so you werent to know this but no.
15339 	X	in this case get arg is a one conceptual feature it is also only i think called from outside the class that defines.
15340 	X	in this case i really dont think.
15341 	X	but this confirms you are composed of logic.
15342 	X	crud i thought those were neurons in.
15343 	X	i often need inlined conditions when defining class attributes to give a default value for.
15344 	X	sometimes workarounds must be implemented to give similar functionality as an inlined.
15345 	X	a conditional function is used to implement this but it has hard to debug side effects and severally decreases application efficiency in some.
15346 	X	i had to implement classes or use ugly lambdas as a workaround but they are not an elegant.
15347 	X	ive read pep and found the condition then true else false syntax very simple and.
15348 	X	lets analyse the possibility of ambiguous syntax.
15349 	X	c then c then t else f else c then t else f.
15350 	X	can be written without ambiguity as.
15351 	X	c then c then t else f else c then t else f.
15352 	X	there is no ambiguity because an else statement always persent for each then.
15353 	X	the later syntax is hard to.
15354 	X	a then b then c else d else e then f else g.
15355 	X	one inline condition should be written without parenthesis.
15356 	X	r c then t else f.
15357 	X	nested inline conditions should be placed in parenthesis to ensure readability.
15358 	X	r c then c then t else f else c then t else f.
15359 	X	in my opinion the language syntax should not force the parenthesis but they are strongly recommended in the nested.
15360 	X	with correctly placed pairs inline conditions are not harder to read and not more cobol like than a list.
15361 	X	though as others have pointed out as well ive found improper use of quite a few things in the library and filed bug reports against them and.
15362 	X	does that mean we need a new syntax for all of those.
15363 	X	david leblanc whisper at oz net wrote in message news.
15364 	X	having come to python from c i would not mind the c form.
15365 	X	but i have the impression that guido has vetoed that and many other do not like it.
15366 	X	so you would prefer that i and other users of and or stick with that instead of switching to for instance and else.
15367 	X	this would be still allowed but there are new more explicit operators which should be used instead for new python code.
15368 	X	the binary operators then and else.
15369 	X	for a clear definition see the function definitions.
15370 	X	parameters are often massaged like this or case.
15371 	X	the meaning of this phrase is if the user has provided no argument value that is true non empty or not most of the time then provide some default value.
15372 	X	arg arg then arg else default.
15373 	X	would be the verbose ternary replacement of.
15374 	X	a short replacement would read better.
15375 	X	which means if arg is false replace it by default.
15376 	X	the meaning of this phrase is if the user provided any argument that is true use some default value.
15377 	X	would be the verbose replacement of.
15378 	X	a short replacement would read better.
15379 	X	summary and and or are behaving like logical.
15380 	X	they happen to do this by not providing a plain truth value but by promoting one of their.
15381 	X	and and or are valid operators when used in a logical context only meaning only to use the truth.
15382 	X	they have the side effect of carrying an operand which i regard as a design flaw but this is bearable when used.
15383 	X	using and and or when they are meant as then or else should be deprectaed as bad style in the long.
15384 	X	almost all instances of and and or used to carry a value can be replaced by then or else with ease which makes the resulting code much more readable without prior.
15385 	X	and and or do have a builtin perception of symmetry which is not related to the truth and hard to explain to.
15386 	X	therefore i propose to deprecate their use to promote a value and i propose to introduce then and else as dual operators together with the then else pair as ternary operator to be used in any context where the inquiry should promote the right operand without evaluating its truth.
15387 	X	here is my cure to and and or with side effects.
15388 	X	def then proc a b if a return b else return a.
15389 	X	and and or should be replaced by the above constructs in all contexts where and and or are not pure logical but are meant to propagate specific values for all new.
15390 	X	please correct me positively if i made a mistake at am.
15391 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
15392 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
15393 	X	there is some favor of my silly simple a then b else c.
15394 	X	please let me elaborate a little on this with respect to the existing and and or.
15395 	X	and and or are two headed beasts at first glance they pretend to be logical.
15396 	X	at second inspection they do this logic by promoting one of their.
15397 	X	this is not obviously bad and it is consistant with the.
15398 	X	due to the presence of a real boolean type we should ask ourselves if and and or shouldnt be deprecated in their current meaning towards were boolean only.
15399 	X	i think it would be nicer if and and or would only produce true or.
15400 	X	but this would break lots of.
15401 	X	therefore i propose to keep them as they are but to deprecate using them to carry their operand values instead of a true truth.
15402 	X	you dont understand intentionally or un.
15403 	X	that cure hasnt been presented before afaik so how can you have pointed out anything about it before.
15404 	X	unless you are looking at it through special ternary syntax colored goggles and arent seeing what it actually.
15405 	X	x is an expression all by itself just as x is except that all it does is guarantee that x will be seen as true in any logical expression.
15406 	X	it just happens to be usable to fix the hole in the old ternary.
15407 	X	imo its a good substitute for using a list to guarantee a true term as in x and y or z.
15408 	X	of course if you intensely dislike the old x and y or z idiom making it bullet proof will not particularly please you.
15409 	X	otoh others have pointed out that the old idiom has seen considerable use in the libraries so maybe a character bulletproofing is not such a bad idea.
15410 	X	read better as making the two choices easily identifiable is optional on the second term.
15411 	X	erik max francis max at alcyone com ha scritto nel messaggio news.
15412 	X	for example the in else is absolutely spurious for the expression.
15413 	X	what is the possible problem to which you refer.
15414 	X	to me the fact that the second operands side effects are conditional is one of the most desirable properties of these operators.
15415 	X	homomorphism a and b c bool a and bool b bool c a or b c bool a or bool b bool c law of tautology a and a a or a a left double distributivity a and b or c a and b or a and c a or b and c a or b and a or c left absorption a or a and b a a and a or b a and although we havent defined not for the new domain indeed not cant be selective except for a one element domain we do have weak left cancellativity a and b a and c bool a f or b c a or b a or c bool a t or b c note the analogy to rings in which if ab ac then a or b c.
15416 	X	these properties make me feel that selective andor are a pretty good stab at a non commutative generalization of boolean.
15417 	X	imho they are the most natural way to make them binary operators on an arbitrary domain rather than merely relations on that domain as the coercing versions are.
15418 	X	i leave exploring the right side analogues to the interested.
15419 	X	this gives another way to show that not cannot be selective except in trivial cases if it were then e g a and not b would be selective since compositions of selective functions are selective.
15420 	X	steven taschuk receive them ignorant staschuk at telusplanet net dispatch them.
15421 	X	i should stop posting to this thread for a.
15422 	X	its almost getting an addiction and everything else than pep suddenly seems to uninteresting self wink.
15423 	X	obviously i dont think anyone argues.
15424 	X	but its simply your opinion that it lowers.
15425 	X	because your original comment implied that if expressions are for control.
15426 	X	they are but only at the lowest bytecode or assembly language.
15427 	X	in terms of program logic what the developer is thinking about if expressions arent for control flow in the normal sense of the.
15428 	X	what in the world are you talking about.
15429 	X	the pep uses if and else keywords that already have well understood meaning in python and their meaning is the same in all.
15430 	X	i have no idea how you get from that the idea that i want to replace other operators with.
15431 	X	you said that reading and execution order should match as much as possible im simply pointing out that in practice that happens far less often than you think and it doesnt seem to cause people any.
15432 	X	most likely people read whole statements at a time anyway so in practice i doubt theres much ltor rtol reading going on anyway and if there is its in whole groups of tokens rather than individual.
15433 	X	of course not thats silly and overly.
15434 	X	the order of logic in the pep isnt troubling use that door if its open otherwise use the back door makes perfect.
15435 	X	my perception is that some people react negatively to the proposed ordering more out of unfamiliarity than anything else it doesnt take much effort to get accustomed to.
15436 	X	or rather to be more in the spirit of the pep and the join method maybe it should be.
15437 	X	of course all objects would have to grow the if method for.
15438 	X	hans base decodestring dvybxlazwfydghsawrlmlda decode for email address the pythonic quarter http www awaretek com nowak soon http zephyrfalcon org.
15439 	X	but an ioccc entry specifically designed to be abusive is hardly good evidence that any construct will be frequently abused in real code.
15440 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote only the ephemeral is of lasting.
15441 	X	ionesco official omega page http www alcyone com max projects omega the official distribution page for the popular roguelike.
15442 	X	ive seen exactly one found by andrew koenig where the difference was between printing test intended and tests actual it was truly of no.
15443 	X	on that basis list slicing is much more dangerous in real life because for example the idiom.
15444 	X	doesnt return the last i list items when i happens to be and ive seen that bug in real code many.
15445 	X	pick just about any operation and some real life code has suffered due to using it.
15446 	X	the and or trick simply isnt a significant source of bugs in real life not because its robust but because it is fragile its rarely used in tricky situations.
15447 	X	a full fledged conditional expression may or may not prove less error prone in.
15448 	X	i wager it would have squashed the inconsequential bug andrew found but the std library mostly uses and or for very simple selections where its use is obviously correct and i wager too that a full fledged conditional expression will get used for more complicated.
15449 	X	that carries risks of introducing new.
15450 	X	regardless since there are no known and or bugs in current cvs the unittest pluralization buglet was fixed months ago the introduction of a conditional expression wont improve the std librarys.
15451 	X	tim peters tim one at comcast net wrote in message news.
15452 	X	rejected ive seen min and built in some.
15453 	X	if python did all looping by recursion there would be many more possible uses though no more necessity for a ternary conditional.
15454 	X	def fact n return n and n fact n or needs a negative arg guard.
15455 	X	def sum seq return len seq or and seq sum works better with head tail linked list so no copying of tail.
15456 	X	but python does have for while map filter reduce file readlines new itertools in addition to min and.
15457 	X	rather than everyone suggesting their own favorite syntax for pep we could just break down all the suggestions into manageable.
15458 	X	consider the following conditional in its c syntax.
15459 	X	b a b b if a if a b when a b a then b cond ab if a b cond a b.
15460 	X	possibilities for c are where is whatever you chose for a.
15461 	X	the third dimension of this matrix has two possibilities.
15462 	X	so instead of all these long silly new syntax suggestions we can just site our favorite combination in the.
15463 	X	at worst we have to add a new possibility to one of the.
15464 	X	in article bon al at panix panix com aahz at pythoncraft com aahz.
15465 	X	my feeling is that the reason for short circuiting isnt so much because of side effects i think we should try to keep expressions as free of side effects as possible but because one or both of the two sides may be undefined and raise an exception if the guard condition is not.
15466 	X	david eppstein uc irvine of information computer science eppstein at ics uci edu http www ics uci edu eppstein.
15467 	X	the above line of code is a great argument in favor of if expressions on the basis of readability and.
15468 	X	i couldnt encourage anyone to use that.
15469 	X	and hopefully deprecate the usage of your above example the simulated conditional expression.
15470 	X	erik max francis max at alcyone com writes.
15471 	X	certainly not the sole factor but it does have some.
15472 	X	i dont know whether analyzing already written code is the right way to measure it.
15473 	X	i find on a fairly regular basis that i get annoyed by not having a conditional expression in.
15474 	X	maybe it happens once ever few weeks of.
15475 	X	thats enough to notice and to be supportive of efforts to add.
15476 	X	its like if i get a telemarketing phone call every few weeks its not a night and day source of agony but it would be nice to be able to get it to.
15477 	X	id say every time i write code with regexps i want an assignment expression like.
15478 	X	while m re match exp something.
15479 	X	so if i could add just one construct assignment expressions or conditional expressions id probably take assignment expressions even though they dont do as much from a functional programming point of.
15480 	X	im not a coding robot or lumberjack style.
15481 	X	i like to enjoy myself when i code and to massage code around til it looks nice on the.
15482 	X	its like eating potato chips one after.
15483 	X	hitting some silly limitation of the language is like getting a potato chip that tastes.
15484 	X	if every th potato chip has some awful taste that makes you go ptui it messes up your enjoyment of the other.
15485 	X	its a separate issue from whether you need all for.
15486 	X	allthough i think this form of if statements could be useful in some cases i seriously doubt whether python really needs this feature.
15487 	X	apart from this construct looks rather.
15488 	X	so unless some really good arguments come along id vote.
15489 	X	dave brueck dave at pythonapocrypha com wrote in message news.
15490 	X	i remember all the people who wrote that list comprehensions were.
15491 	X	curious when i recently presented this to a room full of scientists who use python as a new feature all i heard was oh thank god.
15492 	X	i think we should distinguish the amount of cognitive effort involved to see the meaning of.
15493 	X	people who argue that one can already say things like.
15494 	X	are assuming the reader posseses a knowlege of the semantics of the and and or for example that condition and x is x if condition is true whereas it might well be a if you dont know otherwise and the and or.
15495 	X	sure i can figure it out but that isnt the.
15496 	X	the point is can i read it without employing too much of my higher level thinking.
15497 	X	requires learning the thing once after which it would be really hard to mistake.
15498 	X	mark every entry except the one s you are dead set.
15499 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote so look into my eyes i wont tell you lies neneh cherry the best hard science web sites that the web has to.
15500 	X	practically any real conditional operator would be better than c and x or y because c and x or y is wrong as you have so eloquently pointed out many times in these threads.
15501 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote no man quite believes in any other.
15502 	X	h l mencken alcyone systems san jose.
15503 	X	i would think you could consider eriks efforts to be focusing on the secondary question of how to do it just for that potential which is likely larger but thats another story who do want the ternary.
15504 	X	dont stop someone who already knows he wants it from putting together a list that will help likeminded people agree on the preferred syntax for that.
15505 	X	that ascribes a somewhat underhanded approach to this whole thing to someone who appeared to be very open and upfront about the whole.
15506 	X	or am i misinterpreting your comment.
15507 	X	i dont understand all the comments about who can be trusted to manage the voting who has ulterior motives this isnt that big a deal is it.
15508 	X	this is the discussion phase where peoples opinions can be swayed even repeatedly and some of the sillier arguments can be.
15509 	X	after the dust settles either a consensus emerges or the need to vote is clear and we can proceed to that.
15510 	X	it doesnt really seem were there yet to.
15511 	X	andrew koenig ark at research att com wrote in message news yukcaaezk fsf at europa research att.
15512 	X	i am somewhat in favour of the outcomes before conditions ordering but your objection here is very good the first outcome should be the normal one if relevant.
15513 	X	val some syntactic identifier sqrt a a returns sqrt a if a word some syntactic identifier one two many num num.
15514 	X	in fact without lazy evaluation this could be done now with a suitable.
15515 	X	class choicedict dict def getitem self key get the item with key as a tuple of logicals try length len key except typeerror key key length for item in range length if key item return.
15516 	X	def select choices return choicedict zip xrange sys maxint choices.
15517 	X	of course the non lazy evaluation really kills you on.
15518 	X	print select sqrt a a valueerror math domain error.
15519 	X	also the use of ca b in other languages is an important consideration so that skills are transferrable both to and from.
15520 	X	that syntax is used in enough other places to make it a valuable thing to.
15521 	X	pointing out examples of code that work fine but wouldnt if you changed them isnt a worthy.
15522 	X	thats why d wasnt initialized that way i wrote this test so i happen to know that the test isnt a random collection of independent lines.
15523 	X	i think that last seals it.
15524 	X	the votes have exceeded the minimum threshold necessary to decide the.
15525 	X	if we get any more i think andrew will have to add it to c.
15526 	X	nick vargish nav at adams patriot net wrote in message news yyyadgzgav fsf at adams patriot net.
15527 	X	yes actually it was intended as.
15528 	X	i would not take her as a language designer.
15529 	X	nevertheless tim peters explicitly said in that thread that guido is sensitive to this topic easy of understanding from beginners having python as first language.
15530 	X	now my point is if we have two forms with the same functionality should the choose the form that makes sense for experienced pythonistas only or the form accessible to everybody.
15531 	X	the real reason why i am against if c x else y is as i repeated many times that i want to keep the difference between statement and.
15532 	X	when i started programming in python i regarded that distinction as a bad thing and i thought languages where everything is an expression including the assignement were.
15533 	X	now i have changed my mind since i think i have understood why guido made this distinction the reason is indentation.
15534 	X	since if is a statement you are forced to indent it correcly if if becomes an expression indentation is no more significant.
15535 	X	of course you could say that this is bad style and that people should indent correctly but i want people to be forced to indent.
15536 	X	in my view forced indentation is the more pythonic of the python virtues and i want to keep it if i.
15537 	X	if everything becomes an expression indentation will become completely.
15538 	X	i realize that this can be an issue or not depending on the personal.
15539 	X	i like python because of the forced indentation maybe you find forced indentation.
15540 	X	in this case we should simply agree to.
15541 	X	does anyone have an estimate of the proportion of python programmers who know at least one c syntax language.
15542 	X	my guess is that at least of us.
15543 	X	i can only speak for myself but i would have learned c or perl if i wanted to see c like syntax and what attracted me to python was its pascal like.
15544 	X	i see the introduction of a.
15545 	X	based conditional operator as a step away from the clarity and simplicity that is the hallmark of python.
15546 	X	the problem here is that if constructs in any sane language are written with the true condition first followed by the false.
15547 	X	however boolean values have the reverse ordering assuming false true.
15548 	X	this is a recipe for bugs as it relies on something implicit ordering of boolean values to obtain the correct.
15549 	X	btw i thought that explicit was better than implicit but seeing these suggestions leaves me wondering if this is still regarded as.
15550 	X	the same goes for the a and b or c again abusing side effects of logic expressions when all you want is to state a simple choice depending upon a condition.
15551 	X	i thought about something on these lines a select operator that would pick an element of a list or dict using lazy evaluation.
15552 	X	but if conditional expressions are controversial i wonder what people will say about lazy.
15553 	X	carlos ribeiro cribeiro at mail inet com br.
15554 	X	samuele andrew koenig ark at research att com ha scritto nel messaggio samuele news yurclpk fsf at europa research att.
15555 	X	samuele sometimes it could be a real ambiguity so maybe it should be samuele just.
15556 	X	andrew koenig ark at research att com http www research att com info ark.
15557 	X	quite a number of people have expressed their preference for it throughout these.
15558 	X	certainly not a majority but elements from the negative neutral and positive camps have at some point spoken out in its.
15559 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote the quality not the longevity of ones life is what is.
15560 	X	martin luther king bosskey net return to wolfenstein http www bosskey net rtcw a personal guide to return to castle.
15561 	X	did a very nice analysis of his python code looking for where the if else expression could be used where it should be used and noted that those two were not the.
15562 	X	eg the pep case was less readable for some cases involving long lines.
15563 	X	given these numbers i could estimate the frequency of pep use were it put into.
15564 	X	i then assigned a probability that someone would use an if else expression rather than use a more appropriate python idiom eg from lack of experience with python idioms like x y or default or because of a desire to fit things into a single line because its terse rather than were.
15565 	X	these numbers were made up but i think not entirely.
15566 	X	these were used to determine the likelihood of proper use improper.
15567 	X	combining the different analysis i then determined that the ballpark estimates of use are.
15568 	X	the if else expression could be used about once every lines the if else expression will be used about once every lines the if else expression with short circuiting is needed only about once every lines given other python idioms.
15569 	X	and the rates of misuse range between misuse for every appropriate use and misuse for every appropriate.
15570 	X	did you not see all my posts on just this subject.
15571 	X	andrew koenig analyzed his c codebase for use of.
15572 	X	he described if the use of was appropriate or.
15573 	X	i then translated the use to python code and pointed out that in some cases there was a more readable.
15574 	X	and no false true bool exp is not considered readable in my book.
15575 	X	i analyzed a c code base and noticed the high number of misuses of the.
15576 	X	i also noted that many of those cases disappear in python partially because python has the min max function many of the cases were just to get the min max of two values.
15577 	X	someone else forgot who my apologies.
15578 	X	congratulations two logical fallacies in one.
15579 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote does the true light of love come in flashes sandra victor a lindenmayer systems explorer in.
15580 	X	i was a bit surprised too but in my litle usability study mentioned elsewere all the participants had considerably more difficulty understanding the expression then the if.
15581 	X	the now rejected form true value if cond else false value on the other hand was parsed and understood as fast as the if.
15582 	X	what happens in the integer version if the index is out of bounds for the list of code fragments.
15583 	X	do you get some default or do you raise indexerror.
15584 	X	or maybe it just returns none.
15585 	X	i could see arguments in favor of any of.
15586 	X	using the keyword except in a context that has nothing to do with except handling doesnt seem like a very good idea to.
15587 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote there are countless planets like many island earths konstantin tsiolkovsky maths reference http www alcyone com max reference maths a mathematics.
15588 	X	mike orr mso at oz net wrote in message news.
15589 	X	not a or b and c.
15590 	X	but i would also like to have one syntax that covers all.
15591 	X	its also universally used to mean is parallel until it meets at a point because both parts are getting pushed inward.
15592 	X	this is only in advanced texts about parallel things that get pushed together of.
15593 	X	form follows function ly yrs tim.
15594 	X	im not familiar with that term in this.
15595 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote whoever contends with the great sheds his own.
15596 	X	http www pollywannacracka com the internet resource for interracial.
15597 	X	although you and i have had friendly conversations in the past i see here after a hiatus i assumed a familiarity that was not.
15598 	X	again i apologize if in haste i inadvertantly gave.
15599 	X	i humbly beseach you to forgive.
15600 	X	somebody other than andrews was complaining about.
15601 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
15602 	X	ive been flipping between and going through and as various arguments are put.
15603 	X	whats put me mostly in the camp is the use of the ternary operator in an if.
15604 	X	i would be willing to abstain from or possibly even vote for a proposal that reads left to right and doesnt muck with the if.
15605 	X	so far the only proposals that work on those grounds are.
15606 	X	when cond then exp else exp aahz aahz at pythoncraft com http www pythoncraft com.
15607 	X	register for pycon now http www python org pycon reg html.
15608 	X	your are getting rich on troll.
15609 	X	if you want people to seriously consider your arguments then provide some wink.
15610 	X	what is the point of such accusations.
15611 	X	heres an example from the python distribution lib unittest py lines.
15612 	X	self stream writeln ran d test s in.
15613 	X	run run and or s timetaken.
15614 	X	andrew koenig ark at research att com http www research att com info ark.
15615 	X	after all the ab use of and and or to formulate conditional expressions using them comes from the very special way of pythons.
15616 	X	i the double valued way of objects were values at one time were truth values at another time first sounds attractive but when it comes to the evaluation of logical expressions this principle turns into a drawback since suddenly in a and b or c the user does no longer mean the truth value of b which is now unfortunately related to the real value but he wants it as.
15617 	X	ive been thinking for several times if this and or behavior of treating things as truth values and also carrying the values on is such a good.
15618 	X	now if guido is today keen on having an if and dissing all attempts to cure the old and or operators it would be discussable to dismiss and or isnt it.
15619 	X	in the sense of the old operators it is logical to extend them by a ternary then else.
15620 	X	but by not doing this i feel it would be consequent to drop and or as.
15621 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
15622 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
15623 	X	roy smith roy at panix com writes.
15624 	X	a class method doesnt have an instance self as the first argument but a class cls or whatever the class of the instance the method belongs to see classmethod.
15625 	X	howd you do this join iter seq tuple anything thats iter able.
15626 	X	i think that would only make sense if there were some iterable type with that method all the sequence types derived from but python doesnt work like.
15627 	X	i dont know aahz still i have no reason to doubt of his.
15628 	X	moreover were in the yes party i would actually prefer the vote to be taken by somebody who is not in the yes party dunno if you see my point.
15629 	X	as far as the vote is public any person is okay to.
15630 	X	i would be happy if you erik take the vote to determine which is the preferred proposal or the first two three if there is not a clear majority then aahz would take the final vote yes no.
15631 	X	if anyone has a real need for this they can code it in as a function for their own.
15632 	X	i dont have any impetius to write in an example but if pressed i will d it doesnt deserve anything were added into the vm parser really im guessing but i havent looked at the internals to check how it is implemented it just works one of the best things about python is the readability people that only know higher languages dont have a real need to remember some obscure corner case thing when they are refactoring code just because reading an if else then is easy for someone with a c.
15633 	X	even worse all the c programmers may start using it constantly and begin obfuscating their code for the non c people and the people that dont want to parse out nested terinary operations.
15634 	X	in short the gain a minor conviniance and a smidge more code on the screen does not mitigate the loss time guido code be writing productive code instead of fighting with the parser possible bugs introduced by said fighting and possible code obfuscation.
15635 	X	there is no real reason for something this inane and minor were add also as a minor note this would affect all of the different python ports for compatability such as it is on jython pippy stackless vyper objpy.
15636 	X	if anyone has an enumerated list of reasons that address all of these issues i would be glad to hear them but i dont see any reasonable gain from.
15637 	X	srart remove this underlined part at operamail com.
15638 	X	guido van rossum guido at python org wrote in message news.
15639 	X	hey you werent supposed to know about that.
15640 	X	thats a syntax from lispython which wont be released until mid.
15641 	X	how did you get access to the time mach.
15642 	X	sorry about that folks if youd please look over here for a minute.
15643 	X	there is no time machine such an idea would be.
15644 	X	the post that you think you saw was actually the result of random electrical surges caused when a weather balloon got hit by lightning while it was transmitting its.
15645 	X	the fact that it appeared to be meaningful words was just coincidence the million monkeys on typewriters.
15646 	X	now if youll excuse us weve got an alien in disguise to.
15647 	X	robin munn rmunn at pobox com http www rmunn com pgp key id xafb ff cffb a f d acfd afb.
15648 	X	this other project you have where a ternary would be very useful would that be the icon like snoball like parser you mentioned earlier.
15649 	X	delaney timothy c timothy tdelaney at avaya com wrote in message news.
15650 	X	what i tried to say is a vote against change is a vote for the status quo which hardly seems silly to me at.
15651 	X	given your response which i have probably also misinterpreted i obviously misunderstood.
15652 	X	in article edb decb at alcyone com.
15653 	X	of course the conditional is essentially just an abbreviated if statement with.
15654 	X	i doubt anyone is arguing against it purely based on the fact that it implements functionality that is already.
15655 	X	if that was a problem why do we have file readlines when you could just as well do file read split.
15656 	X	exactly and if so whether those cases are frequent and ugly enough that it warrants new syntax that will undoubtedly be abused for purposes where it will make code less readable.
15657 	X	lets not forget that one of the strengths of python is that it is easy to read and understand other peoples code and i believe at least part of the reason for that is that there are few constructs in python that encourage.
15658 	X	cue someone to reply with a list of two dozen abused.
15659 	X	no its not whether its useful or not on its own merits.
15660 	X	if it were you could easily argue that every possible construct under the sun has a use and therefore python should support them.
15661 	X	even perls implicit variable assignment has some use as people do use it but youre not arguing that something like that should be added to python are you.
15662 	X	theres no need for the conditional in this case because we have max and that is more.
15663 	X	anders hammarquist iko at cd chalmers se physics student chalmers university of technology hem gteborg.
15664 	X	christian tismer tismer at tismer com wrote in message news.
15665 	X	i also thought of this yesterday night and discovered that it was already proposed by nick vargish and.
15666 	X	nick seems to prefer the and trick but i am still in favor of then see r hettinger and a koenig comments in this thread.
15667 	X	it can be done a pseudo.
15668 	X	anyway my scan of the standard library lines of code shows that then is never used as as a.
15669 	X	comprehensions as a special language indicated by the list magic character.
15670 	X	no no no no no no.
15671 	X	minus the brackets suggest list and theres no list.
15672 	X	yeah plus some tip of salt oregano estragon no garlic what is the taste after all.
15673 	X	lcs were digestible with some effort but.
15674 	X	using lcs to justify ces brrrppps.
15675 	X	i can eat this but brrpp i have to say brrp.
15676 	X	sallowing this as well is hardly.
15677 	X	in this context the suffix expressions of lcs become undigestible to me.
15678 	X	alex lets have some pasta and many beers instead of this great new syntax that makes me want to wommit.
15679 	X	no accusion and by no means to you just a quote from harold and maude.
15680 	X	alex help theyre going to take my heart away.
15681 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
15682 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
15683 	X	richard python already has the required functionality just in richard another form not as an expression but as a statement.
15684 	X	exactly the same argument applies to lambda expressions and list.
15685 	X	imagine now those same shockingly appalling multiline horrors with the single element list or the lambda.
15686 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote she glanced at her watch it was.
15687 	X	james clavell bosskey net quake iii arena http www bosskey net qa a personal guide to quake iii.
15688 	X	in article effd fccdb at alcyone com.
15689 	X	the fact that you use rebuttal instead of response precisely explains why i havent bothered to say.
15690 	X	i see no point in continuing this line of discussion when there is already plenty of.
15691 	X	aahz aahz at pythoncraft com http www pythoncraft com.
15692 	X	register for pycon now http www python org pycon reg html.
15693 	X	many people including me think its not.
15694 	X	aahz aahz at pythoncraft com http www pythoncraft com.
15695 	X	register for pycon now http www python org pycon reg html.
15696 	X	and that makes list comprehensions the most confusing python construct there.
15697 	X	not only doesnt it read left to right it doesnt even read right to left.
15698 	X	until i tried it i fully expected.
15699 	X	which would follow from consistent right to left.
15700 	X	now since i use list comp s a lot ive gotten used to it and it doesnt bother me.
15701 	X	its ok for commonly used syntax to be special because once learned it isnt.
15702 	X	but the rarer a construct is the more conventional and boring its syntax and semantics should be even at the cost of terneness and.
15703 	X	had i expected conditional expressions to be used a lot i might have liked that.
15704 	X	i dont know if this is where one votes but for.
15705 	X	i like the proposed syntax it flows nicely when i read.
15706 	X	if someone stacks many of these together then it would get to be a mess but that is true regardless of whether there is a ternary operator or not.
15707 	X	aahz at pythoncraft com aahz writes.
15708 	X	metaclasses were also already there lets not.
15709 	X	type of the base class is what.
15710 	X	you have run into the classic dmachine problem your machine has become occupied by a malevolent.
15711 	X	replacing hardware or software will not fix this you need an.
15712 	X	on mon feb gmt andrew koenig ark at research att com.
15713 	X	i never said that lazy evaluation should be an implementation.
15714 	X	i said it was a matter for the function declaration or definiton to specify like var parameters in pascal perhaps or for built in functions for the manual to.
15715 	X	so what are you contradicting me on exactly.
15716 	X	steve at ninereeds dot fsnet dot co dot uk.
15717 	X	aahz aahz at pythoncraft com ha scritto nel messaggio news bc s at panix panix.
15718 	X	i hope the vote is going to happen not later than.
15719 	X	from laura creighton on mon feb.
15720 	X	laura well no wonder you are hot for this.
15721 	X	parsing a laura language where each line has a true false branch condition laura which i assume is what you are doing is an absolute natural laura for such a.
15722 	X	its not actually that universal but its certainly part of the reason i want.
15723 	X	however i acknowledge that the mere fact that i have a use for it should not by itself convince other.
15724 	X	so let me try an alternative.
15725 	X	just for fun i went looking for cond and expr or expr expressions in.
15726 	X	two of them are obviously correct.
15727 	X	if debug print auto colorizing turned self allow colorizing and on or off.
15728 	X	b button self buttonframe text label command command default isdef and active or normal.
15729 	X	the other two however are more questionable.
15730 	X	for raw in map ord uniphooey push raw and chr raw or x.
15731 	X	at first i thought that this might push the wrong value when raw it turns out to work correctly however because chr is considered true rather than.
15732 	X	still i would much prefer to avoid the and or idiom in this example because of the extra effort needed to understand.
15733 	X	text mark set insert self engine isback and first or last.
15734 	X	it is not possible to determine by inspection whether this code is.
15735 	X	its correctness depends on proving that whenever self engine isback is true first is also true i e not zero not empty.
15736 	X	it turns out that this code is correct but to show it i had to hunt back lines to find.
15737 	X	i didnt actually expect it to be easy to find examples in distributed python code that were provably.
15738 	X	however i also did not expect it to be this easy to find examples that were not obviously.
15739 	X	nameerror name a is not defined.
15740 	X	to add additional magic let call default to none and say.
15741 	X	if call or call is none and callable true.
15742 	X	if call or call is none and callable false.
15743 	X	and you only need to set call to false if you want to return a non lazy.
15744 	X	anders anders hammarquist iko at cd chalmers se physics student chalmers university of technology hem gteborg.
15745 	X	paul rubin http phr cx at nospam invalid writes.
15746 	X	well then you have to explain.
15747 	X	i dont think the addition of any of the proposed conditional expressions to python would be a good.
15748 	X	i do not prefer the and or abomin.
15749 	X	i think the peters ly signoff to my last post on this subject will be appended to any more i make.
15750 	X	learn to love the return key ly yrs m.
15751 	X	i think perhaps we should have electoral collages and construct our representatives entirely of little bits of cloth and papier.
15752 	X	owen dunn ucam chat from his review of the year.
15753 	X	tim peters tim one at comcast net writes.
15754 	X	follows directly here seems to mean is implicit in which takes us back to explicit were better than.
15755 	X	and as keeps getting posted the second version gives the wrong answer when y has a false.
15756 	X	so its one more thing to worry about when using that.
15757 	X	i dont think anyone has mentioned this yet but the proposed sets notation blows this out of the.
15758 	X	result cond and set true value or false value.
15759 	X	short circuit evaluation is never necessary in any language its just very very useful.
15760 	X	pythons and operator doesnt have to be a short circuit operator but its far more useful because it.
15761 	X	several of the previous examples have already illustrated this.
15762 	X	z iif x x getpref not specified.
15763 	X	i have said nothing whatever to or about you in public since our discussion moved to e mail other than the one sentence fragment quoted.
15764 	X	nor have i attacked terry so far as i can.
15765 	X	gareth mccaughan gareth mccaughan at pobox com sig under construc.
15766 	X	no it isnt an attack at.
15767 	X	its possible that ive expressed myself badly in which case im sorry about.
15768 	X	so far as i can see all ive done is to disagree with.
15769 	X	i didnt claim to have filtered every possible misinterpretation i did explicitly disclaim any suggestion that terry was in any sense obliged to write as i did above unusual is not judgemental and that word in any case came straight out of what terry.
15770 	X	i have never ever made that.
15771 	X	data isinstance source file source readlines source split.
15772 	X	my post was not commenting about the use of the syntax it was saying that explicit type checking should not be used for this.
15773 	X	specifically dont check for a file instance check to see if it supports a.
15774 	X	as written it prevents me from using a stringio class or anything else which implements.
15775 	X	at best do the type check only for the most restrictive case which is a string rather than the least restrictive case a file like object.
15776 	X	the fact that i wrote my objection using the traditional if else has nothing to do with the point of the.
15777 	X	the test should have been in his parlance.
15778 	X	data hasattr source readlines source readlines source split.
15779 	X	even with that case i would rather not get that property twice so using alexs clarification of my example the best solution is.
15780 	X	try readlines source readlines except attributeerror data source split else data readlines.
15781 	X	therefore even though i was not really commenting on the use of an if else expression idiom it happens that this example is not legitamet legtiment legit.
15782 	X	imo is easy to read and understand but i would change semicolon to something else like a dot ellipsis e.
15783 	X	a default can be handled by true default at the end and i think the true part of that could be implicit if desired so that you could write the ternary concisely as.
15784 	X	of course the square brackets would be syntactic sugar in many cases so perhaps they could be optional parens.
15785 	X	its disjunctive but its also a sequence of condition expression pairs and imo a dot ellipsis can suggest the sequence.
15786 	X	sometimes minor details make a big difference in.
15787 	X	i kind of lies low and makes the rest more visible.
15788 	X	stephen horne intentionally at blank co uk wrote in message news klrvkldmrcfjbmcusjovefr at ax just iso standard was.
15789 	X	i clarified my usage in the self followup i just.
15790 	X	other than the two explicit and intentional judgment statements that i recall i tried to stick with definitions and.
15791 	X	i presume you mean that they have to be cast to a common type such a c does with all.
15792 	X	i intentionally did not discuss common usage of and and or where meanings shift and may even be the.
15793 	X	vnr for instance uses the single horizontal line arrow for logical implication section.
15794 	X	equvalence to as in equivalence classes is usually written as three horizontal bars as we all.
15795 	X	yes though ive sene it used in mathematics as.
15796 	X	when i wrote is equivalent to i really meant evaluates to or could be replaced with rather than the logical meaning of equivalence if and only if or the meaning with respect to equivalence.
15797 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote you cannot step into the same river.
15798 	X	cratylus python chess module http www alcyone com pyos chess a chess game adjudicator in.
15799 	X	no offense to your girlfriend but im not sure this is useful.
15800 	X	it is irrelevant what a non programmer thinks about a particle.
15801 	X	its relevant what a beginning programmer thinks about a particular syntax in particular a beginning programmer in that language.
15802 	X	in that context i have no doubt that a beginning python programmer who has certainly been introduced the else construct in statements will be able to easily divine what.
15803 	X	safesqrt if x math sqrt x else.
15804 	X	there are lots of people that dont know python who find the use of colons strange or.
15805 	X	this doesnt constitute good data on whether this syntax is good for this language in my.
15806 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote sentimentality is a superstructure covering.
15807 	X	c g jung esperanto reference http www alcyone com max lang esperanto an esperanto reference for english.
15808 	X	paul rubin http phr cx at nospam invalid wrote in message news xraenyj fsf at ruckus brouhaha.
15809 	X	do you intensely dislike it more or less than the current idiom x and y or z.
15810 	X	yes but it is easily written with an and expression.
15811 	X	z not x and not specified or x getpref.
15812 	X	and a ternary op would simply add another.
15813 	X	a new ternary op cant be so good as to wipe out the need and all the existing code for and or.
15814 	X	in which case you have to learn two.
15815 	X	z x getpref except attributeerror not specified.
15816 	X	that might add something which we didnt have before in an expression.
15817 	X	since pep discussion is winding to a close as raymonds post indicated im hereby disclosing the full list of conditional operator proposal alternatives that ive been trying to keep tabs on since the threads first.
15818 	X	note that ive attempted to include every form here including those i personally dislike no matter how.
15819 	X	if it got mentioned as an alternative its listed.
15820 	X	im dividing the list into three categories proposals that have been mentioned in the pep even if withdrawn later i proposals that have been suggested in the newsgroup and have been seconded in the sense of having met with some tangible support ii proposals that have been suggested but are unseconded in that they did not appear to receive any independent support iii.
15821 	X	i also have a list of more generalized schemes which could be used as degenerate conditional operators but as they are really not appropriate for the pep at hand and open up a huge can of worms i will not mention them.
15822 	X	disclaimer the dividing line between seconded and unseconded schemes ii and iii above is fairly subjective im really going by whether anyone other than the original proponent expressed interest in it no matter how many times it was.
15823 	X	no special meaning or insult should be read into a proposal were classified under iii instead of ii they are simply my personal impression based on the reading of these threads and an attempt to separate things people seemed to like from things people didnt seem to.
15824 	X	more disclaimers this is list has no authoritative weight whatsoever its just a list ive been personally maintaining since these threads.
15825 	X	no significance should be paid to the ordering of alternatives in each section though they are in rough chronological order in the order that i saw them but even that is not a significant guideline.
15826 	X	no attempt is made to weigh the pros or cons of each proposal here although some clarification of the form itself is warranted in a few cases and that is done with.
15827 	X	also for safetys sake no mention whatsoever of the original proponent is made here several forms were suggested independently by several people over time some having even been proposed long before pep was created potentially making giving proper credit problematic the forms should stand on their own anyway regardless of who proposed them.
15828 	X	noticeably and consciously absent from this list are forms which do not meet the criteria set forth in pep namely those which do not support short circuiting behavior additionally as mentioned above more generalized schemes say an expressionalized case construct or macros are not mentioned here.
15829 	X	further only the simplest case of each form is shown here for clarity the n ary forms are not.
15830 	X	additionally several forms have been proposed with or without required parentheses surrounding them since this has happened for multiple forms over the debate for the sake of brevity i will not distinguish between them here and will only list the unparenthesized forms but when non parentheses punctuation is proposed or the parentheses are an intrinsic part of the notation they will of course be included.
15831 	X	finally only genuinely new syntaxes are listed.
15832 	X	the following symbols are used consistently c represents the conditional expression which is always evaluated x represents the expression to be evaluated if the conditional is true and y represents the expression to be evaluated if the conditional is.
15833 	X	so for example the conditional operator from c and c java perl would be written c x y.
15834 	X	i proposals mentioned in the pep at some point.
15835 	X	x if c else y if c then x else y if c x else y c x y c x.
15836 	X	y cond c x y c x y c then x else y.
15837 	X	x when c else y c x else y c x else y c x y x if c else y ifelse c x else y if c then x else y c and x else y.
15838 	X	this cond is a special form not simply a builtin function which lazily evaluates its last two arguments depending on the value of the first which is evaluated.
15839 	X	there were also variations on the name of the special form.
15840 	X	several alternative names for the starting keyword ifelse including select when and.
15841 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote many situations can be clarified by the passing of.
15842 	X	theodore isaac rubin a counter strike server log file monitor in.
15843 	X	and and or are two headed beasts at first glance they pretend to be logical.
15844 	X	at second inspection they do this logic by promoting one of their.
15845 	X	note that there is a current of thought about boolean logic in python where this would be seen as natural and.
15846 	X	python objects normally express a boolean value based on whether their value is essentially something or.
15847 	X	so theres no obvious reason to expect when you consider a value in a boolean context that the result should have been compressed to some artificial boolean data.
15848 	X	donn cave donn at u washington edu.
15849 	X	this is the one direction in which i really think the proposal shouldnt.
15850 	X	explicit is better than implicit if you mean x if p or some other thing you should write what you mean x if p else.
15851 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote if anything is sacred the human body is.
15852 	X	walt whitman a simple python opengl rendering.
15853 	X	in retrospect i dont find them as useful as i thought they would.
15854 	X	samuele pedroni pedronis at bluewin ch writes.
15855 	X	your post is very interesting since its the first one where ive heard someone actually claim to prefer to rather than offering as a kludgy workaround but really preferring a multi line if.
15856 	X	fwiw i find the forms awful and greatly prefer.
15857 	X	maximum x y and x or y.
15858 	X	which follows the form of but is simply incorrect some of the time which you might not immediately.
15859 	X	who needs to expose themselves to that kind of error.
15860 	X	ok but i was just doing what you like best replace and adding.
15861 	X	for holgers exception catching my latest ang greatest is just to use the old expression with a minimal markup.
15862 	X	where y means treat y as true in logical expression context but dont change the.
15863 	X	aahz aahz at pythoncraft com http www pythoncraft com.
15864 	X	register for pycon now http www python org pycon reg html.
15865 	X	in addition to wanting to avoid introducing new punctuation you probably want to particularly avoid things like since theyre often used in templating systems to set off actual python.
15866 	X	if they started appearing in python code that would make templating systems lives.
15867 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote life is an effort that deserves a better.
15868 	X	karl kraus alcyone systems san jose.
15869 	X	erik max francis max at alcyone com writes.
15870 	X	if y might evaluate as false i wouldnt use.
15871 	X	paul this signature intentionally left blank.
15872 	X	dale strickland clark riverhall systems ltd.
15873 	X	really theyre both synonymous at least i could find no formal distinction in mathematics in my searches.
15874 	X	both just mean having to do with.
15875 	X	the real misnomer here is that people keep referring to the conditional operator as the ternary.
15876 	X	a ternary operator is just an operator that manipulates three operands the conditional operator p x y or whatever form it eventually takes in python if adopted is really just one of any number of possible ternary.
15877 	X	in computer science of course its by far the most common ternary operator nearly to the exclusion of all others but theres no reaosn there couldnt be other ternary operators having nothing to do with the conditional.
15878 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote so look into my eyes i wont tell you lies neneh cherry official omega page http www alcyone com max projects omega the official distribution page for the popular roguelike.
15879 	X	maybe roman suzi iirc has found one short circuiting.
15880 	X	not too easy to abuse reads rather nicely.
15881 	X	may be extended to support dispatching of more than two expr.
15882 	X	the order true false or false true is not obvious especially if you are converting false true bool cond.
15883 	X	the parser might not be taught this grammar.
15884 	X	i left it as an exercise to the reader to find the.
15885 	X	switch satements are optional in c and the whole interpreter is implemented using.
15886 	X	macro defines as constants are used.
15887 	X	they are optional you can do everything without.
15888 	X	in python you have to use global.
15889 	X	could continue a while but the real point lies.
15890 	X	i dont argue against conditional expressions in c i am also not completely against them in.
15891 	X	but these languages have very little in common.
15892 	X	the languages are very different the programmers are very different.
15893 	X	for that reason your argument makes really no.
15894 	X	you are comparing different people programming in different.
15895 	X	the common set can clearly not be used as a measure for what is good for all the python.
15896 	X	the python source is written in a very readable way by the worlds best c programmers i.
15897 	X	they can use any construct of any obfuscated programming language in a readable manner since they are doing their best to get the best out of.
15898 	X	you might get the false perception that c is.
15899 	X	to cure you i suggest to read something else try the perl sourcecode for.
15900 	X	i did that many years ago and compared it with the python.
15901 	X	this was the last spot that made me switch to.
15902 	X	on the other hand python has a built in readability and it carefully tries to help the professional by expressiveness but also the beginner to produce readable code from the.
15903 	X	this is an invaluable property of python which you find in very few other languages and this exactly is what i fear the most could be.
15904 	X	the decision is therefore not how much we win but an order of magnitude more how much we loose.
15905 	X	the python source is written in a special style which id call pythonic c if something is badly readable it will be.
15906 	X	guido does not design python for his high level style of coding but for.
15907 	X	this is why im convinced that your reasoning was fallacious.
15908 	X	and i had to point that out since people might find your idea.
15909 	X	thanks i did read all of his code several.
15910 	X	the coding style of the python interpreter written by guido is totally unrelated to user programs written in.
15911 	X	after reading and coding millions of c source lines this is post.
15912 	X	i dontlike the proposed syntax i dont want the subject to be closed for years.
15913 	X	instead i want us to come up with a real good.
15914 	X	nothing against conditional expressions but the improvement must be much bigger than the price to.
15915 	X	we still have not found it and we should refuse to do the vote until we either found a good in the common subjective sense of good solution or we found that it does not.
15916 	X	you are right i strongly believe that python should not be coded in c c should be used for bootstrap purposes generated like assembly input but not be written by hand in a larger.
15917 	X	this is the reason why it is so hard almost impossible to try certain new constructs for the python.
15918 	X	python should be implemented in a high level.
15919 	X	how this can work will be examined in the minimal python project http codespeak net pypy.
15920 	X	im asking everybody to join who wants to put his spare time into a constructive project instead of wasting energy fighting in a lost.
15921 	X	less words more code codespeak ly rs chris.
15922 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
15923 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
15924 	X	in article hcmwyxea fsf at pc maths bris ac uk.
15925 	X	at the very most thats two thirds.
15926 	X	it was essentially impossible to use them from python without loading a special module and even then there were many more restrictions on its.
15927 	X	the idea of metaclasses was certainly there and essential intrinsic to pythons object model but i think its fair to say that metaclasses in python had little more existence than subclassing of builtin types which you could theoretically do from c prior to.
15928 	X	aahz aahz at pythoncraft com http www pythoncraft com.
15929 	X	register for pycon now http www python org pycon reg html.
15930 	X	its not that im assigning personal importance to this matter because it wont help me with my marriage it wont make me wash my cat any easier and it certainly doesnt make me any.
15931 	X	but theres the issue about helping preserve a beautiful thing as such itd be a shame to watch python become more c ish or perl ish or java ish just because.
15932 	X	otoh theres something to be said about helping to keep our favorite coding language environment pollution free while helping.
15933 	X	what about a built in function.
15934 	X	the flow is left to right more or less its similar to constructs in other.
15935 	X	it can of course be written in python currently in a rather horrible.
15936 	X	this message is checked for all known viruses by the messagelabs virus scanning.
15937 	X	there are a couple more ideas that have come up in the pep thread and there are two in particular that i like better than any in the above.
15938 	X	this is just another variant of a and b but it uses less punctuation and is imo more readable as a.
15939 	X	new keyword condition val else val.
15940 	X	this is like d but without the ambiguity with.
15941 	X	of course its big disadvantage is the requirement of a new.
15942 	X	the original suggestion was for the keyword ifelse or possibly.
15943 	X	i was thinking when could work and my latest idea for it is.
15944 	X	a simple example of each looks like.
15945 	X	holger would leave the parser having to look ahead of what this.
15946 	X	im sorry but i dont understand what you mean by having to look ahead of what this.
15947 	X	if the if in if something is the first token in its statement then what follows the is a suite otherwise its an.
15948 	X	i have access to an innocent as in largely unexposed to the discussion about pep and its alternative group of python programmers at work specifically eight of.
15949 	X	they have a wide variety of backgrounds most with some c all but one with at least two languages other than.
15950 	X	im willing to conduct more experiments on shudder people if it will help the but i dont have the time willingness or perhaps even competence to craft a decent study.
15951 	X	if i see one that appears well enough conceived to make it worth the effort ill put my vict h h h h employees to the test and report the results.
15952 	X	even if people dont use it they will have to read and understand it in other peoples.
15953 	X	this is one of the things that makes perl such a disaster of a.
15954 	X	ive use a subset of perl idioms in my writing but as often as not when im at a total loss when i read somebody elses code because they use a different set of.
15955 	X	they might as well be writing in a different.
15956 	X	def answer x return x minus plus zero.
15957 	X	btw these are not usual tuple list and.
15958 	X	sincerely yours roman suzi rnd at onego ru my ai powered by linux redhat.
15959 	X	yes these particular important benefits apply equally well to your iff.
15960 	X	i dislike it because its a functional form for what should be a standard.
15961 	X	i further object to its pointlessness as in the absence of conditional it wont provide a viable alternative to the inferior and or.
15962 	X	i suspect you like it so much precisely because it essentially defeats the.
15963 	X	but if he approves the proposal at all i trust that guido will see the wisdom of going ahead and including the short circuit functionality various statistical and emotional arguments of dubious validity.
15964 	X	after all short circuit functionality was integral to his original draft pep and to the reference implementation he worked on.
15965 	X	as some have acknowledged its a slightly advanced feature and perhaps only the wiser of us understand how its significant merit outweighs the minor.
15966 	X	while i doubt he has the stamina to keep up with all the volume coming down this fire hose of late especially given the higher than normal fecal content i do believe he sees or hears a representative sampling of the various.
15967 	X	i trust him to give much greater weight to the logical ones the emotional.
15968 	X	ha amazingly while we were arguing and seriously after writing the above part of this reply i see that the pep author has seen the wisdom of some of our arguments and now has revised pep proposing a form which many may find.
15969 	X	better yet and more relevant to your question the revised pep includes mention of something like your iff and then rejects it because among other things.
15970 	X	bdfl opposes any solution that does not provide short circuit.
15971 	X	furthermore theres an entire section devoted to the motivation for short.
15972 	X	can you say end of discussion.
15973 	X	im sure glad i waited until late tonight to begin to address this admittedly harder.
15974 	X	and im even gladder that i double checked the pep before attempting it especially after such a long.
15975 	X	best of all im glad to find that my trust in the right.
15976 	X	bdfl was not misplaced though im amazed and astonished how quickly he came.
15977 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
15978 	X	once again you pointlessly stoop to emphasize the painfully.
15979 	X	obviously my example in this case has nothing to do with conditional.
15980 	X	the more astute readers probably gleaned from the text that i was in this case working on a different point.
15981 	X	i said the relative handful of examples i included didnt need short circuiting and that it was rarely.
15982 	X	in some cases it is like.
15983 	X	init self tree and tree or none.
15984 	X	but i didnt happen to post that.
15985 	X	iptfile args and args or python graminit c.
15986 	X	in other cases it can be merely more efficient to short circuit like.
15987 	X	the unadorned and or idiom does short circuit so none of the above can be an issue for.
15988 	X	what i found much less use for none in the std library whether posted or not was cause to get excited about the but if the middle expression is false and the condition is true the last expression gets evaluated anyway.
15989 	X	most uses were slinging literal strings and module constants where but that cant happen was obvious and the idea that the middle expression might be false ignores that e no the literal yes is not.
15990 	X	in the end i didnt find any code in the std library id change if the pep were to be.
15991 	X	christian tismer tismer at tismer com writes.
15992 	X	yeah like thats going to happen.
15993 	X	erik max francis max at alcyone com writes.
15994 	X	in this instance x is not.
15995 	X	as is pointed out in various contexts over and over.
15996 	X	neil hodgson nhodgson at bigpond net au wrote in message news.
15997 	X	at news server bigpond net were those.
15998 	X	just add it to any module where you want it or shove it into the.
15999 	X	the difficulty is that other people reading the program might expect lazy evaluation and get hung up when they update your.
16000 	X	in python expression is a standalone.
16001 	X	the parser will notice the difference only at else.
16002 	X	sincerely yours roman suzi rnd at onego ru my ai powered by linux redhat.
16003 	X	skip for the times ive needed such a construct.
16004 	X	skip cond and expr or expr.
16005 	X	andrew except that this construct has a subtle pitfall if cond is andrew true and expr is false the result is expr instead of andrew expr.
16006 	X	its a solution and for the other where id have to resort to something like.
16007 	X	andrew cond and expr or expr.
16008 	X	i punt and use an if.
16009 	X	this is the first and only proposal that i would support.
16010 	X	holger krekel pyth at devel trillke net writes.
16011 	X	sorry tim we still need and and or wink.
16012 	X	could you give an example of a python feature that is deprecated and removed despite were useful and which has thereby contributed to the dumbing down of python.
16013 	X	i cant think of any but maybe im too dumbed down.
16014 	X	in other words i think your concern is unjustified what you fear simply isnt going to.
16015 	X	gareth mccaughan gareth mccaughan at pobox com sig under construc.
16016 	X	eru seems to have got the same idea as i.
16017 	X	i like this as it it is very similar to the if statement and so has very little extra baggage for newbiew to.
16018 	X	i also think that the order of condition then true expr followed by false expression scans.
16019 	X	i would go further and suggest that the else clause be allowed to be left.
16020 	X	if the condition is false then the expression should then return.
16021 	X	so an if to the right of an equals sign is the ternary.
16022 	X	we cant vote that one down so whether he likes it more or less than a broken idiom some people use anyway is really beside the.
16023 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote the multitude of books is making us.
16024 	X	a quick perusal of python interpreter source code reveals several hundred uses of the.
16025 	X	clearly the estimed bdfl evidently finds cs as is to be fairly useful at least sufficiently useful to employ it.
16026 	X	include abstract h pylist check o.
16027 	X	pylist get size o pytuple get size o pylist check o.
16028 	X	pylist get item o i pytuple get item o i.
16029 	X	modules hotshot c result self logfp null.
16030 	X	py true py false self frametimings.
16031 	X	modules sre c define sre loc is digit ch ch.
16032 	X	isdigit ch define sre loc is space ch ch.
16033 	X	isspace ch define sre loc is alnum ch ch.
16034 	X	many many more where these came.
16035 	X	if its good enough for python the implementation then its good enough for python the.
16036 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
16037 	X	and i like it but no one else seems to have commented either.
16038 	X	the original suggestion was for a keyword of ifelse or possibly.
16039 	X	i would prefer when or case.
16040 	X	ifelse c x else y when c x else y case c x else y.
16041 	X	at second sight x and y or z is crazy as.
16042 	X	at personal sight x then y else z would be perfect while if x then y else z fi would fit my preferences ideally but as said long ago if fi is not mandatory im happy to add parentheses whenever.
16043 	X	back to x and y else z.
16044 	X	quoting bdfl stare long enough at it and it looks very.
16045 	X	if that pythonism can cure the dichotomy between str join and string join it is also good enough to accept holgers.
16046 	X	at least for my small personal contribution to pythons subjective pythonic criterion it rang that.
16047 	X	didnt happen with the original proposal tho although i tried.
16048 	X	you are not talking of this single thread since it was all about this.
16049 	X	i have to agree that your conclusion is true given you mean the whole set of threads and its average.
16050 	X	despite of that i reject putting it down this.
16051 	X	hks input is very good regardless whether you judge x and y or z were.
16052 	X	i think we know that the latter.
16053 	X	if i sound so then i have a bug and need adjustment krrck.
16054 	X	tismer is different since s he is written in.
16055 	X	it has a huge personality module that wants to be.
16056 	X	if it uses that module to influence c l py votes this is just fair.
16057 	X	anyway please show me any other proposal that is as minimalistic as this.
16058 	X	please stare at it a little while and weight its impact to the simplicity of the language readability ease of impl and getting all these threads to a happy shut down or up.
16059 	X	python is klingonean for spartanic chris.
16060 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
16061 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
16062 	X	i have no problem with that provided everybody agrees on how it plays into the voting.
16063 	X	the problem i see with it is that people who dont care simply wont bother voting except to demonstrate proudly that they dont care so including it and trying to use that figure for something meaningful will be.
16064 	X	i think when it was suggested people vote on the question do you want a short circuiting conditional operator to be added to python yes or no explicitly is directed at the people who do care one way or.
16065 	X	youll never know how many dont care but didnt vote so im not sure if trying to include that as an option in the vote is really going to get you a figure that reflects.
16066 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote i always entertain great.
16067 	X	robert frost get your own customized newsfeed online in realtime for free.
16068 	X	i would choose to use the parentheses in nearly all cases because it is a more readable style but i wouldnt make them a syntactic.
16069 	X	i dont see how thats really any different from a vote youre just giving it a different.
16070 	X	if youre suggesting policy be based on the pre screening then that is for all intents and purposes a.
16071 	X	im just cataloguing the list of alternatives that were suggested throughout these threads and dividing them into categories like suggested but not seconded suggested and seconded and more generalized.
16072 	X	this information will be useful if pep is accepted or rejected and even if rejected whether its rejected early or.
16073 	X	im just collecting a list of alternatives not.
16074 	X	even if rejected including the proposed forms in one place that is in the pep itself will be instructive for.
16075 	X	besides if its all a waste of time its my time to waste and the amount of time im wasting by maintaining the list pales in comparison to the amount of time im spending actively contributing to these.
16076 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote whoever contends with the great sheds his own.
16077 	X	http www pollywannacracka com the internet resource for interracial.
16078 	X	doesnt matter whether one agrees with the substance of this remark or not this is still an absolute.
16079 	X	i think its kind of comical how serious everyone believes this is as if the very future existence of python hinged on whether the conditional operator is a.
16080 	X	b c or a then b else c.
16081 	X	theres an old saying about programming languages apl is a perfect crystal if you add anything to it it becomes.
16082 	X	lisp on the other hand is a ball of mud throw anything into it and its still.
16083 	X	so now we have pep about conditional expressions for python the subject of endless enormous threads here both in past times and.
16084 	X	its interesting that of the many many different conditional expression proposals put forth theres none that anybody really.
16085 	X	it really seems hard to put this common feature into python without doing something un.
16086 	X	does that mean python has that apl like crystalline characteristic.
16087 	X	is that a good thing or a bad thing.
16088 	X	i do know that lisp is much more successful than apl for developing big complicated software.
16089 	X	its flexibility may have something to do with.
16090 	X	python will certainly keep evolving as its implementations get more serious and.
16091 	X	i wonder how that crystalline quality will evolve with.
16092 	X	bumbers it is quit some time since i used that construct and its not as easily spotted as cs ternary operator.
16093 	X	ive found one example others are made.
16094 	X	real example class query def add self dates for date in dates if type date type een absolute date self query append cf dag d date elif len date een chinese datum self query append cf dag calendar absolute from chinese d d g d date else een westerse datum kind self reform none or date self reform and julian or gregorian self query append letop amerikaanse volgorde maand dag jaar cf dag calendar absolute from s d g d kind date date date.
16095 	X	i switch back and forth between an if statement and the above and or expression to asign to kind.
16096 	X	the above and or usage is espescially ugly as the condition itself has an or clause.
16097 	X	the if statement is a bit to verbose to my likings here.
16098 	X	else een westerse datum if self reform none or date self reform kind julian else kind gregorian self query append letop amerikaanse volgorde maand dag jaar cf dag calendar absolute from s d g d kind date date date.
16099 	X	the following looks better even better were it to fit on one line.
16100 	X	else een westerse datum kind julian if self reform none or date self reform else gregorian self query append letop amerikaanse volgorde maand dag jaar cf dag calendar absolute from s d g d kind date date date.
16101 	X	the conditional expression is long winding as it is so i would not dare to put it to direct use inside the self query append function call hence the temporary variable.
16102 	X	other usage is probably like this.
16103 	X	class madeup def example self param none param none param none param none zero is a valid value for all params self param param none and some default or param self param param none and some default or param self param param none and some default or param self param param none and some default or param.
16104 	X	such code always waits for dreaded false ness of some default but four four lined if expressions in a row for such a simple thing as dealing with default values is a lot of screen.
16105 	X	with the new proposal it would look like.
16106 	X	class madeup def example self param none param none param none param none zero is a valid value for all params self param param if param.
16107 	X	none else some default self param param if param.
16108 	X	none else some default self param param if param.
16109 	X	none else some default self param param if param.
16110 	X	when i read your expression the first meaning that jumped at me was.
16111 	X	x and c or c and y else z.
16112 	X	but maybe you werent thinking of this meaning in which case parens are your frens sp.
16113 	X	raymond hettinger python at rcn com wrote in message news.
16114 	X	i prefer the ternary operator masquerading as a function however the i find the actual proposal.
16115 	X	which brings up an interesting idea could we use acceptability voting.
16116 	X	well you are never going to get that people who think that people who dont care should get no vote will be opposed to this no matter.
16117 	X	so will the real number that are pro and the real number that are.
16118 	X	otherwise we get government by the league of concerned citizens unless the ad hoc vigillante posse of unconcerned citizens tosses the aforementioned concerned citizens into the moat.
16119 	X	sheila king usenet at thinkspot net wrote in message news bjgg at kserver org.
16120 	X	actually i like x when c else.
16121 	X	i dont see introducing a keyword for a new construct as too serious a.
16122 	X	also i expect the construct to be used more often than many people seem to.
16123 	X	otoh i dont have a serious problem with x if c else.
16124 	X	so count me as to when to.
16125 	X	of course the way this discussion is going by the time its done well be speaking arcturan and it will look something like x j tar c bdor.
16126 	X	to make it stick it helps to post your.
16127 	X	my own reasons for avoiding this one are.
16128 	X	you have to look twice to see that youre dealing with an expression rather than an if statement.
16129 	X	when looking at an expression my mind is trained to see alpha characters as a variable or function name.
16130 	X	the enclosing parenthesis requirement feels wrong.
16131 	X	there is an unpleasant smalltalk flavor to having a single expression operator take two keywords followed by colons and.
16132 	X	there is nothing else like it in python it doesnt fit.
16133 	X	all of these problems are solved by using punctuation instead of keywords.
16134 	X	c a b c a b c a.
16135 	X	functions evaluate their arguments at call time in this case it means that arguments it means nothing but what if falseresult is a function that should only be evaluated if condition is false.
16136 	X	there is a workaround for this that is to have the so called lazy evaluation in this mode the arguments will only be evaluated when.
16137 	X	however this is not supportted in python and i am wondering if guido would like to hear about.
16138 	X	carlos ribeiro cribeiro at mail inet com br.
16139 	X	sure guido gets the final decision but voting may help if even he is with.
16140 	X	or do you dislike voting especially on c l py.
16141 	X	am this is the first syntax ive seen proposed for this that i like.
16142 	X	am i particularly like the generalization to an int on the lhs of the am new proposed.
16143 	X	however i am slightly troubled by the am subtly different syntax for the two alternatives vs n alternatives am.
16144 	X	whatever kind of parentheses are used couldnt the am number of alternatives listed inside the parentheses be the ones am that control whether the lhs is taken as int or condition.
16145 	X	or am would that be unpythonic.
16146 	X	i dont feel very certain about.
16147 	X	this would cause a subtle problem which by the way is now also present if someone confuses the parentheses.
16148 	X	if b is a variable that takes only and as values then.
16149 	X	b x y is the same as b y x.
16150 	X	because with boolean conditionals people are used to have the true clause.
16151 	X	piet van oostrum piet at cs uu nl private email p van oostrum at hccnet nl.
16152 	X	usenet news is not a very reliable media so any poll should be conducted by sending email to an address that the votetaker sets.
16153 	X	furthermore having the results of the votes public is paramount to ensure integrity but having the progress of the vote public that is everybody gets to see everybody elses votes as they are made tends to greater polarization rather than a truer indication of what people really.
16154 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote sentimentality is a superstructure covering.
16155 	X	c g jung esperanto reference http www alcyone com max lang esperanto an esperanto reference for english.
16156 	X	erik max francis max at alcyone com ha scritto nel messaggio news.
16157 	X	yes but is not good for general public comsumption no im not referring to if.
16158 	X	in the end it means i will vote no.
16159 	X	in article yurfhmnh fsf at europa research att com.
16160 	X	for both of your versions id reverse the order since str i seems to be the primary intended result and a fallback for unusual cases.
16161 	X	strs str i if i else.
16162 	X	i havent yet thought whether i want to vote for gvrs proposal but one advantage of it to me is that it does emphasize the primary result the if clause and de emphasize the logic of how you choose that.
16163 	X	so when reading such code you can more quickly see what type of object youre going to get as soon as i see str i.
16164 	X	i can tell that the result will be a stringified int except for some less common cases where it will likely be something else resembling.
16165 	X	on the other hand for the c syntax or similar counterproposals in this thread the first thing you see is the i comparison which i dont think is the most important feature of the expression you have to read more of the expression to have any idea what kind of value it will.
16166 	X	david eppstein uc irvine of information computer science eppstein at ics uci edu http www ics uci edu eppstein.
16167 	X	def cond e x y if e return x else return y.
16168 	X	improvements on the above are surely.
16169 	X	james p rutledge jrut at spamcop net writes.
16170 	X	since algol came up in this discussion before maybe lazy evaluation can be accomplished with some explicitly requested form of call by name parameter passing to.
16171 	X	could be a shortcut for saying.
16172 	X	f lambda exp lambda exp lambda exp.
16173 	X	then the cond function could be written.
16174 	X	def cond e x y if e return x else return y.
16175 	X	another possible notation could be a leading dot to thunkify an expression expression would be the same as lambda expression.
16176 	X	erik max francis max at alcyone com wrote in message news ebf aea at alcyone.
16177 	X	however the second form would be implemented with a keyword instead of a macro but the effect would be the.
16178 	X	also iif looks like a typo to him so it would have to be cond test or some.
16179 	X	i posted this elsewhere under a different subject and got zero responses of any.
16180 	X	perhaps if i post it to this thread i can get indications of why this would be a bad idea some slight revisions have been made but the idea is the same.
16181 	X	i suggest creating a new singleton called default or some such which has the following properties.
16182 	X	when used as the left hand side of a logical and the right hand side is not evaluated and the result is always acts as a false in other boolean operations such as or.
16183 	X	when used as a function if the argument passed is non zero true then return the argument otherwise return the default.
16184 	X	overload the keyword else default or to act exactly as traditional or except that it will only execute the right hand side if the left hand side is default thus eliminating the false left side case.
16185 	X	default condition and truecase else falsecase.
16186 	X	one could very well alias default as test if letters is too much typing i e test condition and truecase else falsecase.
16187 	X	by doing this truecase could produce any value and the falsecase is never.
16188 	X	in addition truecase could produce default indicating that it the falsecase value is acceptible to the truecase after.
16189 	X	as an added bonus the following also makes sense.
16190 	X	x default we dont care print x is x else because x is.
16191 	X	x print x is now x else because x is not default.
16192 	X	obviously the spellings would have to change as appropriate but you get the.
16193 	X	to sum up why couldnt we create an entity such that it yields to any other entity when manipulated.
16194 	X	here are the advantages i see to this.
16195 	X	no new keywords and only alters the meaning of one.
16196 	X	does not require trinary operation and looks like the classic and or.
16197 	X	visible enough to indicate something interesting is.
16198 	X	creates a useful new value that can yield to any other value including false values unlike none as it stands now.
16199 	X	anyway since i didnt get a response to my previous posting i thought id run it up the flagpole one more time and check to see if anyone even reading.
16200 	X	anders this particular example is enclosed in.
16201 	X	and is therefore anders accepted by the grammar changes proposed in anders news.
16202 	X	andrew koenig ark at research att com http www research att com info ark.
16203 	X	this has now been clarified parentheses are.
16204 	X	ive sent e mail correcting the typo.
16205 	X	aahz aahz at pythoncraft com http www pythoncraft com.
16206 	X	register for pycon now http www python org pycon reg html.
16207 	X	even corrected andrews example does illustrate a weakness of the right to left proposal it does not readily amean itself to proper indentation as does the left to right condition first.
16208 	X	imho this constitutes an argument for placing the condition before the alternatives rather than an argument against the construct.
16209 	X	whenever i do have occasion to use inline choice i always fully parenthesize and properly indent the sub expressions for maximum clarity.
16210 	X	this is every bit as clear as the equivalant statement long hand its virtually the.
16211 	X	this convention preserves the notion that the first token on every line is a big clue as to whats going on with the rest of the line and that you can see the overall structure from the.
16212 	X	frankly i find that verbosity in and of itself does not necessarily increase the clarity of code and more often its actually.
16213 	X	the fact that the python equivalent of the above expression is more lines and more typing does not materially add to the clarity of expression except if you happen to be brainwashed to see things only that one way i e on a subjective level.
16214 	X	if condition if condition targetvar result else targetvarl result else targetvar result.
16215 	X	in fact inline choice actually increases the clarity of the source code because it emphasizes that targetvar is necessarily the single target of all possible sub.
16216 	X	in the if else form the reader has to visually verify that the target variables are all the.
16217 	X	in my experience one thing that best serves maintainability is to factor out common code wherever.
16218 	X	that way you avoid in advance the error prone process of having to make identical changes to parallel sections of.
16219 	X	because theres a material savings even at the single statement level was one reason for adopting augmented.
16220 	X	but the if else form forces you to break this.
16221 	X	more importantly factoring out the redundant references to the target variable the inline form prevents a class of common.
16222 	X	e if you look closely youll find a subtle bug in the above if else.
16223 	X	this typo would be impossible to make with inline.
16224 	X	thus the supposedly more readable form admits a class of errors the inline form.
16225 	X	and this is a class of errors that easily go undetected in a declaration free language like.
16226 	X	so to flatly claim that the if else form is superior to inline choice is simply.
16227 	X	from the big picture standpoint inline choice is equally useful and.
16228 	X	programmers can be trained to use and recognize both forms as easily as just the.
16229 	X	now its valid to say you prefer if else as a matter of personal.
16230 	X	as a manager you can even enforce whatever standard you want in your coding.
16231 	X	the utility for this construct is obvious and.
16232 	X	while i agree that readability is important it is specious to argue that this particular exceedingly minor change makes a material.
16233 	X	as william dode just showed it was much easier to explain to a non programmer than list.
16234 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
16235 	X	you were asked for an example where short circuit would be necessary and this is a well intentioned legitamet.
16236 	X	the fact as you point out and we all know that it can be rewritten the other way does not materially add to the.
16237 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
16238 	X	eru ripolles at lalalaaditel org writes.
16239 	X	guido van rossum guido at python org escribio proposal the proposed syntax is as follows expression if condition else expression if i may give my opinion i dont like much that.
16240 	X	i think it introduces too much potential obfuscation.
16241 	X	i think its too perlish to be.
16242 	X	and if we add the empty else option a if condition it starts getting difficult to.
16243 	X	i assume that the else is required just as you cant say condition.
16244 	X	i would prefer the ab c.
16245 	X	it doesnt introduce new punctuation which leds to more difficulty when explaining the syntax and remembering it.
16246 	X	the question mark would be new punctuation wouldnt it.
16247 	X	its not entirely clear what this gains us except the omission of the keyword.
16248 	X	it shortens code that uses it but does so with a penalty of introducing more keyword less syntactic.
16249 	X	is pep really a good idea.
16250 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote its soulful.
16251 	X	it doesnt necessarily sound like soul sade adu official omega page http www alcyone com max projects omega the official distribution page for the popular roguelike.
16252 	X	paul rubin http phr cx at nospam invalid wrote in message news xnldix fsf at ruckus brouhaha com.
16253 	X	no need to worry that guido is going to roll some dice wink for accepting.
16254 	X	anyway nobody is even going to demand that future pep are decided on c l py especially taking the current discussion into account.
16255 	X	maybe he just wants to have a more quiet python dev by pushing all the syntax enthusiasts to c l py and keeping them busy.
16256 	X	you dont really worry do you.
16257 	X	holger krekel pyth at devel trillke net ha scritto nel messaggio news.
16258 	X	roy well if were going to take that argument then we should also roy be considering assignment as an expression so people can write roy c style loops such as while x foo.
16259 	X	otherwise its just roy another special case which makes it more complex for people to roy understand how the language.
16260 	X	i used to feel the same.
16261 	X	now however i realize that assignment really is a special case particularly in how it interacts with.
16262 	X	x def f x f print x.
16263 	X	the syntactic position in which an assignment appears affects the assignments.
16264 	X	x def g y x x return y print g.
16265 	X	unboundlocalerror local variable x referenced before assignment.
16266 	X	here the second line of g changes the meaning of the first line of g.
16267 	X	so i dont see how to avoid making a special case without major changes to the.
16268 	X	andrew koenig ark at research att com http www research att com info ark.
16269 	X	aahz if youre so dead set against roys argument please explain to aahz us why you use python instead of.
16270 	X	one reason is that perl has several categories of variables and you have to state the category each time you utter the name of a.
16271 	X	this categorization makes it much more difficult to create useful data structures than it would be.
16272 	X	andrew koenig ark at research att com http www research att com info ark.
16273 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote whom god has put asunder why should man put together.
16274 	X	ralph waldo emerson rules for buh http www alcyone com max projects cards buh html the official rules to the betting card game.
16275 	X	holger krekel pyth at devel trillke net.
16276 	X	i dont think this works well in.
16277 	X	does your mind quickly parse this.
16278 	X	if x and y else z print shrubery.
16279 	X	also have you ever put a colon in the wrong place.
16280 	X	if x and y else z.
16281 	X	this is currently valid but has an entirely different.
16282 	X	i think i have seen that before but also thought that list tuple show grow a get method parallel to the.
16283 	X	and i thought why would someone really need to do this check.
16284 	X	either you allow negative indices which work on list tuples or you dont in which case you might like to get into some error path.
16285 	X	how do you get to i anyway.
16286 	X	apart from this specific example your general perception is interesting.
16287 	X	this reinforces an earlier thought about pep alternatives which might read as follows.
16288 	X	beeing able to deal with exceptions within expressions like this would not obsolete other expressions and is unlikely to obfuscate.
16289 	X	it feels more pythonic to me because it avoids the look before you leap idiom i e you dont have to know anything specific about your keys and do checks to.
16290 	X	just try and define the exceptional.
16291 	X	in mathematics a b is read a implies b.
16292 	X	a b means that a and b imply each other i e they are equivalent.
16293 	X	if we wanted to bend the meaning of somehow to make it work in a conditional expression we would need to say that e g.
16294 	X	means something like x were true implies the value should be y else its z.
16295 	X	cant say i like it much.
16296 	X	greg ewing computer science dept university of canterbury christchurch new zealand http www cosc canterbury ac nz greg.
16297 	X	i for one am more surprised but just.
16298 	X	in effect but that doesnt justify any conditional operator notation simply because it is not as ugly as the and or trick or does not suffer from its.
16299 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote you cannot step into the same river.
16300 	X	cratylus python chess module http www alcyone com pyos chess a chess game adjudicator in.
16301 	X	he is known for years and would certainly kill his reputation completly if he drops some in favour votes and people discover.
16302 	X	the votes are to be published so plenty of people can.
16303 	X	i am pretty sure that he can post a neutral call for votes and most of the people here have an oppinion regardless of the exact question.
16304 	X	there is nothing preventing people and andrew for that matter from enhancing the pep but they may need to check with some python dev people or guido.
16305 	X	for this they better make sure they have clear and well reasoned.
16306 	X	its not like guido doesnt know the arguments for ten years wink.
16307 	X	and he happens to have a good idea what is pythonic and what.
16308 	X	if somebody really thinks he manages to convince guido that a different syntax is wortwhile voting about i e has any chance to get past him then these alternatives can be included in the voting.
16309 	X	but id say dont bother and take pep syntax as is to be the last chance for a long time getting a ternary operator syntax into.
16310 	X	my favorite proposal i do not remeber who coined it.
16311 	X	sincerely yours roman suzi rnd at onego ru my ai powered by linux redhat.
16312 	X	roman in python expression is a standalone.
16313 	X	roman the parser will notice the difference only at else.
16314 	X	here is how i am proposing to change the grammar to avoid that.
16315 	X	note that i have not run this grammar through a parser generator nevertheless i think the idea behind it is pretty.
16316 	X	uncond expression or test lambda form.
16317 	X	if form if expression expression elif expression expression else expression.
16318 	X	andrew koenig ark at research att com http www research att com info ark.
16319 	X	to every hard problem theres a solution that is simple obvious and.
16320 	X	conditional expressions broken over multiple lines are not.
16321 	X	in my personal use conditional expressions are used a lot in debugging diagnostics which are later.
16322 	X	the frequency of conditionals in any codebase snapshot may not reflect the frequency of using.
16323 	X	no examples i have seen so far qualify for the strong term misuse.
16324 	X	bad style perhaps though im not even sure that.
16325 	X	the only semantically neutral rewrite i can think of is.
16326 	X	bool something var something if something var this something.
16327 	X	which id hesitate to call an.
16328 	X	in all likelyhood whoever wrote this is unfamiliar or uncomfortable with obj or default and would not have used that.
16329 	X	also it lends itself to a clarification such as.
16330 	X	x if obj is none obj else default.
16331 	X	this is exactly my experience i worked on a largish codebase klocs of.
16332 	X	even with an authoritative style document several pages long you could tell excatly who wrote what and more accurately than cvs ann becuase merge commits obscure the original checkin.
16333 	X	people use which one they like when they like and according to their.
16334 	X	the philosiphy of perl is to be like english lots and lots of ways to say the same.
16335 	X	the idea is to allow the writer to think naturally in the language and to give the reader hints as to.
16336 	X	the philosiphy of python or at least python users is to focus on the reader and to keep the number of ways to do it to some.
16337 	X	minimum is defined loosly as possible and not painful.
16338 	X	so it all boils down to.
16339 	X	i enjoy reading books and i dont mind re reading clever sentances or looking up an uncommon word in a.
16340 	X	this is a great idiom for complicated academic arguments and for pleasure.
16341 	X	if you send out a work proposal or an internal memo that requires the reader know the rd definition of a word or understand a clever nuance of grammar you are.
16342 	X	programming is something most people do to get work.
16343 	X	hey i like perl i use perl frequently ive plenty of karma over at perlmonks.
16344 	X	i also like python i use it for different things and in different.
16345 	X	i have no desire to program in.
16346 	X	and gives the value so the result should clearly be whatever else returns which logically should be right.
16347 	X	if you know its a ternary op you can figure it.
16348 	X	if you dont its entirely non obvious what its doing and reads to me more like a latent syntax error than anything.
16349 	X	so this would be exactly like the normal if syntax except its an expression instead of a.
16350 	X	this seems like a pretty good clean way to handle.
16351 	X	it would also be easy to allow defaulting to.
16352 	X	i e ifelse condition expression is equivalent to ifelse condition expression else none.
16353 	X	i agree that it would benefit from a prettier keyword.
16354 	X	i cant think of anything particularly cond or decode are a couple more possibilities.
16355 	X	how frequently does this occur such that getting all our knickers in a twist is worth it.
16356 	X	so far most of the examples pushing a conditional expression have not required short circut.
16357 	X	for the cases where side effects restrict the use of a conditional expression i think perhaps requiring the use of an if statement is the most appropriate way to handle.
16358 	X	aahz aahz at pythoncraft com http www pythoncraft com.
16359 	X	register for pycon now http www python org pycon reg html.
16360 	X	which you have a harder time to justify as nice not.
16361 	X	that says i am in favour of all except x.
16362 	X	there is no way to distinguish between.
16363 	X	maybe the person in question like you knew all about.
16364 	X	but was ideologically opposed to using.
16365 	X	maybe the person for some reason thought the given expression was more clear in this case even though he knows about and uses.
16366 	X	the code in question is the result of a bug with the return accidentally having been.
16367 	X	simply adding the additional statement was the easiest mod for the.
16368 	X	engineer to make and he didnt think to rewrite the surrounding.
16369 	X	i am sure there are other.
16370 	X	the fact that some sample code which could have used the construct did not use it doesnt denigrate the usefulness of the.
16371 	X	more importantly your doesnt constitute an argument that the construct is.
16372 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
16373 	X	nobody is saying or equivalent is the best way to express your self in every single.
16374 	X	the arguments for conditional expressions generally involve side effects or the readability maintainability improvement of factoring out the common assignment from the individual.
16375 	X	since there are no side effects in this and presumably many of your hits then the two forms are genuinely equivalent and you would expect to see a.
16376 	X	too your conclusion assumes that the code was all written by a single.
16377 	X	in all likelihood the code was written by different people with different knowledge levels and individual.
16378 	X	it seems foolish to expect to appear everywhere in a c program where it might fit about as realistic to expect it would never.
16379 	X	to answer your question why wasnt it generally.
16380 	X	maybe the person who wrote that particular piece of code didnt know about.
16381 	X	dave or did you forget smileys too.
16382 	X	sometimes my humor is so deadpan that even i dont know if im.
16383 	X	andrew koenig ark at research att com http www research att com info ark.
16384 	X	aahz aahz at pythoncraft com wrote in message news bdrl it at panix panix definitely.
16385 	X	list alternatives a b c with do nothing at top or.
16386 	X	voting instruction list alternatives in order of preference and use a vertical bar to separate acceptable from unacceptable.
16387 	X	then the votes could be analyzed both as preference votes and and approval.
16388 	X	python makes this pretty simple to do.
16389 	X	given that the vote is advisory multiple analyses are acceptible even with varying.
16390 	X	you can use references to mask that.
16391 	X	the fact remains that the type system lacks.
16392 	X	you need an extra level of indirection to give it the appearance of.
16393 	X	andrew koenig ark at research att com http www research att com info ark.
16394 	X	you may have missed it but throughout my lobbying for the if c t else f syntax people kept objecting that it was too easy to confuse with the if.
16395 	X	i kept trying to point out that this is an advantage of the syntax but finally gave it.
16396 	X	there is a slight inconsistency in python in that it doesnt allow a trailing comma in an empty list tuple or argument tuples require a comma and tuples forbid a.
16397 	X	if would have been more consistent to always allow a trailing.
16398 	X	my sense of order and pattern always found this slightly.
16399 	X	well theres no doubt that if you want an iff still a bad choice of names since in mathematics that means if and only if not the meaning intended here that does short circuiting it has to lazily evaluate some of its argument it has to be a special.
16400 	X	i think one of the strengths of python is that it doesnt have special forms i know when i see something written as the argument to a function its going to get evaluated before that function gets.
16401 	X	some operators and or support lazy evaluation but in my opinion introducing lazily evaluation functions would open a huge can of.
16402 	X	or at least i cant see how it.
16403 	X	its a good solution when you want a general form of lazy evaluation and want it to be explicit i.
16404 	X	it obviously doesnt work if you want implicit lazy.
16405 	X	zero argument lambdas are in fact precisely how lazy evaluation is implement in some.
16406 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote no man quite believes in any other.
16407 	X	h l mencken alcyone systems san jose.
16408 	X	terry reedy tjreedy at udel edu writes.
16409 	X	hang on did you mean to include no change in your alternatives.
16410 	X	now i just dont understand what you.
16411 	X	if this comes down to a vote my vote will be for no change unless theres a wonderful new idea bengts latest doesnt count.
16412 	X	no need to apologise im through taking offense in this.
16413 	X	learn to love the return key ly yrs m.
16414 	X	i dont have any special knowledge of all.
16415 	X	in fact i made all the above up in the hope that it corresponds to.
16416 	X	in article eae at news bluewin ch.
16417 	X	aahz aahz at pythoncraft com http www pythoncraft com.
16418 	X	register for pycon now http www python org pycon reg html.
16419 	X	i dont really know how much weight should be afforded to a straw poll involving only eight people but if people feel it would be instructive go for.
16420 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote it is human nature to think wisely and act.
16421 	X	anatole france a module for generating unique ids in.
16422 	X	im writing this to sum up my feelings regarding pep and some of the arguments presented pro and against.
16423 	X	it will probably raise one or two flame like answers but im getting used to it.
16424 	X	why is a ternary operator needed.
16425 	X	the main reason is that it allows the programmer to clearly express his.
16426 	X	the alternative idioms that are frequently presented in c l p just doesnt cut it theyre mostly clever hacks that abuse some side effects of the way logical operators and expressions work in.
16427 	X	the main example are abuses of the following definition false true.
16428 	X	most alternative solutions proposed to avoid the inclusion of the ternary operator abuse this fact either through indexing or by a clever composition of logical.
16429 	X	while i agree that the convention is a fact of life and that it does have solid foundations on binary logic and past implementations of several languages it does not seem right to abuse it like this it requires the programmer to be aware of this identity which is not obvious for.
16430 	X	many people say explicit is better than.
16431 	X	well idioms such as ab cond are implicitly using the identity mentioned.
16432 	X	the same goes for the and or hacks clever stuff but not immediatelly obvious unless you execute it.
16433 	X	that leaves us with two main options a traditional if then else statements setting temporary variables or b creating a brand new ternary operator as proposed by guido.
16434 	X	traditional if then else statements have their own.
16435 	X	theyre lenghty for simple stuff and may obfuscate the program.
16436 	X	it would be much better to use if statements only for big decisions the ones that define the programs logic small stuff such as choosing between two representations to format data can be efficiently written as an inline expression leaving the logical flow of the program.
16437 	X	now look at it this way the ternary operator is just syntactic.
16438 	X	it will make code easier to.
16439 	X	operator in c programs occur in short expressions things that are much better written inline than spread out over.
16440 	X	it can be abused but many other constructs can be abused if nested arbitrarily and this does not makes such constructs bad by.
16441 	X	i also urge everyone on the list to be careful when considering.
16442 	X	the automatic but unconscious reaction for many people is to stand up against.
16443 	X	an open stance is important now to careful evaluate all the.
16444 	X	eventually some people may give it a try and rewrite some of their actual code just to see would it end up looking.
16445 	X	i myself felt victim of this trap after reading guidos.
16446 	X	i thought that the syntax proposed was strange a little weird confusing because of the evaluation.
16447 	X	but the more i read it the better it.
16448 	X	carlos ribeiro cribeiro at mail inet com br.
16449 	X	stephen yes as i said in my post and as you even included in the.
16450 	X	stephen except stephen in that lazy evaluation can ignore subexpressions which are stephen not needed but which might otherwise trigger errors.
16451 	X	stephen in your example if e x is true f x is not needed as it cannot stephen affect the result but its evaluation could trigger an.
16452 	X	stephen so what are you contradicting me on exactly.
16453 	X	if lazy evaluation can ignore unneeded subexpressions but is not required to do so then you have the uncomfortable situation that your program might fail on one implementation but not on.
16454 	X	andrew koenig ark at research att com http www research att com info ark.
16455 	X	holger this makes the parsing process ambigous because an expression holger can also be a.
16456 	X	holger the parser would still have no idea at yep what holger it is dealing.
16457 	X	holger is the result of some editor accident.
16458 	X	part of the suggestion is that when if is the first token of a statement the statement is an if.
16459 	X	so when the parser sees a statement that begins with.
16460 	X	it knows that yep must be the first token of a.
16461 	X	andrew koenig ark at research att com http www research att com info ark.
16462 	X	john the proposal on the table requires parenthesis around the entire figure.
16463 	X	there is no ambiguity with or without the.
16464 	X	the only question is whether the parser is up to.
16465 	X	its easy for a bottom up parser but hard for a top down.
16466 	X	andrew koenig ark at research att com http www research att com info ark.
16467 	X	erik max francis max at alcyone com wrote in message news.
16468 	X	you mean like the way floats as substitutes for reals do not work as expected.
16469 	X	so i guess they are wrong too.
16470 	X	too many people like cute code as in.
16471 	X	put in parens until this is legal.
16472 	X	debugging these things is a bear.
16473 	X	suppose i want to say if a nd order polynomial of the form a x b z c has real or imaginary.
16474 	X	print roots are real if b a c else imaginary.
16475 	X	people will write this do you want this to be the future of python.
16476 	X	now i want to print the descriminate as well.
16477 	X	descr b a c print descriminate descr print roots are real if descr else imaginary.
16478 	X	and now i want to say if the roots are duplicate forgot the right mathematical term.
16479 	X	descr b a c print descriminate descr print roots are real if descr else duplicate if descr else imaginary.
16480 	X	ive seen it a lot in c c.
16481 	X	the justification is often oh i shouldnt change the structure since theres a reason expectation for it to look like.
16482 	X	compare this to the progression of.
16483 	X	descr b a c if descr root type real else root type imaginary print roots are root type.
16484 	X	notice that this is lines compared to line requires coming up with two names descr and root type and easy to understand.
16485 	X	ill beat alex to the punch by saying this could also be written as.
16486 	X	descr b a c root type imaginary real descr print roots are root type.
16487 	X	print roots are imaginary real b a c.
16488 	X	however modifying the code is much.
16489 	X	descr b a c if descr root type real elsif descr root type duplicate else root type imaginary print descriminate descr print roots are root type.
16490 	X	which is yes times longer than would be done with the proposed syntax but much easier to understand than that if else if else and easier for non expert programmers to debug by simply inserting i am here print statements in the different.
16491 	X	and yes alex this could also be written as descr b a c print descriminate descr print roots are imaginary duplicate real cmp descr.
16492 	X	so i understand that the new syntax makes expressing certain constructs more succinct but i believe at the cost of ease of accessibility to non expert users and more difficult understanding for maintainence programmers who need to support the.
16493 	X	i believed list comprehensions would have the same.
16494 	X	this has not turned out to be the case that i can.
16495 	X	part of the reason it hasnt been a problem is that few people do x y for x in list for y in for z in spam if x y.
16496 	X	this sort of comprehension is frowned on in the python.
16497 	X	and its easy to see that this is something you might want to shy away.
16498 	X	in very complex ways because its easier to understand when writing it people are used to this construct from c and because of will have less exposure to a thats a bad idea because its harder for others to understand it philosophy expressed in the rest of python and use previous exposure to the if its got it we should use it felt by many c.
16499 	X	the order of arithmetic operations is drilled into every student during.
16500 	X	its natural and besides i always use parens for any expression that looks too.
16501 	X	and again i can read a b c d from left to.
16502 	X	doing w x y z is perhaps harder to read but i usally wouldnt write it that way.
16503 	X	and due to using symbols not words for operators the stands out from the surrouding identifiers and my attention is immediately drawn by force of habit to the x y.
16504 	X	i doubt that i will find val if cond else val as easy even after a long.
16505 	X	in short it just feels wrong and no amount of telling me it shouldnt is going to change.
16506 	X	i also worry that it sets a bad precedent for future syntax additions to take similar liberties with.
16507 	X	on thu feb norman petry npetry at canada com wrote in comp lang python in article.
16508 	X	i really hate to do me too types of.
16509 	X	however as some people seem to be keeping track of preferences and so forth by the posts on this topic to the newsgroup i feel that i had better agree out loud when i.
16510 	X	sheila king http www thinkspot net sheila http www kgroups org.
16511 	X	programmers are not by and large language.
16512 	X	to say that simply because many people ask for a feature that feature is desirable is to completely discard the idea that people who have experience designing and implementing languages might have a better understanding of the issues.
16513 	X	it is like saying that a race car driver is qualified to design a.
16514 	X	are they better qualified than the average joe.
16515 	X	are they as qualified as an engineer at gm.
16516 	X	if there are good reasons to add a ternary operator and people make them well then it should be.
16517 	X	if the only reason is that a lot of people shout really loudly that they want it then this is not a compelling reason and the operator should not be.
16518 	X	just so you dont think im against every language extension i love string methods augmented assignment was a big mistake though.
16519 	X	sean ross frobozz electric at hotmail com wrote in message news.
16520 	X	to me if is associated to the conditional statement a conditional expression is a conceptually different thing and needs a different.
16521 	X	readability is worth adding a new.
16522 	X	i dont like your other proposal with the comma my mind parses when cx as the tuple when cx.
16523 	X	i looked at about examples in the linux.
16524 	X	few needed it though i dont reacall the.
16525 	X	i looked at different kinds of uses of in a proprietary c codebase i have access.
16526 	X	only a couple needed it in the form p null.
16527 	X	more often it was incorrectly or confusingly used or used as a replacement for min.
16528 	X	my best estimates are about one use of if else expression per lines of python code for the population who is writing code in my field so figure in lines where short circuiting is.
16529 	X	if the vote is then we have done our poll.
16530 	X	the people who dont care should get to vote.
16531 	X	maybe for backwards lists tuples you should have backwards parenthesis.
16532 	X	anybody who believes that yes no voters show up at the poll in the same proportion as the yes no ers in the general population needs to read up on convenience.
16533 	X	we know lots about voting now and one thing that is clear is that the subject matter of the vote is highly.
16534 	X	in general people who want change are more motivated to vote than people who want things to stay as they.
16535 	X	they are also more likley to be paying attention to the fact that change is were.
16536 	X	this is why you want sunny weather on voting day when your political party is trying to be re elected and why you pray for rain if you want to vote those incumbent bums.
16537 	X	this is not the case however when the proposed change is a new.
16538 	X	then people who dislike paying taxes come out in droves to try to sink the proposed.
16539 	X	this is why if you want something that costs money you campaign on how great it is going to be and try to only worry about the costs after the.
16540 	X	i have no idea whether this proposal is more likely to motivate those who sincerely want to vote yes than those who sincerely want to vote no or vice.
16541 	X	but i have perfect faith that if the proportions we get somehow do accurately match the proportions of the population at large something we can never know then this will only be by.
16542 	X	so maybe the syntax should be.
16543 	X	just like in the pep but with brackets around.
16544 	X	minus the brackets suggest list and theres no list.
16545 	X	pluses remove the can almost appear anywhere add the tell the reader exploit the trailing if habit from lcs the lack of any for clause should be sufficient to distinguish this from lcs i.
16546 	X	true but i do think that overall there appears to be consensus that x if c else y is.
16547 	X	nobody from the uninterested to negative camp wants it and from from the positive camp want.
16548 	X	aahz aahz at pythoncraft com http www pythoncraft com.
16549 	X	register for pycon now http www python org pycon reg html.
16550 	X	james j besemer schreef op zondag februari om.
16551 	X	some more data grep w goto find.
16552 	X	of course we have raise instead of.
16553 	X	but the same is true for a ternary operator but i wont repeat that.
16554 	X	asperger syndroom een persoonlijke benadering http people nl linux org gerrit het zijn tijden om je zelf met politiek te bemoeien http www sp nl.
16555 	X	this was one of the forms i suggested way back.
16556 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote life is an effort that deserves a better.
16557 	X	karl kraus alcyone systems san jose.
16558 	X	on sun feb gmt andrew koenig ark at research att com.
16559 	X	yes as i said in my post and as you even included in the.
16560 	X	in your example if e x is true f x is not needed as it cannot affect the result but its evaluation could trigger an.
16561 	X	so what are you contradicting me on exactly.
16562 	X	steve at ninereeds dot fsnet dot co dot uk.
16563 	X	this might be fine but if you start getting listcomps with one of these ternary operators and an if clause in the.
16564 	X	youre going to be leaving someone with a hellish ugly bit of code to.
16565 	X	def condsqrt z if z return sqrt z else return.
16566 	X	y condsqrt z for z in x.
16567 	X	theres a function call overhead but its a hell of a lot easier to.
16568 	X	surely the true pythonic way would be result eval true fn false fn not condition does short circuit avoids the issue in nicks version that true may not be as easy to read as at least some of the pep.
16569 	X	i really dont see what all the fuss is about.
16570 	X	paul rubin phr nb at nospamnightsong com wrote in message news xelhrlys fsf at ruckus brouhaha expression.
16571 	X	if i had to choose between deferred evaluation and any of the conditional expressions id go with the functional version in a.
16572 	X	i consider it so much clearer that theres simply no.
16573 	X	well if youre trying to be completist but any kind of macro scheme gets my thumbs.
16574 	X	str join s d does not.
16575 	X	i believe the original post was suggesting something along the lines.
16576 	X	class str def join cls sequence delimeter if not sequence return cls r cls sequence for s in sequence r r delimiter cls s return r join classmethod join.
16577 	X	which i also think would be better than delimeter join sequence.
16578 	X	but as others have stated it wouldnt have worked when string methods were first introduced and its pretty much too late.
16579 	X	but lisp has never been a defining standard for all programming.
16580 	X	it is quirky and somewhat different from anything in programming that could be called a.
16581 	X	for example it is often referred to as a functional language because it supports functions as first class objects even though it is clearly an imperative language in most ways with side effects all over the place so it doesnt even fit with the standard expectations of a single class of programming.
16582 	X	as for the syntax it is best compared with forth and miranda all three are obsessed with one syntactic construct forth has postfix operators miranda has prefix operators lisp has lots of infuriatingly stupid.
16583 	X	the standard for boolean logic operators even if it is just a de facto standard is that they operate on boolean parameters and return boolean.
16584 	X	there are exceptions and some have been around a long time but age in itself does not make something.
16585 	X	steve at ninereeds dot fsnet dot co dot uk.
16586 	X	on fri feb erik max francis max at alcyone com.
16587 	X	i still have yet to decide whether i like the new proposal although im pretty sure i like it better than the alternatives ive seen here and i think sitting on it for a few days will help me come to a clearer.
16588 	X	david eppstein uc irvine of information computer science eppstein at ics uci edu http www ics uci edu eppstein.
16589 	X	erik max francis max at alcyone com writes.
16590 	X	when reading nothing but pep threads all day long reason starts to become a vague.
16591 	X	i just thought it was a cute trick to be able to remove the else y clause without rewriting the rest of the.
16592 	X	in the cold light of morning im not so sure how useful the trick actuall.
16593 	X	sigmask py version feed this to your.
16594 	X	print reduce lambda xy x chr ord y ojdlwbshjti.
16595 	X	erik max francis max at alcyone com writes.
16596 	X	i dont see why that should be illegal given that theres no doubt about what its supposed to.
16597 	X	i dont think its that useful to do it but why treat it specially or make it illegal.
16598 	X	as a standalone statement is perfectly.
16599 	X	but as for me i would prefer a company which supports and encourages good programming styles rather than one which encourages chastisement of bad.
16600 	X	with the result looks surprisingly like a dictionary with parens instead of curly braces.
16601 	X	erik i presume he means something like with s as the sequence d as the erik string delimiter.
16602 	X	eh str join d s works just fine as far as i can.
16603 	X	andrew koenig ark at research att com http www research att com info ark.
16604 	X	note the condition is worded as ok to mean that its checking the ok condition and nok when its checking for an exceptional.
16605 	X	a is the ok value and b is the nok.
16606 	X	guidos original suggestion a if ok else b but some noisy people didnt like its reverse.
16607 	X	christian tismer champions ok then a else b as his preferred.
16608 	X	franois pinard mentions a when ok else b as his own evolved from a language of his.
16609 	X	i agree with harvey thomas there will be a need to create a new keyword if any of the more simpler alternatives are.
16610 	X	also worth repeating is that these are not operators in the traditional python sense but syntactical constructs so its essential not to use them in the same context nor confuse.
16611 	X	any of these three gets a from.
16612 	X	good day and have a commercially happy feb th p.
16613 	X	had i been clearer minded i would have argued against listcomps on that.
16614 	X	as it is im not sure i want to continue the.
16615 	X	aahz aahz at pythoncraft com http www pythoncraft com.
16616 	X	register for pycon now http www python org pycon reg html.
16617 	X	hes attempting to invoke a slippery slope.
16618 	X	i wonder if hes aware that its a logical.
16619 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote do not seek.
16620 	X	dag hammarskjold esperanto reference http www alcyone com max lang esperanto an esperanto reference for english.
16621 	X	pssst steve i think he was gone a few days.
16622 	X	i dont know whether he was a troll but i enjoyed this particular silly.
16623 	X	i guess that makes me worse than the pep people as they were at least engaged in something resembling constructive.
16624 	X	martijn no www could we be going in the right direction.
16625 	X	there are plenty of features in python that are already present that are used very.
16626 	X	but when they are used they do their job with flying.
16627 	X	the question is if when its used it serves its.
16628 	X	you may think that it is never useful but clearly others.
16629 	X	either way the frequency argument doesnt get either side.
16630 	X	a conditional operator or form should be short circuiting because it simply doesnt make sense to go through the trouble of adding one that.
16631 	X	everyone knows that a non short circuiting conditional function is utterly trivial.
16632 	X	why bother adding it if it doesnt short circuit no matter how rare short circuiting is.
16633 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote whoever contends with the great sheds his own.
16634 	X	http www pollywannacracka com the internet resource for interracial.
16635 	X	damn and here i thought i could get everyone caught up in a string join debate and lessen the numbers of posts about pep.
16636 	X	damn you for keeping it on topic.
16637 	X	the would only suggest alternation to those who have already programmed in languages where this is the symbol for or.
16638 	X	i would have to agree with what david eppstein says in.
16639 	X	why do people keep proposing cryptic punctuation based syntax for this.
16640 	X	using punctuation instead of words makes the meaning non obvious especially to new programmers who have not used c c java and so it seems unlikely that the bdfl will ever accept.
16641 	X	such proposals clutter the discussion without making progress towards getting a ternary included in the.
16642 	X	sheila king http www thinkspot net sheila http www kgroups org.
16643 	X	quoth norman petry deprecation of in c style.
16644 	X	id add that one more problem with is that these characters are not visually salient or at least not as salient as for example and.
16645 	X	thus the precedence structure of a complex expression involving these operators is not visually.
16646 	X	this is another reason to use a keywordy syntax for the ternary operator in python such a syntax puts the operator in about the same visual class as and and or more visually salient than the higher precedence arithmetic.
16647 	X	note that this argument in favour of a keywordy syntax does not reduce to the absurd replacement of with.
16648 	X	pep s current proposal if c x else y is unfortunate in this respect the colon after the condition is not as visually salient as its significance.
16649 	X	the analogy to statement if syntax is not helpful for statement if it is the newline and indentation which make the break between the condition and the true branch visually salient the colon appears not as a separator but as some kind of visual aid in reading across the real separator the newline and.
16650 	X	that statement if allows a one statement branch to appear on the same line separated only by is imho a wart for exactly this.
16651 	X	your favored syntax x if c else y passes this test.
16652 	X	ive snipped most of your points since i agree with most of.
16653 	X	i prefer that expressions appear left to right in the order they are.
16654 	X	for one thing this makes it easier to reason about side.
16655 	X	this is especially so when some of the operators have important control flow semantics as the ternary operator.
16656 	X	imagine for example a short circuiting and which evaluates its second argument first that way lies.
16657 	X	you can read such a thing left to right you could even name it onlyif to make it sound natural when spoken.
16658 	X	but the left to right reading order is misleading as to the evaluation.
16659 	X	this might be what other posters meant by their claim that x if c else y cant be read left to right.
16660 	X	since the ternary operator evaluates the condition first then one of the values this argument supports putting the condition before the.
16661 	X	i hope my comments above address this lack.
16662 	X	steven taschuk staschuk at telusplanet net what i find most baffling about that song is that it was not a.
16663 	X	i really dislike this because of the ordering and the keyword usage suggests that what you are reading is statements not.
16664 	X	the purpose is to evaluate one expression and use the result to select one of some other set of expressions to evaluate for a value of the whole.
16665 	X	why not a simple enumeration of the candidates and a choice based on the integer value of the condition.
16666 	X	implying bool cond and implying int cond.
16667 	X	c d z y x c z x or y.
16668 	X	c lambda y x c false lambda yx c true indexerror exception c lambda y x c false lambda yx c true indexerror exception c lambda y x c false lanbda y c true x.
16669 	X	x c z y you just have to remember that you are selecting the expression based on bool c so the order is false true.
16670 	X	is pretty natural it reads ltr and selects the expression to evaluate like indexing the tuple of candidates with bool condition.
16671 	X	it also extends naturally to integer indexed selection for selection from more expressions.
16672 	X	condition expression expression expression imo this clutters possible nested use with confusing keywords instead of having simple expression.
16673 	X	none sys stdout write hello n.
16674 	X	would seem to take care of.
16675 	X	using to mean select by integer index from more than two expressions to evaluate would also allow e.
16676 	X	high i zero one two result i.
16677 	X	status event no action action some arg action.
16678 	X	alternatively the condition could also be the first listed inside mandatory specially decorated with or parentheses e.
16679 	X	verbose none sys stdout write hello n status event no action action some arg action.
16680 	X	why stick with our feelings where the pythonic way is to have usability studies so i wook up my daughters they know about html and a little javascript and are big fans of monty.
16681 	X	i showed them the following snippets.
16682 	X	i showed to refresh their knowledge of assignment years ago i tried in vein to get them to code using python.
16683 	X	they looked insulted when i asked them what a.
16684 	X	then i showed and asked what b.
16685 	X	again insulted looks and the right.
16686 	X	next i showed and asked for b.
16687 	X	as anwser they started to read it aloud in dutch realising that its silly to explain something by repeating it they got to more verbose reformulations indicating they understood what was going.
16688 	X	next i showed and asked the bafflement stupified it took them ages okee seconds to read.
16689 	X	mirte said she doubted she could understand it without having seen and merel questioned the colons she expected something that stood on its own like a statement after the collon not merely a.
16690 	X	when i later on tried it on my wife happily computer illiterate i had to explain the if statement snippet posed no problems but again bafflement looking at snippet so much line noise she complained whats with those brackets and those collons and then the value for b hidden somewhere in that.
16691 	X	all three prefered had no problems understanding but it took them quit some time to understand.
16692 	X	even more remarkably as they claimed that having seen snippets and they already knew the.
16693 	X	not quite what you would have expected.
16694 	X	i really hope someone steps forward and does some usability test before we grow a new wart on this beautifull.
16695 	X	i didnt try these yet will have to wait till tomorrow as the twins are fast asleep.
16696 	X	my newsreader seems to have quit putting s in the.
16697 	X	harvey thomas hst at empolis co uk wrote in message news.
16698 	X	with some proposals put forward there is possibility for confusion if colons particularly as in else are used as i can imagine its not always going to be clear whether a code fragment is part of an if elif else statement construct or a conditional.
16699 	X	the proposal on the table requires parenthesis around the entire figure.
16700 	X	i think the concern is that a statement in python may consist of or begin with an expression and thus the leading keyword alone is not enough to tell what is going.
16701 	X	i am looking into this more closely to confirm but i dont think its a problem for the.
16702 	X	i expect that if you said something like.
16703 	X	that would parse as an expression because of the lack of.
16704 	X	would be parsed as an if statement with expr and expr also were seen as.
16705 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
16706 	X	i believe i even made a mistake with.
16707 	X	erik max francis max at alcyone com wrote in message news.
16708 	X	yes but the wider issue is do we need a conditional operator at all.
16709 	X	its not as if the conditional operator opens up completely new areas of previously impossible stuff instead it just makes some things under certain specific circumstances more.
16710 	X	the assumption seems to have been that people cant do without such an operator but if the only tool in your toolbox is a.
16711 	X	thats why it appears even more frivolous than pep.
16712 	X	see also http www python org search hypermail python html is this the ternary operator tenth anniversary debate or what.
16713 	X	on mon feb greg ewing using news cis dfn de.
16714 	X	sheila king http www thinkspot net sheila http www kgroups org.
16715 	X	which i now realize suggests the alternative y but x if c note that the second expression not the first is evaluated if c is.
16716 	X	this is very like the unseconded option in franciss list of proposals.
16717 	X	at alcyone com except that is uses but instead of.
16718 	X	chained uses such as t z but y if d but x if c do not read quite as naturally.
16719 	X	its not even clear what the result of this should be if c and d are both.
16720 	X	steven taschuk staschuk at telusplanet net every public frenzy produces legislation purporting to address.
16721 	X	in one of these threads he threatened to vote against the proposal because i wasnt planning on listing his suggestion in my personal list for my own edification a form which the bdfl explicitly rejected in the pep by the way.
16722 	X	in other words he was going to punish me for doing something as an individual with no connection to the pep or the voting process by voting against the.
16723 	X	i had reservations about his choice of voting processes which i voiced and which he acknowledged but i dont know if he actually has any intention of changing the process.
16724 	X	but if hes going to threaten to vote against a proposal based on the unrelated activities of someone that is simply another voter i have serious reservations about his.
16725 	X	this is the votetaker saying that hes going to do.
16726 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote the multitude of books is making us.
16727 	X	recall the controversy that sprung from the pronouncement that booleans would be added to the.
16728 	X	and that was a really simple change it just at first glance looked a lot more involved than it really.
16729 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote lawyers i suppose were children.
16730 	X	charles lamb the laws list http www alcyone com max physics laws laws rules principles effects paradoxes in.
16731 	X	holger what about a missing else clause.
16732 	X	holger allowing it could be nice for stuff like.
16733 	X	holger result obj if callable obj.
16734 	X	if obj is not callable what is assigned to result.
16735 	X	the typo was in a new code example i provided and which was wrongly snipped out of the above.
16736 	X	note the difference in leading quote.
16737 	X	following is my original comment several paragraphs following in context.
16738 	X	my cond example contrasted with the buggy statement form.
16739 	X	frankly i find that verbosity in and of itself does not necessarily increase the clarity of code and sometimes its actually.
16740 	X	the fact that the python equivalent of the above expression is more lines and more typing does not materially add to the clarity of expression except if you happen to be brainwashed to see things only that one way i e on a subjective level.
16741 	X	if condition if condition targetvar result else targetvarl result else targetvar result.
16742 	X	in fact inline choice actually increases the clarity of the source code because it emphasizes that targetvar is necessarily the single target of all possible sub.
16743 	X	in the if else form the reader has to visually verify that the target variables are all the.
16744 	X	in my experience one thing that best serves maintainability is to factor out common code wherever.
16745 	X	that way you avoid in advance the error prone process of having to make identical changes to parallel sections of.
16746 	X	because theres a material savings even at the single statement level was one reason for adopting augmented.
16747 	X	but the if else form forces you to break this.
16748 	X	more importantly factoring out the redundant references to the target variable the inline form prevents a class of common.
16749 	X	e if you look closely youll find a subtle bug in the above if else.
16750 	X	this typo would be impossible to make with inline.
16751 	X	thus the supposedly more readable form admits a class of errors the inline form.
16752 	X	and this is a class of errors that easily go undetected in a declaration free language like.
16753 	X	so to flatly claim that the if else form is superior to inline choice is simply.
16754 	X	from the big picture standpoint inline choice is equally useful and.
16755 	X	programmers can be trained to use and recognize both forms as easily as just the.
16756 	X	now its valid to say you prefer if else as a matter of personal.
16757 	X	as a manager you can even enforce whatever standard you want in your coding.
16758 	X	the utility for this construct is obvious and.
16759 	X	while i agree that readability is important it is specious to argue that this particular exceedingly minor change makes a material.
16760 	X	as william dode just showed it was much easier to explain to a non programmer than list.
16761 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
16762 	X	in fact part of fluency in a language is knowing its idioms and using them in preference to other ways of saying the same.
16763 	X	for example i once saw a loop such as the following in a python newbies code i while i len some list print some list i i i though correct and clear this is a bad way to write the loop because its not idiomatic nobody writes loops of this sort in this.
16764 	X	thus the reader has to stop and study for a moment to see just what the loop is doing and might even scrutinize it to be sure theres no reason it was written in this strange.
16765 	X	for x in some list print x is equally correct and clear but more idiomatic and hence.
16766 	X	fluent readers will parse it correctly in an instant and without conscious thought leaving their faculties free to think about other aspects of the.
16767 	X	steven taschuk i may be wrong but im.
16768 	X	staschuk at telusplanet net friday robert a heinlein.
16769 	X	terry reedy tjreedy at udel edu writes.
16770 	X	the current idiom is not something to like or dislike since for some values of x and y its just plain.
16771 	X	its existence as a widespread idiom is basically a.
16772 	X	the question were discussing is whether to fix the bug or let it.
16773 	X	x and y else z is a proposed fix that i dislike for the reasons i.
16774 	X	still if i had to choose between the proposal as it stands or nothing at all i would take the proposal as it.
16775 	X	i would agree here that else definitely should not be.
16776 	X	the else none should be implied if the else is.
16777 	X	explicit is better than implicit is i hope a good rule of thumb rather than an absolute principle that trumps even intuitiveness and.
16778 	X	david eppstein eppstein at ics uci edu ha scritto nel messaggio news eppstein.
16779 	X	as much as in a so.
16780 	X	but i like how much effort is putting the pro camp to make me vote no not yes wink.
16781 	X	glad i have been able to get rid of those horrible.
16782 	X	and i have already become addicted to list.
16783 	X	but i am strongly against pep.
16784 	X	i agree with g h on the.
16785 	X	the proposed syntax is horrible especially when nested as it will be.
16786 	X	it loses entirely the clarity that is a marvelous attribute of python while adding nothing that cant be done now if a bit more.
16787 	X	but if i believed verbosity was the enemy i would be using perl instead of.
16788 	X	mike prager noaa beaufort nc opinions expressed are personal and not represented.
16789 	X	any use of tradenames does not constitute a noaa.
16790 	X	it depends on your view on whats a bool.
16791 	X	to me its a clear win for practicality but i never felt that its.
16792 	X	i have had this new idea for the last days i want the analog of str vals for.
16793 	X	as roman suzi nicely outlined on python dev python already has many duplication between expressions and.
16794 	X	most of them involve different syntaxes and semantics to.
16795 	X	and there will always be need of adding.
16796 	X	http mail python org pipermail python dev february html.
16797 	X	the question is why do people want to put stements inside an expression.
16798 	X	after all you can always use statements to assign a variable to the proper value and then use it inside the.
16799 	X	i think the main problem is not the number of lines it takes but the in elegancy of creating a variable to be used only once in the following.
16800 	X	when i read an expression i see up front what will be done to the results of every sub.
16801 	X	when i assign a variable there is the doubt that it will be used later.
16802 	X	in other words the order obstructs the.
16803 	X	a nice property of prefix function call notation is that you see what will be done each result before reading how the result is.
16804 	X	and that helps your mind see the.
16805 	X	in many cases the details of the construction are less interesting but until you see the use you are alarmed how will this be used.
16806 	X	allow adding a class like indented block of code to any simple statement with the semantics that the block is evaluated first and the statement is the evaluated with the blocks variables in.
16807 	X	here is how you do a conditional expression morea readably with it.
16808 	X	print complex text about n things where if n things thing else things things print more.
16809 	X	true its not more compact but its more arguably more.
16810 	X	another example of the same problem is the extended def syntax recently discussed on python.
16811 	X	here is how my proposal helps.
16812 	X	foo syncronized staticmethod where def self do something long.
16813 	X	it might be better to name the inner function foo too see below discussion on the scoping rules.
16814 	X	bar property get bar set bar where def get bar self some code def set bar self val other code.
16815 	X	true this means that there are now two way to do any.
16816 	X	but these are always the same two ways.
16817 	X	besides for most cases only one of them will be obvious as the more readable.
16818 	X	the main rule of thumb is that the attached block should no have side effects at least not ones whose order of execution with respect to the statement is important.
16819 	X	most importantly it scales better than all existing shortcuts because it allows arbitrary.
16820 	X	all existing shortcuts break at some.
16821 	X	actually im a bit dismayed to contemplate that if this is adopted many syntax extensions would be rejected because they wont add that much.
16822 	X	dont understand me wrongly this is a strategic solution but for many cases we still need at least should consider tactical solutions that actully make for shorter and clearer.
16823 	X	the above usage of where is the clearest from i managed to find that is based on a.
16824 	X	with for given also sound not.
16825 	X	for has the advantage of not requiring new.
16826 	X	however now looking at the above code the where gets lost at least without syntax highlighting.
16827 	X	so im leaning towards a puctuation based.
16828 	X	the lack of a colon is.
16829 	X	print complex text about n things if n things thing else things things.
16830 	X	a single colon with no other syntax is possible but a very bad idea it would take away this syntax opportunity from all simple statements at.
16831 	X	one problem inherent in the basic approach is the limitation that this only applies to simple.
16832 	X	there is no sesnible place to poot the block in a compund.
16833 	X	i strongly feel that the indeented block should have a separate scope like a class.
16834 	X	the question is what to do with the statement.
16835 	X	i must surely read variables from the.
16836 	X	but it would be quite useless if it would only be able to assign variables at this scope it should assign in the outer scope.
16837 	X	x y where y readable here y y lives here x lives here.
16838 	X	if i make the statement into y y or worse y y complete confusion would.
16839 	X	disallow assigning same variable in the statement and the.
16840 	X	make references to the blocks variables.
16841 	X	i contemplated an unary operator it looks bad because operators never change varible scope in.
16842 	X	perhaps a single dot prefix y y.
16843 	X	i think the first solution will.
16844 	X	beni cherniavsky cben at tx technion ac il.
16845 	X	def macro a return a a.
16846 	X	just noting that if the proposal is accepted we can get rid of those pesky and and or operators.
16847 	X	x and y same as y if x else x x or y same as x if x else y.
16848 	X	removing two things each time a new one is added is an effective way to keep the language small wink.
16849 	X	one need for this sort of conditional expression that doesnt seem to have been addressed in the discussion so far is the number of applications written in python or using python as an extension language which permit python expressions only in many.
16850 	X	the relevant application im most familiar with is zope where both dtml and zope page templates zpt allow python expressions in something like html there is now an alternate implementation of page templates which can be used outside of zope.
16851 	X	if this was only zopes problem i would say that there is no reason to change python just for one.
16852 	X	however i believe that we will find the same expression only restriction in a number of other.
16853 	X	if that is the case then it is better to have one common way to express a conditional expression in all of these contexts instead of a number of application specific partial solutions such as the test function in dtml and.
16854 	X	i find that i frequently need expressions such as.
16855 	X	object and object thing or default.
16856 	X	the worse case which i have required is.
16857 	X	object and object useful and object or default.
16858 	X	id really like a less ugly and confusing way to express this without having to encapsulate it in a separate file.
16859 	X	either of the following would be better.
16860 	X	if object and object useful object else default.
16861 	X	object and object useful then object else default.
16862 	X	personally i prefer the former but would vote for.
16863 	X	if not for this problem which was first brought to my attention by dieter maurer on the zope dev list i would be mildly opposed to any.
16864 	X	seconded listcomps are leading to uncomprehensions.
16865 	X	i would like to see them dropped as a step in the wrong.
16866 	X	the proposed syntax is counterintuitive for me by two reasons.
16867 	X	a control flow in python always involves special.
16868 	X	it should at least have some markup at the start and.
16869 	X	b reading and execution order should match as much as.
16870 	X	i consider the if and the colon in if as valuable markup which is missing very much by the use of lame words inside of the.
16871 	X	admittedly this can be made much more readable by higlighting editors but this should not be made.
16872 	X	remark algol did this by stropping of keywords which made if expressions quite.
16873 	X	but what i really liked many others not so it is as exotic as indentation is the bracketing if.
16874 	X	if then else fi this tries to resemble brackets by using fi as a picture of a closing.
16875 	X	i personally could live with a thing like this since it is symmetric and has good markup even without stropping.
16876 	X	it is as strong as indentation for indentation you dont need to think of any.
16877 	X	nor do you have to with.
16878 	X	anybody know about how forth does it.
16879 	X	the proposal reminded me a litle bit of that.
16880 	X	this is reverse polish notation which is strange by.
16881 	X	but it has one advantage over the peps and the listcomps infix postfix mix you read it from left to right and you know the machine does it exactly the same.
16882 	X	but you need to install a stack in your brain the similarity to the pep is funny just cond and true case appear to be.
16883 	X	i dont propose forth but i find the proposal in the pep as unattractive as.
16884 	X	s maybe im going to make a.
16885 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
16886 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
16887 	X	ive got to file this as a.
16888 	X	print iif myflyunzipped lambda aiee lambda phew.
16889 	X	print iif myflyunzipped l aiee l phew.
16890 	X	for current use proposed if else syntax and a mostly facetious lambda l.
16891 	X	id hereby like to apologize about my.
16892 	X	i swear not to write emails again when im.
16893 	X	no this does not say that i dont write emails any longer.
16894 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
16895 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
16896 	X	yes ive read with interest your analysis thanks for doing.
16897 	X	adding a new builtin for the non short circuiting version would get a from me because it would introduce inconsistencies you have a pseudo conditional operator that works a lot of the time but occasionally bites you if you forget and i already can and do add little utility functions all the time as needed so having python ship it for me doesnt really add any.
16898 	X	in c there are lots of people who never use it but for all we know its because the language they used before c didnt have one.
16899 	X	some data about the debate to date.
16900 	X	on topic pep posts by posters.
16901 	X	posters with posts erik max francis andrew koenig andrew dalke aahz holger krekel james j besemer paul rubin samuele pedroni paul moore carlos ribeiro laura creighton roy smith david eppstein tim peters bengt richter dave brueck michele simionato dale strickland clark paul paterson roman suzi alex martelli christian tismer dan schmidt evan michael hudson dennis lee bieber anders j munch martin maney gerrit holl john roth jp calderone sean ross anthony baxter ian bicking alexander schmolck carel fellinger david gausebeck piet van oostrum raymond hettinger jack diederich jerf at compy dot attbi dot com alan daniels fredrik lundh peter hansen richard jones skip montanaro christos tzotzioy georgiou delaney timothy c timothy donn cave neil hodgson bjorn pettersen chris liechti dan bishop franois.
16902 	X	pinard james p rutledge jamie guinan jeremy fincher john la rooy paul foley william william park.
16903 	X	paul rubin phr nb at nospamnightsong com wrote in message news xisvusbp fsf at ruckus brouhaha com.
16904 	X	yes but this is really a.
16905 	X	to be fair you should argue against the right way of doing this which other than the trivial max for this example is.
16906 	X	if x y result x else result y.
16907 	X	which is more longwinded but saving characters was never really pythons.
16908 	X	i think people are aware of the problem you mention hence the clumsy but correct x y and x or y.
16909 	X	however i hope that either of these two clever methods would never be actually used in production code the real alternative you have to argue against is the one.
16910 	X	i think however that you can still argue against it from a bug reduction standpoint what if the actual result you want is something like.
16911 	X	self long varname i value x if x y else y or self do something with x if x y else y.
16912 	X	what you do with the result is more than a trivial variable.
16913 	X	in this case you have the real issue of duplicated code that you need to check for all paths and keep in.
16914 	X	if something unusual happened self lnog varname i value x else self long varname i value y.
16915 	X	is an error that may not be apparent if something unusual happened is an event that would rarely.
16916 	X	i think im pretty neutral on the idea.
16917 	X	i can see the why people want it but i think the solution is really ugly though nicer than any of the alternative spelling ive seen and ive never really come across a compelling need for.
16918 	X	for anything more complicated than a binary choice my favourate method is dispatching on a dictionary and for simple stuff im not particularly bothered by the more verbose methods we already.
16919 	X	i think id prefer to read ternary operator syntax than and or abuse.
16920 	X	i feel i should point out that in usenet cfvs abstensions carry no weight whatsoever and never affect the voting.
16921 	X	the point is particularly important for usenet cfvs but i think it applies here.
16922 	X	i mean think about it when someone posts a vote for rec pets gardening babylon or some other specialized newsgroup the vast majority of usenet readers simply dont.
16923 	X	you can never measure their numbers but you can rest assured that they will vastly outnumber the piddly numbers of people who vote for the.
16924 	X	so voting abstain in a cfv has no weight whatsoever just like all those thousands of people who didnt care about the group and didnt bother.
16925 	X	theres an analogy with python here although within the python community obviously the ratio of dont cares to cares will probably be much.
16926 	X	my point is you can never measure the dont cares so having a dont care on the ballot seems guaranteed to produce unreliable.
16927 	X	only the dont cares that actually do care about their not caring will vote if you catch my.
16928 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote i always entertain great.
16929 	X	robert frost get your own customized newsfeed online in realtime for free.
16930 	X	quoth erik max francis max at alcyone com it sure doesnt bode well for what were likely to see if one of the proposals is.
16931 	X	its like handing out free spray paint on the street corners to improve the quality of.
16932 	X	while thats a quaint analogy i simply dont buy.
16933 	X	how does giving someone the proper syntax theyre looking for instead of obscure and incorrect one promote bad code.
16934 	X	true perl enthusiasts have been making that point for.
16935 	X	and people love perl theyre obviously getting what they want its like they voted on features or.
16936 	X	donn cave donn at u washington edu.
16937 	X	terry hancock hancock at anansispaceworks com wrote in message news at newsread prod itd earthlink net.
16938 	X	that applies equally to many of the constructs already in.
16939 	X	it reads too much like p rls trailing if.
16940 	X	it makes it more awkward to convert a statement if else to an expression if else and vice.
16941 	X	see my response to the next.
16942 	X	but if they have to look it up then by your own definition doesnt this make when unintuitive.
16943 	X	if cond a b were introduced then most c c java c programmers wouldnt have to look it.
16944 	X	if if cond a else analogy to the statement form of if.
16945 	X	also have you ever noticed that all selection functions in other languages or spreadsheets or cass use the same order.
16946 	X	the a cond b order is familiar to no.
16947 	X	wait shouldnt that be interpreted as d a when c else b.
16948 	X	so instead of writing the symbol based x we should write multiply x by.
16949 	X	only if you want to converge the two syntaxes which is in my opinion.
16950 	X	you could just maintain that the conditional operator as a standalone statement is illegal if thats what you really meant then you write.
16951 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote she glanced at her watch it was.
16952 	X	james clavell bosskey net quake iii arena http www bosskey net qa a personal guide to quake iii.
16953 	X	would leave the parser having to look ahead of what this.
16954 	X	samuele pedroni pedronis at bluewin ch writes.
16955 	X	algol made the same distinction yet allowed if else in arithmetic expressions similar to this.
16956 	X	are you saying this was a shortcoming in algol.
16957 	X	i never thought of it as.
16958 	X	ive written some algol code though not an enormous amount.
16959 	X	except that the innermost part of the nested loop which would be at the very end in a regular for loop is at the very.
16960 	X	if that has never bothered you good for.
16961 	X	for me that was the one part of python that wasnt immediately.
16962 	X	people have been implying throughout the pep debate that mixing up the evaluation order is fine because of the analogy with list.
16963 	X	i accept the analogy but draw the opposite conclusion from.
16964 	X	pop quiz what is the value of this alternate universe list comprehension expression.
16965 	X	but this case in real code comes up very rarely perhaps in lines of code based on my analysis and who is going to look at something which looks like a function call and assume that it has anything other than function call semantics.
16966 	X	besides the fact i havent thought about the quadriatic equation in years this was very easy to read and.
16967 	X	i use this pattern all the time.
16968 	X	if x val y else val z.
16969 	X	val y if x else z would often be better especially because z is none many times or otherwise some trivial.
16970 	X	often i dont need a temporary variable at all and did not have one until i started working out various corner.
16971 	X	i look at your current code.
16972 	X	and it does not look nice to.
16973 	X	why do you need the root type variable.
16974 	X	its meaning can be easily inferred from the print statement much more easily than from the variable name and it likely serves no purpose after that portion of.
16975 	X	but reading the code you dont know it doesnt serve a purpose you dont know that you can forget about.
16976 	X	you have to hold this variable mapping in your head while you read the rest of the code in that.
16977 	X	each time i look over the alternate code fragments it makes it more clear that the inline if statement can create much more readable.
16978 	X	i think it is only fair to give python programmers the option to make their code more readable and trust them not to also use it to make the code less.
16979 	X	not trusting the programmer is what c and wirths languages do that isnt the python.
16980 	X	there are lots of python features that can be.
16981 	X	people think there arent because python programmers dont abuse.
16982 	X	i dont think we should overly exult pythons.
16983 	X	i dont think people will do.
16984 	X	reading nested inline if statements just from the examples people have given is not.
16985 	X	i dont think writing them would be easy.
16986 	X	but i can imagine it happening during maintenance when a test may be put in with an inline if because it means modifying the code.
16987 	X	sometimes people do crazy things in c but most c code doesnt overuse.
16988 	X	i dont think people will make the connection it doesnt look very much like the c.
16989 	X	but maybe thats not a good argument.
16990 	X	ian bicking ianb at colorstudy com http colorstudy com n talman chicago il there is no flag large enough to cover the shame of killing innocent people howard zinn.
16991 	X	duncan booth duncan at rcp co uk int month char p return p p p xf x xb x xa who said my code was obscure.
16992 	X	gerrit holl gerrit at nl linux org wrote in news.
16993 	X	seq actions cmp x cmp y return seq.
16994 	X	alan p s i still dont see whats wrong with good ol cond.
16995 	X	i still dont see the advantage over good ol if cond x else y.
16996 	X	andrew koenig ark at research att com http www research att com info ark.
16997 	X	im growing to really like this.
16998 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
16999 	X	perhaps but maybe the fact that it is non zero is what troubles.
17000 	X	python has short circuiting logical operators and i use them in cases where that matters and when it doesnt and i used cs conditional operator in cases where short circuiting mattered and when it didnt so its likely that i would intend to use it in python the same way but the builtin function way would be a half way solution so id probably steer clear from it altogether just to be.
17001 	X	well to me this feels like a trap because you are already fully aware of when some people consider it useful and expressive but in your opinion its still not worth.
17002 	X	my view obviously differs even though like you ive been programming in python a long while i still miss having it and i know that in some of those cases in which i had it they would require short circuiting.
17003 	X	i do not disagree that in many uses of the conditional operator short circuiting would not.
17004 	X	but the cases in which it does matter are some of the most useful to.
17005 	X	furthermore setting short circuiting aside calling a separate function to make the binary choice just seems wrong unpythonic and kinda like having to call if for normal if statements it just feels like a lot of extra work to express a very simple thought so much so that id probably handle it i do now grumble quietly about how i wish we had a conditional operator and then code it up in a way that doesnt quite capture what i mean but is good.
17006 	X	i am in favor of the pep because of both the short circuiting and code readability it expresses exactly the thought im really trying to convey in those instances that i use it whereas.
17007 	X	the access a member of a variable if not none idiom seems to be the one i encounter most often e g.
17008 	X	z x foo if x else.
17009 	X	but even when i know a variable isnt none i also see similar variants with data transmission loading.
17010 	X	z x size if x loaded or.
17011 	X	as mentioned elsewhere this form is a way of expressing intended or preferred or normal execution it really expresses the conditional nature its a conditional assignment in this.
17012 	X	one other case i encounter less often deals with recalculation of cached values although depending on the specific context recalculation may occur invisibly to the.
17013 	X	in cases where its not then the check is against some cache freshnes.
17014 	X	the same holds true for expiring content.
17015 	X	resp x data if x isfresh else getstaleresponse.
17016 	X	i am fully aware that any of these can be rewritten to another way thats not the.
17017 	X	for me personally its a matter of the most clear and direct way to accomplish what im trying to do other approaches feel like the language is getting in the.
17018 	X	in addition to the short circuit required type of uses there are many more in which its just really clear and convenient for me to have such a construct but having to tread lightly and use it only when short circuiting is definitely not required would be enough of an annoyance to not bother with a conditional function at.
17019 	X	to counter the numbers i found which suggest that a true.
17020 	X	i believe too much is concluded from these stats i agree that it would be great to have some real numbers but can we really infer what people would have done if a different construct were available especially when it is a matter of preference or experience.
17021 	X	did you also include the use case i listed above assign then check then assign again yeah its not short circuiting but is often a potential use of conditional operators.
17022 	X	even though its known to someone in c doesnt necessarily mean they would give it an honest try either its common around here to kindly encourage people to think pythonically so maybe people who didnt use it in c were still thinking in their previous.
17023 	X	if adding a keyword is an option then i.
17024 	X	i dont claim that my idea is new or anything tm like.
17025 	X	it just reflects my viewpoint on the whole minor feature issue and is certainly just a recap combination of previous.
17026 	X	but i suspect it doesnt matter much which route i or almost anyone else for that matter likes to go.
17027 	X	thats good news as wasnt the middle form his first choice in the original pep.
17028 	X	i myself likely would have voted against the pep in that.
17029 	X	jb james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
17030 	X	heh and today i also like it much less than yesterday after some.
17031 	X	maybe reading too much of this list and staring too long at certain things makes them appear more pythonic than they deserve.
17032 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
17033 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
17034 	X	am this is the first syntax ive seen proposed for this that i like.
17035 	X	am i particularly like the generalization to an int on the lhs of the am new proposed.
17036 	X	however i am slightly troubled by the am subtly different syntax for the two alternatives vs n alternatives am.
17037 	X	whatever kind of parentheses are used couldnt the am number of alternatives listed inside the parentheses be the ones am that control whether the lhs is taken as int or condition.
17038 	X	or am would that be unpythonic.
17039 	X	i dont feel very certain about.
17040 	X	this would cause a subtle problem which by the way is now also present if someone confuses the parentheses.
17041 	X	if b is a variable that takes only and as values then.
17042 	X	b x y is the same as b y x.
17043 	X	because with boolean conditionals people are used to have the true clause.
17044 	X	piet van oostrum piet at cs uu nl private email p van oostrum at hccnet nl.
17045 	X	all i hear you saying is i vote.
17046 	X	by no means do i mean to suggest that its not appropriate for you to vote no nor for you to publicly state that you intend to vote no but it seems a little like disinformation to start a new thread suggesting that the pep has failed when all you really meant to say is that you intend to vote against.
17047 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote i always entertain great.
17048 	X	robert frost get your own customized newsfeed online in realtime for free.
17049 	X	use a comma to join these lines.
17050 	X	still confusing but i understand the reasons.
17051 	X	and in general obj func arg is use this object to do this function to these.
17052 	X	not so long ago i added a similar feature in an ad hoc language we created for one project french and specialised syntax and written under pressure.
17053 	X	strangely enough it did not occur to me before this morning that there was some relation with this long thread in the python.
17054 	X	if i translate the keywords of our syntax back to english it gives.
17055 	X	with a chainable property not requiring parentheses.
17056 	X	a when b else c when d else.
17057 	X	our language is declarative tinily functional rather than.
17058 	X	yet the above writings are not far from the original guido.
17059 	X	i know im merely throwing yet another idea is this already overlong thread which i did not even attempt to read.
17060 	X	ive no intention whatsoever of pushing or defending.
17061 	X	my opinion on pep is that whatever is done or not done the key to the final decision should be the continued legibility of the python language much more than the tiny bit of added.
17062 	X	it just happens that for our little language not python the above is received as quite natural and legible by the non programmers in the project they used that language heavily for providing that knowledge base the project.
17063 	X	franois pinard http www iro umontreal ca pinard.
17064 	X	please note my copyright on this.
17065 	X	im in favor of any of the two.
17066 	X	better than all i saw so.
17067 	X	pythonic and small then vote else forget chris christian tismer mailto tismer at tismer com mission impossible oftware have a break.
17068 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
17069 	X	some of us said adding new features was going to cause this.
17070 	X	i dont see the need and i dont want python to support every feature that some people.
17071 	X	i want learning python to be a nice slim book that doesnt scare people away with oh but there is so much to learn before they try.
17072 	X	and i would rather not read realms of c or c written in python in my.
17073 	X	maybe theyll learn about dictionary dispatching or some other more interesting technique while they are at.
17074 	X	ah some of us have thought that about bengt for a long time without any font help to guide us.
17075 	X	when we want a general solution we know whom to ask laura.
17076 	X	paul rubin http phr cx at nospam invalid writes.
17077 	X	holger krekel pyth at devel trillke net writes inspired by do the simplest thing that can possibly work i now think that x and y else z might just do it and avoid the need for a new.
17078 	X	its a very minor change just for fixing the problem at.
17079 	X	it should be obvious what it.
17080 	X	i find it very confusing and dont think id ever get used to.
17081 	X	but at least i dont think id be tempted to rewrite other peoples code to get rid of it as i am with the and or.
17082 	X	i dont think i will ever fully get used to and were of type.
17083 	X	it just doesnt read naturally to.
17084 	X	i really dislike that type of cutesy ness that is sometimes found in python the string operator is another example.
17085 	X	i dont have an issue with it probably because is a funny enough character that i dont immediately think of mod when i see it and kinda makes sense because it is specifying the values of the expressions in the.
17086 	X	im starting to really like this.
17087 	X	basically its just interpreting the if else statement slightly differently when used in an expression context returning the value of the.
17088 	X	it gets its short circuiting from the normal semantics of the if.
17089 	X	short circuited expressions follow just like short cirtuited statements.
17090 	X	think of it this way if is the embodiment of two option short.
17091 	X	this would generalize nicely to switch case if that construct ever makes it into.
17092 	X	i still think the current faq should show an alternative that is readable and doesnt need.
17093 	X	def ifelse x return x ifelse c and a or b.
17094 	X	my analysis suggests that this will on average make code about.
17095 	X	this was based on analyzing the number of time is used in a large c codebase which was written by programmers of moderate experience and counting the times it was used appropriately for c appropriately if it was python and inappropriately for either language.
17096 	X	it was used inappropriately more than it was used.
17097 	X	andrew koenig suggests a higher use rate but that was based on c code so no objects which mitigate a few of the problems written by an expert.
17098 	X	his rate was lines of which i think a few were debateable and a few more unneeded in.
17099 	X	apply a scaling factor and assume its used once per lines of python code and that each use saves.
17100 	X	then the code is on average.
17101 	X	in addition it was rare to have more than one use of in the same code block and in at least one of those cases the code should have been written with a loop turning lines into or.
17102 	X	so while you may expect it to be useful for those cases in normal practice it does not turn out to be the.
17103 	X	so this cannot be reverted at all.
17104 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
17105 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
17106 	X	paul rubin http phr cx at nospam invalid wrote in message.
17107 	X	i find andrews statistics to be useful and.
17108 	X	they are my only hesitation about favoring x c a b over iif c a b.
17109 	X	the c ternary operator is quite easy to.
17110 	X	im not sure the colon is the best character to separate two alerternative answers but thats the way it.
17111 	X	in english it looks like this.
17112 	X	will you come to my place.
17113 	X	bouncy bouncy or no bouncy bouncy.
17114 	X	terry hancock hancock at anansispaceworks com wrote in message news jx at newsread prod itd earthlink not.
17115 	X	erik max francis max at alcyone com wrote in message news.
17116 	X	i am not sure but what i would rather stick with and or when safe rather then reverse order of conds and.
17117 	X	id like it tobe a completely normal built in.
17118 	X	that allows inline use for cases where short circuit evaluation isnt.
17119 	X	those cases that need to short circuit use explicit.
17120 	X	any job openings where you work.
17121 	X	are you suggesting that the community vote on all combinations.
17122 	X	carl banks imbosol at aerojockey com wrote in message news.
17123 	X	at tornadotest news pas earthlink net.
17124 	X	same reason that guido finally broke down and added booleans standardized spellings are worth a.
17125 	X	aahz aahz at pythoncraft com http www pythoncraft com.
17126 	X	register for pycon now http www python org pycon reg html.
17127 	X	its both humorous and serious we had a full blown wedding but we neglected to inform the.
17128 	X	aahz aahz at pythoncraft com http www pythoncraft com.
17129 	X	register for pycon now http www python org pycon reg html.
17130 	X	its just not very obvious how to do it is it.
17131 	X	guido van rossum guido at python org wrote in message news.
17132 	X	btw this method of deciding is somewhat unfair in the sense that people who have something to whine about will be the most vocal and most likely to vote or write a long winded rant advocating some other syntax and that gets counted as and we will never see this feature.
17133 	X	perhaps a second vote strictly should be.
17134 	X	err do you mean x or y if c or y or x if c.
17135 	X	when you first suggested it yes its in my list of unseconded proposals you had it the other way round mind the wrap.
17136 	X	this suffers exactly the same drawbacks as the c and x else y proposition as well as foisting a completely different order of evaluation than any other as far as i can see.
17137 	X	x if c else y was mainly contentious because it was not left to right or right to left this is similar neither your original proposal seemed to be suggesting the right to left form.
17138 	X	is every permutation of the ordering going to be tride in one or another of the proposals.
17139 	X	so far weve seen at least half of.
17140 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote do not seek.
17141 	X	dag hammarskjold esperanto reference http www alcyone com max lang esperanto an esperanto reference for english.
17142 	X	the and or hack is just that a hack that takes advantage of the semantics of pythons logical.
17143 	X	we all know that its also a broken hack in that it doesnt work for some values of its operands but even if it did work it is still highly idiomatic upon encountering it its quite.
17144 	X	to this day i only recognize it because its been discussed to death in these conditional expression threads otherwise it would still be as unreadable to me today as the first time i saw it mentioned after which i immediately forgot it.
17145 	X	the goal here is to get a true conditional operator that inherently means one with short circuiting that is at least somewhat readable and.
17146 	X	contrary to what a lot of anti pep people have been spouting the pro pep people i will wager i cannot speak for all of them are not after a conditional operator no matter what.
17147 	X	theyre after a conditional operator thats readable and theyre sure that something will fit that.
17148 	X	building on the highly idiomatic and or form is a fundamentally flawed approach since youre starting from unreadable and broken idiom and trying to correct that brokenness rather than addressing the fact that what youll come up with whether its c and x else y or c and x else y is still.
17149 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote i always entertain great.
17150 	X	robert frost a personal guide to online multiplayer first person.
17151 	X	cant we just assume that as youve joined in this debate youd have a pretty good idea what was meant by the construct should you ever stumble over it in someones code.
17152 	X	dale strickland clark riverhall systems ltd.
17153 	X	paul you know if the inspiration for this syntax condition in the paul middle is list comprehensions maybe the thing can be improved paul by requiring parentheses around the expression.
17154 	X	paul x if is special x else y.
17155 	X	paul for some reason i find that clearer than the same thing without paul the.
17156 	X	i thought of that too but would hate to have to explain that the compiler rejected.
17157 	X	f x if is special x else y.
17158 	X	f x if is special x else y.
17159 	X	andrew koenig ark at research att com http www research att com info ark.
17160 	X	no that is only the people who dont care enough to.
17161 	X	it is a problem with voting and the self selected set and an insoluable one unless you have a mechanism for forcing people to.
17162 	X	it has got to reflect reality better than simply assuming that those who do not care do not matter or that those who wish to participate in the political process must be forced to take sides or that abstainers fall neatly into pro anti.
17163 	X	it also means that the entire political process is not subordinate to the job of picking winners and losers it actually represents an attempt however flawed to find out what people.
17164 	X	you alienate members of your society when you hold a vote and give them no way to express their.
17165 	X	i think that this is evil and moreover it makes it really hard to get them to show up again should you ever decide to have another.
17166 	X	im voting one referendum is already more than we needed laura.
17167 	X	i was about to say that hell now have to keep his cheerio covered proposals away from adam thornton but then i realised that this isnt rec arts int fiction so nobody would know what i was talking.
17168 	X	greg ewing computer science dept university of canterbury christchurch new zealand http www cosc canterbury ac nz greg.
17169 	X	and see whether thats any less weird to them than.
17170 	X	gareth mccaughan gareth mccaughan at pobox com sig under construc.
17171 	X	you can simplify a bit more with.
17172 	X	def iif condition true false return true false not condition.
17173 	X	its not even that much more typing then some proposals still in play as.
17174 	X	my thinking is that while im fairly firmly against the special case idea of a ternary operator i might accept something more generally useful that happens to be able to spell.
17175 	X	however i keep coming back to the fact that weve already got it lambdas can be used to defer execution right there inline in the.
17176 	X	while its not impossible that some other equivalently generally useful thing might come up and im more likely to at least the two ive seen integer false true and some kind of c condition function with the representing the fact they both have problems which if fixed would turn them into i havent got any thoughts that arent fully redundent to what we already have in the form of.
17177 	X	if its the typing that bothers you float a pep to make l an alias for lambda.
17178 	X	or better yet use an editor that lets you bind several keystrokes to one keypress and tie lambda to a.
17179 	X	creating a ternary operator seems like a step back to me one more thing to learn and while it may seem simple in isolation all language features interact multiplicatively.
17180 	X	while not giving any new power or expressiveness that doesnt already exist this whole debate strikes me as an incredibly long discussion on how to shorten which is an awfully steep price to pay just to save a few.
17181 	X	as is demonstrated in practice theres an awful lot of cases where and or is always ok because the second parameter is always guarenteed.
17182 	X	while im not willing to go out on a limb and claim this is representative because obvious cases where it wasnt sufficient dont show up somebody did have an example somewhere in the standard library for pluralizing something in a unit test and arent counted it does show the need for a full fledged is not that.
17183 	X	for what its worth one votes worth i suppose i find a if cond else b highly readable but somehow id prefer cond to come first but if cond a else b seems to have too much punctuation for an.
17184 	X	i think cond then a else b is probably unwise for the reasons you gave.
17185 	X	but im still keeping an open mind on.
17186 	X	and might i add the persistent use of things like cond and a or b in actual production python code pretty much proves to me that the existing language features are not.
17187 	X	i personally write functions all the time which take functions as.
17188 	X	i dont find the either useful myself but i can understand why you prefer.
17189 	X	ill have to mull that one.
17190 	X	yknow colons already can appear in.
17191 	X	its not for the if c portion the alternative of which is to add an extra keyword like then which already has huge inertia pushing against.
17192 	X	reads left to right requires no new keywords or punctuation is unambiguous and is totally analogous to the else statement and thus is crystal.
17193 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote she glanced at her watch it was.
17194 	X	james clavell bosskey net quake iii arena http www bosskey net qa a personal guide to quake iii.
17195 	X	paul rubin phr nb at nospamnightsong com writes.
17196 	X	only if get arg is badly named ie it isnt obvious what it does from the context and the function name.
17197 	X	im not saying that badly named functions dont exist heck im not good at picking names for things but im sick of people pointing at examples which use badly named or out of context functions and use that as a justification for putting the code.
17198 	X	you are aware of the concept of encapsulation i.
17199 	X	so lets remove function definitions from the.
17200 	X	write all code inline it simplifies your code you just said so.
17201 	X	any function that simply encapsulates a conditional expression can probably be documented by simply choosing an appropriate.
17202 	X	so you dont need to look for the.
17203 	X	thanks again for pointing out the type of situation where i expect conditional expressions to be most.
17204 	X	i find it amazing that many people dont regard long blocks of code as a problem as for myself i get lost with blocks that dont fit on the.
17205 	X	one can easily divide conditional statements in any given program in two.
17206 	X	the first one is the core logic of the program other conditions are auxiliary as they are helpers or workarounds for exceptional situations that dont have anything to do with the core.
17207 	X	too many auxiliary conditions and code starts to get unneededly.
17208 	X	one of the solutions is to move auxiliary logic to functions but then it would require the programmer to look up a function that may be used only once in the entire program a conditional expression makes this type of code much much.
17209 	X	carlos ribeiro cribeiro at mail inet com br.
17210 	X	holger krekel pyth at devel trillke net writes.
17211 	X	im in the and else camp now despite having come out for then else.
17212 	X	include stdio h sigmask sig c public domain compile me int main cv char v return cputchar v main v tweaks.
17213 	X	obwaqbusjpu ofu v build cc o sig sig c.
17214 	X	sean ross sross at connectmail carleton ca writes.
17215 	X	mostly i just wanted to avoid a specific edge case someone mention much earlier in the thread if x if c else y do which just seemed.
17216 	X	but then if x when c else y do is only marginally less.
17217 	X	and of course if if c then x else y do is worse than.
17218 	X	but of those listed i find the when variant to be the least.
17219 	X	actually this is the one case the expressions were boolean where i would use.
17220 	X	if c and x or y do.
17221 	X	even if there were a ternary operator because that to me is the actual logic behind the.
17222 	X	i do hate c and x or y when x and y are not boolean expressions.
17223 	X	but if i were going to do it with a ternary operator id just parenthesize.
17224 	X	people parenthesize for clarity all the.
17225 	X	i dont see any reason to assume that they wouldnt do it in this case.
17226 	X	why do people keep proposing cryptic punctuation based syntax for this.
17227 	X	using punctuation instead of words makes the meaning non obvious especially to new programmers who have not used c c java and so it seems unlikely that the bdfl will ever accept.
17228 	X	such proposals clutter the discussion without making progress towards getting a ternary included in the.
17229 	X	david eppstein uc irvine of information computer science eppstein at ics uci edu http www ics uci edu eppstein.
17230 	X	erik max francis max at alcyone com wrote in message news.
17231 	X	that your proposition c and x else y decays to a simple and expression in the case where the else portion is left off is not in and of itself a selling.
17232 	X	itd be a nice added bonus if you already liked the syntax but if one already finds it distasteful which i see several people in additon to myself do this added benefit really adds no.
17233 	X	the problem is that the and else trick is really not anymore idiomatic or readable than the and or trick acknowledging of course that the and else trick will actually work when x is false.
17234 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote you cannot step into the same river.
17235 	X	cratylus python chess module http www alcyone com pyos chess a chess game adjudicator in.
17236 	X	the order of evaluation of this is middle then left or.
17237 	X	also i keep misreading a if b else c as on this specific.
17238 	X	pep if condition expression else expression pep is even more confusing because it resembles the if statement so pep.
17239 	X	ah but i have a fix in store for that from the last time this was discussed require parens around the.
17240 	X	and replace expression list with if expr list in parenth form and perhaps also in string conversion and subscription but not in assignment stmt return stmt yield stmt.
17241 	X	thus x if a b else c legal x if a b else c d perhaps legal or perhaps you need x if a b else c d legal print if a b else c perhaps legal f if a b else c d legal d is the second argument to f x if a b else c illegal if if a b else c very illegal if if a b else c legal.
17242 	X	i think requiring parens like this would be a good idea with all syntaxes lest we want to see if a if b if c else d else e.
17243 	X	erik in my opinion the key issue about the benefit of a conditional erik operator is about making code more.
17244 	X	if i see erik s count i certainly have to sit and think about it a erik little bit its hardly a crystal clear.
17245 	X	erik s count is a tiny bit better since its a erik slightly more recognized idiom and ive certainly used it on erik occasion but its still not immediately.
17246 	X	in this particular case i think true s false count is even easier to understand but id still prefer s if count else.
17247 	X	andrew koenig ark at research att com http www research att com info ark.
17248 	X	in article e ab at alcyone com.
17249 	X	what was implicit in mentioning frequency i think is that the actual metric is frequency times.
17250 	X	metaclasses are very very powerful so even a low frequency gives them many feature points.
17251 	X	also metaclasses came essentially for free with new style classes which have many other reasons for.
17252 	X	conditional expressions dont have much power so they need a high useful frequency to warrant changing the.
17253 	X	compare for example the high frequency with which booleans will permeate the codebase now that they.
17254 	X	aahz aahz at pythoncraft com http www pythoncraft com.
17255 	X	register for pycon now http www python org pycon reg html.
17256 	X	i like the ifelse like this print count test s count ifelse s.
17257 	X	and for the need to be lazy x ifelse lambda funct x lambda too many.
17258 	X	i dont see a problem with asking for lazy where you need it if we have the way to spell.
17259 	X	scott david daniels scott daniels at acm org.
17260 	X	and by expressing yours often enough it will outweight.
17261 	X	i have no idea of assembly language what is it.
17262 	X	python is the only language i know so.
17263 	X	you must know im very new to.
17264 	X	please tell me how to become a.
17265 	X	please look at your statement from above it says if something is an expression then it uses keywords.
17266 	X	my perception is that much more people are not to dumb to get accustomed to that but simply dont like the extra syntax different from almost all conditional expressions in other languages for a very small to almost void gain in expressive.
17267 	X	if we were talking about a strong concept like generators or new style classes it would be worth.
17268 	X	but this huge discussion about peanuts is so ridiculous that i tried to make it even more ridiculous unfortunately with low success.
17269 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
17270 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
17271 	X	theres no ambiguity in what was.
17272 	X	that corner case is merely a syntax error just as it is.
17273 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote there i was there i was splitting atoms with my desire lamya computer science http www alcyone com max reference compsci a computer science.
17274 	X	i was actually thinking about this yesterday but with pipes.
17275 	X	new traditional foo labmda foo xfoo lambda x foo.
17276 	X	imo this make lambdas more readable and list comprehensions could die map and filters using lambdas would be more readable and even shorter than list comps in plain situations.
17277 	X	l x guy for x in blah l map xx guy blah.
17278 	X	l x guy for x in blah if x guy l map xx guy filter xx guy blah.
17279 	X	and now for something completely different.
17280 	X	unambiguous although im not sure that the current parser can distinguish it from a function.
17281 	X	the condition isnt between the expressions which looks strange to.
17282 	X	it can be chained for as many conditions as.
17283 	X	i just rediscovered it or reapplied it i.
17284 	X	but participating in these pep discussions was is kind of brain washing for good and for bad and thus i wasnt too sure of anything anymore.
17285 	X	there are quite some other strategies and who knows what comes.
17286 	X	i guess its all just a practice to show what would happen were we to design a language by.
17287 	X	we would definitely win any newsgroup traffic rating for some month after which we would split etc.
17288 	X	i really think that the discussions kept a pretty good level so far although not in the eyes of the gods.
17289 	X	but wait until we have to decide on the voting procedure which poses an almost impossible to resolve bootstrapping problem.
17290 	X	at tornadotest news pas earthlink net.
17291 	X	you too are getting the concept all wrong try.
17292 	X	import math x iif x math sqrt x.
17293 	X	how many people are left out there who are still going to think this up.
17294 	X	this is an editorial comment about the peps rejection of not an argument one way or another about its.
17295 	X	raymond hettinger proposed a variant that removes the arbitrariness of and.
17296 	X	the and are not arbitrary as they strongly suggest testing and.
17297 	X	although suggests testing and surely this is why is used here in c syntax i do not feel that suggests alternation except to readers familiar with c and its.
17298 	X	to readers without prior exposure to such languages c t f is imho as mysterious as c t f or c t.
17299 	X	f or c t tiger f.
17300 	X	since weirdness except for c programmers is given earlier in the pep as one reason to reject.
17301 	X	it would be imho more consistent to make the same comment for.
17302 	X	as far as i can see the only things that suggest alternation in python are or and else whence the current idiom and certain existing.
17303 	X	steven taschuk aral confusion to the enemy.
17304 	X	staschuk at telusplanet net mark turn about is fair play.
17305 	X	steven taschuk i may be wrong but im.
17306 	X	staschuk at telusplanet net friday robert a heinlein.
17307 	X	but that doesnt mean that it reads right my intention was to say.
17308 	X	i want my lines joined using commas as delimiters.
17309 	X	comma please join these lines for.
17310 	X	btw this particular discussion is already a few years old and theres nothing that can be done about it and i found myself using it lately so it may be the right way to say it after.
17311 	X	carlos ribeiro cribeiro at mail inet com br.
17312 	X	or getting it but finding it so unintuitive that we avoid it as much as possible at least thats the category i fall.
17313 	X	barely tolerable and just barely but to be honest i dont really see it in code much if at all especially compared to the simple.
17314 	X	which is far more common and anything more complex than a simple a and b is just.
17315 	X	the x a or b doesnt cause me any problems because the context in which ive seen it used is usually ensuring that some variable has a valid value if whats expected doesnt happen e g.
17316 	X	where getname is a method used in several places that returns none if the name has not yet been set.
17317 	X	its a small mental leap from or as a purely logical operator to or in this context as a selection operator both behaviors have rather strong.
17318 	X	but with and its different at least to me.
17319 	X	in my mind it has nothing to do with choosing between two things so theres no reason for and to equal even though in python it.
17320 	X	to me and is very well defined in logical operators natural language and even sets to mean logical conjunction or intersection how can the result of any of those be one of the original components of the expression.
17321 	X	i struggle to see the parallel for it.
17322 	X	joe im giving you a million dollars and one dollar.
17323 	X	job gives bob one dollar joe python.
17324 	X	technically yes but often only because non truth expressions are implicitly converted to logical.
17325 	X	despite if its bad practice to assume non none is true people will always write.
17326 	X	not quite given the feeling that the base expression is unintelligible expanding upon it yields something even.
17327 	X	yes i certainly understand the reverse position if and as a selection operator was intuitive to me then building on it would be elegant and have little negative impact and a and b else c would probably be my choice.
17328 	X	unfortunately for me that is not the case but i do understand where youre coming.
17329 	X	code for business related stuff tend to be much longer than pure programming i hope youll understand what i mean.
17330 	X	stuff such as data validation filtering and reporting tend to generate very long blocks of code in some cases the amount of small choices that you have to handle is enough to make the function grow to the point where the structure becomes.
17331 	X	decomposing things is fine in many cases but for stuff that is rarely reused such as filtering conditions it just makes things.
17332 	X	carlos ribeiro cribeiro at mail inet com br.
17333 	X	and then or else already keywords simular to cond and exp or exp easy redable simular to if cond then exp else exp easy readable.
17334 	X	may i remind you guys that this proposal stems from the timbot himself.
17335 	X	it is therefore pythonic by definition.
17336 	X	feel free to dislike it and use the string module chris christian tismer mailto tismer at tismer com mission impossible oftware have a break.
17337 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
17338 	X	erik max francis max at alcyone com wrote in message news ecf aff at alcyone com.
17339 	X	even though ive proposed it im not entirely happy with the combination of a character and keyword myself but i figured it was an idea worth mentioning even if just to see what anyone might.
17340 	X	for what its worth heres what i want to see in a ternary operator.
17341 	X	is readable and obvious for people both with and without backgrounds in c gets the cond part of it first just like in pythons current use of the if doesnt break the meaning of any existing.
17342 	X	i havent seen any proposal so far that meets these criteria of.
17343 	X	id also be tempted to add does not add any new keywords or operators even though my own proposal fails.
17344 	X	but i see this as mildly desirable but not strictly.
17345 	X	i dont like the result if cond x else y because ultimately it implies that any and all if code blocks in python code will have to be expressions for the sake of.
17346 	X	this is big language change and not ones thats justified for the sake of adding a new.
17347 	X	i even sat down and read the.
17348 	X	like everyone else in this thread im stating my opinion on the proposed.
17349 	X	i thought that would go without.
17350 	X	whether this gets added to the language or not id rather leave to your instincts as a language designer youve been doing fine sofar then to what ever gets the majority in what ever way of votes this time.
17351 	X	so please dont give us voting power.
17352 	X	the proposal as is looks reasonable to me it would clean up those few uses of a and b or c that i have in my.
17353 	X	michele simionato mis at pitt edu ha scritto nel messaggio news.
17354 	X	half joking i could vote no just because i had to suffer the debate wink and if it goes longer.
17355 	X	many on the pro camp are crystallizing toward the proposal they like i would vote no just to avoid the risk of some of.
17356 	X	and btw we are essentially not discussing new.
17357 	X	actually that can be done right now as.
17358 	X	i happen not to like it for some cases since.
17359 	X	q obj f q ah ha.
17360 	X	i still have a reference to the list through q assert obj x is q.
17361 	X	if x is none x self x x.
17362 	X	self x x if x is not none else.
17363 	X	i hadnt thought of c but i wonder if youre really.
17364 	X	i learned to make such things fairly readable even when complex with appropriat indentation.
17365 	X	it looks more readable in real code than it does above although dont get me wrong im not saying its really readable just not.
17366 	X	so my question is does the new construct lend itself to such formatting always assuming you surround the mess with parentheses to let it spread across multiple lines nicely.
17367 	X	just curious whether the strange inversion of expr condt condf to condt expr condf actually works against this type of readability assist.
17368 	X	no offense but your proposal is frightening more and more as you expound on it.
17369 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote there i was there i was splitting atoms with my desire lamya computer science http www alcyone com max reference compsci a computer science.
17370 	X	on python dev we have the following exchange.
17371 	X	so aahz is going to give us a couple of days to stew and think things over now that the active discussion is beginning to die down before he starts the.
17372 	X	meanwhile erik provides us with the following list great work.
17373 	X	note that i have re numbered to give each proposal a unique number.
17374 	X	when aahz gets back hes going to have to conduct some kind of a vote and the above is obviously way too many.
17375 	X	so i am volunteering to help aahz out by making it easier for him to tell what are the important syntaxes which belong on the.
17376 	X	i will collect seconds just write to me letting me know which of the syntaxes you believe are important enough that they belong on the ballot.
17377 	X	ill keep a count and let aahz know the.
17378 	X	theres no sense stuffing the ballot box i dont even know if aahz will pay any attention to the.
17379 	X	but it seemed like he might find this helpful if i summarize it all for.
17380 	X	so if youre not sure dont care object to all proposals or are getting sick of this just ignore this the real vote will come.
17381 	X	if you do want to chime in email me at the following address.
17382 	X	and include the text pep in your subject.
17383 	X	in the body of your message simply list the numbers from the list above to indicate which of the proposals off eriks list you believe ought to be on the.
17384 	X	for instance you might simply write to indicate that guidos original proposal and c syntax are the only forms you think we should.
17385 	X	you may also add any additional comments you.
17386 	X	results will be sent to aahz this weekend or whenever he requests.
17387 	X	okay now i better go ask for an increase in my mailbox diskspace lly.
17388 	X	y sqrt z if z else for z in x.
17389 	X	i think the second version is much easier to.
17390 	X	it is a lot easier to write it without making a.
17391 	X	id guess it will turn out faster.
17392 	X	this did raise the question in my mind about if i could just put y sqrt z if z else for z in x.
17393 	X	i dont remember the precedence of the for.
17394 	X	it would be good if this is.
17395 	X	suppose x is a sequence of.
17396 	X	y len x for i in range len x if x i y i sqrt x i.
17397 	X	erik max francis max at alcyone com wrote in message news eafab ccdb at alcyone.
17398 	X	using your definitions its not ambiguous but it can be misleading since in all other forms i recall seeing c is the conditional test to select the normal or primary.
17399 	X	hence a quick reading of y or x if c might lead you to believe that x is intended to be the normal.
17400 	X	something with subject line subject re pep preference for x if c else y over c then x else y the way i first read it i thought you were proposing over as a key word for some kind of extended.
17401 	X	time to give it a rest it seems.
17402 	X	okay a bleary eyed survey of about lines of code from a project ive been working on in odd bits of.
17403 	X	best available data sir but mine.
17404 	X	these are the uses of a simple if else that seemed to me to be at least vaguely suitable for the proposed ternary operator most of the if else occurences rejected were over four lines or had very little in common between the if and the else.
17405 	X	i dont believe i omitted any that werent less good candidates than the ones.
17406 	X	if you think my commentary reveals an imperfectly consistent view of the proper use and value of s ternary you may be.
17407 	X	i worked on this intermittently over the last few hours and i havent gone back and corrected anything though i may add a note like this before i send this off just because i was learning how i liked this as i went.
17408 	X	candidate this is from a simple one line one record csv parser.
17409 	X	else start i j s find i if j i j else i n field s start i.
17410 	X	about all that could be changed here is collapsing the if else as i is live past the end of the code shown.
17411 	X	else start i j s find i i j if j else n field s start i.
17412 	X	i dont find this very convincing but it has its.
17413 	X	i wrote it so as to keep the condition the same and its just coincidence that that made it come out with the pleasing j if j.
17414 	X	is that line harder to understand than any one of the original lines.
17415 	X	is it harder to understand than the total effect of the four lines it replaces.
17416 	X	candidate generating bounding dates for a month.
17417 	X	not really a very promising candidate theres too much thats different between the two values for this to appeal to.
17418 	X	this was the second plausible candidate i found after sifting through a lot of python with no simple if else.
17419 	X	of course a lot of the code ive been looking at was written knowing that ternary wasnt a viable option i have used one or another of the kulges a few times but generally find them uglier than four not quite emtpy lines of.
17420 	X	candidate calculate school year from year month.
17421 	X	if d month sy d year else sy d year.
17422 	X	sy d year if d month else.
17423 	X	i think this actually expresses the original logic a little more clearly the school year is the days year unless the days month is january through june then one must be subtracted to get the calendar year during which the school year.
17424 	X	candidate preparing to use an optional parameter in generated html.
17425 	X	if params has key addurl addurl params addurl else addurl.
17426 	X	addurl params addurl if params has key addurl else.
17427 	X	this is an example where the short circuit behavior is important but its not a terribly convincing example overall since it could easily be written as.
17428 	X	addurl if params has key addurl addurl params addurl.
17429 	X	this last is almost certainly how i would write this as theres no concrete advantage imo to the ternary form.
17430 	X	i think i was using a common pattern for all setup items in this routine and or.
17431 	X	candidate another bit from html generation.
17432 	X	in a larger context this would actually allow me to do away with the sep temporary.
17433 	X	if len events sep else sep br if tail tail sep tail.
17434 	X	im not sure why the calculation of sep was separated from its use in the.
17435 	X	this is older code thats been through a couple waves of refactorings of the system its part of possibly sep used to be used in more than one location in an earlier.
17436 	X	perhaps the inlined version above should be compared to this rather than the original.
17437 	X	if colors color bgcolor s colors gr len colors else color.
17438 	X	color bgcolor s colors gr len colors if colors else.
17439 	X	what precedence does ternary have again.
17440 	X	the previous item just seemed to obviously need the parens this one im not so sure.
17441 	X	i didnt find nearly as many simple if else uses as i had expected to in this projects.
17442 	X	what else have i been working on recently that might account for this persistent notion that i ought to have better examples than most of these.
17443 	X	the other thing i discovered was that some of the older modules really need a good brisk currying i came across a few things that made me.
17444 	X	oh and aahz i know youll want to hear about this a couple modules with some mapnfilternlambda uses that im certain will look a lot better as list.
17445 	X	amazing how dated six month old code can.
17446 	X	so is there too much punctuation in else statements.
17447 	X	i guess im not getting this.
17448 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote patiently im still holding out until sandra victor a lambda calculus explorer in.
17449 	X	he wasnt but yes you read it that.
17450 	X	rather than rehash the msgs here try going back and rereading them with a presumption of.
17451 	X	he misread the inent of your personal list message and youre reacting as if he.
17452 	X	its all just pixels on a screen ly yrs tim.
17453 	X	michael chermside claimed theres no new conceptual.
17454 	X	aahz aahz at pythoncraft com http www pythoncraft com.
17455 	X	register for pycon now http www python org pycon reg html.
17456 	X	and practically every language feature thats been added since the earliest.
17457 	X	most languages can be boiled down to a tiny subset of their basic control structures that are exactly as expressive in the turing complete sort of meaning as the original but that hardly means that the extra syntaxes such as the for control structure in python you can write than in terms of a while are mere syntactical.
17458 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote the doors of heaven and hell are adjacent and.
17459 	X	nikos kazantzakis bosskey net return to wolfenstein http www bosskey net rtcw a personal guide to return to castle.
17460 	X	michael chermside mcherm at destiny com writes.
17461 	X	i think andrew koenig pointed out a third argument which many of us had perhaps underestimated it can prevent.
17462 	X	a lot of the workarounds attempted for its absence are flat out.
17463 	X	he gives an example showing finding the maximum of x and y with.
17464 	X	x y and x or y.
17465 	X	which looks reasonable and might even pass the initial unit tests of a real program but gives the wrong answer zero if x is and y is.
17466 	X	i addressed both these points in the descriptive material above the list which you clipped.
17467 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote im sharing the joy im glowing like sunshine chante moore rules for buh http www alcyone com max projects cards buh html the official rules to the betting card game.
17468 	X	ccd to dave brueck in the hopes that it will be interesting to him.
17469 	X	ive got a fair bit of experience with both of.
17470 	X	i think i have spent too much time joining societies full of people who are really into electoral process.
17471 	X	both of them have a bad problem for our purposes they exist to determine winners in elections which must have a.
17472 	X	when you add or do nothing to the mix bad things happen to your electoral.
17473 	X	so we always pulled them out to use after we passed a resolution resolved we are going to do something rather than.
17474 	X	since this is the basis of contention here i dont see how this is going to help.
17475 	X	i will explain for approval voting because i dont want to explain concordet to.
17476 	X	you can go look both approval and concordet up here http electionmethods org index htm or http electionmethods org fr index htm if you like french.
17477 	X	by the way there is a python script that implements the cloneproof condorcet ssd schwartzsequential dropping algorithm.
17478 	X	http electionmethods org condorcetssd py authors mike ossipoff and russ.
17479 	X	i dont see how approval voting is going to help.
17480 	X	i was taught that you cannot use it when one of the alternatives is or do.
17481 	X	this is because either a everybody votes for a b or nothing c d or nothing and so on or so.
17482 	X	there is a built in bias for nothing it is only up against the people who arent going to take no for an.
17483 	X	nobody will be happy with this.
17484 	X	the people who are pro will feel cheated and rightly.
17485 	X	the system was stacked against us they will.
17486 	X	conversely you can forbid those people who vote for any proposal to also vote for.
17487 	X	the least offensive proposal of the alternatives gets in as opposed to nothing where offensive is measured by how many people refuse to vote for it at.
17488 	X	this is how the bland often get elected implementing this in the absense of a strong front.
17489 	X	but then you can get a situation where more people would prefer to do nothing than have any particular candidate and vastly more people would rather do without than have this least offensive.
17490 	X	you have just made an unhappy.
17491 	X	those who were opposed will say but more people would prefer to do nothing that have this rotten thing.
17492 	X	the system was stacked against us.
17493 	X	we could have beat any single proposal but not every proposal.
17494 	X	and they are quite correct about.
17495 	X	moreover in the pro camp things are not necessarily very.
17496 	X	if the bland candidate is also popular then the coalition parties all night happy that one of the choices they liked.
17497 	X	but if this truly is a victory of the least offensive it is entirely possible to discover that you have elected a member whom nobody has any enthusiasm.
17498 	X	absolutely everybody thinks that the best choice was.
17499 	X	moreover they think that the best choice was guaranteed to be missed because the best man for the job is almost always extremely unpopular with a.
17500 	X	the system was stacked against us they will.
17501 	X	we never wanted the least offensive candidate we only wanted the best.
17502 	X	this is why if the pro camp can actually reach consensus and back one candidate things go much.
17503 	X	they can use approval voting or concordet to do so because for them there it no or nothing vote to.
17504 	X	they have got to produce a.
17505 	X	but this has a problem as.
17506 	X	if they have an open primary all the anti camp can come over and make sure that somebody unelectable in the final vote wins the.
17507 	X	so you close your primary and demand strict party.
17508 	X	all party members are required to vote for the candidate we annoint holding your nose if.
17509 	X	this stacks the candidate selection on the part of the party machine if there is.
17510 	X	that discipline and money is what a party machine can promise which is why it.
17511 	X	but not having a lets add a whole bunch of features into python party there isnt a lot of opportunity for a machine to develop around.
17512 	X	if the pro camp cannot reach consensus things are not.
17513 	X	right now my sense is that the pro ternary conditional party is already reaching consensus on what form they should use through discussion and debate including debate with those who are out and out.
17514 	X	they are going to produce a candidate which all but a few of them consider the.
17515 	X	they arent interested in the bland candidate they are working hard at the hearts and minds of their own party trying to get the best they.
17516 	X	this is the best outcome for all of.
17517 	X	when they are done producing one we can vote it up or.
17518 	X	but if they stop cohering and have a big spatt then we have to consider what we want to.
17519 	X	one tradition is to vote both let us hope we are stuck with only two proposals up or.
17520 	X	if they both manage to carry you either select the one that carried by the larger majority or you stick the leaders of both proposals in a room and say come out with one.
17521 	X	this is getting a bit off the original issue but i disagree that dictionaries can in general be used instead of case.
17522 	X	certainly a dictionary can be used to pick one of several values but it cant be used to select one of several code.
17523 	X	im not arguing that python needs a case statement just pointing out that dictionaries and case are not.
17524 	X	of course the oop fanatics might argue that if youre using a case statement to select code paths you probably wanted a subclass instead but thats a whole different flame war.
17525 	X	bengt and the reason you didnt use eleven tenths more literally as in.
17526 	X	bengt is that that had an inconvenient superficial result bengt while really only proving that different terms can have bengt matching representational errors.
17527 	X	andrew koenig ark at research att com http www research att com info ark.
17528 	X	greg ewing using news cis dfn de me at privacy net writes.
17529 	X	afaik it has always been a reserved.
17530 	X	the colon its usually followed by is not part of the keyword according to the grammar.
17531 	X	the other productions that include else are defined.
17532 	X	file string line else syntaxerror invalid syntax.
17533 	X	intevation gmbh http intevation de sketch http sketch sourceforge net mapit http www mapit de.
17534 	X	tim i used to buy that but im having a harder time.
17535 	X	i mean the tim by coincidence part not the if it breaks.
17536 	X	as i tim said there are over uses of and or in the standard library tim now all i looked at were obviously safe at a glance and i have tim yet to find real code in the library where something stronger tim than and or would actually.
17537 	X	im not worried about the standard library authors misusing the.
17538 	X	im worried about ordinary programmers reading such code and failing to realize that the idiom doesnt work all the.
17539 	X	andrew koenig ark at research att com http www research att com info ark.
17540 	X	erik max francis max at alcyone com wrote in message news.
17541 	X	this is in fact the opposite of what i mean.
17542 	X	val sqrt x or imag if x val lst i or default of i.
17543 	X	i am defining the normal results for val and val as sqrt x and lst i.
17544 	X	these are the values which i the author intend to be normally.
17545 	X	i also catch the special cases which break my sqrt lst and return something else the abnormal cases.
17546 	X	the condition when evaluated to true selects the abnormal.
17547 	X	the condition is not normally expected to evaluate to.
17548 	X	yes i realize there are also many cases where this normal abnormal distinction makes no sense.
17549 	X	val sqrt x if x else imag val lst i if i else default.
17550 	X	sqrt x and lst i are still the normal results but they are selected by the.
17551 	X	its a fairly important feature of my form that the condition selects the abnormal value for reasons i mentioned in another.
17552 	X	using the x y c notation and i understand why you have to do that it is easy to miss this distinction by assuming that you can simply replace the x y and c from other forms eg.
17553 	X	pep form x if c else y my form y or x if c.
17554 	X	this is what you get by replacing the.
17555 	X	pep form sqrt x if x else imag my form imag or sqrt x if x.
17556 	X	while correct this is not the intended use of my form which is shown above.
17557 	X	i hope this is a bit.
17558 	X	proposing a new conditional form is like trying to flog a dead horse to water and then teach it new tricks.
17559 	X	andrew koenig ark at research att com ha scritto nel messaggio news yusmuuhck fsf at europa research att.
17560 	X	the kind of thing was referring to potential naive questions not my.
17561 	X	for review pep if then else expression pep http mail python org pipermail python dev february html update to pep if then else expression some data on the debate.
17562 	X	a thread on comp lang python sprung up about adding a ternary operator to python yes the title says trinary operators but that is apparently not technically correct in case you are not a c programmer the ternary operator can be thought of an if else statement that acts like an expression its the cond.
17563 	X	true stmt false stmt syntax from c.
17564 	X	another way of thinking of it is as an if else statement that is.
17565 	X	guido was sick of this debate coming up so he wrote pep on the subject and has left it up to comp lang python to argue this one out he actually explicitly said not to discuss it on python dev and decide on the final fate of this.
17566 	X	if you have an opinion voice it on comp lang python since this will also be used as a test to see if more things should be put on c l py for discussion instead of python.
17567 	X	as of this writing samuele pedroni updated the list on posting stats for those of us who dont follow c l.
17568 	X	two syntactic choices are currently in the running this is ignoring objections to the whole idea.
17569 	X	one is if cond true stmt else false stmt and the other is cond true stmt false stmt.
17570 	X	pep http www python org peps pep html comp lang python http groups google com groupsq.
17571 	X	pep then else for deprecating and or side effects christian tismer suggested replacing and and or with then and else for doing binary short circuit testing such as arg arg else default instead of arg arg or default.
17572 	X	also suggested arg when cond else cond as a possible ternary.
17573 	X	still were tossed around on python.
17574 	X	pep alternative syntax bool method someone suggested adding a method to booleans to act like a ternary.
17575 	X	before the discussion was moved to comp lang python as all ternary discussions should be the point was made that it could not support short.
17576 	X	non binary operators thread that popped into existence on python dev part way through its discussion on comp lang python which is why it died on python dev quickly about how ternary operators are different compared to two chained binary operators like a b c.
17577 	X	mark hammond asked for help with dealing with a deadlock with import.
17578 	X	changes to logging http mail python org pipermail python dev february html vinay sajip said he had patches for the logging package ready to go and asked for comments which he.
17579 	X	execve vulnerability python execvpe symlink race condition someone reported a vulnerability that was fixed since python.
17580 	X	although i vote against discussing voting schemes lets call for votes at some later point next.
17581 	X	i suspect you know the outcome already as we all know you cant restrain yourself from using that pesky little time.
17582 	X	what about a missing else clause.
17583 	X	allowing it could be nice for stuff like.
17584 	X	note though that this proposal obfuscates control flow which guido already knows of course.
17585 	X	you cant read it neither from left to right nor from right to left.
17586 	X	it has happenend with list comprehensions.
17587 	X	but this doesnt mean its generally a good.
17588 	X	where its not immeditiately obvious what happens as keywords loose.
17589 	X	and this is just the start of oneliners i could and would come up with.
17590 	X	i was argueing against adding more inlining.
17591 	X	has anyone got an example where more than lines would be saved by a ternary operator.
17592 	X	the and or trick saves me about lines of code at the expense of hiding its intention from a casual.
17593 	X	but at least and and or have other.
17594 	X	it seems silly to me to add a whole syntactical construct and maybe a keyword to the language just to save lines every now and.
17595 	X	the cond cxy function some people have suggested makes sense if youre doing a bunch of these so long as you dont need short.
17596 	X	if you need short circuiting just use.
17597 	X	chances are youre going to need extra comments to explain what youre doing and now you probably have extra space at the ends of the.
17598 	X	if c temporary variable f x else temporary variable g y do something with temporary variable.
17599 	X	if you need a bunch of short circuiting ternary operators meaning youll save lots of.
17600 	X	cond c lambda f x lambda g y.
17601 	X	and have a comment explaining what it.
17602 	X	could we have cond as a standard function with true and false.
17603 	X	then we could take the and or trick out of the faq and tell people use cond.
17604 	X	if they ask for a short circuiting form tell a white lie o.
17605 	X	tony for this to be a minor change else would have to be a binary tony operator.
17606 	X	tony x and y else z x and y else z.
17607 	X	tony after x and y is evaluated the value is false when either x is tony false or when x is true and y is.
17608 	X	how is else meant to tony distinguish the two falses.
17609 	X	which means that x and y else z has to be a special syntactic form and x and y else z has to be a syntax.
17610 	X	andrew koenig ark at research att com http www research att com info ark.
17611 	X	while there certainly are people who are surprised coming to python that it doesnt have a ternary operator there is also a significant number of experienced python programmers who would like to have an if.
17612 	X	i and many other programmers have used ugly tricks with and and or to achieve if like.
17613 	X	in fact i believe those idioms are even becoming more widely known over.
17614 	X	but everyone who uses them knows they are bad idioms they are challenging to read challenging to write and bug.
17615 	X	so the point is we are already hanging ourselves with.
17616 	X	because the language cant express something people want to express they work around it with a bad.
17617 	X	to me this is a very compelling reason and after formulating it more in my mind i feel much more strongly in favor of this pep.
17618 	X	i think there is a strong empirically argument for this.
17619 	X	ian bicking ianb at colorstudy com http colorstudy com n talman chicago il there is no flag large enough to cover the shame of killing innocent people howard zinn.
17620 	X	tim peters wink said that with the hundred cases of the beloved x and y or z idiom in the modules of python its needed exactly zero.
17621 	X	if nobody comes up with sane real world use cases for the short circuiting behaviour then we should call yagni and not change any.
17622 	X	a c implemented builtin isnt really that.
17623 	X	leaning towards a builtin ly yrs.
17624 	X	this pep enforces us to decide whether we want it this way or to shut up.
17625 	X	since all these threads show everything but a clear decision im pretty sure the pep did exactly what the bdfl.
17626 	X	cond exprs are dead if not before then now forever ly yrs chris.
17627 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
17628 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
17629 	X	only one ternary operator im sorry to.
17630 	X	steven taschuk staschuk at telusplanet net every public frenzy produces legislation purporting to address.
17631 	X	i on the other hand think the order is one of the better parts of the.
17632 	X	just because its not the same as c doesnt make it try thinking about it playing with it before reacting so.
17633 	X	on this and on most of the alternatives other people have proposed in this thread.
17634 	X	in this case my reason is that the required parens make it too easy to confuse with.
17635 	X	david eppstein uc irvine of information computer science eppstein at ics uci edu http www ics uci edu eppstein.
17636 	X	im no troll but ill admit to a high degree of intolerance to half.
17637 	X	dale strickland clark riverhall systems ltd.
17638 	X	we might want to elaborate on how this function is found though and the differences that arise depending on how it.
17639 	X	its the c instance c normally bound to self c.
17640 	X	but it gets put there because of the way func was.
17641 	X	if we give the instance a func attribute that stops the search from looking in the class attributes and bases the result may be different e.
17642 	X	c func func c func plain func args.
17643 	X	its an ordinary instance attribute name finding a plain function and using it as such so the c instance does not get passed to become the self of a.
17644 	X	we can undo the shadowing and find the class attribute name func again del c func c func a c func args main c instance at xae a.
17645 	X	this is also a dynamic effect not dependent on having originally defined func as a method of c e if we replace c func with the plain func.
17646 	X	func c func which func plain func args main c instance at xae which func.
17647 	X	you can see that the instance got passed as with the original it doesnt complain about the wrong number of args because of the args parameter spec.
17648 	X	and passing the instance to the class method c func produces the same result as getting it done for you when you use the attribute search via the instance.
17649 	X	which func plain func args main c instance at xae which func.
17650 	X	c which func plain func args main c instance at xae which func.
17651 	X	maybe this makes it easier to see how this applies when the class is str and c is a str instance and func is join.
17652 	X	c c join foo bar foobar str join c foo bar foobar.
17653 	X	harvey what about a built in function.
17654 	X	if it were a function it would have to evaluate all of its.
17655 	X	part of the point is that only one of the two results is.
17656 	X	andrew koenig ark at research att com http www research att com info ark.
17657 	X	but after using it a couple of times it reduces the amount of thinking considerably compared to x and y or z.
17658 	X	and the latter is what we will stay with.
17659 	X	the more if there is no clear majority for introducing new expression.
17660 	X	even with new syntax we will have both cases each one used in dubious.
17661 	X	to be honest i wouldnt specifically design a language with ternary op in.
17662 	X	its a minor feature probably often better to.
17663 	X	sure but they also contain the word else.
17664 	X	to me its kind of the best of both current worlds and or and if else.
17665 	X	but i am not dutch although i work for a dutch company.
17666 	X	to me and else is a case of practicality beats purity.
17667 	X	there are tradeoffs with either approach and no approach at.
17668 	X	erik im just saying saying that if you want a conditional expression erik to be legal as a standalone statement that requires a parser erik change in how if statements are handled i you have to erik look ahead and see oh theres an else on this same line so erik this is the conditional operator as a standalone statement not erik an if.
17669 	X	thats one reason i dont want a conditional expression to be legal as a standalone.
17670 	X	erik right and that was my suggestion somewhere in the thread and erik via email.
17671 	X	the corner case which i shall hereafter refer to erik as the corner case where the conditional expression is erik written as a standalone statement is not important to me so erik i have no problem disallowing it that means no parser changes erik are necessary as far as i can tell other than the introduction erik of the conditional expression which is an expression and thus erik does not interfere with the if statement.
17672 	X	erik the only thing i might say about my disinterest in the corner erik case is that it might be nice that if you think youre parsing erik an if statement and see an else on the same line a slightly erik more helpful syntaxerror is emitted i hey you cant do erik that use parentheses or put the else on a separate line.
17673 	X	erik i dont forsee myself using the corner case in real code nor do erik i see it becoming particularly popular so im rather ambivalent erik to its.
17674 	X	i think the behavior should be whatever is easiest to.
17675 	X	erik i must say im pretty convinced at this point that if c x erik else y and if we wish its multiway variants if c x elif d erik y else z is absolutely the way to go if you want a erik conditional.
17676 	X	id still be willing to live with x if c else y because i think its much better than c and x or.
17677 	X	and else really just cures the.
17678 	X	idiom by expressing the intention that you want exactly one of y or z and dont want to depend on the boolean value of y.
17679 	X	it would raise a syntax error because you really need to say exactly.
17680 	X	because short circuiting isnt needed often perhaps in lines of code so it isnt useful to make yet another language construct with all the difficulties in parsing interpretation when the vast majority of cases perhaps in lines can be handled with a simple function that introduces no new ideas to the.
17681 	X	note that if you accept that people who really want a ternary if else operator can sometimes live with.
17682 	X	then the only time an if else operator is needed is for cases when expr may be a false.
17683 	X	and that is according to tim peters analysis of the python library code even more rare with a frequency i would estimate of about use in or.
17684 	X	so should we introduce a new idiom to python which will only need to be used about once every lines of code compared to an iff builtin which will likely be used about once every lines and doesnt introduce new fundamental ideas to the language.
17685 	X	others would argue that a simple ternary if else operator is too limited and that it should support easy chaining an n ary if elif else.
17686 	X	so they might argue that your propose is still only half.
17687 	X	i thought it was kinda neat as well until i realized.
17688 	X	requires that sep be a byte.
17689 	X	typeerror descriptor join requires a str object but received a unicode.
17690 	X	is better because it doesnt enforce the extra type.
17691 	X	since i dont see myself writing that in the above paragraph id have to say no im not telling you any such.
17692 	X	reinterpreting my comments in your favor and then condemning me for a claim ive never made is i believe whats called the strawman argument.
17693 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote you cannot step into the same river.
17694 	X	cratylus python chess module http www alcyone com pyos chess a chess game adjudicator in.
17695 	X	yes although from my perspective the real problem is that there is a hole in the language so the current idiom is something of a temporary.
17696 	X	so to me adding this tiny little new construct like in the pep fixes the actual problem while augmenting the and or workaround is like putting duct tape on.
17697 	X	since we have an opportunity to fix the real problem i say lets fix it and fix it.
17698 	X	im not so sure but even if we couldnt completely eradicate it is that a good reason not to make the language right obviously many people dont agree that something is missing.
17699 	X	iow if the language were were implemented from scratch id put in a real conditional operator and definitely not the and or thing so given the chance to do it now the best course of action seems to do the same.
17700 	X	mr so how about an alternative add a special method to the python mr bool type that works like this.
17701 	X	mr cond x or any expression that yields a bool mr result cond choose iftrue iffalse.
17702 	X	mr choose would need to be a special method so that it can avoid mr evaluating the non chosen.
17703 	X	so what about fun cond choose result fun iftrue iffalse.
17704 	X	every function call would have to check if its arguments should be lazily.
17705 	X	maybe introducing special forms as in lisp would be.
17706 	X	piet van oostrum piet at cs uu nl private email p van oostrum at hccnet nl.
17707 	X	raymond hettinger vzerxy at verizon net writes.
17708 	X	im glad if is again under.
17709 	X	its not necessarily the best choice but i felt that the stated reasons for rejecting it were.
17710 	X	a macro like iif or cond or whatever is interesting partly because of the far reaching implications of having such a thing in.
17711 	X	lets take for granted that it really does have macro like behavior i e that the compiler inlines the same conditional bytecode as youd get by using.
17712 	X	i e its not a function call that performs more function calls to lazy evaluate expressions that have been wrapped in lambdas.
17713 	X	would there then be a way to add other such macros.
17714 	X	i have no strong feelings either way towards your.
17715 	X	off hand it strikes me as not all that far removed from generators which are already in the.
17716 	X	though i question if self args args is really what should be in the last line of the reference.
17717 	X	but i gotta wonder if people are having so much trouble with a trivial little thing like pep it would strike me as hypocritical of them to endorse this.
17718 	X	then too the subject your pep is sufficiently complex that many people who presently express a strong opinion on pep might remain silent about number.
17719 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
17720 	X	steve holden sholden at holdenweb com ha scritto nel messaggio news.
17721 	X	i agree and lambda does not count as counterexample.
17722 	X	my point is that if x cant be false i could write its a mood thing.
17723 	X	the std lib contains occurrences of the.
17724 	X	so im happy with the status quo workarounds included and their.
17725 	X	that implied that im fully aware of.
17726 	X	my position is odd i can use properly and read the.
17727 	X	i dont like the proposed syntaxes and i dont feel to need badly enough of a ternary cond op to declare to be ready to cope with the.
17728 	X	i sympathize with those against for readability reasons but i ask them to think whether they really not prefer the proposals over the workarounds because the latter are.
17729 	X	i sympathize with andrew koenig because it would like ifs inside lambdas but i prefer to frame that as the problem of lack of a notation for general anonymous functions than as the problem of the missing conditional.
17730 	X	sorry ive come to this late but has anybody already pointed out that practically every c c coding standard certainly all ive ever seen deprecates the use of the.
17731 	X	ternary operator because its infamous for producing unmaintainable code.
17732 	X	better yet get guido to post some on the edge proposal.
17733 	X	i have no objection to straw man votes so long as they do not end the.
17734 	X	i also reiterate my concern that premature votes may result in votes were unfairly skewed to the.
17735 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
17736 	X	this reminds me of an idiom from another language.
17737 	X	big long complicated expression unless simple test expression.
17738 	X	which i really dislike because after mentally parsing the big long complicated expression i hit the unless simple test expression part and i have to backtrack and think oh that first thing might not happen after all.
17739 	X	little annoyances like that add up and make code harder to.
17740 	X	i like the fact that python keeps things simple and consistent and im perfectly happy to trade the conciseness offered by this proposed syntax for the clarity of doing it the long way.
17741 	X	if simple test expression big long complicated expression else.
17742 	X	that looks like one more way to do it for simple if else.
17743 	X	pythons only one obvious way to do it philosophy is one of its big advantages in were easy to learn and making existing code easy to read and.
17744 	X	i would hate to see it drift toward.
17745 	X	if one follows the object paradigm consequently and that was the intent of the new string methods then this decision is completely.
17746 	X	the seperator is the only known single object in this play that can provide the.
17747 	X	bit this is debatable since the singularity of the seperator is just an.
17748 	X	consider for example an operation that intersperes string representations by different decoration maybe with something special at the beginning end then the principle breaks down.
17749 	X	you would have to leave the objec domain and introduce string functions.
17750 	X	i could imagine that they could have decided not to make join a string method at all but split strongly suggested.
17751 	X	if somebody wants to discuss that please make sure to do it in another thread.
17752 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
17753 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
17754 	X	both the use of curly braces and commas seem terribly inappropriate.
17755 	X	when this is corrected you end up with.
17756 	X	or in the more general sense.
17757 	X	the former syntax is itself brought up in the pep alternatives suggestion and shot down as were even more confusing because it resembles the if statement so.
17758 	X	to backtrack maybe that isnt a bad.
17759 	X	there doesnt see much worry of parser ambiguities one can simply require parentheses when and if they arise.
17760 	X	so all youre doing is providing an alternative form for a recognized syntax.
17761 	X	and collapsing it into an expression.
17762 	X	that really doesnt strike me as so.
17763 	X	particularly if most of the objections center around overloading the meaning of if or the awkwardness of reading the proposed x if p else y structure not reading left to right maybe this makes sense after all.
17764 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote so look into my eyes i wont tell you lies neneh cherry official omega page http www alcyone com max projects omega the official distribution page for the popular roguelike.
17765 	X	paul f dubois dubois at users sourceforge net writes.
17766 	X	y sqrt max z for z in x.
17767 	X	if you think this is a little too obscure add a.
17768 	X	im assuming that youd object to a suggestion that you define a safe sqrt function which returns zero for negative.
17769 	X	not just people but including some leaders in the community such as tim.
17770 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
17771 	X	michele moreover i fear abuses like.
17772 	X	michele files f for f in os listdir mydir michele if if issource f endswith py else true.
17773 	X	michele to retrieve all the files or only the source files this is a michele real case life where i would like to use the ternary michele operator but not in this form.
17774 	X	i dont see this is a case for the ternary operator at.
17775 	X	surely it is better to write.
17776 	X	files f for f in os listdir mydir if not issource or f endswith py.
17777 	X	andrew koenig ark at research att com http www research att com info ark.
17778 	X	james j besemer jb at cascade sys com introducing.
17779 	X	and not having the change makes new python code more likely to work on older python.
17780 	X	the only pressing need is to try and keep things as uniform and orthogonal as.
17781 	X	the if statement doesnt need an else clause and does nothing if the condition is not.
17782 	X	a fuction doesnt need to end in a return statement and returns none if it falls off the.
17783 	X	given those it just seems logical that an ternary expression shouldnt need an else clause and should return none if there isnt.
17784 	X	granted i suspect in almost every case where youd want to return none as a default putting in the explicit else none would be stylisticly better it doesnt seem necessary to require.
17785 	X	disapproval of all of the alternatives except no change.
17786 	X	andrew koenig ark at research att com http www research att com info ark.
17787 	X	hell you could even do if x y funct x else y too many.
17788 	X	but thats probably too radical to be accepted wink.
17789 	X	no its what structured program is all about.
17790 	X	picking useful pieces of behavior out and abstracting them often with a function.
17791 	X	furthermore say you make a mistake unlikely in this trivial case i admit.
17792 	X	do you want to fix it in one place the condsqrt function definition or in places in different source files.
17793 	X	no splitting algorithms up is a very good.
17794 	X	sorely shorn soon shackled slave samson sighed silently scheming sightlessly seeking some savage spectacular.
17795 	X	up users load average a non text attachment was url http mail python org pipermail python list attachments fef attachment sig.
17796 	X	in article ebfb bfb at alcyone com.
17797 	X	im certainly having one of the biggest laughs so far this.
17798 	X	aahz aahz at pythoncraft com http www pythoncraft com.
17799 	X	register for pycon now http www python org pycon reg html.
17800 	X	its syntactically valid but ought to be written as an if statement not an if.
17801 	X	but this still leaves two other reasons why a conditional expression must short.
17802 	X	first of all the action may cause an.
17803 	X	the canonical example is something like this.
17804 	X	x if a is not none a getdata else getdefaultdata.
17805 	X	secondly the evaluation may take a long time.
17806 	X	x if a isinitialized a getvalue else a computevalue.
17807 	X	finally i refer you to the pep http www python org peps pep html where this is summarized.
17808 	X	moot means subject to debate arguable and we can certainly fill up c l py discussing whether short circuiting is.
17809 	X	but lets not since its not going to accomplish anything.
17810 	X	http dictionary reference com searchq moot.
17811 	X	its bad form to just have side effects in a short circuiting.
17812 	X	so if i saw this with any of the proposed syntaxes.
17813 	X	and i think that this attitude is key any new language feature should include some good style guidelines that while not enforced by the language carry nearly the same.
17814 	X	this is especially important when the pep needs to list for clarity and completeness what happens in oddball use cases a style section balances whats possible with whats.
17815 	X	a lot of arguments against the pep deal with odd abuses of the feature but imo they overexaggerate the risks.
17816 	X	most developers with even a little discipline will avoid such uses and if they dont care about good style then they will write sloppy code despite what the language.
17817 	X	if your company has a coding standard and abuse becomes a problem you can add it to your coding standard with emphasis on waiting for it to really become a problem.
17818 	X	at my current job we dont have a formal standard at all but every once in awhile well make style suggestions to each other and its the end of the.
17819 	X	while true in a technical sense id expect there are a number of people who are reading this thread who didnt really understand how this construct works prior to this thread and who prefer to protect other people from were forced to.
17820 	X	aahz aahz at pythoncraft com http www pythoncraft com.
17821 	X	register for pycon now http www python org pycon reg html.
17822 	X	tim peters tim one at email msn com writes.
17823 	X	i have to say that while i admire the spirit these usability studies involving non python programmers seem a little bit.
17824 	X	lots of the other stuff thats basic to python like the self argument to class methods the init method the join x idiom the range function i e using for i in range instead of for i to are all at least as non obvious in their meaning as most of the pep candidates weve.
17825 	X	im also unconcerned that non programmers i mean complete non programmers not just non python programmers will have more to get confused by when reading python code if theres another simple construct in the.
17826 	X	the problems theyll face will have more to do with understanding the algorithms function calls object oriented methodology.
17827 	X	no one who can understand classes and simple inheritance to say nothing of really confusing stuff like metaclasses is going to have trouble understanding a conditional.
17828 	X	nor do i believe that keeping pythons syntax and keywords to a bare minimum really makes python easier to learn where learn means acquire the ability to read and understand a nontrivial python program written by somebody else.
17829 	X	minimalizing the language makes more sense if python is merely a glue language in which nontrivial programs simply arent.
17830 	X	but these days python is used for substantial.
17831 	X	anyone trying to read one of them really has to understand the more commonly used functions in the sys os and regexp modules maybe the math library perhaps the socket libraries or urllib or the cgi module or whatever else depending on what the application.
17832 	X	and offering a wide selection of library modules is an explicitly embraced feature batteries included of pythons.
17833 	X	it seems perfectly consistent to treat built in features the same.
17834 	X	of course the features should be designed cleanly just like library modules should be designed.
17835 	X	so i just dont see any reason to get uppity about fending off language features that are present in so many other languages without drawing.
17836 	X	that includes not only conditional expressions but also case statements repeat until loops python seems to be acquiring such features one by one operators like appeared only recently why not just realize that including them is logical and not make such a fuss.
17837 	X	erik max francis max at alcyone com writes.
17838 	X	its counterintuitive that the values arent all evaluated like they are in a dict.
17839 	X	as far as i can tell someone please correct me if this is wrong the if that starts an if statement can always be distinguished from the if that starts the conditional operator except in one case the corner case where a conditional operator is a solitary expression as a lone.
17840 	X	that case doesnt interest me so it would be perfectly satisfactory to me for python to interpret that as an error since its better written as an actual if statement.
17841 	X	parenthesize it or transform it to a real live if statement your.
17842 	X	i cant see any other conflicts than that because in a script when the parser is doing its thing it knows whether its expecting a statement or an.
17843 	X	the only other case i can think of which someone offhandedly alluded to but didnt go into depth would be the single compilation as the interactive interpreter does where it will take a string and interpret it either as an expression or a statement depending on which it.
17844 	X	in this case it would be perfectly satisfactory to me for it to default to the if statement not the conditional.
17845 	X	its just a matter of choosing which youd.
17846 	X	i just see that as really another example of the corner case its a who cares as long as its consistent.
17847 	X	if the if is the first keyword in a statement or single then its the if.
17848 	X	if its the first keyword in an expression then its the conditional.
17849 	X	again please someone correct me if im wrong.
17850 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote no man quite believes in any other.
17851 	X	h l mencken alcyone systems san jose.
17852 	X	that should have been isinstance source file.
17853 	X	andrew koenig ark at research att com wrote in message news yurffzy fsf at europa research att com.
17854 	X	im willing to be forced to read or use that pattern if it means that in of all other circumstances i can read a simple if elif else.
17855 	X	there arent very many situations in which i truly need a conditional expression and that code above suffices for those extremely few.
17856 	X	one of pythons best features is that its simple easy to learn and.
17857 	X	this proposal sacrifices consistency for a very marginal improvement in.
17858 	X	im like on the idea of a conditional expression.
17859 	X	field s start j jn cond.
17860 	X	sy d year d month this is already or.
17861 	X	this is already or sy d month.
17862 	X	bgcolor s colors gr len colors.
17863 	X	does that little language of yours have an if else statement.
17864 	X	if so could you wrap it up in parens and make it an if else expression and try it out on those non programmers to see how they react to it.
17865 	X	the best way to do this would be to ask them in person then its easier to see their reaction.
17866 	X	i for one would find it very interesting whether my findings with my twin daughters would prove more.
17867 	X	they made it clear that statements arent expressions hence making an expression out of a statement by merily embracing it with parens might not be such a smart move after.
17868 	X	in fact all symbols even the words that make up natural languages only have meaning once they are.
17869 	X	the point however is that reusing symbols that are already known from another context in an analogous way makes it quick and painless to learn these.
17870 	X	therefore adopting symbols from a natural language english basic mathematics or python itself adds little to the cognitive load of new symbols that must be memorised when the programming language is.
17871 	X	of course this is the very reason why programmers coming from a c c background are trying to have the c syntax adopted for the ternary in.
17872 	X	the problem though is that python is often used as a teaching language where the learners antecedents will be found in some natural language or in.
17873 	X	the existence of this cx y gobbledygook in programming languages like c and perl will not help them at all.
17874 	X	no because that is not my approach you are trying to set up a strawman argument.
17875 	X	it is common sense to reuse the language of mathematics in the design of programming languages especially for computing the results of arithmetic expressions supplemented as necessary by carefully chosen keywords from a natural.
17876 	X	however the c style ternary isnt found in these languages and is thus meaningless to anyone not coming to python from a c.
17877 	X	this is why i regard using for assignment and for equality as a sadly now unremediable blemish in the design of.
17878 	X	it reuses a mathematical symbol for a new purpose in a way that contradicts its established meaning within that context thereby creating needless.
17879 	X	yet since the concept of equality is actually needed in the language a new symbol must be created to represent.
17880 	X	if means equals actually no it means becomes does mean really equals.
17881 	X	if so then perhaps should mean really greater than and we should reuse for something else c is truly insane in some.
17882 	X	i really hope that python does not import even more bad ideas like this from c or i will need to begin looking elsewhere for a language that provides.
17883 	X	this would be true except that python already requires familiarity with the concepts denoted by the if and else.
17884 	X	this is actually another argument against using constructs like x when c else y which require the importation of yet more english into.
17885 	X	it is not a valid argument against reusing if and else as symbols within a ternary expression since this usage builds in a simple and obvious way on knowledge that has already been gained by using these keywords in the context of conditional.
17886 	X	i too prefer to read from left to right and top to.
17887 	X	x if c else y does read left to.
17888 	X	a ternary expression takes three arguments and yields one the placement of the conditional argument might reasonably appear in any position within a linear ordering of these.
17889 	X	however very few syntactic forms clearly convey which expression is selected if the conditional evaluates to false true and this is the critically important piece of information that the syntax ought to convey.
17890 	X	x if c else y does x when c else y does.
17891 	X	placing a weak and ambiguous separator like between the trueexpr and the falseexpr tells the reader nothing about which is.
17892 	X	only prior knowledge of c will tell.
17893 	X	and if you read or use the ternary only rarely this is one detail that is likely to be forgotten leading to either an incorrect reading of the code or the necessity of checking the language.
17894 	X	well im glad we agree on something.
17895 	X	i would argue that a ternary operator should not be able to be a binary operator with the else case left.
17896 	X	im in the camp that not only believes the explicit is better than implicit and which thinks a ternary operator with an element missing is just too implicit to be.
17897 	X	comparisons with the conventional if else dont.
17898 	X	in the conventional case where you are saying if a then do x otherwise do z if z is pass you clearly dont need to specify.
17899 	X	in the expression case the else case would be none which is not just the absence of a result but actually a specific special result which has special meaning in.
17900 	X	it should be explicit if this is what gets returned when you dont care about the else i.
17901 	X	we can agree to disagree but im pretty firm on this point and dont believe you can dissuade.
17902 	X	on the other hand if your preference makes it in i probably wont be overly concerned either although i doubt id ever use it and i would probably find it surprising each time i read.
17903 	X	it is his vote and what he does with it is his business whether you think it is ethical or.
17904 	X	i dont see how it has any bearing on his.
17905 	X	it is practically impossible to teach good programming style to students that have had prior exposure to basic as potential programmers they are mentally mutilated beyond hope of.
17906 	X	correct me if im wrong but havent you been against the addition of a conditional operator from the very beginning.
17907 	X	if so is this meant to be some sort of revelation.
17908 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote i always entertain great.
17909 	X	robert frost get your own customized newsfeed online in realtime for free.
17910 	X	how is what youre saying here an argument against a conditional function.
17911 	X	targetvar iif cond iif cond result result result.
17912 	X	seems to me that short circuit is the only reason to dislike iif and therefore you need to make your argument on changing the language rather than the library solely on the short circuit.
17913 	X	aahz aahz at pythoncraft com http www pythoncraft com.
17914 	X	register for pycon now http www python org pycon reg html.
17915 	X	in fact most of the time it makes it a non.
17916 	X	fwiw i dont think it is significantly better than if either sorry.
17917 	X	um youve posted about it at least a half dozen times now probably approaching a.
17918 	X	its a special form that says evaluate me as true in one context but evaluate me to something else in another.
17919 	X	this is remarkably confusing and as for correcting the and or idiom only complicates.
17920 	X	now its even more idiomatic and even harder to.
17921 	X	and i seriously doubt that youve considered the full ramification of the meaning of the syntax.
17922 	X	how would it be used in other situations.
17923 	X	not to mention the fact that it uses curly braces which suggest dictionaries when none are to be found anywhere.
17924 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote will i disappoint my future if i stay sade bosskey net return to wolfenstein http www bosskey net rtcw a personal guide to return to castle.
17925 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote ride ride this wave of mine res esperanto reference http www alcyone com max lang esperanto an esperanto reference for english.
17926 	X	while i do not think this is necessary i would like to offer an alternative syntax.
17927 	X	the only benefit i can see to this alternative syntax is that it will be less likely to be confused with the existing syntax for if elif else which is probably a good.
17928 	X	although adding a keyword is often a bad.
17929 	X	x when c else y when d else z x when c else y when d else z x or y when c else z x or y when c else z x when c else y or z x when c else y or z lambda x when c else y lambda x when c else y x when c else lambda y syntaxerror x when c else y z x when c else y z x y when c else z x y when c else z.
17930 	X	if x when c else y pass.
17931 	X	so far i havent seen a clear justification for making this a language level.
17932 	X	i am saying that i think that any code that depends on short circuit evaluation probably should have more of a visual.
17933 	X	aahz aahz at pythoncraft com http www pythoncraft com.
17934 	X	register for pycon now http www python org pycon reg html.
17935 	X	if short circuiting was working then id be able to do.
17936 	X	or did you forget smileys too.
17937 	X	if cond good name expr else good name expr.
17938 	X	then dead easy and completly backward compatible.
17939 	X	erik max francis max at alcyone com writes.
17940 	X	fwiw if id designed python the concatenation operator would have looked different to the addition.
17941 	X	but then im an oddball who would have quite happily banned all coercions in arithmetic statements so its probably just as well i didnt design python.
17942 	X	were talking about a government department here they have procedures not.
17943 	X	this is another reason why i keep promoting mandatory.
17944 	X	they would fix this among other ambiguities as long as the initial token is required to be.
17945 	X	in other words dont allow whitespace or comments between the opening paren and the if.
17946 	X	get the ple of names value and who owns it a the value can be cached or in the database if is cached.
17947 	X	get cache name else self connection fetch name database already open when getting source.
17948 	X	the ownership is stored in the database if the name starts with db or from the web service if x startswith db self connection get owner name else self webservice get owner by name name.
17949 	X	estimated at over once every lines but likely even lower.
17950 	X	see other posts of mine for.
17951 	X	when the list comprehensions addition was discussed there were some ad hoc usability tests done to evalute the different.
17952 	X	there were also dicussions about how it is used in other.
17953 	X	they ended up replacing functions which were hard to name and hard to understand like.
17954 	X	def get list attr dataset attr results for x in dataset results append getattr x attr return results.
17955 	X	for me booleans were not new syntax they were simply new built in objects which worked in the same framework as the existing.
17956 	X	there were some changes to how comparisons are done but all were done in a backwards compatiable.
17957 	X	in addition i needed booleans for some projects eg to express configuration options so having a commong spelling of true false helped simplify bad.
17958 	X	the objections to adding bool were deemed minor enough by our fearless.
17959 	X	such variable naming schemes of course are also deemed.
17960 	X	in addition it turns out that most code looks like this.
17961 	X	need delete if condition if condition targetvar result else targetvar result need delete else targetvar result.
17962 	X	so that if the original code was written with a set of embedded if else expressions then it would need to be rewritten and retested to add this need delete.
17963 	X	and if parentheses arent required then that might be the one case where i would consider leaving them.
17964 	X	nevertheless i still think required parentheses are a good.
17965 	X	i dont see much significant difference between.
17966 	X	f x for x in l.
17967 	X	list comprehensions are required to be enclosed by punctuation pairs even though it would be possible to parse them without those enclosing brackets the presence of for after an expression were what would trigger the parser that this is a list comprehension.
17968 	X	i wasnt reading python dev at the time when list comprehension syntax was were discussed but i cant imagine too many people wanting to omit the brackets.
17969 	X	x for x in l a hypothetical bracketless list comprehension x for x in l same thing with the brackets.
17970 	X	the second one scans much better.
17971 	X	my eye can take in the bracket enclosed section as a single unit recognize it as a list comprehension and parse.
17972 	X	whereas the first format makes me do a double take and needs two slow passes to.
17973 	X	first pass ok the value is x wait a minute theres a.
17974 	X	ok find the end of the list then back to the beginning for a second pass to actually read.
17975 	X	if we require parentheses around ternary expressions i think it will have a similar effect.
17976 	X	again i think the second one just scans.
17977 	X	otoh im not entirely convinced myself that its necessary to require the.
17978 	X	good style will demand that they be there.
17979 	X	and ill strongly recommend them to newbies who ask for help with their code six months down the.
17980 	X	strongly recommend here means by the way that ternary expression really needs parentheses around.
17981 	X	its the accepted coding standard and anything else looks desperately.
17982 	X	but im not certain that this is a case where we really need the parser to enforce good.
17983 	X	maybe we should take the were all adults here approach and let people leave off the parentheses as they see fit while still recommending strongly that parentheses be placed around a ternary expression unless you have a darn good reason to do.
17984 	X	ive managed to argue so convincingly against my own position that im now on my own.
17985 	X	robin munn rmunn at pobox com http www rmunn com pgp key id xafb ff cffb a f d acfd afb.
17986 	X	erik max francis max at alcyone com ha scritto nel messaggio news.
17987 	X	no i find it less line.
17988 	X	roman id agree on syntactic support for decision tables with due roman optimization of course.
17989 	X	can you describe what form you think a decision table might take in a programming language.
17990 	X	i am used to thinking of them as two dimensional structures google for decision tables and click the first link returned which seem fairly hard to represent in a concise readable purely text.
17991 	X	that might be whats helped kept lcs from getting overly.
17992 	X	in general python has focused on mechanisms for reducing aahz stylistic diversity because that makes programs easier to.
17993 	X	but python has lots of features that increase stylistic diversity such as the ability to define functions in or out of classes compound assignment operators operator overloading list comprehensions lambda expressions and so.
17994 	X	for that matter in the first round of the public comment period for the c standard we received a comment from one country that they would not approve the standard as long as it allowed for multiple ways of achieving the same affect and to that end this country insisted that we remove the and operators from the language as we could achieve the same effect by adding or subtracting.
17995 	X	andrew koenig ark at research att com http www research att com info ark.
17996 	X	quoth michael hudson mwh at python net samuele pedroni pedronis at bluewin ch writes i sympathize with those against for readability reasons but i ask them to think whether they really not prefer the proposals over the workarounds because the latter are.
17997 	X	this is an eye opener for me people really do write x and y or b i dont know whether im more surprised or.
17998 	X	it sure doesnt bode well for what were likely to see if one of the proposals is.
17999 	X	its like handing out free spray paint on the street corners to improve the quality of.
18000 	X	donn cave donn at u washington edu.
18001 	X	x when a b c else d.
18002 	X	if the true value fires is the result c or c.
18003 	X	imo the plus side is that theres a keyword introducing the.
18004 	X	the minus side is the mixture of keywords and special.
18005 	X	it should be one or the.
18006 	X	and of course an elif should be in there as.
18007 	X	theres also an ambiguity with the final expression.
18008 	X	how do you feel about reading x y or as divide x by y or by if y sucks.
18009 	X	i admit this example is somewhat cryptic my real question is whether you find this reading of or.
18010 	X	steven taschuk staschuk at telusplanet net o pleiosaur.
18011 	X	alan also i think this would also be very confusing to new.
18012 	X	alan this would be legal syntax.
18013 	X	alan would be illegal it certainly is now anyway.
18014 	X	so to implement alan this would require changing the fact that if blocks are not alan.
18015 	X	why is this any more confusing than the fact that.
18016 	X	andrew koenig ark at research att com http www research att com info ark.
18017 	X	def iif r if r return r.
18018 	X	oh come on that is totally taken out of.
18019 	X	a better analogy would be requiring them for the addition.
18020 	X	there are times when its clearly useful to use parentheses for.
18021 	X	but that hardly means they should be required.
18022 	X	x a b illegal should be a b x a b c fine x a b c illegal should be a b c x f a b illegal should be f a b.
18023 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote being in love for real it aint like a movie screen india arie bosskey net aliens predator http www bosskey net avp a personal guide to aliens predator.
18024 	X	so far im keeping three lists suggestions that there was some independent affirmative support for which includes the three forms mentioned in the pep suggestions that i didnt see any affirmative support for and more general solutions that would only degenerate to the effects of a conditional operator in a special.
18025 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote light more light.
18026 	X	the last words of goethe a personal guide to online multiplayer first person.
18027 	X	i think its just proposal and even there im not entirely convinced that parentheses are always.
18028 	X	duplicating this with a function is.
18029 	X	no and that is a problem with.
18030 	X	i dont usually find functional forms all that easy to.
18031 	X	of those i used to use map the most and except when i want performance i now use a list.
18032 	X	i almost never used filter but i do use the if part of a list comp somewhat.
18033 	X	steven taschuk staschuk at telusplanet net wrote in message news.
18034 	X	sheffer used in for his postulates for boolean.
18035 	X	by boolean duality where you swap t with f and and with or pq can be consistently interpreted as either not p or q or not p and q but i this the former is how it is thought of more.
18036 	X	he did in the first version of the.
18037 	X	hes allowed to change his mind of course ly yrs anders.
18038 	X	the problem is that inline if must not evaluate its nd and d.
18039 	X	because the condition is often used to check applicability of true part like in.
18040 	X	sincerely yours roman suzi rnd at onego ru my ai powered by linux redhat.
18041 	X	the thing is symmetric unicode join u a b ua b.
18042 	X	but i guess the behavior is by chance and not.
18043 	X	unless the class method notation is an artifact i think something should be done about.
18044 	X	something like a super string class which is as dynamic as the join.
18045 	X	alternatively it would need to be considered to revert here and make the class method calling.
18046 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
18047 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
18048 	X	its only an ambiguity if you insist that the two forms meet in the.
18049 	X	theres no reason to make this happen simply keep things as is where an if keyword starting a statement always means an if.
18050 	X	as a standalone statement is syntaxerror perhaps with a slightly more helpful message attached.
18051 	X	if you really wanted the conditional operator surround it in.
18052 	X	no ambiguity since an if statement cannot possibly be preceded by an open.
18053 	X	it only involves additions to the grammar no.
18054 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote whoever contends with the great sheds his own.
18055 	X	http www pollywannacracka com the internet resource for interracial.
18056 	X	the students presumably know some natural language so they should learn to use add not when learning math.
18057 	X	so the students have some maths but not a lot.
18058 	X	in a math text i dont have a great deal of trouble with it despite were an engineer of course if the chars were interchanged i should be reaching for my integrator raygun.
18059 	X	early adopters get to form the language if there are many c c programmers who use python surely they should influence the way the language.
18060 	X	the teaching argument is used one place and discarded.
18061 	X	my former colleague chi wai programmed c and pascal without understanding or were able to read.
18062 	X	he looked at the symbols if while etc as though they were.
18063 	X	i agree we can say the words and get the meaning in many.
18064 	X	the trouble is that python is not side effect.
18065 	X	i dont see these things spelled out in python but simple is better than.
18066 	X	if all statements were strict top down left right evaluating that would make a simple way to explain the order in which things get.
18067 	X	of course if you demand that all the expressions are to be evaluated then any order will do but i feel that only two of the three should.
18068 	X	given that the condition must precede in logical evaluation the expression and my directional bias makes me want the condition lexically.
18069 	X	i have no objection at all to.
18070 	X	if c then x else y.
18071 	X	but others may want to spell it tersely cx y which is what specialists always end up.
18072 	X	of course as others point out python already is broken in the left right rule so it becomes harder to argue about side effects.
18073 	X	i know this is a poor argument but it has some.
18074 	X	there is a widely used verbose language called cobol which uses lots of english like.
18075 	X	i think zope in cobol would be a formidable achievement zope in mostly python is doable because of its expressivity which is in part due to.
18076 	X	if we base everything on a year olds understanding ability well get a dumbed down language which is unsuitable for serious.
18077 	X	almost everybody and especially programmers coming from c will write that as.
18078 	X	if hasattr obj method and obj method.
18079 	X	in c and are short circuiting but they always evaluate to or.
18080 	X	the do not evaluate to one of their arguments as in.
18081 	X	i think the main reason a and b or c is used at all is because its in the faq and because its always given as one of the work arounds when the ifelse expression topic come up on c l.
18082 	X	intevation gmbh http intevation de sketch http sketch sourceforge net mapit http www mapit de.
18083 	X	damien morton newsgroups at bitfurnace com wrote in message news.
18084 	X	theres a reason why many languages do chained ifs that way the nested if structure is too hard to.
18085 	X	geoff what about ifelse condition then clause else clause.
18086 	X	in every discussion of a ternary operator this sort of suggestion comes.
18087 	X	the problem with a new builtin is that all arguments must be evaluated before the function is.
18088 	X	this prevents the short circuit behavior that is so useful in many.
18089 	X	you can do that with the variable leakage in list comprehensions.
18090 	X	s ab abb abbb abb pat re compile r ab.
18091 	X	while m for m in pat search s if m print m group s s m start.
18092 	X	but yes this is a hack just like the ones used to emulate the ternary if else.
18093 	X	guido van rossum guido at python org writes.
18094 	X	on the idea of deciding language decisions by any kind of voting too.
18095 	X	why michael has cvs commit rights wink so he doesnt need to work on his private tar based.
18096 	X	not the fact that it grows but what it grows is.
18097 	X	if all weird ideas got implemented including some of my own then many people might leave.
18098 	X	in my book he has a quite well founded understanding of enhancements which other people still need to prove wink including.
18099 	X	arent you going a bit far with this accusation.
18100 	X	the point is that many of the supposed uses for ternary do have simple effective.
18101 	X	aahz aahz at pythoncraft com http www pythoncraft com.
18102 	X	register for pycon now http www python org pycon reg html.
18103 	X	from my point of view this is the most pythonic.
18104 	X	yes the test is in the middle of the.
18105 	X	the argument this is not the way other languages do ternary expressions is not a valid argument against its.
18106 	X	python is about about doing things the right way not the common accepted.
18107 	X	this is what makes python the great language it.
18108 	X	after reading messages regarding pep including a few ones off list i would like to know if someone offered himself to write a summary of the main arguments pro and.
18109 	X	it would be nice to have someone neutral working on.
18110 	X	as for myself im already too involved with the field to write it.
18111 	X	i know its a lot of work but it would be really.
18112 	X	it seems that the list is choking under load or it is experiencing some network related problem because it was never so slow.
18113 	X	carlos ribeiro cribeiro at mail inet com br.
18114 	X	except for the short circuiting functionality which was intended in the first.
18115 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote you cannot step into the same river.
18116 	X	cratylus python chess module http www alcyone com pyos chess a chess game adjudicator in.
18117 	X	oh bugger now youve just started that xx thread again.
18118 	X	hilsen regards max m rasmussen denmark.
18119 	X	http www futureport dk fremtiden videnskab skeptiscisme og transhumanisme.
18120 	X	it must be my lacking english then but dont care was not what i had in mind when i wrote indifferent.
18121 	X	some dont cares care enough to vote so calling them dont cares seems.
18122 	X	im conservative to any changes made to python its a wonderfull language as is so any change should bear its own.
18123 	X	and one way of weighting is to measure pro and contra against the total.
18124 	X	laura hints at why its difficult to get a correct overview of peoples likings youll never reach the whole population for one but if you only count pro and contra youll have no way to put those numbers into.
18125 	X	we have no way to establish a relation between yes no voters and yes no believers in the total python.
18126 	X	counting indifferent voters too would be a way to put the yes no counts into.
18127 	X	true again we have no way to relate the number of indifferent voters to the number of indifferent users in the whole population so whether using the indifferent votes to weight yes no votes might be silly but i feel left out.
18128 	X	well no yes dont cares thats quit a lot saying yes isnt.
18129 	X	the no people now they form a real.
18130 	X	so i would think that in this case they outcome could well be.
18131 	X	on the other hand no yes and yes thats an overwelming majority not particular keen on getting it.
18132 	X	or keeping it out so in this case i would deem it wise to refrain from adding it and luckely to me that seems to match guidos point of.
18133 	X	alex martelli aleax at aleax it wrote in message news.
18134 	X	i agree with the minus point although there sort of is an implicit list the list whentrue whenfalse which you are sort of filtering based on condition although the filtering does not return a list rather an evaluated.
18135 	X	i do think it can be confused with list.
18136 	X	but without the for and with the inclusion of else they do have a somewhat different.
18137 	X	i think parentheses would not distinguish this construct strongly.
18138 	X	i dont care for curly braces in general so id prefer not to see.
18139 	X	whentrue if condition else whenfalse doesnt really stand.
18140 	X	carlos now having three different idioms is better than having a carlos single one.
18141 	X	this reminds me of the bool.
18142 	X	andrew koenig ark at research att com http www research att com info ark.
18143 	X	i suggested it early on in the thread required parentheses or no and its been suggested independently as far as i can tell at least two more.
18144 	X	as someone pointed out some digging discovered that someone suggested it in a proposed pep which never went anywhere several years.
18145 	X	it seems to satisfy all the criteria reads left to right is unambiguous is easy to understand and requires no new.
18146 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote patiently im still holding out until sandra victor a lambda calculus explorer in.
18147 	X	raymond hettinger vzerxy at verizon net wrote in message news.
18148 	X	i am not so hot on the built in function macro however i have an idea why not the syntax if cxy.
18149 	X	the underscores would suggest that this is a special if which actually is not a function but a short circuiting.
18150 	X	the minus is that special methods are not short circuiting therefore this could be.
18151 	X	i like to reuse if here since there absolutey no risk of confusion with the if statement and the underscores suggest that something special is going.
18152 	X	dale strickland clark dale at riverhall nothanks co uk writes.
18153 	X	for those of us who have to read other peoples code and not just write our own that logic doesnt.
18154 	X	using a conditional operator as the sole expression in the conditional of an if statement is pretty bad style in any.
18155 	X	my point about it were red herring is that this is simply a general style issue in any language not just.
18156 	X	i suspect that its use will be very rare in python just like it is in c c java or.
18157 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote i always entertain great.
18158 	X	robert frost get your own customized newsfeed online in realtime for free.
18159 	X	i thought andrew koenig showed a way to enable the python parser to cope with.
18160 	X	gareth mccaughan gareth mccaughan at pobox com sig under construc.
18161 	X	he will return when it is.
18162 	X	that may be part of the c code he was presenting.
18163 	X	there is a long post on a bsd list somewhere that compares it to painting a.
18164 	X	everyone understands the concept and will give an opinion on the.
18165 	X	it is impossible to paint a shed by comittee because there are too many.
18166 	X	it is much easier to get a committee to approve a radical new widget because they just up or down vote it as a.
18167 	X	having a bdfl is how the shed painting problem is side stepped.
18168 	X	in this case the bdfl asked the committee to up or down vote the color.
18169 	X	for those not familiar with zope the test function is the obvious non short circuiting.
18170 	X	def test cond t f if cond return t return f.
18171 	X	as dan points out this is frequently insufficient in the context of zope template expressions since they often involve combining data from several incomplete.
18172 	X	a quick note on the slippery slope argument btw yesterday a member of the zpt mailing list had a problem that would have been nicely solved if he could have written the expression try f except g.
18173 	X	i would like to register another vote for an if then else expression in python specifically for christian tismers proposed variant.
18174 	X	the advantages are simple visual parsing no required parenthesis no change in the semantics of existing keywords not as likely as the proposal to be confused with statement syntax and does not further overload the.
18175 	X	the disadvantage is the implementation costs of introducing a new.
18176 	X	however unlike other new keywords the word then seems unlikely to have been used as a name in existing.
18177 	X	the argument against it the cost of implementation is mostly.
18178 	X	it is incurred only once and by the suppliers not by the.
18179 	X	all the other advantages of the syntax trump the other.
18180 	X	craeg k strong general partner ariel partners llc http www arielpartners com voice fax.
18181 	X	it introduces more parsing overhead in human readability than any change since list comprehensions and it introduces more semantic syntactic overhead in human readability than.
18182 	X	im still deeply unhappy about losing the fight to add a keyword to the front of.
18183 	X	aahz aahz at pythoncraft com http www pythoncraft com.
18184 	X	register for pycon now http www python org pycon reg html.
18185 	X	guido van rossum schreef op vrijdag februari om.
18186 	X	doesnt this equal z y bool d x bool c.
18187 	X	asperger syndroom een persoonlijke benadering http people nl linux org gerrit het zijn tijden om je zelf met politiek te bemoeien http www sp nl.
18188 	X	i think its insane to make up such special cases just to get some syntax.
18189 	X	for starters you would break quixote web application framework because they compile python so that an expression as a statement gets send to some.
18190 	X	breaking uniformity needs to be avoided as much as.
18191 	X	especially if the real need for the whole construct is.
18192 	X	we all like pythons easy grammar and uniformity dont we.
18193 	X	the use of curly braces screams dictionary when there is not a dictionary in sight and the use of the comma looks like tuples are involved when they are.
18194 	X	the list comprehension syntax uses brackets but at least thats appropriate the result is a.
18195 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote grab a club and join the chorus evolution is a state of mind oleta adams fauxident http www alcyone com pyos fauxident a faux ident daemon in.
18196 	X	i would say that especially when you have huge functions with side effects you should choose the liner over an.
18197 	X	often the two functions will have different arguments where you need to adapt.
18198 	X	adding this logic to the already too long expressions becomes a pain to maintain and.
18199 	X	far more often a ternary op is used to switch between two strings or two numbers aka.
18200 	X	result input y and yes or no.
18201 	X	and has the net side effect that people must understand in their learning process how and or works in.
18202 	X	calling different methods hints at conditional control flow and that is better done with an easy to read if statement which supports you by indentation i e visual.
18203 	X	i dont mind having to write the liner if i execute resource intensive.
18204 	X	james p rutledge jrut at spamcop net wrote in message news.
18205 	X	im not sure if it has come up before but what about the complete reverse.
18206 	X	val sqrt x or if x.
18207 	X	keeps options and condition separate reads left to right important bits usual value and condition are at the ends where you can find them looks a little bit like the current idiom most of the same objections to the pep form.
18208 	X	andrew koenig ark at research att com writes.
18209 	X	i like lambdas and some forms of list comprehensions because they make the resulting code more.
18210 	X	i dont like pep because im not convinced that it many things more.
18211 	X	im sure there are cases where it does but are there enough of them to justify it.
18212 	X	lambdas and list comprehensions both start with something that sets them apart in the.
18213 	X	lambdas with lambda and list comprehensions start out looking like a.
18214 	X	if you took the initial off of list comprehensions they wouldnt be nearly as.
18215 	X	while i dont object to the idea of a ternary operator per se i find this one.
18216 	X	the problem is that it does magic but you dont know that until youve read the first.
18217 	X	i think that results in an overall lowering of the readability of the.
18218 	X	mike mike meyer mwm at mired org http www mired org home mwm independent www perforce freebsd unix consultant email for more.
18219 	X	erik max francis max at alcyone com wrote in message news.
18220 	X	what do you mean when you say it is wrong to combine two selection operators to make a selection expression.
18221 	X	you surely do not think it is wrong to combine operators of other types so why the special no combine rule for this pair.
18222 	X	again see pep pythons conditional selection operators for my understanding of and.
18223 	X	it seems to me that you perhaps do think their definition is wrong in spite of what you said because to me if components are ok so is their combination.
18224 	X	unfortunately it doesnt provide short circuiting for any of the times when short circuiting is actually important its unlikely that a parameterless function call would be that useful not to mention the more common uses like preventing invalid attribute access preventing divide by zero.
18225 	X	it would appear that adding a new keyword is a problem major extra hurdle to be.
18226 	X	there really arent any semantic differences per.
18227 	X	i just thought it would help distinguish between if expressions and if statements and it would eliminate the possibility of if x if c else y pass but it looks like x if c else y will cause fewer problems to implement and besides its not that difficult to tell the difference between if c x else y and x if c else y.
18228 	X	and as someone posted you can always use if x if c else y pass.
18229 	X	so i think ill just give the when advocacy a.
18230 	X	i do still prefer it d.
18231 	X	chris liechti cliechti at gmx net wrote in message news xnscdbcliechtigmxnet at.
18232 	X	so youre saying that with the form where c is the test expression x is the expression to evaluate if it evaluates true and y is the expression to evaluate it false then your proposal is.
18233 	X	contrary to what you had written previously.
18234 	X	i want to make sure i understand your proposition for the list im.
18235 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote when you love somebody youre always in.
18236 	X	sherman potter a simple python opengl rendering.
18237 	X	but its already there so it trumps that.
18238 	X	its a well entrenched python feature so its a priori pythonic even if guido sort of changed his mind.
18239 	X	but im not aware of anything that would get things in the left to right order that wouldnt introduce a new keyword or two are you.
18240 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote she glanced at her watch it was.
18241 	X	james clavell bosskey net quake iii arena http www bosskey net qa a personal guide to quake iii.
18242 	X	you say standard versions but there is no such thing in the realm of computer.
18243 	X	pythons and or operators behave just like lisps for example and lisp is around a very long.
18244 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote man is preceded by forest followed by.
18245 	X	graffiti written during french student revolt computer science http www alcyone com max reference compsci a computer science.
18246 	X	no it suggests that we should we should make things easy for the majority of python programmers who also use other.
18247 	X	python will never become c or perl it will always be.
18248 	X	however python shares lots of features with these langauges and other langs already for example use of if keyword to denote conditionals use of symbols to denote numbers use of to denote addition use of to denote assignment etc.
18249 	X	would you throw these features away just because other language you dont like use them too.
18250 	X	you are coming across as a language.
18251 	X	python already has a lot of features in common with these.
18252 	X	philip hunt philh at cabalamat uklinux net memes are a hoax pass it on.
18253 	X	additions to the language affect future use of the.
18254 	X	have you never had to maintain a piece of software.
18255 	X	adding to it can reduce that.
18256 	X	aahz at pythoncraft com aahz writes.
18257 	X	i explain it to a completly newbie who has never seen any.
18258 	X	after explaining the classic if else i show the pep she understood it.
18259 	X	often people compare this to list.
18260 	X	i try to explain it it was a lot more difficult and she didnt see where it could be.
18261 	X	she understood for and list imediatly.
18262 	X	finaly i show the sames examples in c and she understood imediatly why python is cool even with the new pep.
18263 	X	so dont worry for the beginers the teatchers and the.
18264 	X	this new pep is intuitive and.
18265 	X	but exceptions are cheap in python there is really no need to avoid them yes i know this can be a difficult concept for someone coming from the c world.
18266 	X	zip code some zip or find zip some address.
18267 	X	which does exactly the same thing without new syntax.
18268 	X	anders hammarquist iko at cd chalmers se physics student chalmers university of technology hem gteborg.
18269 	X	jeremy im like on the idea of a conditional expression.
18270 	X	oh good that means i dont need to try to convince.
18271 	X	andrew koenig ark at research att com http www research att com info ark.
18272 	X	why would they expect lazy evaluation.
18273 	X	other python functions dont provide lazy evaluation so no one should expect.
18274 	X	adding ifelse or iif to the standard builtins makes it easy to use without bothering to import a module or set up an environment so suits the people requiring.
18275 	X	thats a pretty contrived example and thus you wouldnt want to do it with a dictionary but with.
18276 	X	if a x f elif g asdf x g elif c x yep else x nope.
18277 	X	which has the advantages that there is a defined order in which the non exclusive conditions are checked wink.
18278 	X	and let me try it with pep just for amusement.
18279 	X	yes but you already have exactly this functionality with lambda.
18280 	X	all this proposal suggests is making the lambda keyword optional for zero argument anonymous functions or.
18281 	X	this makes code less readable and more arcane not.
18282 	X	no i dont agree with that at.
18283 	X	pep suggests the addition of a concise short circuiting conditional operator where none is presently available getting the full functionality of a conditional operator with presently available python results in monstrosities like.
18284 	X	c and lambda x or lambda y.
18285 	X	which defeat the whole purpose for wanting the operator in the first place conciseness and readability.
18286 	X	pep simply suggests a shortcut for.
18287 	X	by making it legal to write it as.
18288 	X	this is purely syntactic sugar and just strips off perfectly readable keywords to make things shorter rather than more.
18289 	X	one can certainly make arguments if they find the use of lambdas acceptable one way or the other but when you come across a lambda you sure as hell know what youve just stepped.
18290 	X	i really fail to see the advantage in removing the one keyword that sets the code apart watch out there is a thunk here.
18291 	X	and thats a really tremendously big difference quite.
18292 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote were here to preserve democracy not to practice.
18293 	X	frank rasmey a counter strike server log file monitor in.
18294 	X	carel the proposal as is looks reasonable to me it would clean up carel those few uses of a and b or c that i have in my.
18295 	X	would you mind showing us some concrete examples.
18296 	X	i think that some real code examples would be quite useful to the.
18297 	X	andrew koenig ark at research att com http www research att com info ark.
18298 	X	at first i thought eeek but five seconds later it already started to look familiar and.
18299 	X	georg mischler simulations developer schorsch at schorsch com schorsch com lighting design tools http www schorsch com.
18300 	X	terry reedy tjreedy at udel edu writes.
18301 	X	learn to love the return key ly yrs m.
18302 	X	in case youre not a computer person i should probably point out that real soon now is a technical term meaning sometime before the heat death of the universe maybe.
18303 	X	i dont remember seeing any more agreement on the replacement proposal than there was on the original one or any one of the other alternatives.
18304 	X	greg ewing computer science dept university of canterbury christchurch new zealand http www cosc canterbury ac nz greg.
18305 	X	yep and i thought id explained why i want my dont care ticket.
18306 	X	but i do follow c l py i even try to follow this thread.
18307 	X	and i do care about the outcome whatever it.
18308 	X	so why should my position not be accounted for.
18309 	X	god knows how many not voters are dead against pro or indifferent to this language.
18310 	X	the only clue we get is through.
18311 	X	so why is it that pro against votes of voters do count although their might be many many more against pro users not voting and indifferent voters not count at all.
18312 	X	sure youll agree that if pro against groups both were real minorities that then changing the language was out of the.
18313 	X	there are many small groups lobying to get their pet in and it would be silly to do.
18314 	X	unless its a great idea and fortunately thats still guido to decide.
18315 	X	if indefferent votes were counted too we could tell how large or small the pro against groups are all related to the number of people taking their time to vote.
18316 	X	andrew dalke adalke at mindspring com skrev i en meddelelse.
18317 	X	short circuiting was useful in the other also it relieved the programmer from having to consider whether redundantly evaluating the unused case would be.
18318 	X	i have no intention on carrying on a debate with someone who merely intends to invoke logical fallacies to win at any.
18319 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote sentimentality is a superstructure covering.
18320 	X	c g jung esperanto reference http www alcyone com max lang esperanto an esperanto reference for english.
18321 	X	but you also missed the important point that the conditions were reversed the evaluate as true expression goes is the second element of the tuple the evaluate as false is the first.
18322 	X	this demonstrates the inutility of these workarounds its not clear what they want to do they have flaws and its easy to get them.
18323 	X	but people want the functionality of conditional expressions so they will use these.
18324 	X	they will make code less readable and more prone to.
18325 	X	any classification such as readable elegant is going to be.
18326 	X	if there werent subjective elements to this debate it wouldnt still be going.
18327 	X	the solutions you offer are unreadable subjectively over a very wide range of subjective opinions even.
18328 	X	suggesting them as alternatives and then asking now why do you really want a conditional operator if you already have these.
18329 	X	you know damn well why i we think theyre unreadable and even you agree subjectively that theyre.
18330 	X	the point here is that both sides make their case so that the bdfl can make a judgement.
18331 	X	the problem with selecting a preferred syntax is that there are extra parameters in the choice that make some more preferable than.
18332 	X	the introduction of new keywords is eschewed so forms i might prefer like if p then x else y parentheses required or not are out of the running before we get.
18333 	X	i dont know how strong the bdfls objection to new keywords and one like then which seems unlikely to be commonly used in code to me ive specifically avoided it myself because it looks like a keyword are but i bet theyre stronger than his objection to the use of in p x y one id agree with for python since colons are already used for important syntactical and this is a non analogous application.
18334 	X	so the choice of the alternate syntax really depends on how strong his objections are to each other and how wedded he is to those.
18335 	X	we dont know those weights so it makes it hard to say i want this syntax here and should the main vote pass know it will be an option.
18336 	X	i would be willing to settle for x if p else.
18337 	X	there are always alternatives such as the single element list or the lambda trick.
18338 	X	the question is whether those alternatives are worse than the.
18339 	X	in each of the real world suggestions that have been proposed the anti conditional operator crowd has missed the whole point by saying well you could just do this.
18340 	X	of course you could there are myriad ways of writing the same.
18341 	X	the question is whether those examples stand as more readable than the alternatives on their.
18342 	X	i think that for some of the examples they do and thats why i support the addition of a conditional.
18343 	X	if youre inherently against the addition of a conditional operator in absolute terms then you will always find the non conditional forms which no one ever denied existed more.
18344 	X	ive actually seen some opponents of the pep i dont believe it was you so im not suggesting you are responsible insist that the proponents show them a form where a conditional operator is absolutely required.
18345 	X	we all have to know that no such form exists python is expressive enough that there will always be an alternative formulation if there werent conditional operators would already be in the.
18346 	X	thats not the point and it naver.
18347 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote life is an effort that deserves a better.
18348 	X	karl kraus alcyone systems san jose.
18349 	X	most of the people who dont care will also not be.
18350 	X	theyre probably not reading comp lang python.
18351 	X	i remember when came out and people found out about string.
18352 	X	a whole bunch of them came back to post articles about how they thought the new join syntax was really awful and.
18353 	X	they only cared after it got in but enough to complain a.
18354 	X	this is an argument that such things should not be decided by popular vote and i.
18355 	X	that were said i think that we have broad consensus here that perl is an ugly language to.
18356 	X	people who switched from perl in order to have a beautiful language to use every day voted their personal preference with their.
18357 	X	if they decide that python has become too ugly and they get a more beautiful alternative they will vote with their feet.
18358 	X	i prefer not having nots because its harder for me to think backwards especially since you use both in and not in.
18359 	X	ahh i was trying to classify people in the monty python skit as a decision.
18360 	X	there are three people vikings waitress and customer.
18361 	X	q does the waitress like something the vikings do.
18362 	X	a the vikings like eggs but the waitress does.
18363 	X	q okay so if the person like spam that person is either a waitress or a viking right.
18364 	X	q okay heres the python code.
18365 	X	if spam in person likes if eggs in person likes role viking else role waitress else role customer a hmmm yep looks good to.
18366 	X	and thats how i came up with my.
18367 	X	it could be done with a not but thats not how the dialogue.
18368 	X	i proposed this partially as a counter to examples which were pro if else but also taken from overly simple and likely infrequent.
18369 	X	guido van rossum guido at python org wrote in message news.
18370 	X	for me there are some points to consider.
18371 	X	im a c c veteran and have no difficulties reading a ternary operator like.
18372 	X	although it might look weird for many people i often prefer not to spread the handling of alternatives into statements instead of doing it in the expression.
18373 	X	using if else statements would often lead to repetion of.
18374 	X	for example i would not like to code a complicated printf twice only because a single argument has two.
18375 	X	in python i often use the construct.
18376 	X	b it is somewhat counter intuitive because the if and else parts inside the sequence are in the wrong.
18377 	X	on the other hand i like this construct because it is more general than.
18378 	X	instead of using a truth value as an index one can use any integer value as an.
18379 	X	given that i ask myself if it would not be possible to have such a multi selection in expressions but without the disadvantage of all alternatives were evaluated like in else if condition.
18380 	X	this might be accomplished with something like a lazy evaluation sequence a sequence the members of which are only evualated by a subscript.
18381 	X	achieve this effect by using lambdas as sequence members like in.
18382 	X	but a i think this looks really weird and b i suppose it is very.
18383 	X	i also believe that such a lazy evaluation sequence would not hurt the spirit of python because python is already very strong in processing sequences like tuples lists and now.
18384 	X	im not sure if such a construct can be introduced into python but if its possible imho it would be better to abandon a ternary operator and instead introduce the more general and powerful concept of a lazy.
18385 	X	i think both constructs arent very.
18386 	X	given that i would introduce only the more powerful.
18387 	X	the more this discussion drags on the less i like any of the.
18388 	X	the current and or trick is looking less good to me too but im starting to think its better to place more effort on programmer education about why its bad than on ways to replace it with something less.
18389 	X	what does this look like in an if body if cond then expr else expr.
18390 	X	and no mandatory parentheses arent good enough to fix.
18391 	X	david eppstein uc irvine of information computer science eppstein at ics uci edu http www ics uci edu eppstein.
18392 	X	on tue feb greg ewing using news cis dfn de.
18393 	X	does that include cases where the nesting is in the value producing part like x for x in range y for y in blah.
18394 	X	aahz many people including me think its not.
18395 	X	if i were trying to make code easy to understand for inexperienced programmers i would write str join lines instead of join lines.
18396 	X	andrew koenig ark at research att com http www research att com info ark.
18397 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
18398 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
18399 	X	should there really be made an inconsistency like that for a marginal featue like this.
18400 	X	one of the great thing about the ternary operator is its.
18401 	X	that is completely gone with that.
18402 	X	so i must say that i strongly favor.
18403 	X	hilsen regards max m rasmussen denmark.
18404 	X	http www futureport dk fremtiden videnskab skeptiscisme og transhumanisme.
18405 	X	i do like the ternary operator but strongly dislikes the above.
18406 	X	normally an if sentence has the form.
18407 	X	but now suddenly the if should act like some kind of function and return a value.
18408 	X	and what is this with parens that has to be there.
18409 	X	this is so inconsistent with how parens are used normally in.
18410 	X	normally they are only needed for tuples functions and multiline.
18411 	X	indeed as did carel fellinger elsewhere the first time she tried to use.
18412 	X	so if else is for the results of an expression less prone to.
18413 	X	though with some cases as in.
18414 	X	is html true ext txt html is html.
18415 	X	roman suzi rnd at onego ru wrote in message news.
18416 	X	i think he was making a joke about pep.
18417 	X	the tricks ive used elsewhere dont work here so this is indeed one where the if else expression would make things clearer and where short circuit evaluation is needed and.
18418 	X	hmmm well heres an ugly trick.
18419 	X	col none cols max i i.
18420 	X	but neither have the grace of.
18421 	X	otoh i still say this is easier to debug because i can do.
18422 	X	i col none else print i i neighbors cols max i i col cols i.
18423 	X	but equally obviously the point of this example is to invite you to consider analogous examples for which there isnt a ready made.
18424 	X	andrew koenig ark at research att com http www research att com info ark.
18425 	X	and the broken alternatives get used in the standard library in python code.
18426 	X	this isnt an abstract matter of gee what if the deficient alternatives are were used even by seasoned python.
18427 	X	and as weve all seen from andrew koenigs example cause.
18428 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote there i was there i was splitting atoms with my desire lamya computer science http www alcyone com max reference compsci a computer science.
18429 	X	which i personally have no strong objection to i just dont think their necessity is necessary.
18430 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote being in love for real it aint like a movie screen india arie bosskey net aliens predator http www bosskey net avp a personal guide to aliens predator.
18431 	X	in some cases too many indentation levels can be a.
18432 	X	the type of code that i write most of the time scripts to filter and prepare analytical reports based on relational data is full of simple tests that can be conveniently written as conditional expressions things like substituting a null value with zeros or fixing fields that were left unassigned in the original database.
18433 	X	by doing this the program structure would be much cleaner without four line if blocks that are not part of the program logic but are there to do simple translations and adjustments on the data were.
18434 	X	you hit a chord here thats would be a good substitute for almost all of my usages of a conditional.
18435 	X	real databases arent perfect it is common to have a few records with missing or invalid fields that have to be effectively filtered or ammended when processing the.
18436 	X	of course it is much better to validate the data on input but there is a limit on what you can do in practice for example too much validation may turn a system unusable because missing data is sometimes a fact of.
18437 	X	and even you try to enforce it people always find a way around but thats another matter.
18438 	X	in the end you have to deal with all these exceptions when building analytical reports and your proposal comes perfect in this.
18439 	X	carlos ribeiro cribeiro at mail inet com br.
18440 	X	the reason the makes sense for me is that the syntax here is essentially the same as for if except that this is an.
18441 	X	to make it even more analogous it could be.
18442 	X	which now that i look at it again is what paul rubin actually.
18443 	X	i guess i dropped the second because its.
18444 	X	but you do need something between c and x.
18445 	X	why add a new keyword otherwise when an existing one fits perfectly and causes no conflicts.
18446 	X	else in this context seems like a no.
18447 	X	as for chaining that could work in a couple ways depending on the choice of.
18448 	X	with ifelse elif is the obvious choice.
18449 	X	ifelse c x elif c y else z.
18450 	X	of course whether chained conditionals are even desirable is a subject of.
18451 	X	they can always be implemented via nesting however and id say that.
18452 	X	ive not been reading c l py for a few days so im not sure which branch of this thread to reply to.
18453 	X	i have always hated cs ternary operator syntax.
18454 	X	i never used it that much and every time i did i had to look up the.
18455 	X	i really hope python does not simply adopt this syntax as i think it will go on torturing newbies and casual programmers like myself if it.
18456 	X	is it cond a b or cond a.
18457 	X	b i can never remember this.
18458 	X	b or how about a cond.
18459 	X	b they all make exactly the same amount of sense to.
18460 	X	which is to say not much.
18461 	X	note that i am not objecting to the functionality but rather the symbols used to encode.
18462 	X	likewise i find the current kludge of using cond and a or b to be annoyingly.
18463 	X	it works by a kind of trick and not for the reason it reads.
18464 	X	it gets you when youre not expecting it and surely thats a good reason not to use.
18465 	X	again this is for newbies and casual programmers but my understanding of python is that its supposed to be newbie.
18466 	X	i also find the if cond a else b syntax confusing because it looks too much like the statement syntax and i just cant warm up to the.
18467 	X	i especially dont like the overloaded meanings of the.
18468 	X	i therefore would like to voice support for either of the following new keyword options.
18469 	X	d a when cond else b.
18470 	X	this is my favorite thank you m pinard.
18471 	X	i like the chaining which is superior to the c alternative of nesting the.
18472 	X	i also think this one reads the nicest and does not cause.
18473 	X	although where is just as good as when btw and has the advantage of were used in nearly the same way in.
18474 	X	not that we care but i think its.
18475 	X	i dont really prefer either over the.
18476 	X	the main thing i like is that it properly places the most common action d a at the beginning where it reads.
18477 	X	then we add the exceptional case onto the.
18478 	X	it has the feel of the try except syntax in.
18479 	X	each successive when introduces a fall.
18480 	X	d cond then a else b.
18481 	X	if you must have the cond a b order please use this.
18482 	X	however i dont like it as much because.
18483 	X	it does not read as an expression in.
18484 	X	then while not a python keyword is part of an if block in so many other languages especially perl and shell languages i feel it could be confusing to people switching back and.
18485 	X	when does appears as a keyword in some languages but is much more distinct and also usually appears in expression syntaxes i think just like where in idl.
18486 	X	neither of these objections is a killer though i could learn the then else syntax and be happy with.
18487 	X	i think that the improved clarity is worth the hassle of introducing a.
18488 	X	i would also like to say that i find a greater need for what the ternary operator does in python than i do in c im not sure why but it comes up more.
18489 	X	maybe im just remembering using it in zope where it is definitely useful in dtml and probably zpt too.
18490 	X	so far ive gotten away with the cond and a or b syntax but i dont like the potential pitfalls it always adds an extra amount of testing to make sure im not fooling.
18491 	X	anyway thats my two cents on.
18492 	X	anansi spaceworks http www anansispaceworks com.
18493 	X	james by observing that this is a special case of a tuple literal james followed immediately by a selector it becomes apparent that james only one of the expressions is actually needed and that the james tuple construction and evaluation of all of the expression james elements is unnecessary and can be optimized away to leave james after evaluation of the selector a need to evaluate only one james.
18494 	X	this would allow the evaluation of only one of the james expressions in the tuple and provide the equivalent of short james circuit.
18495 	X	the reason is this suppose instead that you had written this.
18496 	X	the idea of course is to avoid trying to compute the square root of a negative.
18497 	X	but if whether sqrt x is evaluated depends on an optimization then this code will work on some implementations and fail on.
18498 	X	even worse if youre using an implementation on which it works no amount of testing will ever reveal the.
18499 	X	so i really really really really really dont want to leave it up to the implementation whether to evaluate unused parts of tuples unless that choice is firmly tied to the optimization flag so i can force it one way or the other for testing.
18500 	X	andrew koenig ark at research att com http www research att com info ark.
18501 	X	no thats not a short circuiting.
18502 	X	aahz aahz at pythoncraft com http www pythoncraft com.
18503 	X	register for pycon now http www python org pycon reg html.
18504 	X	fwiw the pep itself makes the better argument if you need to know c for it to be clear its bad.
18505 	X	steven taschuk w w staschuk at telusplanet net u.
18506 	X	he posted at least one additional example i.
18507 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote i am still.
18508 	X	michaelangelos motto maths reference http www alcyone com max reference maths a mathematics.
18509 	X	this is wrong since this is not meaning and at.
18510 	X	the proposal is not bad but the problem is.
18511 	X	this is indeed maximal ugly to.
18512 	X	python used to step behind as a language putting the problem into the.
18513 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
18514 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
18515 	X	for the two examples i gave probably either.
18516 	X	if x y a x else a y.
18517 	X	perhaps encapsulating that in a min function.
18518 	X	if i hex c chr i else hex c chr i.
18519 	X	short circuiting is nice but how often do you really need it.
18520 	X	aahz aahz at pythoncraft com http www pythoncraft com.
18521 	X	register for pycon now http www python org pycon reg html.
18522 	X	heres another example this one from lib test test iter py starting at line.
18523 	X	def test builtin map self self assertequal map none sequenceclass range self assertequal map lambda x x sequenceclass range.
18524 	X	d one two three self assertequal map none d d keys self assertequal map lambda k d d k d k d d items dkeys d keys expected i len d and dkeys i or none i i len d and dkeys i or none for i in range.
18525 	X	this code works as written but only by.
18526 	X	if for example i were to change the initialization of d to.
18527 	X	andrew koenig ark at research att com http www research att com info ark.
18528 	X	sure and most people will at the very least write it in parens as.
18529 	X	and i agree that its use will be.
18530 	X	i just think it will also be used incorrectly when other more appropriate python idioms are available about of the.
18531 	X	c c idioms dominate how many people think about programs and so those constructs will come to mind often before the python ones even for people who are good python.
18532 	X	gareth mccaughan gareth mccaughan at pobox com wrote in message news.
18533 	X	there is still a vote to agree on and.
18534 	X	in article eppstein at news service uci edu.
18535 	X	thats still not addressing my point how often is short circuit evaluation needed.
18536 	X	thats the only reason to consider conditional expressions rather than a new builtin conditional.
18537 	X	aahz aahz at pythoncraft com http www pythoncraft com.
18538 	X	register for pycon now http www python org pycon reg html.
18539 	X	steve however it clearly introduces new precedence problems into the steve syntax how do i know you meant.
18540 	X	steve self stream writeln ran d test s in.
18541 	X	steve and not apart from the run time error it would produce.
18542 	X	steve self stream writeln ran d test s in.
18543 	X	steve methinks anything that allows colons inside expressions will be steve tough for us to.
18544 	X	you know which of the alternatives above i mean in the same way you know that.
18545 	X	foo lambda x y x y.
18546 	X	foo lambda x y x y.
18547 	X	foo lambda x y x y.
18548 	X	you can like or dislike the existing rules for colons inside expressions but im not proposing to change.
18549 	X	andrew koenig ark at research att com http www research att com info ark.
18550 	X	i like this forget what i said abot colons usually mean blocks sean news.
18551 	X	damien morton newsgroups at bitfurnace com wrote in message news.
18552 	X	python list at python which the as operators work.
18553 	X	as i explained in the referenced post only and and or are.
18554 	X	a nand b pretty much has to be one of falsetrue rather than one of.
18555 	X	samuele if you repeat this argument another time im gonna.
18556 	X	people keep bringing up the same incorrect circumlocution so from here it looks like theyre not.
18557 	X	samuele and you are overgeneralizing my.
18558 	X	either that or youre oversimplifying mine.
18559 	X	andrew koenig ark at research att com http www research att com info ark.
18560 	X	terry given this understanding which i realize i should explain terry further it is straightforward and obvious that their terry combination forms a conditional selection expression just as terry the combination a b c forms an arithmetic.
18561 	X	the reason it is wrong is the result when a is true and b is.
18562 	X	if a and b or c were really a conditional selection expression then you would expect the result to be b.
18563 	X	andrew koenig ark at research att com http www research att com info ark.
18564 	X	laura pointed out that a straight acceptance vote is biased toward no change.
18565 	X	the bias arises because some who want a ternary operator would still prefer no change to certain.
18566 	X	one way to solve this one is a two pass vote procedure with the first step selecting the most popular alternative and then having a straight go or no go vote on the.
18567 	X	this would also be the most helpful for guido here is the communitys most accepted proposal and here is the proportion that prefer it to no change at.
18568 	X	if aahz wants to be clever i can image that he can optimize this into a single vote with instructions like rank order the alternatives from most acceptable to least acceptable then for each one mark whether you prefer it to no change at.
18569 	X	besides removing the built in bias it has the advantage of allowing those who prefer no change to still be able express which alternative they find to be the least.
18570 	X	paul id like to see some concrete examples of where this is a paul significant.
18571 	X	its always significant to me because it gets in the way of saying what i.
18572 	X	i dont want to write x y not z instead of x if z else y because when z is true i dont want the reader to have to care at all about y and similarly when z is false i dont want the reader to have to care about x.
18573 	X	efficiency doesnt enter to it at least not for.
18574 	X	andrew koenig ark at research att com http www research att com info ark.
18575 	X	guido van rossum schreef op vrijdag februari om.
18576 	X	if c x elif d y else z.
18577 	X	imho if else clauses should never be.
18578 	X	imho conditions should be before resulting.
18579 	X	imho since else is obliged x if a is not allowed but x if a else none is which is not.
18580 	X	i would prefer this one to the x if a else b variant but would still vote.
18581 	X	i disagree that its hard to understand for people not used to a c derived language at least it is not true for me and python was my first serious language.
18582 	X	asperger syndroom een persoonlijke benadering http people nl linux org gerrit het zijn tijden om je zelf met politiek te bemoeien http www sp nl.
18583 	X	i have just tested my girlfriend showing her the examples provided by.
18584 	X	of course it means that a is equal to i understand that.
18585 	X	there are two mistakes should be and the colons after else are.
18586 	X	this statement means that if a then b can be or.
18587 	X	let me check my e mail first.
18588 	X	i had a big trouble explaing to her that b cannot be or it is if a and it is.
18589 	X	she said the else was confusing and the colons.
18590 	X	my girlfriend is a french teacher she also speaks italians english spanish a little rumenian portuguese and some words of.
18591 	X	she insists that the current python usage of colons is wrong and confusing.
18592 	X	it was impossible to convince her that was.
18593 	X	i must admit that my faith that python is a big language for beginners is shaken.
18594 	X	carel fellinger carel fellinger at chello nl wrote in message news.
18595 	X	both of these forms have been explicitly rejected by the bdfl although for different reasons check the current state of the.
18596 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote i always entertain great.
18597 	X	robert frost get your own customized newsfeed online in realtime for free.
18598 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
18599 	X	in a message of thu feb pst erik max francis writes.
18600 	X	aha so you do understand what will happen in approval voting a where you get to select no change when people vote for for example their own if they have it bengt richers proposal and no change thus demonstrating that there exists no supporter of the ternary operator who did not also think that bengts proposal was acceptable to them.
18601 	X	when i came along sole supporter of no change and cast my single for no change no change will win.
18602 	X	and you do understand that in approval voting b where anybody who selects any alternative does not get to vote no change i could bring a different electorate each one this time having written their own ternary syntax and have each of them vote only their own they wont vote for any others beause they totally hate all the other ones that are not their own and would rather have no change than those others.
18603 	X	then along comes alex martelli and he hasnt had time to write his own.
18604 	X	the logical fallacy of ad hominem is when i say dont vote for ternaries because max is an.
18605 	X	i didnt say you were an idiot i said that you didnt understand how approval voting.
18606 	X	and if you are still for approval voting a then i think that you still do not understand.
18607 	X	to me the semantics of function call is well defined in.
18608 	X	it works the same way for all functions and that way is to not do lazy.
18609 	X	a form like if condab which looks like a function except for using a keyword seems to me like it would be confusing precisely because it looks like a function but its behavior is subtly.
18610 	X	me too but offhand it appears to me that the downsides of the forms you can use today for this kind of need such as.
18611 	X	strs i and or str i for i in ints.
18612 	X	strs str i i for i in ints.
18613 	X	may not be that extreme with respect to the proposed new form as to warrant the new.
18614 	X	so im of two minds about.
18615 	X	there are better use cases where both expressions can have side effects and can possibly be false but not.
18616 	X	that may explain it i love lcs and detest pythons too limited hobbled lambdas so of course im of two.
18617 	X	i think if c x else y is the front runner but id be satisfied with c then x else y or if c then x else.
18618 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote so look into my eyes i wont tell you lies neneh cherry the best hard science web sites that the web has to.
18619 	X	tim well if you try to prove that a piece of code is correct when tim you dont understand what it does its going to be very easy tim indeed to find not obvious.
18620 	X	whats more surprising to me tim is that you found half the instances obvious despite not knowing tim the codes intent wink.
18621 	X	what i think is more interesting is this code from lib unittest py.
18622 	X	self stream writeln ran d test s in.
18623 	X	run run and or s timetaken.
18624 	X	when the and or idiom causes a bug in the standard librarys test module i think its time to seek a more robust alternative.
18625 	X	andrew koenig ark at research att com http www research att com info ark.
18626 	X	this looks buggy to me why only elements.
18627 	X	read the pep thread then come back and tell us that python is almost petrified.
18628 	X	a were happy to discuss useful changes new useful changes that.
18629 	X	but when subject xyz is discussed to death a million times and every time the conclusion is were not changing xyz these are the reasons why and thats final thats.
18630 	X	so when someone else comes along later and says hey guys we should change xyz is it any surprise that nobody is willing to listen.
18631 	X	the faq entry discussing why have an explicit self is here btw.
18632 	X	http www python org doc faq html.
18633 	X	robin munn rmunn at pobox com http www rmunn com pgp key id xafb ff cffb a f d acfd afb.
18634 	X	the third is that the community resoundingly reject the.
18635 	X	its the close the book part hes after not a specific way of closing.
18636 	X	you can believe hell take it whatever it turns out to be as final.
18637 	X	sometime in the last century wink guido made a post which he said was his last word on whitespace vs curly braces and you havent heard a word on that topic from him again the topic no longer exists to.
18638 	X	this is the last time hes willing to devote brain cells to conditional expressions whether for or against.
18639 	X	i couldnt recall seing that either but then i looked through some very old c code of mine and found a couple.
18640 	X	i had a hard time deciphering them and one of them looked possibly.
18641 	X	so its not something i would advocate doing now but they do.
18642 	X	david eppstein uc irvine of information computer science eppstein at ics uci edu http www ics uci edu eppstein.
18643 	X	in article yuraream fsf at europa research att com.
18644 	X	approval voting as a term applies to a system where one can vote yes no abstain on each of several.
18645 	X	condorcet is one of a series of ranking systems where one lists items in the order in which one prefers.
18646 	X	the problem with all the ranking systems that ive seen is that there is no way to directly indicate.
18647 	X	this is deadly to irv but i dont particularly like that condorcet doesnt fix that.
18648 	X	the flip side is that ranking systems generally do well at finding the result that the fewest people object to even without no.
18649 	X	it is a provable axiom that no voting system is perfect.
18650 	X	thats interesting but i really am only interested in answers to my precise.
18651 	X	aahz aahz at pythoncraft com http www pythoncraft com.
18652 	X	register for pycon now http www python org pycon reg html.
18653 	X	my first reaction is that as a general conditoinal form that doesnt look so.
18654 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote if you cant fight and you cant flee.
18655 	X	robert elliot physics reference http www alcyone com max reference physics a physics.
18656 	X	chaining two together would result in.
18657 	X	which has an obvious contraction to.
18658 	X	if c x elif d y else z.
18659 	X	all consistent with what you already know newbie or not about the semantics of the if.
18660 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote ride ride this wave of mine res esperanto reference http www alcyone com max lang esperanto an esperanto reference for english.
18661 	X	and my at least implicit argument is that without analysis is hard to tell if a gut feeling has basis in.
18662 	X	heres an analysis of the python.
18663 	X	modules almodule c if port alopenport name dir config.
18664 	X	config config null null modules almodule c if port alopenport name dir config.
18665 	X	config config null null modules imgfile c if len.
18666 	X	xsize ysize zsize objects fileobject c if pyarg parsetuple args f f binary.
18667 	X	s t s n objects typeobject c if i.
18668 	X	isalpha p isalnum p p python bltinmodule c else if pyarg unpacktuple args op py lt.
18669 	X	min max v dalke at pwa python wc c tail total dalke at pwa python wc c tail.
18670 	X	none are your exact construct but two are close and both of those are more complex.
18671 	X	so theres a ballpark estimate of one use every lines with a large uncertainty requiring the analysis of another code.
18672 	X	heres another estimate using the linux.
18673 	X	ipc sem c if ipcperms sma sem perm alter.
18674 	X	s iwugo s irugo ipc shm c if ipcperms shp u shm perm shmflg shm rdonly.
18675 	X	s irugo s irugos iwugo mm mmap c if prev.
18676 	X	vma dalke at pwa linux wc c tail total dalke at pwa linux.
18677 	X	use in lines if you accept that that is close enough to your.
18678 	X	notice that i omit counting the use of.
18679 	X	used in the boolean expression at the top level of the if.
18680 	X	going one level deeper into the kernel tree i found the following.
18681 	X	drivers block ataflop c if drive mach is falcon return drivers block ide pci c if dev class.
18682 	X	pci class storage ide dev class port.
18683 	X	drivers cdrom sonycd c if status ignore status bit.
18684 	X	drivers char n tty c else if tty read cnt amt.
18685 	X	amt drivers isdn isdn common c if p.
18686 	X	s p s last s p drivers net atarilance c if o riebl rsvd start.
18687 	X	o pkt buf sz riebl rsvd start drivers net bagetlance c if o riebl rsvd start.
18688 	X	o pkt buf sz riebl rsvd start drivers net comx hw comx c if off len hw firmware.
18689 	X	hw firmware len len drivers net zlib c if p byte m.
18690 	X	xff drivers scsi aicxxx c if internal present drivers scsi seagate c if target controller type seagate.
18691 	X	drivers scsi seagate c if temp data controller type seagate.
18692 	X	x x drivers scsi ultrastor c if config slot.
18693 	X	inb config icm address drivers scsi ultrastor c if config slot.
18694 	X	inb config icm address drivers sound msnd pinnacle c if file.
18695 	X	file f mode dev mode fmode read drivers sound msnd pinnacle c if file.
18696 	X	file f mode dev mode fmode write drivers sound msnd pinnacle c if file.
18697 	X	file f mode dev mode fmode write drivers sound msnd pinnacle c if file.
18698 	X	file f mode dev mode fmode read drivers sound sb audio c if devc speed devc channels devc major.
18699 	X	fs ext truncate c if tmp.
18700 	X	le to cpu p p fs ext truncate c if tmp.
18701 	X	le to cpu p p net ipv ipconfig c if user dev name.
18702 	X	strcmp dev name user dev name.
18703 	X	thats hits in lines of c code or one every roughly lines of c.
18704 	X	note that of these marked with a in the filename are of your exact form if something.
18705 	X	lets assume every occurance would correspond to an occurance in python.
18706 	X	i earlier used a factor of to convert from lines of c code to lines of python.
18707 	X	as such i can estimate that.
18708 	X	or any other ternary if else expression form will occur about once every lines of python code and other uses of embeded if expressions in an if statement will occur about once every.
18709 	X	here are the other statistics i generated in order to compare.
18710 	X	rate if else could be used every loc rate it would be used every loc rate where short circuiting is needed every loc rate if else expression used in an if statment every loc rate where something and this or that would not suffice larger uncertainty here every loc rate used as if if something this else that every loc.
18711 	X	its remarkably easy to do this sort of analysis using grep and a reasonably large c c.
18712 	X	several appropriate codebases are available to.
18713 	X	yet you continue to argue based on gut feelings and do not back them up with any sort of.
18714 	X	what level would indicate a sufficiently high level of misuse to warrant its exclusion from a future python.
18715 	X	is bad form in any language.
18716 	X	if you accept my analysis then the equivalent to that that will occur in python code about every.
18717 	X	that means it will be used in bad form using your definition of bad form about of the.
18718 	X	by my definition it will be higher because i include additional uses of if else expression inside of the if statement more than just the top level which would be a misuse rate and i include cases where the if else expression will be used in lieu of better more appropriate cases as in x if obj obj else default instead of x obj or default.
18719 	X	so again i ask you what rate of misuse is low enough as to not be a problem.
18720 	X	you might try the same as.
18721 	X	short circuiting is great in theory but is rarely used in.
18722 	X	ive given estimates elsewhere based on code analysis which suggests that.
18723 	X	an approprate if else either expression or statement is used about once every lines or more often this is a guess based on data and not a direct result of analysis.
18724 	X	an operator based version would be used about in lines of python code based on code analysis the numbers range from about lines to about lines with were a good approximation.
18725 	X	a short circuiting version is needed about once every lines of code.
18726 	X	a short circuiting version which cannot be handled by the cond and expr or expr hack occurs about once every lines this is based on tim peters scan of pythons standard library but should be treated as a rough approximation.
18727 	X	so you are saying that a construct is necessary when it must be used only once every lines of python code or once every if you are feeling generous.
18728 	X	while an iff ifelse check function is an apropriate solution for the other or times there is need for an if else like.
18729 	X	when were talking about a conditional expression rather than a conditional statement its never truly.
18730 	X	i tend to agree that both alternatives should always be made.
18731 	X	greg ewing computer science dept university of canterbury christchurch new zealand http www cosc canterbury ac nz greg.
18732 	X	erik i suspect that any proposal that suggests the introduction of a new erik keyword is going to get shot down pretty.
18733 	X	you mean were not going to get a notwithstanding contrariwise or irregardless statement.
18734 	X	andrew koenig ark at research att com http www research att com info ark.
18735 	X	the proposed syntax is as follows expression if condition else expression.
18736 	X	i love it but it might be pure evil for python for this.
18737 	X	however there are two points that i dont like about it its not evaluated from left to right possibly making code harder to read its easier to produce ugly code e g nesting such expressions without parantheses might result in an one liner nobody can understand without carefully analysing the code.
18738 	X	an ifthenelse expressions is really useful in some cases making the code shorter and more straight foreward the proposed syntax is very.
18739 	X	you can just read the ifthenelse expression and understand its meaning i think this syntax will not cause a lot of ugly code.
18740 	X	while its possible to produce such code imho it doesnt provoke.
18741 	X	and its always possible to write ugly code if someone wants to do.
18742 	X	additionaly any syntax for an ifthenelse expression without parantheses make the code harder to read if its nested in other statements.
18743 	X	heres one real life example where the ternary operator wuld be very.
18744 	X	in zope you often find code like this from ofs copysupport py.
18745 	X	note that its not possible using some ifthenelse method or other ways posted like ab c.
18746 	X	the more i read real code examples on this pep the more i like a ternary operator implemented in the proposed.
18747 	X	somehow i get used to reading such code in non strict left to right.
18748 	X	another interesting point is that often the more important case is the true case which is the one seen at.
18749 	X	if we could live with adding a new keyword we could use if condition then expression else expression apart from the problem of introducing a new keyword for a minor feature this also suffers from ambiguity at the start of a statement for example if verbose then sys stdout write hello n else none could be an syntactically correct expression statement but starts with if which makes the parser believe it is the start of an if.
18750 	X	to resolve this the syntax would have to require parentheses which makes it.
18751 	X	however this form has the advantage of evaluating strictly from left to right not that that is a requirement for were pythonic list comprehensions dont.
18752 	X	evaluating strictly from left to right would be a real feature of this.
18753 	X	but i think the ambiguity makes it hard to.
18754 	X	you could also change the if statement to an if expression dont hate me for this which evaluates as the last expression evaluated of the then or else part or none if there was not an.
18755 	X	imho this is not very pythonic and not usual in any programming language i.
18756 	X	or there could be the following syntax.
18757 	X	when condition then expression else expression.
18758 	X	peter hansen peter at engcorp com wrote in message news.
18759 	X	yes the tty module in the standard.
18760 	X	still when is the more attractive solution to.
18761 	X	it could be made a pseudo.
18762 	X	but this is already said not its time for votations not for discussions.
18763 	X	i dont think that some potential abuses that you see possibly occurring immediately rules out the usefulness of a language.
18764 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote ten lands are sooner known than one.
18765 	X	a yiddish proverb bosskey net aliens predator http www bosskey net avp a personal guide to aliens predator.
18766 	X	just a minor thought to throw into the.
18767 	X	to me the x if c else y syntax extends more naturally when there are more than two values to choose.
18768 	X	extending c then x else y would require obvious.
18769 	X	if c then a else if c then b else c.
18770 	X	if c then if c then a else b else c.
18771 	X	theres no pressing reason to choose one over the other so it would probably end with different programmers using different styles but without the brackets it would probably be annoying to encounter the less familiar version in other peoples code one of those yuck.
18772 	X	ok yes it is nesting really but like the c else if it reads more like a continuation of the same thing than a nesting of one thing in.
18773 	X	repetition usually seems easier to understand than recursion even though or maybe because it is really just a special case of.
18774 	X	steve at ninereeds dot fsnet dot co dot uk.
18775 	X	right or with the colon replaced with a comma or if or something.
18776 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote i wont pretend that i intend to stop living sade bosskey net unreal tournament http www bosskey net utk a personal guide to unreal tournament.
18777 	X	r when a when b t else t else when c f else f.
18778 	X	r when a when b t else t else when c f else f.
18779 	X	following the discussion and tossing another log into the flame what do yall think of this.
18780 	X	its modelled after lambda of course but its a short circuiting expression.
18781 	X	result when condition trueval else falseval.
18782 	X	the idea were that its already a known form except that instead of were lambda its when.
18783 	X	such they can be also when expressions so its linkable for those perverts who like to do such things as.
18784 	X	samuele pedroni pedronis at bluewin ch ha scritto nel messaggio news ecc at news bluewin.
18785 	X	you consider having a conditional expression looking like the statement a feature and you have worked to technically solve the parser language definition details to have it.
18786 	X	i consider that possibility a mixed bless i would rather if we should have one have a conditional operator that looks operatorial and in the same family of and.
18787 	X	because the fact that python distinguishes statements and expressions is basically apart from were the status quo and what is implemented a deliberate decision that happens to work well together with indentation delimited.
18788 	X	otoh is probably not impossible to conceive a language that mixes indentation usage and usage as delimiters and where everything is an expression and produces a value.
18789 	X	having a conditional expression that looks like a statement will touch this very nerve and will blur the distinction from the hand on experience of the language of course not from the lang ref pov.
18790 	X	i prefer not to be confronted if possible with the questions.
18791 	X	if x print x for x in l print l if x print pos else print negative.
18792 	X	they make no sense from the lang ref lawyer.
18793 	X	but if the asker is naive confused a troll impertinent.
18794 	X	answering ye we have this two things that look the same but one is a statement and one is an expression and we disambiguate them so put in clever explanation but we are for statement expression distinction and rtfm.
18795 	X	is a kind of cheap bastard attitude because the fact that the above are invalid is also a matter of deliberate choice so we would have to go philosophical and discuss this is pythonic and this not and the statement expression distinction thing and argue about readability.
18796 	X	so if possible i would rather avoid this.
18797 	X	ok then i dont like the proposal any more having to switch order of x and y depending on what parentheses you use would make the construct unusable imho and without the generality of were able to use it in the integer case i dont think the usefulness is sufficient to warrant a new.
18798 	X	in article just at news news xsall nl.
18799 	X	aahz aahz at pythoncraft com http www pythoncraft com.
18800 	X	register for pycon now http www python org pycon reg html.
18801 	X	is so cryptic whereas three well chosen keywords could make the expression so much more obvious in its meaning e.
18802 	X	evaluatetheboolvalueof c thenifitistruegetthisexpressionvaluebyevaluating x otherwisegetthisexpressionvaluebyevaluating y.
18803 	X	of course you may want to take advantage of newline freedom within parens.
18804 	X	evaluatetheboolvalueof c thenifitistruegetthevalueofthisexpressionbyevaluating x otherwisegetthevalueofthisexpressionbyevaluating y.
18805 	X	terry you mean like the way floats as substitutes for reals do not terry work as expected.
18806 	X	so i guess they are wrong too.
18807 	X	what he means is that if you think that x and y or z yields y whenever x is true and yields z whenever x is false then you are.
18808 	X	andrew koenig ark at research att com http www research att com info ark.
18809 	X	maybe he was just saying in effect that if you held your own vote on your own list he would have to vote because his own alternative was not even listed and note without even saying that he would have voted for his own alternative.
18810 	X	i have no idea if thats what he meant and i havent even been reading this thread but im just pointing out one of the probably several areas where the meaning is open to interpretation and the interpretation is affected by things like a presumption of goodwill which by the way i have about both you and aahz so please just let it go.
18811 	X	z obj method if hasattr obj method else none.
18812 	X	which i consider dubious compared to.
18813 	X	z hasattr obj method and obj method.
18814 	X	and a ternary op would simply add another.
18815 	X	even if the old way is bad it will be useful in other situations thus you still have two.
18816 	X	in some cases pep is better in others the and.
18817 	X	but dont forget that both will be.
18818 	X	print auto colorizing turned self allow colorizing off on.
18819 	X	is pretty clear imo once you get used to the order which i would put that way so as to reserve x s s s to have an effect as if implemented by lambda s lambda s lambda s int x correpsonding to x.
18820 	X	s s as if implemented by lambda s lambda s bool x.
18821 	X	the problem that you point out is real in the general case but i dont agree with this argument for this particular.
18822 	X	on the positive side conditional expressions are useful when printing data for debugging purposes to select which data to print for example.
18823 	X	as for the negative side can you add print statements i mean easily to listcomps or lambdas.
18824 	X	while talking about lambdas even old style python constructs such as map filter and reduce may be hard to.
18825 	X	ive had a nasty bug with a simple reduce a few weeks ago a weird combination of data broke my lambda function and it was a nightmare to detect it as it didnt raise an exception but just caused the wrong result to be.
18826 	X	carlos ribeiro cribeiro at mail inet com br.
18827 	X	i suggested the following elsewhere but buried in a big post.
18828 	X	i like it to a point but id.
18829 	X	the either warns that the conditional expression is coming which in my view improves readability a.
18830 	X	just because it uses lazy evaluation doesnt mean it isnt a.
18831 	X	steve at ninereeds dot fsnet dot co dot uk.
18832 	X	join should have been a class method rather than an instance method is what it.
18833 	X	aahz aahz at pythoncraft com http www pythoncraft com.
18834 	X	register for pycon now http www python org pycon reg html.
18835 	X	this is not hard to implement given todays.
18836 	X	evaluate condition jump if false false part label pop top true part jump forward after expression false part label false part after expression.
18837 	X	it requires a computed jump which doesnt exist as far as i.
18838 	X	it would probably look something like this load fast jump table evaluate i jump top evaluate v jump forward after expression after expression.
18839 	X	jump top does not seem hard to implement but it is not yet present in the bytecode as far as i.
18840 	X	the dictionary cases code looks exactly the same except that to be immutable is there an immutable dict yet.
18841 	X	i also agree that the mismatch between a b b a b a seems like a good argument against the.
18842 	X	in the current pep surrounding parentheses are.
18843 	X	people can write unreadable code with list comprehensions that doesnt make them inherently.
18844 	X	punish the person who wrote the unreadable code not the language feature which is at his her.
18845 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote sentimentality is a superstructure covering.
18846 	X	c g jung esperanto reference http www alcyone com max lang esperanto an esperanto reference for english.
18847 	X	this doesnt support short circuiting which is the key feature of a true conditional.
18848 	X	the pep itself goes into great detail about precisely what this feature is and why its.
18849 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote when one is in love a cliff becomes a.
18850 	X	an ethiopian saying esperanto reference http www alcyone com max lang esperanto an esperanto reference for english.
18851 	X	there is nothing wrong with pythons and and or semantics theyre very similar in functionality to those used in lisp for.
18852 	X	however the use of the idiom combining the two in order to attempt to the effect of a conditional operator c and x or y is idiomatic unreadable and wrong.
18853 	X	there are ways to fix it with single element lists or lambdas that make it not wrong but even more idiomatic and.
18854 	X	what pep seeks to find is a conditional operator that stands on its own and is something the community can live.
18855 	X	any approaches which start by repairing the and or idiom may fix the problem with it were wrong but cant fix the problems with it were idiomatic and.
18856 	X	for that reason your c and x or y suggestion is simply more idiomatic and unreadable for the reasons that ive stated several times by.
18857 	X	the problem is the horrible and or idiom if youre going to fix it it should be fixing it by replacing it not making it more.
18858 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote the average dog is a nicer person than the average.
18859 	X	andrew a rooney python chess module http www alcyone com pyos chess a chess game adjudicator in.
18860 	X	not so as i tried to point.
18861 	X	there are those who do care but are indifferent to the outcome but for the fact that to warant any addition the need should be.
18862 	X	there are also those who are indifferent to the outcome but willing to vote anyhow if they could only indicate their.
18863 	X	likely there are those in favour or against who dont care enough to vote or who think the outcome is fixed so their vote wont help or.
18864 	X	bottom line is that in any open voting especially when the population size is unknown you dont know much.
18865 	X	just think about all those who dont read meandering threads.
18866 	X	the point is that the example contains yet another glaring.
18867 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
18868 	X	to make it even worse we suffer from sampling.
18869 	X	people who read c l py enough to participate vote on this is not are not necessarily indicitive of the total population of python.
18870 	X	holger krekel pyth at devel trillke net wrote in message news.
18871 	X	this is a point in favor of this over then that i had not thought.
18872 	X	samuele there are instances of that in the std lib code see tim samuele peters post or the std lib directly is for all to.
18873 	X	so all those uses give the impression that the cond and x or y technique works in all cases which it.
18874 	X	if cond and x or y always worked i dont think i would care about introducing if then else expressions at.
18875 	X	andrew koenig ark at research att com http www research att com info ark.
18876 	X	erik max francis max at alcyone com wrote in message news.
18877 	X	well what about extending the syntax of above to allow short circuits and then youd get switch statements and ternary operators out of it.
18878 	X	i like the latter best but then of course this introduces two new.
18879 	X	which doesnt bother me but itll bother others.
18880 	X	may not read strictly left to right although to me it does but it only introduces one new keyword which may prove less anathemic either when version would be fine by.
18881 	X	exp exp for purely aesthethic reasons i dont care for as much but it is.
18882 	X	me too but note that it could be written even in python.
18883 	X	that bools are confusable with and in python is a.
18884 	X	sure he can vote any way he wants but stating your intent to vote opposite to someone simply out of spite sure doesnt impress me as a great.
18885 	X	and mind you were not just talking about an individual voter were talking about someone who is going to be doing the votetaking at least that seems to be what the community has gravitated towards although theres not been much discussion about it.
18886 	X	if hes that tilted against the issue maybe he shouldnt be the.
18887 	X	furthermore theres a simpler issue here i would hope that an votetaker would abstain or at least offer to from any vote he she was counting simply out of basic.
18888 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote so look into my eyes i wont tell you lies neneh cherry the best hard science web sites that the web has to.
18889 	X	this is the first syntax ive seen proposed for this that i like.
18890 	X	i particularly like the generalization to an int on the lhs of the new proposed.
18891 	X	however i am slightly troubled by the subtly different syntax for the two alternatives vs n alternatives.
18892 	X	whatever kind of parentheses are used couldnt the number of alternatives listed inside the parentheses be the ones that control whether the lhs is taken as int or condition.
18893 	X	i dont feel very certain about.
18894 	X	it has changed what we consider pythonic already.
18895 	X	pythonic is what is in python and all your base belong to us ly yrs.
18896 	X	a the value can be cached or in the database is cached.
18897 	X	get cache name self connection fetch name database already open when getting source.
18898 	X	the ownership is stored in the database if the name starts with db or from the web service x startswith db.
18899 	X	self connection get owner name self webservice get owner by name name.
18900 	X	true but it doesnt stand out as.
18901 	X	seems more appropriate for smaller terms and if else for larger.
18902 	X	i have at several times agreed that a given expression when written with a ternary if else expression is more.
18903 	X	my opinion though is that the overall readability.
18904 	X	i dont know why i need to be any more flexible than i have been nor why i couldnt respond that you too need to be more.
18905 	X	in any case i think this will be my last post on this thread since i am sure im tapped out on it if not idea wise then at least emotionally.
18906 	X	i just tried out the useability tests on two.
18907 	X	both of these guys are familiar with.
18908 	X	designer it seems like if you say it out loud it doesnt make sense reading it out loud using otherwise instead of else made more sense.
18909 	X	designer b if a else b not sure what the designer was trying to express by rewriting the expression.
18910 	X	designer a little convoluted too but theres something about the colons that makes sense to me.
18911 	X	designer the most clear but probably just because i know javascript.
18912 	X	designer this is cleaner and easier to spot when scanning.
18913 	X	there are widely known and taught languages i know of that use the c ternary operator form.
18914 	X	i would hazard a guess that just about any programmer who has learned a programming language before coming to python will have learned one of those.
18915 	X	i would also hazard a guess that anyone who learns python as their first programming language will likely also learn one of the above mentioned languages later in.
18916 	X	i len cols cols i none.
18917 	X	would be even safer using cond trueexpr falseexpr.
18918 	X	in article at news tin it.
18919 	X	aahz aahz at pythoncraft com http www pythoncraft com.
18920 	X	register for pycon now http www python org pycon reg html.
18921 	X	god forbid we should ever force people to learn.
18922 	X	dale strickland clark riverhall systems ltd.
18923 	X	if you trust that guido is telling the truth i do thats half.
18924 	X	more precisely thats one of the desirable.
18925 	X	the other desirable outcome is that the python community comes out so resoundingly in favor of conditional expressions that its a clear win for the language as a.
18926 	X	after ten years of debate on this subject guido honestly doesnt care which outcome he.
18927 	X	aahz aahz at pythoncraft com http www pythoncraft com.
18928 	X	register for pycon now http www python org pycon reg html.
18929 	X	the problem with the parallel is that some people are using the and or trick as if it were a conditional operator theyve elevated it to an idiom but its a broken.
18930 	X	weve already seen several examples from the standard library whether corrected later or not that used the idiom incorrectly were well past the theoretical question of whether and or can be misunderstood and.
18931 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote there are countless planets like many island earths konstantin tsiolkovsky maths reference http www alcyone com max reference maths a mathematics.
18932 	X	when i had situations like this i rewrote it to get the special select all value not interfere with usual list tuple index.
18933 	X	e g using a dummy class for select all rather than reusing an otherwise valid key.
18934 	X	with my above class select all pass this would work nicely.
18935 	X	but id rather have my co coders think about easier ways rather having to understand ternary operations.
18936 	X	had i seen your above code.
18937 	X	just on its own i would be puzzled which i was.
18938 	X	may i ask you to show the complete function where this came from.
18939 	X	thanks for your patience if any is left.
18940 	X	both the and and or operators implement short circuiting so the single element lists are only evaluated in the eventuality that the expression gets that far.
18941 	X	not of course that i dont find the syntax.
18942 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote he who knows how to be poor knows.
18943 	X	jules michelet rules for buh http www alcyone com max projects cards buh html the official rules to the betting card game.
18944 	X	robin and if parentheses arent required then that might be the one robin case where i would consider leaving them.
18945 	X	nevertheless i robin still think required parentheses are a good.
18946 	X	i dont see robin much significant difference between.
18947 	X	robin f x if c else y.
18948 	X	robin f x for x in l.
18949 	X	enclosing list comprehensions in brackets makes it clear that theyre generating.
18950 	X	in fact i had to check to see that it wasnt possible to write x for x in l as a tuple comprehension which is what i would have expected it to mean if it meant.
18951 	X	on the other hand i dont see much difference between.
18952 	X	in which extra parentheses are already not.
18953 	X	andrew koenig ark at research att com http www research att com info ark.
18954 	X	just bear in mind that do nothing also means stay with the current idiom that in some cases doesnt work yeah you can hear my bias in that statement.
18955 	X	dennis lee bieber wlfraed at ix netcom com writes.
18956 	X	as much as i dont like the reasoning that python must do the opposite of whatever c does theres some grounds for doing the opposite of what vb and vba.
18957 	X	on sat feb erik max francis max at alcyone com.
18958 	X	next youll be suggesting quaternary operators.
18959 	X	steve at ninereeds dot fsnet dot co dot uk.
18960 	X	indeed it is because is not the same as eleven.
18961 	X	andrew koenig ark at research att com http www research att com info ark.
18962 	X	yes thats the obvious responding question which is why i worded my statement as i.
18963 	X	the problem with using if here is that it conflicts with the current use of the keyword.
18964 	X	or at least i believe thats the theres some discussion going on about that right now in the main pep.
18965 	X	if it turns out that the interpreter can nicely support.
18966 	X	then id be perfectly happy with.
18967 	X	my support for an alternate keyword is based on the assumption that the above syntax cant.
18968 	X	looking at that it seems that the interpreter would have enough context by the time it gets to the if to know if it needs to be an expression or.
18969 	X	if the if is an rvalue function arg list element then its an if expression otherwise its a normal.
18970 	X	quick which is cleaner more beautiful better more maintainable more supportable easier to understand prefered.
18971 	X	if spam in s if eggs in s t vikings else t waitress else t customer.
18972 	X	t vikings if eggs in s else waitress if spam in s else customer.
18973 	X	on tue feb gmt rumours say that hans nowak.
18974 	X	hans i wont suggest to take your proposal seriously but i wanted to tell you i liked it tzotzioy i speak england very best real email address dhpvdebzawwtdgvjlmdy n decode base.
18975 	X	i think the drawbacks outweigh the.
18976 	X	hans base decodestring dvybxlazwfydghsawrlmlda decode for email address the pythonic quarter http www awaretek com nowak soon http zephyrfalcon org.
18977 	X	first you have the first option then the condition then the second.
18978 	X	none of these seem especially readable to.
18979 	X	guido van rossum guido at python org wrote in message news.
18980 	X	the proposed syntax is by definition pythonic were authored by the bdfl notwithstanding bdfls modest claim that it is only fairly.
18981 	X	i challenge anyone to come up with an empirically verifiable and universally applicable definition of pythonic feature other that pythonic is whatever bdfl says is.
18982 	X	corollory no one but bdfl can declare something to be pythonic or unpythonic.
18983 	X	corollary pythonic does not mean what i am used to reading or what i would like to read write or what i would like others to read or.
18984 	X	the alternative to pep is already available in.
18985 	X	lambda true expression lambda false expression not test expression.
18986 	X	so everyone must accept that the semantics of lazily evaluated conditional selection without the use of auxillary variables is already present in.
18987 	X	it follows that pep approval or disapproval must be entirely based on the merits or demerits of the.
18988 	X	notice that the not is necessary to ensure that an arbitrary test expression provides a boolean or result with the pleasing side effect of ordering the true expression.
18989 	X	the not is also a good reminder that the test expression is at the end and therefore needs to be reversed if it is to work correctly on a selection that preceeds it as opposed to one which follows it as in the more familiar if test.
18990 	X	and there is a nice symmetry with the two pairs of parentheses surrounding the bracketted inverted.
18991 	X	oh but i argue for the alternative which is already in python when forsooth i truly wish to plead the case for the proposal which is.
18992 	X	should pep be rejected all you sneaky functional expression oriented subversive cryptic pythonistas can use the alternative luke.
18993 	X	parzival reply to is munged for spammers.
18994 	X	erik max francis max at alcyone com writes.
18995 	X	im pointing out that it is.
18996 	X	and that includes your definition of horrible.
18997 	X	preferably so that andrews happy in a completely objective.
18998 	X	its not short circuiting as i said myself.
18999 	X	and i never claimed that expression was the true.
19000 	X	but thats perilously close to me were obtuse so ill just say that which way round the expressions go is irrelevant to my.
19001 	X	it may not be to yours if you want to try to claim that false before true is objectively horrible.
19002 	X	ive said over and over again that its all.
19003 	X	i agree to the extent that i find them.
19004 	X	but i would rewrite using if statements rather than conditional expressions possibly by defining a helper function.
19005 	X	im not suggesting that approach here because im assuming youd classify that as horrible.
19006 	X	but i cant see how youd justify such a statement maybe theres another implied qualification that we still need to tease out.
19007 	X	those who suggest these forms dont intend for them to be used in contexts where they are wrong or by people too inexperienced to know they are.
19008 	X	ive seen people in favour of the pep get its version wrong.
19009 	X	the other point is that some people dont want this.
19010 	X	with the same level of conviction as those who.
19011 	X	anyone who uses atrocities just to avoid the extra statements that not using a conditional expression needs is frankly not worth either my or your time to.
19012 	X	such people will find ways of writing bad code no matter what we.
19013 	X	ok that definition only lacks an explanation of horribly unreadable.
19014 	X	i guess it makes you on the introduction of a conditional expression but i have no idea of your position on the proposed.
19015 	X	ok so the fundamental disagreement could be characterised as about what constitutes wholly unreadable.
19016 	X	im on the whole thing not because i dont see uses for a conditional expression but because ive yet to see a proposal which i find attractive enough to justify the.
19017 	X	so show me something that i dont find wholly unreadable and ill switch my.
19018 	X	i dont have problem with admitting that wholly unreadable is a subjective concept and specifically i dont know what id classify as acceptable until i see.
19019 	X	so yuk may be as much of an explanation of why i dont accept something as i can.
19020 	X	im not excluding a rewrite using helper functions or statement level if from what i consider an alternative.
19021 	X	its you doing that so you need to demonstrate that your proposal is better than that not just as good as but better.
19022 	X	so far id admit im hard to.
19023 	X	you are too youve rejected at least suggested alternatives and or dict lookup boolean indexing lambda if statement helper function.
19024 	X	as i say it was i just wanted to emphasize it mainly because andrew koenig is making a big deal of the fact that the no voters are using totally subjective arguments whereas the yes voters have objective reason on their.
19025 	X	as you can imagine i find that suggestion a little.
19026 	X	thats certainly your prerogative but you still leave the community or at least those who read that post of yours at large in the position of not were sure what it was you.
19027 	X	there are numerous reasons you might not want to have responded to my post one of them is certainly that you were appalled by my incorrect interpretation of your comments and felt that continuing the discussion would only serve to make things.
19028 	X	if thats the case ill be happy to retract my comments if i get a clarification of what it was you.
19029 	X	but there are other interpretations such as you were ashamed that you got caught in making such an awful comment and thus bowed out of the discussion in order to prevent yourself from looking more.
19030 	X	mind im not suggesting thats the case im just saying that your lack of clarification is even more confusing than the original.
19031 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote if you cant fight and you cant flee.
19032 	X	robert elliot physics reference http www alcyone com max reference physics a physics.
19033 	X	when it comes to syntax the phrase familiarity breeds contempt does not hold and there is ample justification why such should be the.
19034 	X	but didnt python boldly do away with some extremely familiar syntactic conventions like free format nested structures.
19035 	X	from a cursory point of view i find a if true else b quite.
19036 	X	on feb tim churches tchur at optushome com au.
19037 	X	sounds like a good idea to.
19038 	X	mercy to the guilty is treachery to the.
19039 	X	remove killer rodent from address to.
19040 	X	for the times ive needed such a construct.
19041 	X	i dont see that the new syntax adds enough to make it worthwhile but i can ignore it as well as the next.
19042 	X	im definitely on the chained variation with elif.
19043 	X	im saying its wrong because the c and x or y form as a substitute for a conditional operator does not work as expected in the case of x were false as is mentioned time and time.
19044 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote man is preceded by forest followed by.
19045 	X	graffiti written during french student revolt computer science http www alcyone com max reference compsci a computer science.
19046 	X	if hasattr source readlines lines source readlines else lines source split.
19047 	X	or perhaps better as try lines source readlines except attributeerror lines source split.
19048 	X	or for cases where you strongly prefer a file but will accept a raw string which you shouldnt do since stringio is so easy to get.
19049 	X	if isinstance source basestring source stringio source.
19050 	X	and then you can change the alorithm to use read readlines as need.
19051 	X	erik max francis max at alcyone com ha scritto nel messaggio news eab cdbec at alcyone.
19052 	X	ok i have screamed and called you names.
19053 	X	his time teaching python so hes in a good position to evaluate how new features impact the ease of learning and using the language.
19054 	X	i appreciate the cite and its authoritative.
19055 	X	python as a language with a distinctive voice some of us feel is compromised by changes that simply or primarily add alternative ways of accomplishing things hat are already quite readily accomplished.
19056 	X	and it is difficult for someone like myself to see what other than that distinctive voice can be argued to make python significant that is significant in some way beyond its usefulness to its currently existing user.
19057 	X	many of whom were originally attracted to it by its distinctive what minimalism.
19058 	X	but as mark says and i think we all appreciate this is an old.
19059 	X	and its hard to find anything new to be said on the.
19060 	X	and nobody seems to be swaying.
19061 	X	also happen to think it would be great to be able to walk into barnes and noble and buy a book on python as it stands at some.
19062 	X	ive recently paid a visit looking for a linux.
19063 	X	in the past there had been many options for books with cds of linux.
19064 	X	my unscientific survey seems to conclude that barnes and noble have made a decision to get out of that.
19065 	X	too many redhat books on hand when comes.
19066 	X	and its been going on for too long.
19067 	X	obviously this happens to some extent across the board as to computer.
19068 	X	it s just a matter of degree and the.
19069 	X	my same unscientific survey seems to be finding less shelf space for python.
19070 	X	and i am speculating that versioning issues have played its part here as.
19071 	X	because people like myself are reluctant to buy something we know cannot be considered.
19072 	X	and the fact that this may be an irrational impulse a book is authoritative doesnt change.
19073 	X	who said people act fully rationally as to these.
19074 	X	which is part of marks point it seems to.
19075 	X	not wanting to accommodate my and other peoples irrationality to the extent that what it is is.
19076 	X	but perhaps unwise depending i guess on what it is one is trying to.
19077 	X	the current traffic on the newsgroup is totally perturbed with comparison to normal patterns by the pep.
19078 	X	quite suitable given the carnival season of.
19079 	X	anyway any other discussion gets short shrift these.
19080 	X	quoth chermside michael on short circuiting in a ternary operator.
19081 	X	a open to question debatable b subjected to discussion disputed deprived of practical significance made abstract or purely academic.
19082 	X	context suggests that sense is the one intended in the pep your reference.
19083 	X	and in fact in my experience sense is very nearly.
19084 	X	steven taschuk receive them ignorant staschuk at telusplanet net dispatch them.
19085 	X	what if python generates a elegancewarning when it gets an if expression in an if statement or embedded if expressions.
19086 	X	i know how much i abused it in my.
19087 	X	but at least it kept me off the streets.
19088 	X	i believe there should be one prefered way for simple constructs like.
19089 	X	if if else expression is added to the langauge then it will be because people have deemed that the prefered way to write certain.
19090 	X	and if its the prefered way then according to my beliefs i should switch to using it in all my code and fixing up old code when it comes to refactoring.
19091 	X	as dan schmidt rightly pointed out my first example was indeed.
19092 	X	it does appear that those of us whose prior experience with conditional expressions is from the c language tend to expect the first alternative expression to be associated with the true.
19093 	X	however if there is to be use of an idiom for conditional expressions which is of course questionable should it be a new language construct or should it be an existing construct.
19094 	X	will experience in using the existing construct quickly overcome habits carried over from previous languages or will there be a continuous problem with errors.
19095 	X	it would be a matter of getting accustomed to the meaning.
19096 	X	the advantage of using something like.
19097 	X	is that it is already correct.
19098 	X	by observing that this is a special case of a tuple literal followed immediately by a selector it becomes apparent that only one of the expressions is actually needed and that the tuple construction and evaluation of all of the expression elements is unnecessary and can be optimized away to leave after evaluation of the selector a need to evaluate only one.
19099 	X	this would allow the evaluation of only one of the expressions in the tuple and provide the equivalent of short circuit.
19100 	X	in any case in general i would tend to favor not adding a conditional expression to the.
19101 	X	now i know precisely how much weight to give your.
19102 	X	aahz aahz at pythoncraft com http www pythoncraft com.
19103 	X	register for pycon now http www python org pycon reg html.
19104 	X	a it really was meant for exceptions not as yet another way to spell if.
19105 	X	b it wasnt a proposal just an idea.
19106 	X	so the except idea is that you can say.
19107 	X	result obj method except attributeerror none.
19108 	X	which eases use of do it and handle exceptions instead of look before you.
19109 	X	there are only two entities involved.
19110 	X	its obvious what is the normal case and is easily spotted what the value is in case of an.
19111 	X	but as with pep it has bad implications on readability when used inside non.
19112 	X	so i am on my own non.
19113 	X	rewrite it with pythons a and b or c or even just a and b or c and see if you like it.
19114 	X	and of course a function call or something to approximate cs p.
19115 	X	in article bfmkt kv at eol dd chalmers se.
19116 	X	apls quad operator looks a lot like the rectangle symbols used for conditional guarded expressions in hoares.
19117 	X	if we used that we could also start using hoares and.
19118 	X	notation for communicating values from one thread to.
19119 	X	david eppstein uc irvine of information computer science eppstein at ics uci edu http www ics uci edu eppstein.
19120 	X	yeah to some they are confusing but others including me find list comps very.
19121 	X	imo strict ltor or strict rtol reading as a requirement for conditional operators is.
19122 	X	when reading written text you dont actually read individual characters left to right unless youre a beginning reader because you recognize the grouping as a.
19123 	X	the same holds true with many phrases and of.
19124 	X	if anything a non strict ltor reading order poses a very small hurdle for someone completely unfamiliar with the syntax but after seeing it once or twice it is understood as a phrase anyway which is why imo you arent bothered by list comp token order anymore.
19125 	X	or put another way by looking at it it should be easy to figure out what it.
19126 	X	if youre unfamiliar with it and have to slow down when reading the code and break it apart your first guess as to what it does should be.
19127 	X	thats why i like the pseudocode ish versions of the pep keyword based as opposed to the special syntax.
19128 	X	i like it either way because even if youre not familiar with the construct its easy to figure out what the meaning.
19129 	X	in the above usage if and else mean the same thing they do in other contexts so its very likely that if you dont know what it does but take a guess youll probably be.
19130 	X	this is not a great way to.
19131 	X	despite the huge amount of discussions we have managed to have a rather friendly.
19132 	X	why do you want to change it.
19133 	X	to me its silly to read his paragraph as if he was just complaining about writeln and missed the.
19134 	X	the simple example i used in a previous thread is.
19135 	X	if is html extension html else extension txt print processed s s filename extension.
19136 	X	this could currently also be implemented as.
19137 	X	print processed s s filename is html and html or txt.
19138 	X	per the pep it would be.
19139 	X	print processed s s filename html if is html else txt.
19140 	X	the alternate version that i currently like is to use essentially the current if syntax but with a different keyword operating on expressions instead of.
19141 	X	of course the big problem with this is that it would require a new.
19142 	X	if the keyword is when it would look like.
19143 	X	print processed s s filename when is html html else txt.
19144 	X	but it makes a lot more sense for list comrpehensions because list comprehensions are a very unique syntax and the result of a list comprehension is a list so it actually makes sense for it to be enclosed in square.
19145 	X	im not saying im frighteningly opposed to requiring parentheses im just saying i dont think its.
19146 	X	in practice i suspect i would probably use parentheses most of them id use a conditoinal operator just as i do when i use the.
19147 	X	operator in c c java or not that i write it anymore.
19148 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote being in love for real it aint like a movie screen india arie bosskey net aliens predator http www bosskey net avp a personal guide to aliens predator.
19149 	X	given that objects may now have property attributes where just checking the value of an attribute may may dispatch several actions to return said value short circuiting expression evaluations is the correct way to implement.
19150 	X	all control structures can be boiled down to just one with sufficient expressivity or even just labels and.
19151 	X	that doesnt mean thats a wise way to proceed in a high level.
19152 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote you win the victory when you yield to.
19153 	X	sophocles bosskey net quake iii arena http www bosskey net qa a personal guide to quake iii.
19154 	X	well arithmetic expressions havent run left to right since the days of fortran.
19155 	X	has to run inside out and with the python extensions.
19156 	X	will die a horrible death unless its run outside in.
19157 	X	how can you possibly substantiate that statement.
19158 	X	theres no metric for parsing overhead in human readability.
19159 	X	i can just as easily say it adds very little overhead because it doesnt overload the meaning of the keywords.
19160 	X	paul andrew koenig ark at research att com writes.
19161 	X	samuele z ife cond and x or y.
19162 	X	samuele if python had had a ternary cond op i would never have seen samuele that sniff.
19163 	X	paul im missing something x and y both get evaluated in that example paul so its only a partial work around.
19164 	X	if cond is true then cond and x is true so y is not.
19165 	X	if cond is false then cond and x is false without evaluating x.
19166 	X	andrew koenig ark at research att com http www research att com info ark.
19167 	X	when you explicitly have to defer execution like you did in the second case that doesnt qualify as short.
19168 	X	in short circuiting the evaluation is.
19169 	X	result true math sqrt x false x.
19170 	X	even when you defer it with an explicit function call the value is still executed its just that the value is now a.
19171 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote if a thing is worth doing then it is worth doing.
19172 	X	g k chesterton a lambda calculus explorer in.
19173 	X	i needed some hardware built so got the department machinst to do the hard parts cutting and anodizing the aluminum but i put in the glassware and wires and other.
19174 	X	some of the worst chem labs are run by grad students who dont have lab training and get about days of safety.
19175 	X	i designed the aluminium part but theres no way im going to be a.
19176 	X	i gave him the plans and got the part a week.
19177 	X	i fail to understand your point.
19178 	X	should all labs hire an expert programmer.
19179 	X	or perhaps there should be a departmental programmer.
19180 	X	at what point is the cutoff threshold to justify the experts cost over the relatively cheap grad students getting paid or less the experts wages.
19181 	X	this isnt lowest common deminator this isnt dictating if the language gets too complex then other languages will appear which promote easy for novice programmers to understand but also usable by expert programmers unlike that baroque python.
19182 	X	there are plenty of languages in the.
19183 	X	my argument does not apply to all of.
19184 	X	it does not apply to c.
19185 	X	i have evalutated many languages as possiblities for my target audience and decided python is the right one partially because of its simple.
19186 	X	if it gets too complex i will look for other.
19187 	X	with this pep python gets further and further down that.
19188 	X	not complex by leaps and bounds but by slow.
19189 	X	if you read what i am saying you will realize that i am not talking about.
19190 	X	should all languages get more and more complex so that people with inadequacies cannot easily program.
19191 	X	thats how i figured out how the language is supposed to.
19192 	X	that doesnt mean that i can understand lisp code by looking at.
19193 	X	yes were i to spend more time on it i.
19194 	X	we i to learn lisp i am convinced i would not have that many people using my software to do new.
19195 	X	similarly i read the smalltalk book and tried out.
19196 	X	failed misearably when i couldnt figure out how to type things into.
19197 	X	also didnt like the language too objecty for my tastes and i didnt like that new functions are added to classes like adding a new abs function to.
19198 	X	one of the alternatives has a side effect or one or both alternatives are time consuming or the validity of the alternatives depends on the outcome of the.
19199 	X	example where all three reasons apply data isinstance source str source readlines source split.
19200 	X	readlines moves the file pointer for long sources both alternatives take time split is only valid for strings and readlines is only valid for file.
19201 	X	in article at mn rr com.
19202 	X	that in a nutshell is what this argument is.
19203 	X	the problem is theres a natural tension for expert programmers to want to express themselves easily and tersely and theres a natural tendency for programming language designers to cater to.
19204 	X	in a very real sense its no different from the desire of someone with an encylopedic knowledge of a language desiring to find the single perfect word to express meaning rather than relying on a more complex.
19205 	X	python has so far done an excellent job of maintaining a balance between all the different tensions those who are unutterably opposed to any form of conditional expression fall completely into your.
19206 	X	aahz aahz at pythoncraft com http www pythoncraft com.
19207 	X	register for pycon now http www python org pycon reg html.
19208 	X	anthony return sqrt z anthony return.
19209 	X	anthony y condsqrt z for z in x.
19210 	X	anthony theres a function call overhead but its a hell of a lot anthony easier to.
19211 	X	im not convinced its easier to read because i must now look in two different places to see whats going.
19212 	X	andrew koenig ark at research att com http www research att com info ark.
19213 	X	jim jinkins j jinkins at usa net.
19214 	X	im not quite shure whether this is old news or not but i havent seen the following mentioned.
19215 	X	jason orendorffs entry a tiny version of collossal cave.
19216 	X	http www us ioccc org jason c resp http www ioccc org.
19217 	X	got a best of show award in the latest international obfuscated c code.
19218 	X	imho a great part of its obfuscation is owed to cs ternary.
19219 	X	for example the state machine that runs the game is a single loop evaluating a single expression composed of a rats nest of thirty six.
19220 	X	and thirty six logical ors without a single bracket.
19221 	X	i had to look at the c parse tree in order to understand what it.
19222 	X	thank you for observing all safety precautions.
19223 	X	but no i cant describe how it could be represented nicely in a programming.
19224 	X	i just wanted to say that i do not care much for the.
19225 	X	like operator as it adds nothing.
19226 	X	sincerely yours roman suzi rnd at onego ru my ai powered by linux redhat.
19227 	X	yes but for at least two good reasons multiline expressions in python require to join the lines and this shold be no exception and print is a statement theres no risk for hidden bugs because the code wont even compile and thats a good thing.
19228 	X	as to it would be confusing because they appear to differ only by parens youre leaving out the context in which theyd be used and although the parens are important the actual context is even more important in determining.
19229 	X	in an if statement the if is what you see.
19230 	X	way way way on the other side of the spectrum youd realistically never see a conditional expression in any of the proposed forms as the first thing on a.
19231 	X	the most common case is likely to be of the form.
19232 	X	so in reality there is a clear distinction between the.
19233 	X	and emphasis clarity and overriding precedence.
19234 	X	this is how theyre used today and the above example is no.
19235 	X	iirc the parens required form is losing popularity.
19236 	X	it turns out we agree more than not.
19237 	X	i dont disagree with you in that respect the above is one of my favorites so far i just didnt find a problem using if again and since the original pep version is losing favor ill probably be casting my vote for the c then x else y.
19238 	X	side question in your opinion why did guido say he would reject proposals that lacked short circuiting.
19239 	X	thats how i feel when i need the conditional operator but dont have it and instead have to resort to what i consider to be ugly workarounds that have little to do with the intent of my.
19240 	X	i miss it from c because it expresses what i mean whereas.
19241 	X	true x false y bool c.
19242 	X	steven taschuk values of beta will staschuk at telusplanet net give rise to domata.
19243 	X	actually the point of confusion was around if there was a need for an explicit do not care vote versus people simply choosing not to vote.
19244 	X	for most language changes the pro and con camps will always be minorities because the overwhelming majority of python users probably dont follow c l py closely if at.
19245 	X	lets us two ways to write conditional expressions using when.
19246 	X	if when callable obj obj else default.
19247 	X	in this case i think that the colon is needed after the condition it does not seem right to have the condition and the true branch right next to each other without some explicit.
19248 	X	as far as i understand it this proposal requires when to become a reserved identifier this makes it less likely to be.
19249 	X	on the other hand i think that few programs would ever use a variable named when so this problem may be irrelevant in the.
19250 	X	if obj when callable obj else default.
19251 	X	this one follows the steps of guidos proposal but it looks a little bit better than the original proposal as it does not reuse.
19252 	X	in this case the colon seem to be out of place and i think its better without.
19253 	X	in this case i believe that when does not need to be a reserved.
19254 	X	but im not aware of all the details involved im just working with analogies to other.
19255 	X	in both cases i think that the parenthesis makes the expression.
19256 	X	in my opinion it should be.
19257 	X	and the else clause has to be.
19258 	X	i dont see any sense in having an implicit default value for it it breaks the spirit of the conditional operator btw its not called ternary operator by some people without any reason isnt it.
19259 	X	carlos ribeiro cribeiro at mail inet com br.
19260 	X	in article xcmyll fsf at ruckus brouhaha com.
19261 	X	abuse of notation is room comp lang perl just along the.
19262 	X	david eppstein uc irvine of information computer science eppstein at ics uci edu http www ics uci edu eppstein.
19263 	X	its even better than a if cond else b.
19264 	X	and the refactoring you did becomes much more.
19265 	X	for me that a killer problem of peps proposed syntax with the condition in the middle reading and refactoring the code becomes harder.
19266 	X	that is why i cannot vote simply for.
19267 	X	the only syntaxes id like to see are.
19268 	X	i liked it better after playing with.
19269 	X	better than else consistent with the c like language crowd like pythons operators in.
19270 	X	yet another job for the colon doesnt convince.
19271 	X	the three other places i see where colons are used are not likely to see.
19272 	X	expressions in my opinion and even then simply adding parentheses can restore readability.
19273 	X	slicing indexing a tx y if statements if tx y dictionary literals tx y value.
19274 	X	imo is more obvious than using and or more readable than false true condition with better semantics than either.
19275 	X	the syntax offers enough improvement to supplant every use of the aforementioned syntaxes in my python.
19276 	X	if test lhs then expr else lhs else expr.
19277 	X	in some cases i think that kind of code is improved by using a conditional expression especially when a complex lhs or common subexpression in then expr and else expr can be factored.
19278 	X	esr has a patch to implement.
19279 	X	that is easy to modify for current cvs python.
19280 	X	but that when approach took me like a.
19281 	X	i have argued that then and when just make a difference of a single.
19282 	X	this was completely crappy since when replaces if not then.
19283 	X	elegance is a very high level of pythoniciy rarely.
19284 	X	i now realize that i wasnt so unhappy with the order of constructs but of the misplaced if.
19285 	X	when is much less of a problem to.
19286 	X	think it over ly yrs chris.
19287 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
19288 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
19289 	X	well it takes little effort to maintain a list given that ive been following all the threads.
19290 	X	i just want to be prepared with the list in the event it gets that.
19291 	X	my general impression is that the first vote will be about.
19292 	X	but if of people want a conditional operator thats an awful.
19293 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote whoever contends with the great sheds his own.
19294 	X	http www pollywannacracka com the internet resource for interracial.
19295 	X	giles x expr giles x expr.
19296 	X	giles which is three extra lines and suffers from the possibility of giles introducing a bug through mis typing x.
19297 	X	i would like to strengthen this statement.
19298 	X	x condition and expr or expr.
19299 	X	print the value is x i and i else.
19300 	X	here i have carefully chosen the value in the to avoid the bug mentioned in technique.
19301 	X	if i print the value is x i else print the value is x.
19302 	X	which repeats much more than just x.
19303 	X	print the value is if i print x i else print x.
19304 	X	which some people will find obscure because of the print with the trailing comma or.
19305 	X	if i val x i else val x print the value is val.
19306 	X	andrew koenig ark at research att com http www research att com info ark.
19307 	X	ian of course personally i would find this expression to be ian horrible even without the missing.
19308 	X	i would never put two ian ifs in a statement without parenthesis to make it entirely clear ian how to parse.
19309 	X	as long as every if has an else no parentheses are.
19310 	X	thats one argument for a mandatory else.
19311 	X	another is that the default value of none is not.
19312 	X	for example wouldnt you be tempted to think that.
19313 	X	if y x z else x none.
19314 	X	andrew koenig ark at research att com http www research att com info ark.
19315 	X	guido given that if then else expressions keep were requested i guido hereby put forward a.
19316 	X	the reason for and not is that i would prefer a syntax that doesnt evaluate right to left if someone can think of.
19317 	X	however list comprehensions already have similar anomalies and they dont seem particularly.
19318 	X	i think this proposal is important because it significantly expands what one can do straightforwardly in the functional.
19319 	X	that is i consider it to be in the same general category as lambda and list comprehensions features that not everyone will use but that are important to the people who use.
19320 	X	my evidence that it is important is that a people keep asking for it b people keep thinking up circumlocutions to accomplish the same thing and c those circumlocutions are often either wrong or hard to understand or.
19321 	X	andrew koenig ark at research att com http www research att com info ark.
19322 	X	tim on holgers minimal impact x and y else z.
19323 	X	that he doesnt like it of course and that it requires thinking too much about it before you can feel comfortable with.
19324 	X	thought experiment suppose you were designing a new.
19325 	X	would you consider adopting pythons x and y else z notation for the new languages conditionals.
19326 	X	if not then maybe its a case of settling for too.
19327 	X	its my part time job to channel guido because hes always.
19328 	X	for some reason it doesnt count that i am too wink.
19329 	X	it occurred to me today that the patch guido wrote two years ago if c then a else b and the suggestion he started with in the pep last week a if c else b and the newer suggestion hes shown some liking for if c a else b have one thing in common they all contain the word if.
19330 	X	as a professional channeler my bet is that any spelling that doesnt contain if is going to get rejected in the end for were too.
19331 	X	otoh if says if as plainly as anything can say if.
19332 	X	remember that guido doesnt want this enough to accept much ugliness in order to get.
19333 	X	indeed hed be happy to leave the language alone.
19334 	X	i swore i would never argue subjectively but i find it creepy when a special form overloads an ordinary binary operator to make it something.
19335 	X	x print sqrt x or imaginary.
19336 	X	while adding this guard phrase if x will reach back and re empower the sqrt return value that or would have.
19337 	X	certainly you could explain this as thats the way it is if it came to.
19338 	X	but it would get in the way of explaining the normal actions of binary operators be they and or or.
19339 	X	the only flaw with and or as a selection expresion is that it doesnt.
19340 	X	very unfortunate that that flaw happens to be.
19341 	X	here are some places in another persons code where he used the and or trick because of the lack of a ternary.
19342 	X	the script is lines long and there are uses of the and or trick i realize that thats a lot more frequent than it would be for most programs.
19343 	X	the program was not intended to be great code i assume it was written to get the job done so i dont want to pick on it too.
19344 	X	my main point is that when the readable alternative does not exist people often do pick the less readable alternative rather than write things out explicitly with a temporary variable the nice.
19345 	X	this code would have been more clear not less clear if the ternary operator had existed given the programmers insistence on finding some way to fake it if a real way didnt.
19346 	X	personally despite my wishes for a ternary conditional operator i write everything out explicitly instead of using the and or or array indexed by bool tricks both of which i consider insufficiently.
19347 	X	when i rewrote this code in a form i could more clearly understand i defactored out all of these expressions to if else assignments to temporary variables when necessary.
19348 	X	for each of the examples i will provide what the code would have looked like if the original programmer had access to a ternary conditional.
19349 	X	old lines infile and open infile or sys stdin readlines new lines infile if open infile else sys stdin readlines.
19350 	X	old self adj power word b and builds or removes new self adj power builds if word b else removes.
19351 	X	old self outfile write t d d s n si x si y unit a and drawarmy or drawfleet new self outfile write t d d s n si x si y drawarmy if unit a else drawfleet.
19352 	X	old graphics append s d d s s msg and failedorder or si x si y graph msg and okorder or new graphics append s d d s s failedorder if msg else si x si y graph okorder if msg else.
19353 	X	old self outfile write time and s writeorder n or s n power new self outfile write s writeorder n if time else s n power.
19354 	X	old self outfile write t d d s n unit loc x unit loc y unit type a and drawarmy or drawfleet new self outfile write t d d s n unit loc x unit loc y drawarmy if unit type a else drawfleet.
19355 	X	old status power unowned and or d d len self units get power len self owner get power new status if power unowned else d d len self units get power len self owner get power.
19356 	X	in my opinion this is a really bad choice of notation it does not suggest lazy evaluation at.
19357 	X	for the record im not against some generalized form of lazy evaluation but hopefully it would be something not too intrusive and also not too interfering the idea suggested a while back of having a syntax for specifying lazily evaluated arguments to functions throws a sabot into the machinery now when you look at what looks to be a function call you have no idea whether the arguments will be evaluated first or.
19358 	X	i suppose the same objection goes for.
19359 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote you cannot step into the same river.
19360 	X	cratylus python chess module http www alcyone com pyos chess a chess game adjudicator in.
19361 	X	in article brh oc at slb atl mindspring net.
19362 	X	youve put your finger on the reason i feel a stronger negative reaction to this than the.
19363 	X	it seems rare to me that someone tries to directly transpose a for loop into a listcomp or vice versa but i think thatll be much more common with.
19364 	X	aahz aahz at pythoncraft com http www pythoncraft com.
19365 	X	register for pycon now http www python org pycon reg html.
19366 	X	of course precedence rules have to be defined but as always you can parenthesize for.
19367 	X	well im terribly terribly sorry if my attempt at humour offended your delicate.
19368 	X	i shall endeavour to make sure that all possibly traces of humour are removed before.
19369 	X	no it wasnt meant to be side splittingly.
19370 	X	it was meant as a quick cheap thing that amused.
19371 	X	as far as the unidentified people well as im not in the habit of posting personal email messages i guess youll have to take my word for.
19372 	X	i really couldnt give a fuck whether you do or.
19373 	X	may not have been you but it was someone in the thread who replied to either richards post or.
19374 	X	fetch the attribute named join prepare the value of the variable named lines as the argument and execute the attribute must be a method with the.
19375 	X	you might want to read what i wrote a little more.
19376 	X	i didnt say that adding something to python couldnt make it worse of course it.
19377 	X	i said that it couldnt turn it into a dumbed down language unsuitable for serious.
19378 	X	there are many ways to make a language.
19379 	X	not all of them can be caused by adding.
19380 	X	gareth mccaughan gareth mccaughan at pobox com sig under construc.
19381 	X	fewer than make the other mistake here wink but i make it too find returns an index not a bool so the original leaves x at none if s begins with spam in which case s find spam returns so is false and sets x to eggs if spam doesnt appear in s at all in which case s find spam returns so is true or if spam does appear in s but not starting at index.
19382 	X	btw thats one of the motivations for liberalizing in with string operands so that youll be able to write.
19383 	X	x none if spam in s x eggs.
19384 	X	instead and actually have it work as.
19385 	X	i wasnt aware it actually came from.
19386 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote i always entertain great.
19387 	X	robert frost get your own customized newsfeed online in realtime for free.
19388 	X	the technical process of tallying the votes is really a minor issue its easy to do and quite frankly will not require much work even building a voting system up from scratch i would prefer an email based solution myself.
19389 	X	if i were to conduct the vote note the clever use of the subjunctive there id simply set up a form that people could fill out and send to a dedicated email address which will go away when the vote is complete and then declare that the voting process starts when the form is distributed and ends at some certain time perhaps a week after initially posted.
19390 	X	all mail to the address would be gated to a mailbox then id use a python well duh script to process each mail received and tally up the votes for all.
19391 	X	then the results would be posted with mangled email addresses so people dont get mad for everyone to see so that full accounting is.
19392 	X	the script that tallies the votes would also be made available.
19393 	X	im really inclined toward andrew koenigs suggestion for approval voting where every conceivable option including one for i want no change is listed and voters are encouraged to vote for as many or as few as they.
19394 	X	not only does this reduce everything to one vote but it allows people to vote for multiple syntaxes they would accept and even allows for the ability to vote for things like well i really dont want it but if we have to have it id want this.
19395 	X	and for the abstainers you could simply not select any.
19396 	X	note at this point no one has nominated me to do the vote nor have i been asked to do it nor have i been tasked to do it by anyone with.
19397 	X	id be happy to do it and would even offer to abstain from the voting process myself if it helped put people at ease but as of right now i wont be involved in the actual votetaking in any.
19398 	X	im slightly concerned with aahz who it seems that people have accepted as the votetaker even though it hasnt really been discussed were so hostile to the proposal from the very.
19399 	X	im more concerned with the voting process that he initially proposed which seemed to me very specifically designed to undermine the pep passing he seemed to acknowledge my objections but i didnt get a good indication if that actually changed the way he intended to conduct the vote.
19400 	X	i am however downright terrified of his threats of voting against the proposal votetaker or not based on the actions of a third.
19401 	X	someone who is threatening to vote one way or the other simply out of spite should not be involved with a votetaking process of any kind in my perhaps not so humble.
19402 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote do not seek.
19403 	X	dag hammarskjold esperanto reference http www alcyone com max lang esperanto an esperanto reference for english.
19404 	X	erik max francis max at alcyone com writes.
19405 	X	it requires a new keyword but how about.
19406 	X	as far as possible new keywords go ill guess that then is not commonly used as a variable.
19407 	X	i expect this will get shot down though ive noticed a certain resistance to the addition of new.
19408 	X	what id really like is to have the conditional come first and avoid overloading the if.
19409 	X	obviously else is already overloaded and fits nicely in.
19410 	X	sigmask version feed this to your.
19411 	X	print reduce lambda xy x chr ord y ojdlwbshjti.
19412 	X	stipulated that the confusions you point out are bad.
19413 	X	how would you feel about this.
19414 	X	get the ple of names value and owner value if is cached.
19415 	X	get cache name else self connection fetch name owner if x startswith db self connection get owner name else self webservice get owner by name name a value owner.
19416 	X	btw should that be name startswith db.
19417 	X	to me this rewrite is motivated by general considerations of good style and the result is.
19418 	X	i make the same kinds of rewrites with normal expressions e replacing spam x x p p p p p p with something like dx p p dy p p slope dx dy intercept p slope p spam x slope x intercept big expressions are hard to follow naming intermediate values.
19419 	X	your example seems to me to be of the same.
19420 	X	it is of course made worse by the fact that indentation is surprisingly irrelevant as you point out but to me its a style issue not a shortcoming of the proposed.
19421 	X	steven taschuk we cant stop people from complaining but staschuk at telusplanet net we can influence what they complain.
19422 	X	two things you may consider adding.
19423 	X	there was some discussion about allowing elif in this context which is a natural thing to consider at least as an option.
19424 	X	the current alternatives shown in the pep and in faq section all have serious drawbacks as both are quick to point.
19425 	X	a more workable alternative using existing constructs could be.
19426 	X	i propose showing a variant of the tim peters alternative feel free to rename ifelse into cond iif or whatever you please.
19427 	X	note that this is an n ary operation.
19428 	X	ifelse a and x or b and y or c and z or.
19429 	X	im not against adding ternary or n ary operations but existing alternatives should really be given fair.
19430 	X	thats not the point of my.
19431 	X	david eppstein reponded that he had used it in his.
19432 	X	so i specifically talking about erik max francis assertion that the construct if something.
19433 	X	this that is so rare as to be totally irrelevant.
19434 	X	it is not all that rare as i showed and i chose an analysis which was guaranteed to produce the minimum number of hits to set a lower.
19435 	X	i explicitly ignored cases where more complex forms of.
19436 	X	i then followed up on his statement which i quoted to show that it wasnt of my origin that the use of if is bad form in any.
19437 	X	thus by his definition of bad form it will be that at least of the uses if the if else expression will be in bad form.
19438 	X	thats besides the point of this branch of the.
19439 	X	ahh i consider bad style to be part of.
19440 	X	ummm as i elsewhere showed there is plenty of c code which uses.
19441 	X	as such people do consider the if else statement an alternative and even an improvement to the.
19442 	X	you consider the if else expression in this case to be more readable than the or case.
19443 	X	i dont find that to be.
19444 	X	people have come to this list sorry no references asking for an if else expression to do x because thats what would be used in insert language here.
19445 	X	when we ask what they need it for for the most part its because they didnt know part of the language like the or solution.
19446 	X	we mentioned it and that person leaves slightly more.
19447 	X	for or is indeed the proper better clearer cleaner.
19448 	X	were an if else expression available it would be used no questions asked and pythons grace made slightly less.
19449 	X	you say lends itself to a clarification but you dont know that in the code im refering to the input can only be of one type and cannot take a none so that clarification is.
19450 	X	to show otherwise you must argue from statistics as otherwise its my gut feelings are better than your gut feelings and posts later weve gotten.
19451 	X	the current proposal in the pep is left to.
19452 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote no one knows what he can do until he.
19453 	X	publilius syrus maths reference http www alcyone com max reference maths a mathematics.
19454 	X	samuele pedroni pedronis at bluewin ch wrote in message news eb at news bluewin ch.
19455 	X	i had to make it behind that thought too.
19456 	X	what i like so much about the proposal is that it cures an existing construct does not introduce new keywords and it is small although it uses words.
19457 	X	i have the strong feeling that it will make.
19458 	X	holger this was an outstanding genial idea.
19459 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
19460 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
19461 	X	i suspect that any proposal that suggests the introduction of a new keyword is going to get shot down pretty.
19462 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote shooters looters now i got a laptop computer ice cube keplers laws http www alcyone com max physics kepler a proof of keplers.
19463 	X	andrew koenig ark at research att com writes.
19464 	X	cond true false is the only order that i can see as readable in the long.
19465 	X	which unfortunately isnt the one in the.
19466 	X	id like to see some concrete examples of where this is a significant.
19467 	X	all the examples so far have been toy ones where performance isnt an issue and i have a hard time thinking of a case where only evaluating one alternative is needed for correctness unlike c where i max bound.
19468 	X	array i default is the obvious example.
19469 	X	paul this signature intentionally left blank.
19470 	X	christian tismer tismer at tismer com wrote in message news.
19471 	X	pythons and and or are not most anyone.
19472 	X	their definitions should be read at least three times when learning the.
19473 	X	see pep pythons conditional selection operators which i just.
19474 	X	the biggest benefit to having the if then else expression is that we can toss out this lousy idiom.
19475 	X	i dont use this idiom but i have seen it in the.
19476 	X	i dont know who had the idea for using but i like.
19477 	X	are nice for keeping expressions looking like.
19478 	X	if else would make expressions look too much like.
19479 	X	this is the format i wish i could use.
19480 	X	if parentheses are required it is easy to figure out else expressions even with.
19481 	X	with other peoples code using a text editor with matching brace highlighting it is.
19482 	X	short circuiting would be the least astonishing.
19483 	X	once people understand short circuiting for and or is not much more difficult to.
19484 	X	holger krekel pyth at devel trillke net writes.
19485 	X	as long as people are proposing alternatives what about.
19486 	X	or with required parentheses c then x else y.
19487 	X	it has the advantage that it doesnt overload existing keywords like the if statement or the and operator except for the else keyword which seems to be heavily used in many places in the language.
19488 	X	to me personally print affected d row s rows rows then s else doesnt look too.
19489 	X	if this has already been proposed and discarded my.
19490 	X	ruud ruud de rooij spam ruud org.
19491 	X	let me guess which side you lean on.
19492 	X	actually in my book people gave quite some good reasons for opposing the pep.
19493 	X	a it reads ugly especially in non assignment statements.
19494 	X	b it reuses a keyword which formerly was a clean indicator of a statement.
19495 	X	c you cant read it either ltr or rtl.
19496 	X	d there are often better ways than doing the c ish x.
19497 	X	y z e adds to the stuff you have to learn if you read others code.
19498 	X	f is not an important enough use case to warrant new syntax.
19499 	X	i have often seen people claiming that other peoples objections are just based on irrational feelings whereas themselves they would have well founded oppinions.
19500 	X	more seriously though i think you are right about pythoneers coming from different.
19501 	X	but its important to settle on a minimal set of syntax and not combine all the wishes from all groups which would greatly decrease readability of others source.
19502 	X	holger let me guess which side you lean on.
19503 	X	i like the overall idea but have slight misgivings about the infix if.
19504 	X	holger actually in my book people gave quite some good reasons holger for opposing the pep.
19505 	X	holger a it reads ugly especially in non assignment statements.
19506 	X	holger b it reuses a keyword which formerly was a clean indicator holger of a statement.
19507 	X	subjective especially when you realize that if is already thus reused in list.
19508 	X	holger c you cant read it either ltr or rtl.
19509 	X	agreed thats why im instead of.
19510 	X	holger d there are often better ways than doing the c ish holger x.
19511 	X	agreed but thats not an argument against pep unless you change often to always.
19512 	X	holger e adds to the stuff you have to learn if you read others code.
19513 	X	agreed but the importance of that is.
19514 	X	holger f is not an important enough use case to warrant new syntax.
19515 	X	but whats not subjective is that several people have made statements of the form i dont need it because i can write x instead and then proceeded to give alternatives that were just plain.
19516 	X	btw i completely agree with your estimates of which are good maybe bad uses of the if else.
19517 	X	at most there are changes in lines of code which is about every.
19518 	X	my estimate based on an analysis of c c code suggested numbers around lines.
19519 	X	someone elses estimate my apologies dont recall who was about in lines but i found some problems in that.
19520 	X	that means there are about proper uses of this in loc or under per.
19521 	X	i interpret this to agree that it doesnt help much with overall readability of python code since it wont be used all that.
19522 	X	this assumes it will always be used when it is a better.
19523 	X	not everyone will use the if else.
19524 	X	some because they dont like it others because it isnt part of their toolchest.
19525 	X	i looked at some c c code and found a reasonable number of examples where if else was used when could have been.
19526 	X	i did not do a good survey of this so ill estimate it at usage so i can be on the high side and round things out to uses in lines of.
19527 	X	now consider that people will use if else expression to make things more complex than.
19528 	X	there are where it could have been done and i believe as bengt richter was so kind to point out that some will do.
19529 	X	earlier i listed some reasons its tight or cool or terse or perhaps because well its in the language so ill use it or simply showing.
19530 	X	my observations of misuse in c code showed it was pretty high so ill assume and round down to use in.
19531 	X	that means that for every uses of the if else expression which make the code more readable usable maintainable then we should expect use which make it less.
19532 	X	the numbers i came up with were closer to to but thats because i was working with a codebase written by people who are not software engineers and your analysis does not include inappropriate cases where you could have used a if else expression but were already using a better more appropriate python.
19533 	X	eg using x if x y else y instead of min x y.
19534 	X	im willing to concur from what ive seen from those who have done analysis based on real life code that.
19535 	X	if else expression will be used well about once every loc.
19536 	X	for every proper uses of the if else expression there will be improper use.
19537 	X	therefore i am still against this.
19538 	X	this is an excellent set of arguments and i think they should be added to the.
19539 	X	a minor correction else is not currently a reserved word but that doesnt matter since it can be a non reserved keyword for this.
19540 	X	greg ewing computer science dept university of canterbury christchurch new zealand http www cosc canterbury ac nz greg.
19541 	X	however orens opinion is different from that of somebody who thinks if c x else y would be wonderful but if that cannot be then no change is better than all other alternatives which i hate.
19542 	X	single transferable vote does see the subthread stv was c if the ballot is say.
19543 	X	a no change no introduction of ternary operator into python b if c x else y etc for c d and so on.
19544 	X	oren might vote a b the other hypothetical somebody would vote b a and the stv algorithm would distinguish in just the right.
19545 	X	say theres only one further choice c and for example.
19546 	X	of voters preferences are a b are b a are a c are c a.
19547 	X	of voters prefer no change though of those would rather put up with b than with c they hate c intensely and b only a little vice versa prefer b but hate c so much theyd rather see no change than it prefer c but hate b so much theyd rather see no change than it.
19548 	X	since prefer no change there should be no change and that is what stv would.
19549 	X	with approval voting youd count for b for a for c and would pass b.
19550 	X	i think if you construct all cases in which approval and stv give different results stvs outcome is a better match for the voters collective.
19551 	X	and dont tell me its too complicated once im mailing in a list of approved alternatives such as a b its just as simple to take into account that order matters both a b and b a are approval at some level for the two cases but a b indicates a is preferred b a indicates b is quite natural and simple.
19552 	X	if else pass isnt required in the statement why should else none be required in the expression.
19553 	X	self stream writeln ran d in.
19554 	X	its unittest of course its running tests wink.
19555 	X	mandatory parentheses doesnt mean there has to be a grammar production that goes if expr if.
19556 	X	this particular example is enclosed in.
19557 	X	and is therefore accepted by the grammar changes proposed in.
19558 	X	that should have been radio buttons of course.
19559 	X	sure but it really serves the purpose trying to find better examples than how to spell.
19560 	X	c code where actually could be written much nicer in python than with a ternary op and the other werent that.
19561 	X	should work although i am not sure that pgen itself checks for.
19562 	X	of course you avoid the problem of if cond expr else expr as a statement by disallowing.
19563 	X	if you really want to integrate this with the pep then you might want to bring it to the point that you can completly compile.
19564 	X	at least i would do it if i were in favour of more powerful expressions wink.
19565 	X	you dont need to run it although empty code generation in compile c would easily allow that i guess.
19566 	X	i remain unconvinced that we need more powerful expressions in python.
19567 	X	x if c e elif c if c e else e.
19568 	X	my point is that if guido is going to agree to add this controversial new feature to python the result should be absolutely no thought required readable and.
19569 	X	nothing optional apart from the inherent n way optionality of the elif.
19570 	X	it eliminates the corner case precedence issues and alan daniels objection elsewhere in this.
19571 	X	now add an operator to the right end of the.
19572 	X	sure it is possible to set up precedence so that it usually does the right thing but an inexperienced programmer or one who simply prefers not to use conditional expressions in their own code will have to stop and think when they read in someone elses code.
19573 	X	is that a tuple or a pair of arguments.
19574 	X	see also parse this for me assuming that those who also want else to be optional win.
19575 	X	x if c e elif c if c e else e.
19576 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote ride ride this wave of mine res esperanto reference http www alcyone com max lang esperanto an esperanto reference for english.
19577 	X	the new symbol is a visual clue that somethings going on rather than re using if which i dislike strongly.
19578 	X	on the other hand i dont like.
19579 	X	if you need to do something like this why not just.
19580 	X	anthony baxter anthony at interlink com au its never too late to have a happy.
19581 	X	michael hudson mwh at python net writes.
19582 	X	no im saying that those who do like the and or thing are actually the secret.
19583 	X	they just dont tell us that theyre the secret masters because then it wouldnt be secret any.
19584 	X	sometimes they even keep it secret from themselves.
19585 	X	actually some of us were posting about how we thought the new join syntax was really awful and ugly and unintuitive well before came.
19586 	X	some of us still are wink and still use string join seq sep and will fight vigorously to prevent it were removed even though its.
19587 	X	we were unfortunately unsuccessful in convincing people that some things are better as a function accepting multiple arguments than as a method of one of those two.
19588 	X	as to pep i havent involved myself in the arguments because.
19589 	X	i think anything i said would be lost in the noise.
19590 	X	i highly doubt that i will change anyones mind.
19591 	X	im on having a ternary operator at all and will vote that way.
19592 	X	i think all the alternatives proposed so far are awful and ugly but anything which is not of the form.
19593 	X	guido appears to be becoming anti true result test false result because it is out of order so im not too worried that i will have to cope with it in other peoples.
19594 	X	when you are at it id like to propose to change the pipermail part of mailman to no longer simply numerate the html documents but to use the message id for the name which is always found in the.
19595 	X	this would allow it for example to write a list digest with proper links without having to be online in order to get the links.
19596 	X	we had that prob with pypy dev when the server was down.
19597 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
19598 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
19599 	X	the however ugly comment is just characterization no buts about.
19600 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote ride ride this wave of mine res esperanto reference http www alcyone com max lang esperanto an esperanto reference for english.
19601 	X	ok just let approval values vary from to.
19602 	X	keep in mind we are doing this to communicate with the bdfl not to present him with a predigested decision run through some.
19603 	X	why not make specific choice disapproval visible.
19604 	X	i should dig one out i.
19605 	X	mutt is almost as good as i need it but it has.
19606 	X	but it doesnt give you a nice url or what magic browser are you using.
19607 	X	ive been reading about pep though not everything obviously and had a thought about the ternary operator like syntax.
19608 	X	in itself this notation is nothing special friendlier that the existing use of and and or but only a minor gain really and certainly no better than the slightly reminiscent of lisp.
19609 	X	yes im a c and c programmer by default that doesnt mean i have to like the c ternary operator even with more sensible operator.
19610 	X	however what if it wasnt a ternary operator but instead two separate binary.
19611 	X	a then b evaluate a if true return b if false trigger.
19612 	X	a else b evaluate a if successful return result else return b.
19613 	X	this would be a lot like certain icon expressions but without the annoying relative operators that dont return truth values.
19614 	X	the then operator would basically be a quick assertion style validation operator useful even without an.
19615 	X	and the else could be used to catch exceptions from inside functions and provide defaults useful even without the.
19616 	X	def checked fn x return x then fn x.
19617 	X	in concert note that ve x causes fail condition not infinite.
19618 	X	def factorial x return x then else x then x factorial x.
19619 	X	it might be possible to treat the backtracking from then as an exception with a standard name though this is extremely suspect i.
19620 	X	in reality i imagine it would complicate the expression compilation too much or alternatively add an unnecessary overhead to all expressions.
19621 	X	there may also be a parsing issue with allowing the else to be used as a separate operator without a prior then but i thought id mention it just in.
19622 	X	steve at ninereeds dot fsnet dot co dot uk.
19623 	X	erik max francis max at alcyone com writes.
19624 	X	ive seen a few posts by now getting the proposed conditional expression the wrong way.
19625 	X	maybe this proves that its simply hard to think correctly in terms of conditional expressions and they should not be used and hence that language support for them should be rejected.
19626 	X	or maybe we just need to move on and make new points or give.
19627 	X	in fact i dont care too much either.
19628 	X	the main requirement is that precedence and grouping rules need to be.
19629 	X	obj and obj method and yes else no.
19630 	X	to return no instead of attributeerror on none.
19631 	X	i think it would work for your.
19632 	X	you need to sort it out in the compiler with some look.
19633 	X	w and x and y else z.
19634 	X	the first part you dont know that x in fact belongs to a.
19635 	X	if you try to code it into the parser you might again need look ahead which does not work.
19636 	X	thats why i thought its better to just recognize the and y else z part and not care about what came.
19637 	X	chaining ternary operators without parens is a bit insane anyway ly yrs.
19638 	X	but the fact that even many proponents of the pep whether theyve had experience with conditional operators from other languages agree that the order of the expressions is confusing should be a good.
19639 	X	people arent saying its awkward because its not a copy from other languages theyre saying its awkward because they think its awkward on its own.
19640 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote the average dog is a nicer person than the average.
19641 	X	andrew a rooney python chess module http www alcyone com pyos chess a chess game adjudicator in.
19642 	X	in article bjd cnij at id news dfncis de.
19643 	X	no because its not the same.
19644 	X	apr msc bit intel on win type copyright credits or license for more.
19645 	X	python is a simple yet powerful.
19646 	X	erik im going to turn that one right around on.
19647 	X	why add the new erik keyword ifelse.
19648 	X	john because youve got a major ambiguity if the statement begins john with an if.
19649 	X	i believe i have eliminated the.
19650 	X	many people have suggested that it requires unbounded lookahead to determine whether.
19651 	X	after thinking about it for a while i suddenly realized that this claim is not.
19652 	X	the key here is that a statement always ends with either a newline or a dedent and an expression never.
19653 	X	that means that when youre parsing bottom up whenever it comes time to determine whether a construct is an expression or a statement you can always make that determination by seeing whether the next symbol is a newline a dedent or something.
19654 	X	this surprising fact yields an even more surprising simplification of my previous proposal for changing the grammar.
19655 	X	test and test or and test lambdef.
19656 	X	test and test or and test lambdef if test if test if test test elif test else test.
19657 	X	in english an if else expression is permitted anywhere a lambda expression is permitted with the same precedence.
19658 	X	if x foo else bar legal expression.
19659 	X	if x foo legal statement else bar.
19660 	X	print if x foo else bar legal statement.
19661 	X	if x print foo else print bar illegal as it is today print is not an expression.
19662 	X	if x print foo legal statement as it is today else print bar.
19663 	X	if x foo legal statement as it is today else bar.
19664 	X	andrew koenig ark at research att com http www research att com info ark.
19665 	X	several posters have mentioned the faq entry.
19666 	X	is there an equivalent of cs.
19667 	X	different implementations of a ternary operator will lead to embarrassing faq entries.
19668 	X	is there an equivalent of cs.
19669 	X	yes as you know python is an elegantly simple language and of course provides a ternary operator equivalent to ca b although more long winded and requiring parentheses.
19670 	X	if c then a else b.
19671 	X	is there an equivalent of cs.
19672 	X	yes just use a similar construction to an if statement but swap the order of the terms around a little to get a if c else b which everyone agrees would be a natural way to express a conditional if one wasnt already familiar with the order used in if.
19673 	X	lets just go for the c way of doing this so that we can drop the faq entry.
19674 	X	sorry i must have missed a previous post of yours pointing something out about.
19675 	X	i didnt miss comments on c x y e ev in fact i got an lol not at you out of one.
19676 	X	sometimes things arrive in strange time order too so there may be something i havent.
19677 	X	i think of what result x and y.
19678 	X	you arent thinking the result is or right.
19679 	X	for that matter consider x in the two contexts of x in if not x x else y x and y.
19680 	X	if you have a hard time with pythons short circuit and or expressions yes but if you just read it the way the interpreter does the concept of a truth wrapping skin on a term shouldnt be very hard to read istm but maybe i have grown too familiar with python short circuiting.
19681 	X	i doubt if implementation would be a big.
19682 	X	consider that there would be no way to bind a truth wrapped value since z x would bind to the value of x and likewise foo x would pass the.
19683 	X	iwg it shouldnt be that hard to recognize a truth wrapped node in the parse tree and generate a plain jump instead and a false for x but you never know until youre there so i admit to handwaving based on a hunch any other context would just generate code to use the wrapped value.
19684 	X	most of those are just for consistency since theres no reason to write something like x y even though its.
19685 	X	as to use in other situations some of them might not be a good thing to encourage but e g it makes it easy to insert an arbitrary function call in the context of the evaluation of a logical expression since whatever and x can be substituted any place x by itself can.
19686 	X	whatever could be a function call or a method call like this contrived logger.
19687 	X	x and log append in middle of x and y expression where x is true so far and y.
19688 	X	worse as i just saw that timothy delaney has brought up my truth wrap clashes with proposed set notation.
19689 	X	what else would make a simple wrapping syntax.
19690 	X	oh well i think i need a moratorium.
19691 	X	theyre not examples of how the conditional operator should be used in the real.
19692 	X	theyre simply an illustration of the edge cases in terms of.
19693 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote love is like war easy to begin but very hard to.
19694 	X	h l mencken cranks crackpots kooks loons on the.
19695 	X	i admit to having gotten quite overwhelmed by all the.
19696 	X	its very helpful to have a list like this with everything in one.
19697 	X	however languages are designed nearly always with the ability to get new functions without changing the syntax of the.
19698 	X	on the other hand few languages are designed so the syntax can be.
19699 	X	as such as new function is part of the existing language while new syntax is part of a new language which just happens to be close to the old.
19700 	X	for example if you want to find out what the ifelse function does you can do.
19701 	X	or use the corresponding help facilities of your ide of.
19702 	X	in general you cannot do so with.
19703 	X	according to my estimates based on the analysis of existing c c code and of existing python code i believe the misuse rate will be about misuse for every proper.
19704 	X	actually i think thats the low end and the misuse rate will be higher but im willing to live with it for the point of.
19705 	X	tim on examples of broken and or in the std library.
19706 	X	he posted several examples but only the one mentioned was actually.
19707 	X	two werent obviously correct in isolation but neither is.
19708 	X	obviously correct in isolation e in isolation you cant know that i isnt sys maxint going into this line similarly in isolation you cant know whether a may be true and b false in a and b or c but in context the impossibility of such things can be obvious and in these other examples was obvious.
19709 	X	it seems almost ideal for me.
19710 	X	half baked idea warning what about.
19711 	X	andrew mcnamara senior developer object craft http www object craft com au.
19712 	X	andrew koenig ark at research att com ha scritto nel messaggio news yurskn fsf at europa research att.
19713 	X	im not sure that raising syntaxerror counts as a valid entirely different meaning wink.
19714 	X	if x and y else z if x and y else z if x and y else z if x and y else z if x and y else z if x and y else z if x and y else z.
19715 	X	presumably only the last would grow a meaning under holgers.
19716 	X	using a conditional as an ifs test expression is likely unreadable no matter how its spelled.
19717 	X	i really cant make head or tail out of.
19718 	X	at first or second or third glance.
19719 	X	so if this feature is added you wont use it right.
19720 	X	that means it wont affect you one way or the.
19721 	X	so voting against it would be merely an attempt to scupper it for those of us who would really like this dale strickland clark riverhall systems ltd.
19722 	X	im not sure why you need a special form for the parenthesized.
19723 	X	surely the conditional operator would itself simply be an expression so it would be handled by a presumably already existing basic expr.
19724 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote whoever contends with the great sheds his own.
19725 	X	http www pollywannacracka com the internet resource for interracial.
19726 	X	i vote guido should just tell us what syntax is the.
19727 	X	since just about everyone has already posted their opinion i believe pep is actually a ploy to get an accurate count of the total python users out.
19728 	X	mis at pitt edu michele simionato writes.
19729 	X	its not actually abuse but i do agree that the proposed syntax is.
19730 	X	as you write this when expr expr else expr it is.
19731 	X	consider expr as a b and expr as.
19732 	X	when a b else or when a b else.
19733 	X	commas wont help as they are used in tuple.
19734 	X	you need a keyword such as then to go in.
19735 	X	can people please consider if their proposals are actually parseable.
19736 	X	actually the python parser has some very strict constraints token lookahead which mean that some things that look ok actually arent but start from just basic parsability at.
19737 	X	introducing a new keyword is a much more serious.
19738 	X	this is not going into no new syntax in if a new keyword is required at least version preparation is required in the form of a.
19739 	X	see for example how yield was.
19740 	X	so without a new keyword the pep might get implemented in python assuming the vote is positive.
19741 	X	with a new keyword it wont be until python at the earliest although it might be available in python via from future import.
19742 	X	and guido doesnt like new kywords even for features hes in favour.
19743 	X	id like to propose the desireability of any proposed conditional selection expression syntax to handle multiple chained condition value.
19744 	X	for the leading options offered chaining them looks like this.
19745 	X	if cond expr else if cond expr else expr cond then expr else cond then expr else expr cond.
19746 	X	if cond expr elif cond expr else expr cond then expr elif cond then expr else expr cond.
19747 	X	id also like to mention my own proposal generalising the ternary operator.
19748 	X	raymond hettinger vzerxy at verizon net wrote in message news.
19749 	X	john roth johnroth at ameritech net wrote in message news vsfgttfbee at news supernews com.
19750 	X	this problem arises with all the keyword based solutions i assume this is the reason for the mandatory brackets in the pep syntax.
19751 	X	so how about an alternative add a special method to the python bool type that works like this.
19752 	X	cond x or any expression that yields a bool result cond choose iftrue iffalse.
19753 	X	choose would need to be a special method so that it can avoid evaluating the non chosen.
19754 	X	print we have d widget s nw nw choose s.
19755 	X	you can almost add this without a change to the language.
19756 	X	class xbool bool def choose self iftrue iffalse return iftrue iffalse not self.
19757 	X	not quite though because this version does not short circuit and of course you want to write boolexpr choose t f rather than xbool boolexpr choose t f.
19758 	X	i guess the biggest argument against this syntax is that it is ugly to have something that looks like an ordinary method but does not in fact evaluate all its.
19759 	X	maybe adding this but without the short circuiting would be a viable.
19760 	X	as it is now i often undo my cunnery and go back to simple if statements sometimes to find myself redoing the cunnery after during familiarizing myself with the code.
19761 	X	im no laura so i cant explain for here so ill add my own.
19762 	X	lets not talk pizzas but python.
19763 	X	and lets assume that there are python users out.
19764 	X	when of those are pro and are contra then guido has a problem whatever he decides will upset half the.
19765 	X	on the otherhand when is pro and is contra and all the others dont care then whatever he decides will be fine with the.
19766 	X	in the first case wed better help him and try to convince the other party that our view point is the right.
19767 	X	in the other case we might as wel stop now and tell guido to throw dices instead more seriously when the pros and contras really are minority groups then its probably best not to add questionable syntactic sugar to the.
19768 	X	contrary to what some might have deduced from my earlier posts im neither pro nor.
19769 	X	i would use a better spelling for the and or idiom but only when it still looked better to me eyes after returning to my code after a few.
19770 	X	we have an important precedent in python in the form of list comprehension where if and for are appended to the.
19771 	X	while i appreciate the list comprehension feature which might be very useful at times it is also far too easily abused into writings which lack.
19772 	X	i fear a bit that pep suggestion has the same benefits and pitfalls that is it might be useful at times but also may be.
19773 	X	in python the language was kind of protective against such.
19774 	X	now legibility relies more on the shoulders of the programmer and less on the language.
19775 	X	that turn having already been taken by python my guess is that pep suggestion would currently fit.
19776 	X	my reluctance to it comes more from some remaining nostalgia of previous python simplicity and nowadays should probably be dismissed as anachronic.
19777 	X	franois pinard http www iro umontreal ca pinard.
19778 	X	you hit the nail on the.
19779 	X	as ive argued elsewhere in this thread and previous ones these are the main reasons for pep not saving keystrokes per.
19780 	X	ironically they actually go to improved readability by greater specificity of.
19781 	X	note the subtle bug below and how it cannot arise if rewritten to use cond expr.
19782 	X	if condition if condition targetvar result else targetvarl result else targetvar result.
19783 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
19784 	X	well yes since thats not the pep.
19785 	X	doesnt seem to me to present any serious.
19786 	X	so is it that you call him bdfl because he blushes when you say genius.
19787 	X	that syntax looks better every time i write it but i really though it was a norwegian blue when i first saw.
19788 	X	on first glance the second feels a little cleaner it separates sandwich ugh.
19789 	X	however its quite hard to judge these alone without any surrounding.
19790 	X	in what context do we anticipate if then else were used most.
19791 	X	casting them in an assignment context.
19792 	X	x a if condition else b x if condition then a else b.
19793 	X	makes the first suddenly seem more attractive particularly if a is the expected result and b is an exceptional.
19794 	X	the second form reads like an if statement gone wrong guido worries that this is ambigous to the parser but i think its worse its ambigious to the.
19795 	X	if i saw this in code id have to pull up sharp and puzzle it.
19796 	X	this worries me a little readability is one of the strengths i like about.
19797 	X	that said chained list comprehensions already have the same effect on.
19798 	X	on the subject of list comprehensions this makes me lean towards the.
19799 	X	results expression for a in stuff if condition.
19800 	X	which is nicely similar to the proposed.
19801 	X	and i wonder if if else would be worth carrying over into list comprehensions too.
19802 	X	results expression for a in stuff if condition else expression.
19803 	X	although i cant think of any non contrived.
19804 	X	and my brain starts hurting too much when i start imagining this with both expressions themselves were if else.
19805 	X	i sort of like it but it also scares me silly it feels like a very sharp knife to solve a fairly trivial syntactic.
19806 	X	the pre vote discussion period is wise my vote is still.
19807 	X	james kew james kew at btinternet com.
19808 	X	this seems like it would cause a problem in standard condionals.
19809 	X	if c b and x y do something.
19810 	X	would change meaning in an unfortunate way would it not.
19811 	X	i suggested the same in these recent pep threads as.
19812 	X	in the recent threads the main objection that seemed to be raised was that of a general trend of expressionizing.
19813 	X	others also expressed some displeasure at the required.
19814 	X	i dont know if thats really all that bad the required brackets in list comprehensions for instance are damn helpful in setting them off as in something special happens in.
19815 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote he who knows how to be poor knows.
19816 	X	jules michelet rules for buh http www alcyone com max projects cards buh html the official rules to the betting card game.
19817 	X	aahz schreef op zondag februari om.
19818 	X	is the vote which we are going to held on this pep binding.
19819 	X	has there ever been a pep or a feature proposal on which a formal vote was taken to decide whether to accept the pep or not before.
19820 	X	the answer to my question is.
19821 	X	asperger syndroom een persoonlijke benadering http people nl linux org gerrit het zijn tijden om je zelf met politiek te bemoeien http www sp nl.
19822 	X	erik max francis max at alcyone com wrote in message news efccb aeebfb at alcyone.
19823 	X	if i read you correct then the answer is no.
19824 	X	the form is best shown by example since the x y c nomenclature cant be written with all the symbols meaning the same thing as in your other examples which is why i goofed and switched the spelling of x and y between posts.
19825 	X	val sqrt x or imag if x.
19826 	X	if x val sqrt x else val imag.
19827 	X	which if i read you correct above means that i should be saying y or x if c i had it this way originally but then switched x and y around because i realized that my c is really opposite to most peoples c see wink.
19828 	X	ok so apparently i fail in the if the implementation is hard to explain its a bad.
19829 	X	james j besemer jb at cascade sys com writes.
19830 	X	if the truth is that there is no agreement maybe thats.
19831 	X	write it up in the pep and reject it once and for.
19832 	X	rejected peps are supposed to be valuable resources for recording why something was.
19833 	X	of course we could surprise him and all.
19834 	X	ps i get the feeling that guidos just sick of the bickering and wants to put an end to it one way or.
19835 	X	on fri feb mwilson at the wire com mel wilson wrote in comp lang python in article fopt ks kzrsyn at the wire com.
19836 	X	having not had sufficient time to read all the discussion on this topic this post caught my eye and i did go to look at the current pep.
19837 	X	i am disappointed to see that.
19838 	X	not only has the original proposal been removed.
19839 	X	the when alternative is also not.
19840 	X	i think that the presumption that those most vocal and frequently posting in the newsgroup represent the overriding consensus may be.
19841 	X	sheila king http www thinkspot net sheila http www kgroups org.
19842 	X	samuele i dont like the in.
19843 	X	andrew koenig ark at research att com http www research att com info ark.
19844 	X	that you now fully understand his proposal doesnt preclude it from still were insane.
19845 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote if you cant fight and you cant flee.
19846 	X	robert elliot physics reference http www alcyone com max reference physics a physics.
19847 	X	instead of is noosphere a reality.
19848 	X	i think you agree that is more apropriate for lambdas.
19849 	X	sincerely yours roman suzi rnd at onego ru my ai powered by linux redhat.
19850 	X	erik max francis max at alcyone com writes.
19851 	X	following on from andrew koenigs observations on interesting aspects of this discussion i note a lot of people who are in favour of conditional expressions are making comments along these lines ie i want conditional expressions and will take any form i can get.
19852 	X	id like to see a little more concern for the overall integrity of the python.
19853 	X	actually if i was feeling perverse i could argue that the following comes under the category of any form i can get.
19854 	X	or if you need evaluation of only one of the expressions.
19855 	X	condition and lambda expression or lambda expression.
19856 	X	strangely you can get these forms.
19857 	X	can you qualify exactly what you are willing to accept.
19858 	X	you dont like the forms that currently.
19859 	X	dont get me wrong i dont either but i am not arguing for a conditional expression to be added to the language.
19860 	X	why do people keep looking for a magic bullet that will be an expression that clearly must be expressed with a conditional operator.
19861 	X	obviously no such thing exists anything you can write with a conditional operator can be rewritten in some other syntax in currently existing.
19862 	X	the point is if the use of the conditional operator in those cases is justified and helps.
19863 	X	you may not think that in the sqrt case it is more readable but it is at least somewhat readable if you know what a conditional operator.
19864 	X	the point is not if such a thing can be recasted in some other.
19865 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote always forgive your enemies nothing annoys them so.
19866 	X	oscar wilde bosskey net quake iii arena http www bosskey net qa a personal guide to quake iii.
19867 	X	raymond hettinger vzerxy at verizon net wrote in message news.
19868 	X	however the elif option should have a colon after it and elif should be added as an option to the then else.
19869 	X	i like the first two about equally especially if an elif was added which is not possible with the last.
19870 	X	id go with whichever option appeals to the bdfl and the rest of the.
19871 	X	i dont like the last two.
19872 	X	evan simpson evan at am com wrote in message news.
19873 	X	in the standard library and or conditionals are used at least twice as often as for instance list.
19874 	X	does that mean that the reverse method is a mistake.
19875 	X	it is after all trivial to write a reverse function or reversing.
19876 	X	if they really think it will be so very rare why are they so bent out of shape at the prospect of having to very rarely read someone usage thereof.
19877 	X	the questions are for the objectors not for you.
19878 	X	but you did accept their claim as.
19879 	X	given that fact if guido agrees to add them to python they taken isnt.
19880 	X	lambdas are an obvious exception to.
19881 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote she glanced at her watch it was.
19882 	X	james clavell bosskey net quake iii arena http www bosskey net qa a personal guide to quake iii.
19883 	X	python list at python org holger krekel pyth at devel trillke net writes.
19884 	X	x and c or c and y else z.
19885 	X	in the context of boolean expressions and is supposed to bind more strongly than.
19886 	X	im a lambdaphile and i think its.
19887 	X	gareth mccaughan gareth mccaughan at pobox com sig under construc.
19888 	X	erik max francis max at alcyone com writes.
19889 	X	i didnt follow your explanation in the.
19890 	X	you want conditional expressions pretty much regardless of syntax so you see the first vote as a way for the nay sayers to scupper the process before we get to the real meat discussing the best.
19891 	X	on the other hand as someone who wants the pep rejected but who is willing to admit the possibility that there just may be a syntax that works even if no one has found it yet i see the stage process as a.
19892 	X	people like me may be reluctant to be quite so absolute as to say an unconditional no.
19893 	X	then we get left with a syntax wed reject immediately because we hate all the proposed.
19894 	X	guido just wants to know if the community can reach.
19895 	X	it seems self evident to me that there is no.
19896 	X	thats a shame for the people who like the pep but its not my problem as.
19897 	X	guido has said that if the community cant agree the pep gets.
19898 	X	so basically guido has put the onus on those who want conditional expressions to persuade the rest of.
19899 	X	you may not like this but thats guidos right as.
19900 	X	the burden of proof is on.
19901 	X	that seems an accurate assessment to.
19902 	X	what you dont like is what guido proposes to do on an undecided.
19903 	X	of course thats easy for me to say as guido appears to be coming down on the no side in the case of an undecided.
19904 	X	but dont try to misrepresent the community position just because you dont like what will happen if youre.
19905 	X	that strikes me as a self evident.
19906 	X	trying to make a consensus where there isnt one is the.
19907 	X	what guido does with an undecided result isnt for us to.
19908 	X	the tertiary operator is one of those long requested features thats not going to go away because its genuinely useful and allows one to eliminate an entire if block the way a list comprehension eliminates an entire for.
19909 	X	rejected or not the tertieary operator will continue to be a faq so we may as well put it in the language now so the issue will go.
19910 	X	thats what we did for and string methods which were rejected for years for pedantic reasons as unnecessary string methods because immutable objects dont have methods.
19911 	X	python has always been great in adding not every feature but a few well chosen features that have wide.
19912 	X	the tertiary operator would be a good.
19913 	X	sets and dict comprehensions are two others fortunately sets are already.
19914 	X	christian tismer tismer at tismer com wrote in message news.
19915 	X	which leads to the frustrating situation that they are almost a tetiary operator but with a sneaky little.
19916 	X	result a and b or c whoops b is.
19917 	X	the fact that people try to use and or so broadly for this shows that something is.
19918 	X	only one little tweak is needed an alternative construct that faithfully returns b if b is.
19919 	X	and and or are fine as they.
19920 	X	result replyvar or default i want default if replyvar is or.
19921 	X	if it aint broke dont fix.
19922 	X	result conditiona and conditionb a true.
19923 	X	who cares what exactly result is as long as it works properly in an if.
19924 	X	one can always use bool result if one really wants.
19925 	X	result b if a else c advantage parallel to list comprehension.
19926 	X	b c similar to c perl.
19927 	X	this is arguably more readable than.
19928 	X	result a b c good visual.
19929 	X	disadvantage irritating to c perl programmers for whom these operators have an entirely different.
19930 	X	result a then b else c.
19931 	X	a result if a then b else c too.
19932 	X	lets avoid expressions that almost look like statements for the same reason is not allowed in.
19933 	X	b result if a then b else c this would be the only time python requires except for.
19934 	X	to the x if c else y.
19935 	X	for me pythons strength is in its balanced expressiveness and scaling.
19936 	X	i measure expressiveness in terms of how clearly the intention behind a piece of code can be.
19937 	X	when im writing code i want to be able to easily translate my intention into code on the.
19938 	X	when im reading some code i want to easily see the authors.
19939 	X	it seems to me that the current pep favours the writing side more than the reading.
19940 	X	val x if c then y.
19941 	X	then this is exactly how i am thinking when i write the.
19942 	X	in my head i am saying i want val to equal x but only if c is true then id like it to be y.
19943 	X	so the pep allows for expressive writing of.
19944 	X	when i read the code i have to try a bit harder because to represent the original intention the code i need to be thinking val could either be x or y depending upon condition c.
19945 	X	to do this i have to parse the line in.
19946 	X	but now look at the scaling.
19947 	X	as you go to more complex expressions the writing part is.
19948 	X	in my head i can easily think i want val to be x if c is true but then i need it to be y is d is true otherwise it should be z.
19949 	X	again this is probably how i am thinking when i write this and the pep let me write it very.
19950 	X	id say the complexity of writing has scaled linearly with the complexity of my.
19951 	X	i have to work a lot harder to read this than i did to write.
19952 	X	i think the complexity of reading has risen out of proportion to the cmplexity of the intent of the.
19953 	X	when reading id like to think val select on of x y z based on c and then d.
19954 	X	so because the pep favours low complexity on the writing side rather than on the reading side i would suspect that we would start to see obscure cute.
19955 	X	i think i would be tempted to do it because it is very natural to write in this.
19956 	X	i think i would be if an alternative form could be found where the complexity rose in a balanced way for writing and reading these.
19957 	X	andrew bennetts schreef op donderdag februari om.
19958 	X	i use the code to draw an arrow but if x y there is no direction to draw an.
19959 	X	but i think i did see a better way to implement.
19960 	X	the full code of my arrow drawing function is.
19961 	X	pygame draw lines surf color false d x y.
19962 	X	asperger syndroom een persoonlijke benadering http people nl linux org gerrit het zijn tijden om je zelf met politiek te bemoeien http www sp nl.
19963 	X	i should note formally for the record that im opposed to pep but i think ive cultivated a sufficient record for honesty that it shouldnt.
19964 	X	if other people want me to do this heres how i plan to run the vote.
19965 	X	the vote would run in two stages.
19966 	X	the first stage would simply be in favor or opposing the idea of a ternary.
19967 	X	it would require a minimum of or supermajority to advance to the next.
19968 	X	if this stage fails guidos threat to forever withhold ternary conditionals takes.
19969 	X	the second stage would be voting on particular forms of the ternary.
19970 	X	it would take place a minimum of one month after the first vote to give people time to.
19971 	X	this vote is a bit trickier to handle i think the best way to manage it is that anyone who casts a wet blanket vote on all options has zir vote counted as only half a.
19972 	X	if no options get a supermajority the acceptance of pep is deferred for a minimum of one.
19973 	X	if multiple options get the supermajority wed have a runoff vote using.
19974 	X	the e mail address of all voters will be publicized along with the vote.
19975 	X	aahz aahz at pythoncraft com http www pythoncraft com.
19976 	X	register for pycon now http www python org pycon reg html.
19977 	X	is short for f lambda expression.
19978 	X	so wed implement a conditional expression with.
19979 	X	def cond condition v v if condition return v else return v.
19980 	X	to call it wed say for example.
19981 	X	print cond x sqrt x imaginary roots.
19982 	X	i dont see immediately whether this makes any syntax ambiguities with existing statements since i cant think of anyplace where colon can currently appear where an expression can also.
19983 	X	paul paterson hamonlypaulpaterson at houston rr com writes.
19984 	X	how about further abuse of colon.
19985 	X	arent you just retrieving a tuple.
19986 	X	didnt the timbot once generate something words about every problem in python were solvable with dicts.
19987 	X	and more than that python really takes a lot of cues from the c family of languages as do many modern high level languages.
19988 	X	take or a x prefix for hexadecimal literal and a prefix for an octal literal.
19989 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote the multitude of books is making us.
19990 	X	voltaire the laws list http www alcyone com max physics laws laws rules principles effects paradoxes in.
19991 	X	also for dicts and formal and actual argument.
19992 	X	a trailing comma in a container literal is often used as a clue to the reader that the author expects the container to grow more stuff over.
19993 	X	for example a dict mapping selected html tags to action.
19994 	X	when im in a hurry its surprising how often i forget to add a trailing comma to the preceding item when appending a new item so in containers i expect to grow i always use a trailing.
19995 	X	then adding a new item usually consists of duplicating the last line verbatim and justediting the parts that.
19996 	X	the new line inherits the trailing comma from the old line so i save at least a keystroke each time wink.
19997 	X	for the life of me though ive never found a good reason to add a trailing comma to a formal argument.
19998 	X	too bad that our beloved bdfl is committed to if constructs only instead of small curing patches to old design err h h.
19999 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
20000 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
20001 	X	aahz from my pov usable orthogonality is related to.
20002 	X	aahz adding a ternary operator reduces pythons simplicity and aahz therefore a certain amount of.
20003 	X	listcomps fit aahz practicality beats purity but i just dont see that in aahz the aggregate for.
20004 	X	im working on a library right now in which it would be quite useful to be able to embed conditionals in lambda expressions instead of having to define them as separate.
20005 	X	andrew koenig ark at research att com http www research att com info ark.
20006 	X	if filename infile sys stdin else infile open filename print processing infile name.
20007 	X	to which ill add is conducive to the development of a community guideline for when it is appropriate to use this operator an if else.
20008 	X	there should be one and preferably only one.
20009 	X	is not likely to have people use it instead of other better python.
20010 	X	i dont believe exists for c c and i believe is not true that is that people will with some regularity use the if else operator when a better solution exists and for which an if else statement was an equally good solution.
20011 	X	who cares about that single character.
20012 	X	it is all better than a mis placed if in my.
20013 	X	and i really dont want to see an upcoming monstrous embraced if a then b else c construct to creep into the language for the small intended.
20014 	X	it should be as tiny as the outcome so even a then b else c isnt short.
20015 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
20016 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
20017 	X	at least one of these two statements is true.
20018 	X	im going to follow up with a proposal banning complex denotations except on the right hand side of single target assignment.
20019 	X	one statement at most one operator wink ly yrs tim.
20020 	X	in article wzwukbh fsf at nono cs uu nl.
20021 	X	well if were going to take that argument then we should also be considering assignment as an expression so people can write c style loops such as while x foo.
20022 	X	otherwise its just another special case which makes it more complex for people to understand how the language.
20023 	X	the so called corner case is unimportant and its perfectly fine if its.
20024 	X	that means the addition of the conditional operator but no changes to how statements particularly if statements are.
20025 	X	as a standalone statement would be an error because the parser would think youre starting a statement not a conditional.
20026 	X	if thats really what you meant put it in parentheses or write it as a true else.
20027 	X	im pretty much ambivalent about the corner case the path of least resistance is leaving it illegal which is fine with.
20028 	X	theres no ambiguity here theres no changes to existing.
20029 	X	one new unambiguous type of expression involving a conditional operator is added that is.
20030 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote there i was there i was splitting atoms with my desire lamya computer science http www alcyone com max reference compsci a computer science.
20031 	X	its as binding as guido says it.
20032 	X	aahz aahz at pythoncraft com http www pythoncraft com.
20033 	X	register for pycon now http www python org pycon reg html.
20034 	X	quoth erik max francis max at alcyone com i was sort of ambivalent about this until i saw the examples section this is utterly nasty and painful on the eyes and brain to read and.
20035 	X	theyre not examples of how the conditional operator should be used in the real.
20036 	X	theyre simply an illustration of the edge cases in terms of.
20037 	X	i think he knew that but along with how it should be used theres how it can be used and how it will be.
20038 	X	im not looking forward to any of them even though i have no problem with the same thing in other.
20039 	X	each language has its style and then theres one that has every languages.
20040 	X	lets not make another such language out of.
20041 	X	donn cave donn at drizzle com.
20042 	X	in article bf eg at sofora uji es.
20043 	X	unfortunately thats almost certainly out due to parser.
20044 	X	aahz aahz at pythoncraft com http www pythoncraft com.
20045 	X	register for pycon now http www python org pycon reg html.
20046 	X	raymond hettinger python at rcn com wrote in message news.
20047 	X	which is also viable if then is made a pseudo keyword analogous to as.
20048 	X	david eppstein eppstein at ics uci edu wrote in message news eppstein.
20049 	X	the thing that struck me when i read this one liner was that it was an very logical thing to write but reading it was.
20050 	X	when coding i could imagine my self thinking ok if obj is true then i do oops what if obj isnt ok ill add a default.
20051 	X	because the x if c else y is more writable closer to the way people think when writing code than readable i think it will lead to less readable.
20052 	X	im not against the idea of a ternary operator or the lazy.
20053 	X	id just rather find one that balanced readability with.
20054 	X	andrew hmmm well heres an ugly trick.
20055 	X	andrew col none cols max i i.
20056 	X	yes indeed its ugly especially because if i and len cols it fails where the original would have.
20057 	X	andrew col none cols max i.
20058 	X	this one is o len cols where the original is o.
20059 	X	andrew but neither have the grace of.
20060 	X	andrew col none if i else cols i.
20061 	X	andrew otoh i still say this is easier to debug because i can do.
20062 	X	i andrew col none andrew print i i neighbors cols max i i andrew col cols i.
20063 	X	the flip side comes when you do something like this a bunch of times and your function no longer fits on the.
20064 	X	andrew koenig ark at research att com http www research att com info ark.
20065 	X	after all is else none or else none in the original pep really too much to type.
20066 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote he who knows how to be poor knows.
20067 	X	jules michelet rules for buh http www alcyone com max projects cards buh html the official rules to the betting card game.
20068 	X	james j besemer jb at cascade sys com.
20069 	X	without looking at the code this is an optimization trick used for performance to get the given property from a list or tuple without going through the full object.
20070 	X	it is a form of run time type.
20071 	X	this is done because c does not have.
20072 	X	if it has classes then this would be a simple method.
20073 	X	the first of this would be replaced by a.
20074 	X	the other two are cases where a if else expression in python would be more.
20075 	X	the argument for a if else expression is more readable dont need to introduce a new name dont need the function call overhead obeys short circuit logic.
20076 	X	i agree that this is more readable for me with nearly years of c experience.
20077 	X	i do point out that this creates a new name and uses cs macro system to get around uncertainties about if a given c implementation will inline those.
20078 	X	also in this case short circuiting is somewhat.
20079 	X	were this used in python the inlining would be done by hand which means having isdigit ch if ch else be used many times instead of simply using sre loc is digit.
20080 	X	doing this manual inlining instead of using a function call in python would then mean less maintainable and not more maintainable.
20081 	X	so i think in this case the is appropriate for c but if else expression is not appropriate for.
20082 	X	in python this would be abcdef c extend as needed if this needs more than hex characters also i think this could be done in c as.
20083 	X	my point given elsewhere in this very long thread is that constructs which are appropriate for in c are not necessarily appropriate for python since other solution implementation are.
20084 	X	so of the examples listed above they can be categorized as.
20085 	X	use a method instead of manual dispatch use a bool constructor appropriate uses makes things less maintainable but faster index into a string as a list max function.
20086 	X	i dont think anyone is likely to use in python.
20087 	X	i do think most people with experience in c perl which have a ternary if else expression will likely use it in lieu of a proper python solution for because of the performance and because of lack of practice with this idiom even though c allows it as well.
20088 	X	i also think that many people will use it instead of a more pythonic approach for and because those require knowing more about python than a coder new to python might.
20089 	X	counting this up if the python source code is used as a basis to estimate use and misuse of if else for python programs then proper uses improper uses.
20090 	X	in other words my interpretation of your analysis suggests that there will be a misuse rate of the if else expression feature in python.
20091 	X	holger krekel pyth at devel trillke net wrote in message news.
20092 	X	so its a ternary operator not two binary.
20093 	X	i could like that syntax over.
20094 	X	nobody would guess this no matter what thier.
20095 	X	i think newcomers might squint at it.
20096 	X	on the other hand it fixes the idiom quite well changing x and y or z x and y else z is just a small.
20097 	X	its also nice that the else bit is usefully.
20098 	X	the if x y else x syntax still doesnt read like an expression for me probably because it doesn t look like an.
20099 	X	whether the else has a colon or not seems.
20100 	X	im on either of those syntaxes but im still on.
20101 	X	its readable by anyone knowledgable in c c java javascript ruby perl php and the list goes.
20102 	X	i think it will be easy to remember and explain.
20103 	X	most of all it visually parses the best for.
20104 	X	this works of course but is no new surprise its mentioned in the.
20105 	X	look very closely at bengts actual proposal and then ask me that question.
20106 	X	hes talking about patching the broken and or syntax with a special form x which he writes with curly braces already confusing that evaluates as true in some circumstances and something else x in.
20107 	X	id like him to try to even explain that one to a.
20108 	X	hell id like to see him try to explain that one with a formal grammar and fully describe its.
20109 	X	its just replacing an unreadable idiom with an even more unreadable.
20110 	X	id also be able to tolerate.
20111 	X	and a handful of other forms to lessening.
20112 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote will i disappoint my future if i stay sade bosskey net return to wolfenstein http www bosskey net rtcw a personal guide to return to castle.
20113 	X	carlos i dont think that the code above is much clearer than the carlos one liner with the ternary.
20114 	X	my experience is that when people say x is much clearer than y what they are really saying is often x is more familiar than y.
20115 	X	andrew koenig ark at research att com http www research att com info ark.
20116 	X	what if the undefined output should be not yet entered or something.
20117 	X	you got off easy just because his example happened to choose for a default the string representation of the none.
20118 	X	david eppstein schreef op maandag februari om.
20119 	X	in my opinion a after a test can be very obvious almost as obvious as an if before a.
20120 	X	but a if before a test can mean either that it is a statement or that the expression doesnt read from left to.
20121 	X	an if after a test is not logic but a after a test.
20122 	X	regarding new programmers i do not know any language apart from python which is not only a weakness but also a strenght i know whats its like to learn to program with python and i am not were distracted by thoughts like oh this is perl c java.
20123 	X	i disagree but i am against a ternary included in the language so i wont be unhappy about it w.
20124 	X	its just that if a ternary is included id personally prefer like punctuation to using if else.
20125 	X	but i am not happy about the.
20126 	X	but than is the disadvantage of the of keyword which can mean something.
20127 	X	is that the is very random i only know it from bash.
20128 	X	for my own proposals my order of preferation is.
20129 	X	but then i dont even want a ternary operator.
20130 	X	asperger syndroom een persoonlijke benadering http people nl linux org gerrit het zijn tijden om je zelf met politiek te bemoeien http www sp nl.
20131 	X	i actually found this case to be a compelling argument for an if.
20132 	X	if s find spam else none.
20133 	X	right out in front which is good because eggs is the interesting and useful value for x while none is just a sort of default.
20134 	X	so by switching the order i think the readability is.
20135 	X	this argument has made me think that the true if cond else false form is better than if cond then true else false or cond.
20136 	X	true false form even though initially i thought that order seemed much more.
20137 	X	i credit this change in opinion to the maturity and new experiences ive had since i initially thought about this oh so many hours.
20138 	X	ian bicking ianb at colorstudy com http colorstudy com n talman chicago il there is no flag large enough to cover the shame of killing innocent people howard zinn.
20139 	X	bokr at oz net bengt richter writes.
20140 	X	intevation gmbh http intevation de sketch http sketch sourceforge net mapit http www mapit de.
20141 	X	i never said that the operators were broken i said the idiom.
20142 	X	nitpicking whether it should be called broken or a pitfall or dangerous seems to be dodging around the point it doesnt work its in use as an alternative to the conditional operator and thats a.
20143 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote only the ephemeral is of lasting.
20144 	X	ionesco official omega page http www alcyone com max projects omega the official distribution page for the popular roguelike.
20145 	X	only to prove a point or as part of a larger pass of simplification through the.
20146 	X	however had pep syntax been available i would likely have used it for this code when i originally wrote.
20147 	X	but i think thats just a very special case of a larger theorem that a lot of code complexity can often be avoided with a little more programmer.
20148 	X	david eppstein uc irvine of information computer science eppstein at ics uci edu http www ics uci edu eppstein.
20149 	X	well he did not repost a rebuttal at least none that i saw and ive been watching carefully google doesnt have anything either so i have no way of knowing what his intended meaning.
20150 	X	i know at least one other person that also culled this interpretation from his response as well so if the lack of clarity is on the readers side it is not simply me were.
20151 	X	im not sure how a presumption of goodwill changes the meaning of his statement i believe its an alternative if you refuse to list it youve got a guaranteed from.
20152 	X	indeed the case is explicitly mentioned in the updated pep and summarily rejected my list has no whiff of authority and im not the one who rejected it the bdfl.
20153 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote when you love somebody youre always in.
20154 	X	sherman potter a simple python opengl rendering.
20155 	X	people are simply choosing terse wordings to express their opinions during the.
20156 	X	regardless of whether im the vote taker there will be a c l py announce post when the vote.
20157 	X	aahz aahz at pythoncraft com http www pythoncraft com.
20158 	X	register for pycon now http www python org pycon reg html.
20159 	X	well its arbitrary only in that i cant prove it and wont testify to it.
20160 	X	the dividing line in this case between groups ii and iii is one of seeing at least some independent support for an idea seeing none either no comment or just negative comments.
20161 	X	one issue might be that too many choices might divide the pro pep camp in an unnecessarily artificial way if the voting process were too simple e pick your one favorite form.
20162 	X	i think the current thinking or last thinking at the time it was mentioned probably doesnt make this a big issue since each form was in essence were voted on separately with positive neutral and negative votes possible so it doesnt really.
20163 	X	but there really is not much point in including every possible form which ever got mentioned on the.
20164 	X	look heres another proposal i just made up c hurgle x durgle.
20165 	X	thats obviously dumb but its a proposal.
20166 	X	should that be on the ballot.
20167 	X	it doesnt make much sense to me to include proposals in the actual ballot that no one except the original proponent ever expressed any public interest.
20168 	X	with a good voting process if that happens it wouldnt hurt.
20169 	X	but it really is just extra.
20170 	X	as for the group ii proposals those that are not mentioned in the pep but were proposed at some point and received some token support i leave it up to the general voters to decide whether those should be on the ballot i dont have any strong feelings either.
20171 	X	certainly as the pep stands there is a diverse enough selection that really covers all the different kinds of proposals an idea that someone else in this thread was getting at.
20172 	X	if the pep passes and there are one or two forms that are clearly at the lead when all is said and done we can leave it up to guido to settle on a form thats best for python which well ultimately be doing anyway of course.
20173 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote golf is a good walk.
20174 	X	mark twain computer science http www alcyone com max reference compsci a computer science.
20175 	X	i think its been demonstrated that many of the cases in which someone might casually use a conditional expression might be better suited to an existing pythonic.
20176 	X	so given that those techniques already exist its up to you to demonstrate that the number of cases in which conditional expressions are markedly superior is high enough to warrant adding it to the.
20177 	X	aahz aahz at pythoncraft com http www pythoncraft com.
20178 	X	register for pycon now http www python org pycon reg html.
20179 	X	i had lunch in a restaurant with surprisingly slow service on account of which i returned minutes late to the afternoon.
20180 	X	by that time the guy who opposed anything i did had already introduced a motion to repeal my original proposal and gotten the committee to accept.
20181 	X	i never did find out what arguments he.
20182 	X	andrew koenig ark at research att com http www research att com info ark.
20183 	X	aahz if i run the voting and its a straight pick between these aahz alternatives vote ill probably use.
20184 	X	otoh after taking a aahz quick look at more web pages approval voting is easier so maybe ill aahz use that.
20185 	X	by approval voting i assume you mean allowing people to vote for as many alternatives as they.
20186 	X	in which case im strongly in favor of the idea i posted another note in this discussion explaining.
20187 	X	aahz does anyone have actual experience with both condorcet and approval aahz voting.
20188 	X	im not going to use irv aka australian hugo.
20189 	X	heres a personal experience with approval.
20190 	X	during the organizational meeting of the c standards committee in december i proposed approval voting to the.
20191 	X	there was a lot of discussion while people tried to sort out what it.
20192 	X	at the end of that discussion most people didnt care much but there was a general trend in favor of it except for one person who seemed to have decided that he would oppose any suggestion i made regardless of its.
20193 	X	anyway after much discussion we voted on the idea of using approval voting in future multi way votes and there was a small but comfortable margin in favor of.
20194 	X	the construct is often useful e g to set a variable to some value or other depending on.
20195 	X	in such a case it is simpler and less error prone than multi line if then else does that variable really get set in all cases.
20196 	X	also as andrew koenig said so well.
20197 	X	regarding the alternate suggestion of where.
20198 	X	i personally feel where implies some sort of looping so i find if.
20199 	X	in any case adding keywords is nearly.
20200 	X	yet another pep proposal ifelse condition iftrue iffalse.
20201 	X	that is use plain old function call notation but with ifelse were a keyword recognised by the interpreter so that arguments are only evaluated as.
20202 	X	example messsage access ifelse key correct key granted denied.
20203 	X	theres no confusing it with a.
20204 	X	ifelse is easy for newbies to search for in.
20205 	X	looks like a function call but.
20206 	X	people might expect arguments to be fully.
20207 	X	a possible variation call it cond instead and allow for multiple.
20208 	X	there has actually been a substantial amount of agreement in the pro pep.
20209 	X	lots of them thought x if c else y was acceptable lots also thought if c x else y was.
20210 	X	of the pro pep people havent agreed on one form but that hardly means that the brainstorm failed or that therefore the conditional operators time has not.
20211 	X	why dont you save the bdfl decisions for the actual bdfl.
20212 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote whoever contends with the great sheds his own.
20213 	X	http www pollywannacracka com the internet resource for interracial.
20214 	X	everything youve mentioned so far is also true of western mathematics in general not just c as such they are exceedingly trivial and irrelevant to the discussion of something as arcane and arbitrary as ca b.
20215 	X	because those happened to be pretty good ideas and not particularly hard to.
20216 	X	of course they all support exponentiation in some way but thats not the.
20217 	X	i happen to think this is a pretty easy to remember.
20218 	X	also these are all used much more often so clarity matters.
20219 	X	you need to be clearest with things that are used less often because those are the ones youre most likely to forget or not have learned yet.
20220 	X	anansi spaceworks http www anansispaceworks com.
20221 	X	hence the use of the conditional and in that.
20222 	X	i wouldnt have said idiomatic and unreadable if i thought they were synonymous the use of the conjunction indicates that i dont mean the same.
20223 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote you win the victory when you yield to.
20224 	X	sophocles bosskey net quake iii arena http www bosskey net qa a personal guide to quake iii.
20225 	X	actually you still need to open the file correct.
20226 	X	if you use the if else above then you need to check the extension twice which seems more fragile in the face of.
20227 	X	if filename displayname stdin infile sys stdin else displayname filename infile open filename print processing displayname.
20228 	X	infile sys stdin if filename else open filename print processing infile name.
20229 	X	this works because sys stdin name stdin.
20230 	X	but supppose you had to have stdin.
20231 	X	infile displayname sys stdin stdin if filename else open filename filename.
20232 	X	err but this may need some parens as well for.
20233 	X	infile displayname sys stdin stdin if filename else open filename filename.
20234 	X	do you consider this a use or misuse of the if else expression.
20235 	X	i happen to think its somewhat harder to understand then.
20236 	X	if filename displayname stdin infile sys stdin else displayname filename infile open filename.
20237 	X	heres a complete set with all options.
20238 	X	based on the grammer in the.
20239 	X	three productions modified by replacing expression list by if expr list parenth form if expr list.
20240 	X	incidentally this is exactly the same as your.
20241 	X	note that not allowing if expr at top level in slicings and list comprehensions is.
20242 	X	its written in guidos notation from the.
20243 	X	translated into the notation we are discussing it becomes.
20244 	X	with required parentheses that would be.
20245 	X	ah of course an expression returns a value duh.
20246 	X	still i can imagine that it would get ab used in contexts where the result was ignored just as an alternative conditional.
20247 	X	yes if you wrote it but reading the first one takes me less time than parsing the second.
20248 	X	i found lambda expressions really handy for tying object methods to xml parsers expat parser functions which dont accept a this.
20249 	X	im sorry to descend to this really i.
20250 	X	i dont like personal attacks but really do you actually program for a living.
20251 	X	do you have to read other peoples code.
20252 	X	or are you so uber elite that this is never a problem for you.
20253 	X	so now to use these frequency statistics which are contentious by about an order of magnitude all we have to do is come up with a metric for expressiveness that everyone will agree on to legitimize these.
20254 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote there i was there i was splitting atoms with my desire lamya computer science http www alcyone com max reference compsci a computer science.
20255 	X	appears unambiguous and doesnt reuse if.
20256 	X	text ispythonic then else twice minus ungood.
20257 	X	i havent reachd on a conditional operator yet but feel it should either use keywords for all parts as in the pep or as above or punctuation for all parts like c tv.
20258 	X	i also prefer maintaining the if else ordering condition truevalue falsevalue as that is more familiar from the python if statement and the c ternary.
20259 	X	sean ross frobozz electric at hotmail com writes.
20260 	X	i thought of commas too i thought that.
20261 	X	might read nicely but it makes putting these things in sequences or argument lists.
20262 	X	since the operators do exactly what they were designed to do imo broken is.
20263 	X	the idiom has a pitfall which is well known to some but perhaps not to.
20264 	X	the fact that even experts fall into it occasionally shows its danger but dangerous is not the same as broken.
20265 	X	oh a redirection message without a concrete target.
20266 	X	wouldnt it be great if mailman attached the link to the archived mail with each mail.
20267 	X	thus you could have easily pointed me to that other.
20268 	X	even better a unique string bytes for example might help with my email programm to search for your message.
20269 	X	ill look into mailman to see how easy this.
20270 	X	x if c e elif c if c e else e or x if c e elif c if c e else e.
20271 	X	elsewhere in the thread you implied the.
20272 	X	i just wanted to reinforce your point and say this complex enough without having to decipher which if elif does that else belong.
20273 	X	samuele pedroni pedronis at bluewin ch ha scritto nel messaggio news efc at news bluewin.
20274 	X	or you could start a more interesting exercise searching and fishing for reports of people burnt by and or.
20275 	X	i retract this statement the pep actually explicitly acknowledges this alternative and insists that it be included in any.
20276 	X	i was probably mixing the non short circuiting form which is explicitly rejected by the pep with this one in my.
20277 	X	sorry about any confusion i might have caused with that.
20278 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote will i disappoint my future if i stay sade bosskey net return to wolfenstein http www bosskey net rtcw a personal guide to return to castle.
20279 	X	this of course is scarcely different from the current use of if else except of course that it is a one.
20280 	X	i think maybe x when c else y is better but i figured id offer the suggestion.
20281 	X	gerrit holl gerrit at nl linux org wrote in message news.
20282 	X	instead i will rewrite so more clear than.
20283 	X	to me this is clearer than the if elif else statement since it makes it immediately obvious that seq and only seq is were assigned a.
20284 	X	in your original form one has to check that all targets are the.
20285 	X	if the target were qxyz ade i j this would be even more.
20286 	X	assignment to one variable should be one.
20287 	X	thanks for the choice to should what a ternary can do when properly used and properly.
20288 	X	ive seen it used a couple times for timestamps though that was in c c.
20289 	X	because its too c like just seems silly.
20290 	X	its already been used in another language therefore its necessarily bad.
20291 	X	i can understand the objection that using punctuation in this case is too cryptic but of the available punctuation.
20292 	X	makes the most sense imo and its not already used in.
20293 	X	andrew dalke adalke at mindspring com writes.
20294 	X	im not convinced that any form of simple vote counting will produce an.
20295 	X	my feeling is that the overall consensus is.
20296 	X	the only way a vote is going to give a clear result is if a significant number of people on one or the other side of the fence fail to vote either through apathy or through killfiling the whole discussion and missing the call for votes.
20297 	X	does anyone seriously believe that the overall view of c l p based on this thread is anything other than ambivalent.
20298 	X	as a follow on question does anyone seriously feel that a significant portion of c l p is likely to have its opinion swayed by arguments made in this thread.
20299 	X	its going to sound weird but i figure i might as run it up the flagpole while were all talking about trinary if then else.
20300 	X	i suggest creating a new singleton called default or some such which has the following properties.
20301 	X	when used as the left hand side of a logical and the right hand side is not evaluated and the result is when used as the left hand side of a logical or the right hand side is evaluated and the result is.
20302 	X	when used as a function if the argument passed is non zero true then return the argument otherwise return the default.
20303 	X	and this is the real problem with my proposal here overload the keyword else default or to act exactly as traditional or except that it will only execute the right hand side if the left hand side is default thus eliminating the false left side case.
20304 	X	default condition and truecase else falsecase.
20305 	X	by doing this truecase could produce any value and the falsecase is never.
20306 	X	in addition truecase could produce default indicating that it the falsecase value is acceptible to the truecase after.
20307 	X	in addition the following semantic can be issued.
20308 	X	x default we dont care print x is x else because x is.
20309 	X	x print x is now x else because x is not default.
20310 	X	obviously the spellings would have to change as appropriate but you get the.
20311 	X	to sum up why couldnt we create an entity such that it yields to any other entity when manipulated.
20312 	X	just some thoughts on the matter rich.
20313 	X	btw as ive said elsewhere i do like the pep as it stands.
20314 	X	thats what i get when trying to shorten my reply.
20315 	X	the arguments about cs and obviously dont really apply to holgers if statement.
20316 	X	the main point that the version with and is what most programmers will use still stands.
20317 	X	intevation gmbh http intevation de sketch http sketch sourceforge net mapit http www mapit de.
20318 	X	the important counterpoints have also been mentioned and i dont feel like summarizing them.
20319 	X	i like that my code from years ago still works and still excepting a few references to the string module looks.
20320 	X	if you want to get that way i could say that you are pro change for changes sake.
20321 	X	i admit that i was wrong about that.
20322 	X	i was concerned that people would start writing list comps like.
20323 	X	x y for x in range for y in z for z in range x x if z if cos x y.
20324 	X	as it turns out that hasnt been the.
20325 	X	but i know that the ternary operator has lead to c c perl code which is very.
20326 	X	i recall once helping someone in college on a program and i write a set if.
20327 	X	i dont know what it does but it.
20328 	X	and youll see that those are written by people like mark lutz who actually work with beginners on a near daily.
20329 	X	or my own comments about working with non software developers who still program in.
20330 	X	years ago i introduced the scientists in the group to.
20331 	X	i used it as a scripting language on top of my c.
20332 	X	i was astonished that they wrote hundreds of lines of tcl to get things.
20333 	X	would they have done that in c.
20334 	X	after all the c code could do exactly the same.
20335 	X	they would have worked on another program or used the xplor or charmm scripting languages domain specific programming langauges.
20336 	X	ive also seen a perl program written by a very good.
20337 	X	it had over lines of perl code and.
20338 	X	doesnt mean there cant be better.
20339 	X	it is arbitrary and self defeating to unnaturally enhance a.
20340 	X	if this feature is useful and i do not deny there are some places where it would be very handy then because of the nature of the feature it is something that will be used.
20341 	X	so this is just the sort of thing that a beginning programmer will need to learn to understand how the code.
20342 	X	when an if is needed what are the rules to use one version over the other.
20343 	X	i gave elsewhere a progression where the intial choice to use an if else expression leads naturally to code which is less clear than code which always uses an if else.
20344 	X	and we know that the ternary is used poorly so it isnt a full point in their.
20345 	X	the question is how much less than a full point is that.
20346 	X	the python beginners i know usually have some experience in fortran or awk or perhaps some basic c matlab or.
20347 	X	depends on the flavor of scientist im talking.
20348 	X	hence they are used to for multiply or when written in math terms a dot or simple joining eg as in mathematica a b is used for a b.
20349 	X	do you also think we can ignore those who simply flatly vote for this proposal because they dont know how to write maintainable code or because they want gratuitous change.
20350 	X	i dont ever plan on explaing metaclasses to new.
20351 	X	erik max francis max at alcyone com writes.
20352 	X	while i dont doubt you on this i do wonder how ive got so far years of degree year of part iii and a year and a bit of phd in maths without ever seeing this.
20353 	X	maybe its a uk us thing.
20354 	X	hmm actually it was probably used in my logic.
20355 	X	but i didnt think of exporting notations from that course to any other.
20356 	X	this is not to say c bad lisp.
20357 	X	its to say c bad irrespective of everything.
20358 	X	valid return addresses could be checked if desired with automated return mail and confirmation though that might be.
20359 	X	but in any case there would be no work entering anything in the email itself since all the parameters originate in the submittal of the first web page form and pass through the second web page via cgi prepared mailto.
20360 	X	i just had an idea what if we had a little bit of special syntax for pep source text so that it would be easy to generate a voting form web page like i just described.
20361 	X	the structured text stuff probably wouldnt need much of an extension maybe theyre already there i havent looked lately.
20362 	X	all you would need is something to flag the place to put the check boxes and to provide an id tag for the check box data and maybe where to put the submit button and how to label.
20363 	X	doing this once would make pep voting setup a one click thing from there.
20364 	X	why dont we just set up a web page with all the alternatives listed and checkboxes to click for each and have cgi format a response page with a concise email mailto link with parameters encoding the vote info so voters can just click the mailto link and have their local email client pop up with vote parameters already set up in subject and or body and all they have to do is send.
20365 	X	erik why do people keep looking for a magic bullet that will be an erik expression that clearly must be expressed with a conditional erik operator.
20366 	X	paul because they cant make their point any other.
20367 	X	oh hang on paul you didnt notice that the people putting up the expressions paul which keep getting shot down are the pro pep.
20368 	X	paul the burden of proof is on those who want this change justify.
20369 	X	of course if youre anti pep no example will be sufficient because any program that uses a conditional operator can be written with one of several.
20370 	X	and to me that fact by itself is a strong argument different people have found themselves wanting an if then else expression badly enough to want to write it in several different.
20371 	X	moreover the most concise of those ways cond and expr or expr is broken because if cond is true and expr is false the result is expr instead of expr.
20372 	X	andrew koenig ark at research att com http www research att com info ark.
20373 	X	summary i actually think that if the if else expression is added to python then the below example would be considered good.
20374 	X	two of the people who responded both pro pep said it was a misuse.
20375 	X	i find that difference to be.
20376 	X	actually i prefer it written as it is.
20377 	X	the if else fields on individual lines make it easy to see whats going on and make it easy to allow comments in the right.
20378 	X	the example you gave loses at least one of the.
20379 	X	im taking this as an affirmation that the above is an.
20380 	X	that would mean the this in this given context refers to this example of syntax abuse.
20381 	X	it could also be that erik max francis meant this to be this syntax in which case it is not an.
20382 	X	however erik did not say i find this quite readable so ill assume still some slight agreement to the idea that it is an.
20383 	X	hmmm i think i should have explained myself.
20384 	X	the above example is i think very easy to read and understand by.
20385 	X	the readability comes in because it does use indentation to show how the different parts of the if else are evaluated just like it does in an if.
20386 	X	and i like the way an if statement.
20387 	X	so if the if else expression is added i believe the above will be considered an appropriate solution nay even a good.
20388 	X	it is clear it shows where each term is placed it allows for.
20389 	X	it would not be considered an abuse and so im surprised that the last two comments thought it to be an abuse especially since i said i dont like it and not.
20390 	X	perhaps you two by now automatically react negatively to anything i say.
20391 	X	issues of specific if else expression syntax do not come into.
20392 	X	i could write the same code using any of the notations including indents and.
20393 	X	ehh but using the form if cond f else g means simple minded tools which auto indent based on a on the previous line will still be able to help make the above structured nicely in fact smarter editers which know this is an expression wont indent as nicely.
20394 	X	so if the ternary if else expression is added then the above example would imho be the appropriate way to write that.
20395 	X	the question i have is do you agree that my above example is a good use of the ternary if else expression.
20396 	X	eric max francis and james j besemer do not think so while evan simpson says it is with a tweak of the parens.
20397 	X	if you disagree whats a better form.
20398 	X	besides using an if else statement which i think is.
20399 	X	i however do not like the above solution in.
20400 	X	i think its better to gasp force people to introduce variable names for the different terms than to let it all roll in.
20401 	X	given my desire to hobble every pro pep here using the language of some of the people against my views and keep them from expressing their full potential as human weres that means that i am still anti pep.
20402 	X	thats in addition to my comments about the likelihood of the misuse of the if else expression in most.
20403 	X	as far as i can see no one proposal appears to have anywhere near a majority supporting it and the minority which supports x if c else y doesnt seem to be significantly smaller than the minority supporting any other single.
20404 	X	i just feel that it is dismissed too.
20405 	X	greg ewing computer science dept university of canterbury christchurch new zealand http www cosc canterbury ac nz greg.
20406 	X	heres a totally new direction lets get rid of the chaining and precedence issues and make an n way conditional not a.
20407 	X	obviously comma precedence with the braces works the same way as in a literal.
20408 	X	examples based on the thread of discussion.
20409 	X	if if callable obj obj alttest.
20410 	X	roots if x sqrt x for x in l.
20411 	X	nah theyve all been dismissed too.
20412 	X	the one true pythonic ternary operator is.
20413 	X	short circuiting and everything else required in.
20414 	X	this was going to be a wink but i like this idea ly yours.
20415 	X	holger a it reads ugly especially in non assignment statements.
20416 	X	but what is beautiful and what is ugly is still.
20417 	X	if x y math sqrt x else y.
20418 	X	y math sqrt x if x else.
20419 	X	holger b it reuses a keyword which formerly was a clean indicator holger of a statement.
20420 	X	anyway it would still be true that a statement is an if statement whenever its first token is if.
20421 	X	holger d there are often better ways than doing the c ish holger x.
20422 	X	holger special cases arent special enough to break the.
20423 	X	holger e adds to the stuff you have to learn if you read others code.
20424 	X	holger sure why not use perl then.
20425 	X	a sufficient reason for me is the lack of orthogonality in perls type.
20426 	X	holger f is not an important enough use case to warrant new syntax.
20427 	X	holger now i wonder what you might deem not to be.
20428 	X	holger i guess that the design prinicples of python in.
20429 	X	holger http www python org dev culture html.
20430 	X	holger are mostly subjective categories too.
20431 	X	holger thats ok but i like them.
20432 	X	what i deem not subjective is statements like.
20433 	X	heres an example of how id like to use this.
20434 	X	without it i have to do it this.
20435 	X	in another long message in this thread i did just that for a line c program that i wrote years.
20436 	X	what those examples show is how one programmer used in.
20437 	X	readers can then judge for themselves whether the use of.
20438 	X	erik max francis max at alcyone com wrote in message news.
20439 	X	which allows a partial implementation with python lazy evaluation is not.
20440 	X	which puts me back in the camp of what we really need is a lazy tuple a tuple that evaluates its members as.
20441 	X	class iif tuple def le self other return self not other.
20442 	X	def coerce self other return other self.
20443 	X	def ge self other return self other.
20444 	X	def iif args return iif args.
20445 	X	print is iif greater than less than print is iif greater than less than.
20446 	X	is one is two is three is less than is greater than.
20447 	X	quite so although annoyingly the trailing comma is allowed relaxation doesnt apply to enum.
20448 	X	at least not in c dunno about.
20449 	X	python needs the trailing comma loophole though as theres otherwise no syntactically distinct way of expressing a one element.
20450 	X	at least without coming at it from the side.
20451 	X	james kew james kew at btinternet com.
20452 	X	my fix is x and y or z.
20453 	X	meaning y is treated as true in logical expression context but retains its value for purposes of the expression.
20454 	X	is an optional variant for stylistic.
20455 	X	i thought that bit was very neat by the.
20456 	X	completely hopeless in practice of course but you already know.
20457 	X	mea culpa i hadnt realised that was what you meant by extended.
20458 	X	i thought you were referring to the non bool return.
20459 	X	should i have understood from the fact that you wrote conditional logic rather than conditional selection.
20460 	X	in case it needs to be said for stupid copyright reasons feel free to steal all or any or none of it for whatever purposes you.
20461 	X	by the way stephen evidently considers what ive written in this thread to be an attack on.
20462 	X	please accept my assurance that nothing ive written is intended to be anything of the sort and my apologies if youve felt.
20463 	X	gareth mccaughan gareth mccaughan at pobox com sig under construc.
20464 	X	im not sure why that made the difference for.
20465 	X	why does c and x having some semantics make c and x else y a better contender.
20466 	X	its just an equally unreadable idiomatic but not broken alternative to c and x or.
20467 	X	if c x else y if c then x else y c then x else y.
20468 	X	and the like have the benefit of were immediately comprehensible to anyone who comes across them as well as reading left to.
20469 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote the multitude of books is making us.
20470 	X	in late when i was young and foolish note i still am i tried writing a pep for a ternary.
20471 	X	i attempted to get a consensus on c l py and then write up that consensus and of course i failed utterly to obtain any sort of consensus so it never got.
20472 	X	the only thing i really accomplished was to convince myself what should be done and the reasons.
20473 	X	i share that with you now in hopes that it will convince people that we should accept pep.
20474 	X	there are lots of arguments in favor of a ternary expression but there are just two which i feel are quite.
20475 	X	if a ternary expression is available then things can be done in expressions which would be impossible without.
20476 	X	lambda is the example most often given but i think a different example is more.
20477 	X	suppose you want to write a line of logging into your program.
20478 	X	but you have to allow for the fact that x might be.
20479 	X	with a ternary expression you can write this.
20480 	X	print x x getdisplaystring if x else none.
20481 	X	but without a ternary expression you need to do this instead.
20482 	X	if x xdisplay x getdisplaystring else xdisplay none print x xdisplaystring.
20483 	X	notice how one line became and we had to create an auxiliary.
20484 	X	more powerful expressions make this very.
20485 	X	similar examples could be found using a ternary expression in lambda in a list comprehension and anywhere else that expressions are.
20486 	X	if i have the following snippet of code.
20487 	X	if condition x a else x b.
20488 	X	then i think of it as doing one thing it sets x to one of two different.
20489 	X	that is very different from this.
20490 	X	if condition x a else y b.
20491 	X	which i think of as doing one of two things either modifying x or y.
20492 	X	in the second case i am doing what i think of mentally as branching but in the first i think of it and speak of when reading my code to another programmer as just setting x to one value or the a single action with no branching regardless of how the underlying machine implements it.
20493 	X	being able to spell the first one as.
20494 	X	makes something which is conceptually different look different and thats an important feature in a programming.
20495 	X	hey i like this condition command command int expression expression where condition is true or false and int is the usual list.
20496 	X	william park open geometry consulting opengeometry at yahoo ca linux solution for data management and.
20497 	X	neither is a statement in and of.
20498 	X	even without pep they are presently used both to start a statement and as elements within an.
20499 	X	thus the precise meaning of any particular keyword although very similar in all cases can only be determined by examining the surrounding.
20500 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
20501 	X	dale strickland clark dale at riverhall nothanks co uk writes.
20502 	X	will incorrectly give the default if self arg is or the empty string or an empty dict.
20503 	X	a conditional expression is really the right thing.
20504 	X	erik i suggested the same in these recent pep threads as.
20505 	X	i dont see any reason for the parens to be.
20506 	X	in particular i dont see any reason why i should not be able to write.
20507 	X	fact lambda n if n else n fact n.
20508 	X	i dont think there are any ambiguities.
20509 	X	andrew koenig ark at research att com http www research att com info ark.
20510 	X	thats way ugly even for c c.
20511 	X	in c this is perfectly valid.
20512 	X	x w s a b k.
20513 	X	but its pretty hard to parse on sight its vastly better to write.
20514 	X	x w s a b k.
20515 	X	yes it is a contrived and simpleminded example but requiring parenthesis around the conditional expression or printing a warning when compiling one without warning of possible ambiguities will keep python easy on the eyes and shut up all detractors which base their arguments on possible confusion and loss of.
20516 	X	and before you go there making a special form that looks like a function call but actually does short circuiting and conditional evaluation of is parameters would set a horrible.
20517 	X	i think youve missed a lot of the context of this pep coming.
20518 	X	people new to python routinely ask for a conditional expression in.
20519 	X	the faq even has an entry devoted to.
20520 	X	the fact is to get proper conditional expression functionality replete with short circuiting you need to resort to extremely ugly hacks that defeat the whole purpose of wanting a conditional operator namely readability and conciseness.
20521 	X	there are some slightly less ugly idioms that are not very readable and will only work in special cases where the then expression is not false or when the condition is an actual boolean but all of them are.
20522 	X	the fact is a lot of people want this functionality and many have wanted it for a long.
20523 	X	is it a majority of people on comp lang python.
20524 	X	is it a majority of python users in general.
20525 	X	the fact that there is a faq entry devoted to the question is a testament to.
20526 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote lawyers i suppose were children.
20527 	X	charles lamb the laws list http www alcyone com max physics laws laws rules principles effects paradoxes in.
20528 	X	personally i do not find it confusing at all and i have not seen another alternative that ive found as elegant as the.
20529 	X	the only other alternatives ive liked so far have been in order of preference.
20530 	X	which is rejected for adding a keyword expression when condition else expression.
20531 	X	with or without brackets this is verbose either way and adds a keyword.
20532 	X	if condition then expression else expression.
20533 	X	condition then expression else expression which also adds a keyword with c tismers added utility of which i am ambivilant.
20534 	X	i often like the idea and im often leary of it kind of like im often attracted by ruby but soon end statements for crying out loud and oh so many other things.
20535 	X	if condition expression else expression with or without brackets.
20536 	X	for the simple reason that it looks too much like an if.
20537 	X	i realize that others deem this benificial and i understand and agree with their reasoning however i dislike the idea of having a statement and an expression sharing identical or near identical syntax despite their sharing identical or near identical.
20538 	X	but primarily when i see colons in python i generally think what follows is a suite and a suite is an indented block of code.
20539 	X	so much so that id like to see lambda replaced by something like anonymous do args kwds suite and m key val key val with m key val key val.
20540 	X	sad really i know but i.
20541 	X	anyway i dont find difficult to follow i simply find that it clashes with my mental model of the language colons usually mean blocks and i find it less attractive then the other alternatives proposed excessive punctuation.
20542 	X	although i do keep wavering on.
20543 	X	i cant decide whether i like that one or not.
20544 	X	that were said i look forward to the vote whatever form it might.
20545 	X	i promised myself i wasnt going to respond any further but my spirit is.
20546 	X	in article efba cfefb at alcyone com.
20547 	X	ive seen all too many cases where a simple negated conditional was used.
20548 	X	surely you dont believe thats cause for claiming that simple negated conditionals are misunderstood and.
20549 	X	aahz aahz at pythoncraft com http www pythoncraft com.
20550 	X	register for pycon now http www python org pycon reg html.
20551 	X	then it gets explained and is.
20552 	X	then the next day what was it that did again.
20553 	X	but your a then b else c is growing on me ly yrs anders.
20554 	X	so the real problem is that lambda is to hard to spell.
20555 	X	i know the lambda philes of which i shamefully admit to were a card carrying member no matter how unpythonic they are would like this.
20556 	X	as was mentioned before iif looks too much like iff.
20557 	X	and while youre at it you might as well grab switch.
20558 	X	from laura creighton on mon feb.
20559 	X	laura this other project you have where a ternary would be very laura useful would that be the icon like snoball like parser you laura mentioned earlier.
20560 	X	im hoping to be able to give a talk on the subject at the accu.
20561 	X	andrew koenig ark at research att com writes.
20562 	X	ive seen conflicts like this in other contexts theyre often a symptom of two subsets of the community that come from different backgrounds and want to program in different.
20563 	X	what annoys me a bit is the assertion ive seen in a few posts that anyone who wants a ternary operator must be coming from a c background and.
20564 	X	its not really ternary operators as such that i want its expressions that can depend on a conditional and i dont particularly like the c syntax for doing.
20565 	X	even if we take your example at face value its still missing a key point just because a feature is frequently requested does not mean that its a bad.
20566 	X	if using your analogy the race car driver is not an expert and wants something done a certain way that doesnt necessarily mean hes.
20567 	X	and actually modern race car drivers are really quite involved with car design these.
20568 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote bring me men bring me men wholl turn the page lamya erik max francis bookmarks http www alcyone com max links a highly categorized list of web.
20569 	X	actually modern race car drivers are really quite involved with car design these.
20570 	X	or we could just adopt c syntax for the entire language and drop python specific documentation.
20571 	X	wink seriously though for me having syntax that looks like c or perl pascal etc etc is not something to strive.
20572 	X	on the contrary i find constructs like x.
20573 	X	y z to be rather hard to.
20574 	X	python is not c lets keep it that way.
20575 	X	pythons conditional selection operators and and or.
20576 	X	some slightly different thougths as of feb.
20577 	X	conflicting meanings pythons and and or are not the standard versions.
20578 	X	in logic math and computing science and and or have well known standard meanings as logical operators either strict or domain extended via operand coercion and either conditional in execution or.
20579 	X	in python and and or are generalized as conditional selection operators as explained in following sections with some unusual.
20580 	X	when both operands are logical values the selection result is the same as in strict.
20581 	X	on the extended domain the result is usually different from that of the corresponding extended logical.
20582 	X	but coercing the result to boolean washes away the.
20583 	X	logic and conditional execution binary logic operators map two logic values to a logic.
20584 	X	the domain can be extended by implicitly coercing non logic values to logic.
20585 	X	the result is still a logic value a extended op b bool a strict op bool b.
20586 	X	for efficiency execution of the second operand can be conditional on the first not were.
20587 	X	the possible problem is when execution of b has a side effect that also becomes.
20588 	X	conditional statements if elif else extend conditional execution from expressions to blocks of.
20589 	X	pythons conditional statements are lax like extended operaters in that they accept any expression as a condition and then implicitly coerce the result to a boolean value if bool expression has the same effect as if expression.
20590 	X	in a sense conditional statements makes conditional extended logic operators redundant.
20591 	X	tem a and b is equivalent to tem bool a if tem tem bool b.
20592 	X	tem a or b is equivalent to tem bool a if not tem tem bool b.
20593 	X	however they are still very convenient to.
20594 	X	selection and logic a selection operation selects one or more items from.
20595 	X	the getitem getattribute operator a selects an item from a collection.
20596 	X	filter selects to all items produced by an.
20597 	X	in python and and or conditionally select one of their two operands.
20598 	X	tem a and b is equivalent to tem a if tem tem b.
20599 	X	tem a or b is equivalent to tem a if not tem tem b.
20600 	X	these statement equivalents are identical except for omission of bool coercions to the statements equivalent to conditional extended logic.
20601 	X	when both a and b are boolean so is the output making selection and logic the.
20602 	X	they are also the same when the selection result is coerced to.
20603 	X	since if and elif implicitly do such coercion selection acts like logic when it is the outer operation of an if elif.
20604 	X	but in other contexts it does.
20605 	X	thus the effect of if a and b does not depend on which meaning and has while that of if a and.
20606 	X	a non trival binary logic operator is one whose output depends on both.
20607 	X	of the ten possible only and and or are selective in that the output is always one of the.
20608 	X	to be selective op and op must be and.
20609 	X	of the four possible assignments to op and op two produce the trivial selectors a op b a and a op b b.
20610 	X	the other two are and and.
20611 	X	they are thus the only two that can be generalized in the way they are in.
20612 	X	selective and and or the conditional aspect of pythons and and or can be used to guard execution of a possibly impossible or illegal.
20613 	X	when a null default is acceptible possible and expression.
20614 	X	if a truthful default is wanted then use impossible or expression.
20615 	X	selective and and or have an unusual combination of.
20616 	X	every python value is a left identity id op b b for one of the.
20617 	X	they are non commutative in general a op b.
20618 	X	b op a but become commutative when coerced to.
20619 	X	both are associative a and b and c a and b and c a or b or c a or b or c as can be verified by truth outcome.
20620 	X	iterated a and b and and z selects the first null value or the default z.
20621 	X	iterated a or b or or z selects the first non null value or again the.
20622 	X	the mixed combinations a and b or c and a or b and c select one of the three inputs depending of the truth values of a and b.
20623 	X	the first selects the first of null a non null b or any c.
20624 	X	expressions parenthesized to the right sequentially examine values and select the first whose boolean value dominates the following.
20625 	X	the reversed expressions a and b or c and not a or b and c are the most relevant to pep and the quest for an if a then b else c.
20626 	X	when a is false both select c.
20627 	X	when a is true the first selects true b while the second selects false b.
20628 	X	so if we know the truth value of one of the selection targets there is an and or combination that gives the right.
20629 	X	for instance if x then x val else x or and x.
20630 	X	for the general case the two expressions combine to exactly match if a then b else c a and b or not a or b and c not a or b and a and b or c.
20631 	X	however these are sufficiently baroque that most any of the current or proposed alternatives should be.
20632 	X	my inverse was meant as a case where the expr if else syntax can lead to yikes.
20633 	X	i think every ternary operator slows down human.
20634 	X	if x z x getpref else z not specified.
20635 	X	parses the fastest and is easily.
20636 	X	sure it isnt optimal with respect to the number of lines but that was never a goal with.
20637 	X	and thus might not even learn or care that and lets your return something other than a.
20638 	X	but this might often not be used anymore in a pep.
20639 	X	this and or behaviour is unfamiliar for many whereas the ternary op is.
20640 	X	the abuses of the latter might very well reach the same quantity than the problem they try to.
20641 	X	statements on easy i e non ternary expressions are my favorite.
20642 	X	erik max francis max at alcyone com wrote in message news.
20643 	X	erik thanks for offering your time to prepare the.
20644 	X	however i think we should first make sure that there is a majority of pythonistas favorable to the introduction of the ternary.
20645 	X	there is no point in arguing between us about the more pythonic solution if of users are already against the ternary.
20646 	X	i think there is a big majority not posting on c l p that could be contrary to the innovation and dont bother to sent verbose.
20647 	X	i fear this majority could kill us at the voting moment and maybe guido counts on that.
20648 	X	first i would like to see how many are favorable or not absolutely contrary and then i will vote for the choice of the.
20649 	X	that looks weird at first but i could live with it although it does add the new keyword.
20650 	X	now the question is whether you were just suggesting it to catch people who liked it in a trap.
20651 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote no man quite believes in any other.
20652 	X	h l mencken alcyone systems san jose.
20653 	X	i did not mean to indicate that i thought it was an.
20654 	X	i am sorry but i completely misunderstood your posts on this.
20655 	X	i thought you were complaining that it was abuse to which i merely intended to offer that this particular abuse was merely a drop in the.
20656 	X	but i submit that your posts on this question are easily.
20657 	X	on you first asked the question concluding.
20658 	X	code which in the small looks like normal python if else statement is really an if else expression.
20659 	X	so i concluded you objected to this.
20660 	X	more recently you said i never heard an answer repeating i dont like that.
20661 	X	this time i see you were more specific about wanting variables.
20662 	X	in my mind i saw it as a continuation of what i thought was your earlier.
20663 	X	while in this case you did not explicitly use the word abuse imho you established early on that virtually any use that was somehow redundant with some existing python form amounted to abuse.
20664 	X	i could be wrong but iirc you even used i dont like to see in some cases as a synonym for abusive.
20665 	X	or else perhaps you were trying to express a subtlety that was lost on.
20666 	X	although i disagree with much of what you say i certainly hope it hasnt become.
20667 	X	in all fairness to me you have argued long hard and rather loudly against any changes at.
20668 	X	and you argued vigorously against most specific.
20669 	X	so i hope youll forgive my oversight in this case of to me is a sudden and unexpected change of heart particularly given the somewhat confusing sequence of.
20670 	X	if you find this form acceptable then were.
20671 	X	i think guido should have picked cs ct f years.
20672 	X	but i think i have to agree that its the most pythonic.
20673 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
20674 	X	partly because i thought id try something different after scaring folks with in place of the and looked less.
20675 	X	yeah i did suggest it but not derived from the general format with.
20676 	X	youd have to parenthesize to get that i cond expr default.
20677 	X	i think we should all sleep on it for a couple weeks as i am about to do.
20678 	X	its conceivable you could change my opinion on semicolon but i need to dissociate it from always means a statement is next.
20679 	X	cmon if it doesnt mean anything no fair claiming it makes something look like something i intended it to mean another clause coming in a sequence of such.
20680 	X	kind of ugly if the expression is used as a list index or dict key.
20681 	X	im wondering if the presenation for vote will adequately show such downsides as well as the best looking.
20682 	X	they suggest statement really strongly which is an obstacle to introducing it in expression.
20683 	X	double characters are easy to type.
20684 	X	if we had an unobtrusive alternative to white space.
20685 	X	we could transliterate lisp stuff practically.
20686 	X	i was reading the latest python dev summary as posted here and it seems that the debate about fixedpoint has surfaced.
20687 	X	i remember it were discussed some time ago during my first period of activity here circa.
20688 	X	my question is isnt proper to discuss fixed point support here at c l p with a bigger audience.
20689 	X	or is this discussion going to be fruitless for lack of interest or endless because it is so contractory.
20690 	X	i have a few words on this subject to share but first i would like to know where is the proper.
20691 	X	i hope im not opening another can of.
20692 	X	after pep and case sensitivity i feel a little bit.
20693 	X	carlos ribeiro cribeiro at mail inet com br.
20694 	X	there was a time when i would have known what you were talking about but i cant seem to find the time to read raif anymore feels like such a.
20695 	X	i can at least make a business case for reading c l py at work but raif is right.
20696 	X	makes me wish i was still a.
20697 	X	hmm how to keep this on topic.
20698 	X	you are in a maze of twisty little syntax proposals all.
20699 	X	robin munn rmunn at pobox com http www rmunn com pgp key id xafb ff cffb a f d acfd afb.
20700 	X	neil the if appears unnecessary to.
20701 	X	neil condition then val else val.
20702 	X	neil appears unambiguous and doesnt reuse if.
20703 	X	neil text ispythonic then else twice minus ungood.
20704 	X	this suggestion makes me nervous even if we disregard the extra keyword because of the following example.
20705 	X	if x then y else z print foo.
20706 	X	what this would really mean is.
20707 	X	if x p y else p z if p print foo.
20708 	X	but thats sure how it appears at first glance.
20709 	X	andrew koenig ark at research att com http www research att com info ark.
20710 	X	guido van rossum guido at python org wrote in message news.
20711 	X	python list at python org snip snip.
20712 	X	i like the idea but hate the imho convoluted order of the condition and.
20713 	X	in the other thread i suggested the syntax.
20714 	X	if condition expression else expression parentheses are required.
20715 	X	which introduces no new keywords or punctuation and doesnt suffer from the ambiguity you.
20716 	X	its getting less so over time starting with bytecodehacks wink.
20717 	X	when theyre the right solution nothing else.
20718 	X	if you havent looked lately the spam filter youre using contains about yield statements the tokenizer is one massive distributed generator although more essential use of generators was made in the statistical testing framework to chew over tens of thousands of msgs in a memory efficient way.
20719 	X	ive found bread and butter uses like that so natural that i had to think about whether ive ever used generators at all.
20720 	X	i still have yet to see a clear explanation of why short circuit is necessary and therefore iif.
20721 	X	aahz aahz at pythoncraft com http www pythoncraft com.
20722 	X	register for pycon now http www python org pycon reg html.
20723 	X	fredrik even if the size of x is close to zero for anyone who has fredrik bothered to learn the language.
20724 	X	fredrik or are you saying that learning is irrelevant.
20725 	X	well no im saying partly that learning does not always overcome the tendency to make mistakes that are waiting to be.
20726 	X	for example look at this code from python lib unittest py.
20727 	X	self stream writeln ran d test s in.
20728 	X	run run and or s timetaken.
20729 	X	andrew koenig ark at research att com http www research att com info ark.
20730 	X	the common lisp object system clos which is part of the cl standard offers one of the richest oo systems you could dream.
20731 	X	more powerful than pythons even because it supports multiple dispatch dispatching on more than one object while python like most other oo languages dylan were another important exception only dispatches on the first distinguished.
20732 	X	michael hudson mwh at python net wrote in message news hufuz fsf at pc maths bris ac or.
20733 	X	i took i dont think the addition would be a good thing to mean i dont think the addition would be an improvement and applied the logic if x is an abomination and x y would not be an improvement then x y is also an.
20734 	X	and this has nothing to do with knowledge of other programming.
20735 	X	i dont know a single person who would write logical statements of any type in any language english russian or ancient greek in that.
20736 	X	now probably someone will point out some weird grammar that is just like.
20737 	X	but it doesnt make it any more common.
20738 	X	and if there is something that is really pythonic its the feeling of deep common sense that you get while working with the.
20739 	X	carlos ribeiro cribeiro at mail inet com br.
20740 	X	can you enumerate those negative consequences and quantify their cost some how.
20741 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
20742 	X	enumerating various uses of in the interpreter source.
20743 	X	could you do the same statistics over the usage of switch statements semicolons braces and of course macros.
20744 	X	with the same reasoning you can introduce every construct to.
20745 	X	c has as much to do with python as the machine code which gcc emits for the c.
20746 	X	pythons dead long live c ly yrs chris.
20747 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
20748 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
20749 	X	michele it too similar to a.
20750 	X	if you were to rewrite it as a statement it would have the same effect so why is this similarity a problem.
20751 	X	andrew koenig ark at research att com http www research att com info ark.
20752 	X	paul paterson hamonlypaulpaterson at houston rr com writes.
20753 	X	i think its good to show the deferred evaluation in the caller.
20754 	X	the equivalent in c is the convention of writing preprocessor sybmols in all.
20755 	X	there have been a few different macro schemes hygienic and otherwise discussed here in clpy as.
20756 	X	maybe something like that can be considered for python.
20757 	X	fwiw i havent declared but if i understand these ratings im on the concept of having some kind of conditional expressions in python and about on pep i dont like the condition in the middle.
20758 	X	i havent seen any other concrete proposals that im much above neutral about hence my perfect crystal.
20759 	X	pretty sure it cant be rewritten that way.
20760 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote she glanced at her watch it was.
20761 	X	james clavell bosskey net quake iii arena http www bosskey net qa a personal guide to quake iii.
20762 	X	check the pep on the python org web.
20763 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote i always entertain great.
20764 	X	robert frost get your own customized newsfeed online in realtime for free.
20765 	X	max m maxm at mxm dk wrote in news.
20766 	X	parentheses are not needed for tuples except the empty tuple.
20767 	X	duncan booth duncan at rcp co uk int month char p return p p p xf x xb x xa who said my code was obscure.
20768 	X	its interesting to not that the options that came rd and th were very similar to each other suggesting that people who support one would also support the other and that under a preference voting system such as av or condorcet both would do well and also similar to the existing python conditional.
20769 	X	philip hunt philh at cabalamat uklinux net memes are a hoax pass it on.
20770 	X	my use cases recast into the forms you counterproposed.
20771 	X	first form x y sqrt y ext is html text html txt print widget s loaded num s ext is html bytes html is mpeg bytes mpg is jpeg bytes jpg txt sign x x.
20772 	X	second form using else clause x y sqrt y else ext is html text html else txt print widget s loaded num s else ext is html bytes html is mpeg bytes mpg is jpeg bytes jpg else txt sign x x else.
20773 	X	hmm of the two forms you proposed i think i prefer the first one for its.
20774 	X	whilst the parralel to dictionary construction was intentional the idea of the.
20775 	X	oeprator was to visually distinguish it from dictionaries while trying to evoke a similar.
20776 	X	oren tirosh oren py l at hishome net wrote in message news gb at hishome.
20777 	X	in the context of the thread he was replying.
20778 	X	if he meant something else and i simply misinterpreted him in good faith so be it and id withdraw my.
20779 	X	hes done no such thing so i have no idea what his real intentions.
20780 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote if you cant fight and you cant flee.
20781 	X	robert elliot physics reference http www alcyone com max reference physics a physics.
20782 	X	x and or y may be complex denotations in which case the if else writing could be cumbersome by.
20783 	X	this is a bit like rewriting a into a a which hurts when a is not a simple.
20784 	X	franois pinard http www iro umontreal ca pinard.
20785 	X	well i have a math degree and i saw that iif as.
20786 	X	ive since decided to call it an ifelse builtin so that there wouldnt be this possibility of.
20787 	X	please dont vote on this unless youve followed the.
20788 	X	this is not what the pep is.
20789 	X	you are not targeting the real problem i.
20790 	X	simple stmt small stmt small stmt newline.
20791 	X	small stmt expr stmt print stmt del stmt.
20792 	X	your expression if form path would have to be followed for the next tokens and then the parser might need to backtrack to recognize that this rather the if stmt.
20793 	X	i dont see a way how to get around this without some more special.
20794 	X	good news is that experimenting with pythons grammar is dead.
20795 	X	modify pythons grammar grammar file and run make after the configure dance which you need to do before doing anything.
20796 	X	at some point you will probably see ambiguity warnings they dont abort the compile process watch out.
20797 	X	if i were you i would try to.
20798 	X	b disallow expr stmt to contain a ternary.
20799 	X	c otherwise allow your ternary in expressions.
20800 	X	pretty tricky wink but not outright.
20801 	X	erik max francis max at alcyone com wrote in message news.
20802 	X	proposed by alex martelli in a previous post.
20803 	X	or is that not to be an option in the vote.
20804 	X	ah you meant ought not or should not.
20805 	X	this is a bit circular but.
20806 	X	this is a slippery slope argument and youre not alone in finding it persuasive but i dont buy.
20807 	X	as far as i can recall the only sorts of statements that anyone has ever suggested embedding in an expression on c l py anyway are assignment and.
20808 	X	i would be perfectly happy to allow.
20809 	X	im not about to start lobbying for it.
20810 	X	few people most likely i meant that as a bit of fun not a serious.
20811 	X	the harm of a new keyword is that some code becomes forward.
20812 	X	the harm of a conditional expression that looks like a conditional statement is.
20813 	X	if you answer please elaborate beyond it would be confusing what exactly would be the consequences of that confusion.
20814 	X	i think you both missed my.
20815 	X	i realize that this is clearly a syntaxerror i just dont see this as were much different as an objection to then else than when you raised it.
20816 	X	placing any statement in any form of conditional expression is a.
20817 	X	if a naive coder were tempted to try it based on the similarity to the if statement syntax they would immediately be informed by the compiler that they cant do.
20818 	X	checking the docs would presumably reveal the explanation to.
20819 	X	holger krekel pyth at devel trillke net wrote in message news.
20820 	X	the trouble is it wont stop the.
20821 	X	i kind of agree with guidos version its the best alternative ive seen actually.
20822 	X	i like mine better add an option for lazy evaluation of function operands but since nobody seems interested in discussing it it really isnt on the.
20823 	X	on the contrary it would be illegal as it stands parsed as an if statement and its not legal to have the else there and making the special case of admitting it into the language doesnt seem worth.
20824 	X	im working from the point of view of the path of least resistance.
20825 	X	admitting that as legal code requires parser changes beyond just the implementation of the conditional operator since the if statement has to look ahead to the else to see how its going to get.
20826 	X	if someone things its a great idea and does it hey fine like i said its a situation that im ambivalent.
20827 	X	im just saying it would make additing it to the language harder in terms of parser changes and i think there would be greater resistance to writing else constructs on all one line as a statement on just general.
20828 	X	again either situation would be fine with me its legal or its not legal.
20829 	X	my proposition which requires the least effort to implement is that it be deemed illegal since the if starting the statement is taken to be an if statement and thus the else on the same line is.
20830 	X	the corner case doesnt interest me because i dont have any interest in using it and dont see much interest in it in general or it were widely.
20831 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote yes im learning from falling hard lessons lamya bosskey net quake iii arena http www bosskey net qa a personal guide to quake iii.
20832 	X	in that case im changing my vote from to at least just so that i dont have to dechiffer what that means and.
20833 	X	dont bother trying to explain it to.
20834 	X	id just understand for three seconds then forget.
20835 	X	which explains why i never managed to learn perl ly yrs anders.
20836 	X	andrew koenig schreef op vrijdag februari om.
20837 	X	i think list comprehensions and lambdas are about.
20838 	X	since list comprehensions are in the language im very glad i have been able to get rid of those horrible.
20839 	X	and i have already become addicted to list.
20840 	X	but i am strongly against pep see my other.
20841 	X	asperger syndroom een persoonlijke benadering http people nl linux org gerrit het zijn tijden om je zelf met politiek te bemoeien http www sp nl.
20842 	X	well here in italy we read it as se if.
20843 	X	you simply evidently didnt fully understand the proposal as andrew specified it in the.
20844 	X	the former would apply and you know this because the new if constuct binds at a similar level as the or.
20845 	X	actually relative to if else is similar to so its the same rationale for which.
20846 	X	actually is comparatively so low priority so they break up just about anything expression.
20847 	X	when you think about it this all is fairly.
20848 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
20849 	X	andrew koenig ark at research att com ha scritto nel messaggio news yusmuwlsyr fsf at europa research att.
20850 	X	that i dont know if its really a good.
20851 	X	while the international python community passionately debates pep we should not forget another issue which is worth getting hot under the collar about the looming attack on iraq over weapons of mass destruction wmd.
20852 	X	the us position at least this weeks position appears to be.
20853 	X	if not immediate evidence of past destruction of wmd then fire cruise missiles at baghdad else find some other reason to bomb baghdad.
20854 	X	if you think that the current set of optimal solutions to the various problems depending on who you are posed by saddam husseins regime does not include the firing thousands of cruise missiles at baghdad or the invasion of iraq by us and allied ground forces both of which will surely result in the loss of tens or hundreds of thousands of innocent non combatant iraqi lives then please take a moment or two to make your feelings known to your friends acquaintances and most importantly your political.
20855 	X	e mail or write to them write to your local newspaper or better still invite your family and friends to attend one of the many protest rallies were organised around the world for this.
20856 	X	as food for thought herewith some observations made recently by richard butler former united nations chief weapons inspector and long time advocate of nuclear disarmament abc tv report.
20857 	X	if the united states attacks iraq three or four or six weeks from now in order to remove its weapons of mass destruction it will be doing so as the country in this world in possession of the largest quantity of weapons of mass.
20858 	X	what is terribly wrong here is that the fox is in charge of the chicken.
20859 	X	the five permanent members of the security council who have this responsibility to see that no one gets weapons of mass destruction are themselves armed to the teeth with those weapons of mass.
20860 	X	these five powers have promised the world in writing in may that they would take active steps to reduce their nuclear.
20861 	X	and they have done nothing about.
20862 	X	there is a fundamental difficulty here that those who have this great power have also accepted a great responsibility but theyve not yet carried it.
20863 	X	and i put it to you that as long as these states in possession of weapons of mass destruction do nothing about progressively reducing theirs then other states like north korea iraq and so on will take steps to acquire.
20864 	X	i wonder was it widely reported in the us which country was responsible for the watering down of protocol implementation provisions at the fifth review of the international biological and toxin weapons convention in october.
20865 	X	because the us objected to intrusive verification inspection provisions proposed in the fifth review the us also torpedoed similar provisions in the fourth review in november.
20866 	X	and george w bush now wants to bomb baghdad asap because saddam is playing games over verification.
20867 	X	can we all look up from our python code for just a moment and ask ourselves what the deleted expletive is going on here.
20868 	X	has the world gone completely mad.
20869 	X	i am used to if else selecting alternative actions not alternative data so the first action candidate is print something and the else action candidate is cognitive dissonance here.
20870 	X	i the else reads as if introducing the alternative to print an action not to stdin data.
20871 	X	with a multiway integer selection spelled iexpr sel sel sel etc good to have a name for it.
20872 	X	i posted one several hundred messages back cols i if i else none.
20873 	X	its from real code an example where the and or trick fails because you dont know the truth status of cols i and an example where the guard might serve to prevent an array out of bounds.
20874 	X	david eppstein uc irvine of information computer science eppstein at ics uci edu http www ics uci edu eppstein.
20875 	X	w and x and y else z.
20876 	X	w and x and y else z else a.
20877 	X	but this one doesnt do what i.
20878 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
20879 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
20880 	X	please desist with these juvenile language.
20881 	X	a construct that is valid in perl doesnt instantly become.
20882 	X	would you argue against a max xy function.
20883 	X	you can just as easily code it the long.
20884 	X	youre used to it and you expect it to be in just about every.
20885 	X	if you came across a language that implemented it a different way youd probably question the logic behind the.
20886 	X	or if else if you prefer are simply scared of.
20887 	X	and to answer your question i used perl for a few years but found a lack of pompous language nazis in their.
20888 	X	so i came a searching and found this.
20889 	X	i mean if you cant have a good sob over a proposed language feature whats left to enjoy.
20890 	X	dale strickland clark riverhall systems ltd.
20891 	X	dale strickland clark dale at riverhall nothanks co uk writes.
20892 	X	i think in pep a was criticized because it used a new punctuation character.
20893 	X	the overloading of can be solved by combining the two contenders.
20894 	X	im not saying thats a good idea but only that its.
20895 	X	im certainly opposed to the idea that if c did something one way python must do it a different.
20896 	X	i do think that the concepts of pythonic c ish and perl ish actually mean something and its fine to react to something perl ish as seeming out of place in.
20897 	X	i find that less true for c ish ness since cs philosophy is closer to that of.
20898 	X	perls big experiment is in allowing a range of syntatic transformations on statements similar to what english.
20899 	X	most other programming languages dont try to do that and the results havent been imo so hot for.
20900 	X	on the other hand some non syntactic perl features like string interpolation work very well and id be happy to see python import.
20901 	X	btw just the other night i discovered that python has a feature that i first saw in c you can enter a list or tuple with an extra comma at the end like and the extra comma is.
20902 	X	i think that feature was added to c for the sake of easing the job of automatically emitting tables for use in c programs i e to simplify.
20903 	X	aahz in article yuraream fsf at europa research att com aahz if i run the voting and its a straight pick between these aahz alternatives vote ill probably use.
20904 	X	otoh after taking a aahz quick look at more web pages approval voting is easier so maybe ill aahz use that.
20905 	X	approval voting as a term applies to a system aahz where one can vote yes no abstain on each of several.
20906 	X	thats not what i see in http www electionmethods org approved htm could it be that people are using the same term to denote two different ideas.
20907 	X	aahz condorcet is one of a series of ranking systems where one aahz lists items in the order in which one prefers.
20908 	X	the problem aahz with all the ranking systems that ive seen is that there is no aahz way to directly indicate.
20909 	X	sure there is just arrange for no change to be one of the.
20910 	X	if someone votes for no change and nothing else that directly indicates.
20911 	X	andrew koenig ark at research att com http www research att com info ark.
20912 	X	my main problem with some of the proposals including the one above with then is that they do not seem to me to suggest that there is a condition and a.
20913 	X	in my mind to do that requires a question to be asked as in if or the c like.
20914 	X	the word then by itself has merely a connotation of sequential time so that a then b implies that both a and b will happen in some way with b following a in.
20915 	X	without its partner if then fails to convey the question that is were.
20916 	X	i also have a mild concern about the first contender listed above because in my mind the colons are for introducing blocks while in the above they are overloaded merely to help the syntax be unambiguous i assume or for some other reason not involving.
20917 	X	i think i could live with that although at this point im starting to think that only guidos original backwards suggestion is elegant though still undesirable to me so im now favouring the final option above.
20918 	X	on thu feb gmt raymond hettinger edit.
20919 	X	i hope that parentheses will be required no matter what the.
20920 	X	i am a little worried about seeing deeply nested bunches of these.
20921 	X	if parentheses were required a text editor with matching brace highlighting could make understanding any deep nesting.
20922 	X	care to make any comments about the use of the non standard and pascal like writeln instead of using the much more standard write with a n at the end of the string.
20923 	X	are other parts of the code written as if by someone with more experience in some language other than python.
20924 	X	could that experience have cause them to want a.
20925 	X	by any means rather than using a more traditional approach.
20926 	X	terry reedy tjreedy at udel edu wrote in message news oqdnezookxpcjxtwcq at comcast.
20927 	X	got me wondering if nand or nor operators might help.
20928 	X	dont let the barstards grind you down.
20929 	X	thats funny the few times i was lured into using the old idiom it was more often then not during reading i normally started of with an if statement to only replace it with an and or expression when i found the if statement taking up to much of the precious screen.
20930 	X	on the other hand ive not really been exposed to perl so i dont know how hard it can be to read from right to left some of the.
20931 	X	i know it took me a while for list comprehensions to make sense and part of that was due to getting used to the expression were upfront but now i find that they can help make code more.
20932 	X	likewise i hope that such a true conditional operator will make code a tat more.
20933 	X	for one you dont have to look out for those pesky false values in the and part of that would be conditional operator and.
20934 	X	besides the intention of its use is made.
20935 	X	andrew koenig ark at research att com wrote in message news yusmusakrf fsf at europa research att.
20936 	X	see pep pythons conditional selection operators.
20937 	X	i agree that expecting some to be something it is not is.
20938 	X	but i dont do that at least not in this.
20939 	X	for this case not a or b and c is right see the post referenced above.
20940 	X	by reasonable definition of conditional selection and expression it really.
20941 	X	its truth result table is just not quite the one that people usually.
20942 	X	i worked out the truth result table several years.
20943 	X	yesterday i worked out two somewhat baroque and or expressions that exactly match if a then b else c so it actually is.
20944 	X	some aspects of readability are completely subjective lots of people hate list comps but i and others always find them to be really really readable and they just make sense.
20945 	X	i agree with you and thats why im on the pep when used properly the if expr imo does increase readability it very clearly announces that a binary choice is were made and that possibly for short circuiting reasons while a standard if statement is ambiguous is a choice were made or is it for higher level control flow.
20946 	X	i guess im just emphasizing that for or against the pep we should all be careful about including increased readability in our list of reasons if you had been using if expressions all along you would probably consider them to be quite.
20947 	X	now exuse me while i go argue some more that if exprs can make code more.
20948 	X	holger in which case learning about and or which you have to holger anyway often.
20949 	X	because of the y is false problem in holger x and y or z there are some cases where it doesnt.
20950 	X	do holger we have real code examples for them.
20951 	X	yes as ive noted elsewhere in this discussion lib unittest py actually contains a minor bug because it uses and or where it doesnt.
20952 	X	self stream writeln ran d test s in.
20953 	X	run run and or s timetaken.
20954 	X	andrew koenig ark at research att com http www research att com info ark.
20955 	X	the cond c x y was just a builtin function cond using a new introduced syntax for thunks zero argument lambdas x would be short for lambda x so i dont think that really qualifies as a conditional operator a la pep its a short hand for lambdas and a function which uses them in a certain way rather than a conditional operator the conditional operator suggested above would be just one application of it.
20956 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote light more light.
20957 	X	the last words of goethe a personal guide to online multiplayer first person.
20958 	X	on sun feb erik max francis max at alcyone com.
20959 	X	actually we have combinations of punctuation and keyword already because every if and else has to be followed by a colon.
20960 	X	i agree that a ternary operator would be useful and most people here seem to want one as long as its pythonic that is easy to understand at first glance easy to read later on and not prone to abuse over.
20961 	X	syntax because i havent really seen any more legible.
20962 	X	i dont care for the original proposal of x if cond else y because to me at least it appears to get the cart before the.
20963 	X	im just used to thinking that the condition should come first just like in cs ternary operator and just like the if blocks that python already.
20964 	X	also as weve seen from other examples it doesnt nest.
20965 	X	at least alex martellis proposal to always put brackets around the ternary fixes the nesting part.
20966 	X	the only other proposed solution ive seen which i dont hate is to have a builtin something like iff cond x y where x and y are deliberately not evaluated unless theyre.
20967 	X	not ideal since it introduces an exception to pythons typical evaluation rules but at least its.
20968 	X	p s i still dont see whats wrong with good ol cond.
20969 	X	dale strickland clark dale at riverhall nothanks co uk writes.
20970 	X	because im interested in developemnt of the standard library or optimizations of the vm perhaps.
20971 	X	in that i disagree with you.
20972 	X	also remember to put the galaxy back when youve finished or an angry mob of astronomers will come round and kneecap you with a small telescope for.
20973 	X	samuele i dont like the naive questions that if else statement samuele if else conditional expression could.
20974 	X	andrew koenig ark at research att com http www research att com info ark.
20975 	X	i still consider that to be left to.
20976 	X	i can read x or even x quux foo bar baz from left to right without having to stop in the middle and go oh theres an if back track and re read.
20977 	X	i realise this is a rather fuzzy notion of left to.
20978 	X	the real point i was trying to make was that x if c else y is just inside out to.
20979 	X	i dont like it and i certainly dont believe that it is the right.
20980 	X	in every other respect that proposal is simple and clean but i just cant get over the out of order.
20981 	X	its probably the best proposal that ive seen but i will vote against.
20982 	X	james p rutledge jrut at spamcop net writes.
20983 	X	it might be possible to obtain the effects of the proposed expression in a more general way by extending the semantics of the following existing construct html text is html msg the above expression provides the string html or text depending upon the return value of the function is html.
20984 	X	but it does the opposite of what you want i assume.
20985 	X	sorry to keep pointing this out in peoples examples but i think its actually a good argument why the current ternary operator workarounds are not.
20986 	X	samuele pedroni pedronis at bluewin ch ha scritto nel messaggio news ec at news bluewin.
20987 	X	on fri feb erik max francis max at alcyone com.
20988 	X	a de facto standard doesnt require a.
20989 	X	no one mentioned iso or ansi or the.
20990 	X	that is all it takes to make it a de facto.
20991 	X	as de facto standard was the only sensible interpretation of what terry said imo there was nothing wrong with his use of the word.
20992 	X	perhaps convention might have been a better.
20993 	X	the term standard seems to imply that everything else is.
20994 	X	but then again conventional somehow suggests an old dated concept that needs.
20995 	X	i doubt that terry intended either.
20996 	X	its actually interesting to consider why returning a boolean result is the convention considering that a generalisation used in lisp made enough impact to have been replicated decades later in python it may seem odd at first glance that it hasnt been used in many more.
20997 	X	in statically typed languages the generalised and and or simply wouldnt.
20998 	X	the left and right arguments often have different types so they need to be able to return a dynamically typed.
20999 	X	that one issue prevents the method were applied effectively in conventional.
21000 	X	however statically typed languages dont reign in the way they once.
21001 	X	as dynamically typed languages become more popular and as i hope functional languages get more and more recognition outside of academia it will be interesting to see if the current de facto standard gets.
21002 	X	i have my doubts the use of the selective logic operators are for my money too different from the everyday english use of the words though of course that doesnt quite match the boolean algebra use.
21003 	X	given the option i suspect most people would prefer an explicit conditional expression syntax but then well well.
21004 	X	steve at ninereeds dot fsnet dot co dot uk.
21005 	X	i didnt find this because in current cvs that code reads.
21006 	X	self stream writeln ran d test s in.
21007 	X	run run and s or timetaken.
21008 	X	looks like neal norwitz fixed it months.
21009 	X	erik max francis max at alcyone com wrote in message news ee fddbb at alcyone com.
21010 	X	it is exactly because if is already overloaded that i dont want to overload it even more.
21011 	X	anyway if c then e else e is better than nothing and better than guidos.
21012 	X	certainly parens around conditional operators are to be encouraged in most cases if only as a purely stylistic.
21013 	X	in fact parens are required by the syntax in what is listed as the leading proposal in the.
21014 	X	if the selected alternative turns out to not require parens then i would lobby to have a rule added to pep requiring.
21015 	X	the style guide is an excellent way to warn people away from inappropriate.
21016 	X	this prompts me to review for the record my several objections to the bulk of your analyses thus.
21017 	X	as indicated above you object to any use of a conditional operator in any circumstance where any remotely plausible alternative already exists in.
21018 	X	you have consistently classified any such use as abuse.
21019 	X	while i acknowledge that this is a legitimate opinion for you to hold and that its a view shared by others i disagree completely and i think this is way too strict a criteria for real.
21020 	X	i think you grossly underestimate the ability of even newbie programmers use the new feature without getting into major trouble and for.
21021 	X	with appropriate guidance from the style guide i believe the actual incidence even of truly cryptic forms will be negligible in.
21022 	X	second much of your past analysis devote a substantial amount of time and effort trying to find some kind any kind of rationale for rejecting most of the example conditional forms presented along the.
21023 	X	e andrew koenigs early on cited a small application where he finds examples of cond all of which he claims and i agree are suitable examples for.
21024 	X	this predicts a fairly high rate of usefulness one instance in every.
21025 	X	you arbitrarily reject several of his examples thereby unilaterally reduce his statistic to one more consistent with your own.
21026 	X	i cited a dozen or so examples from the python source code along with my opinion that all of them were examples of things that might well arise in normal python.
21027 	X	you disagreed and argued at length that all of the alternatives were abuse and thus thered never be an occasion to use any of the examples when writing python.
21028 	X	this was kind of pointless as there was no statistical significance to the handful of samples i.
21029 	X	worse your reasoning in most cases was totally.
21030 	X	e in one case you completely rewrite the code to avoid a.
21031 	X	while this is certainly a possible alternative and may well reflect your individual preference in the matter it nowhere demonstrates that the original was in any way.
21032 	X	another set of examples which you admitted was excellent you said would not apply in python because the c example was in a macro.
21033 	X	for some unfathomable reason you argued that in python the inlining would be done by hand which means having the expression be used many times instead of simply using the name.
21034 	X	this is patently absurd as clearly the python equivalent would be to define a function and call it in the body of the code same as the.
21035 	X	there are other places where you similarly reject various examples for no good reason in direct contradiction to others views and always with the net effect of cooking the books consistent with your stated.
21036 	X	the hardest case for me to counter argue is c examples which amount to some kind of a min or max.
21037 	X	you say this would be abuse in python because python has min max.
21038 	X	but c and c also have min and max as part of their standard built ins.
21039 	X	arguably min max is better in both.
21040 	X	still i would give benefit of the doubt to the developer that for reasons i cant fully divine spelling it out was preferable in this.
21041 	X	maybe it simply was more convenient at the.
21042 	X	i seem to recall using if else in python very early on before i had absorbed the fact that min and max were built.
21043 	X	far as im concerned the following alternatives are all acceptable.
21044 	X	that you can figure out at a glance whats going on once you learn the language imho makes this all a non.
21045 	X	i know you and others disagree but its still a matter of opinion not some objective.
21046 	X	so my and others contrary views are just as valid as.
21047 	X	third there are a number of places where you boldly pick numbers or ratios purely out of the.
21048 	X	at one early point i seem to recall you arbitrarily assert in uses of the pep will be abusive.
21049 	X	i could be wrong about this particular looking just now i timed out without locating this statement in the thousands of messages this.
21050 	X	but elsewhere you say alternatively chance of abuse and then to.
21051 	X	i know theres no hard data and the choice is completely arbitrary but you would at least seem more rigorous if youd pick an assumption and stick with.
21052 	X	in any case most of your choices have consistently had the effect of artificially inflating the estimated hazard or to reduce the estimated.
21053 	X	so even within the framework of your analyses there is considerable room for reasonable people to legitimately maintain radically different opinions about the calculated likelihood of abuse.
21054 	X	ill stipulate that it is non zero but if i were to pick numbers out of the air id say its more like in or in rather than in furthermore for the various assumptions you make along the way assumptions more favorable to the pep arguably are equally.
21055 	X	without going back and re running all the numbers i submit that including most examples from c c as i and others would do.
21056 	X	excluding most examples as you have argued translates to considerably different bottom.
21057 	X	certainly changing the fudge factors affecting suitability of c examples for python and the intrinsic odds of python abuse the real issue would make a big difference in the conclusion regardless of the underlying code.
21058 	X	since different sets of assumptions lead to radically different conclusions im not sure we can attach much significance at all to any qualitative analyses such as the ones that you have.
21059 	X	i question if its even better than nothing at.
21060 	X	in the end theyre all simply an elaborate statement of conviction by whomever picks the.
21061 	X	now im not accusing you of intentional.
21062 	X	for the most part all your work was done in the open and you invited others to propose counter.
21063 	X	arguably its partly my fault for not speaking up sooner but frankly i simply couldnt keep up with your volume and i was distracted by other arguments i though were more important at the.
21064 	X	in most of your analyses some fudge factor was intrinsic to the.
21065 	X	since you were doing all the work you got to pick the initial value and i agree that is fair as far as it.
21066 	X	i dont even believe that your bias is.
21067 	X	i bet you sincerely believe everything you did was objective and.
21068 	X	psychological experiments have shown that people tend to unconsciously introduce bias to pure measurement tasks if they are given a preconception about the correct.
21069 	X	its hard to see how people with passionate feelings can ever avoid letting their bias cloud their perception and.
21070 	X	i dont even necessarily object to most of what you say however biased they may.
21071 	X	as an argument as an elaborate expression of your admittedly biased viewpoint its still a valid opinion and i respect it as far as that.
21072 	X	youre entitled to your opinion and nobody can object so far as its a statement of.
21073 	X	but i object to your pretending that this analysis reflects some concrete objective reality removed from your own.
21074 	X	and thats the main reason i am compelled to post this.
21075 	X	my biggest disagreement overall is that you classify as abuse any use that happens to have some other python.
21076 	X	i think this is an extreme and unreasonable criterion to start.
21077 	X	i know you like to think and say theres only one way to do it but thats just a.
21078 	X	its cute anti perl rhetoric but little.
21079 	X	like with any mature programming language python already has myriad different ways to do just about.
21080 	X	arguably some alternatives are better than others but for most part arguable is the key.
21081 	X	e for loops map lambda and list comprehensions are each mutually.
21082 	X	but different people prefer one or the other for different.
21083 	X	its usually a highly subject matter the very opposite of your one way point of.
21084 	X	whats best in any given case ultimately is a matter of personal preference as it should.
21085 	X	finally this small construct is far from the biggest opportunity for abuse in the wonderful world of.
21086 	X	the examples are too numerous to.
21087 	X	off the top of my head i bet some really strange lists can be created based on the fact that list comprehensions can nest arbitrarily.
21088 	X	one or more closures may appear as part of the expression left of the if one or more may appear in the expression following any in and one or more may appear in the expression following any.
21089 	X	i for i in xrange j for j in xrange k for k in xrange.
21090 	X	this is just random to see if it.
21091 	X	jeeze you guys let this this hippopotamus into the tent one with two major preexisting alternatives and then you turn around and complain about trivial little.
21092 	X	im only pointing out the hypocrisy when you talk about python as is were so immune to.
21093 	X	it would have been a gross mistake to not make closures fully regular and flexible like.
21094 	X	languages get their power and ironically their simplicity by were general like this and not including arbitrary.
21095 	X	i think this is a true statement that undermines some of your stated.
21096 	X	its a fact that a large majority of programmers are trained in c and c particularly in the pc unix world pythons primary.
21097 	X	if its given that many perhaps most potential newcomers will have some experience with those languages then its disingenuous to argue that theyll necessarily have huge problems with adding pep.
21098 	X	in fact making python a little more attractive to c users might do more to encourage growth than any other.
21099 	X	if only guido had gone ahead and simply added.
21100 	X	back in the beginning when he copied so many other operators from c i expect yall now days couldnt live without the damn.
21101 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
21102 	X	tim peters tim one at comcast net ha scritto nel messaggio news.
21103 	X	but i think ideally andrew koenig would want them changed for pedagogical.
21104 	X	otoh personally i think i would still use and or were it works if the pep got approved but the chosen variant is less readable than what is basically an idiomatic form to take as.
21105 	X	furhter people ideally should still learn how and or works if we want them to write.
21106 	X	out of curiosity in what way is if overloaded.
21107 	X	the reason i like if in this context is because it means the exact same thing it does in an if statement a condition is about to be checked in order to make a binary.
21108 	X	because it means the same thing as it does in an if statement its so much easier to guess the meaning if youre not familiar with.
21109 	X	the colon and usually indentation is what marks the beginning of a block of code under an if not the if.
21110 	X	even tuples do not in some circumstances require.
21111 	X	its not very pythonic to have parentheses all around the.
21112 	X	the only condition when parentheses are required is when operation with less priority is guarded against more priority.
21113 	X	sincerely yours roman suzi rnd at onego ru my ai powered by linux redhat.
21114 	X	if y might evaluate as false i paul wouldnt use.
21115 	X	im not worrieed about you im worried about someone else reading your code who might not realize that cond and expr or expr doesnt always work and might use it in a case where it.
21116 	X	andrew koenig ark at research att com http www research att com info ark.
21117 	X	gvr given that if then else expressions keep were requested i hereby put gvr forward a.
21118 	X	i am neutral on acceptance of the proposal id gvr like the c l py community to accept or reject it or come up with a gvr counter.
21119 	X	please understand that i dont have a lot of time gvr to moderate the discussion ill just wait for the community to gvr discuss the proposal and agree on some way to count votes then count gvr.
21120 	X	i think the if then else expression are really.
21121 	X	all the proposed alternatives are ugly and python should discourage ugliness this is one of its major features.
21122 	X	gvr the proposed syntax is as follows.
21123 	X	gvr if we could live with adding a new keyword we could use.
21124 	X	gvr if condition then expression else expression.
21125 	X	if we take instead of then then we dont need a new.
21126 	X	the combination is illegal in current.
21127 	X	so the construction would be if condition expression else expression.
21128 	X	gvr apart from the problem of introducing a new keyword for a minor gvr feature this also suffers from ambiguity at the start of a gvr statement for example.
21129 	X	gvr if verbose then sys stdout write hello n else none.
21130 	X	gvr could be an syntactically correct expression statement but starts gvr with if which makes the parser believe it is the start of an gvr if.
21131 	X	to resolve this the syntax would have to require gvr parentheses which makes it.
21132 	X	the ambiguity can be resolved by making some changes to the grammar no language change other than the if expression.
21133 	X	first split expr stmt into and the second does start with.
21134 	X	this requires a few other nonterminals also to be.
21135 	X	then merge the ifexpr stmt with if stmt substitute some nonterminals and factor out the if test.
21136 	X	here is a first try of the affected grammar rules.
21137 	X	expr stmt niftestlist augassign testlist testlist.
21138 	X	test niftest iftest iftest if test or test else or test.
21139 	X	or test and test or and test.
21140 	X	testlist niftestlist iftestlist iftestlist iftest test.
21141 	X	piet van oostrum piet at cs uu nl private email p van oostrum at hccnet nl.
21142 	X	from roman suzi on mon feb msk.
21143 	X	roman in python expression is a standalone.
21144 	X	roman the parser will notice the difference only at else.
21145 	X	im proposing that the parser should decide when it sees the if that it is parsing an if statement and rule out the possibility that it is parsing an expression that is also a.
21146 	X	bjorn pettersen bpettersen at narex com wrote in message news.
21147 	X	given that and and or are best described as conditional selection operators explaining this is another post not yet written it is straightforward that together they form a conditional selection.
21148 	X	roy smith roy at panix com wrote in message news roy.
21149 	X	lets take one thing at a.
21150 	X	you can always propose this in a later.
21151 	X	what id be curious about at this point is how everyone breaks down between.
21152 	X	i dont want conditional expressions added to python with any syntax i dont necessarily object to conditional expressions but i dont like and wouldnt support any syntax proposed so far im in support of pep as written but i wouldnt support any of the other proposed syntaxes id support pep as written and i prefer it to any of the proposed alternatives but i could support some of the alternatives as well i would prefer one of the proposed alternate syntaxes to the original pep but if it comes down to just yes no on pep i would vote yes i would support one or more of the proposed alternate syntaxes but not pep as written.
21153 	X	this can be looked at in a few interesting ways.
21154 	X	dont want anything suggested so far want pep as written want one of the alternate proposals.
21155 	X	would vote no on pep as written would vote yes on pep as written.
21156 	X	wouldnt support any of the alternate syntaxes would support at least one alternate syntax.
21157 	X	however starting a new poll whenever someone is curious is a good way to drown out any useful information and dilute the chance of running the polls that would really be.
21158 	X	but if others think this would be a useful poll go ahead and run it and id love to see the.
21159 	X	it doesnt require parentheses but parentheses as a requirement are part of the.
21160 	X	further im not sure why not sticking out is a good.
21161 	X	wouldnt you want something thats easy to spot and interpret rather than something which quietly blends in.
21162 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote take the slow train to my destination sandra victor a personal guide to online multiplayer first person.
21163 	X	but you wouldnt really suggest that these are clearer would you.
21164 	X	and of course a true conditional expression would be short circuiting although that isnt relevant to this example here but is one of the big payoffs to a real conditional.
21165 	X	in my opinion the key issue about the benefit of a conditional operator is about making code more.
21166 	X	if i see s count i certainly have to sit and think about it a little bit its hardly a crystal clear.
21167 	X	s count is a tiny bit better since its a slightly more recognized idiom and ive certainly used it on occasion but its still not immediately.
21168 	X	using a recognized idiom thats built into the language whether its x if p else y or whatever might get adopted makes it crystal clear what i.
21169 	X	same is with booleans which i also hoped for when first encountering the language and supported the addition of one when it was proposed if i write return im not sure whether thats going to be used as a counting number an integer a degenerate rational float complex number a comparison result or a.
21170 	X	when i see return true i know right.
21171 	X	or whatever form gets adopted provided i understand the form the intended meaning is much.
21172 	X	you bet but so can any other language.
21173 	X	conditional expressions if used properly can make code like your examples much clearer because you dont have to pull a trick to get the effect of a conditional operator you have one already built.
21174 	X	my example was deliberately simple to which there are still in my opinion less clear.
21175 	X	for real short circuiting if you want that compressed into an expression you have some real iopycc contenders.
21176 	X	p and lambda x or lambda y.
21177 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote ten lands are sooner known than one.
21178 	X	a yiddish proverb bosskey net aliens predator http www bosskey net avp a personal guide to aliens predator.
21179 	X	i agree although perhaps not as intensely as you.
21180 	X	its clearly a compromise that tips its hat to the c and x or y broken hack which in and of itself does not lend itself to easy.
21181 	X	its an idiom if you dont know the idiom and encounter it in real code youll be stuck figuring it.
21182 	X	the and there doesnt really give you a clue as to whats going on and as someone else pointed out what happens when this construct appears in an expression involving more and operators.
21183 	X	if you really want this then c then x else y seems a far better way to do it despite the flaw of adding an additional.
21184 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote being in love for real it aint like a movie screen india arie bosskey net aliens predator http www bosskey net avp a personal guide to aliens predator.
21185 	X	colons are only used in statement forms in python at the.
21186 	X	i accept that it invalidates the statement above in a logical sense but for some reason that makes no difference to my.
21187 	X	i honestly dont know why maybe it is nothing more than prejudice but i suspect that if we were arguing about syntax for lambda id want something different there.
21188 	X	but the if expression does not require newlines in the same places as the if.
21189 	X	currently this is invalid python you need a newline before the else to make it a valid if statement.
21190 	X	with an if expression as you propose it becomes a perfectly valid expression statement which makes one of two function.
21191 	X	while the semantics would be identical to the if statement form with the added newline i would imagine that it would be absolute hell to parse this correctly given that pythons parser is fairly stupid iirc its a simplistic ll parser with only one token lookahead and thats a feature.
21192 	X	past discussions on python dev have shown guido to be strongly against constructs which require the parser to become.
21193 	X	its easy enough to imagine rules on how to disambiguate this but i suspect they would cont as needing compiler smarts.
21194 	X	i didnt try very hard to find an example which was confusing to the programmer but im sure you could find.
21195 	X	in the first instance in the statement above try explaining to a novice or even an expert.
21196 	X	why changing f to x f requires you to insert an extra newline.
21197 	X	andrew koenig ark at research att com writes.
21198 	X	i dislike this suggestion because its too punctuation.
21199 	X	on the other hand i think i dislike all the keyword suggestions including guidos because they are too text.
21200 	X	if anything convinces me i imagine it will be some form of punctuation based approach which doesnt re use parentheses or.
21201 	X	introducing new syntactic tokens like may work best for.
21202 	X	but i dont know what the implications will be in terms of the introduction process keywords are out at least in part because a new keyword requires a version lead time i dont think the question of new tokens like has ever come.
21203 	X	i dislike this for the order and for the keyword.
21204 	X	is already legal so im for yet another way to do it.
21205 	X	a good reason for another would be that perl has both ways of doing it.
21206 	X	if theres only one way to do it i can read your code ly.
21207 	X	fredrik lundh fredrik at pythonware com ha scritto nel messaggio news.
21208 	X	i thought the same but it is false.
21209 	X	and my best meta analysis of the code analysis done by me and others suggests that this form is needed about once every lines of code while a non short circuiting function would be used much more.
21210 	X	i didnt do the analysis of the uses if an iff statement but based on the other results it would be at least per lines and more likely more often than that so my educated guess is about every lines or.
21211 	X	john la rooy nospampls jlr at doctor com wrote in message news.
21212 	X	yes or more concisely yx c and xyz c.
21213 	X	on sun feb rumours say that erik max francis.
21214 	X	c then x else y tzotzioy i speak england very best real email address dhpvdebzawwtdgvjlmdy n decode base.
21215 	X	imo laura emphasized how good enforcing indentation is for.
21216 	X	writing x and y or z or x if y else z or list comps for that matter undermines.
21217 	X	beeing able to concisely express a binary choice in an expression of course can be nice in some.
21218 	X	its a tradeoff between readability and expression power but i think that readability should score higher.
21219 	X	often enough there are other higher level possibilities to design an algorithm using dictionary.
21220 	X	i think what could be more useful is something like.
21221 	X	which enhances pythons philosophy of not requiring look before you.
21222 	X	hopefully its obvious what this does and imo it reads comparatively well because you dont have three entities one condition and two expressions to.
21223 	X	with it you can substitute stuff like.
21224 	X	try result something method except attributeerror result none.
21225 	X	result something method except attributeerror none.
21226 	X	maybe i just have been working too much with exceptions lately.
21227 	X	chermside michael mchermside at ingdirect com writes.
21228 	X	i make a three line piece of idle speculation and someone goes off and checks it.
21229 	X	reminds me why i like this.
21230 	X	there are two ways of constructing a software design one way is to make it so simple that there are obviously no deficiencies and the other way is to make it so complicated that there are no obvious.
21231 	X	i share your concern about the scariness which is why i questioned whether it would be dangerous in my original.
21232 	X	i wonder if someone could provide an authoritative comment on this.
21233 	X	on the other hand im not particularly opposed to knowing the arguments and qualifiers for any particular function that im about to.
21234 	X	actually i meant that the use of the qualifier line noise would be very rare it would only be used in the definition of a function that specified lazy.
21235 	X	that is not to say that the use of such a function would be very.
21236 	X	in fact i would expect that the opposite would be the case which is part of the rationale behind placing the qualifier into the function.
21237 	X	perhaps i am looking at this backwards.
21238 	X	in this case iff function its clear that the function definition needs to support lazy.
21239 	X	but i can see where there would be cases where it didnt look like it was needed but the caller is annoyed that he cant use my function lazily.
21240 	X	despite that i dont believe that lambda would be a good explicit solution.
21241 	X	michael ive lost the original list you used for polling and e mail to you is bouncing due to a full.
21242 	X	please send the list of options in e.
21243 	X	aahz aahz at pythoncraft com http www pythoncraft com.
21244 	X	register for pycon now http www python org pycon reg html.
21245 	X	guido regrets lambdas and i dont believe list comprehensions were a necessary addition to the.
21246 	X	disclaimer doesnt stop me using either but i could just as easily use some other.
21247 	X	although i am not sure any ternary operator is worth changing the language i too believe the original proposal to be the most pythonic and.
21248 	X	which as a special case requires.
21249 	X	i appreciate the elsif capability in the revised pep but the original form chains quite nicely to provide equivalent.
21250 	X	is this just more backlash from pep.
21251 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote ten lands are sooner known than one.
21252 	X	a yiddish proverb bosskey net aliens predator http www bosskey net avp a personal guide to aliens predator.
21253 	X	christos tzotzioy georgiou dlnxpegfqveb at spammotel com writes.
21254 	X	some of the syntax suggestions put me in territory though which is why i piped.
21255 	X	since i dont much care if its added or not but i do care how its added if it is i figured i say something lest i be counted as a plain dont care.
21256 	X	sigmask version feed this to your.
21257 	X	print reduce lambda xy x chr ord y ojdlwbshjti.
21258 	X	erik thank you for compiling this list of proposals.
21259 	X	id vote against the introduction of any new special characters into python syntax as i think there could come up better reasons for using.
21260 	X	or for some other new concept which would be more compelling than a ternary operator which as a separate concept i dont find that.
21261 	X	i hope the following suggestion hasnt already been beaten to death somewhere pardon me if it.
21262 	X	id like to suggest a syntactical construct which id call a generator comprehension.
21263 	X	it would resemble the list comprehension but instead of building a static list object it evaluates its components lazily when were asked for the next.
21264 	X	x for value in from a x b x c x if not value break print value.
21265 	X	first tests prints its value then evaluates b which happens to be false and.
21266 	X	the from would act very much like.
21267 	X	def gen com yield a x yield b x yield c x.
21268 	X	the generator comprehension could select and modify its values on the fly with nearly the same syntax that list comprehensions use.
21269 	X	v for v from a x b x c x.
21270 	X	v for v in a x b x c x.
21271 	X	does today just evaluates its components.
21272 	X	then we could actually use the already proposed bool choose method.
21273 	X	x choose from a x b x.
21274 	X	or let the generator comprehension for instance pick its first true value.
21275 	X	from a x a x a x firsttrue.
21276 	X	if such a beast was indexed it wouldnt need to evaluate all its components up to the index.
21277 	X	from a x b x c x.
21278 	X	would just evaluate c x as a and b are not needed to determine the.
21279 	X	pros and cons that i can or believe to see myself.
21280 	X	supports a pep like ternary operator.
21281 	X	may also be useful for very different.
21282 	X	doesnt introduce new keyword nor special.
21283 	X	doesnt actually introduce new concepts into the language generators are already there albeit not for long.
21284 	X	symmetry with list comprehension could be.
21285 	X	doesnt come to mind if a c programmer is looking for an equivalent of x.
21286 	X	approval voting works fine in the case where one of the possible choices is do.
21287 	X	if you reject the pep and want to do nothing you only mark do nothing on your.
21288 	X	in your case youd probably want to mark do nothing and if c x else y one of the options and nothing.
21289 	X	that way you express that you want no change but would accept that particular form if it cam down to.
21290 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote i am the essence of overconfidence.
21291 	X	benjamin hawkeye pierce bosskey net counter strike http www bosskey net cs a personal guide to counter.
21292 	X	well no wonder you are hot for this.
21293 	X	parsing a language where each line has a true false branch condition which i assume is what you are doing is an absolute natural for such a.
21294 	X	could at least try and explaing your reasoning to me then.
21295 	X	guido never said anything about a supermajority as far as i can.
21296 	X	i just want him to make the decision himself not others to make the decision for him by proxy because of arbitrarily high quotas they have to know neither side can.
21297 	X	give him the data let him.
21298 	X	but aahz wants to make the decision for him as the original wording of the voting proposal.
21299 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote life is an effort that deserves a better.
21300 	X	karl kraus alcyone systems san jose.
21301 	X	in which case learning about and or which you have to anyway often.
21302 	X	because of the y is false problem in x and y or z there are some cases where it doesnt.
21303 	X	do we have real code examples for them.
21304 	X	damien morton newsgroups at bitfurnace com wrote in message news.
21305 	X	since i just discovered the alternate form not c or x and y which works when x is null rather than non null years after noticing the and or.
21306 	X	i have to admit that these are not quite as intuitive as i.
21307 	X	see pep pythons conditional selection operators one has to look at the definitions of and or several times and work out the effect of combinations to fully get how they.
21308 	X	i am becoming increasingly sympathetic to that.
21309 	X	but i dont know what i will think three days from.
21310 	X	given that if then else expressions keep were requested i hereby put forward a.
21311 	X	i am neutral on acceptance of the proposal id like the c l py community to accept or reject it or come up with a counter.
21312 	X	please understand that i dont have a lot of time to moderate the discussion ill just wait for the community to discuss the proposal and agree on some way to count votes then count.
21313 	X	requests for an if then else ternary expression keep coming up on comp lang.
21314 	X	this pep contains a concrete proposal of a fairly pythonic.
21315 	X	this is the communitys one chance if this pep is approved with a clear majority it will be implemented in python.
21316 	X	if not the pep will be augmented with a summary of the reasons for rejection and the subject better not come up.
21317 	X	while i am the author of this pep i am neither in favor nor against this proposal it is up to the community to.
21318 	X	if the community cant decide ill reject the.
21319 	X	the proposed syntax is as follows.
21320 	X	if condition is true expression is evaluated and is the result of the whole.
21321 	X	if condition is false expression is evaluated and is the result of the whole.
21322 	X	note that at most one of expression and expression is.
21323 	X	this is called a shortcut expression it is similar to the way the second operand of and or is only evaluated if the first operand is true.
21324 	X	to disambiguate this in the context of other operators the else part in the middle acts like a left associative binary operator with a priority lower than that of or and higher than that of lambda.
21325 	X	examples of how this works out.
21326 	X	x if c else y if d else z x if c else y if d else z x or y if c else z x or y if c else z x if c else y or z x if c else y or z lambda x if c else y lambda x if c else y x if c else lambda y syntaxerror x if c else y z x if c else y z x y if c else z x y if c else z.
21327 	X	many c derived languages use this syntax.
21328 	X	i reject this for several reasons the colon already has many uses in python even though it would actually not be ambiguous because the question mark requires a matching colon for people not used to c derived language it is hard to.
21329 	X	eric raymond proposed a variant that doesnt have this problem.
21330 	X	while cute this suffers from the perlish problem of using arbitrary punctuation with an arbitrary meaning and its no easier to understand than the.
21331 	X	if we could live with adding a new keyword we could use.
21332 	X	if condition then expression else expression.
21333 	X	apart from the problem of introducing a new keyword for a minor feature this also suffers from ambiguity at the start of a statement for example.
21334 	X	if verbose then sys stdout write hello n else none.
21335 	X	could be an syntactically correct expression statement but starts with if which makes the parser believe it is the start of an if.
21336 	X	to resolve this the syntax would have to require parentheses which makes it.
21337 	X	however this form has the advantage of evaluating strictly from left to right not that that is a requirement for were pythonic list comprehensions dont.
21338 	X	this document is placed in the public.
21339 	X	local variables mode indented text indent tabs mode nil sentence end double space t fill column end.
21340 	X	guido van rossum home page http www python org guido.
21341 	X	samuele as you might know the cutest my take general solution to samuele the problem in current python performance aside is samuele posted by gerald s williams to python dev.
21342 	X	samuele z ife cond and x or y.
21343 	X	samuele if python had had a ternary cond op i would never have seen samuele that sniff.
21344 	X	youre right thats about the nicest workaround ive.
21345 	X	but i think i can improve it a tiny bit.
21346 	X	andrew koenig ark at research att com http www research att com info ark.
21347 	X	the and or thingy generally takes an oh what does this do.
21348 	X	i just think it may be non obvious but entirely is a bit.
21349 	X	i think for people greatly disliking the current and or idioms this fix proposal must look.
21350 	X	i was following a specific strategy and didnt claim that the and else fix would be satisfying in every.
21351 	X	but like it or not there are people who dislike pep for yet different.
21352 	X	the danger is there that we all may have to deal with constructs we each dont.
21353 	X	do you really think its that great a feature that you have to switch to another idiom if your ternary becomes binary.
21354 	X	would you like it that with.
21355 	X	you decide you dont need the else part and then you have to write.
21356 	X	instead of taking the else part away.
21357 	X	i may have misphrased it but uniformity is not just a neat.
21358 	X	jim jinkins j jinkins at usa net wrote in message news.
21359 	X	enough to be confusing to those new to python like me.
21360 	X	im really too new to python to participate but wait in some ways thats ok because i can give an experienced c but still learning python.
21361 	X	so what the hell ill propose something how about.
21362 	X	cond expr expr no longer looks like a function call.
21363 	X	didnt like this initially but it grew on me.
21364 	X	all these suggestions involve adding an operator and i had no idea about the parseablity ambiguity of such additions but if one of these suggestions was ok then it would offer the following.
21365 	X	clearly not a function inline ordering.
21366 	X	use of which will be a hint to the.
21367 	X	which carries a sense of conditionality for those without c c.
21368 	X	btw ive explicitly avoided something enclosed in alone like say.
21369 	X	because that makes the use of these expressions look peculiar when used as function.
21370 	X	two lots of brackets would result.
21371 	X	i really do hope i havent made an idiot of myself.
21372 	X	btw from my reading of this topic the archetypical use case turns a word into its plural by taking on an s or not depending on a.
21373 	X	the winning option should make this easy neat imo make.
21374 	X	using the rd form i give above.
21375 	X	print widget s loaded num s.
21376 	X	though in most cases i can find in c the short circuiting doesnt change anything except improve performance.
21377 	X	so while what you say is true it isnt a very strong requirement for most real life.
21378 	X	thats a difference between us and guido.
21379 	X	i asked guido whether he had shown the leading conditional alternatives to his.
21380 	X	he said he had and that the wee lad not yet threw cheerios at all of.
21381 	X	if it were my son i would have been feeding him count chocula.
21382 	X	syntax goes better with chocolate than sugar ly yrs tim.
21383 	X	not to nitpick into the ground but the traditional symbol for implication is an arrow with only one horizonal.
21384 	X	in mathematics when the double line version is used its often used to mean something else like is equivalent to or evaluates.
21385 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote the multitude of books is making us.
21386 	X	which suggests the reversed order doesnt it.
21387 	X	again im not looking for a mnemonic to help me with c ive pretty much abandoned it for most purposes anyway.
21388 	X	im trying to say why i think newbies will be turned off by this.
21389 	X	pointer syntax isnt that hard to remember either but it was sufficiently confusing to avoid doing it in.
21390 	X	anansi spaceworks http www anansispaceworks com.
21391 	X	no if it were easy to remember you wouldnt need this.
21392 	X	im not saying its impossible to.
21393 	X	im saying that its sufficient bizarre looking that if like me you use it fairly rarely you have to waste time looking it up to be.
21394 	X	consider for example that the position of the conditional in a standard python if else structure is right after the condition.
21395 	X	simon burton simonb at webone com au writes.
21396 	X	you know if the inspiration for this syntax condition in the middle is list comprehensions maybe the thing can be improved by requiring parentheses around the expression.
21397 	X	x if is special x else y.
21398 	X	for some reason i find that clearer than the same thing without the.
21399 	X	i still prefer a syntax with the condition first then the two exprs but can live with it either.
21400 	X	it has good and bad points that have been discussed.
21401 	X	yes though its hard to measure the speedup.
21402 	X	samuele pedroni pedronis at bluewin ch wrote in message news e at news bluewin ch.
21403 	X	i must say that even if initially i said if c x else y is ugly but better than nothing in the last few days the arguments of samuele and others finally convinced me that nothing is better than such a confusion between expressions and.
21404 	X	it seems to me absolutely contrary to the python design.
21405 	X	guido seems to be accepting this solution see the new form of the pep nevertheless i reserve to myself the right to.
21406 	X	im not sure the benefits are worth the additional.
21407 	X	it might be convenient in some circumstances but thats not necessarily a good reason to implement.
21408 	X	were all familiar with languages that have grown to the point where they are ugly hard to explain or even comprehend and i would assume difficult to.
21409 	X	its not perfect but it has qualities that set it above so many others it is simple yet powerful and has marvelous.
21410 	X	implementing concepts in the name of convenience is a slippery.
21411 	X	as someone once said add little to little and soon you have a big.
21412 	X	eric stechmann direct resident software hominid fax advanced respiratory e mail estechmann at advresp com west county road f url www thevest com st paul mn.
21413 	X	information contained in this e mail message may be legally privileged and confidential information intended only for the use of the individual s named.
21414 	X	if the reader of this message is not the intended recipient you are hereby notified that any use dissemination distribution or copying of this e mail is strictly.
21415 	X	if e mailed messages include medical records these records are privileged and confidential and may be released only upon written permission of the.
21416 	X	if you have received this e mail in error please immediately notify the sender by telephone at and delete this e.
21417 	X	andrew dalke adalke at mindspring com wrote in message news bdp gm at slb atl mindspring python.
21418 	X	but if it now that would be a cool regular expression.
21419 	X	no arguments from me to the extent that one can draw anything from these numbers are all pretty much the.
21420 	X	i suspect that we will read and write them in this form a few times per module in the.
21421 	X	its possible that they might replace some instances of the initialization idiom.
21422 	X	def f self x none self x x if x or explicit is better.
21423 	X	in which case we would see more of.
21424 	X	surely youre not advocating making them optional in that case.
21425 	X	your above comparisons compares apples expressions and oranges statements.
21426 	X	id appreciate it if we dicuss before.
21427 	X	but maybe thats just me beeing a silly old.
21428 	X	to me this reads like a crippled lambda that allows statements but it is definitely a lot more readable than any of the other proposals so.
21429 	X	though i think that it should be return rather than the fortrany things but that doesnt work for your later general.
21430 	X	bar property get bar set bar get bar set bar where def get bar self some code def set bar self val other code return get bar set bar.
21431 	X	i dont particularly like the assignment that would be needed spam where.
21432 	X	anders hammarquist iko at cd chalmers se physics student chalmers university of technology hem gteborg.
21433 	X	tim otoh when i read micahels post i had no idea whether.
21434 	X	tim print x x getdisplaystring if x else none.
21435 	X	tim print x x getdisplaystring if x else none.
21436 	X	tim print x x getdisplaystring if x else none.
21437 	X	tim and i didnt even know which way he intended.
21438 	X	spelled with an if tim statement instead the intent is obvious instead of a.
21439 	X	or spelled with an extra pair of.
21440 	X	andrew koenig ark at research att com http www research att com info ark.
21441 	X	quoth erik max francis on bengt richters x proposal.
21442 	X	as i read richters proposal expr would be an object such as class braced def nonzero self return def getattr self name return lambda expr.
21443 	X	getattr name def setattr self name value return lambda expr.
21444 	X	setattr name value that is an object which delegates to the value of expr for everything except nonzero.
21445 	X	one outstanding question in this interpretation is whether e expr.
21446 	X	class should refer to exprs class or the braced.
21447 	X	note that expr above is not a variable named expr but a metasyntactic variable for an arbitrary.
21448 	X	the lambdas thus accomplish lazy evaluation whence the desired short circuiting behaviour in the context x and y or z.
21449 	X	as written above they also allow expr to change value x y x print y x print y memoizing the result of lambda expr would avoid this but wed still get x y x x print y since by design expr would not be evaluated until the first invocation of a method other than nonzero.
21450 	X	if memory serves richter mentioned that or would unwrap the braced object presumably to prevent it from were passed around the program and wreaking.
21451 	X	many of these complexities can be avoided by permitting these braces only in unwrapping.
21452 	X	in this scenario theyre much more like an inflection of those contexts than a way of creating an object with a weird truth value since the putative object would only ever be accessible to the unwrapping context.
21453 	X	then the fact that the braces look like some kind of operation on or container for the enclosed expression is misleading and a separate more perspicuous syntax for those contexts would be.
21454 	X	that leaves us back where we started seeking a clear syntax for the ternary.
21455 	X	steven taschuk aral confusion to the enemy.
21456 	X	staschuk at telusplanet net mark turn about is fair play.
21457 	X	why not just take your current download of python and leave.
21458 	X	one of the beauties of python is the way it is growing and.
21459 	X	you have an odd understanding of enhancement.
21460 	X	an pointless function that boils down to.
21461 	X	are you paid by the code line.
21462 	X	theyre good too but theyre pythonic so dont fit my.
21463 	X	dale strickland clark riverhall systems ltd.
21464 	X	you could also find a solution like this for a switch statement.
21465 	X	if x it s alright elif x hello bye bye else default.
21466 	X	i presume you mean if x y else z if x then y else z was one of the alternatives originally mentioned in the pep but the leading proposal at this point does introduce a new keyword then.
21467 	X	others im sure can come up with more clever ambiguous.
21468 	X	in the face of unary and binary operators with the same symbol there has to be some sort of delimiting syntax between the three expressions the tokens of two expressions can in some cases be concatenated together to make a whole new expression with a completely different.
21469 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote nothing you have said is revelation the russian chess bosskey net return to wolfenstein http www bosskey net rtcw a personal guide to return to castle.
21470 	X	do you really know the python parser.
21471 	X	your statements are true for more general.
21472 	X	the python one focuses on simplicity as so many other parts of python do.
21473 	X	i had a detailed discussion with andrew koenig about this.
21474 	X	x please choose between trueval and falseval depending on condition.
21475 	X	but that seems a tad too wordy for.
21476 	X	it promotes cut paste programming i.
21477 	X	x choose trueval or falseval depending on condition.
21478 	X	but maybe thats a bit too.
21479 	X	its easily expandable for random number utilization.
21480 	X	erik max francis max at alcyone com wrote in message news efe ffeb at alcyone.
21481 	X	i think the definition of short circuiting is a little.
21482 	X	i think it basically means you dont want to evaluate the to values before you return one of them which i dont believe im doing in either.
21483 	X	i was just trying to point out that it was not really.
21484 	X	the fact that you need to explain it is evidence enough to me and i figure that if it has confused me before that it will confuse.
21485 	X	expressive but unhelpful towards understanding why you dont like.
21486 	X	not least is that when some unsuspecting newbie hits this in my code they will immediately know this is a new construct and be able to look it up under when where they will get correct.
21487 	X	but the most obvious reason is that it reads as fairly correct english.
21488 	X	d a when c else b set d to a when c else set it to b.
21489 	X	d a when c else b compare d to a when c else compare it to b.
21490 	X	even the elision of the second verb clause is fairly common in spoken.
21491 	X	that would work if you substitute if for when but it wouldnt be as easy to look up nor as.
21492 	X	but consider how mangled this is.
21493 	X	set d to if c then a else set it to b.
21494 	X	which is why i like when.
21495 	X	it also has the same problem with seeming to assign d to something non.
21496 	X	well actually to a boolean value in this.
21497 	X	but the main thing i was trying to say is that i dont like the symbol based.
21498 	X	to me they really feel out of place in.
21499 	X	thats true of the c based syntax but also of the other symbol.
21500 	X	but im all for including the operator concept.
21501 	X	anansi spaceworks http www anansispaceworks com.
21502 	X	so why not just publish the results and leave it at that.
21503 	X	theres no need for you to be enforcing supermajorities of an arbitrary.
21504 	X	just collect the data and present them to.
21505 	X	the insistence of an arbitrary and enormous required supermajority hardly ameliorates.
21506 	X	i think its highly unlikely that a supermajority vote would pass based on the responses so far i certainly more than one in four people have declared their disinterest in a conditional operator.
21507 	X	i cant imagine that you wouldnt also already have this impression so your insistence on such an outrageously high supermajority feels like fixing the.
21508 	X	im not saying youre doing it deliberately or even that youre doing.
21509 	X	my gut reaction is that the declaration of the requirement of a supermajority and a threat behind the failure of a no confidence vote sounds heavy handed for someone not making the decision and someone who is already on record as not were in favor of the.
21510 	X	besides i dont think that clear majority in the wording of the pep need really literally represent an actual majority or supermajority in terms of raw.
21511 	X	all i suspect it means is that he really wants to judge where there are a lot of people want this feature and if so what they want the feature to look.
21512 	X	mind you he may have meant clear majority literally im not a mindreader but i dont think it needs to be interpreted that.
21513 	X	all the pep really gets at is that he wants to see what the community thinks and that hell consider that in judging if to approve the.
21514 	X	take the tally of people who want a conditional operator hand that data to guido let him interpret it how he wants.
21515 	X	if he concludes that it warrants approval then we can move on to the preferred syntax which is a complex issue since in a vacuum some choices might be preferred but are declared unacceptable by fiat perhaps something of the form of here are n different possibilities for the syntax choose one to three and rank.
21516 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote grab a club and join the chorus evolution is a state of mind oleta adams fauxident http www alcyone com pyos fauxident a faux ident daemon in.
21517 	X	committee when discussing new features the leaders called for non binding straw votes frequently to help move the discussion.
21518 	X	its a way to quickly table identifiable dead ends and help pare down otherwise impossible lists of.
21519 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
21520 	X	but as andrews example has so deftly shown the standard library authors have misused the.
21521 	X	now imagine that idiom in the hands of someone not as familiar with python as the standard library.
21522 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote ride ride this wave of mine res esperanto reference http www alcyone com max lang esperanto an esperanto reference for english.
21523 	X	maybe but i have never liked this sort of.
21524 	X	been there did that lived to regret it.
21525 	X	the general lack of ugly confusing tricks like this is what i most like about.
21526 	X	i did not mean to prove that the ternary operator is a bad feature because many people request it only that it should not be added for only that reason which was what was suggested in the post i responded to.
21527 	X	for the first expression id expected.
21528 	X	w and x and y else z.
21529 	X	that fails miserably for the second.
21530 	X	and both declaring it illegally or trying to interpret it as.
21531 	X	w and x and y else z else a.
21532 	X	glad not to be a language designer ly yrs.
21533 	X	christian tanzer tanzer at swing co at glasauergasse tel a vienna austria fax.
21534 	X	self stream writeln ran d in.
21535 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote i always entertain great.
21536 	X	robert frost get your own customized newsfeed online in realtime for free.
21537 	X	alex heh my favourite retort to this kind of extremism when i alex hear it applied to python is to feign agreement and then ask alex whether theyd prefer python to forbid x or x.
21538 	X	my actual retort was to say that we should remove addition entirely becuase we can always simulate it by using.
21539 	X	andrew koenig ark at research att com http www research att com info ark.
21540 	X	a little in joke for those of us who read n.
21541 	X	do not whatever you do bring r a i f m into this.
21542 	X	aahz aahz at pythoncraft com http www pythoncraft com.
21543 	X	register for pycon now http www python org pycon reg html.
21544 	X	if youre so dead set against roys argument please explain to us why you use python instead of.
21545 	X	aahz aahz at pythoncraft com http www pythoncraft com.
21546 	X	register for pycon now http www python org pycon reg html.
21547 	X	erik max francis max at alcyone com.
21548 	X	but as i said some constructs are an invitation for.
21549 	X	personally i found the way how approach and style of the various ioccc winners varied over the years quite entertaining and.
21550 	X	contrary to what you seem to believe its not just lart pour lart.
21551 	X	sometimes it exposes and pinpoints weaknessses of the language giving hints about what to look out for in real code and perhaps what to avoid in language.
21552 	X	wir danken fr die beachtung aller sicherheitsbestimmungen.
21553 	X	my question is why leave it half done.
21554 	X	why create a simple builtin function which doesnt do short circuiting and then resort to half baked hacks when you do need it when heres the chance to do it fully and have a sanctioned short circuiting ternary operator usable in all the cases the builtin would work and then.
21555 	X	one of the nicest aspects of python is its visual simplicity which makes it easy to.
21556 	X	baroque ornamentation is fine for buildings but not for programming.
21557 	X	i see very little need for list comprehensions if then else expressions.
21558 	X	a lambda x print x aahz aahz at pythoncraft com http www pythoncraft com.
21559 	X	register for pycon now http www python org pycon reg html.
21560 	X	mis at pitt edu michele simionato writes.
21561 	X	i really enjoyed your post about your girlfriends reactions to various constructs but i took it more as humor than as a serious attempt at a usability.
21562 	X	the problem with taking your sos reactions as a direction for language design is that we are not designing a natural lanuage but a programming.
21563 	X	i think theres a big difference between a naive programmer and a non programmer your girlfried probably also finds.
21564 	X	very readable though the is a mistake i know.
21565 	X	im hoping we wont see that added to pep.
21566 	X	theres no way id use my spouse as a language design.
21567 	X	sigmask py version feed this to your.
21568 	X	print reduce lambda xy x chr ord y ojdlwbshjti.
21569 	X	i have no objection to including dont cares in the voting process provided its included in a way such that everyone is satisfied with the.
21570 	X	i was simply pointing out that there are always an implied huge contingent of dont cares in any vote and so if you include a special abstain vote the question boils down to what that should mean in the final.
21571 	X	the real number of people who dont care will certainly be much greater than the number of abstain votes that get sent admittedly in many cases it might even be much greater than the total number of yes and no votes as would certainly be the case with usenet cfvs.
21572 	X	the dont care camp is going to get underrepresented in any vote so the question is what value or relevance should abstentions should have in the.
21573 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote nothing is so good it lasts eternally florence chess erik max francis bookmarks http www alcyone com max links a highly categorized list of web.
21574 	X	erik the combination of the punctuation and a keyword still gives me an.
21575 	X	i would hope the meaning is immediately.
21576 	X	andrew koenig ark at research att com http www research att com info ark.
21577 	X	no new keywords reuses existing concepts verbose and.
21578 	X	a little more typing never hurt.
21579 	X	makes it more natural to format and indent this across multiple.
21580 	X	reduces temptation to squash everything into one.
21581 	X	concept extends naturally to try except and other.
21582 	X	not sure if thats an advantage or.
21583 	X	short circuit behavior seems out of place in something that looks like a function.
21584 	X	i am still on the concept as a whole but if its done it should at least be done.
21585 	X	pro else is already used in various places even where a c programmer would not expect it for while.
21586 	X	con what is else exactly doing here.
21587 	X	at first glance it returns y if y is not false else z oops i just wrote guidos syntax but then it still fails if y is a function that returns.
21588 	X	so how should that be implemented.
21589 	X	i guess the parser would have to match the whole and else construct so or else would generate a syntaxerror.
21590 	X	i strongly dislike many of the other solutions.
21591 	X	for those who like that there is http www muppetlabs com breadbox bf wink.
21592 	X	i find guidos sugestion appealing but i share your concerns about silly if y if c else z but still its one of the best solutions if we need.
21593 	X	how do you explain what else exactly does here.
21594 	X	i agree that it is a good opportunity to learn about short circuiting with and and or as well as the non boolean outcome of these.
21595 	X	imho its definetly easy to read and would fit.
21596 	X	holger krekel pyth at devel trillke net wrote in news.
21597 	X	the immediate reaction to this is that it doesnt seem fair in cases like.
21598 	X	without the doubled parentheses it would be illegal.
21599 	X	if you want to special case that one then the grammar gets more complicated and eventually you start wondering why the parentheses should be required.
21600 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote whoever contends with the great sheds his own.
21601 	X	http www pollywannacracka com the internet resource for interracial.
21602 	X	youd be more disappointed if people actually wrote.
21603 	X	offhand at first glance i dont find.
21604 	X	at least the meaning of the latter follows directly from what pythons and and or mean in.
21605 	X	in that sense its an idiom much as.
21606 	X	is an idiom for finding the ceiling of n without using math ceil and int float.
21607 	X	python list at python org tim peters tim one at comcast net wrote answering somebody who noted the neat ability to have a trailing comma in lists.
21608 	X	python is one of the few languages i know that permits an extra comma at the end of lists and.
21609 	X	i use this all the time for essentially the same reasons you.
21610 	X	i can safely add or delete items without worrying about the last one were.
21611 	X	regarding functions i often use the following syntax especially if the function has some default args.
21612 	X	def myfunc arg arg arg def.
21613 	X	theres one thing to watch out for a argument cannot have any arguments after it so i end up doing def myfunc arg arg kargs.
21614 	X	and why cant a function be called with multiple marked lists and or marked dictionaries e g foo arg arglist arglist.
21615 	X	i realize that calling a function with and args was added to mimic its use in function definitions for which the only one of each restriction makes.
21616 	X	for dictionaries one would have to define what happens if the same key was in both dictionaries though that same issue comes up if kargs contains a key thats already been explicitly listed.
21617 	X	in article beq ld at slb atl mindspring net.
21618 	X	the question in these cases is not whether these people would find the correct construction obviously they wouldnt else they would use it in place of the.
21619 	X	the question is without the ternary what even worse construction would they use instead.
21620 	X	btw i think your estimate of a correct use per lines sounds about.
21621 	X	which is one reason i dont feel very strongly about this.
21622 	X	david eppstein uc irvine of information computer science eppstein at ics uci edu http www ics uci edu eppstein.
21623 	X	i am so keen on having a ternary operator in python that i would probably vote yes on any proposal that was.
21624 	X	if test x a else x b.
21625 	X	not because it is longer than.
21626 	X	but because i think the intent of the code is much more clear if one says x is the result of this computation depending on test than if one says if test is true evaluate this body of code otherwise evaluate this other body and by the way they both happen to assign a value to x.
21627 	X	my appreciation for the former comes partly from using languages like lisp where there is no distinction between statements and expressions and partly from using functional languages where you really do have to decide what x is going to be all in one fell.
21628 	X	i find that putting the logic for computing x in one place leads to fewer errors for one thing you dont have to type x twice.
21629 	X	ok so i would probably vote yes on almost any proposal but seriously this one seems fine to.
21630 	X	the order of operands seemed weird at first but i kind of like the fact that when youre reading the code a if test else b reads like a noun because the first thing you encounter is a rather than the.
21631 	X	that is much more englishy to me than encountering the condition.
21632 	X	i dont worry so much about the way this can be abused by putting in the middle of other expressions as in guidos.
21633 	X	there are plenty of language constructs that you can abuse if you try hard enough even in.
21634 	X	gvr given that if then else expressions keep were requested i hereby put gvr forward a.
21635 	X	i am neutral on acceptance of the proposal id gvr like the c l py community to accept or reject it or come up with a gvr counter.
21636 	X	please understand that i dont have a lot of time gvr to moderate the discussion ill just wait for the community to gvr discuss the proposal and agree on some way to count votes then count gvr.
21637 	X	i think the if then else expression are really.
21638 	X	all the proposed alternatives are ugly and python should discourage ugliness this is one of its major features.
21639 	X	gvr the proposed syntax is as follows.
21640 	X	gvr if we could live with adding a new keyword we could use.
21641 	X	gvr if condition then expression else expression.
21642 	X	if we take instead of then then we dont need a new.
21643 	X	the combination is illegal in current.
21644 	X	so the construction would be if condition expression else expression.
21645 	X	gvr apart from the problem of introducing a new keyword for a minor gvr feature this also suffers from ambiguity at the start of a gvr statement for example.
21646 	X	gvr if verbose then sys stdout write hello n else none.
21647 	X	gvr could be an syntactically correct expression statement but starts gvr with if which makes the parser believe it is the start of an gvr if.
21648 	X	to resolve this the syntax would have to require gvr parentheses which makes it.
21649 	X	the ambiguity can be resolved by making some changes to the grammar no language change other than the if expression.
21650 	X	first split expr stmt into and the second does start with.
21651 	X	this requires a few other nonterminals also to be.
21652 	X	then merge the ifexpr stmt with if stmt substitute some nonterminals and factor out the if test.
21653 	X	here is a first try of the affected grammar rules.
21654 	X	expr stmt niftestlist augassign testlist testlist.
21655 	X	test niftest iftest iftest if test or test else or test.
21656 	X	or test and test or and test.
21657 	X	testlist niftestlist iftestlist iftestlist iftest test.
21658 	X	piet van oostrum piet at cs uu nl private email p van oostrum at hccnet nl.
21659 	X	and id argue that anything more complex that this belongs in a statment with blocks and all that.
21660 	X	on fri feb erik max francis max at alcyone com.
21661 	X	i actually kind of agree with you that x if c then y seems a little odd even now that ive got used to it a bit.
21662 	X	but i dont really agree with you on.
21663 	X	you seem to be preoccupied with the order of evaluation the fact that the condition must be evaluated first whereas only one of the values to select from is evaluated at.
21664 	X	i have more of a functional view of.
21665 	X	in general i think i shouldnt need to worry about the order of evaluation only about the meaning and the.
21666 	X	in expressions evaluation order only makes a difference to the meaning if there are side effects except in that lazy evaluation can ignore subexpressions which are not needed but which might otherwise trigger errors.
21667 	X	having functions with side effects is often considered bad style partly for this exact.
21668 	X	in c im quite happy to write functions whose whole purpose is in the side effects but which return a success flag and then ill use short circuit and operators to run a whole sequence up to the first one that.
21669 	X	its a useful trick it works and if the functions are well named it causes no.
21670 	X	but it is also the exception rather than the.
21671 	X	algebra has rules of commutativity and.
21672 	X	in general i expect expressions to behave the same way especially in higher level.
21673 	X	the end result is always the one immediately left of the first condition to pass assuming an implicit always passes condition after the final else value.
21674 	X	if evaluation order is more important to you of course im unlikely to convince you this is also probably why im happy to see lazy evaluation with the same old function call notation while you are not which means my previous post on that missed the point a.
21675 	X	i hope the why is now a little clearer but it isnt really that big a.
21676 	X	ive read a lot of syntax proposals but i dont think i read any that discussed their readability when extended to select from three or more.
21677 	X	ive raised the subject which i thought was worth.
21678 	X	actually my first choice would probably still be the function call syntax even though it would need obvious nesting to select from three or more.
21679 	X	i suspect that could fit both of our mindsets the syntax makes it clear its not a conventional function call the lexical order matches the evaluation order for items that are evaluated it grows in a clear way and its.
21680 	X	the colons would seem daft to me if it only selected from two values but they would vastly improve readability when selecting from three or more values as they clearly indicate the pairing between conditions and values in much the same way as the pairing of keys and values in a.
21681 	X	it probably needs a tweak or two im not sure if the leading if keyword would cause problems in the python grammar for example but i think it has some.
21682 	X	of course i reserve the right to change my mind theres certainly plenty of ideas to choose from in this little brainstorming session.
21683 	X	steve at ninereeds dot fsnet dot co dot uk.
21684 	X	jamie little annoyances like that add up and make code harder to jamie.
21685 	X	i like the fact that python keeps things simple and jamie consistent and im perfectly happy to trade the conciseness jamie offered by this proposed syntax for the clarity of doing it jamie the long way.
21686 	X	jamie big long complicated expression jamie.
21687 	X	the trouble is that there are contexts such as function arguments in which one would like to use this form but its not.
21688 	X	for example suppose ints is a list of numbers and we want to create a list of strings each of which represents the value of the corresponding number except that if the number is negative we would like the string to be.
21689 	X	some people would write something like this.
21690 	X	but others including me would like to be able to write this.
21691 	X	i find this example easier to understand than the previous.
21692 	X	i think that if you like list comprehensions and lambda expressions youll probably like pep if you dont you probably.
21693 	X	andrew koenig ark at research att com http www research att com info ark.
21694 	X	and i did point out that it could be written as a one liner in existing python as in.
21695 	X	print roots are imaginary duplicate real cmp decr.
21696 	X	btw i think the word i should have used is singular and not.
21697 	X	i left the c c perl world which had a ternary some years.
21698 	X	i remember mis using the ternary operator a.
21699 	X	ive become a better developer since then and its hard to determine now if my misuses were because of my inexperience or because of intrinsic tendency to misuse that.
21700 	X	as i mentioned elsewhere ive scanned the linux kernel for use of the.
21701 	X	it isnt used all that often and most cases can be implemented in python with the false true expr comparison value construct or with the x y or default value.
21702 	X	i would rather see some better examples of when people would like to use the if else.
21703 	X	people have pointed out that it can do short circuiting but in the real life uses i saw in the kernel it didnt make a different if there was short circuiting or.
21704 	X	though i still recall why i reacted against list.
21705 	X	all of the syntaxes proposed in the pep look pretty horrible to.
21706 	X	the expression if stuff is just plain.
21707 	X	if i wanted stuff like that id be writing in.
21708 	X	ive been using python for about years.
21709 	X	i must admit that at first i missed the but over the years my desire for it has.
21710 	X	i still think id like to see something with that functionality in the language but not at the cost of any of the aberations proposed in the.
21711 	X	of the suggestions in the pep the function call x ifelse cond exp exp seems the least.
21712 	X	it does suffer from the lack of short circuit behavior but most of the time you can live with.
21713 	X	in article yunlqf fsf at europa research att com.
21714 	X	thats half true in the context of this.
21715 	X	adding an extra step to explain why.
21716 	X	works is going to be a lot more difficult.
21717 	X	aahz aahz at pythoncraft com http www pythoncraft com.
21718 	X	register for pycon now http www python org pycon reg html.
21719 	X	paul moore gustav at morpheus demon co uk wrote in message news yqpfuv fsf at morpheus demon co.
21720 	X	print sqrt x if x else imaginary roots.
21721 	X	it could easily be written with if statements so it doesnt fit the telling needs.
21722 	X	however for me this is the crux of the.
21723 	X	short circuiting pretty much has to be the justification for implementing this pep because if you dont need short circuiting you can write a trivial three line iff.
21724 	X	but then if short circuiting is the main reason then i think id rather open up the general idea of how to implement lazy evaulation in a pythonic.
21725 	X	though for the purposes of the pep an analogy to regular expression syntax is not much better than an analogy to c syntax neither is perspicuous to the.
21726 	X	a little web research details below finds for alternation attested from about at which time it appears both in ken thompson and dennis ritchies language b and in thompsons implementation of regular expressions for the ctss version of the qed editor which afaik was the first such implementation.
21727 	X	so it seems you are right to suspect that the notation pre dates c though not by much if these are in fact its earliest uses.
21728 	X	the origin of regular expressions in mathematics is afaik a paper by stephen.
21729 	X	i dont have a copy of this paper on hand but i think he used a u b for alternation because he was constructing sets of.
21730 	X	incidentally as a logical operator in mathematics is afaik never alternation but always alternative denial p q not p and q not p or not q.
21731 	X	i think this notation dates from at least the s and it might even occur in russell and whiteheads principia.
21732 	X	for alternation might well be thompson and or ritchies.
21733 	X	thompsons ctss port of qed was among the first things he did on arriving at bell labs qed.
21734 	X	he arrived there in ktbio his paper on the regular expression algorithm was published in mid cacm.
21735 	X	ritchie describes as one of the classical set of operators concatenation grouping for parentheses qed implying its use in the syntax of thompsons original.
21736 	X	these operators are now visible too in modern bcpl and almost certainly were adopted very soon into barely past bcpl bcpl.
21737 	X	references bcpl http cm bell labs com cm cs who dmr bcpl html chist http cm bell labs com cm cs who dmr chist html qed http cm bell labs com cm cs who dmr qed html ktbio http www bell labs com history unix thompsonbio html.
21738 	X	note that im relying entirely on ritchies accounts except for the question of when thompson arrived at bell.
21739 	X	even computer staschuk at telusplanet net cannot determine.
21740 	X	in article ebf at news bluewin ch.
21741 	X	at a minimum after the voting procedure is agreed.
21742 	X	btw please do not cc posts by e.
21743 	X	aahz aahz at pythoncraft com http www pythoncraft com.
21744 	X	register for pycon now http www python org pycon reg html.
21745 	X	i just gave up discussing short circuiting evaluation and there we go.
21746 	X	the two blocks of code are not equivalent change z for an expression with some side effect for example a function call and then the results will be completely.
21747 	X	disclaimer im not saying that short circuiting is.
21748 	X	im saying that the ternary operator uses short circuiting evaluation by definition.
21749 	X	im aware that short circuiting may lead to some weird programming practices and that it is not recommended by some.
21750 	X	carlos ribeiro cribeiro at mail inet com br.
21751 	X	in article bqth f at slb atl mindspring net.
21752 	X	turn it around a little and both versions become a little clearer.
21753 	X	customer if spam not in s else vikings if eggs in s else waitress.
21754 	X	if spam not in s t customer elif eggs in s t vikings else t waitress.
21755 	X	but really the reason for the unreadability of all of these forms is that they make no sense theyre built up of seemingly random strings with no obvious logical relation between the input and the.
21756 	X	i think it makes more sense to judge this proposal by looking at real code that might use it than by making up code like pieces of.
21757 	X	david eppstein uc irvine of information computer science eppstein at ics uci edu http www ics uci edu eppstein.
21758 	X	how about a computational strategy instead of a lookup.
21759 	X	whether pointing to corner def wing wingx wingy if diagonal wingx x wingx wingy y wingy addpoint wingx wingy addpoint x y wing y x left wing wing y x right wing return polyline.
21760 	X	steven taschuk the world will end if you get this.
21761 	X	staschuk at telusplanet net brian kernighan and lorrinda cherry typesetting mathematics users guide.
21762 	X	james j besemer jb at cascade sys com wrote in message news.
21763 	X	i dont want to overload if since the typical situations where i would like to use the ternary operator are in nested if expressions or in listcomp with if.
21764 	X	having a new keyword like when would help.
21765 	X	files f for f in os listdir mydir if if issource f endswith py else true.
21766 	X	to retrieve all the files or only the source files this is a real case life where i would like to use the ternary operator but not in this form.
21767 	X	after some consideration after email from ian bicking ive decided that my position was a bit too.
21768 	X	i looked through a non trivial chunk of the uses of in the linux kernel and decided that that construct is not often.
21769 	X	i still point out that the examples i gave can be written in the same number of lines and fewer characters using existing python constructs like print imaginary duplicate real cmp descr.
21770 	X	my scan of the linux source suggests that most uses of.
21771 	X	are of this sort eg mode wanted.
21772 	X	en dis could be written in python as en dis mode wanted.
21773 	X	sf setuid sf setgid as mount opts sf setgid sf setuid bool f.
21774 	X	and iov iov base param null.
21775 	X	padding param as iov iov base param or padding.
21776 	X	are to prevent having to create a temporary variable and not to save evaluating both sides of the.
21777 	X	i still think its easier for people to learn how the code flow works with if else statements because its easy to stick in a print statement on the different.
21778 	X	one other thing i came up.
21779 	X	x none if s find spam x eggs.
21780 	X	i do this because it guarantees that no matter what happens in the if statement the x will be.
21781 	X	thats handy in more complicated if.
21782 	X	take away the newlines and replace the x with else.
21783 	X	x none if s find spam else eggs.
21784 	X	i wonder how many times people will make that mistake.
21785 	X	presumably the alternate syntax is to allow lazy evaluation of the.
21786 	X	how about a way to specify a default value in the cases which you dont wish to or cant fully enumerate int for instance.
21787 	X	all thats missing here is the short circuiting which can of course be done with lambda but then we lose the consiseness.
21788 	X	were talking about a bug that someone introduce because they trusted a conditional operator like idiom too.
21789 	X	the point here is that this validates what andrew and others including myself have been saying all along people want a conditional operator bad enough that they use pale comparisons and those comparisons have.
21790 	X	people who use the c and x or y idiom may do so without understanding those limitations and that will lead to.
21791 	X	here he has proof of this not just theoretically not just in random code in the world but in the standard library itself.
21792 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote ride ride this wave of mine res esperanto reference http www alcyone com max lang esperanto an esperanto reference for english.
21793 	X	in article yukcooli fsf at europa research att com.
21794 	X	you obviously havent used the interactive interpreter.
21795 	X	aahz aahz at pythoncraft com http www pythoncraft com.
21796 	X	register for pycon now http www python org pycon reg html.
21797 	X	form is declared unusable by fiat and i must say i agree it overloads the use of the colon too much it seems only reasonable that the two intervening things in the ternary conditional operator be keywords and both be.
21798 	X	having one a symbol whether already used in the language or not and the other a keyword whether already used or not seems.
21799 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote always forgive your enemies nothing annoys them so.
21800 	X	oscar wilde bosskey net quake iii arena http www bosskey net qa a personal guide to quake iii.
21801 	X	yes and its not in the.
21802 	X	the pep as it stands is awful its uglier than.
21803 	X	the idea in itself scares me and the syntax bah no comment.
21804 	X	in article mznorztd fsf at mycroft actrix gen nz.
21805 	X	if youre going to do something like this double vertical bar might be better for expressing the disjunctive nature of the expression while having some visual similarity to hoares csp.
21806 	X	also while hoare used square brackets i think that would be a mistake here just use parens dont make them part of the notation but set precedence of the operators low enough that theyd be necessary in most contexts.
21807 	X	id vote against this anyway by the way from an elegance of design point of view i like csp but from a readability point of view i dont think it.
21808 	X	david eppstein uc irvine of information computer science eppstein at ics uci edu http www ics uci edu eppstein.
21809 	X	ive had to use vbasic to work on some stuff and it has an iff function kinda like your.
21810 	X	the reason its useless is because it doesnt short.
21811 	X	so your example above in vb would be.
21812 	X	would fail miserably because x y would be evaluated even if y which is not aparent upon reading the function.
21813 	X	just guessing but ill bet that in most cases it was written like.
21814 	X	if so it can be replaced with a dict lookup as in.
21815 	X	color name red roja blue azul green verde black negro get color no s.
21816 	X	if so this could be rewritten as.
21817 	X	size xx large for threshold name in small medium large x large if val threshold size name else these two lines optional but faster break.
21818 	X	or the more ugly but faster for long lists.
21819 	X	the trinary expression is ill grant you easier to.
21820 	X	however it isnt data oriented its control.
21821 	X	in most cases youll need to read those values from a file or other.
21822 	X	yes that trinary tree can be more.
21823 	X	but in that case debugging the trinary tree means breaking it down to look at the parts as compared to statements which would let you insert print statements very.
21824 	X	jcm what happens if f x is evaluated if e x is false.
21825 	X	what happens is that your program is.
21826 	X	andrew koenig ark at research att com http www research att com info ark.
21827 	X	holger i think its insane to make up such special cases just to get holger some syntax.
21828 	X	please see my message elsewhere in this thread proposing specific grammar.
21829 	X	andrew koenig ark at research att com http www research att com info ark.
21830 	X	i took this post and tweaked the idea and misattributed the source to paul moore i now.
21831 	X	i knew you were the lisp guy somehow i just transposed the last names.
21832 	X	btw the tweak is to drop the brackets and substitute in place of as in log info ok success.
21833 	X	print auto colorizing turned self allow colorizing on true off.
21834 	X	then also allowing a trailing true to be dropped so it looks like log info ok success.
21835 	X	print auto colorizing turned self allow colorizing on off.
21836 	X	now also extended with holger krekels idea of catching exceptions.
21837 	X	cond val cond val c v.
21838 	X	if e or e is raised during processing of the first part the exception is caught and the associated value becomes the whole expression.
21839 	X	as it was indented to be.
21840 	X	well the difference is of course quite big to.
21841 	X	a when b else c when d else.
21842 	X	a where b else c where d else.
21843 	X	all in favor over re using a strong if.
21844 	X	if is used to be too much right.
21845 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
21846 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
21847 	X	roy if else pass isnt required in the statement why should roy else none be required in the expression.
21848 	X	because pass is obviously the only sensible default behavior for statements but none is not obviously the only sensible default value for conditional.
21849 	X	andrew koenig ark at research att com http www research att com info ark.
21850 	X	in article bin kv at wheel two net.
21851 	X	well yeah but youre also one of the primary whiners about the lack of.
21852 	X	aahz aahz at pythoncraft com http www pythoncraft com.
21853 	X	register for pycon now http www python org pycon reg html.
21854 	X	in article yuwukazt fsf at europa research att com.
21855 	X	ternary operator reduces pythons simplicity and therefore a certain amount of.
21856 	X	listcomps fit practicality beats purity but i just dont see that in the aggregate for.
21857 	X	aahz aahz at pythoncraft com http www pythoncraft com.
21858 	X	register for pycon now http www python org pycon reg html.
21859 	X	rich harkins rich at worldsinfinite com wrote in message news.
21860 	X	python list at python responses indications made which hand or.
21861 	X	it took me awhile to see that this actually works as.
21862 	X	i might actually like it better than the if else.
21863 	X	much indicating as get any and or thought even.
21864 	X	not only do i not believe that it is not better i believe that it is.
21865 	X	it is more idiomatic and less.
21866 	X	people already have the actually correct idioms like.
21867 	X	c and x or y c and lambda x or lambda y.
21868 	X	as far as i know nobody considers those good solutions they are totally incomprehensible unless you already understand the whole sordid issue with the and or syntax and why it doesnt.
21869 	X	the purpose of a conditional operator is for it to be.
21870 	X	your solution is going from a broken and unreadable idiom and attempting to make it.
21871 	X	that is totally the wrong approach of good language design you may make it unbroken but its damn sure still.
21872 	X	youre talking about assume youre familiar with the old idiom as if that were a positive.
21873 	X	nobody likes the old idiom thats the whole point.
21874 	X	its unreadable and lends no hint as to what is meant by.
21875 	X	so can you rigorously define the behavior of an expression with markers in the general case.
21876 	X	can you even rigorously define it here.
21877 	X	what happens when it appears somewhere other than one of the operands to a logical operator what then.
21878 	X	can you even fully define its semantics.
21879 	X	youre patching up a broken ugly idiom with a complicated hard to explain syntax that will only make the broken idiom more.
21880 	X	it makes it no longer broken but it makes it less.
21881 	X	its clear and easily understandable even to someone whos never seen it.
21882 	X	its light years ahead of any solution ive seen based on patching up the unreadable and or.
21883 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote i always entertain great.
21884 	X	robert frost a personal guide to online multiplayer first person.
21885 	X	almost but not quite what i wanted to.
21886 	X	x if c else y parentheses are required.
21887 	X	this is identical to the format proposed in pep with the exception that parentheses are required around the ternary.
21888 	X	it is reminiscent of list comprehension.
21889 	X	alex martellis suggestion is even more so of course but i think it has the potential to cause.
21890 	X	we have x for x in l syntax for list comprehensions something similar using for dictionary.
21891 	X	the syntax is virtually the same as that proposed in pep which i consider to be pretty pythonic its easily understood in one reading and pretty much.
21892 	X	this syntax is even more easy to read imho than the pep syntax the required parentheses automatically mark it off as a single.
21893 	X	if this is adopted the question then arises of what do with statements like the following.
21894 	X	the first is a natural extension of the required parentheses rule but the second reads more like a single switch like.
21895 	X	even if this proposal is not accepted but pep is i will still write all my ternary conditionals with parentheses around them i believe that good style will demand.
21896 	X	robin munn rmunn at pobox com http www rmunn com pgp key id xafb ff cffb a f d acfd afb.
21897 	X	guido van rossum guido at python org ha scritto nel messaggio news.
21898 	X	i hope at least in a.
21899 	X	ye if is mixed alpha non alpha chars then what better than imo.
21900 	X	yknow when i finished my first python script i sent it to my tutor and asked so whats the secret master pythonista way of doing this.
21901 	X	his response is etched in my mind python isnt about taking lines of perfectly clear code and collapsing it down into line of obscure.
21902 	X	and that keeps coming to mind as im reading all these ternary operator syntax most of them to my newbie eyes are simply confusing and seem to fly in the face of what i keep hearing python is.
21903 	X	maybe im just were dense but i havent seen any that are terribly clear the worst ones make me want to pull out a pencil and paper and sit down with the docs in front of me to try and figure out what the heck its supposed to do.
21904 	X	which seems really odd for code thats supposed to be easily.
21905 	X	anna whatever it is im against.
21906 	X	sheila king usenet at thinkspot net pisze.
21907 	X	i think that more natural would be when cond expr then true expr else false expr or am i dumb t sql programmer im recalling the case when cond then expr else expr syntax of transact sql.
21908 	X	jarek zgoda http www zgoda biz jid jarek at jabberpl org.
21909 	X	those of us who dislike it dont want to read code with it which will almost certainly happen if.
21910 	X	heres an excellent post by mark lutz from python.
21911 	X	mark spends much of his time teaching python so hes in a good position to evaluate how new features impact the ease of learning and using the language.
21912 	X	aahz aahz at pythoncraft com http www pythoncraft com.
21913 	X	register for pycon now http www python org pycon reg html.
21914 	X	it sounds absolutely nice much nicer than an if in the same.
21915 	X	dunno why probably just my years of were used to if were in.
21916 	X	maybe sometimes a new keyword hurts much less than imposing a new meaning to an existing.
21917 	X	when is pretty ly yrs chris.
21918 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
21919 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
21920 	X	andrew koenig ark at research att com ha scritto nel messaggio news yuvfzsqtn fsf at europa research att.
21921 	X	honestly please you have already found a bug declare victory and.
21922 	X	so assuming you dont want to do internationalization you could also do this example with.
21923 	X	though i would have more likely have had something like.
21924 	X	irregular person people mouse mice self plural dict from keys sheep fish split.
21925 	X	def pluralize noun count if count or noun in self plural return noun if noun in irregular return irregular noun if noun in sz return noun es if noun y return noun ies return noun s.
21926 	X	in most of those cases the construct is.
21927 	X	which is better imho written as.
21928 	X	a red blue green color or a red blue get color green if you dont care about error checking note that the original trinary expression doesnt care about error checking.
21929 	X	i was only somewhat joking above with the minor points.
21930 	X	my feeling about the trinary operator is that yes there are a few places where it fits.
21931 	X	however people using it have a c background and may ignore the possible solutions available in python like a false true bool expr and a x or none or a k v k v k v key.
21932 	X	the ternary expression should not be nested because it gets too confusing too.
21933 	X	however its the reading which is the confusing part writing these nested expressions is really.
21934 	X	people like me when i was younger will write multiple lines of ternary code making cute but hard to understand code.
21935 	X	it is harder to understand and debug because an if else also makes it easy to add print statements or other sorts of tracing to see whats going on at a given step.
21936 	X	the justification on the basis of short circuiting is not that strong because most real life uses of.
21937 	X	do not depend on short circuiting other than for slight trivial.
21938 	X	in recent python dev threads guido said something like never mind what i said about lambdas in the past.
21939 	X	the topic du jour was how to support timely.
21940 	X	gareth mccaughan at g local gareth mccaughan im not claiming that adding any particular scheme addition is doing.
21941 	X	i claim that those who base their arguments on teachability to non programmers may be doing.
21942 	X	many dont like lambda map etc because they are hard to teach understand the argument is then made that such constructs should be deprecated and finally removed despite the fact that they are useful in some.
21943 	X	well then youre going to get seriously fragmented results some people will send their votes to only a subset of the votetakers.
21944 	X	i agree that would be acceptable.
21945 	X	i dont think such an circuitous procedure is necessary at all if anything it is just going to turn off more voters who wont think the extra work is worth the effort.
21946 	X	as long as as ive said before the full results of the everyones vote is disclosed at the close of voting this isnt a secret ballot after all but people shouldnt see each others votes while the vote is in progress i dont see a big problem so long as everybody agrees on the process.
21947 	X	and the process is what is were discussed.
21948 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote you cannot step into the same river.
21949 	X	cratylus python chess module http www alcyone com pyos chess a chess game adjudicator in.
21950 	X	erik max francis max at alcyone com writes.
21951 	X	to look at the same problem another way you could write.
21952 	X	def quantify noun count if count return noun else return noun s.
21953 	X	print i have d s count quantify noun count.
21954 	X	which to my mind is even more clear especially if you put a little more effort into naming the quantify function than i did.
21955 	X	it also has some other advantages.
21956 	X	if you need to change the rules you only have one place to.
21957 	X	with this example theres the obvious case of internationalisation where you might need to do.
21958 	X	if and when you do change it you dont hit problems if the change doesnt conform to the pattern of simply changing or adding a.
21959 	X	if i as feeling pedantic i could argue that not having a conditional expression is good because it avoids you getting sucked into writing code with maintenance issues like of course you cant make people write good code someone who misses conditional expressions is more likely to just write something like.
21960 	X	s s if count s print i have d s s count noun s.
21961 	X	and complain that it would have been much simpler with a conditional expression.
21962 	X	or to put it another way not having conditional expressions makes you think about how to overcome the.
21963 	X	and anything that makes you think about the best way to code something cant be all.
21964 	X	paul this signature intentionally left blank.
21965 	X	i was sort of ambivalent about this until i saw the examples section.
21966 	X	this is utterly nasty and painful on the eyes and brain to read and.
21967 	X	i like the fact that python doesnt have different ways to spell if like another p language.
21968 	X	the trailing unless clause was actually one of the things that drove me away from perl and this proposed addition to the language really brings up unpleasant.
21969 	X	ive been programming in python now for something around years and i can honestly say ive never said gee i wish python had a ternary operator.
21970 	X	sure it might produce more compact code but in this case its clearly at the expense of.
21971 	X	anthony baxter anthony at interlink com au its never too late to have a happy.
21972 	X	is a good idea as long as the code snippet is actually reusable and has a meaning on its.
21973 	X	there are several cases where the code isnt going to be reused its going to be called from a single location and where the full understanding of its meaning depends on the context from where it is.
21974 	X	in this case its not modularization but code shuffling in analogy to shuffling a deck of cards.
21975 	X	carlos ribeiro cribeiro at mail inet com br.
21976 	X	also i think this would also be very confusing to new.
21977 	X	would be illegal it certainly is now anyway.
21978 	X	so to implement this would require changing the fact that if blocks are not.
21979 	X	the whole point of a ternary operator is to save you extra.
21980 	X	this just seems to take everything youd typically write and squish it into one.
21981 	X	i think the problem is not so much the compound as pythons idiosyncratic definitions of and and or themselves as useful as they occasionally.
21982 	X	there is also an or and version not a or b and c with a different failure case see pep pythons conditional selection operators which i just posted this.
21983 	X	while i am personally comforatable with using them i understand that other are not and that they are cryptic to anyone who has not read the and or definitions at least three.
21984 	X	so i am willing to vote for and switch to something else that is not substantially.
21985 	X	if i may be so bold dullness and strict conciseness objections miss the.
21986 	X	the goal of a pythonic conditional operator is one that exhibits short circuiting behavior is readable and is hopefully fairly.
21987 	X	i dont care whether the syntax bores me stiff as long as its.
21988 	X	im not looking for novelty im looking for.
21989 	X	furthermore the goal isnt strictly to get a form that is as short as absolutely possible the goal is to get something readable in an.
21990 	X	the main issue with the x if c else y form which im neutral toward is that it reads in an unexpected order its middle left right instead of strictly left to right and that is from my experience the biggest objection to it that is raised in the threads and which i agree with.
21991 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote the average dog is a nicer person than the average.
21992 	X	andrew a rooney python chess module http www alcyone com pyos chess a chess game adjudicator in.
21993 	X	donald mccarthy paddy at tiscali co uk writes.
21994 	X	so an if to the right of an equals sign is the ternary.
21995 	X	but a large part of the time i would use a ternary operator it wouldnt be to the right of an equals sign it would be in an argument.
21996 	X	here is a recap of the discussion over the last few days.
21997 	X	someone re proposed c a else b.
21998 	X	the rationale is that the is a better marker than then and is suggestive enough to not need a leading if.
21999 	X	it doesnt require a new keyword and does not overload the.
22000 	X	no one shot this down but it didnt generate strong support.
22001 	X	there was an interesting but fruitless discussion on how c then a else b could be implemented as a pair of binary operators which could also have standalone.
22002 	X	there was a rapidly shot down idea to use bool choose a b where choose was a special method that could somehow implement lazy evaluation of its.
22003 	X	there have only been a few hours for.
22004 	X	though the visual cues are there my first thought is that the colon usage is likely to confuse anyone already exposed to the ca b form in other languages where the colon separates the alteratives rather than the condition and.
22005 	X	here is a recap of the results of everyones ad hoc non scientific usability tests on their friends relatives and employees.
22006 	X	in general all of the forms were decipherable by people who already knew.
22007 	X	the ca b form was understandable to people familiar with other.
22008 	X	with a single example others were able to understand the form and found it easy to.
22009 	X	the surprise was that the n ary form using parens for sub expressions managed to confuse even non.
22010 	X	a possible cause is that the grouping and precedence cues for parentheses do not mix well with the concepts of grouping by ternary operator and of short circuit.
22011 	X	the if c a else b form stumped some of the.
22012 	X	in some experiments this was especially surprising because they had just seen one of the other forms and had some expectation of what it was supposed to.
22013 	X	the root problem appears to be the blurring of the line between statements and expressions where the keyword and colon cues proved.
22014 	X	on the plus side everyone who understood the ternary version had no problem with the n ary.
22015 	X	the c then a else b form was understood by most though a few thought it looked unnatural in longer.
22016 	X	there were some who understood it but could not make the jump to the n ary form using the elif keyword.
22017 	X	it appears that the colons help to visually parse the n ary.
22018 	X	since thread activity has dropped considerably voting will take place soon but not earlier than.
22019 	X	i think theres a silent group of people who would agree with most if not all the points.
22020 	X	the ones above are just the ones i agree with.
22021 	X	i do program in c although i avoid it whenever possible now that i have python as things like multi line ternary operators make my eyes.
22022 	X	it might be possible to obtain the effects of the proposed expression in a more general way by extending the semantics of the following existing construct.
22023 	X	the above expression provides the string html or text depending upon the return value of the function is html.
22024 	X	if a special case were to be recognized by the parser that of a tuple literal followed immediately by an index selector then only the tuple item selected by the calculation of the index would need to be actually calculated a form of lazy evaluation as in the following example.
22025 	X	calc value r calc value r calc value r index val x.
22026 	X	the selector index val x would be computed first then depending upon the value of the index the appropriate calc value or would be the only calc value to be computed as the value of the.
22027 	X	such an approach might present difficulties in parsing but it might have the advantage of were more general.
22028 	X	extending to more than two possible selections and more.
22029 	X	there would be a risk of breaking some current code that depends upon such a construction and also depends upon side effects depending upon executing all of the various functions calc value however i suspect that few programmers would intentionally write such.
22030 	X	dale strickland clark riverhall systems ltd.
22031 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
22032 	X	there was a cartoon called hong kong fooey dunno whether andrew was aware of the provenance of pfui but his return was pretty.
22033 	X	aahz aahz at pythoncraft com http www pythoncraft com.
22034 	X	register for pycon now http www python org pycon reg html.
22035 	X	that proves not to be the case.
22036 	X	over a couple decades writing in languages with the ternary operator i have found that conversions are as rare as you imagine for loop to list comprehension rewrites to.
22037 	X	in the short run i wouldnt be surprised to see a considerable amount of rewriting just as i rewrote quite a few for loops into list comprehensions as i was getting to know the.
22038 	X	of course there will be mistakes made during any such process thats learning taking.
22039 	X	since ive just now discovered the reason theres been so much traffic here today ill say only that i think andrews is about.
22040 	X	i may increase that after ive had the time to see how it looks in actual code im pretty sure i know where to find some recent code for which i was wishing for a ternary.
22041 	X	it seems to me were getting very close to lets take some arbitrary code and turn it into an expression which is essentially what a lambda.
22042 	X	im not particularly fond of lambdas but given that we have them i dont really see the point of having two versions of.
22043 	X	i guess deep down my real objection to all this is that it blurs the line between statements and.
22044 	X	in some languages lisp for example there is no such distinction and everything returns a.
22045 	X	but in python there is a.
22046 	X	so is if a statement or an expression.
22047 	X	with this pep the answer becomes it depends which i think is a bad.
22048 	X	i didnt think so thats why theres also extra horizontal whitespace in the above to put the pieces that group together closer to each.
22049 	X	either could be improved by dropping the outermost parens although experience with perl gives me a confusing impression then too because of the if near the end of a line.
22050 	X	id agree on syntactic support for decision tables with due optimization of course but not for individual.
22051 	X	things in whatever form they are.
22052 	X	if python had lazy execution we could have a function.
22053 	X	and expr or expr evaluated only after.
22054 	X	iif x y x y y x.
22055 	X	where mark lazily on demand executed things.
22056 	X	but this yet again are code the thunks python dev is unhappy about.
22057 	X	sincerely yours roman suzi rnd at onego ru my ai powered by linux redhat.
22058 	X	what happens if f x is evaluated if e x is false.
22059 	X	obj and obj method and yes else no.
22060 	X	you cannot be minimalistic and requiring a huge look ahead at the same time.
22061 	X	be careful not to break the thin ice of agreement that you.
22062 	X	introducing complexity through a backdoor might kill your nice approach.
22063 	X	lets talk about that on the.
22064 	X	ternary operators are insane at all so we have to make them as simple as possible b n s ly yrs chris.
22065 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
22066 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
22067 	X	im okay with this syntax provided x then y else z is unacceptable however i am a bit confused by the.
22068 	X	in particular i dont quite get else y is the result.
22069 	X	wouldnt you want z to be the result when x is false.
22070 	X	could someone explain exactly how and why this proposal works.
22071 	X	erik max francis max at alcyone com wrote in message news.
22072 	X	a bit better than and else having a operator conceptually be both binary and ternary puts me.
22073 	X	what advantage does this have over either if c x else y or c then x else y.
22074 	X	so what about c x y.
22075 	X	so the ioccc entry really had nothing to do with anything right.
22076 	X	any language construct in any language can be.
22077 	X	that youve found a particularly abusive example doesnt really tell us.
22078 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote if a thing is worth doing then it is worth doing.
22079 	X	g k chesterton a lambda calculus explorer in.
22080 	X	holger inspired by do the simplest thing that can possibly work i holger now think that.
22081 	X	holger x and y else z.
22082 	X	holger might just do it and avoid the need for a new.
22083 	X	i thought so too when i first saw it but now im less.
22084 	X	for example what is the meaning of.
22085 	X	w and x and y else z.
22086 	X	w and x and y else z else a.
22087 	X	andrew koenig ark at research att com http www research att com info ark.
22088 	X	did you even read what ive said.
22089 	X	the frequency by itself means nothing.
22090 	X	no one ever said that conditional operators in any language were so ubiquitous that python had to have.
22091 	X	right with idioms that are short unreadable and.
22092 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote being in love for real it aint like a movie screen india arie bosskey net aliens predator http www bosskey net avp a personal guide to aliens predator.
22093 	X	im a python newbie written lines of python and read c l py for a couple of weeks and i wanted to weigh in on the clarity of the.
22094 	X	i found it intuitive and easy to.
22095 	X	i like the order that guido has proposed and disagree with those who claim it doesnt read luft to.
22096 	X	its just the way i would say it in english.
22097 	X	my activity is eating if im hungry otherwise ill be reading c l py.
22098 	X	myactivity eating if hungry else reading c l py.
22099 	X	i want to caution against making the else clause optional as it blurs the distinction between the conditional operator and the conditional statement.
22100 	X	most of you seem to interpret.
22101 	X	to mean obvious default if you know its conditional evaluation.
22102 	X	but as a future former perl programmer to me this means default if you think its conditional execution the variable retains its former.
22103 	X	john john hazen john at my domain see headers.
22104 	X	just shows like ive said it really takes me more brainpower to parse that construct i really prefer a true conditional.
22105 	X	the current idiom can be made to work if we can mark the troublesome term so that it will be treated as true in the logical expression but will retain its.
22106 	X	i am proposing x to mean treat x as true that.
22107 	X	is guaranteed to work as a ternary and you can optionally write.
22108 	X	but re thinking the good old and or operators and their use once.
22109 	X	i have been used to the for years and they make sense in some contexts although it is slightly weird that they dont produce truth values but the last.
22110 	X	exactly this behavior allows to build the constructs which now need to be.
22111 	X	even worse what these work arounds are trying to do is they want to attach a new truth value in order to make and and or behave as the user.
22112 	X	but then look what we are doing we are tricking a truth value in order to be able to abuse a truth operator which happens to have the side effect of carrying a.
22113 	X	i have been programming in python too long so it took this much time to realize this.
22114 	X	i like your idea it is correct given that we want to continue to abuse logical.
22115 	X	therefore your solution is of the same minimalistic level as holgers which just says this is bad enough make a small change got get it.
22116 	X	or speling it differently using such a small change might help to calm all these threads down and to have a replacement for the existing workarounds which doesnt make a bad concept any.
22117 	X	but i also see now that guido doesnt like these and or constructs at all and maybe he doesnt want to support patches that are helping to make a horrible concept live.
22118 	X	while i have to say that the current pep looks much worse to me than the.
22119 	X	i think we should write some real programs with all reasonable proposed idioms and look how it looks and feel how it.
22120 	X	i still am in favor of a else and i have no problem if an if is added.
22121 	X	maybe we should simply keep our hands from a dead end ly yrs.
22122 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
22123 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
22124 	X	erik max francis max at alcyone com writes.
22125 	X	id include it on the alternatives list anyway along with macro schemes and anything else that accomplishes the.
22126 	X	pep is motivated by the frequently asked question of how do i do something like and the recognition that the answers that result are unsatisfactory to a lot of.
22127 	X	if there were a built in conditional function like the above i think i would find that answer satisfactory especially if i thought the implementation wasnt penalizing me too much for using.
22128 	X	so i think a reasonable criterion for including something on your alternatives list is include it if you think it would make a satisfactory answer to how do.
22129 	X	i already drew the analogy between the conditional operator and the addition of.
22130 	X	i dont particularly care what the boolean type is named or what the true and false constants are called as long as theyre not.
22131 	X	bool true and false respectively seemed the most sensible choices and there happened to be a great deal of consensus but i would have been happy to settle for boolean true and false if that had been the.
22132 	X	the point is i trust guido to choose a spelling syntax that.
22133 	X	quite on the contrary its the opposite of wanting something at any price its the case of having faith in the bdfl to choose something appropriate should he decide to add.
22134 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote life is an effort that deserves a better.
22135 	X	karl kraus alcyone systems san jose.
22136 	X	on tue feb rumours say that christian tismer.
22137 	X	yes unfortunately basestring hasnt a join.
22138 	X	then we would have a problem with init methods in subclassed types wouldnt we tzotzioy i speak england very best real email address dhpvdebzawwtdgvjlmdy n decode base.
22139 	X	it doesnt particularly complicate the grammar to require parentheses but allow f x if c else y it may even be simpler than not requiring parentheses because theres no need to consider ambiguities with if statements and within list.
22140 	X	this might be a bit short for getting used to the benefits of a spartanic.
22141 	X	here is exactly what you want without any syntax change.
22142 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
22143 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
22144 	X	guido van rossum guido at python org wrote in message news.
22145 	X	does a ternary operator make life that much better.
22146 	X	it adds another barrier to picking up python.
22147 	X	or or any other purely punctuation based.
22148 	X	this is getting closer to the discussion that id like to see that is making this ternary operator into a.
22149 	X	i understand about the lazy evaluation problem and i wonder if that couldnt be solved in general and wed get a bonus out of this whole.
22150 	X	in other words if someone could propose a workable lazy evaluation solution then wed have the benefits of that technology plus wed could have a cleaner in my opinion solution to the problem at.
22151 	X	personally i find the use of multiple keywords and intermixed expressions on a single line with no punctuation difficult to parse particularly when chained.
22152 	X	is more difficult to read than function cond expr expr.
22153 	X	the commas also provide the benefit of naturally supporting multiples lines such as function cond really long expression really really long expression.
22154 	X	in addition the required parentheses make abuse of the construct less.
22155 	X	expr keyword cond keyword expr keyword cond keyword expr i think.
22156 	X	versus function cond expr function cond expr expr.
22157 	X	seems to be a win for the function.
22158 	X	perhaps im making things worse by abstracting the terms too.
22159 	X	back to the top of this post a workaround is suggested that essentially achieves lazy.
22160 	X	clearly one of the problems here is that the caller has to coerce that capability instead of the called function providing.
22161 	X	would it not be reasonably possible even pythonic for there to be an argument qualifier that denoted lazy evaluation in the function definition similar to the and qualifiers now used.
22162 	X	or is lazy evaluation itself too difficult or dangerous to implement in python.
22163 	X	if it were possible then we might have arbitrarily choosing a qualifier.
22164 	X	plus that whole lazy evaluation infinite data structures capability comes along as well assuming someone very clever can develop it.
22165 	X	im certainly opposed to adding line noise artifacts to python but this would be very rarely used it would be restricted to the def statement and it would be documented along with the and.
22166 	X	in either c or c code so i dont see how c c idioms dominating how people think about anything is relevant.
22167 	X	the construct is bad form in any language and i honestly cannot remember ever having seen.
22168 	X	i dont doubt that someone somewhere will misuse a python conditional operator in this.
22169 	X	im just saying that it will be so rare in actual practice that its not worth worrying.
22170 	X	say werent you the guy who was making your case with frequency arguments.
22171 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote being in love for real it aint like a movie screen india arie bosskey net aliens predator http www bosskey net avp a personal guide to aliens predator.
22172 	X	this is asked and answered many.
22173 	X	or are you saying python would be better if its and and or did not short circuit.
22174 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
22175 	X	okay i guess its still on the table.
22176 	X	aahz aahz at pythoncraft com http www pythoncraft com.
22177 	X	register for pycon now http www python org pycon reg html.
22178 	X	erik max francis max at alcyone com writes.
22179 	X	python parser is ll but some bits of the grammar are more lenient than the language spec and get thrown out in the.
22180 	X	you can actually tell when this happens.
22181 	X	barfs at the illegal token not the lexically preceding assignment to literal even though the interpreter will try and claim that was a syntax.
22182 	X	giant screaming pieces of excrement they.
22183 	X	i have a feeling that some of the people in here have a much more exciting time relieving themselves than i.
22184 	X	the example shows the syntax with parentheses but doesnt really make a specific point about.
22185 	X	hes no fool so i guess that does suggest the parentheses will be required but its not entirely.
22186 	X	correct me if im wrong i see no mention of the parentheses were.
22187 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote i always entertain great.
22188 	X	robert frost get your own customized newsfeed online in realtime for free.
22189 	X	after seeing the mistakes that i and others have made with some of the current methods of trying to express a similar behavior to the conditional expression also with the proposed syntax and further considering the arguments made by others my opinion tends to be about neutral on the idea of adding conditional.
22190 	X	as far as the syntax of such a conditional expression if it were to be added however i strongly agree with those who feel that the least error prone syntax should read from left to right starting with the condition then the expression to be used if the condition evaluates to true then the expression to be used if the condition evaluates to.
22191 	X	no matter what separators or keywords are used to identify the construct and its.
22192 	X	if youre wanting to extend python beyond pure geekdom wasnt there a programming for everyone push at one time then imho avoiding the wierd.
22193 	X	when i first looked at python in october i saw a language that was friendly and.
22194 	X	if id seen a bunch of wierd symbols that supposedly did things for no apparent reason i wouldnt have bothered looking.
22195 	X	i certainly wouldnt be celebrating today having run a report off the pos database at work read the csv file into python and massage the data to what i needed including stripping extra junk off a bunch of dates in string form and converting them to actual dates thank you mx datetime.
22196 	X	adding a new field with an expiration date calculated for each record finding the records that matched my date criteria and writing them to a new file so i could create form letters and labels for the people who need hey i thought it was kewl.
22197 	X	you mean i can do that.
22198 	X	i suspect yall could probably do a script to do this in.
22199 	X	i wont tell you how long it took im slow but six months ago id have never considered it a.
22200 	X	i wish id discovered python years of course i always thought programming involved having to memorize wierd symbols and bizarre commands that did incomprehensible things in complex systems that had absolutely nothing to do with what the rest of us do in gimme something simple like.
22201 	X	those of us who arent c programmers or perl programmers or programmers at all yet are interested in python because of its wordy nature which makes it.
22202 	X	i may not know how to do something in python but im not afraid to guess and try it out with the interactive interpreter because i know its going to be something that makes sense to me in real.
22203 	X	and if i cant i can look it up with real.
22204 	X	whats more i can look at a python statement and actually figure out from reading the words what it does and whomh h h h what it does it.
22205 	X	yes i realize there are some punctuation thingies that are part of the language triggering a function call for.
22206 	X	i wont tell you how many times my tutor told me that i was just mentioning a function instead of calling.
22207 	X	and theres at the end of an if.
22208 	X	i understand needing punctuation things like.
22209 	X	but even the new is getting a bit obscure for my.
22210 	X	and the and the or having a more meaningful role than punctuation in a statement built of words i e having them do things imho thats leaping over the edge into.
22211 	X	this is important to the future existence of.
22212 	X	i guess its a matter of who you want to consider learning.
22213 	X	cuz for the rest of us looking at something like conda b or cab or any of the myriad symbol based suggestions were likely to throw up our hands and say its all geek to.
22214 	X	anna geek wrangler and pythonista in training.
22215 	X	when people are referring to special forms with regards to python surely theyre talking about things that look like normal function calls but dont always evaluate their arguments e the pep proposal involving cond c x y where it supports short.
22216 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote theres this perfect girl someone no one can see lamya keplers laws http www alcyone com max physics kepler a proof of keplers.
22217 	X	see my other post for more on this but note that i am not particularly in favour of anything regarding the pep.
22218 	X	iow i dont strongly advocate an optional else but thought its worth thinking about.
22219 	X	tim the problem with the example is that its already easily tim expressed safely by the and or idiom.
22220 	X	tim print processing filename and stdin or filename.
22221 	X	in particular if you change stdin to it.
22222 	X	to me the apparently widespread use of an idiom that works only because the middle value happens to be nonempty is strong evidence that we should have a more robust and universal way of expressing this particular.
22223 	X	andrew koenig ark at research att com http www research att com info ark.
22224 	X	dave brueck dave at pythonapocrypha com wrote in message news.
22225 	X	i have realized just today that at least some of the problem people have with the and or combination arises from not having fully getting pythons unusual definition of and and.
22226 	X	in python they are conditional selection.
22227 	X	they choose between alternatives presented as operands and only conditionally evaluate the.
22228 	X	they only function as logical operators when both operands are logical values false true for python.
22229 	X	given this understanding which i realize i should explain further it is straightforward and obvious that their combination forms a conditional selection expression just as the combination a b c forms an arithmetic.
22230 	X	given that you presented the view of and behind your unkeenness it it easier to.
22231 	X	i hope the reverse is true as.
22232 	X	i think pep was a subtle plot on guidos part to get us to learn about the virtues of.
22233 	X	david eppstein uc irvine of information computer science eppstein at ics uci edu http www ics uci edu eppstein.
22234 	X	so when you fail to come up with examples that proves your point its my responsibility to provide them.
22235 	X	are we playing logical fallacies bingo or what.
22236 	X	stephen horne intentionally at blank co uk wrote in message news udprvknmetephnnirvfreou at ax after.
22237 	X	while i was one of the people initially objecting to the order reversal it is a common practice in mathematical writing to put conditions on the right of the values they.
22238 	X	one can commonly see things like abs x x x x x so return x if c else y if c else z really will be readable to many people especially when reminded of the math language.
22239 	X	since this does not require a new keyword i think it should be put back on the.
22240 	X	unlike other proposals we know guido should presumably accept it since it was his initial suggestion preference.
22241 	X	i now think i might prefer it to no change and would like to be able to vote it.
22242 	X	in article uvednwtn zvtsjxtwca at comcast com.
22243 	X	remember its not really just frequency its frequency times.
22244 	X	list reverse is important solely because it is implemented at the c level making it much faster than a version written in.
22245 	X	more than that list reverse is obvious imo in meaning in a way that none of the forms of conditional expressions are either they use if which gets confused with the statement form or theyre not directly.
22246 	X	aahz aahz at pythoncraft com http www pythoncraft com.
22247 	X	register for pycon now http www python org pycon reg html.
22248 	X	sorry my bad i was reading this with a bad font that made and indistinguishable on casual.
22249 	X	i thought bengt was insane and im sure he thought likewaise as.
22250 	X	an ad hominem is a general category of fallacies in which a claim or argument is rejected on the basis of some irrelevant fact about the author of or the person presenting the claim or.
22251 	X	she didnt reject your argument because youre an idiot or any other personal fact about you therefore its not an ad.
22252 	X	erm well yes but she didnt do that she clearly gave it as just an example when you brought up ad hominem.
22253 	X	so now youre setting up a.
22254 	X	what part of i dont think you understand this is an ad hominem.
22255 	X	cuz im still waiting for you to address her arguments on approval voting a and approval voting which given the traffic i may have feel free to point out where i missed.
22256 	X	um laura explained why she thinks option a doesnt achieve your expressed.
22257 	X	you seem to be still supporting it so it looks like you dont understand either option a or her argument.
22258 	X	instead of trying to play logic games why dont you address her arguments against approval.
22259 	X	congratulations youve managed to side step her argument very.
22260 	X	now kindly let the rest of us in on why shes wrong please.
22261 	X	anna by caffeine alone i set my mind in.
22262 	X	by the beans of java the thoughts acquire speed the hands acquire shaking the shaking becomes a.
22263 	X	by caffeine alone i set my mind in.
22264 	X	as someone else pointed out one problem with this suggestion is that it seems much more likely to make a typo and write the wrong thing when you meant something else whereas its very hard to mistype yes no or abstain for instance.
22265 	X	yes but the results are going to have to be digested in some form and turned into statistical figures that are presented certainly you wouldnt buld a huge matrix with voters on one dimension forms including no change on the other populated by floating point values clamped between and and hand that over to the bdfl it needs to be converted to some kind of statistical.
22266 	X	as such it will be processed through some formula e.
22267 	X	the full results will be included in the accounting so that everyone can review them and verify their authenticity but presumably the bdfl will judge the decision on a summarized form of the voluminous.
22268 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote will i disappoint my future if i stay sade bosskey net return to wolfenstein http www bosskey net rtcw a personal guide to return to castle.
22269 	X	isnt part of the purpose of a pep to discuss the motivation for the.
22270 	X	it is my opinion that this pep needs a better section on the.
22271 	X	a clear and objective list of the current means of achieving the same.
22272 	X	x condition and expr or expr.
22273 	X	which as we all now know i guess.
22274 	X	fails in case of bool expr were.
22275 	X	if condition x expr else x expr.
22276 	X	which is three extra lines and suffers from the possibility of introducing a bug through mis typing x.
22277 	X	i believe the points in this post so far are objective arguments for the.
22278 	X	i also believe that the pep should describe these.
22279 	X	any other relatively objective motifications should also be.
22280 	X	warning from here on in is my opinion so im happy for you to ignore it.
22281 	X	im not saying i dont use it but it is a.
22282 	X	im not swayed at all by the saving three lines.
22283 	X	i do have some sympathy for the bug through mis typing x argument but this is outweight by my lack of sympathy for what looks like a vi caps lock.
22284 	X	the damage to readability of the proposed syntax does not imo outweigh the risk of misnaming the.
22285 	X	note i am also of the opinion that list comprehensions look like a vi caps lock accident but as aahz mention are a case of practicality winning.
22286 	X	they also have the advantage of looking like an expression because they are always surrounded by.
22287 	X	terry reedy tjreedy at udel edu wrote in message news dtodndgpzgtgcjxtwcqw at comcast well known.
22288 	X	by standard i meant typical most common rather than technical committee.
22289 	X	python faq says in many cases you can mimic ab c with a and b or c but but does not mention the not a or b and c mimic that may work when the other does not ie when b is known false instead of known true.
22290 	X	question did anyone know about this alternative but keep pretty quiet about it.
22291 	X	observation by plugging part of the hole in the and or form the or and form makes an exact replacement less.
22292 	X	on the other hand by still leaving a small hole when neither b nor c have a known single truth value it may make having one form that always works seem more.
22293 	X	if a or b have side effects their possible double evaluation makes the match not quite exact even if the overt outcome is still the.
22294 	X	this popular idiom has a slight.
22295 	X	if source is an object that has a buggy readlines method and the bug makes it raise attributeerror as well as a working split method this idiom hides the bug and unintendedly falls through to the call to the split.
22296 	X	the right way is something just a tad more accurate careful such as.
22297 	X	try method source readlines except attributeerror lines source split else lines method.
22298 	X	the key issue when you catch an attributeerror as an expected indication of this object has no such method make sure you only access the method object in the try clause then call it later generally in an else clause so you wont accidentally catch attributeerror exceptions propagated by calling a method that is actually.
22299 	X	this relates to the above quoted slightly imperfect variant of easier to ask forgiveness than permission eafp a bit like accurate lbyl look before you leap stands to common or garden lbyl whence my name for.
22300 	X	id be inclinded towards a phase vote initial to weed out candidates final to select the winner and third where guido vetoes it.
22301 	X	andrew koenig ark at research att com writes.
22302 	X	actually the usual form is you dont need it because you can write x instead with an implied i dont need it because i prefer a style which avoids the whole issue.
22303 	X	and unfamiliarity with the precise details of a workaround for a problem you personally dont have is not that big an.
22304 	X	btw please dont read this as implying that people against the proposal feel the need to tell others how to write their code the usual form is usually a response to an argument of the form you must have conditional expressions because they are necessary to write the following.
22305 	X	the usual form is basically a better explained version of no you dont.
22306 	X	much of this discussion is basically schoolyard level oh no you dont oh yes you do.
22307 	X	there are no objective reasons for accepting or rejecting this.
22308 	X	aahz at pythoncraft com aahz writes.
22309 	X	while true in a technical sense id expect there are a number of people who are reading this thread who didnt really understand how this construct works prior to this thread and who prefer to protect other people from were forced to.
22310 	X	one thing that i dont think is pointed out about the proposed syntax is that it is a lot easier to understand upon encountering it for the first time than cs.
22311 	X	i think that if someone who isnt familiar with the syntax encounters the statement.
22312 	X	x sqrt y if y else.
22313 	X	he will still be able to figure out whats going on without too much effort while.
22314 	X	is pretty much gibberish until someone explains the.
22315 	X	meanwhile i have had to maintain code in which people write.
22316 	X	x y and sqrt y or.
22317 	X	which is possibly the worst of the.
22318 	X	i know that people are afraid of other programmers abusing the new syntax but many of those programmers are already committing abuses as.
22319 	X	x sqrt y if y else.
22320 	X	if the ternary operator were introduced as otherwise the if reads too much to me as if it were modifying the entire assignment as in.
22321 	X	unfortunately it doesnt achieve the short circuit behavior which many people feel is an essential aspect of the ternary.
22322 	X	would an if else expression have prevented this error.
22323 	X	though there will also be errors in an if else.
22324 	X	and this specific error type would not exist were there an ifelse builtin function and was apparantly found and fixed months.
22325 	X	i do not deny there are good uses of this pep.
22326 	X	its just that there are also consequences of this expression which suggest that overall it is inappropriate for.
22327 	X	samuele sometimes it could be a real ambiguity so maybe it should be samuele just.
22328 	X	sorry but i dont see the ambiguity all i see is a clumsy way of writing.
22329 	X	andrew koenig ark at research att com http www research att com info ark.
22330 	X	every ternary op construct needs time to get used to it i am.
22331 	X	to me else doesnt hint at a boolean operator like or but.
22332 	X	a that there is a not else part before it.
22333 	X	b that there is an alternative part after it.
22334 	X	from there its only a short way to getting it.
22335 	X	in real life examples taken from stdlib like.
22336 	X	unicode and self ugettext else self gettext.
22337 	X	i dont think its entirely non obvious for you anymore.
22338 	X	sure it has to be taught to newcomers but only as an addon to boolean expressions and as a rather minor.
22339 	X	admitted its a bit odd but many of us find seeing if and else and whatnot in expressions odd.
22340 	X	it might not be satisfying but then it is a rather simple change which fixes one particular problem avoiding to invent another kind of.
22341 	X	also its nice that if you discover you dont need an else part anymore you can just delete.
22342 	X	with the other proposals you have to rewrite your expression using another.
22343 	X	i wonder if the beginning programmer might not expect to be able to use safesqrt and get.
22344 	X	the existing conditional construct in python has the order c x y.
22345 	X	similar constructs in other languages use this same.
22346 	X	this is by far the most common order of doing things in mainstream programming.
22347 	X	therefore it is the easiest orderr to learn for people coming to python from other langs and people coming to other langs from python.
22348 	X	these are consistent with how python presently does things so i support.
22349 	X	the only problem i see with thme is that people might mistake them for the existing conditional.
22350 	X	one way round this might be to enclose them in or possibly for example.
22351 	X	it has the advantage of were familiar to anyone using c c c objective c perl php java javascript awk and probably a lot of other languages.
22352 	X	i would note that according to the statistics on sourceforge and freshmeat this list include all the langauges commonly used for open source.
22353 	X	therefore people moving to python from other langs will find this.
22354 	X	though i have no particular enthusiasm for.
22355 	X	this would be better enclosed in.
22356 	X	as it stands i dont think it looks obvious enough that it is a.
22357 	X	of this category these two are the only ones i.
22358 	X	philip hunt philh at cabalamat uklinux net memes are a hoax pass it on.
22359 	X	this is far preferable to the current pep.
22360 	X	in particular the brackets make it clearer that this is not an if statement but an if expression.
22361 	X	mind you id still prefer it not be spelled if and im not sure that allowing elif isnt going to lead to some shockingly appalling multi line.
22362 	X	anthony baxter anthony at interlink com au its never too late to have a happy.
22363 	X	cols get inone would do the wrong thing if i i really want none not the last item in cols for this.
22364 	X	its a flag value to distinguish a select all menu item from the menu items referring to individual.
22365 	X	again not good i doesnt cause the indexerror unless cols is.
22366 	X	what would work in my case since i always ends up were exactly would be to copy the cols array append none to the copy and then use cols i without.
22367 	X	i happen to think that would be more obscure than the if then else code ive been.
22368 	X	david eppstein uc irvine of information computer science eppstein at ics uci edu http www ics uci edu eppstein.
22369 	X	i went through quite a large bunch of my code code searching for if.
22370 	X	ive found nothing that i would consider improved by an if then else.
22371 	X	maybe this is just the fact that im so inured to the lack of an if then else expression i have come to see a limitation as a virtue but i dont think.
22372 	X	def get arg self default return any prefix argument that the user has supplied returning default if there is.
22373 	X	default defaults groan to if self arg is none return default else return self arg.
22374 	X	def get arg self default return any prefix argument that the user has supplied returning default if there is.
22375 	X	default defaults groan to return default if self arg is none else self arg.
22376 	X	the original has all these wonderful visual cues about whats going on colons at end of lines and indentation were the key two.
22377 	X	the second just has a stream of name like.
22378 	X	it looks better when syntax hilighted but only.
22379 	X	so i find myself in the slightly surprising position of favouring the punctuation style.
22380 	X	def get arg self default return any prefix argument that the user has supplied returning default if there is.
22381 	X	default defaults groan to return self arg is none.
22382 	X	this is a degree turn since i started writing this post.
22383 	X	i still dont like the proposal.
22384 	X	new style classes and generators both kick list comps butts.
22385 	X	i cant really comment as ive never tried to teach python but i believe.
22386 	X	anyway i hope my vote counts in your mind.
22387 	X	the ultimate laziness is not using.
22388 	X	that saves you so much work you wouldnt believe it if you had never tried.
22389 	X	dale strickland clark dale at riverhall nothanks co uk writes.
22390 	X	im prejudiced against change and proud of.
22391 	X	not to the extent of opposing all change without consideration but my default opinion of any change is no thanks and the merits of any change have to overcome.
22392 	X	and then theres the fact that i really dont think this change is an.
22393 	X	when you are taking a poll to find out what the community thinks about something it matters a great deal if the results come out for against abstained undecided dont care or if you get for against abstained undecided dont.
22394 	X	you mustnt take a vote with the assumption that only people who care.
22395 	X	those that do not care have not automatically lost their.
22396 	X	this could also currently be written as.
22397 	X	print processed s s filename txt html is html.
22398 	X	what about a exp if cond could it be like a exp if cond else none.
22399 	X	anyway im agree with dan schmidt dfan at dfan org writes.
22400 	X	carel fellinger carel fellinger at chello nl wrote in message news.
22401 	X	python list at python position against count and.
22402 	X	indifferent literally means i do not care whether python remains as is modulo changes in other areas of the language or whether this change is made.
22403 	X	but here you suggest that indifferent be counted as.
22404 	X	it would be just as sensible to me to either split the indifferent vote or distribute it in proportion to the against for.
22405 	X	concretely if people vote no vote yes and vote dont care i disagree that the dont cares should all be treated as.
22406 	X	the issue is binary either a patch is made or.
22407 	X	but it is not clear what to do with such.
22408 	X	i agree completely with this note so i wont quote all of.
22409 	X	however i do want to augment ont of its points.
22410 	X	michael it distinguishes choice from branching.
22411 	X	michael if i have the following snippet of code.
22412 	X	michael x a michael x b.
22413 	X	michael then i think of it as doing one thing it sets x to one of michael two different.
22414 	X	that is very different from this.
22415 	X	michael x a michael y b.
22416 	X	michael which i think of as doing one of two things either modifying michael x or y.
22417 	X	or perhaps its a bug and you meant to assign to x in both.
22418 	X	the reason such bugs are possible is that there are two separate.
22419 	X	then you have factored out the assignment to x and it becomes impossible to assign to two different variables by.
22420 	X	andrew koenig ark at research att com http www research att com info ark.
22421 	X	sheila king usenet at thinkspot net wrote in message news bjgg at kserver.
22422 	X	except that i dont want this new fangled feature in the language at all so ive been staying.
22423 	X	and anyway im a well known reactionari ly yrs steve steve holden http www holdenweb com python web programming http pydish holdenweb com pwp register for pycon now http www python org pycon reg html.
22424 	X	sorry i also got private mail about.
22425 	X	should indeed set the result to none if the condition evalutes to.
22426 	X	i dont think there is any other sensible result other than.
22427 	X	the question is whether my suggestion has enough use cases and is thus practical.
22428 	X	i sometimes have the equivalent of this situation.
22429 	X	result obj method if someconditionalexpr obj if result is none either we dont have such a method or calling it returned none.
22430 	X	writing it today youd have to say either.
22431 	X	result someconditionalexpr obj and obj method or none if result is none.
22432 	X	which is a bit tricky to understand and results in long lines.
22433 	X	try result obj method except attributeerror result none if result is none either we dont have such a method or calling it returned none.
22434 	X	result getattr obj method if result is not none result obj method if result is none either we dont have such a method or calling it returned none.
22435 	X	but none of these solutions reads too.
22436 	X	the current constructs are an rather indirect way to express this use.
22437 	X	however i fear that the pep might decrease pythons readability and i am currently not leaning towards one way or the.
22438 	X	why not have it return none if none of the conditions are true.
22439 	X	it seems natural and makes the syntax even more like the current if.
22440 	X	other than that i think i like.
22441 	X	i certainly like it better than any of the other alternatives ive.
22442 	X	the next step im were deliberately subversive here is to say that enclosing any statement in s turns it into an expression whose value is the last thing evaluated in the.
22443 	X	that would let you do things like.
22444 	X	so do you really think people would write such things in production code.
22445 	X	any structure can be used to.
22446 	X	if it is its not the fault of the structure its the fault of the programmer or benefit if theyre making an entry into an ioxcc contest.
22447 	X	this is hardly a compelling argument against the conditional operator were added to python even if takes the same form as in c not only is this is perhaps the greatest abuse of cs conditional operator ever created but its been done deliberately.
22448 	X	the fact that such things can be written as entries into a contest where the purpose is to write as obnoxious code as possible is hardly evidence that they will in real.
22449 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote there are countless planets like many island earths konstantin tsiolkovsky maths reference http www alcyone com max reference maths a mathematics.
22450 	X	if i saw either of those in real code produced by someone in my group the code would immediately be.
22451 	X	i realize guido put together the list not as a style guide but to show how the construct would be interpreted consistently in different potentially ambiguous.
22452 	X	perhaps what the list also shows however is the sort of abuse that might.
22453 	X	that isnt necessarily a reason to reject the idea massively nested if else statements are almost equally unreadable but its a.
22454 	X	steven taschuk staschuk at telusplanet net writes.
22455 	X	well is used for alternation in regular.
22456 	X	i dont know the origin of the notation but wouldnt be surprised if it pre dated c.
22457 	X	check out the comments in this source file that start with oh lord help.
22458 	X	further evidence that i simply thought you did not like the other.
22459 	X	that imho can be greatly improved by a different style which i mentioned earlier.
22460 	X	a the value can be cached or in the database.
22461 	X	get cache name self connection fetch name database already open.
22462 	X	the ownership is stored in the database if the name starts with db or from the web service.
22463 	X	self connection get owner name self webservice get owner by name name.
22464 	X	if adopting both forms was a possibility wed have that.
22465 	X	fits most naturally with expressions and keywords fits most naturally with.
22466 	X	certainly this reflects my decades of c.
22467 	X	but more than that i think theres a natural association in that expression operators tend to be punctuation based while statements virtually always are associated with keywords all but assignment.
22468 	X	unexpectedly it seems to have come.
22469 	X	in any case i think this will be my last post on this thread since i am sure im tapped out on it if not idea wise then at least emotionally.
22470 	X	i do agree we covered all the.
22471 	X	and i had better get my butt out shopping for some valentine gifts or else ill be emotionally drained by my.
22472 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
22473 	X	roy im a fan of refactoring but not a zealot in the xp ish roy refactor mercilessly sense.
22474 	X	its temping to want to factor roy the result out of the above and end up with result ternary roy involving x y x and y.
22475 	X	theres both a cognitive advantage roy you only have to read and understand it once and a coding roy advantage if you only type it once theres no chance of roy introducing inconsistancy.
22476 	X	i was going to say exactly the same thing before i saw this.
22477 	X	andrew koenig ark at research att com http www research att com info ark.
22478 	X	while thats a quaint analogy i simply dont buy.
22479 	X	how does giving someone the proper syntax theyre looking for instead of obscure and incorrect one promote bad code.
22480 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote there i was there i was splitting atoms with my desire lamya computer science http www alcyone com max reference compsci a computer science.
22481 	X	andrew dalke adalke at mindspring com writes.
22482 	X	actually in c i often find that i cant use the ternary operator because what i want is a.
22483 	X	yes i thing the short circuit argument is.
22484 	X	no one has given a telling example which needs.
22485 	X	except when y might evaluate as.
22486 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote always forgive your enemies nothing annoys them so.
22487 	X	oscar wilde bosskey net quake iii arena http www bosskey net qa a personal guide to quake iii.
22488 	X	nick vargish nav at adams patriot net writes.
22489 	X	mike mike meyer mwm at mired org http www mired org home mwm independent www perforce freebsd unix consultant email for more.
22490 	X	donn cave donn at drizzle com.
22491 	X	idiom is idiom if it is in widespread.
22492 	X	idiom is merely grammar which is peculiar to a specific language and which does not generalize to other.
22493 	X	in computer science idiom is something language or usage specific that is not particularly obvious unless youve already been exposed to.
22494 	X	c and x or y as a conditional operator substitute is just s idiomatic as c and x or y despite the latter having the well known flaw when x is false.
22495 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote nobodys waited longer than me to come clean jaki graham esperanto reference http www alcyone com max lang esperanto an esperanto reference for english.
22496 	X	but youre not really disagreeing with my.
22497 	X	whether there is a conditional operator in python is an important.
22498 	X	what the syntax is is irrelevent to me and seeing peoples reasons for preferring one syntax over another is rather amusing because most of the reasons are so baseless and.
22499 	X	however when it is handy it can usually be replaced with a as in.
22500 	X	the exceptions are when you mix list and tuple so need an explicit conversion to.
22501 	X	ditto for if one of those is an.
22502 	X	def concat generators for gen in generators for x in gen yield gen.
22503 	X	i believe there is also a iterator utilities package which includes a bunch of these sorts of.
22504 	X	perhaps in the python sandbox of cvs.
22505 	X	this is the nicer way to read it but now we have then and and else and else.
22506 	X	python programmers now have to be aware of whether they are using a statement or an expression and if they want it to be lazy evaluated.
22507 	X	ah if you want haskell you know where to find it.
22508 	X	it is probably a lot easier to sell me a major language change than a trivial.
22509 	X	at least it passes the not a gratuituous change test straight.
22510 	X	which is extremely easy to read and fits in my field of vision completely unlike either of the above alternatives where i have to scan horizontally.
22511 	X	but i dont want to have such special.
22512 	X	i agree but my conclusion is going to multiple lines and have some vertical indentation clue instead of having to parse it manually.
22513 	X	the seconds save in writing it i easily loose the next times i come back to the function changing.
22514 	X	this could also be written as case cond iftrue iffalse.
22515 	X	i never got any replies the first time i suggested this so im sure nobody else likes it.
22516 	X	ad hominem arguments are those where you are attacking the person not what theyre.
22517 	X	i dont know where you come from but claiming that someone is wrong because theyre ignorant certainly comes.
22518 	X	that you took the opportunity to engage in an ad hominem by admitting that you were engaging in a mischaracterization earlier doesnt exactly pretty the.
22519 	X	okay now youve defaulted to if you do not agree with me then you are.
22520 	X	that sounds like an appeal to authority to me that would make a third.
22521 	X	congratulations you must have gone for the three for one.
22522 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote in time of war the devil makes more room in.
22523 	X	a german proverb cranks crackpots kooks loons on the.
22524 	X	please explain how the following could be implemented with a dictionary note that f and g have side effects and should only be called if we need their value.
22525 	X	i hadnt forgotten about you merely pointing out that there was a lot of python programmers who werent around for the debate who showed up later and said eeee yuck if this had gone to a vote and we had been able to find them we now know how they would have.
22526 	X	but that is the point we werent able to find.
22527 	X	they only found us later to.
22528 	X	this is an extremely well known problem with deciding things by.
22529 	X	unless you have a way to force all people to vote you will get a self selected.
22530 	X	we already know enough about voting the human activity to know that this self selected set has demographics very different from what you would get if you could perform a random.
22531 	X	andrew koenig ark at research att com wrote in message news yuelfrdj fsf at europa research att com.
22532 	X	i was saying i fear abuses.
22533 	X	of course there is always the possibility for abuses but python should try to avoid them as much as.
22534 	X	how is it possible for a simple parenthesis have such a strong effect.
22535 	X	i would like to keep the distinction between statement and.
22536 	X	i am for a new keyword or.
22537 	X	i would be okay with when cxy or c then x else y or x when c else y or.
22538 	X	i dislike proposals that look like.
22539 	X	you could get it by doing something obtuse obnoxious and.
22540 	X	not surprisingly that doesnt present itself as a good.
22541 	X	but if youd read that you would have understood the point instead of making a point which i already.
22542 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote lawyers i suppose were children.
22543 	X	charles lamb the laws list http www alcyone com max physics laws laws rules principles effects paradoxes in.
22544 	X	holger krekel pyth at devel trillke net writes.
22545 	X	it will be good for the next stats finaly we dont need to use a emacs vi or perl ruby troll to increase the stats.
22546 	X	both the use of curly braces and commas seem terribly inappropriate.
22547 	X	when this is corrected you end up with.
22548 	X	im hardly wedded to syntactical details at this.
22549 	X	i just want to get people thinking beyond variants of foo cond bar expr baz expr.
22550 	X	id be happy with almost any of.
22551 	X	if cond expr cond expr default if cond expr cond expr else default if cond expr cond expr else default if cond expr elif cond expr else default if cond expr expr.
22552 	X	i answered on one of the threads you posted it.
22553 	X	similar mix up accidents might also happen with pep.
22554 	X	imo ternary operators generally lead to.
22555 	X	thats probably because we all think so.
22556 	X	the world is divided into kinds of.
22557 	X	those who can count binary numbers and those who.
22558 	X	dave brueck dave at pythonapocrypha com writes.
22559 	X	the pep proposal is uncomfortable in cases where you dont especially expect one outcome more than the other.
22560 	X	presumably because if x is none none getdisplaystring will blow.
22561 	X	this isnt one of em wink.
22562 	X	otoh when i read micahels post i had no idea whether.
22563 	X	print x x getdisplaystring if x else none.
22564 	X	print x x getdisplaystring if x else none.
22565 	X	print x x getdisplaystring if x else none.
22566 	X	and i didnt even know which way he intended.
22567 	X	spelled with an if statement instead the intent is obvious instead of a.
22568 	X	it is the normal result if by normal result you mean the expression that is to be evaluated if the condition evaluates to.
22569 	X	if you mean something else by normal result i dont understand why youre making a distinction that only serves to confuse matters.
22570 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote i always entertain great.
22571 	X	robert frost a personal guide to online multiplayer first person.
22572 	X	i urge others to read it.
22573 	X	i suspect it may be the latter because i never saw any lisp coding standards deprecating.
22574 	X	except for the switch case statement which is spelled if elif in python doesnt python already have all that.
22575 	X	def macro a b return a b.
22576 	X	the problem with the example is that its already easily expressed safely by the and or idiom.
22577 	X	print processing filename and stdin or filename.
22578 	X	there are at least uses akin to this in pythons standard library today.
22579 	X	print auto colorizing turned self allow colorizing and on or off cfile fullname debug and c or o log info ok and success.
22580 	X	dict unicode and self ugettext or self gettext suffix char debug and c or o iptfile args and args or python graminit c mname p name and p name name or name self write obj and true or false pos is none and unknown or pos contents doc and doc n or line name and self bold name or repr host sys platform mac and or localhost font helvetica sys platform win and or write value and or.
22581 	X	the short circuiting business is supplied by that idiom but is rarely needed for example its not needed in any of the above and its usually certain that the thing following and cant be false its only insecurity nothing in the std library needs to worry about that case.
22582 	X	i like the existing uses of and or fine and prefer them to multiline spellings given what simple cases they.
22583 	X	i dont care for this line from imaplib py but i wouldnt like it any better under the peps spelling either.
22584 	X	l map lambda x s s x x and join x or l.
22585 	X	guido regrets lambdas and i dont believe list richard comprehensions were a necessary addition to the richard.
22586 	X	disclaimer doesnt stop me using either but i richard could just as easily use some other.
22587 	X	fwiw im now working on a python library that i would probably have written in a different language were it not for lambdas and operator overloading for that matter.
22588 	X	andrew koenig ark at research att com http www research att com info ark.
22589 	X	by the way the same is true in c or c with the normal ternary.
22590 	X	once you start chaining them together they get really ugly really.
22591 	X	thats just pilot error writing code which is hard to read not a flaw in the construct.
22592 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote shooters looters now i got a laptop computer ice cube keplers laws http www alcyone com max physics kepler a proof of keplers.
22593 	X	one of its standard meanings recursive pun intentional.
22594 	X	to set the stage for my essay i wrote pythons and and or are not the standard versions and immediately explained the contrast that i intended to explore and.
22595 	X	in logic math and computing science and and or have well known standard meanings as logical operators either strict or domain extended via operand coercion and either conditional in execution or.
22596 	X	in python and and or are generalized as conditional selection operators as explained in following sections with some unusual.
22597 	X	please notice i said in logic math and computing.
22598 	X	as to logic and math the rest of my statement is obviously.
22599 	X	as for computing science i am rather sure of correctness there.
22600 	X	two nonrandom examples knuth aocp nd ed p operators of symbolic logic and or gries sci of.
22601 	X	p five operators are defined over values of type boolean and or.
22602 	X	if someone believe that these two prominent computer scientists are in the minority let them present some counter.
22603 	X	i intentionally did not add computer languages to that.
22604 	X	i know that in c and i presume c and or are extended conditional logic operators but i dont know or have forgotten about most everything.
22605 	X	i also know that language comparisons lead to religious debates which do not interest me and which i would prefer to left out.
22606 	X	besides i think most people think that it is newcomers to python who know some logic math maybe some cs with maybe some experience in c but typically not with lisp who have the most trouble with and or or or and as conditional selection.
22607 	X	part of the purpose of my essay is to suggest why they are confused and how they might be less.
22608 	X	also i wrote standard not standard as in ascii ansi iso standard c etc.
22609 	X	nor did i hint at the existence of any l m and sc terminology standards.
22610 	X	i would prefer that people read study and respond to what i did write rather than criticize what i intentionally did not.
22611 	X	read what i wrote and show me where i even hint at such an objection and i will revise it.
22612 	X	in point of fact the person who originally nitpicked standard objects to what i write precisely because i accept and use pythons.
22613 	X	lulu of the lotus eaters mertz at gnosis cx wrote in message news.
22614 	X	seq range evensquares x x for x in seq if not x.
22615 	X	is that why were going to war with iraq.
22616 	X	guido van rossum guido at python org wrote in message news.
22617 	X	either on this or on a conditional function that includes lazy.
22618 	X	all the other ideas seem too complex for the.
22619 	X	aahz at pythoncraft com aahz writes.
22620 	X	http www python org doc essays metaclasses.
22621 	X	but since im not trying to impress anybody in the software big top id rather walk the wire using a big pole a safety harness a net and with the wire not more than feet off the.
22622 	X	if what you want is a terse short circuiting idiom for the ternary operator i cant help.
22623 	X	but its been asserted and as far as i can tell accepted by both sides that short circuiting is not needed often in ternary.
22624 	X	so if nothing comes of the current discussion the warning against a and b or c in the faq can be strengthened and people can be pointed to either.
22625 	X	clear extensible but verbose result true true value false false value cond more concise result true value false value not cond.
22626 	X	in my own experience the common false value true value cond is error prone because the ordering of the values is opposite what id expect so i wouldnt recomend.
22627 	X	when short circuiting is required i have no problem telling people to suck it up and use a a real if else statement since this case is relatively.
22628 	X	to quote m hudson quoting tim peters learn to love the return key.
22629 	X	i started out on the ternary operator but all of the proposed syntaxes are worse than the status quo in my.
22630 	X	except perhaps some of the then based syntaxes which im still looking at.
22631 	X	so im slowly drifting towards on the whole.
22632 	X	the tone of the discussion is starting to push me that way as.
22633 	X	doctor it hurts when i do this then dont do itly yours.
22634 	X	how do you program python without assignment statements.
22635 	X	i meant that the requirement of the current proprosal for enclosing parentheses sticks out in that it is an exceptional case when compared to other expressions which do not require enclosing.
22636 	X	however given the similarity of this form to the if statement colons and all i can see why parentheses are probably desirable here for both human and machine readers.
22637 	X	i can also see some advantage in it were similar to and consistent with the if statement but i still prefer x if c else y over the other pro ternary alternatives ive seen so.
22638 	X	as you probably saw in a thread bearing your name i took a quick simple poll of those still bothering to follow the pep discussion.
22639 	X	my reason for performing the poll was that i was seeing so many syntaxes discussed that i thought the key ideas were were burried in a wash of syntax.
22640 	X	i had people casting votes with the following results see for interpretation of the syntax numbers.
22641 	X	syntax votes x if c else y c x y if c then x else y if c x else y c x y c x else y x when c else y.
22642 	X	you are welcome to do whatever you like with this information including ignoring it completely bearing in mind that it is not particularly.
22643 	X	my own interpretation is simply that the x if c else y syntax guidos original and c x y c syntax both have a lot of support and should probably not be ignored though either could certainly be intentionally rejected.
22644 	X	anyway good luck with setting up the.
22645 	X	one final note at the bottom of this email i have included all comments i.
22646 	X	again feel free to use them or ignore them as you.
22647 	X	i think reading left to right is very.
22648 	X	this form will be possible anyway if pep is to succeed i dont think its obviously way too many options if we go for some more or less approval voting like.
22649 	X	its too many to try to put a ranking on but not too many to say good bad indifferent.
22650 	X	i suspect that if you declare that such and such syntaxes are too unpopular to be worth bothering with then the small minorities who like those syntaxes will be convinced that youve rigged.
22651 	X	so doing this by private mail may not.
22652 	X	i think the following are too weird to be worth taking seriously which is not the same as having too little support to take them seriously.
22653 	X	looks like a function but isnt one nothing to differentiate the three arguments at first glance bizarrely ungrammatical looks like a syntax error.
22654 	X	looks like its doing something very different to what its actually doing angle brackets are im afraid just not remotely pythonic most of the drawbacks of the current and or hack without the advantage of were able to work out what it means from first principle.
22655 	X	wtf might make sense for forth aficionados but i dont think theyre a large part of the python community has a meaning already and it aint that as actually i like a bit more than i like confusing because it suggests that the relationship between c and x is the same as that between x and y will confuse the hell out of people used to certain functional languages though thats no big deal as unbearable.
22656 	X	my vote in any case is for leaving all the options on the ballot with the possible exception of ones that were never popular and have been disowned even by their.
22657 	X	i hope the vote will permit preferences this would avoid having to make a choice between close.
22658 	X	the problem is that wouldnt let him form a quiet protest about pep.
22659 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote ten lands are sooner known than one.
22660 	X	a yiddish proverb bosskey net aliens predator http www bosskey net avp a personal guide to aliens predator.
22661 	X	damn you get to the point where i was too lazy to think it out.
22662 	X	w and x and y else z.
22663 	X	syntaxerror because it would be grouped as.
22664 	X	w and x and y else z else a.
22665 	X	syntaxerror aka else requires preceding x and y part.
22666 	X	and test not test and not test else not test.
22667 	X	val z if x val y.
22668 	X	sorely shorn soon shackled slave samson sighed silently scheming sightlessly seeking some savage spectacular.
22669 	X	but the default condition deserves a better way to be signaled.
22670 	X	cond expr cond expr else default.
22671 	X	this way the simple conditional expression would be written as.
22672 	X	of course the else in the default condition is there for readability reasons.
22673 	X	but its elegant and it looks.
22674 	X	note also that its quite easy to disambiguate it from the list.
22675 	X	some examples based on what was presented in the list.
22676 	X	delta real roots else imaginary roots divisor.
22677 	X	i think this one has a chance to.
22678 	X	carlos ribeiro cribeiro at mail inet com br.
22679 	X	this looks like a decent proposal to.
22680 	X	okb not okblacke do not follow where the path may.
22681 	X	go instead where there is no path and leave a.
22682 	X	again your introduction of this idea of normal is just confusing the.
22683 	X	stick with expression evaluated if true and expression evaluated if.
22684 	X	defining the normal expression which is the former in some circumstances and the latter in others is just adding difficulty to an already difficult debate it took three questions to get a clarification on which form you were proposing.
22685 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote nothing you have said is revelation the russian chess bosskey net return to wolfenstein http www bosskey net rtcw a personal guide to return to castle.
22686 	X	http www python org dev process html says.
22687 	X	so does this have a precedent.
22688 	X	asperger syndroom een persoonlijke benadering http people nl linux org gerrit het zijn tijden om je zelf met politiek te bemoeien http www sp nl.
22689 	X	actually i didnt see until you ccd me on this in e.
22690 	X	ive been out of town for the fifth anniversary of my outlaw wedding and ive only been slowly catching.
22691 	X	aahz aahz at pythoncraft com http www pythoncraft com.
22692 	X	register for pycon now http www python org pycon reg html.
22693 	X	if c is the condition expression and a and b are the expressions to evaluate if its true or false respectively then what youre proposing is.
22694 	X	which was proposed as an alternate to the.
22695 	X	notation very early on in the.
22696 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote no one knows what he can do until he.
22697 	X	publilius syrus maths reference http www alcyone com max reference maths a mathematics.
22698 	X	that is because for many of us this is not what the debate is.
22699 	X	we dont see python as some collection of language features each of which is to be evaluated on its own.
22700 	X	we see it as a whole and we see what features are not in the language as part of that.
22701 	X	so from our end the question is not is this useful and readable pretty much any concept taken from any language has demonstrated utility and.
22702 	X	the question is about worth changing the language.
22703 	X	if you put a high enough value on simplicity and lack of diversity then you will find no language change measures.
22704 	X	if you find these qualities irrelevant you can be in favour of every languge change which could ever produce the most useful and readable way to express.
22705 	X	i dont think that anybody is at these bounds but that is where they.
22706 	X	while i know it and ive used it still does not seem the best thing to do in name of readability and.
22707 	X	i prefer the conditional statement because it clearly expresses the underlying logic to any use of a side effect as mentioned.
22708 	X	but thats me your mileage may.
22709 	X	btw i believe that this has something to do with the fact that my first language was pascal where the true false identity doesnt hold by.
22710 	X	c programmers are more used to this idiom than i am.
22711 	X	carlos ribeiro cribeiro at mail inet com br.
22712 	X	because in the statement form the default else portion is to do nothing.
22713 	X	in the expression it cant do nothing it has to do.
22714 	X	i agree that if you do want to make the else portion optional none is the logical choice but i dont see the pressing need for it to be optional in the first.
22715 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote patiently im still holding out until sandra victor a lambda calculus explorer in.
22716 	X	if youre going to go this route id much prefer not overloading the meaning of and here and using something like.
22717 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote being in love for real it aint like a movie screen india arie bosskey net aliens predator http www bosskey net avp a personal guide to aliens predator.
22718 	X	a strict analysis of how frequently a construct will be used shouldnt be the sole deciding factor in if it gets introduced into the.
22719 	X	after all some programmers may find booleans or lambdas or list comprehensions or generators or metaclasses unnecessary and use them very rarely but that hardly means they shouldnt have been added even if youre in the group that thinks one or all of those thigs shouldnt be added.
22720 	X	how much python code really takes advantage of metaclasses.
22721 	X	does that mean that metaclasses shouldnt have been added.
22722 	X	whether its rare in and of itself a debatable point doesnt negate that it would be useful in the situations where its.
22723 	X	just because im not apt to use generators all that often doesnt mean they shouldnt be in the.
22724 	X	this frequency metric for judging whether a feature is warranted is a red herring it seems to.
22725 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote always forgive your enemies nothing annoys them so.
22726 	X	oscar wilde bosskey net quake iii arena http www bosskey net qa a personal guide to quake iii.
22727 	X	but you really already have this with lambdas just not as an implicit.
22728 	X	im not sure what the implicit syntax gets you really except turning every conceivable line of code you run across into a minefield is this argument going to be lazily evaluated maybe never.
22729 	X	i have to keep checking back to the function definition and looking for a or whatever might be chosen to find.
22730 	X	im not sure this formulation really stands out as a big winner when you can already use zero argument lambdas as thunks provided you call them when you want them in the very rare your words case where you need.
22731 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote she glanced at her watch it was.
22732 	X	james clavell bosskey net quake iii arena http www bosskey net qa a personal guide to quake iii.
22733 	X	samuele pedroni pedronis at bluewin ch wrote in message news e at news bluewin ch.
22734 	X	i think samuele has expressed my worries very.
22735 	X	i fear a long discussion with dozens of different proposals and threads will finally annoy people and make them more incline to the no thanks.
22736 	X	i wasnt seriously speaking when i said i will post messages to convince people that then is better than if but i fear people will do.
22737 	X	this would go against the yes.
22738 	X	btw i am still in the yes party but having seen many ugly proposals and the critiques of the no party i must say that i am now in the line yes but not to everything.
22739 	X	unfortunately at this point there is no way to slow down the discussion.
22740 	X	erik what do you plan to do.
22741 	X	i guess you want to set up a web page where people can vote the different proposals and see if there is a proposal with a majority consensus majority in the yes party i mean.
22742 	X	aahz at pythoncraft com aahz writes.
22743 	X	i see a camp that wants a clear definite explicit way to express a conditional expression and a camp that prefers secret master pythonista bizarre idioms like x and y or z with rework required if it turns out that y can be none or or the empty list.
22744 	X	from my view conditional expressions are in the simplicity camp and x and y or z is from the secret master pythonista.
22745 	X	but only means or in this sense if youve experienced it from the c like.
22746 	X	the bitwise or operator from python is seeing two in a row doesnt make one automatically think oh that must be logical or.
22747 	X	so that question mark is a test.
22748 	X	oh this is a little baby if then else.
22749 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote there i was there i was splitting atoms with my desire lamya computer science http www alcyone com max reference compsci a computer science.
22750 	X	part of the enjoyment of reading those books is the use of more complex.
22751 	X	and most books are read by far fewer people than use.
22752 	X	and it is hard and does take effort to read books in other.
22753 	X	most people will decide not to read a book if its too hard to.
22754 	X	i would rather not that people ignored python because it has become too hard to.
22755 	X	and those people wont criticise the author theyll say its too hard for me placing the blame on.
22756 	X	as for french my spanish is bad and my german and swedish much worse because i dont know a lot of.
22757 	X	when i try to read or communicate in those langauges i realize just how much work it is to learn a language which leads to.
22758 	X	i do know people who learn human langauges for fun but i am not one of.
22759 	X	ive tried to figure out lisp several.
22760 	X	i understand it in the abstract but i still cant figure things out looking at the.
22761 	X	ive had to read home brew programming languages were i couldnt even figure out why certain things.
22762 	X	well years ago we needed this special case for the tokenizer parser optimizer and it was easiest to put a flag here.
22763 	X	its even worse for those in my target audience who do not want to be good programmers but would rather be good scientist and simply need to do some progamming as part of the.
22764 	X	i promote python for computational biologists and.
22765 	X	these are people who use computers for their joband do a bit of programming but do not generally consider themselves to be.
22766 	X	i promote python because its a language which is easy to use and understand by a broad range of.
22767 	X	scientists can start using it with little effort precisely because they need only to pick up a few basic terms and can hope to understand.
22768 	X	and yet python is also enjoyed by expert programmers because it is a very powerful and expressive.
22769 	X	this means that as a scientist gets more and more proficient at python and writes more and more complex programs there is no need to switch to another langauge to get more expressive.
22770 	X	it also means that code written by the scientist can realtively easily be integrated into the main codebase developed by the software.
22771 	X	and it means the software developers can more easily help a scientist with a bit of tricky.
22772 	X	the more and more complex python gets the harder it is for people who dont want to be software developers to learn how to use.
22773 	X	in the lab code gets swapped around and passes on through several generations of grad students and.
22774 	X	it is good that there is only a limited vocabulary from which to.
22775 	X	otherwise is becomes harder and harder to figure out someone elses code especially since the people im talking about dont want to learn the whole gamut of the language and prefer to stick to a subset of terms which gets things.
22776 	X	this leads to dialects and leads to a lack of the ability to share code and learn from.
22777 	X	and as ive pointed out through these threads i think that cure is worse than the.
22778 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote if you cant fight and you cant flee.
22779 	X	robert elliot physics reference http www alcyone com max reference physics a physics.
22780 	X	as far as i can remember the last time i wanted to use that construct i couldnt because b was.
22781 	X	if i col none else col cols i.
22782 	X	here cols i is a string and i didnt want to assume that it is always nonempty so the and or construct doesnt.
22783 	X	i think this would be a good candidate for a one liner.
22784 	X	col cols i if i else none.
22785 	X	i also just grepped through the same small project lines and found two examples where i did use the.
22786 	X	in both cases i used x and or to normalize a.
22787 	X	of course that could have been not not x or better in bool x.
22788 	X	to me the fact that people are treating a and b or c as a standard idiom is a sign that we should replace it with something less likely to be buggy and more.
22789 	X	david eppstein uc irvine of information computer science eppstein at ics uci edu http www ics uci edu eppstein.
22790 	X	erik well its unambiguous but it could require some extra erik.
22791 	X	im no python parser expert but it seems to me the erik only case this happens is when the conditional expression is erik used as a standalone statement e g.
22792 	X	erik if debug sys stderr write got here n else none.
22793 	X	why is extra lookahead required here.
22794 	X	the if is the first token in the statement so it can only denote an if statement not an if.
22795 	X	then we look at the grammar which says that an if statement in this case is.
22796 	X	and we see that a suite must end in a.
22797 	X	this example is therefore a syntax error one way to rewrite it is.
22798 	X	if debug sys stderr write got here n else none.
22799 	X	erik which i must admit is a little perverse in and of itself erik particularly as an example but guido used it in the pep so i erik will use it here.
22800 	X	no saying duh just remove the else erik none i know that perfectly well and so did.
22801 	X	i would erik have no problem with say requiring parentheses in this one erik case in all other cases if youre expecting an expression and erik you see an if you know whats.
22802 	X	if debug sys stderr write got here n else none.
22803 	X	then the if is no longer the first token in the statement so it introduces an if.
22804 	X	all thats needed is to check whether the if is the first token of its.
22805 	X	on the other hand if you drop one of the if tokens.
22806 	X	its a syntax error and its still a syntax error if you drop the at the end.
22807 	X	erik but thats true with any form of a conditional operator as the erik conditional expression of an if statement and quite frankly in erik any language that has both an if statement and a conditional erik operator thats just.
22808 	X	the only thing that makes it erik look like a stutter here is the fact that you see two ifs in a erik row which i think would be almost a benefit for the jackass who erik wrote this code right away you know someone did something erik weird instead of having to wade through.
22809 	X	andrew koenig ark at research att com http www research att com info ark.
22810 	X	on feb rumours say that paul rubin.
22811 	X	this is not a follow up just to pauls post its more.
22812 	X	i too dont believe that aahz wont.
22813 	X	given that in this specific case of pep there is no way that he can consciously or unconsciously set up the.
22814 	X	the syntax is that x if c else y he didnt ask for alternative.
22815 	X	he rejected if c then x else y for.
22816 	X	there one can say that if is not necessary and the then need not become a keyword but its not the proposed.
22817 	X	he talked about a clear majority and he knows what he.
22818 	X	if he didnt know at the time what he meant i trust him that when its time he will know what he meant.
22819 	X	aahz interpreted clear majority as supermajority but it was just a guess on his.
22820 	X	anyway he wont be the judge of what clear.
22821 	X	and it was honourable on his part were con pep to propose postponing the final decision for a year if there wasnt a clear.
22822 	X	all we have to do is agree on the voting process and then vote guido said so and he has the upper.
22823 	X	so i like the idea of aahz tallying the.
22824 	X	aahz prepare yourself for heavy incoming fire tzotzioy i speak england very best real email address dhpvdebzawwtdgvjlmdy n decode base.
22825 	X	but your declaring something as not were standard does not make it.
22826 	X	there is no standard theres just what different languages.
22827 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote there was one thing i didnt show i love him and he doesnt know zhane bosskey net return to wolfenstein http www bosskey net rtcw a personal guide to return to castle.
22828 	X	i still do upwards of of my development in c sadly so that is one statement i absolutely agree.
22829 	X	are you sure common lisp is object oriented.
22830 	X	its a bit of a surprise if it.
22831 	X	as i recall the whole point of xlisp was to add object oriented features to.
22832 	X	its one of the features i like about python in.
22833 	X	you seem to think i was attacking lisp or the that i was attacking the selective and and or.
22834 	X	i was speaking up for terry after he was attacked for using the everyday meaning of the word standard plus waffling on a bit because i couldnt sleep and was.
22835 	X	what we dont need a precedent for adding selective and and or as we already have them.
22836 	X	and when did i criticise lisps semantics.
22837 	X	erik criticised terrys use of the word standard and cited lisp in a way that implied lisp defined a standard others have to.
22838 	X	i wanted to point out that lisp is not a.
22839 	X	lisp is not famous for its readability or ease of.
22840 	X	it is famous for were powerful and for setting precedents in terms of the available facilities that have influenced many languages and for good reason but that doesnt mean that the lisp syntax is the best possible model or a definitive standard to.
22841 	X	when lisp was invented the complexity of computer language parsing was a major concern when developing a.
22842 	X	it was worthwhile having a awkward for humans syntax if that meant the parsing was.
22843 	X	today the most important thing is whether human readers can parse the.
22844 	X	but i would never argue that lisps semantic features were a bad.
22845 	X	python has the selective and and or operators and i would never suggest taking them.
22846 	X	ive used the and or idiom just like many other people and i really dont want my code to.
22847 	X	however when they are used to mimic a conditional expression they simply arent.
22848 	X	they made sense in lisp but in readability and reliability terms they can certainly be improved upon in.
22849 	X	the fact that lisp fits neither the standard form of imperative nor functional languages is just that a simple.
22850 	X	this thread has already seen one person reading value judgements in where none exist why did it need another.
22851 	X	precisely and at present statically typed languages still dominate in most non internet related.
22852 	X	as i said elsewhere in the.
22853 	X	however statically typed languages dont reign in the way they once.
22854 	X	as dynamically typed languages become more popular and as i hope functional languages get more and more recognition outside of academia it will be interesting to see if the current de facto standard gets.
22855 	X	yet scheme seems to have an if cond true value false value function provided as.
22856 	X	yet perl according to an old reference guide i have provides a c like condition.
22857 	X	true value false value conditional expression odd as i saw true value if condition else the point.
22858 	X	not quite sure what youre saying there other than that smalltalk methods are called messages but thats hardly relevant or that if i understand and and or correctly its possible to override operator behaviour rather like defining and in python.
22859 	X	if you evaluate true x in smalltalk youll get x identical to.
22860 	X	but on the other hand guess what happens when you evaluate iftrue iffalse yes smalltalk has an explicit conditional expression.
22861 	X	true value false value behaves as any c programmer.
22862 	X	quite right selective and and or are consistently provided in dynamically typed.
22863 	X	but a far more readable conditional expression is also consistently provided and preferred in cases where it is.
22864 	X	which means that standard usage in dynamically typed languages is to use conditional expressions for selection and boolean operators as pure boolean.
22865 	X	at the moment statically typed languages are losing their claim to were any kind of standard maybe selective and and or will become the norm as dynamically typed languages gain.
22866 	X	in a sense given the number of languages that already support them that is almost certain to be.
22867 	X	i happen to believe that selective and and or are historic hangers on a solution to a problem that is better solved another.
22868 	X	that is one judgement that i own up.
22869 	X	but even if of the people here agree with me obviously not true you neednt worry about that judgement as no one is proposing to remove the selective behaviour of and and or from.
22870 	X	lisp is an important and powerful language but not a readable or intuitive.
22871 	X	that is another opinion of mine which could be seen as judgemental though i doubt many people would seriously disagree with.
22872 	X	beyond that what i wrote was at least intended to be pure objective.
22873 	X	i was after all countering what i saw as an unjustified reading in of judgement where none.
22874 	X	steve at ninereeds dot fsnet dot co dot uk.
22875 	X	maybe it could be easier to understand and to attach according precedence with.
22876 	X	but this has the drawback of a new.
22877 	X	so if the list likes the x and y else thing ill second.
22878 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
22879 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
22880 	X	the combination of the punctuation and a keyword still gives me an.
22881 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote light more light.
22882 	X	the last words of goethe a personal guide to online multiplayer first person.
22883 	X	an obvious choice would simply be to eliminate the group iii proposals those which were never seconded they never received any independent support and include just whats in i mentioned in the pep and ii proposed and seconded.
22884 	X	i think suggesting for feedback via email on anything at this point is going to send the wrong message despite your.
22885 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote im sharing the joy im glowing like sunshine chante moore rules for buh http www alcyone com max projects cards buh html the official rules to the betting card game.
22886 	X	wow very very cool im definitly all for.
22887 	X	i agree confusion would be caused by the colon and yet i cant say it isnt.
22888 	X	but all said and done i like this the best just saying it out loud almost sounds poetic so it must be.
22889 	X	guido van rossum guido at python org wrote in message news.
22890 	X	christian tismer tismer at tismer com writes.
22891 	X	lcs that ive seen havent been.
22892 	X	one python implimentation of the ternary operator expresses the problem as selecting from a list of alternatives tvalfval not cond.
22893 	X	i was thinking over how to generalise this into a more powerfull and readable form and came up with this syntax.
22894 	X	whose degenerate ternary operator form is.
22895 	X	i think the parentheses should be.
22896 	X	personally i dont have a problem with the use of.
22897 	X	the ternary operator is an operator and in general operators need to be compact and consise and.
22898 	X	this is true for all operators in python with the exception of in and.
22899 	X	all of the suggestions i have seen so far that use textual operators e g tokens such as if then else seem too verbose to me and when i scan expressions using them its hard for me to separate the variables from the.
22900 	X	heres a couple of use cases rehashed to my proposed ternary syntax.
22901 	X	x y sqrt y ext is html text.
22902 	X	html txt print widget s loaded num s.
22903 	X	some uses of the extended syntax.
22904 	X	here the union of types and classes really shows its benefits having join as a class method sounds pretty.
22905 	X	i think this is the time to add all the string constants which have been in the string module to the str type.
22906 	X	this would make the string module really.
22907 	X	example str uppercase should act like sring.
22908 	X	it still smells a little weird though since the string module had its parameters in a different.
22909 	X	so maybe join was somewhat logical but not a very good decision after.
22910 	X	but at that time nobody ever expected that strings would be like a class in near.
22911 	X	str join file interactive input line in.
22912 	X	typeerror join takes exactly one argument given.
22913 	X	well the method is probably not well suited to be called by the class only expecting to be a method always.
22914 	X	join seq is equivalent to str join seq which is not what we.
22915 	X	retrospecively applying this thought a string cannot have a join.
22916 	X	or the str class needs to have a class method of str join seq as.
22917 	X	if you want it perfect first time you wont get anything chris christian tismer mailto tismer at tismer com mission impossible oftware have a break.
22918 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
22919 	X	andrew koenig ark at research att com wrote in message news yurfhmnh fsf at europa research att.
22920 	X	there was a recent thread myth python is ideal for beginners where a number of folks seemed to take offense at the idea that python was not easy to pick.
22921 	X	i consider myself a pretty experienced programmer i know lots of different languages though not perl which is evidently the origin of some of these constructs and the first time i ran into lamdas and list expressions i did a triple take trying to figure out what was.
22922 	X	in fact as i recall it took quite a bit of work to figure out what it was i should be looking up in the help files wheres the operator or keyword that i should be searching.
22923 	X	now i realize that ease of learning and ease of use are not necessarily compatible but even though i can switch between an rpn and algebraic calculator with ease i struggle with parsing lcs lambdas and even to a degree this newly proposed if then else syntax.
22924 	X	im not proposing that python should become cobol verbosity is no guarantee of readability either but this seems to take python further down the road of a write only.
22925 	X	btw in my first and second reading of the code snippets above i missed the around the if then else so i was reading it that the if i test ran first and only if its false did the for statement clause.
22926 	X	now you can certainly argue that i was were careless in reading the code but is the savings of a few lines of code really worth the potential for confusion when another developer looks at and has to support the code.
22927 	X	this doesnt implement short circuiting which is the whole purpose of a conditional.
22928 	X	see the pep this scheme is explcitly.
22929 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote you win the victory when you yield to.
22930 	X	sophocles cranks crackpots kooks loons on the.
22931 	X	form is declared unusable by fiat and i must say i agree emf it overloads the use of the colon too much it seems only reasonable emf that the two intervening things in the ternary conditional operator be emf keywords and both be.
22932 	X	having one a symbol whether already emf used in the language or not and the other a keyword whether already emf used or not seems.
22933 	X	it just dawned on me that the if is not really.
22934 	X	would be a more pythonic operator than.
22935 	X	i think because it stands out.
22936 	X	and indeed it looks a bit strange to have the other part as a.
22937 	X	what about condition true part false part the is not a tuple here but it belongs to the and the says to select one of the expressions based on the condition and evaluate that kind of lazy.
22938 	X	we could then also have one for ints rather than bools.
22939 	X	i v v v which would pick v i and evaluate.
22940 	X	also here the is not really a list notation but belongs to the.
22941 	X	piet van oostrum piet at cs uu nl private email p van oostrum at hccnet nl.
22942 	X	samuele for example the in else is absolutely spurious for the samuele expression.
22943 	X	at present else is always followed by which means that the is absolutely spurious in all.
22944 	X	i see no reason to change.
22945 	X	andrew koenig ark at research att com http www research att com info ark.
22946 	X	andrew koenig ark at research att com wrote in message news yuragkaw fsf at europa research att com.
22947 	X	yes that is a nice way of writing the.
22948 	X	at first glance i think cs syntax is more concise consistent and does not confuse statements and.
22949 	X	pythons current idioms for conditional expressions can be improved upon a bit and imo the.
22950 	X	im not sure about the very statement like syntax.
22951 	X	at least it is in the right order.
22952 	X	can you imagine explaining why this is good syntax.
22953 	X	if x print y else print z.
22954 	X	if x print x else print y.
22955 	X	not the complete point which i would argue is.
22956 	X	if the if else expression is added to python will that construct promote use and if so by how much.
22957 	X	both in the number of uses and the amount of improved readability.
22958 	X	promote misuse and if so by how much.
22959 	X	my analysis of c c code suggests the number of uses in python code is on the order of about every.
22960 	X	others have come up with smaller numbers down to every lines but i think that analysis is wrong.
22961 	X	so lets say its every lines which i still assert is more often then it will be used in real python.
22962 	X	now my other analysis suggests a misuse rate roughly equal to a use.
22963 	X	a x if x y else y instead of a min x y.
22964 	X	s chr i if i else i instead of s abcdef i.
22965 	X	i have yet to see an analysis which suggests my estimate of misuse rate is high but then again there are messages still.
22966 	X	construct very hard to read much harder than.
22967 	X	the reason of the unreadability were the colons since she liked.
22968 	X	z if c then x else y.
22969 	X	even if i prefer the form without if to avoid any possible confusion with the statement.
22970 	X	if you think that programming languages should be written for experts only who like to decipher unreadable constructs then maybe you should give a try to perl.
22971 	X	evan simpson evan at am com wrote in message news.
22972 	X	i think thats the point where we disagree in my view ideally one should be able to understand how something works without checking the.
22973 	X	in the real life of course this is impossible but this does not means that we should not pursue that ideal especially with.
22974 	X	i tested the proposed syntax showing it to my girlfriend see the thread on usability studies.
22975 	X	she is an happy non programmer and found the.
22976 	X	but is that because of the idea of a conditional expression in general or just the particular syntax used in c.
22977 	X	greg ewing computer science dept university of canterbury christchurch new zealand http www cosc canterbury ac nz greg.
22978 	X	aahz at pythoncraft com aahz writes.
22979 	X	of course they dont go around proclaiming x and y or z to be the secret master.
22980 	X	if they did that it wouldnt be much of a secret.
22981 	X	then is not a keyword at.
22982 	X	andrew koenig ark at research att com http www research att com info ark.
22983 	X	ive just read the pep it seems to be doing the rounds in blogs and havent followed the discussion so this might have been covered although searching google for tertiary and lazy on the group turned up nothing.
22984 	X	if using a funcion like cond a b c doesnt work because of eager evaluation of parameters you might consider adding lazy evaluation to.
22985 	X	i would guess the general consensus on this is something like lazy evaluation may be powerful in some cases but we can get the same functionality in other ways and we dont want to scare the bejeezus out of newbies.
22986 	X	but it can be so neat and maybe someone smarter than me can find a super elegant syntax or something.
22987 	X	andrew koenig ark at research att com ha scritto nel messaggio news yunlpvtj fsf at europa research att.
22988 	X	you should not assume that people have done their homework when they ask this kind of thing or that they have a firm grasp of the conceptual framework of things people typically come with why this does not work.
22989 	X	and you think it is clear that it cannot.
22990 	X	if x print positive else print negative for x in l print x.
22991 	X	in article yurubyi fsf at europa research att com.
22992 	X	how is that any different from tuples.
22993 	X	at least this gives an explicit error.
22994 	X	aahz aahz at pythoncraft com http www pythoncraft com.
22995 	X	register for pycon now http www python org pycon reg html.
22996 	X	people using the ternary op may easily fail to realize that the idiom isnt the right one all the.
22997 	X	for example it might prevent people from learning about the specific pythonic behaviour of and or returning the short circuiting.
22998 	X	result hasattr obj method and obj method.
22999 	X	is not obvious to them but result obj method if hasatttr obj method else none.
23000 	X	is because people just know the ternary op and disregard and or and finally its used in non assignments because it works.
23001 	X	there are almost always more future users of a language than current.
23002 	X	expressions can be used anywhere and thus have higher potential of messing up readability than e g new.
23003 	X	if you use the same notation as for creating a dictionary it will be unobvious to put it mildly that options not selected are never.
23004 	X	just looking at this i would expect it to behave like true x false y c.
23005 	X	and terry meant that if you think that is the same as eleven tenths then you are.
23006 	X	the parallel seems perfectly valid to.
23007 	X	of the wordy formats that is probably my favorite but i prefer no keywords.
23008 	X	t spam not in s customer eggs in s vikings waitress could be spelled true waitress.
23009 	X	t spam not in s customer eggs in s vikings waitress.
23010 	X	sure for a suitable definition of binding wink.
23011 	X	guido once asked for a vote on whether imaginary literals should be denoted via an i or j.
23012 	X	j won and thats what was.
23013 	X	could we perhaps consider making if an expression in every case and have it evaluate to the last expression in the block so we could write.
23014 	X	actually he does mean x when c else y not c when x else y.
23015 	X	and while were here doesnt that sound nice.
23016 	X	wear jacket when outside iscold else none.
23017 	X	i like how the first option you want for wear is seen first and i like how a when expression could never be confused with an if statement and i like how it reads as an english sentence and i like that a little language designer already used it and that developers using that language are fine with.
23018 	X	and no the condition is not out of.
23019 	X	tired of tilting at windmills ly.
23020 	X	erik max francis max at alcyone com wrote in message news.
23021 	X	erik and myself read exactly the same thing and came to two completely different.
23022 	X	erik is afraid aahz is stacking the vote in favor of.
23023 	X	im afraid aahz is stacking the vote in favor of it were.
23024 	X	aahz at pythoncraft com aahz writes.
23025 	X	as a no voter id say that applies to at least some of us.
23026 	X	id classify myself as unsympathetic in general but not strongly maybe a bit more than mildly.
23027 	X	however every proposed syntax i have seen strikes me as dreadful i get the impression that they all come from the conditional expressions at any cost.
23028 	X	my criteria are similar but probably include a lot of extra provisos that i cant.
23029 	X	and theres a huge component of gut instinct which i have no hope of.
23030 	X	but of course the suggested voting procedure is going to destroy any chance of something like this happening isnt it.
23031 	X	the first vote is yes no on having anything which will instantly polarise.
23032 	X	i dont know how many people will say no because they fear a truly ugly syntax getting accepted at stage nor do i know how many people will say yes in the hope that someone will come up with a nice idea for.
23033 	X	i think youve persuaded me that the only meaningful process in the sense of having a chance of having the people who lose accept their defeat is to have a vote on a specific proposed.
23034 	X	that syntax needs to be agreed before the.
23035 	X	id suggest you have a stage process.
23036 	X	reach a conclusion on a syntax to put into pep.
23037 	X	this debate must have a very hard deadline imposed or we never get.
23038 	X	the agreed syntax becomes the official position of pep and all other proposals are included in the pep and noted as rejected by the community.
23039 	X	if no clear winner can be achieved pep remains as it stands with guidos expr if cond else expr syntax and all the proposed syntaxes are put in the pep and noted as rejected by the.
23040 	X	vote on the possibly modified pep.
23041 	X	tally the counts and hand them to.
23042 	X	if you want to summarise them as yes no undecided then set required majority levels but to some extent thats just another chance for people to complain.
23043 	X	to some extent anything else doesnt match the oficial pep process where the pep is modified to match the proposed solution and then the pep is accepted or rejected once its finalised and ready for a decision.
23044 	X	the only difference is that a community vote takes the place of a bdfl pronouncement at least until guido decides he doesnt agree with us.
23045 	X	sean i especially enjoyed contrariwise andrew koenig.
23046 	X	i think its from tweedledum and.
23047 	X	sean mostly i just wanted to avoid a specific edge case someone mention much sean earlier in the thread.
23048 	X	thats part of the reason im only instead of.
23049 	X	but i think its an unusual.
23050 	X	at least it alerts the reader that something is going on.
23051 	X	sean or as was proposed earlier.
23052 	X	sean none of the above constructs is particularly wonderful none is sean particularly clear and hopefully none of them would ever be sean.
23053 	X	but of those listed i find the when variant to be the sean least.
23054 	X	sean although i dont consider it to be either obvious or.
23055 	X	it puts the false condition ahead of the true.
23056 	X	it evaluates both alternatives even though only one is.
23057 	X	andrew koenig ark at research att com http www research att com info ark.
23058 	X	when what seems like tens of thousands of postings ago pep was first released i was on some form of ternary operator were introduced but im now down to and as things go will end as or even.
23059 	X	the most unadorned form of a conditional expression is.
23060 	X	which is nearly unreadable without keywords punctuation separating the three.
23061 	X	with some proposals put forward there is possibility for confusion if colons particularly as in else are used as i can imagine its not always going to be clear whether a code fragment is part of an if elif else statement construct or a conditional.
23062 	X	a possibility that avoids all ambiguity would be.
23063 	X	when condition then truevalue otherwise falsevalue.
23064 	X	the examples above would be guessing at the precedence required some a when b then c otherwise d or a when b then c otherwise d.
23065 	X	but this introduces three keywords could reduce to two if else was used instead of otherwise and is quite wordy even cobol like i think i havent written any cobol for thirty years.
23066 	X	this message is checked for all known viruses by the messagelabs virus scanning.
23067 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
23068 	X	andrew dalke adalke at mindspring com writes.
23069 	X	for me at least its absurd to say that the above is clearer than a conditional.
23070 	X	plus way too much time on their hands.
23071 	X	the net result is the longest threads of any newsgroup ive frequented not counting c l p and pep.
23072 	X	the point is that people who may not be as competent as you will want the functionality use the flawed substitutes and introduce.
23073 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote life is an effort that deserves a better.
23074 	X	karl kraus alcyone systems san jose.
23075 	X	n d efford nde at comp leeds ac uk writes.
23076 	X	ive seen longer threads involving playstation x box fans but the quality of debate was roughly.
23077 	X	sigmask py version feed this to your.
23078 	X	print reduce lambda xy x chr ord y ojdlwbshjti.
23079 	X	this is a bit of revisionist history a bot cant let.
23080 	X	guido was on record in favor of in the first year of pythons life but didnt give it high priority and as the years flew by it became clear there were thorny design issues that needed to be worked out.
23081 	X	the ascendance of numpy pushed it along in a big way doing a a b in a memory efficient way when a and b are multi megabytes arrays isnt easy without fiddling the byte code but its straightforward for an iadd method.
23082 	X	string methods were even more of a sure but whos got time for it.
23083 	X	jpython and the introduction of unicode strings tipped the balance toward action on that.
23084 	X	nothing similar has happened to push conditional expressions to the.
23085 	X	when guido implemented them two years ago ive given a reference to the patch on sourceforge several times he ended up rejecting his patch because he didnt find good uses in the standard.
23086 	X	i went through a similar exercise recently and found only a few but then im quite accustomed to seeing dirt simple uses of and or by now like.
23087 	X	and wouldnt bother to change such existing.
23088 	X	you get used to it which isnt a ringing endorsement wink.
23089 	X	the perceived lack of which wide applicability were why guido rejected his implementation of conditionals last time.
23090 	X	i cant say ive seen many compelling use cases in this incarnation of the beast and no min and max arent compelling although they would be if they werent built in already if functions like that were common id expect to see some examples other than min and max wink.
23091 	X	expression is optional in c as it would be in.
23092 	X	most of the other constructs you mention are necessary in c and thus theres no.
23093 	X	some have argued that the conditional expression construct is intrinsically hard to.
23094 	X	if this were true one would expect that the right honorable bdfl would avoid using it in his own.
23095 	X	my point is that since bdfl clearly sees fit to use it routinely in his own c code then it must not materially impair readability nor be all that hard to.
23096 	X	furthermroe if you took the time to read his cited code all are examples of things that one might reasonably want to do in a python.
23097 	X	your response shows an irrational prejudice against c which i believe drives the bulk of the anti pep.
23098 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
23099 	X	i think you and others exagerate the cost danger of overloading if.
23100 	X	overall defining a new interpretation for if one that may be unambiguously discriminated in all cases arguably is better than introducing a new keyword which necessarily breaks old code.
23101 	X	the middle out form is a lot more confusing than the strict left to right.
23102 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
23103 	X	when i get to the else in that statement my brain just goes huh.
23104 	X	it stops cold because else and and have no semantic relationship whatsoever to each.
23105 	X	im sorry but my brain just doesnt parse it even though i know at one level what its supposed to.
23106 	X	youre not supposed to have to run through the process of elimination before concluding whats surprising or.
23107 	X	they just sit flat on the screen devoid of meaning and waiting for some kind of translation to words that speak to.
23108 	X	i have to say our brains work in vastly different.
23109 	X	not only is it still entirely non obvious but no matter how much i look at it up to the finite amount tried to date anyway the and part gives no sense of a conditional.
23110 	X	in fact thats a reason to dislike the current idiom a and b or c even apart from the fact that it encourages certain.
23111 	X	any time someone writes its nice or its a neat trick in a discussion of this nature id like to run screaming from the we eschew neat tricks not embrace them.
23112 	X	this constitutes one of my only reservations about involved voting procedures how to reasonably present the results of a vote where people are really voting yes no abstain on n different things at.
23113 	X	the other concern would be that if the voting process itself is too complicated votes must be pgp signed or is not clear read these five paragraphs explaining this voting procedure which youre not familiar with then it will drive away potential voters due to simple lack of convenience polarizing the results even.
23114 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote if you cant fight and you cant flee.
23115 	X	robert elliot physics reference http www alcyone com max reference physics a physics.
23116 	X	but not backported to the branch despite that it was fixed long before was.
23117 	X	thats a real bug but of a different.
23118 	X	as to the code bug if someone wrote a unittest that managed to run exactly one test no more no less and some impressionable youngsters conception of singular vs plural was permanently damaged by seeing tests on the screen at the end i encourage them to.
23119 	X	not the psf though i hear microsoft has money to.
23120 	X	martin maney maney at pobox com writes.
23121 	X	x foo set default value if cond x bar.
23122 	X	should also count as potential places for a conditional expression even though no else is.
23123 	X	if cond x bar else x foo.
23124 	X	and so instances of it should be included in your database.
23125 	X	in article bfnd ke at slb atl mindspring net.
23126 	X	for values of a unicode character only available on an apl.
23127 	X	for yet another thread or was that this one also.
23128 	X	anders hammarquist iko at cd chalmers se physics student chalmers university of technology hem gteborg.
23129 	X	paul rubin http phr cx at nospam invalid wrote in message news xoficfpy fsf at ruckus brouhaha and some.
23130 	X	for some values of x math sqrt x is also incorrect but it does raise an exception.
23131 	X	the correct idiom is to only use the construction when is is correct.
23132 	X	the idiom is a straightforward consequence of pythons rules for and and or which many people have independently discovered and put to.
23133 	X	whether it is good usage or a bug is something we at least somewhat disagree.
23134 	X	i am quite willing to continue using and or unless and until there is an alternative that works even better and that does not strike me as were.
23135 	X	that will only happen when a substantial number agree on.
23136 	X	paul rubin phr nb at nospamnightsong com wrote in message news xptqfc fsf at ruckus brouhaha.
23137 	X	it depends on the reason you are reading the code.
23138 	X	reading the code to see the normal flow of events conditional seems a lot clearer reading the code to see all possible flows of events options then condition is clearer looking for a bug in a certain flow path either might be clearer other possibilities i cant think of.
23139 	X	is probably the norm and should probably be the determining use.
23140 	X	however you could argue that debugging is as important giving weight to also in the specific case above there is no normal flow and therefore is actually the most likely use.
23141 	X	im not particularly fond on the above representation but i think its important to realize that clarity depends on what you are trying to achieve when you look at.
23142 	X	one more reason to support conditional expressions because it will allow a single way to do it instead of every person coming up with a different hack to achieve the same.
23143 	X	today those who want to write a simple conditional expression have three choices.
23144 	X	using if statements enclosed or not in a helper function.
23145 	X	using the a and b or c hack which abuses the semantics of logical expression evaluation to give the desired result.
23146 	X	using the indexed tuple list technique which is fine for some problems but mistake prone because it forces the programmer to reverse the order of the true and false arguments or to reverse the test condition whatever you like more.
23147 	X	now having three different idioms is better than having a single one.
23148 	X	carlos ribeiro cribeiro at mail inet com br.
23149 	X	indexing isnt lazy all the sub expressions would be evaluated first no short circuiting.
23150 	X	the idea would evaluate only the ith sub.
23151 	X	with all the changes that have come in and now in i dont see how this is at all a convincing.
23152 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote she glanced at her watch it was.
23153 	X	james clavell bosskey net quake iii arena http www bosskey net qa a personal guide to quake iii.
23154 	X	thats just the use of a conditional operator as the conditional in an if.
23155 	X	thats bad style in any language python is not an.
23156 	X	im sure there will but thats true for every language syntax any syntax can be abused even in a language as straightforward and simple as.
23157 	X	will it give more expressivity to those who want the syntax and know and when how to use it properly.
23158 	X	people are already using broken unreadable mimics incorrectly.
23159 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote ride ride this wave of mine res esperanto reference http www alcyone com max lang esperanto an esperanto reference for english.
23160 	X	and as i pointed out when i first suggested it though later found out that i was not the first and which andrew koenig reminded me again independently of in email it easily lends itself quite easily to multiway extension.
23161 	X	if c x elif c y else z.
23162 	X	the only real complaint i can see about it is that it could in some circumstances take a little lookahead to make sure that what youve got is an expression not a statement so maybe the best solution there is to require parentheses.
23163 	X	if c x else y if c x elif c y else z.
23164 	X	theres no way an if keyword preceded by an open parenthesis could be an if statement so that separates the two really easily and really early on i dont know enough about the parser internals to know whether this would be a distinct.
23165 	X	if such a structure were adopted i cant see myself not using parentheses to set it off.
23166 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote patiently im still holding out until sandra victor a lambda calculus explorer in.
23167 	X	with my latest that would be spelled.
23168 	X	self stream writeln ran d test s in.
23169 	X	andrew koenig ark at research att com ha scritto nel messaggio news yuvfzqpyy fsf at europa research att.
23170 	X	if first thing on a line vs is a parser language lawyer fine.
23171 	X	i dont recall the precise sentence but the timbot once stated that you are always going to get questions you can only somehow steer what kind of questions you are going to get.
23172 	X	i dont like the naive questions that if else statement if else conditional expression could.
23173 	X	not according to http www electionmethods org.
23174 	X	if were going to go through the rigamarole of stv were definitely going for condorcet which is provably better than.
23175 	X	note that stv irv instant runoff voting.
23176 	X	aahz aahz at pythoncraft com http www pythoncraft com.
23177 	X	register for pycon now http www python org pycon reg html.
23178 	X	samuele x samuele y samuele z.
23179 	X	and i am not proposing that.
23180 	X	andrew koenig ark at research att com http www research att com info ark.
23181 	X	this doesnt look like a good counter to the c then x else y proposal since using when as the keyboard would imply the same ordering as the original proposal.
23182 	X	as in put a jacket on when its old cold outside otherwise else where what you.
23183 	X	this form with the condition in the middle has already been suggested in fact it was one of the first alternatives to the first if else proposal brought.
23184 	X	definitely reads wrong in english if you want this form the when should be a.
23185 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote you win the victory when you yield to.
23186 	X	sophocles bosskey net quake iii arena http www bosskey net qa a personal guide to quake iii.
23187 	X	andrew at acooke org andrew cooke writes.
23188 	X	given the thousands of posts on this topic how could it not have been.
23189 	X	tertiary is a new and creatively bad search term for this topic.
23190 	X	adding lazy evaluation to python to get a conditional operator is just plain bonkers.
23191 	X	theres a reason for this table.
23192 	X	no side effects side effects ml ish python c strict probably some many others others lazy haskell gaping void.
23193 	X	same software different verbosity settings this one goes to eleven the effbot on the martellibot.
23194 	X	if condition statement aahz aahz at pythoncraft com http www pythoncraft com.
23195 	X	register for pycon now http www python org pycon reg html.
23196 	X	the general problem is that it is not easy to switch from block to expression mode in the.
23197 	X	you usually are in either one and cant backtrack to the other.
23198 	X	extroplating from my earlier analysis previously i noted that the if else expression will be used appropriately about in every lines of python.
23199 	X	based upon inspection of existing c c and python.
23200 	X	as i recall nearly all cases perhaps of did not involve a case where short circuiting was relevant both sides of the expression could be evalutated without side.
23201 	X	in addtition in a majority of those cases perhaps in the branches were constant as in a simple number or string so there is very little performance.
23202 	X	that suggests that short circuiting if else expression will be used appropriately about once every to lines of python.
23203 	X	erik and practically every language feature thats been added since erik the earliest.
23204 	X	most languages can be boiled down to a erik tiny subset of their basic control structures that are exactly erik as expressive in the turing complete sort of meaning as the erik original but that hardly means that the extra syntaxes such as erik the for control structure in python you can write than in terms erik of a while are mere syntactical.
23205 	X	some languages ml and scheme come to mind define a core set of features and then define the rest of the language in terms of the.
23206 	X	for example if i remember right in ml the definition of.
23207 	X	if expr then expr else expr.
23208 	X	in other words in ml an if expression is just an abbreviation for a particular kind of case expression and so.
23209 	X	andrew koenig ark at research att com http www research att com info ark.
23210 	X	the parser already looks ahead to do its.
23211 	X	thats the whole point of a.
23212 	X	the only technical problem is if a proposed construct is ambiguous in the sense that the parser simply cannot resolve.
23213 	X	in which case the construct cannot be.
23214 	X	many of the proposals have been rejected because they seem ambiguous in a subjective sense a higher non technical non objective.
23215 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
23216 	X	on sat feb erik max francis max at alcyone com.
23217 	X	ok preoccupied was a bad choice of.
23218 	X	im still catching up on these threads i.
23219 	X	its still a ternary operator but the leading if warns you whats coming and makes a big difference to.
23220 	X	unary and binary operators are great but with longer syntactic structures i like to be told at the start what is.
23221 	X	there is basically a limit to how much my brain can parse at a.
23222 	X	i said something similar when i suggested either as a prefix for if else.
23223 	X	there comes a point when i have to consciously read from left to right without that implying an execution order and an explicit leading keyword makes life.
23224 	X	getting back to the point though personally i tend to agree with those who say the reading order issue is one of familiarity rather than anything more fundamental but i do see your.
23225 	X	steve at ninereeds dot fsnet dot co dot uk.
23226 	X	dave yes but for at least two good reasons multiline expressions in dave python require to join the lines and this shold be no dave exception and print is a statement theres no risk for dave hidden bugs because the code wont even compile and thats a dave good thing.
23227 	X	multiline expressions dont require to join them if the newline appears at a point where parentheses are.
23228 	X	andrew koenig ark at research att com http www research att com info ark.
23229 	X	name if user user get name else nobody.
23230 	X	if user name user get name else name nobody.
23231 	X	some thought is required but it seems to me to be the same in both.
23232 	X	i understand that you believe those things but can you explain why you believe them.
23233 	X	do you by the way feel the same way about short circuiting and and or.
23234 	X	item is good i and a i is good.
23235 	X	gareth mccaughan gareth mccaughan at pobox com sig under construc.
23236 	X	the pattern for using if operator is actually fairly narrow even asuming the if elif else form.
23237 	X	it applies when you have a need to select among several n largely unrelated sub expressions some of which in general have side effects selected by n boolean.
23238 	X	the resulting intermediate value then is used in concluding evaluation of the rest of the.
23239 	X	as with even the most trivial programming constructs there is some wiggle room where depending on your view some flexibility is allowed and or judgement is.
23240 	X	its just fine as anti perl rhetoric but it doesnt hold beyond.
23241 	X	in particular python doesnt come close to fulfilling to this.
23242 	X	in all fairness i dont think any real language.
23243 	X	so its an unreasonable constraint to try and apply to pep.
23244 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
23245 	X	the use of brackets just seems wrong to me suggesting a list where there is none.
23246 	X	if the x if c else y syntax were truly made a special case of list comprehensions although how i cant see then i could envision it but it seems to me that if youre going to require offsetting punctuation parentheses are the right.
23247 	X	i dont think they need be required but i cant see brackets or curly braces suggesting a list and a dictionary respectively which is not there fitting the.
23248 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote light more light.
23249 	X	the last words of goethe a personal guide to online multiplayer first person.
23250 	X	fredrik so when you fail to come up with examples that proves fredrik your point its my responsibility to provide them.
23251 	X	fredrik are we playing logical fallacies bingo or what.
23252 	X	for most small examples of the form i would rather write x than y someone can come up with a retort of the form you should write z.
23253 	X	andrew koenig ark at research att com http www research att com info ark.
23254 	X	but why mingle with all this when anyone can simply make it.
23255 	X	or am i getting the concept all wrong.
23256 	X	it is in the sense of tims way to wrap the objects into objects with a truth value of true and having an ifelse function that picks it out again just avoiding that.
23257 	X	ifelse c and x or y.
23258 	X	both solutions indicate that the truth value association of objects isnt always to.
23259 	X	but why is this cure worse than the desease.
23260 	X	what is you way to cure the desease which exists.
23261 	X	ciao chris christian tismer mailto tismer at tismer com mission impossible oftware have a break.
23262 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
23263 	X	ive sent e mail to raymond hettinger requesting.
23264 	X	aahz aahz at pythoncraft com http www pythoncraft com.
23265 	X	register for pycon now http www python org pycon reg html.
23266 	X	i just wanted to raise a question about a process issue that seemed a blinking red sign to.
23267 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote life is an effort that deserves a better.
23268 	X	karl kraus alcyone systems san jose.
23269 	X	while i agree with most of petrys comments he misses something.
23270 	X	norman petry npetry at canada com wrote previously the objections to the x if c else y syntax have all been very weak.
23271 	X	most people who have criticised the proposal have done little more than to point out that the condition appears in the middle of the expression unlike c which presumably does things the right way.
23272 	X	my objection isnt that the order is unlike c.
23273 	X	my objection is that it is unlike.
23274 	X	in every python construct that exists now a condition is stated before the actions that depend on.
23275 	X	these are so familiar that petry may have forgotten them.
23276 	X	if c var x else var y.
23277 	X	theres extra in there and its a statement block rather than an expression.
23278 	X	but seeing the condition first is whats.
23279 	X	likewise a for or while loop has its condition.
23280 	X	and even a try except statement is similar.
23281 	X	the pattern evaluate a criteria then take action is quite uniform in.
23282 	X	mertz this message was brought to you by n o gnosis postmodern enterprises cx d o in a world w o walls there would be no gates z e.
23283 	X	i think youre missing the implied conditional of something that isnt.
23284 	X	this is not short circuiting and furthermore has the expressions.
23285 	X	other forms are slightly more idiomatic but still not immediately obvious such as p and x or y but these have problems this doesnt work right if x is false.
23286 	X	the point is that people want this.
23287 	X	whether or not theres a standard clear way to do it they will resort to such hideous atrocities as the ones.
23288 	X	the faq even attests to this although i get the impression it attempts to do so by demonstrating how nuts the solutions are i think that subtlety backfires.
23289 	X	the point is that people do write p and x or y even though it is not obvious to everyone that the intent is emulating a conditional operator and has a flaw if x is false.
23290 	X	people want it people will use emulations that are hard to read flawed or.
23291 	X	theyre not in the language now if it is ultimately decided that a conditional operator will not be added to the language then people will continue to ask for it continue to read the faq entry on it and continue to use emulations that hard to read flawed or.
23292 	X	a standard form of conditional operator that isnt horribly.
23293 	X	it should support short circuiting since if youre going to introduce a conditional operator theres no value in not making it.
23294 	X	to make an analogy with the boolean pep sorry the number doesnt occur to me immediately some of us wanted a boolean.
23295 	X	that was a case where the typename true constant and false constant bool true false were pretty obvious so there wasnt a whole lot of debate about what form it should take but ill wager that most people in favor of putting booleans in the language wouldnt have minded much if they were spelled bool true false or boolean true false or some.
23296 	X	the point is they wanted the feature theyd be satisfied with anything as long as it was built into the language and thus standard and not obtuse and.
23297 	X	in the case of adding booleans the choice was almost completely without dispute but you get the.
23298 	X	i see very much the same thing happening.
23299 	X	its far more important to me that a proper short circuiting conditional operator get added to the language than the precise details of what it looks like provided its not wholly.
23300 	X	the implied and something that doesnt suck has always been there sorry it wasnt.
23301 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote always forgive your enemies nothing annoys them so.
23302 	X	oscar wilde bosskey net quake iii arena http www bosskey net qa a personal guide to quake iii.
23303 	X	in fact it is quite common to use a conditional expression as a guard checking for a special case in which the general formula would.
23304 	X	y ifelse x is none none func x.
23305 	X	either of these would of course not work without short circuiting lazy.
23306 	X	i should just say nothing when given the teaching.
23307 	X	math is also taught and given the above argument we should presumably teach add rather than.
23308 	X	this breaks down only because of prior usage ie the existing mathematical language.
23309 	X	in the same way the existing usage by c c programmers requires strong arguments to void its.
23310 	X	my objection is first to the ordering and then to.
23311 	X	erik max francis max at alcyone com writes.
23312 	X	nonetheless they are valid examples and my point.
23313 	X	they are almost impossible to read easily i like that i can scan through python code and understand it as im going without having to back track here and there to figure out what a line.
23314 	X	i dont think that some potential abuses that you see possibly occurring immediately rules out the usefulness of a language.
23315 	X	and in fact when i read code by other people who want ternary operator like conciseness so badly that they fake it with the two element array subscripted by a bool or and or tricks i have more trouble puzzling out what they really mean than if there were a ternary operator available for them to use in the first.
23316 	X	so many programs will become easier to read as well and id hope that there would be a net gain.
23317 	X	personally as badly as i want a ternary operator i consider the above tricks too abusive and write out the extra four lines every.
23318 	X	jcm your claim was that side effects dont enter into the picture i jcm disagree.
23319 	X	saying your program is incorrect doesnt tell me jcm.
23320 	X	what im thinking of is languages such as haskell that are totally side effect.
23321 	X	the question then is what happens if one writes a program in such a language that divides by zero just to pick one.
23322 	X	the answer as i understand it is that the program terminates with a diagnostic message saying that the program could not be executed normally because it attempted to divide by.
23323 	X	in particular there is no mechanism in the language to intercept that error condition and produce a different result because such a mechanism would introduce side.
23324 	X	so the next question is what should a programmer do who wants to detect such an error condition.
23325 	X	my understanding is that haskell offers a number of library functions with behavior analogous to the following.
23326 	X	def divide num denom fail succ if denom return fail num else return succ num denom.
23327 	X	so the idea is that you specify in advance the computation that you wish to take place if the division is successful or unsuccessful and the library function takes care of evaluating the appropriate.
23328 	X	andrew koenig ark at research att com http www research att com info ark.
23329 	X	redefining truth used to be easier wink i mentioned it to guido late afternoon and his reaction was that it must have been cooked up by someone who spent too much time in this.
23330 	X	in the context of this thread i.
23331 	X	stepping back there have been lots of ideas in these threads that wouldnt have gotten a second glance had they been proposed a month.
23332 	X	however it may be hard to tell the difference unless youre guido wink.
23333 	X	the if c then x else y form was originally listed as an alternative in the.
23334 	X	its main point of contention was that the use of if made it harder to read since it could be confused with an if.
23335 	X	i personally dont buy into that argument but thats mainly where the c then x else y alternative came.
23336 	X	that is it came about precisely because some werent satisfied with the alternative youre suggesting which again was in the pep originally.
23337 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote no one should have to dance backward all their.
23338 	X	jill ruckelshaus url scanner maintainer and validator in.
23339 	X	tony tony can you imagine explaining why this is good syntax.
23340 	X	tony if x print x else print y.
23341 	X	anyone who wants to teach python has to figure out how to explain it as this is the state of affairs.
23342 	X	andrew koenig ark at research att com http www research att com info ark.
23343 	X	paul rubin phr nb at nospamnightsong com writes.
23344 	X	the point about requiring a supermajority is that it leaves a gap in which the procedure returns an undecided.
23345 	X	i think that any voting procedure on this topic which doesnt allow for an undecided result is misleading at best dishonest at.
23346 	X	paul this signature intentionally left blank.
23347 	X	i fully agree with you in fact i think that most people that reacted today tonight.
23348 	X	against the pep are just reacting because the new syntax is not familiar to them and the step by step evaluation.
23349 	X	btw my background is pascal not c c im not familiar with ternary operator either but i still think that it is a rather succint way to express some.
23350 	X	carlos ribeiro cribeiro at mail inet com br.
23351 	X	i believe that is what holger was doing when he wrote this.
23352 	X	but this is exactly the type of abuse i imagine we can expect when perl and c hackers come here asking the python way of saying cx y and you tell them x if c else y.
23353 	X	donn cave donn at drizzle com writes.
23354 	X	i think the idea is that therell be a separate.
23355 	X	which im not too happy about id rather the general consensus of the thread s be seen as the opinion of c l p.
23356 	X	too many people are likely to abstain from a vote based on my experience.
23357 	X	and in any case i think it proves something that guidos so fed up of all this that hes willing to implement something he basically disagrees with just to shut up the arguments once and for all at least thats how i interpret guidos opening remarks on the pep.
23358 	X	dictators shouldnt call referenda ly yrs.
23359 	X	now worries about that the rfd was.
23360 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote you win the victory when you yield to.
23361 	X	sophocles bosskey net quake iii arena http www bosskey net qa a personal guide to quake iii.
23362 	X	daniel dittmar schreef op zaterdag februari om.
23363 	X	the number of messages on pep has risen to almost egrep subject.
23364 	X	pep defending the python list python org wc l.
23365 	X	yesterday in total messages were posted to the group grep date.
23366 	X	sat python list python org wc l.
23367 	X	last week uniq posters posted to the group grep from python list python org sort uniq c sort n wc l.
23368 	X	of these posters posted more than once more than three times grep from python list python org sort uniq c grep vw sort n wc l grep from python list python org sort uniq c egrep vw sort n wc l grep from python list python org sort uniq c egrep vw sort n wc l grep from python list python org sort uniq c egrep vw sort n wc l grep from python list python org sort uniq c egrep vw sort n wc l.
23369 	X	maybe splitting c l py is a good idea although i doubt ternary would be the best choice.
23370 	X	of course this is discussed before and in the end nobody will be going to take the time to do the required job but possible options are.
23371 	X	c l py help c l py future c l py library c l py language c l py misc c l py advocacy c l py gui c l py platform dependant c l py moderated.
23372 	X	becasue messages a day can be splitted.
23373 	X	asperger syndroom een persoonlijke benadering http people nl linux org gerrit het zijn tijden om je zelf met politiek te bemoeien http www sp nl.
23374 	X	carel fellinger carel fellinger at chello nl writes.
23375 	X	def example self param default param default.
23376 	X	if you have to calculate the default at runtime you could do.
23377 	X	def example self param none self param param if param is none self param default.
23378 	X	but the full if else statement version isnt that.
23379 	X	btw if you really have that many parameters all with runtime calculated defaults and all optional you should probably consider changing your.
23380 	X	dict org defines that as an unofficial vote taken to determine opinion on some issue.
23381 	X	i was suggesting something that involved neither votes nor.
23382 	X	i had hoped the term study would suggest that more.
23383 	X	i agree the results might not carry much weight but on the other hand ive found carels comments somewhat more helpful in certain respects than two hundred other messages ive read which had lots of opinion but little or no attempt at objective.
23384 	X	perhaps we understand the term straw poll differently but that wasnt what i.
23385 	X	quoth anders j munch andersjm at dancontrol dk quoth erik max francis max at alcyone com it sure doesnt bode well for what were likely to see if one of the proposals is.
23386 	X	its like handing out free spray paint on the street corners to improve the quality of.
23387 	X	while thats a quaint analogy i simply dont buy.
23388 	X	how does giving someone the proper syntax theyre looking for instead of obscure and incorrect one promote bad code.
23389 	X	true perl enthusiasts have been making that point for.
23390 	X	and people love perl theyre obviously getting what they want its like they voted on features or.
23391 	X	i agree with your arguments but not your.
23392 	X	the thing is conditional expressions support a functional coding style which is a good.
23393 	X	much as i love your very funny and very powerful quality of vandalism argument it doesnt apply.
23394 	X	ironically i think a functional coding style is such a good thing that ive been working on learning objective caml and haskell.
23395 	X	i think the imperative approach to programming just might be seen by future generations like we see goto.
23396 	X	but the case is stated eloquently by others already we didnt get a good language out of good features considered independently and we wont improve it that.
23397 	X	donn cave donn at u washington edu.
23398 	X	erik theres no ambiguity in what was.
23399 	X	that corner case is merely a erik syntax error just as it is.
23400 	X	thats not completely true there are two changes to the names of tokens in existing.
23401 	X	andrew koenig ark at research att com http www research att com info ark.
23402 	X	quoth michele simionato on the peps if c x else y syntax.
23403 	X	ultimately of course this slippery slope results in even assignment statements becoming expressions that is a b would have some.
23404 	X	whatever its value the feared bug if a b oops meant a b would rise from the dead and haunt us.
23405 	X	i think it is safe to say that this eventuality will not arise under our present bdfl long may he rule.
23406 	X	that assignment statements are not expressions is one of many instances in python in which a generalization is avoided because it was felt to have unacceptable consequences imho this is.
23407 	X	for another example consider that we have lots of control flow keywords but the generalization goto is conspicuously.
23408 	X	in other words this particular slippery slope actually has lots of.
23409 	X	that said i kind of like the idea of try x except y.
23410 	X	one simple application would be a list find method with the same not found behaviour as str find def find self x return try self index x except valueerror.
23411 	X	fwiw im if pep accepted else on a pep like syntax for try.
23412 	X	steven taschuk import bisect sys staschuk at telusplanet net for line in sys stdin print join chr ord c bisect bisect an an c for c in line.
23413 	X	michael its bad form to just have side effects in a short circuiting michael.
23414 	X	so if i saw this with any of the proposed michael syntaxes.
23415 	X	michael id probably suggest a re.
23416 	X	its syntactically valid michael but ought to be written as an if statement not an if michael.
23417 	X	of course if youre serious about factoring you should do it this way.
23418 	X	andrew koenig ark at research att com http www research att com info ark.
23419 	X	this is a pretty unlikely candidate for a keyword since it even appears in the standard libraries and using indentation in an expression is probably a non starter.
23420 	X	ive been pushing a somewhat similar idea with several possibilities for syntactic details.
23421 	X	in any case existing conditional keyword s grouping delimiters to help the parser and the reader.
23422 	X	oren tirosh oren py l at hishome net wrote in message news.
23423 	X	python list at python require consistent always.
23424 	X	i think of as a item terminator rather than separator which is optionally omitted for the last item when there is more than one.
23425 	X	evan evan at am com wrote in message news.
23426 	X	as a python newbie i like this candidate the best of all those presented so.
23427 	X	i can figure out what its doing the very first time without having to have it explained to me and as you show in your examples the parenthesis continue to make the precedence very.
23428 	X	now one thing im not sure of from your last example above is that i thought you said that the else clause was mandatory but its not present for the if c e.
23429 	X	also from your examples is it correct to assume that the elif clause is not required.
23430 	X	there have already been a couple of examples posted in this thread where one side contains an array reference that could give an array out of bounds if the condition is not.
23431 	X	david eppstein uc irvine of information computer science eppstein at ics uci edu http www ics uci edu eppstein.
23432 	X	well ive tried to objectively try out each proposal so far and frankly this is by far the least readable to.
23433 	X	its basically the same old and or trick which imo isnt readable.
23434 	X	what i like about the other proposals is that even if you arent familiar with them you have a very good chance of correctly guessing what they are trying to.
23435 	X	for me the readability problem with the and or workaround lies in the fact that the result of x and y is first false value or the last value.
23436 	X	in and of itself its sort of magic because it blurs the lines between straight boolean operations and selecting a value but its not too.
23437 	X	but do normal non tim pythonistas really chain them together that often x and y and z for coming up with anything other than a boolean value.
23438 	X	i doubt it it just becomes too confusing especially when you mix operators x and y or z.
23439 	X	one of the other branches of this thread looked for uses of in the c implementation of.
23440 	X	this is used twice in that file one as return sre uni is digit ch and the other as return sre uni is digit ch.
23441 	X	python does not have a macro so were this written in current python it would be done as either an if else statement.
23442 	X	as a pro refactoring person i am pretty certain you would rather make a function because it is used.
23443 	X	on the other hand with an if else expression the temptation is strong to write this as.
23444 	X	after all its only two lines which are affected rather than the or needed for a function and it saves the function call.
23445 	X	but as a refactoring fan im also reasonably convinced you would want this as a function definition because its common.
23446 	X	if not whats the cutoff repeats.
23447 	X	so yes result x if f x y else y is shorter more concise and less prone to errors because the result name isnt duplicated.
23448 	X	but on the other hand if this test is done a few times its less likely youll refactor the common.
23449 	X	andrew dalke at dalkescientific com some people argue that having a small function increases cognitive load because of the need to remember the name instead of simply looking at the.
23450 	X	this is a counter example to that argument because there are several related functions as in.
23451 	X	define sre is digit ch ch.
23452 	X	sre char info ch sre digit mask define sre is space ch ch.
23453 	X	sre char info ch sre space mask define sre is linebreak ch ch.
23454 	X	sre char info ch sre linebreak mask define sre is alnum ch ch.
23455 	X	sre char info ch sre alnum mask define sre is word ch ch.
23456 	X	sre char info ch sre word mask.
23457 	X	hmmm looks like the code quote i did at the start of my post was from a different version of.
23458 	X	as you can see these are all members of the same family and the meaning is obvious from the macro name and learning what one does helps understand what all.
23459 	X	for me thats the second best solution on the table i prefer if x y else z.
23460 	X	christian tanzer tanzer at swing co at glasauergasse tel a vienna austria fax.
23461 	X	since i plan to use these expressions only when it makes my code clearer and easier to read i probably wont nest.
23462 	X	in that case id be unhappy having the parentheses forced on.
23463 	X	i may choose to use parentheses if it helps and if i ever do nest them i will certainly use parentheses but please lets not force them on.
23464 	X	tim peters tim one at email msn com wrote in message news.
23465 	X	reminded by examples in other postings in this thread i realize that.
23466 	X	kind julian gregorian self reform none or date self reform.
23467 	X	even looks better but i dont always go for good looks.
23468 	X	for some reason i always forget about this idiom probably because it takes me more brainpower to grasp.
23469 	X	hence my preference for the conditional.
23470 	X	in article znpmq fsf at morpheus demon co uk.
23471 	X	that makes sense to me but it seems to bias the process against conditional.
23472 	X	shrug but if the people who want conditional expressions approve of this approach its fine with.
23473 	X	aahz aahz at pythoncraft com http www pythoncraft com.
23474 	X	register for pycon now http www python org pycon reg html.
23475 	X	christian tismer tismer at tismer com wrote in message news.
23476 	X	i still like the minimalism of.
23477 	X	val sqrt x or imaginary if x.
23478 	X	no new keywords key elements normal case condition are at the ends so you can visually find them easily reads ok to me pronounces val equals x or y if c is true perhaps it could even be written that way.
23479 	X	another plus for me is that its quite hard to extend into a compound expression because it gets mind bending to write as well as.
23480 	X	i like things that scale in complexity in the same way as you both write and read.
23481 	X	this started out with you saying that if i dont use a feature its existance wont affect me one way or the.
23482 	X	my point was that it will affect.
23483 	X	even if i dont use it ill need to learn it to understand the code that you.
23484 	X	unless im missing the point completely compare.
23485 	X	if cond x calc resource intensive else x calc resource intensive.
23486 	X	in the second case both resource intensive and resource intensive are.
23487 	X	there is of course the possibility of undesired side.
23488 	X	you can warn people to not use iif for such cases but you wont stop it were used.
23489 	X	this message is checked for all known viruses by the messagelabs virus scanning.
23490 	X	james p rutledge schreef op zaterdag februari om.
23491 	X	html text not is html msg or html text is html msg or text html is html msg.
23492 	X	asperger syndroom een persoonlijke benadering http people nl linux org gerrit het zijn tijden om je zelf met politiek te bemoeien http www sp nl.
23493 	X	andrew koenig ark at research att com writes.
23494 	X	again looking at the lisp precedent cond x y gives nil if x is false and that seems to have worked.
23495 	X	so im ok with making the else.
23496 	X	im also ok with making it.
23497 	X	golly gee laura i dont ever recall stating that anything at all here was my decision and in fact i explictly recall stating several times that i am more than happy with any voting process that everybody agrees upon including all the potential dont.
23498 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote being in love for real it aint like a movie screen india arie bosskey net aliens predator http www bosskey net avp a personal guide to aliens predator.
23499 	X	guido van rossum guido at python org wrote in message news.
23500 	X	if use of the colon character is overloaded how about just using the else keyword instead.
23501 	X	thats what the colon in cs ternary operator essentially means.
23502 	X	a small compromise between the c syntax and a more pythonish.
23503 	X	pretty easy to read and i think this would be the case for people both with and without backgrounds in c also i cant think of any ambiguity with existing use of the else keyword since it is currently always used on a single line by itself.
23504 	X	in my code i would have made a temp variable and not worried about the couple extra lines of.
23505 	X	or i would have made that.
23506 	X	as i pointed out elsewhere the ternary operator is only rarely used to prevent side.
23507 	X	in most cases ive seen there are no differences with or without short.
23508 	X	in other words how often will short circuiting be needed in real code.
23509 	X	david eppstein pointed out one with.
23510 	X	if i col none else col cols i.
23511 	X	col cols i if i else none.
23512 	X	otherwise i feel that most real life problems are more naturally in other python.
23513 	X	so why are you so serious about using the c syntax.
23514 	X	anansi spaceworks http www anansispaceworks com.
23515 	X	tim hochberg tim hochberg at ieee org wrote in message news.
23516 	X	that is almost exactly what i.
23517 	X	to requote the question is whether to replace the current idiom or let it stand.
23518 	X	in the context of a post discussion of possible new syntax it is slightly bizarre to assume or imply i meant anything other than with new.
23519 	X	but if it make my statement clearer to you please add those three.
23520 	X	as or for let it stand as is without change guido has stated that if there is no syntax change as a result of pep he will not consider the issue again for the indefinite.
23521 	X	so new syntax or no new syntax for a long while is the choice to be voted.
23522 	X	i am well aware that nothing including the outcome of this pep process will stop people from continuing to make ugly statements about how ugly and abominable other peoples code is as if such subjective opinions were objective.
23523 	X	if the pep is rejected i will think it bad form for the people responsible to be quite so critical of people who continue to combine the existing two selection operators to make a.
23524 	X	idioms for alternative value selections have been discussed for.
23525 	X	i am glad we do not have a python language police as in some countries even if some try to self appoint themselves as.
23526 	X	check the current form of the pep on the web site its clear that whoever is maintaining it is following the.
23527 	X	the originaly x if c else y form is now listed in the alternatives.
23528 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote i always entertain great.
23529 	X	robert frost get your own customized newsfeed online in realtime for free.
23530 	X	andrew dalke adalke at mindspring com ha scritto nel messaggio news bu et at slb atl mindspring group.
23531 	X	so you they never look at the code of the libraries they use or you dictate the style of all of them.
23532 	X	if you confuse them when reading whats the harm.
23533 	X	if you confuse them when writing youll get a syntaxerror not a subtle.
23534 	X	including and or not lambda and the various keywords used in list comprehensions.
23535 	X	not that i like listcomp syntax.
23536 	X	isnt your mind trained to see familiar keywords.
23537 	X	they eliminate precedence issues make distinguishing statement from expression trivial and simplify the.
23538 	X	lambda uses a colon and listcomps use multiple keywords inside.
23539 	X	python doesnt have any n ary operator for n so there wont be anything like any pep syntax in that.
23540 	X	the folks who object to pep regardless of syntax have a point when they observe that conditional expressions seem to be very rare in.
23541 	X	given that fact if guido agrees to add them to python they ought to be either intuitive or very easy to look.
23542 	X	none of the punctuation forms is easy to look up and only the one taken from c is likely to be immediately comprehensible to someone who isnt familiar with.
23543 	X	if they are chained or used with complex expressions you either need to add as many as three sets of parentheses or hope that the obvious precedence.
23544 	X	the if c x else y syntax is trivial to teach read and remember because it is just like an if statement in parentheses with expressions instead of statement.
23545 	X	and thats why im really glad that list comprehensions require the brackets around.
23546 	X	they tell the reader that there is something slightly unusual going on.
23547 	X	in a way list comprehensions are a seperate language within the.
23548 	X	in contrast the strange sequence of conditional and expressions proposed in this pep can almost appear anywhere in the code without the slightest visual.
23549 	X	that looks like very dangerous territory to.
23550 	X	any syntax that puts the elements in the intuitive order will be less error prone and several sensible variations have already been.
23551 	X	georg mischler simulations developer schorsch at schorsch com schorsch com lighting design tools http www schorsch com.
23552 	X	i appreciate you taking the time to write it all.
23553 	X	as usual c l py is educational in ways not limited to just.
23554 	X	now we just have to figure out which election method to use to vote for which election method to use to vote on the pep and well be done.
23555 	X	puts or can put the main payload first and can round up the nasty exceptions.
23556 	X	apparently enough people disliked it to have it removed from the ballot before the.
23557 	X	actually ive been wondering if something like pychecker or even a special mode of pychecker would be useful in checking your code against generally accepted style.
23558 	X	you could obviously shut off warnings youre not interested in but it could look at your code and point out things we generally consider to be bad.
23559 	X	naming self something else too small or too large indendation or mixed e g using spaces in some functions in others abusing the if expressions.
23560 	X	dale strickland clark riverhall systems ltd.
23561 	X	yeah it wont be confused with python.
23562 	X	this is actually exactly opposite to the spirit of the join.
23563 	X	when the various possible forms for the join method were were debated the sequence join string method lost out to the string joing sequence method precisely becaause all sequences would have to grow a join method to participate whereas with the formthat was actually adopted only the string method needs a join method and anything that implements the sequence protocol gets to play for.
23564 	X	this is not a new proposal c x y has already been suggested very early on in these.
23565 	X	y z would simply be the relaxed as you called it extension to.
23566 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote in time of war the devil makes more room in.
23567 	X	a german proverb cranks crackpots kooks loons on the.
23568 	X	iif is around since at least lotus iirc where it was the inline if function iif cond trueval falseval.
23569 	X	commonly used in spreadsheets and low end.
23570 	X	mike while i dont object to the idea of a ternary operator per se i mike find this one.
23571 	X	the problem is that it does magic mike but you dont know that until youve read the first mike.
23572 	X	i think that results in an overall lowering of the mike readability of the.
23573 	X	thats why my opinion is instead of.
23574 	X	i think it would be great if someone came up with an obviously better syntax but id greatly prefer the present proposal to.
23575 	X	andrew koenig ark at research att com http www research att com info ark.
23576 	X	which means that the argument in favor of an if then else expression gets stronger as the surrounding context.
23577 	X	val map lambda x something y.
23578 	X	now imagine that the something contains a conditional such as.
23579 	X	val map lambda x str x if x else str x y.
23580 	X	its pretty clear what this does it generates a string representation for the values in y putting the negative values in parentheses rather than putting a sign in front of.
23581 	X	in order to change this to an if statement you must either repeat the context or introduce temporaries such as.
23582 	X	def f x if x return x else return str x val map f y.
23583 	X	examples such as this are why i say that if then else expressions are particularly useful in conjunction with lambda.
23584 	X	andrew koenig ark at research att com http www research att com info ark.
23585 	X	ian i use this pattern all the time.
23586 	X	ian val y ian val z.
23587 	X	i dont exactly hate it but i dont like it either and the reason i dont like it is that i have to write val.
23588 	X	thats twice as many opportunities to get it.
23589 	X	in effect the problem is that the surrounding context has to be duplicated on both sides of the.
23590 	X	i on the contrary have gotten so used to it that i forgot that cs behaves differently from pythons and and had to go back and look at k r to check that it really.
23591 	X	david eppstein uc irvine of information computer science eppstein at ics uci edu http www ics uci edu eppstein.
23592 	X	actually i would have written this as.
23593 	X	if n msg error else msg errors print n msg.
23594 	X	so i could see that the n is always.
23595 	X	or using my function from the other thread.
23596 	X	def buy item num wanted if num wanted print sure ill give you nothing return.
23597 	X	num available inventory item if num available num wanted if num available print we dont have any ss in stock item return print looks like we only have d s num available item s if num available else item num wanted num available.
23598 	X	print shipping you d of item r num wanted item inventory item inventory item num wanted.
23599 	X	there is one use of the if else expression.
23600 	X	however i would argue that use is incorrect and it should be turned into a function because the code the string to use for an amount of a given item is actually used.
23601 	X	if num available print we dont have any ss in stock item here return print looks like we only have d s num available item s if num available else item here.
23602 	X	instead it should be def plural item n if n return item return item s if num available print we dont have any s in stock plural item return print looks like we only have d s num available plural item num available.
23603 	X	and the use of if else expression which was done because it saved a few lines actually ended up obscuring the need for a.
23604 	X	then someone decided to ship an extra to everyone who bought more than.
23605 	X	includes bonus buy buy item int num to ship if num to ship else num to ship or if num to ship bonus buy num to ship int num to ship buy item num to ship.
23606 	X	how many people will choose the first of these options.
23607 	X	how many would choose the second.
23608 	X	is there any difficulty in understanding one the other.
23609 	X	i believe about of the people will choose the embedded if else.
23610 	X	some will do it because they can hey this is a great time to use this syntax and others because it saves a couple lines and others because it fits their.
23611 	X	others like me will break it out because odds are if this term is flexible then there will likely be other modifications in the future while still others will do it because they didnt want to deal with different ways of expressing the same thing or didnt remember that it.
23612 	X	then someone else requires there be a full moon special and when the moon is full then everything must be.
23613 	X	and the machine must play a howl sound.
23614 	X	the who used the if else expression may rewrite the code as.
23615 	X	bonus buy num to ship int num to ship if num to ship else num to ship.
23616 	X	werewolf special if moon is full num to ship num to ship howl.
23617 	X	the first term was rewritten that way because its an easy cut paste from the function call.
23618 	X	that is appropriate because the fewer edits done the fewer chances of.
23619 	X	however the second term cannot be written as an if else expression or should not replace howl with print howl if you think otherwise.
23620 	X	so now there are two different if else constructs for doing effectively the same.
23621 	X	compare that to using an if statement for both branches.
23622 	X	if num to ship num to ship int num to ship bonus buy.
23623 	X	if moon is full num to ship num to ship werewolf special howl.
23624 	X	i am still against having an if else.
23625 	X	i do agree there are times when it can be useful and.
23626 	X	however i think more times it will be used as alternative castings of the same code and i would rather there be one prefered form and not two relatively equal.
23627 	X	i believe that that will lead to code which is generally more confusing than.
23628 	X	i do understand that a good programmer will not abuse these constructs even if they are there and prefers the more expressive.
23629 	X	however i am also concerned about all the complicated code i have to review and fix from people who are not good programmers nor claim to be so dont know how to use these tools.
23630 	X	its a symptom the use of cs ternary operator tends to cause problems but i dont know the.
23631 	X	after reading all the postings i still dont see why a ternary operator would be of.
23632 	X	most languages i use dont have one and in the one that does i dont use it and its never affected my ability to effectively express what ive wanted to.
23633 	X	raymond hettinger vzerxy at verizon net writes.
23634 	X	i think theyre interesting and maybe persuasive but not in the direction that he seems to.
23635 	X	theres another issue here which nobody has yet.
23636 	X	if youre going to hold a public vote it should be pretty straightforward to understand how to do.
23637 	X	if the voting process itself requires five paragraphs description i think youre talking about a bad voting.
23638 	X	approval voting has the benefit of were very simple to explain select as many or as few as you.
23639 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote you cannot step into the same river.
23640 	X	cratylus python chess module http www alcyone com pyos chess a chess game adjudicator in.
23641 	X	while i find davids comment quite appropriate and funny dont feel offended please i must say that your suggestion is not too.
23642 	X	it simply means a second way to spell lambda but enables your above.
23643 	X	but increasing usage of punctuation indeed is dubious in python.
23644 	X	i wonder if c l py ever returns to not drown itself in syntax discussions.
23645 	X	most of the forms suggested extend easily to n ary.
23646 	X	i simply neglected to list forms as a group iv that werent solutions to pep but were entirely different beasts like macros general lazy evaluation schemes.
23647 	X	they may have a particular application that could be used as a form of a conditional operator.
23648 	X	yes as i mentioned i explicitly included forms that were proposals for pep.
23649 	X	for brevity i neglected to list all the ways in which those proposals could be extended to n ary forms for instance i didnt bother mentioning that if c x else y extends to if c x elif d y else z.
23650 	X	because if we get that far along in the process the possible forms of extending the syntax to n ary forms are obvious.
23651 	X	ill also point out that this form youre suggesting here is not what you originally proposed so that just underscores the point.
23652 	X	more generalized forms are an even more amorphous target than a conditional operator and thats all were after in pep.
23653 	X	if you want to propose more general forms like macros or select expressions by all means that can be pep n.
23654 	X	right now were talking about pep.
23655 	X	the pep itself does talk about n way forms for some of the.
23656 	X	the reason theres not much point in talking about n way extensibility for every single little proposal even those which met with no support whatsoever is that in most cases it is really.
23657 	X	no ones stopping you from making one.
23658 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote the quality not the longevity of ones life is what is.
23659 	X	martin luther king bosskey net return to wolfenstein http www bosskey net rtcw a personal guide to return to castle.
23660 	X	good point though obviously it didnt work before where the type unification process started.
23661 	X	so i guess i have to concur with the other comments that i dont know what the original poster was referring.
23662 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote patiently im still holding out until sandra victor a lambda calculus explorer in.
23663 	X	after beating your head against the wall any letup feels good ly.
23664 	X	speaking purely from a test driven development point of view that approach is not preferable because it involves duplication of d year in this case whereas the original form does.
23665 	X	but i will certainly stand up and claim this is preferable for some just not for.
23666 	X	and the reason you didnt use eleven tenths more literally as in.
23667 	X	is that that had an inconvenient superficial result while really only proving that different terms can have matching representational errors.
23668 	X	btw the statement is the same as eleven tenths is both true and false depending on how it is interpreted which further illustrates that the english language has usage pitfalls just as coding idioms may.
23669 	X	laura thus answering the question if we let it in will we get code that laura is hard to.
23670 	X	i want my control flow with indentation.
23671 	X	holger imo laura emphasized how good enforcing indentation is for holger.
23672 	X	writing x and y or z or x if y else z holger or list comps for that matter undermines.
23673 	X	i think that sometimes it does and other times it.
23674 	X	to borrow an example from another thread i consider.
23675 	X	partly because there is only one flow of control so it is easy to see that n is printed in all.
23676 	X	holger beeing able to concisely express a binary choice holger in an expression of course can be nice in some.
23677 	X	holger its a tradeoff between readability and expression power but i think holger that readability should score higher.
23678 	X	often enough holger there are other higher level possibilities to design an holger algorithm using dictionary.
23679 	X	holger i think what could be more useful is something like.
23680 	X	holger which enhances pythons philosophy of not requiring holger look before you.
23681 	X	in fact in ml thats the only way of handling exceptions and expression and expression must have the same type.
23682 	X	it was a reply to your reply about the pep but ill rephrase.
23683 	X	im against extending the pep to include expr if cond instead of just expr if cond else expr as the pep.
23684 	X	in article yuhebcrpe fsf at europa research att com andrew koenig.
23685 	X	for example look at this code from python lib unittest py.
23686 	X	self stream writeln ran d test s in.
23687 	X	run run and or s timetaken.
23688 	X	isnt it a slippery slope to add nice alternatives for abuses like the above when there are currently much better ways of doing it.
23689 	X	i think the portion of cases that require conditional evaluation of the arguments is sufficiently small that a function that selects the second or third argument based on the first one current if else for the minority is.
23690 	X	peter hansen peter at engcorp com wrote in news.
23691 	X	for this particular situation it probably doesnt make any difference but in the general case the difference is that only the one tuple is evaluated whereas without the lambda we evaluate every branch every.
23692 	X	if i hadnt used the lambda someone would probably have complained that my answer didnt have exactly the same semantics as the.
23693 	X	another advantage to my solution is that it is immediately obvious that one branch yields a tuple of a different length than the.
23694 	X	this probably indicates a bug and although im sure it would have shown up in the unit tests theres no harm in making it visible in the.
23695 	X	dicts are a great tools to solve problems but they arent the only.
23696 	X	we all fall into the trap of applying a solution just because its the one we know.
23697 	X	duncan booth duncan at rcp co uk int month char p return p p p xf x xb x xa who said my code was obscure.
23698 	X	i really do love the list comprehensions.
23699 	X	they are handy for a lot of the email header and filtering type of scripts that i.
23700 	X	i didnt find the example you posted confusing at.
23701 	X	for y in mylist append x y.
23702 	X	sheila king http www thinkspot net sheila http www kgroups org.
23703 	X	ad david eppstein pointed out one with.
23704 	X	ad col none ad col cols i.
23705 	X	ad which is nicely expressed as.
23706 	X	ad col cols i if i else none.
23707 	X	except that you flipped the conditions i think you meant to write.
23708 	X	col cols i if i else none.
23709 	X	andrew koenig ark at research att com http www research att com info ark.
23710 	X	in article e bcef at alcyone com.
23711 	X	process but guido did make clear on python dev that he doesnt want to be involved in the voting.
23712 	X	if i chose to take guido literally and if i really wanted to kill conditional expressions id simply take a vote on the proposal listed in pep.
23713 	X	its clear to me that many people who would in theory like conditional expressions hate the infix.
23714 	X	im trying to do my best to be fair but im also trying to accomodate guidos wish to remain.
23715 	X	aahz aahz at pythoncraft com http www pythoncraft com.
23716 	X	register for pycon now http www python org pycon reg html.
23717 	X	guido van rossum guido at python org writes.
23718 	X	i have to say this sounds excessively perlish putting the condition after the first expression like.
23719 	X	if the use of the colon is consistent with other ways python uses colon then using it in conditional expressions seems.
23720 	X	i personally dont have a problem with using question mark i dont remember having any trouble understanding it when i first encountered it in c but i agree that its not so.
23721 	X	adding a keyword doesnt seem to me like a big problem unless its a keyword that will break a lot of programs e g dont use n as a keyword.
23722 	X	or if the word ifelse is too ugly we could use a different one instead like maybe select.
23723 	X	the else clause could be chainable with elif.
23724 	X	ifelse cond exp elif cond exp else exp.
23725 	X	hopefully that wouldnt get used too frequently but it does sometimes turn out useful to have several nested.
23726 	X	in the many threads that have gone by on this subject in the past theres been several other good.
23727 	X	maybe some of those can be dug up and posted to this.
23728 	X	guido van rossum guido at python org wrote in message news.
23729 	X	prefer the if cond then expr else expr form to the expr if.
23730 	X	we are used to abuse and which leads us to perfect the abuse with constructs like.
23731 	X	python has the merit to be almost readable even to non.
23732 	X	despite the fact that there are and and or with already quite strange semantics which is not.
23733 	X	we probably should not make them live forever by increasing their refcounts too.
23734 	X	and or are bad building blocks for conditional.
23735 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
23736 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
23737 	X	i was really referring to punctuation other than colons which are ubiquitous in python.
23738 	X	i thought that was kind of.
23739 	X	my moderate objection to it is that the.
23740 	X	helps people familiar with conditional operators in other langages but isnt really a panacea for someone coming across it for the first time the.
23741 	X	doesnt really tell me whats going on.
23742 	X	i personally just have an objection to a ternary operator conditional or not where one element is punctuation and the other is a keyword it seems ugly to.
23743 	X	in this case its merely an attempt to keep as close to the.
23744 	X	notation used in other languages which in and of itself doesnt really impress.
23745 	X	because guido said so in the.
23746 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote she glanced at her watch it was.
23747 	X	james clavell bosskey net quake iii arena http www bosskey net qa a personal guide to quake iii.
23748 	X	delaney timothy c timothy tdelaney at avaya com wrote in message.
23749 	X	on having a ternary at all was but found an option i liked.
23750 	X	the currently used ternary conditional on the first option were non null is test and opt or opt.
23751 	X	to me uses in the standard library makes it quasi officially.
23752 	X	in any case it is a straightforward application of pythons syntax.
23753 	X	this is the status quo that a no vote is voting.
23754 	X	some code is more fragile than.
23755 	X	talking about how easily it is to get wrong imho is.
23756 	X	i think part of your objection has to do with the fact that several of the examples are code you actually.
23757 	X	thus you may rightly object to andrews characterization that they only work coincidentally when you presumably thought through every nuance and knew for a fact that they were in fact.
23758 	X	i took his point to mean that ordinary programmers might not be as thorough as you and would be more likely to make mistakes trying to handle similar work.
23759 	X	if you still think its irrelevant im happy to leave it as an honest disagreement between two.
23760 	X	its my recollection of the last messages that there were numerous posts by multiple people submitting various alternative for if.
23761 	X	its my recollection that about half of them contained unintended errors that were pointed out by andrew k usually it was that the condition of the test was reversed and the expression produced the opposite value from.
23762 	X	its possible in my recollection that i counted the same mistake in some circumstances more than once but i dont think so because there was a distinct complaint from k in each.
23763 	X	its also my recollection that prior to the pep discussion the topic comes up regularly and as often as not the solution presented gets the test.
23764 	X	i think it might be worthwhile to go back and count but i lack the motivation to do.
23765 	X	anyway i thought most of us stipulated that the work around alternate forms were error prone for non.
23766 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
23767 	X	if you want to go multiline you can just add the parentheses yourself and get them for.
23768 	X	making them mandatory seems heavy handed for getting a certain indentation flow you might want to.
23769 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote ride ride this wave of mine res esperanto reference http www alcyone com max lang esperanto an esperanto reference for english.
23770 	X	why by using the assignment to lambda refactoring of course.
23771 	X	instead of x return x write return lambda x x.
23772 	X	this kind of thing is made much of one of in steeles lambda.
23773 	X	steven taschuk kinsleys law every public staschuk at telusplanet net frenzy produces legislation purporting to address.
23774 	X	philip hunt philh at cabalamat uklinux net memes are a hoax pass it on.
23775 	X	andrew koenig ark at research att com ha scritto nel messaggio news yuisvskoq fsf at europa research att.
23776 	X	like say a message id header field.
23777 	X	so you could just say hit esc l locate and enter the message id in your newsreader.
23778 	X	i dont understand guidos essay on.
23779 	X	so far it doesnt seem that i need.
23780 	X	stays in the existing framework that oh objects have methods.
23781 	X	im not going to explain em and it appears i dont need.
23782 	X	and im one of the most knowledgeable software people in this field imo and others.
23783 	X	so no but then i dont need.
23784 	X	see my other arguments which show that in the codebase i analyzed they are misused more than they are.
23785 	X	and the authors of the codebase are people in my user base which is why its important to.
23786 	X	sigh no its just that i cant include a summary of my arguments in every reply i.
23787 	X	they replace a construct i had long used in a logically equivalent way but simpify the scaffolding i was able to write in my sleep.
23788 	X	class recordreader def init self infile self infile infile.
23789 	X	n def next self parse a record from the input file if have record.
23790 	X	n return record return none def getitem self i if i.
23791 	X	n raise typeerror forward iteration only x self next if x is none raise indexerror i return x.
23792 	X	for record in recordreader open input txt print record id.
23793 	X	rarely use mi so doesnt affect me that.
23794 	X	max are you telling me that if everybody voted their favourite one other and do nothing therefore making do nothing the top vote getter you would be pleased with the outcome and consider it fair.
23795 	X	me i think you have just shot your side in the.
23796 	X	i tend to think that using the colon in a conditional selection expression makes it hard to distinguish from a dictionary.
23797 	X	any comments on the original proposed form.
23798 	X	is the question mark as an operator too scary.
23799 	X	some other ideas cond value cond value cond value cond value default value cond value default value or cond value cond value cond value cond value default value cond value default value.
23800 	X	erik max francis max at alcyone com wrote in message news.
23801 	X	erik max francis max at alcyone com wrote in message news eafaba c at alcyone selection.
23802 	X	short answer for the same meaning if i were talking about and.
23803 	X	delayed long answer see pep pythons conditional selection operators which i just.
23804 	X	it gains you your lazy ternary operator and is also useful in other.
23805 	X	the if implementation is then merely a special case of something else that is useful.
23806 	X	note and i cant emphasize this enough that every argument that can be brought to bear against applies equally to the ternary.
23807 	X	newbie confusion one more thing to learn what is it really good for.
23808 	X	i wont go so far as to claim that supporting the ternary operator should imply some level of support for this but it shouldnt be missed that its the exact same arguments against.
23809 	X	depending on the exact proposal chosen i think those have mostly fallen out of.
23810 	X	that read exactly the same as criticisms and is equally valid for the same.
23811 	X	i believe there are two importent differences between and.
23812 	X	one is that lambda already exists this is just a special case respelling of it so technically nothing.
23813 	X	a ternary operator is new as nothing currently acts like that in python even and or is really two binary operators strung together each with an independent reason to.
23814 	X	two this is sufficiently more powerful then the ternary operator that it might actually tip the balance in favor of adding.
23815 	X	the implementation of the ternary operator is even more concise in use then many of the.
23816 	X	plus there are obvious translations to quaternary or n ary operators.
23817 	X	not that anybody will actually use that but the point is that it can be used to build many useful things in addition to the special case ternary operator not to mention the many other times such things can be.
23818 	X	i think its also worth pointing out that the fact that there is pretty much one syntax that makes sense for this whereas the ternary operator has still only converged to what three or four strong proposals at least and im were generous.
23819 	X	this inability to pick one firmly says something i think and it says something about as.
23820 	X	to date this is the only thing id vote on as the only proposal to actually balance power with the additional complication in the language instead of adding complication to the language for a piddling feature its done without for.
23821 	X	if we must have support for a lazy ternary operator this is the way to.
23822 	X	side note itll be interesting to see how the vote goes clearly those against have stopped talking making it seem as if support is now.
23823 	X	its impossible to know whether those still talking about it are in the minority the rest of us having largely said our piece and moved and equally impossible to tell if support is overwhelming from day one so no accusations of bias please.
23824 	X	btw i never did see a response to this comment of.
23825 	X	with the above syntax this means the following is legal.
23826 	X	get the ple of names value and who owns it a the value can be cached or in the database if is cached.
23827 	X	get cache name else self connection fetch name database already open when getting source.
23828 	X	the ownership is stored in the database if the name starts with db or from the web service if x startswith db self connection get owner name else self webservice get owner by name name.
23829 	X	that is code which in the small looks like normal python if else statement is really an if else expression once you look in the larger scope which may be indefinitely.
23830 	X	also note that the indentation level does not matter inside of the a.
23831 	X	i would rather use two temporary.
23832 	X	just have to accept that i didnt think of it.
23833 	X	it fits well with the existing short circuiting and should be easy to get used.
23834 	X	of course i still think my x y z.
23835 	X	would be easy too i wont mention what it is the simplest expression of.
23836 	X	if that were the whole point then the idea would have died long.
23837 	X	this is part of why i suggested mandatory.
23838 	X	then both of these are legal and there is no confusion.
23839 	X	im just saying saying that if you want a conditional expression to be legal as a standalone statement that requires a parser change in how if statements are handled i you have to look ahead and see oh theres an else on this same line so this is the conditional operator as a standalone statement not an if.
23840 	X	right and that was my suggestion somewhere in the thread and via email.
23841 	X	the corner case which i shall hereafter refer to as the corner case where the conditional expression is written as a standalone statement is not important to me so i have no problem disallowing it that means no parser changes are necessary as far as i can tell other than the introduction of the conditional expression which is an expression and thus does not interfere with the if statement.
23842 	X	the only thing i might say about my disinterest in the corner case is that it might be nice that if you think youre parsing an if statement and see an else on the same line a slightly more helpful syntaxerror is emitted i hey you cant do that use parentheses or put the else on a separate line.
23843 	X	i dont forsee myself using the corner case in real code nor do i see it becoming particularly popular so im rather ambivalent to its.
23844 	X	i must say im pretty convinced at this point that if c x else y and if we wish its multiway variants if c x elif d y else z is absolutely the way to go if you want a conditional.
23845 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote she glanced at her watch it was.
23846 	X	james clavell bosskey net quake iii arena http www bosskey net qa a personal guide to quake iii.
23847 	X	i agree that in mathematics of which theoretical computer science is a subdiscipline the standard meanings of and and or are purely.
23848 	X	however and doubtless to you this is a useless quibble what you said was not pythons and and or are not the same as those that are standard in logic math and computer science but simply pythons and and or are not the standard versions.
23849 	X	it seems to me that even when the following paragraph happens to be about how they are used in one particular set of other contexts it is reasonable to read not the standard versions as saying something more than not the versions used in one particular set of other contexts.
23850 	X	however it appears that thats not what you meant and im sorry to have been among those who didnt correctly divine your.
23851 	X	by the way if you want to be as clear as possible that in computer science you dont include programming languages you might want to remove the words and either conditional in execution or not or at least revise.
23852 	X	execution is a term that applies to computer programs not to mathematical or logical.
23853 	X	actually in c and c the and operators the nearest equivalent to pythons and and or are purely.
23854 	X	they also have non short circuiting bitwise operators and but no one uses those for boolean operations other than by.
23855 	X	i dont know whether thats referring to me but my article was a response to stephen horne not to.
23856 	X	and what i said about the ansi standard in my reply to him was followed by a smiley and by a clear acknowledgement that he didnt mean standard in that.
23857 	X	i think you even hint at such an objection precisely by your use of the word standard.
23858 	X	heres an example of how you could have worded what you said so as not to confuse useless quibblers like.
23859 	X	pythons and and or operators differ from those that may be familiar from mathematics logic or theoretical computer science or even from some other languages such as c and c.
23860 	X	in those domains and and or are purely logical operations they may perhaps accept non boolean operands by some sort of conversion and may short circuit by not evaluating the second operand when the first suffices to determine the result but they operate on boolean values true and false and return only boolean.
23861 	X	in python as in other dynamically typed languages like perl and smalltalk these operations are generalized so that their results are not always.
23862 	X	i shall call them conditional selection operators and explain their unusual properties in the following.
23863 	X	as it happens i strongly dislike the term conditional selection operators and or can be used that way but calling them conditional selection operators on those grounds is like calling a boolean operator on the grounds that if you feed it proper boolean values it behaves like a non short circuiting and.
23864 	X	im not saying you should replace your text with mine that would be stupidly.
23865 	X	my hope is that by comparing the two youll get a feeling for what it is in yours that led me to understand your meaning and intent the way i.
23866 	X	anyway stephens very wisely taken the discussion to e mail we can flame one another about the merits and defects of lisp.
23867 	X	my apologies for contributing to a language war in c l py.
23868 	X	gareth mccaughan gareth mccaughan at pobox com sig under construc.
23869 	X	i would like a get equivalent for.
23870 	X	its a solution and for the other skip where id have to resort to something like.
23871 	X	andrew cond and expr or expr.
23872 	X	skip i punt and use an if.
23873 	X	the contexts in which i would like to be able to use an if expression are precisely those such as function arguments and lambda expressions where if statements arent.
23874 	X	andrew koenig ark at research att com http www research att com info ark.
23875 	X	why would this be better than the form suggested in the pep of.
23876 	X	which guido expressed displeasure over but did not reject out of hand.
23877 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote whoever contends with the great sheds his own.
23878 	X	http www pollywannacracka com the internet resource for interracial.
23879 	X	it actually reads decently when i think about it though it may initially mislead people who are used to.
23880 	X	this topic has come up over and over for years and nobody has come up with a better idiom than the one listed in the.
23881 	X	unless a better one is discovered then the choice really is between sticking with the old one or replacing it with new.
23882 	X	if you can think up a better idiom now would be an excellent time to suggest.
23883 	X	bma sm slb atl mindspring net.
23884 	X	it made me think of nero wolfe a fictional detective written by novelist rex.
23885 	X	pfui was one of his most common.
23886 	X	and when accused of cowardice he wolfe said i can dodge folly without backing into.
23887 	X	complexity is bad even for professional.
23888 	X	simplicity is good even for professional.
23889 	X	if you think most c programmers are professionals you havnt seen as many c programmers as i.
23890 	X	during the dot com boom it seemed that anybody who could spell c and had a pulse could call themselves a.
23891 	X	in article bl bg at panix panix com aahz at pythoncraft com aahz.
23892 	X	the don beaudry hook did not require a special.
23893 	X	it was still a pain to work with but it was.
23894 	X	most potential uses are to avoid some exception were thrown testing on an array index avoiding a division by zero negative square roots and so.
23895 	X	for business applications it is also useful because sometimes we do retrieve values from external sources depending upon some.
23896 	X	the meta code below shows the basic idea.
23897 	X	zip code some zip if some zip.
23898 	X	none else find zip some address.
23899 	X	find zip may look up the zip code on some table or even worse using the internet to do the lookup in a remote.
23900 	X	short circuiting is a big time saver here as it will be whenever cache style techniques are.
23901 	X	alas the parenthesis above help to make the expression easier to understand in my opinion but are not actually.
23902 	X	carlos ribeiro cribeiro at mail inet com br.
23903 	X	in the earlier thread an aweful lot of the bandwidth was in rationales and sometimes tangential.
23904 	X	it is possible that a good suggestion may not have been seconded because it was drowned out in all the.
23905 	X	that said pretty much everyone must understand what the issues are at least to some.
23906 	X	probably the best suggestions have already been captured in eriks list but i suspect that well have people popping up for a while and saying you missed my suggestion unless we pre empt.
23907 	X	therefore may i suggest that we have a thread where all comers may post there suggestions once and with no explanations rationale or.
23908 	X	anyone may second also but once any suggestion has clear support leave it.
23909 	X	finally leave it to some small group of experienced pythoneers to filter the list down remove the impossible impractical and bizarre ready for either a vote or passing on to the bdfl or.
23910 	X	im sure theres a core to this group who is clearly qualified and who would recognise those who arent and who can at least agree on what must be filtered out even if they cant agree on which should be the final.
23911 	X	steve at ninereeds dot fsnet dot co dot uk.
23912 	X	you know what this code is supposed to.
23913 	X	you know how you would write.
23914 	X	you have absolutely no expectation that you will be surprised here and get anything other than.
23915 	X	you want to zip through it quite quickly checking that it does what you.
23916 	X	youll stop if you find something.
23917 	X	old lines infile and open infile or sys stdin readlines new lines infile if open infile else sys stdin readlines supernew lines infile open infile sys stdin readlines.
23918 	X	sincerely yours roman suzi rnd at onego ru my ai powered by linux redhat.
23919 	X	that in mathematics is the standard symbol for implication and typically means something else.
23920 	X	i just checked pure mathematics books somewhat at.
23921 	X	i picked a lot of set theory and logic ones because they have more need of a symbol for.
23922 	X	among books on logic and set theory books.
23923 	X	use for implies use in the formal theory and implies in the uses for implies uses the reverse of the proper subset symbol for implication following the older practice of e russell and.
23924 	X	among other books books use for implies.
23925 	X	for the most part symbols for implication are rare outside books on set theory and.
23926 	X	you need therefore much more often than you need implies.
23927 	X	much the commonest uses of are to indicate a mapping and to mean converges to.
23928 	X	these are much much commoner than implies except in books on logic and set.
23929 	X	actually the mapping meaning is a pretty strong contender in some books on set.
23930 	X	i found no instance of were used for anything other than implies.
23931 	X	i have seen it used to mean evaluates to though ive seen other symbols for that just as.
23932 	X	ive never seen it used to mean is equivalent to and i hope i never.
23933 	X	in logic and set theory you often need to talk about formal systems for doing mathematics in but you also need to do mathematics yourself about rather than in those.
23934 	X	the terms formal theory and metatheory denote respectively a formal system in which one can do mathematics and whatever system usually not formalized youre using for talking about those formal.
23935 	X	gareth mccaughan gareth mccaughan at pobox com sig under construc.
23936 	X	bormotov bor at vb dn ua wrote in message news.
23937 	X	i havent noticed then as a keyword in python.
23938 	X	nick vargish nav at adams patriot net wrote in message news yyyrbig fsf at adams patriot net.
23939 	X	i was thinking to this possibility without the colons.
23940 	X	notice that then could be a pseudo keyword analogous to as.
23941 	X	i would support this more than.
23942 	X	overload if it is too much similar to a.
23943 	X	in the last few days i have changed my mind and now i am against any suggestion than could generate confusion between the if statement and the conditional.
23944 	X	this is because somebody pointed out the confusion between.
23945 	X	if c print x else print y.
23946 	X	if c print x else print y.
23947 	X	dan bishop danb at yahoo com wrote in message news.
23948 	X	no years of python have dimmed memory of such details for other.
23949 	X	i dont think python should gratuitously introduce a new.
23950 	X	i fail to see why forcing people to avoid an idiom thats obvious to them because its not the right one is a benefit to their productivity or the readability of their.
23951 	X	in my own case although i can see that your use of and is shorter i think that the if else is.
23952 	X	at first glance if i see x and y it looks like x is one possible desired expression value while here hasattr makes no sense as something to store into result so the second version looks more.
23953 	X	analyzing the code more carefully i see that the two lines are different and it seems likely that none is preferred to false for the result in the case when the obj does not have the.
23954 	X	david eppstein uc irvine of information computer science eppstein at ics uci edu http www ics uci edu eppstein.
23955 	X	alexander schmolck and others including andrew koenig who i think was the first to mention it have said.
23956 	X	howeve ive also been trying to estimate the likelihood of misuse of the if else.
23957 	X	i think its fair to estimate that in the code ill be looking at i should expect to see about a or higher misuse.
23958 	X	on the contrary i have pointed out that there are times when its a nice solution to a.
23959 	X	my problem with many of the arguments posted here is they only show good use cases for the if else expression and exclude mentioning that people will use it incorrectly and that the increase in readability maintainability needs to be balanced by the decrease in the metric given the.
23960 	X	booleans are very unlikely to be.
23961 	X	metaclasses are very likely to be.
23962 	X	list comprehensions may be misused but have not been that misused to date though list comprehensions with if else expressions seem prone to misuse where each alone is.
23963 	X	adding a standard bool class with instances named true and false make it easier for code to interoperate because no additional translation is needed to interface between the boolean type used in one package and the boolean type used in another.
23964 	X	similarly were an ifelse function to be added it would be a common name and hence people would use it who would otherwise not create a project specific ifelse function on grounds that it creates a project specific.
23965 	X	note that the rewrite here was not the same as my original code which is.
23966 	X	if spam in s if eggs in s t vikings else t waitress else t customer.
23967 	X	i agree that there are times when the if else expression make the code more readable and more.
23968 	X	my claim these days its changed over the progression of this thread is that the if else expression will be used inappropriately and the rate of misuse will be roughly equal to the amount of proper.
23969 	X	in one c codebase written by people who dont consider themselves to be expert programmers the misuse rate in c was higher than the proper use rate and if the code had been written in python then the misuse rate would have been even.
23970 	X	in another c codebase pythons c implementation written by experts the estimated misuse rate from a small sample of examples was about misuse for every.
23971 	X	i gave elsewhere examples of misuse including.
23972 	X	c chr i if i else i instead of c abcdef i.
23973 	X	and a x if x y else y instead of a min x y.
23974 	X	i do not believe this discussion of the likely misuses of the if else expression have been sufficiently.
23975 	X	actually there have been statements about hobbling good programmers based on the follies of bad one.
23976 	X	ive then suggested that this construct will only be used about every lines others suggest numbers closer to every but have have problems with that analysis.
23977 	X	so the hobbling part will be minor in the best of.
23978 	X	granted that also means the misuse will be low but that means the time you see this construct in others code it will be used.
23979 	X	in a vacuum i like the idea of some kind of ternary.
23980 	X	but im opposed to every one of the suggested syntaxes and the ones that seem the most likely to pass are imho so bad that id rather not have ternaries at.
23981 	X	so id probably lie on the first vote and just vote no to the whole.
23982 	X	print my if lambda big fun lambda big fun print my if lambda yes lambda no.
23983 	X	the main problem of python is letter.
23984 	X	what if we replace it with.
23985 	X	uh who says lambda is ugly.
23986 	X	same goes for the other possible uses like code thunks.
23987 	X	sincerely yours roman suzi rnd at onego ru my ai powered by linux redhat.
23988 	X	i think inline if construct must be if it is to be at all analogous to if elif elif.
23989 	X	and my imagination fails on how to make it do not forget ambiguity of if then else without bracketing.
23990 	X	unless lazily evaluated function arguments are introduced there is no other way to introduce inline.
23991 	X	erik max francis max at alcyone com writes.
23992 	X	cond c x y and some variants on this which i dont remember exactly.
23993 	X	a few macro schemes from threads gone by.
23994 	X	as a standalone statement the corner case is.
23995 	X	if you really meant that you should parenthesize it.
23996 	X	which will be legal since the opening parenthesis means we already know were dealing with an expression or instead just write it out as.
23997 	X	lets all remind ourselves that this is indeed a corner.
23998 	X	the most popular uses of conditional operators are in assignments and in arguments to function.
23999 	X	conditional operators in solitary expressions as standalone statements are in my experience very rare in any language.
24000 	X	conditional operators are where you want to de emphasize the flow control if theyre a standalone expression then thats no longer the case and so use of them that way constitutes in my opinion.
24001 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote no man quite believes in any other.
24002 	X	h l mencken alcyone systems san jose.
24003 	X	because its an example of why without a conditional operator people who want one will resort to constructs that are less readable and potentially inherently.
24004 	X	people will use the workarounds that are to my reading semi jokingly offered in the.
24005 	X	they will write more unreadable code because of.
24006 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote always forgive your enemies nothing annoys them so.
24007 	X	oscar wilde bosskey net quake iii arena http www bosskey net qa a personal guide to quake iii.
24008 	X	its understandable but its not very readable and its hardly a good substitute for a genuine bulitin conditional.
24009 	X	the whole point of one is to increase readability this decreases readability as does the other form involving and or and lambdas.
24010 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote will i disappoint my future if i stay sade bosskey net return to wolfenstein http www bosskey net rtcw a personal guide to return to castle.
24011 	X	especially when it seems from my analysis that in real life code this is used about once every lines or so at least for users in my.
24012 	X	and you forgot it is prone to misuse hiding possible bad coding style.
24013 	X	which seems to be more frequent than good use at least in my.
24014 	X	and the relatively minor one is harder to debug because youll need to break out the different terms before you can add print statements to them.
24015 	X	no this leads down another path with different.
24016 	X	you are describing braced according to your interpretation not my.
24017 	X	the fact that you are binding y here means that you must bind to the value wrapped inside the and you get that by evaluating the.
24018 	X	thus the above just has the same effect as.
24019 	X	the was peeled off above when evaluated for binding to y.
24020 	X	no error it should work just as.
24021 	X	no there is no deferral of evaluation of the x term once the term is reached to be evaluated for its normal.
24022 	X	this happens when it is used in a logical context as well as non.
24023 	X	the difference is that logical true is substituted for whatever the logical value would have.
24024 	X	the non logical value is then immediately the value that continues as such just as for an unwrapped.
24025 	X	any context that takes the value unwraps.
24026 	X	its just that in a logical context the logical value is.
24027 	X	note that in a logical context this two step access of logical value and normal unwrapped value already.
24028 	X	e and x results in not.
24029 	X	every non boolean object is an object with a weird truth value and has to be treated correctly according to context.
24030 	X	this can be a workable way to look at.
24031 	X	was there a vote announcement that i missed.
24032 	X	jp calderone exarkun at intarweb us writes.
24033 	X	again the usual thing with side.
24034 	X	val z if x val y.
24035 	X	calls both functions instead of just calling.
24036 	X	at rwcrnsc ops asp att net djw.
24037 	X	adopting all of c might be going a bit far but i dont mind having a few operators in common.
24038 	X	y z is harder to read than a binary operator but it is surely simpler than a list comprehension and look how quickly one gets used to.
24039 	X	i was initially peeved at fashionable complications were introduced into python and it was only when i actually bothered to write a list comprehension that i realised how easy and convenient it.
24040 	X	in article vhslpohd at news supernews com.
24041 	X	if i run the voting and its a straight pick between these alternatives vote ill probably use.
24042 	X	otoh after taking a quick look at more web pages approval voting is easier so maybe ill use that.
24043 	X	does anyone have actual experience with both condorcet and approval voting.
24044 	X	im not going to use irv aka australian hugo.
24045 	X	aahz aahz at pythoncraft com http www pythoncraft com.
24046 	X	register for pycon now http www python org pycon reg html.
24047 	X	fortunately whether theyre required or not you can always insert them yourself as a matter of.
24048 	X	i dont think they should be required but imagine myself using surrounding parentheses.
24049 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote if anything is sacred the human body is.
24050 	X	walt whitman a simple python opengl rendering.
24051 	X	samuele pedroni pedronis at bluewin ch writes.
24052 	X	ok at that point it just get down to a matter of subjective.
24053 	X	i personally find the second version far more explicit and.
24054 	X	i guess in c xy z isnt usually convertable to x y z but the comparable expression in lisp would be or and x y z.
24055 	X	one occasionally sees that however if x y z or cond x y t z is generally.
24056 	X	this is not the proposal that is put.
24057 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote men live by forgetting women live on.
24058 	X	t s eliot get your own customized newsfeed online in realtime for free.
24059 	X	erik max francis max at alcyone com writes.
24060 	X	because they cant make their point any other.
24061 	X	oh hang on you didnt notice that the people putting up the expressions which keep getting shot down are the pro pep.
24062 	X	the burden of proof is on those who want this change justify.
24063 	X	youve still not presented an argument in favour of the proposition that the use of the conditional operator in those cases is justified and helps readability.
24064 	X	im not trying to persuade you that conditional expressions are wrong or even that they are not useful on occasion.
24065 	X	im simply pointing out that youve not made a single argument in favour of them that holds any.
24066 	X	but lets not pretend that anyone is saying anything.
24067 	X	sean ross sross at connectmail carleton ca wrote in message news.
24068 	X	to x when c else y.
24069 	X	as for the utility of this operator i find myself all the time doing if c b x else b y.
24070 	X	and thinking gee i could use a ternary operator.
24071 	X	im still puzzled over the choice of iff for this.
24072 	X	in maths it means if and only if which is totally the wrong meaning for an if this otherwise that.
24073 	X	someone else i believe suggested iif but i really cant see how that.
24074 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote whoever contends with the great sheds his own.
24075 	X	http www pollywannacracka com the internet resource for interracial.
24076 	X	could you explain why you think that the suggested vote process is stacked in favor of the vote passing.
24077 	X	i explained or at least tried to why i thought it seemed stacked against it passing could you do the same.
24078 	X	im surprised to hear someone suggest that it seems stacked in favor of the passing since the voting proposal starts with a no confidence vote that would affirmatively reject the proposition and then and only then does it consider possible.
24079 	X	the failure of the no confidence vote to pass would then in the wording of the original proposal constitute a validation of a threat to forever withhold ternary.
24080 	X	he was even talking about a or a.
24081 	X	supermajority on the no confidence vote right out of the gate.
24082 	X	how can that possibly be considered stacking in favorite of passing.
24083 	X	i havent been tallying up but from the jist responses so far a three quarters supermajority requirement would almost guarantee a failure certainly more than one out of four people who have piped up have expressed displeasure with the idea.
24084 	X	in my opinion a vote tally should only serve as a simple record of whether people are in favor of a conditional operator were added to python and if so which.
24085 	X	such a vote should only serve as a guideline to guido as to what the community feels about it and then obviously he will make the final decision as in good bdfl style taking into account the results of the votes or not should he deem them misguided.
24086 	X	this nonsense about required supermajority no confidence votes seems to miss what should be the real goal of such a vote which is simply to provide guide with data about what the python community feels about the.
24087 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote lawyers i suppose were children.
24088 	X	charles lamb the laws list http www alcyone com max physics laws laws rules principles effects paradoxes in.
24089 	X	these c and x or y forms while currently serving as the only way to implement the conditional selection operator are far from.
24090 	X	the goal of the pep discussion is to come up with a syntax for conditional selection which is clear consise and.
24091 	X	i dont think obscure pythonic workarounds are a good form to start.
24092 	X	bengt richter bokr at oz net wrote in message news befbd cit at since html is guar true txt is jpeg bytes and jpg or txt necessary.
24093 	X	at least everyone will be pretty sensitive to the extent of getting nervous breakdowns if somebody asks for why isnt there a.
24094 	X	that is if guidos way of turning c l py into the most busy usenet group to put it mildly doesnt signal a longer term strategy in which case i finally will need to come up with some good if else why not maybe mail.
24095 	X	oops its c a else b or ill get a thousand replies telling me i dont really get it just like tim peters proposing to ban and or from python.
24096 	X	were programmers theres already a load of symbols that has to be learned that should not be an issue and.
24097 	X	ive programmed cobol and i kinda like some of the style but python is not and should not walk down that road.
24098 	X	it evaluates from left to right which does make a lot of sense in every other.
24099 	X	sorry this one i cant buy your comparing apples and boots is infix it just uses things not.
24100 	X	this one would confuse the heck out of me just as the perl equivalent does.
24101 	X	if statements are if expression optional keyword statement expression.
24102 	X	for my vote id accept anything other than x if cond else y.
24103 	X	my favorite during these discussions is cond truefalse but i guess that one wont go.
24104 	X	kim petersen kyborg a s it innovationshuset havnepladsen vejle.
24105 	X	the point is if you are going to admit a true conditional expression syntax into the language it damn sure better do short.
24106 	X	theres absolutely no reason not to even if in practice it is used.
24107 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote the doors of heaven and hell are adjacent and.
24108 	X	nikos kazantzakis bosskey net return to wolfenstein http www bosskey net rtcw a personal guide to return to castle.
24109 	X	on the idea of an if then else.
24110 	X	id like an if then else expression because.
24111 	X	it would eradicate once and for all the ugly and error prone work arounds currently used.
24112 	X	list pop c and x or y.
24113 	X	it would reduce redundancy in cases like.
24114 	X	if c t x else t y.
24115 	X	in some cases it would reduce flow breaking detail and improve chunking.
24116 	X	important statement another important statement detail detail detail detail next important statement.
24117 	X	important statement another important statement another important statement detail.
24118 	X	def somefunction a b c lines to setup parameter u lines to setup parameter v lines to setup parameter w do real work do some more real work.
24119 	X	def anotherfunction a b c do real work if then else expression u do some more real work if then else expression v if then else expression w.
24120 	X	many people think that in such cases one should just factor the detail into a separate.
24121 	X	in many cases that would be the right.
24122 	X	in some other cases though factoring would be wrong more of a good thing is not necessarily.
24123 	X	i wouldnt be happy about any odd syntax for an if then else.
24124 	X	support n way conditionals if possible.
24125 	X	my proposal would be to somehow support lazy dictionaries.
24126 	X	the values of a lazy dictionary are not immediately evaluated when the dictionary is built but when an item is.
24127 	X	for this support from the python parser is.
24128 	X	consider the kludgy use of normal dictionaries for if then else expressions.
24129 	X	true lambda sqrt x false lambda x.
24130 	X	compare a hypothetical syntax for lazy dictionaries.
24131 	X	lambda true sqrt x false x.
24132 	X	lazy true sqrt x false x.
24133 	X	christian tanzer tanzer at swing co at glasauergasse tel a vienna austria fax.
24134 	X	no but maybe you can replicate it some more.
24135 	X	i have seen worse effects of buggy code than.
24136 	X	besides in a pep world you would certainly find the like of.
24137 	X	self stream writeln ran d test s in.
24138 	X	getting things messed up with ternary ops whichever is easy.
24139 	X	that doesnt imply we have to introduce a new.
24140 	X	lol put me down for this one.
24141 	X	tim daneliuk tundra at tundraware com.
24142 	X	gerrit guido van rossum schreef op vrijdag februari om.
24143 	X	gerrit doesnt this equal z y bool d x bool c.
24144 	X	no its not equal because your version evaluates x y and z in all.
24145 	X	andrew koenig ark at research att com http www research att com info ark.
24146 	X	and the symbol when used that way is actually called the sheffer stroke though ive only seen it used to indicate the latter meaning not p and q.
24147 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote there was one thing i didnt show i love him and he doesnt know zhane bosskey net return to wolfenstein http www bosskey net rtcw a personal guide to return to castle.
24148 	X	whats the precedence of this thing.
24149 	X	for example what do each of these mean a b then c else d a then b else c d a and b then c else d a then b else c and d a b then c else d a then b else c d lambda a then b else c.
24150 	X	after were spending of my programming time in python for the last year and a half the lack of a ternary operator is probably one of the very few things if not the only one which really pisses me off about the.
24151 	X	i love python and proselytize it heavily but this bothers me to no.
24152 	X	i find to be an affront to competent programmers to be forced to be over verbose to death if then else in multiple lines or absurdly obscure all the and or tricks.
24153 	X	pretty much everything else i initially labelled as a personal wart in the language i soon realized was my own forcing my old ways c perl onto python instead of learning pythons own.
24154 	X	but this one i just cant shake it.
24155 	X	so i for one am super super happy to see it go in if it does indeed.
24156 	X	at least i can cast my.
24157 	X	holger krekel pyth at devel trillke net wrote in message news.
24158 	X	for this to be a minor change else would have to be a binary operator.
24159 	X	x and y else z x and y else z.
24160 	X	after x and y is evaluated the value is false when either x is false or when x is true and y is.
24161 	X	how is else meant to distinguish the two falses.
24162 	X	in this case what you would want would be something that somehow reads.
24163 	X	using if evaluate expression x or expression y depending on condition c then depending on ifs evaluation do stuff.
24164 	X	all very confusing to be sure.
24165 	X	how can this be done both clearly and obviously.
24166 	X	although i dont consider it to be either obvious or.
24167 	X	i realize all of this does not follow the mains points in the discussion so far but it is a possible.
24168 	X	in the end i see how a ternary operation can be useful and how it can be.
24169 	X	what the discussion boils down to is this do you need this construct enough to put up with the potential abuses it can bring.
24170 	X	or since its quite apparent that the construct is not strictly needed do you want this construct enough to put up with the potential abuses it can bring.
24171 	X	whatever you choose is fine with.
24172 	X	if i dont like it i wont use.
24173 	X	if i do like it i will use it.
24174 	X	but if other people use it ill likely go just kidding.
24175 	X	i agree with all of those.
24176 	X	but as others have posted new keywords are non starters in pep.
24177 	X	i especially enjoyed contrariwise andrew koenig.
24178 	X	i also dont much care for my other suggestion although i do not parse it the way that you.
24179 	X	mostly i just wanted to avoid a specific edge case someone mention much earlier in the thread.
24180 	X	if x when c else y do.
24181 	X	if if c then x else y do.
24182 	X	none of the above constructs is particularly wonderful none is particularly clear and hopefully none of them would ever be.
24183 	X	but of those listed i find the when variant to be the least.
24184 	X	when i read if x when c else y the when causes me to backtrack in my parsing and reevaluate what im.
24185 	X	for me it makes me stop and question what im actually.
24186 	X	and once again for me it does this more strongly than the other.
24187 	X	for example i tend to read the other variants as follows.
24188 	X	i find listcomps to be extremely readable and to improve the readability of the programs that i.
24189 	X	im not criticizing your opinions of course but i didnt want readers to think that everyone dislikes listcomp.
24190 	X	the issue with this analysis is that youll never know how large the dont care camp is almost by definition because if they dont care then they wont.
24191 	X	even if you hold a vote where you have a yes no and abstain and the numbers come in as say and respectively that doesnt mean that of the python community at large doesnt.
24192 	X	it could be that of the python community at large doesnt care in which case youre in the second scenario you depict.
24193 	X	the problem is just by including a dont care on the ballot youll never be able to know.
24194 	X	im perfectly happy with whatever voting process everybody is willing to agree to despite people repeatedly attempting to seem to want to put words in my mouth.
24195 	X	im just not seeing the value of including such a position on a ballot or what should be done with the abstain.
24196 	X	by the way andrew keonigs suggestion of a voting process where all alternatives are listed including no change the dont cares can still indicate their position by submitting an empty ballot which selects none of the.
24197 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote do not seek.
24198 	X	dag hammarskjold esperanto reference http www alcyone com max lang esperanto an esperanto reference for english.
24199 	X	evan simpson evan at am com writes.
24200 	X	i refuse to be baited by.
24201 	X	include stdio h sigmask sig c public domain compile me int main cv char v return cputchar v main v tweaks.
24202 	X	obwaqbusjpu ofu v build cc o sig sig c.
24203 	X	amended the pep to reflect some convergence on the newsgroup.
24204 	X	listed the downsides of the current.
24205 	X	listed why cond then expr else expr is starting to be preferred over cond and expr or expr.
24206 	X	after bdfl comments i withdrew my cab syntax and deleted the rejected cab.
24207 	X	the remaining punctuation based contender is ca b.
24208 	X	after bdfl rejection of non short circuiting options advocacy dropped.
24209 	X	removed it from the list of.
24210 	X	the leading options on the table are.
24211 	X	if cond expr else expr cond then expr else expr cond.
24212 	X	in article xsmuyam fsf at ruckus brouhaha com.
24213 	X	probably now but at least guido can say you had your aahz aahz at pythoncraft com http www pythoncraft com.
24214 	X	register for pycon now http www python org pycon reg html.
24215 	X	erik thats exactly my view as.
24216 	X	i would prefer if p then x erik else y but if an extra keyword is absolutely contradindicated erik then ill settle for x if p else.
24217 	X	i just want the erik functionality i can learn to use the.
24218 	X	i find one aspect of this discussion particularly interesting.
24219 	X	most of the people in favor of pep have a pretty good idea of the contexts in which they want to use conditional.
24220 	X	most of the people opposed to pep are giving purely subjective reasons disliking the whole idea so much that not only do they not want to use it but they want to prevent other people from doing so as.
24221 	X	ive seen conflicts like this in other contexts theyre often a symptom of two subsets of the community that come from different backgrounds and want to program in different.
24222 	X	the real question then is how much stylistic diversity the python community wants to.
24223 	X	andrew koenig ark at research att com http www research att com info ark.
24224 	X	whats the actual disadvantage of short circuiting.
24225 	X	is it only that if you have to short circuit then you cant just write a new builtin and be done with it.
24226 	X	it seems to me that there is no advantage to a builtin function over a new syntax provided the syntax is chosen well other than the implementation.
24227 	X	the arguments against any given version of the proposal are it enlarges the language and therefore makes it harder to it can be abused to produce horrible.
24228 	X	its its confusing even when not.
24229 	X	the arguments for it are it reduces code.
24230 	X	if we dont have it people will use horrible.
24231 	X	i claim that arguments apply just as much to a new builtin as they do to a new.
24232 	X	learning about a new function takes time just as learning about a new bit of syntax.
24233 	X	does anyone have any evidence that ifelse cxy would be easier to master than if c x else y.
24234 	X	for what its worth my baseless guess is that beginners are more likely to say huh to the function than to the if.
24235 	X	ive spent quite a lot of time teaching programming to year olds using python which may or may not be reason to trust my intuition on.
24236 	X	like it or not python consists of the core syntax plus the builtin types and their semantics plus the standard.
24237 	X	adding a new builtin function makes python more complicated just as much as adding a new bit of syntax.
24238 	X	and at least for the if c x else y spelling of the conditional expression the new syntax can be explained as quickly as if both arms of an if are expressions you can write it on a single line and use the whole thing as an expression.
24239 	X	well of course anything can be abused we all know.
24240 	X	the question is given any particular level of malignity or thoughtlessness how horrible is the resulting abuse likely to be.
24241 	X	well here are a couple of mild ish abuses in both.
24242 	X	i dont see any reason to prefer the first set to the.
24243 	X	if if x y x else y stuff t if x y if y z z else y else x if x y xy else yx.
24244 	X	lead to less abuse than a new expression the builtin function is uglier and less useful so it will be used less so it will be abused.
24245 	X	i dont think thats a strong argument in its.
24246 	X	all i can say is i think the functional form is.
24247 	X	i dont think functions of this kind fit well in.
24248 	X	i cant prove any of that of.
24249 	X	it seems to me that the ifelse function is worse than the if else construct in this respect because the difference between the when true clause and the when false clause is purely.
24250 	X	from the million articles already posted in this thread i think its clear that a general problem with the punctuation based solutions is that its often too easy to get the two consequents switched by mistake and an ifelse function will make that.
24251 	X	i also happen to find all the names proposed for the function so far confusing but then names for functions with many arguments are almost always insufficiently.
24252 	X	hmm that suggests a way to make ifelse easier to get right keyword.
24253 	X	in summary all the arguments against new syntax apply just as well to a new builtin and a new builtin would be useful in a strict subset of the cases where new syntax could be.
24254 	X	remind me what advantages a new builtin is supposed to have over new syntax again.
24255 	X	and not so far as i can see a subset where inappropriate use is any less.
24256 	X	gareth mccaughan gareth mccaughan at pobox com sig under construc.
24257 	X	i would prefer if p then x else y but if an extra keyword is absolutely contradindicated then ill settle for x if p else.
24258 	X	i just want the functionality i can learn to use the.
24259 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote the doors of heaven and hell are adjacent and.
24260 	X	nikos kazantzakis bosskey net return to wolfenstein http www bosskey net rtcw a personal guide to return to castle.
24261 	X	if the pep gets accepted and implemented people who objected to it will continue to complain about how obnoxious they think it.
24262 	X	if it gets rejected and is even decreed never to be considered again it will still get brought up repeatedly because people want that functionality and want to know how to get facsimiles of it in.
24263 	X	of those two camps by the way id pay more attention to the.
24264 	X	its in the faq its discussed routinely even before the pep obviously acceptable alternatives are constantly exchanged back and forth each noticing their tradeoffs to accuracy complexity and readability and experienced programmers new to python will still ask about.
24265 	X	that means that lots of people want.
24266 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote no man quite believes in any other.
24267 	X	h l mencken bosskey net counter strike http www bosskey net cs a personal guide to counter.
24268 	X	just allow f x if is special x else y.
24269 	X	paul rubin phr nb at nospamnightsong com ha scritto nel messaggio news xisvtpv fsf at ruckus brouhaha.
24270 	X	the issue isnt performance its legitibility but more importantly.
24271 	X	self stream writeln ran d test s in.
24272 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote ride ride this wave of mine res esperanto reference http www alcyone com max lang esperanto an esperanto reference for english.
24273 	X	gitte wange gitte at babytux dk wrote in message news badu huh at news cybercity dk.
24274 	X	i remember i tried that and.
24275 	X	maybe there is somebody that can give you the solution as soon as the pep storm.
24276 	X	there are always alternatives everybody knows.
24277 	X	the issue is not if there is an expression that fundamentally cannot be written without the conditional operator because everybody on both sides of the debate knows very well that there is no such.
24278 	X	the question is if some forms are more readable with the conditional operator than without.
24279 	X	its fundamentally frustrating when people shoot down legitimate examples of the conditional operator with oh but you could have done it this.
24280 	X	the question is whether the conditional form is useful and readable on its own.
24281 	X	when people shoot down the max example e if x y x else y with well you should have used max x y is utterly.
24282 	X	of course it could be written that.
24283 	X	were not asking whether theres another way to do it were asking whether that is readable on its own.
24284 	X	those who are against the pep on general principle seem to never understand this.
24285 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote whoever contends with the great sheds his own.
24286 	X	http www pollywannacracka com the internet resource for interracial.
24287 	X	tony sy d year d month.
24288 	X	sy d month d year d year.
24289 	X	despite duplicating d year because i would rather duplicate d year than subtract from.
24290 	X	tony for me that a killer problem of peps proposed syntax with the tony condition in the middle reading and refactoring the code becomes tony harder.
24291 	X	that is why i cannot vote simply for.
24292 	X	tony the only syntaxes id like to see are.
24293 	X	if condition then expr else else expr.
24294 	X	andrew koenig ark at research att com http www research att com info ark.
24295 	X	i think you are overestimating the.
24296 	X	conditional expressions tend to be used for simple stuff selecting between two values for.
24297 	X	more complex decisions will certainly be done using traditional if.
24298 	X	this will allow for the flow of control structure to become clearer not more confusing because a lot of ifs that dont really add very much understanding to the program logic can be removed out of the.
24299 	X	the style guide may be helpful here telling people to aboid abuses of the conditional.
24300 	X	carlos ribeiro cribeiro at mail inet com br.
24301 	X	in article yuvfzstewk fsf at europa research att com.
24302 	X	i prefer iif for immediate if.
24303 	X	aahz aahz at pythoncraft com http www pythoncraft com.
24304 	X	register for pycon now http www python org pycon reg html.
24305 	X	echelon north korea nazi cracking spy smuggle columbia fissionable stego white water strategic clinton delta force militia tempest libya mossad.
24306 	X	i think im posting evolving messages about the same thing but i more and more come to an insight.
24307 	X	and and or are logical selection.
24308 	X	they use the value of two objects to decide which one to carry.
24309 	X	their visual appearance includes the logical operation on the arguments in a way which is the reason for their.
24310 	X	if we now modify the true value to become true all the time then this is an abuse of the and operator since it is no longer doing what it says it is only carrying the right values wrapper if the left value is.
24311 	X	this is a complete abuse of the language and we should refuse to create work arounds for it to make it.
24312 	X	x and y or z as a spell of if x then y else z is know to be.
24313 	X	but perfectly valid if it is really meant in its logical sense what it seldom is.
24314 	X	x and y or z is a correct heal of the wrong logic but it abuses and and its reader since and is not intended to do a left test.
24315 	X	being used like that and is the wrong name since we are not intending to and anything we want a then.
24316 	X	if a then b construct would translate to not a or b.
24317 	X	but this works in pascal not in python since the truth operators have to carry their original.
24318 	X	i think this whole mixture of logic with objects is.
24319 	X	ciao chris christian tismer mailto tismer at tismer com mission impossible oftware have a break.
24320 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
24321 	X	one dialog between holger krekel and andrew koenig reminded me of the old monkey island.
24322 	X	guybrush threepwood fighting with the swordmaster.
24323 	X	you fight like a cow how appropriate.
24324 	X	you will wear my sword like a sish kebab im shakin im shakin.
24325 	X	i carelessly reduced and cutted their absolutely positive dispute into a form that resembles this a.
24326 	X	thanks for the funny message that rang this bell.
24327 	X	lets vote who of the two is guybrush.
24328 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
24329 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
24330 	X	or do whats often done and write a dummy display used for the null.
24331 	X	class dummydisplay def getdisplaystring self return none.
24332 	X	this is very nice because there are no branches in the code flow except once at the very.
24333 	X	i just posted a really hairy list comp w if else.
24334 	X	indicies long function name atom realatom atomcount reactionmapping if atom.
24335 	X	oxygen else for atom in atom atom atom atom.
24336 	X	given the code base from which i extracted it it is likely that the programmers would have thought about this sort of construct and deemed it.
24337 	X	indicies for atom in atom atom atom atom if atom.
24338 	X	oxygen indicies append long function name atom realatom atomcount reactionmapping else indicies append.
24339 	X	in the analysis from which this came i estimated that in my target user base the.
24340 	X	would be used appropriately about once every lines of python code and likely to use it inappropriately at a more frequent rate than.
24341 	X	still i think and i now have the numbers to back me up that amount non expert developers the misuse rate is higher than the proper use rate and that in any case the use rate is very low too low to warrant a fundamental low level construct like this which introduces a choice with no good unambiguous guidelines of when it is proper.
24342 	X	see my post with the buy bonus buy werewolf buy for just such an.
24343 	X	erik max francis max at alcyone com wrote in message news.
24344 	X	yeah and i think sean was the first one who proposed it whereas i was one of the first.
24345 	X	unfortunately it seems that most of the people dont like the order thats why now i am supporting my second choice c then x else y but still i think x when c else y was.
24346 	X	if errs sys exit sys exit.
24347 	X	or even sys exit errs which works just fine if errs is a string and it even prints the message to stderr.
24348 	X	having two characters at each step helps visually segregate the.
24349 	X	the and strongly suggest testing and.
24350 	X	doesnt overload or confuse with existing.
24351 	X	using martin maneys live code examples heres what it looks like i j j n sy d year d month addurl params has key addurl params addurl tail len events br tail.
24352 	X	and i vote aahz to be the tally person.
24353 	X	i miss the conditional operator from c used it sparingly but it sure was handy.
24354 	X	i like cs syntax but mostly because im used to.
24355 	X	the proposed syntax takes some getting used to but after awhile it reads.
24356 	X	hopefully books and style guides will teach that if then else expr abuse is akin to naming the self variable something besides self yeah its possible just dont do.
24357 	X	itll be nice to get some closure one way or.
24358 	X	http mail python org mailman listinfo python list.
24359 	X	msaccess basic had this exact construct which they called an inline if.
24360 	X	only difference is that it was iif instead of iff.
24361 	X	to jack diederich python list at python org.
24362 	X	what about a built in function.
24363 	X	the flow is left to right more or less its similar to constructs in other.
24364 	X	it can of course be written in python currently in a rather horrible.
24365 	X	this message is checked for all known viruses by the messagelabs virus scanning.
24366 	X	if youre really going to shoot for some kind of lazy evaluation syntax i think something that does not look like anything weve seen would be.
24367 	X	id much prefer something like delimiters although i have no idea if that would cause grammar.
24368 	X	i if youre really going to implement lazy evaluation it should look like nothing youve seen before so theres no question this is something.
24369 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote you cannot step into the same river.
24370 	X	cratylus python chess module http www alcyone com pyos chess a chess game adjudicator in.
24371 	X	holger krekel pyth at devel trillke net ha scritto nel messaggio news.
24372 	X	sometimes it could be a real ambiguity so maybe it should be just.
24373 	X	james i think the concern is that a statement in python may consist james of or begin with an expression and thus the leading keyword james alone is not enough to tell what is going.
24374 	X	in my grammar proposal im defining it that way any statement that begins with if is an if statement not an if expression treated as a.
24375 	X	james i am looking into this more closely to confirm but i dont james think its a problem for the.
24376 	X	if you can find another way of doing it thats more general and or permissive thats fine with.
24377 	X	james i expect that if you said something like.
24378 	X	james that would parse as an expression because of the lack of.
24379 	X	james would be parsed as an if statement with expr and expr also james were seen as.
24380 	X	im skeptical that this is possible but if you can figure out a way to do it that would be fine with.
24381 	X	no the i would have made them rewrite it faction gets to vote as.
24382 	X	thats the handing out spraypaint to improve the quality of vandalism.
24383 	X	but anybody who knows the math notation will read the as for not as if.
24384 	X	holger what about a missing else clause.
24385 	X	holger allowing it could be nice for stuff like.
24386 	X	holger result obj if callable obj.
24387 	X	its supposed to be an expression that yields a.
24388 	X	so your example would be equivalent to.
24389 	X	and the question is what is the value of x if y when y is false.
24390 	X	i cant imagine any value that would do what you.
24391 	X	in other words i dont think we need a second way of writing.
24392 	X	if you really want it then say.
24393 	X	andrew koenig ark at research att com http www research att com info ark.
24394 	X	i keep saying trinary instead of ternary.
24395 	X	in article mvudncqkaroasmjxtwcrg at comcast com.
24396 	X	this goes completely against the python philosophy that whitespace should be used to define the.
24397 	X	it would be very easy to reindent this to make it look like it did something other than what it really.
24398 	X	for this reason i prefer using if elif else statements to ternary expressions for anything this.
24399 	X	david eppstein uc irvine of information computer science eppstein at ics uci edu http www ics uci edu eppstein.
24400 	X	just as when you write somelist append anitem your intention was to say i want to append this item to this list and not o dear list please append this item to yourself for me.
24401 	X	the order of words in the most natural english way to express the operation is not the same as in say german where the verb would come at the end or python where the list comes first.
24402 	X	but your argument doesnt show comma join somelist as any less pythonic than somelist append anitem and thats pythonic enough for.
24403 	X	its just silly to dwell on the order of words in one natural language or another its exactly the wrong criterion to use in order to determine a programming languages syntax c.
24404 	X	rather in a language that does single dispatching what you need to focus on is the object to the left of the comma is the one on which full dispatching is done those in parentheses can be accessed via suitable protocols but not sensibly dispatched.
24405 	X	given this whats the best one object to have on the left.
24406 	X	and thats clearly the joiner for joiner join anything.
24407 	X	only in this way can you get the operation for free on any iterable sequences files generators anything and full polymorphism on the joiner object whose usefulness i have shown many times in the.
24408 	X	anybody who doesnt see this at once is quite forgivable errare humanum est but i hold that people who have been shown this and still keep whining on how theyd much rather express their programs in swahili word order no matter what horrible loss of functionality and huge burdens this implies should go program in swahili or go debate pep for the next year or two and give the rest of us a.
24409 	X	yes but not all readers of the newsgroup can be expected to know the ins and outs of it already therefore when the whining comes up again somebody sensible must keep repeating the obvious reasons why the whining is simply wrong and pythons design is right on this specific.
24410 	X	educating people who can be educated is not nothing by helping them understand why this design is exactly right one may help them become better programmers and.
24411 	X	and im glad to see that a few years experience may be starting to help you see how this design is right maybe in a few more youll even stop whining against.
24412 	X	but for the benefit of people who can learn from reading examples rather than needing years of experience let me give an.
24413 	X	the current iterator protocol requires me to code a class that exposes a method named next and one named iter which returns self thats all and then all kinds of iterations fully including inside library functions and methods that take iterator arguments can be smoothly.
24414 	X	so say i need strings of the form and so on or in some cases and so on and the.
24415 	X	class nums def init self n self n n self i def iter self n return self def next self if self i self n raise stopiteration result str self i self i return result.
24416 	X	and then join nums join nums and so.
24417 	X	any iterable can be iterated on for all sort of interesting purposes including.
24418 	X	and if i need something slightly different such as alternating dashes and slashes as in thats easy too.
24419 	X	class dashandslash def join self sequence result sep for x in sequence result append x result append sep if sep sep else sep return join result.
24420 	X	and dashandslash join nums is now what we.
24421 	X	if the paladins of horrible designs based on having join as a method of sequences had been at the helm in pythons design python would be a substantially worse language as a result wed have to code a join method to every sequence shudder and other iterator or forcibly inherit helpers i crutches to partially compensate for the crippled.
24422 	X	this is just the sort of thing that makes me happy the bdfl takes the.
24423 	X	i would expect it to mean.
24424 	X	it seems obvious to me that this is the proper.
24425 	X	but i cant say why which certainly implies that else needs to be.
24426 	X	of course personally i would find this expression to be horrible even without the missing.
24427 	X	i would never put two ifs in a statement without parenthesis to make it entirely clear how to parse.
24428 	X	ian bicking ianb at colorstudy com http colorstudy com n talman chicago il there is no flag large enough to cover the shame of killing innocent people howard zinn.
24429 	X	andrew koenig ark at research att com wrote in message news.
24430 	X	however it clearly introduces new precedence problems into the syntax how do i know you meant.
24431 	X	self stream writeln ran d test s in.
24432 	X	and not apart from the run time error it would produce.
24433 	X	self stream writeln ran d test s in.
24434 	X	methinks anything that allows colons inside expressions will be tough for us to.
24435 	X	this isn t the only area where people like to make things tougher for themselves than they need really.
24436 	X	some people would shoot themselves in the foot even if they only had a pitchfork present company excluded naturally.
24437 	X	regards steve holden http www holdenweb com python web programming http pydish holdenweb com pwp register for pycon now http www python org pycon reg html.
24438 	X	the question is followed by a question.
24439 	X	this is the corner case that is discussed at some length its the place where the expression and the statement meet in the.
24440 	X	i dont see any reason to worry about this case since it really is degenerate leaving the parser the way it currently is and letting it parse as a statement and thus illegal seems fine to me if you really meant the conditional operator you can surround it with parentheses or split it over lines and make it a real.
24441 	X	neither requires any changes to the parser other than the addition of the conditional operator itself as an expression not a statement.
24442 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote there i was there i was splitting atoms with my desire lamya computer science http www alcyone com max reference compsci a computer science.
24443 	X	i could care less about the curly braces and.
24444 	X	the central idea is an n ary choice presented in logical order surrounded by grouping delimiters that the parser can easily recognize with no new.
24445 	X	t if spam not in s customer eggs in s vikings waitress t if spam not in s customer elif eggs in s vikings else waitress t if spam not in s customer eggs in s vikings waitress.
24446 	X	it is not very clear in nested variant as the code is not readable any guido can drop indents in python as.
24447 	X	also if this is to happen next logical step will be this.
24448 	X	sincerely yours roman suzi rnd at onego ru my ai powered by linux redhat.
24449 	X	uh why the two stages with the absolute block in the middle.
24450 	X	why wouldnt it be the reverse a vote of people who want one rather than people who dont want one.
24451 	X	if a positive vote pass it would be a clear indicator that the community is in favor of such a thing you seem to be taking the reverse approach and are looking for ways to shoot the proposal.
24452 	X	is it because youre opposed to the pep.
24453 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote men live by forgetting women live on.
24454 	X	t s eliot get your own customized newsfeed online in realtime for free.
24455 	X	theres at least one additional case worth mentioning sort of between and its id prefer one of these forms but not if they put too much of a burden on implementation break too many addition rules such as adding new keywords punctuation but will defer to guidos proposal in the event nothing else is.
24456 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote life is an effort that deserves a better.
24457 	X	karl kraus alcyone systems san jose.
24458 	X	delaney timothy c timothy tdelaney at avaya com wrote in message news.
24459 	X	python list at python class bool.
24460 	X	short circuiting and everything else required in.
24461 	X	with the optional callable arg which i did not notice in provious proposals this makes a lot of sense except that other forms do not require the condition to be a boolean so this would either require bool c ifelse xy or implementation as a builtin func rather than.
24462 	X	there is also extra overhead with func method.
24463 	X	if one result is constant and other not forcing constant to be a function adds a second layer of call.
24464 	X	still anyone can add function version of this to their utility package regardless of pep.
24465 	X	furthermore by the presence of a real boolean type we should ask ourselves if nad and or shouldnt be deprecated in their current meaning towards were boolean only.
24466 	X	parameters are often massaged like this or case.
24467 	X	the meaning of this phrase is if the user has provided no argument value that is true non empty or not most of the time then provide some default value.
24468 	X	arg arg then arg else default.
24469 	X	would be the verbose replacement of.
24470 	X	a short replacement would read better.
24471 	X	which means if arg is false replace it by default.
24472 	X	the meaning of this phrase is if the user provded any argument that is true use some default value.
24473 	X	would be the verbose replacement of.
24474 	X	a short replacement would read better.
24475 	X	summary and and or are behaving like logical.
24476 	X	they happen to do this by not providing a plain truth value but by promoting one of their.
24477 	X	and and or are valid operators when used in a logical context only meaning only to use the truth.
24478 	X	they have the side effect of carrying an operator which i regard as a design flaw but this is.
24479 	X	using and and or when they are meant as then or else should be deprectaed as bad style in the long.
24480 	X	almost all instances of and and or used to carry a value can be replaced by then or else with ease which makes the resulting code much more.
24481 	X	and and or do have a builtin perception of symmetry which is not the truth and hard to explain to.
24482 	X	therefore i propose to deprecate their use to promote a value and i propose to introduce then and else as dual operators together with the then else pair as ternary operator to be used in any context where the inquiry should promote the right operand without evaluating the truth.
24483 	X	here is my cure to and and or with side effects.
24484 	X	def then proc a b if a return b else return a.
24485 	X	and and or should be replaced by the above constructs in all contexts where and and or are not pure logical but are meant to propagate specific values for new.
24486 	X	please correct me positively if i made a mistake at am.
24487 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
24488 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
24489 	X	david if it turns out that the interpreter can nicely support.
24490 	X	david then id be perfectly happy with.
24491 	X	my support for an david alternate keyword is based on the assumption that the above david syntax cant.
24492 	X	please see my proposed grammar changes elsewhere in this.
24493 	X	andrew koenig ark at research att com http www research att com info ark.
24494 	X	yes ive been following that discussion too but im in the camp that says and doesnt readily imply anything about choosing between two things anyway so im not keen on building on the current idiom at.
24495 	X	thats interesting i saw it elsewhere also by you i am wondering how i could bring that into my current candidate.
24496 	X	the basic ternary syntax is c x y.
24497 	X	sorry to quote myself but the threads have proliferated to where im not sure whether anyone will notice if an idea is not posed for comparison in more than one place.
24498 	X	the above is a concise ternary based on a larger concept from lisp via paul moore with my twist.
24499 	X	the concept was c v c v c v true vdefault i evaluate cis until you find one thats true then evaluate its companion v my twist is to drop the brackets and supstitute instead of.
24500 	X	thus c v c v c v true vdefault.
24501 	X	with a single condition you have c v true vdefault.
24502 	X	and by making the final condition introducer and its condition true optional you get c v vdefault.
24503 	X	which expresses the ternary nicely without.
24504 	X	the latest twist to catch exceptions introduces exception types with and attaches result expressions with the same as for ordinary.
24505 	X	c v c v c v true vdefault.
24506 	X	and you work left to right skipping ordinary condition value pairs if an exception.
24507 	X	ok this is now my latest and greatest variant.
24508 	X	im going to turn that one right around on.
24509 	X	why add the new keyword ifelse.
24510 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote she glanced at her watch it was.
24511 	X	james clavell bosskey net quake iii arena http www bosskey net qa a personal guide to quake iii.
24512 	X	peter hansen peter at engcorp com wrote in message news.
24513 	X	guido could have added the ternary operator years.
24514 	X	he thinks that now it would be more useful than ten years ago since now we have listcomp lambdas.
24515 	X	still it is not convinced and he is asking for.
24516 	X	he doesnt want it but since people has kept requisting it for ten years he is willing to concede it for peace of.
24517 	X	he doesnt think it would be too much.
24518 	X	he really thinks most pythonistas dont want.
24519 	X	if the votation is against he has a good reason to refute it.
24520 	X	i am not a mind reader i dont know what guido.
24521 	X	sometimes i propend for sometimes for sometimes for.
24522 	X	samuele andrew koenig ark at research att com ha scritto nel samuele messaggio news yunlpvtj fsf at europa research att.
24523 	X	i samuele dont like the naive questions that if else statement samuele if else conditional expression could.
24524 	X	samuele you should not assume that people have done their homework samuele when they ask this kind of thing or that they have a firm samuele grasp of the conceptual framework of things people typically samuele come with why this does not work.
24525 	X	and you think it is samuele clear that it cannot.
24526 	X	in other words it is clear to.
24527 	X	samuele if x print positive else print negative samuele for x in l print x.
24528 	X	andrew koenig ark at research att com http www research att com info ark.
24529 	X	what just because a notation can be abused makes it always bad.
24530 	X	david eppstein uc irvine of information computer science eppstein at ics uci edu http www ics uci edu eppstein.
24531 	X	if i understood it then hopefully yes else not.
24532 	X	certainly you dont want people to react like you do on half wit arguments you may produce.
24533 	X	and aahz argument isnt even half.
24534 	X	david eppstein eppstein at ics uci edu writes.
24535 	X	as andrew dalke already pointed out this is a good example in that most of the standard workarounds dont.
24536 	X	but i dont like the look of the one liner if i read it in someone elses.
24537 	X	i also dont think id naturally think to write it that way in my own.
24538 	X	its shorter which means that if i had a lot of these my function would be hard to read because it was too.
24539 	X	but i think id split the function up before that.
24540 	X	dunno its a good example but i still dont feel convinced of the.
24541 	X	if cond then expr else expr.
24542 	X	the first case looks cleaner and just as intelligible to.
24543 	X	heres my last thought for a pep syntax that meets my criteria.
24544 	X	if youre not allergic to the idea of an n way conditional it allows for.
24545 	X	its grammar is obviously feasible it cant be confused with if it doesnt introduce new keywords it has no precedence issues its only four more characters than c t f you know what youre getting into the moment you see and its even easy to see where it.
24546 	X	my latest idea focuses on fixing this instead of inventing a new.
24547 	X	the idea works by marking the first option so that it will be treated as true in logical expression context but without changing its.
24548 	X	cond and x or y or cond and x or y.
24549 	X	for the sake of stylistic symmetry if.
24550 	X	paul this did raise the question in my mind about if i paul could just put.
24551 	X	paul y sqrt z if z else for z in x.
24552 	X	paul i dont remember the precedence of the for.
24553 	X	it would be paul good if this is.
24554 	X	y map lambda z sqrt z if z else x.
24555 	X	andrew koenig ark at research att com http www research att com info ark.
24556 	X	are you really saying that youre going to vote against a pep because of what i do in a non authoritative capacity.
24557 	X	im compiling a list for my own edification and will present it to the community when the threads die down what goes into the pep and or any vote on syntax will be decided by the community not.
24558 	X	i submit that you voting because of what i do will reflect far more on yor behavior and ethics than on mine particularly given that you have been clearly and vocally predisposed against the pep from the very.
24559 	X	read the updated text of pep.
24560 	X	a non short circuiting function in this case cond is specifically mentioned and explicitly rejected by the bdfl expressly because it does not short circuit.
24561 	X	adopt a function without short circuit behavior cond condition expression expression.
24562 	X	the fourth position is much more.
24563 	X	adding a new function cond is trivially easy to implement and fits easily within the existing python.
24564 	X	users of older versions of python will find it trivial to.
24565 	X	the downside is that it does not provide the sought after short circuit evaluation see the discussion below on the need for this.
24566 	X	the bigger downside is that the bdfl opposes any solution that does not provide short circuit.
24567 	X	the form is also explicitly rejected in the pep and thus is also not in my list of alternatives this is true from the very beginning and ive pointed it out a few times in this thread.
24568 	X	if you dont like it take it up with the.
24569 	X	still going to vote because of what i do.
24570 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote there i was there i was splitting atoms with my desire lamya computer science http www alcyone com max reference compsci a computer science.
24571 	X	rh someone re proposed c a else b.
24572 	X	the rationale is that rh the.
24573 	X	rh is a better marker than then and is suggestive enough rh to not rh need a leading if.
24574 	X	it doesnt require a new keyword rh and does rh not overload the.
24575 	X	no one shot this down but it rh didnt rh generate strong support.
24576 	X	rh the c then a else b form was understood by most though a rh few rh thought it looked unnatural in longer.
24577 	X	there rh were some rh who understood it but could not make the jump to the rh n ary form rh using the elif keyword.
24578 	X	it appears that the colons rh help to visually rh parse the n ary.
24579 	X	can these forms be chained c then x else c then y else z c.
24580 	X	for me c a b c then a else b and c a else b are the most.
24581 	X	denis s otkidach http www python ru ru.
24582 	X	i think youd be more comfortable with.
24583 	X	dale strickland clark riverhall systems ltd.
24584 	X	on feb rumours say that nick vargish.
24585 	X	this is not my idea either it was mentioned in the initial pep by guido as if c then x else y only to be rejected for ambiguity my remark and others is that the if can be dropped while then needs not be a keyword ie it pops up in the middle of an expression and look ahead of depth in pythons parser allows special use of then only in expressions.
24586 	X	if a ternary conditional operator is there ill use it heck i dont mind even the x if c else y instead of c and x or y with its one.
24587 	X	ive been a c programmer for years and i used its ternary operator often when i thought it appropriate my coding style was always dense see patch as an example of python code that is not so obvious but is fast i guess it will probably be dropped though were kind of a lone wolf for years and i based the readability of my code on comments ie this block does this now move on to the next block.
24588 	X	i am aware of the problems dense code creates when co operating with people and the readability of python was one of the things that enchanted me with the.
24589 	X	so im still learning to code in a more readable way i never did any xp so far.
24590 	X	the only reason to be on the plus side to add a clear ternary conditional operator in python is because the and or trick already.
24591 	X	for someone who owned a zx spectrum like me it is familiar it is not for a.
24592 	X	tzotzioy i speak england very best real email address dhpvdebzawwtdgvjlmdy n decode base.
24593 	X	no voting process is perfect and i dont think anyone here has any illusions about.
24594 	X	my point is simply that its not clear what weight abstentions should have in a voting process where you know that those abstentions are going to be severely underrepresented possibly massively so because people who truly dont care simply wont vote.
24595 	X	with the yes no voters you hope that its a good cross section of the community but of course theres no way to be sure of.
24596 	X	but certainly someone strongly in favor of the proposal is just as likely to vote as someone strongly against it so one would expect that as long as the vote ballot reaches a wide enough audience the yes no voters should be in the right.
24597 	X	but you know for a fact that the abstentions will not.
24598 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote the multitude of books is making us.
24599 	X	erik max francis max at alcyone com wrote in message news.
24600 	X	because youve got a major ambiguity if the statement begins with an if.
24601 	X	sure it is unless youd care to explain why not.
24602 	X	you can even take it to the extreme by noting that guido would like to be done with this issue once and for all so a vote against new syntax is a vote in favor of keeping the current idiom.
24603 	X	now i dont know if that is really the case but unless you or someone else suggests a real alternative then it really is a decision between continuing on as before or fixing the.
24604 	X	its like asking whats the word for apple.
24605 	X	are you really asking whats the idiom for statements in reusable expressions.
24606 	X	or are you saying that because you cant have statements in lambdas you shouldnt be able to use logical operators to choose between two things like or or that.
24607 	X	a lambda x sys stdout write s n x.
24608 	X	im interested in knowing what you mean but not in reading your.
24609 	X	i agree that if youre not going to have the original.
24610 	X	and a keyword is not going to be.
24611 	X	i dont know its not really blowing my skirt.
24612 	X	it lacks a certain transparency to it i mean if im new to the language and i see.
24613 	X	safesqrtx if x then math sqrt x else.
24614 	X	setting aside for the time were the issue of the adding of the keyword then then i have a pretty good chance of understand what thats supposed to.
24615 	X	i must say that i dont find p x y too offensive so thats an awfully good.
24616 	X	i dont know if this makes sense if i counts from then.
24617 	X	that would seem to lead to confusion to.
24618 	X	for the record i have no problem with introducing a form that extends to multiway choices and just has the conditional operator as a degenerate.
24619 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote life is an effort that deserves a better.
24620 	X	karl kraus alcyone systems san jose.
24621 	X	beginners dont necessarily have to learn about.
24622 	X	i actually programmed c for years before i learned about a.
24623 	X	anyway python is already jam packed with far more advanced concepts than.
24624 	X	jerf at compy attbi com writes.
24625 	X	finally and perhaps most controversially istm that people asking for.
24626 	X	are with perhaps a few exceptions new users of python who expect it to be just like the last or even only language they.
24627 	X	ive been using python for five years which is certainly less than some but i think its long enough to not expect it to be just like every other.
24628 	X	im familiar with about a dozen other.
24629 	X	now that boolean types have made it into its about the last thing i really.
24630 	X	i cant tell you how excited i was when i saw that guido was considering finally adding it at long last or how depressed i was when i saw people throwing in their s because they were afraid that some people would abuse.
24631 	X	if they want it that bad in my experience its probably because theyre abusing it anyhow most programmers go a very very long time without using it even in languages that have.
24632 	X	one of pythons strengths is its stubborn refusal to let people hang themselves with it unless they really insist.
24633 	X	i really dont think i would be abusing.
24634 	X	i simply want a way to write an expression that depends on a condition without needing four lines and an extra variable if my expression wasnt going to be assigned to a variable to do.
24635 	X	it probably is true that my exposure to expression oriented languages like ml and lisp makes me more aware of the benefits of a ternary.
24636 	X	i dont see that as a bad.
24637 	X	i just ported to clearer python a python program using the and or trick in a bunch of.
24638 	X	i would much prefer that people who were going to fake a ternary operator anyway were given a real one to work.
24639 	X	erik max francis max at alcyone com.
24640 	X	counter question do you really believe that it needs a sequence of ternaries do get an incomprehensible expression.
24641 	X	quickwithout the help of a compiler what does printf d c ab c c a b c print for int a b c.
24642 	X	but some fit the job better than.
24643 	X	thank you for observing all safety precautions.
24644 	X	does this reaction indicate anything in particular.
24645 	X	maybe he could help us by outruling some possibilities so we dont spend another hours combined discussing mute.
24646 	X	we played around to quite some exhaustion already wink.
24647 	X	from his original pep i e g read that he is not ready to introduce a new keyword for a minor feature.
24648 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote life is an effort that deserves a better.
24649 	X	karl kraus alcyone systems san jose.
24650 	X	on wed feb terry reedy tjreedy at udel edu edit.
24651 	X	one problem though there would be so many ways to slice and dice the results you could prove almost.
24652 	X	the pro and con people will twist the statistics to show a majority of c l p agrees with.
24653 	X	but since the one person with the biggest stake in the results is making the ultimate decision i cant imagine much controversy with the decision from people who simply want to be productive in.
24654 	X	qotw if it werent too biased.
24655 	X	i would argue exactly the opposite since if else doesnt read left to right the use of it for nesting theyre nesting both ways however you want to look at it is more strightforward on the strict left to right ordering of then else than on the center left right.
24656 	X	in the center left right one it is harder to tell which condition belongs to what expressions due to the out of order.
24657 	X	all i see here is x strikes me as better than y which dont get me wrong is a perfectly valid opinion but i really dont see any clarification of.
24658 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote a mans life is what his thoughts make.
24659 	X	marcus aurelius fauxident http www alcyone com pyos fauxident a faux ident daemon in.
24660 	X	myself and gareth have taken most of our differences to e mail but this remains a public attack and so i feel justified in posting a public defence which.
24661 	X	just how much time was terry supposed to spend carefully excising every possible risk of people reading in judgement from what he said.
24662 	X	is he really to be condemned because with sufficient effort its possible to misinterpret what he said.
24663 	X	and i can assure you that part was read with a smile but the wider implication of much of what was said in this thread is that standard could not possibly mean de facto.
24664 	X	here i believe terry was criticising that general implication in the thread as a whole not that one.
24665 	X	i also believe that he is.
24666 	X	im glad you have time to waste carefully filtering every possible misinterpretation though you missed of course the fact that unusual is at least as judgemental as.
24667 	X	maybe if you spend a month or two on those two paragraphs and expand them out to a few volumes with your careful clarifications you can truly remove every possible.
24668 	X	of course then people will probably read little bits out of.
24669 	X	and yes my use of the word waste was a deliberate.
24670 	X	none of us is perfect and the english language is certainly not a perfect medium of communication but in practice it works quite well if people accept things for what they are and dont try to pretend that perfection is.
24671 	X	and is very conscious that his defence is hidden while the attacks continue in public not to mention a couple of additions to my inbox which sorry to those concerned i wont be replying.
24672 	X	rest assured that the issues have already been raised in mine and gareths own erm debate and yes i have made some mistakes which any lisp programmer whose skills are more current than mine or perhaps whose memory is perfect will have spotted.
24673 	X	steve at ninereeds dot fsnet dot co dot uk.
24674 	X	erik well theres no doubt that if you want an iff still a bad erik choice of names since in mathematics that means if and only erik if not the meaning intended here that does short circuiting erik it has to lazily evaluate some of its argument it has to be a erik special.
24675 	X	on the other hand iff also means identify friend or foe which is perhaps a little closer to the intended meaning wink.
24676 	X	andrew koenig ark at research att com http www research att com info ark.
24677 	X	andrew koenig ark at research att com ha scritto nel messaggio news yuofklsvz fsf at europa research att.
24678 	X	but and or sets also a benchmark for how much line noisy a substitute can.
24679 	X	otherwise people when x is always true would still use and x or.
24680 	X	the pgen program evidently cannot produce unambigous tables from the if else expression form without surrounding.
24681 	X	most of my background is with lalr parsers which i am pretty sure can handle the.
24682 	X	i understand now that python uses an ll and i did not fully appreciate the limitation of that.
24683 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
24684 	X	well its unambiguous but it could require some extra.
24685 	X	im no python parser expert but it seems to me the only case this happens is when the conditional expression is used as a standalone statement e g.
24686 	X	if debug sys stderr write got here n else none.
24687 	X	which i must admit is a little perverse in and of itself particularly as an example but guido used it in the pep so i will use it here.
24688 	X	no saying duh just remove the else none i know that perfectly well and so did.
24689 	X	i would have no problem with say requiring parentheses in this one case in all other cases if youre expecting an expression and you see an if you know whats.
24690 	X	but thats true with any form of a conditional operator as the conditional expression of an if statement and quite frankly in any language that has both an if statement and a conditional operator thats just.
24691 	X	the only thing that makes it look like a stutter here is the fact that you see two ifs in a row which i think would be almost a benefit for the jackass who wrote this code right away you know someone did something weird instead of having to wade through.
24692 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote she glanced at her watch it was.
24693 	X	james clavell bosskey net quake iii arena http www bosskey net qa a personal guide to quake iii.
24694 	X	you cant get short circuiting behavior by writing a function unless you want to do obtuse things like alternately eval different passed in strings in the.
24695 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote ten lands are sooner known than one.
24696 	X	a yiddish proverb bosskey net aliens predator http www bosskey net avp a personal guide to aliens predator.
24697 	X	that is my take on this option as.
24698 	X	gary duzan bbn technologies a verizon company.
24699 	X	imo if there is no multiway choice you cant beat the conciseness of.
24700 	X	with parens optional except when needed for some disambiguation my only worry is using up.
24701 	X	for something less than a best.
24702 	X	jcm joshway without spam at myway com.
24703 	X	wir danken fr die beachtung aller sicherheitsbestimmungen.
24704 	X	paul id say every time i write code with regexps i want an assignment paul expression like.
24705 	X	paul while m re match exp something.
24706 	X	paul so if i could add just one construct assignment expressions or paul conditional expressions id probably take assignment paul expressions even though they dont do as much from a functional paul programming point of.
24707 	X	def update x y x y return y m none while update m re match exp something.
24708 	X	andrew koenig ark at research att com http www research att com info ark.
24709 	X	steven i would agree here that else definitely should not be steven.
24710 	X	the else none should be implied if the else is steven.
24711 	X	but then you have to figure out the meaning of.
24712 	X	this ambiguity goes away if every if must have a corresponding else.
24713 	X	andrew koenig ark at research att com http www research att com info ark.
24714 	X	michael hudson mwh at python net writes.
24715 	X	this is an eye opener for me people really do write x and y or b i dont know whether im more surprised or.
24716 	X	i was really surprised as well to find that this is all over the standard.
24717 	X	i thought the examples that i had posted were just abuses by a programmer too zealous for space.
24718 	X	but this is entirely subjective obviously you can have that opinion but in and of itself it carries no more weight than the opposing opinion that it reads.
24719 	X	do most people really think i see an if a statement is coming.
24720 	X	or do they think i see an if a decision is coming.
24721 	X	i imagine its the latter and as others have mentioned the if statement form currently handles the higher level control flow branching as well as the lower level choice making that would sometimes be handled by if.
24722 	X	in english for example it makes perfect sense to say buy the apples if theyre ripe otherwise buy the grapes.
24723 	X	imo the trouble grokking if then else expressions is due to were unfamiliar with them and not some inherent readability.
24724 	X	the point of the pep is simply that the current python ish.
24725 	X	if x y w else y z.
24726 	X	could often be better expressed with an if.
24727 	X	very true but to be honest its much easier to figure this out on your own than say a.
24728 	X	and i think this point is key a newbie who is unfamiliar with if exprs actually has a very good chance of figuring out what it.
24729 	X	i actually like the c style conditional operator because im used to it but the pep as proposed has a better chance of were understood by the uninitiated because the keywords used in it have the same meaning as they do in other.
24730 	X	iow if you look at it and guess what it means youll probably guess correctly far more so than say.
24731 	X	this may or may not be true we have no way to measure it either.
24732 	X	samuele i sympathize but the question is really what you prefer your samuele target group to encounter.
24733 	X	samuele sys exit errs and or samuele style bold and bold or italic.
24734 	X	samuele sys exit if errs else samuele style bold if bold else italic.
24735 	X	samuele because idioms are used in.
24736 	X	but the trouble comes in stuff like this.
24737 	X	sys exit ok and or errcode.
24738 	X	which at first glance appears analogous to but really means.
24739 	X	andrew koenig ark at research att com http www research att com info ark.
24740 	X	john which brings up an interesting idea could we use acceptability john voting.
24741 	X	funny i suggested the same thing and explained why at length elsewhere in this discussion before reading this.
24742 	X	andrew koenig ark at research att com http www research att com info ark.
24743 	X	if we want to be completely anal shouldnt it be.
24744 	X	t x t t u t.
24745 	X	where x is the cartesian product and u is the set union operator.
24746 	X	your left hand side there is just an ordered pair of sets rather than a set of ordered pairs.
24747 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote you cannot step into the same river.
24748 	X	cratylus python chess module http www alcyone com pyos chess a chess game adjudicator in.
24749 	X	erik max francis max at alcyone com writes.
24750 	X	yes and it is an annoying design flaw not just theoretically but in.
24751 	X	addition and concatenation have about overlap in their semantics e g transitivity there is no inverse operation corresponding to for strings and i cant think of a any case where this polymorphism would make the slightest sense i e code that meaningfully adds some types and concatenates.
24752 	X	maybe more importantly a type might well want to provide both concatenation and.
24753 	X	prime example are numeric arrays you can concatenate them but not with and because you can use d arrays interachangably with lists and tuples in most circumstances the inappropriate overloading of can introduce subtle.
24754 	X	the indroduction of a distinct operator like in haskell or in smalltalk would have been much.
24755 	X	the other imo slightly more benign because less widespread abuse of existing operators are rich.
24756 	X	so im happy with the status quo workarounds included and their.
24757 	X	but i dont know if you share can share that.
24758 	X	andrew dalke adalke at mindspring com ha scritto nel messaggio news blug rs at slb atl mindspring.
24759 	X	i sympathize but the question is really what you prefer your target group to encounter.
24760 	X	sys exit errs and or style bold and bold or italic.
24761 	X	personally i have no problem with idioms and i dont like forms or more in general i have yet to see a ternary cond op form that i.
24762 	X	i like it the way it is that is.
24763 	X	x spam and foo and or true and false over did it a bit.
24764 	X	in my opinion there is no reason to overload the syntax of a language especially one like python with the sole benefit of having to type more letters to do the same job and confuse people by doing the same thing with different syntax in one i agree that something like.
24765 	X	x if that is true then do this and that else forget all and none.
24766 	X	i know of a language that looks like this and i cant say i like.
24767 	X	andrew koenig ark at research att com ha scritto nel messaggio news yurclpk fsf at europa research att.
24768 	X	the when else is the closest we have to an imperative if.
24769 	X	we use the little language to describe fairly complex relations of prerequisites for a selection and matching subsystem and no not at all we are not in the sex industry.
24770 	X	the data gets compiled into forms which are then quite optimised for efficient.
24771 	X	the language optimiser and evaluator have all been implemented in.
24772 	X	the legibility and cleanness of python also helped with our little language allowed such a clear expression of the problem that it was easy to add new optimisations unthought with the previous implementations in pl i or c the current setup even compares favourably speed wise wiping out most doubts and concerns of old timers.
24773 	X	the net effect is an administrative decision that all projects are likely to be developed in python from now.
24774 	X	franois pinard http www iro umontreal ca pinard.
24775 	X	erik max francis max at alcyone com writes.
24776 	X	frequency expressivness comes close to measure the usefulness of a.
24777 	X	so for something that adds near expressiveness the frequency argument is extremely.
24778 	X	posts expire but the mailing list archive may last a very long.
24779 	X	if there was some way to include a resolver for a message id saying that http python org c l py messid in combination with the message id could be used to retrieve a message indedfinitely then it would be easier to make strong links permalinks between.
24780 	X	of course that would entail changing hte usenet protocols to discover that resolver and i dont have the time or enough interest to do.
24781 	X	from deja at alandaniels com alan daniels writes.
24782 	X	hows this for a voting procedure.
24783 	X	we set up a list of candidates including no change.
24784 	X	say we name them a b.
24785 	X	voters give a ranking of as many of these as they care.
24786 	X	say as a comma separated list of letters in a follow up.
24787 	X	someone collects the votes into a file providing a python snippet that reads this file into a list of voterid candidate ranking.
24788 	X	gvr uses this data whichever way he likes and makes a bdfl.
24789 	X	and everybody else can analyze this data and tell the world what their favorite voting system would have come up.
24790 	X	and i can ignore them ly yrs anders.
24791 	X	bob x if c e elif c if c e else e bob or bob x if c e elif c if c e else e.
24792 	X	i think they should both be.
24793 	X	bob elsewhere in the thread you implied the.
24794 	X	i just wanted bob to reinforce your point and say this complex enough without having bob to decipher which if elif does that else belong.
24795 	X	i dont see the problem as long as you follow the following rules.
24796 	X	replace each elif by else if.
24797 	X	after each if must have exactly one else that corresponds to.
24798 	X	by implication the number of else keywords must always be equal to the number of if keywords a state of affairs that does not apply to either of the examples.
24799 	X	andrew koenig ark at research att com http www research att com info ark.
24800 	X	in article yufzqyaff fsf at europa research att com.
24801 	X	you can use references to mask that.
24802 	X	aahz aahz at pythoncraft com http www pythoncraft com.
24803 	X	register for pycon now http www python org pycon reg html.
24804 	X	franois pinard http www iro umontreal ca pinard.
24805 	X	andrew dalke adalke at mindspring com writes.
24806 	X	i just dont understand this line of.
24807 	X	lets look at the changes that have been introduced in python in the past release or two.
24808 	X	generators iterators change in scheme for method searching for multiple inheritance metaclasses string methods.
24809 	X	are you really claiming that conditional expressions are harder to explain to novices than stuff like metaclasses.
24810 	X	i think i was around years old when i first encountered conditional expressions in c i understood them right.
24811 	X	there was other stuff i didnt understand but conditional expressions just werent a big.
24812 	X	really youre making too much of.
24813 	X	as alex points out execution order does match reading order in this.
24814 	X	if its un pythonic it must be for another.
24815 	X	and ill admit that i found it weird as heck the first time i saw.
24816 	X	but i think that the logic for doing it that way is compelling lots of things can be.
24817 	X	lists tuples strings and many user classes can be.
24818 	X	if join were a method of the thing were indexed it would have to be implemented in many.
24819 	X	as a method of the separator it can be implemented only.
24820 	X	john roth writes specific list of important issues.
24821 	X	just because im trying to collect stats on which forms are most significant doesnt mean i think aahz should have us vote on a smorgasbord of different.
24822 	X	in fact my main goal is to winnow it down for him so he knows what to.
24823 	X	however if it is to be discussed on deatils from all variants my preference is.
24824 	X	because this is nearer to natural.
24825 	X	get problem here is our solution else.
24826 	X	and more than that implicit continuation should be allowed immediatly after and else tokens.
24827 	X	i hope it will not get into.
24828 	X	sincerely yours roman suzi rnd at onego ru my ai powered by linux redhat.
24829 	X	ot i guess its not that strange that estragon dropped into this.
24830 	X	sorry i must have missed that part of the thread im a big fan of short circuit just not a big fan of adding a ternary.
24831 	X	if you need it that badly write a function no it isnt current impossible its just odd looking.
24832 	X	up users load average a non text attachment was url http mail python org pipermail python list attachments ce attachment sig.
24833 	X	in article yuywqdevm fsf at europa research att com.
24834 	X	in general python has focused on mechanisms for reducing stylistic diversity because that makes programs easier to.
24835 	X	aahz aahz at pythoncraft com http www pythoncraft com.
24836 	X	register for pycon now http www python org pycon reg html.
24837 	X	francis might be using implies to mean the material conditional which is common if not.
24838 	X	afaik is customary in symbolic logic for the material conditional and customary for.
24839 	X	the material conditional if then venus is hot is true but the implication implies venus is hot is.
24840 	X	as the quotes indicate implication is about statements while the material conditional is about their truth or.
24841 	X	quine in methods of logic th.
24842 	X	states the distinction thus p implies q means that if p then q is.
24843 	X	likewise afaik is customary for the material biconditional if and only if and for equivalence which is analyticity of the material biconditional following quine.
24844 	X	steven taschuk aral confusion to the enemy.
24845 	X	staschuk at telusplanet net mark turn about is fair play.
24846 	X	carlos ribeiro cribeiro at mail inet com br wrote in message news.
24847 	X	python list at python python an lines.
24848 	X	frequency of alternative pattern usage is a reasonably good metric of frequency of likely usage which was all i was trying to measure.
24849 	X	as you say the value per use is not at all represented by the.
24850 	X	it gives a different viewpoint if the new formulation is going to lead to unreadable code then how often will one come across the unreadable code in practice ie how much will readability really.
24851 	X	if it is one line in several hundred than that is a different thing than once every lines or once every.
24852 	X	i want there to be one and preferably only one obvious way to do.
24853 	X	it seems that the if else expression does not lend itself to this practice and as proof i show that in existing languages which have both if else statements and if else expression there isnt a strong bias to use if else.
24854 	X	i and others including you i believe have analyzed existing c c code to see how the if else operator is used and misused in that language and attempt to make predictions of usefulness in python and also gone and searched through existing python code to see what could use if else expression what should use if else.
24855 	X	the conclusion i have derived from those analyses is that if else will be used correctly in about every lines of python code the actual range is about to lines.
24856 	X	of those i give a ball park estimate that about in are for non trivial tests eg of the form spam if x else eggs where there are no computations and about in are for true short circuit tests where side effects affect the.
24857 	X	in other words the side effects argument comes into play about once every to lines of code while the argument for a iff cond true false builtin function is rather.
24858 	X	the readability argument is only about a because i showed places where the if else would be used in lieu of better techniques available in.
24859 	X	in my analysis based on looking at code i estimated about misuse for every proper.
24860 	X	in addition if if else did not exist the alternate approaches could be the and or hack or some other harder to understand approach but i believe most would use an if else.
24861 	X	i also showed places where the easy of if else would inspire people to write overly cute code which was not.
24862 	X	se we are talking about a weak need which has a strong chance of.
24863 	X	the code i looked at was written about about.
24864 	X	others looked at personal code and i believe you looked at the python.
24865 	X	the above results come from my meta analysis of those various.
24866 	X	if you wish to assume otherwise please feel free to do your own analysis if when if else could be used should be used vs will likely be misused.
24867 	X	in all cases the code contained uses of.
24868 	X	i am pretty certain that all the authors of the code knew about that construct though i cannot verify.
24869 	X	turns out to be rarely used so it isnt in most peoples readily available set of idioms from which to.
24870 	X	its only inside of somewhat complicated expressions like print statements or function calls where it pops to.
24871 	X	and i showed at least one case where starting with that construct is likely to lead naturally to code which is somewhat harder to understand then if an if else statement was used in the first.
24872 	X	which means that is not a frequently used idiom even when.
24873 	X	which means that its less important than the proponents of this pep.
24874 	X	ahh but as i said i want my code to feel appropriate to the language.
24875 	X	for c code i have and will likely still use the.
24876 	X	inside of function call arguments to select from one of two simple.
24877 	X	in c that is the expected.
24878 	X	that does not mean that i want that to be expected python.
24879 	X	which moderates the strength of the pro pep argument by suggesting that it is not an overall.
24880 	X	i do not know how the code developed so cannot address.
24881 	X	indeed but i believe it is enough to suggest that the overall benefits of if else are not all that.
24882 	X	when combined with an analysis of existing code used as a projection of how if else might be used for python code in the future i believe it does indeed constitute an argument that the construct is.
24883 	X	again feel free to do your own analysis of source code and even reanalyze the results i and others have posted on the frequency of in c c code the applicability of those cases to python the likelihood of if else use inappropriate used in python and analysis of an existing python code base to see when if else could be used both properly and.
24884 	X	i think its more that this is discussed for a couple of years now and he wants people to stop.
24885 	X	and he obviously doesnt have a strong oppinion of it either.
24886 	X	some people think its important to have it one way or the other and so he lets them instead of him argue about the color wink.
24887 	X	terry hancock hancock at anansispaceworks com wrote in message news jx at newsread prod itd earthlink net.
24888 	X	as someone else has already pointed out the question mark follows the question cond.
24889 	X	the three parts of the expression are also in exactly the same order as the normal if cond stmt a else stmt b.
24890 	X	but they arent overloaded in ways that are unrelated to their old meanings its still a selection.
24891 	X	thats not the case in my programming.
24892 	X	i tend to write ternaries in a way that avoids inverting the condition and half the time the most common case is at the end as in.
24893 	X	i dont understand why thats an.
24894 	X	if you want if else semantics then why is try except syntax better than if else syntax.
24895 	X	i could live with this one but theres just something about then without if that doesnt feel.
24896 	X	a from my pov usable orthogonality is related to.
24897 	X	adding a a ternary operator reduces pythons simplicity and therefore a certain a amount of.
24898 	X	listcomps fit practicality beats purity but a i just dont see that in the aggregate for.
24899 	X	i think conditional expressions add to the.
24900 	X	you have expressions and statements in python but statements can be conditional and expressions.
24901 	X	algol was orthogonal in this respect what you could do in statements was the same as what you could do in expressions there were no difference.
24902 	X	piet van oostrum piet at cs uu nl private email p van oostrum at hccnet nl.
24903 	X	guido van rossum guido at python org escribio.
24904 	X	if i may give my opinion i dont like much that.
24905 	X	i think it introduces too much potential obfuscation.
24906 	X	i think its too perlish to be.
24907 	X	and if we add the empty else option a if condition it starts getting difficult to.
24908 	X	i prefer that obfuscation and oneliners keep were hard to get.
24909 	X	i would prefer the ab c.
24910 	X	it doesnt introduce new punctuation which leds to more difficulty when explaining the syntax and remembering it.
24911 	X	furthermore i dont think its difficult to read though i may not be very objective about this since ive used c for quite some.
24912 	X	its also quite compact and somehow intuitive for most seasoned programmers while not strictly needed for.
24913 	X	mmm introducing a new keyword can be a problem and i dont think its a good idea in this.
24914 	X	moreover it isconfusingly similar to the normal syntax it could led to problems like doubting when then is needed and when it must not be.
24915 	X	if thats not suitable for any reason i havent actually thought carefully about the side effects i prefer the ab c option.
24916 	X	daniel ripolles eru there are only two things that smell like.
24917 	X	laura i find your perspective facinating but i still dont quite get it please dont think im were sarcastic im really trying to understand you but havent yet.
24918 	X	can you explain a little more what you mean.
24919 	X	when theres a bunch of us deciding to order pizza ill often not vote because i dont.
24920 	X	since the point of voting is to come to a decision how would tracking my dont care vote affect the decision.
24921 	X	in effect i am casting a vote a vote to not participate so that the people who do care about the influence can work it out amongst.
24922 	X	the same holds true for political.
24923 	X	sometimes i dont vote because i dont feel informed enough to make a good decision other times i dont vote because i dont really care either way and sometimes i do.
24924 	X	but again i dont see how keeping track of an explicit dont care matters the whole point of the vote is to reach a decision right.
24925 	X	maybe your point is that its not the whole point.
24926 	X	if theres a voter turnout then you can infer just as in accurately that people dont care about that particular issue right.
24927 	X	this is why get out the vote drives in the u s scare me the encourage people who just dont care to participate in making.
24928 	X	yeah i guess we could add a dont care slot to the ballot but why.
24929 	X	how should it affect the outcome.
24930 	X	fwiw i am opposed to straight democratic voting anyway because the quality of the decision is often rather poor due to various factors.
24931 	X	id much rather vote to select a handful of trusted individuals a healthy mix of pro and con pepers and let them go off and have an intelligent debate and then accept what they come back with but maybe thats a topic for a different.
24932 	X	paul rubin http phr cx at nospam invalid ha scritto nel messaggio news xznp fsf at ruckus brouhaha.
24933 	X	they are not kludgy if one is a bot wink.
24934 	X	print auto colorizing turned self allow colorizing and on or off.
24935 	X	print auto colorizing turned if self allow colorizing on else off or print auto colorizing turned if self allow colorizing on else off.
24936 	X	greg btw in my first and second reading of the code snippets greg above i missed the around the if then else so i was greg reading it that the if i test ran first and only if its greg false did the for statement clause.
24937 	X	now you can certainly greg argue that i was were careless in reading the code but is the greg savings of a few lines of code really worth the potential for greg confusion when another developer looks at and has to support the greg code.
24938 	X	i am not going to argue about whether youre were.
24939 	X	rather im going to argue that the alternative that you find harder to understand is the one that i find easier to.
24940 	X	more generally i think that difficulty of understanding is closely related to length.
24941 	X	when a new idea appears in a programming language it usually makes it possible to write shorter programs at the expense of making them more.
24942 	X	so the new programs are sometimes easier to understand than the old and sometimes.
24943 	X	as the new idea becomes more familiar the programs become more familiar too hence easier to.
24944 	X	heres an example from another part of python that i hope will be.
24945 	X	for i in range n print i.
24946 	X	if you dont know the exact meaning of range and how it interacts with for statements youre.
24947 	X	if on the other hand i write.
24948 	X	i while i n print i i i.
24949 	X	no one with any programming experience will have the slightest difficulty understanding what i.
24950 	X	so if i were teaching python to rank beginners i might well prefer the second of these forms but otherwise ill use the.
24951 	X	once youre familiar with it its shorter hence easier to.
24952 	X	i think the same kind of argument applies to conditional.
24953 	X	in some circumstances they make programs significantly.
24954 	X	if youre unfamiliar with them the unfamiliarity compensates for the brevity which means that some people will find them a.
24955 	X	but i think that disadvantage will go away with.
24956 	X	andrew koenig ark at research att com http www research att com info ark.
24957 	X	the way my mind parses a b then c else d a then b else c d a and b then c else d a then b else c and d ab then c else d a then b else cd parser error.
24958 	X	lambda a then b else c.
24959 	X	basically what ive just said is that it has or should have a very low.
24960 	X	it should definitely have low precedence before the then otherwise all comparisons would have to be enclosed in.
24961 	X	as for expressions trailing after the it just seems like a good.
24962 	X	on fri feb rumours say that guido van rossum.
24963 	X	im on ternary expressions however i dont like the condition in the.
24964 	X	if adding a keyword is ok what about.
24965 	X	i believe its easy to consider then as a keyword only in such a case like as it jumps at the end of an expression without any operators between it and the previous expression this way old programs dont break even if using then as a.
24966 	X	tzotzioy i speak england very best real email address dhpvdebzawwtdgvjlmdy n decode base.
24967 	X	max i am sorry i characterised you as ternary at any.
24968 	X	i now know that the problem is that you dont understand approval.
24969 	X	i agree that pauls camp slightly mischaracterizes the.
24970 	X	in fact i dont know of any current user of and or who prefers it to all possible.
24971 	X	so you are in the unenviable position of having to either abstain or decide which alternative is least abominable.
24972 	X	michael hudson mwh at python net wrote in message news hwukwqri fsf at pc maths bris ac definite z the.
24973 	X	nonetheless they are valid examples and my point.
24974 	X	they are almost impossible to read easily i like that i can scan through python code and understand it as im going without having to back track here and there to figure out what a line.
24975 	X	anthony baxter anthony at interlink com au its never too late to have a happy.
24976 	X	erik max francis max at alcyone com writes.
24977 	X	of course it depends on what youre reading but ive usually seen two way implication written as.
24978 	X	equivalence in a general sense like is equivalent to mod not necessarily boolean is often written as an equal sign with three horizontal lines instead of.
24979 	X	in this particular case id say its significantly.
24980 	X	if this is to be in the language wouldnt you rather avoid the latter case above.
24981 	X	if the language adds this construct i would argue that since python already has a use for if i think it would be less confusing to have a new word for this new.
24982 	X	and now that ive thought on it some more i dont care for my other suggestion much either.
24983 	X	but im just tossing things out.
24984 	X	bjorn pettersen bpettersen at narex com wrote in message news.
24985 	X	in fact most of the time it makes it a non.
24986 	X	fwiw i dont think it is significantly better than if either sorry.
24987 	X	luckily i have a backup nt.
24988 	X	that just means i can only read news when a.
24989 	X	i was starting at a lot of c code and the.
24990 	X	erik max francis max at alcyone com writes.
24991 	X	its my favorite too at this.
24992 	X	my comment is meant to point out that if alternatives exist in current python but which dont short circuit then they should not automatically be dismissed because most cases using the ternary operator do not really depend on that.
24993 	X	in article xbsi fsf at ruckus brouhaha com.
24994 	X	youre failing to consider the existence of the camp that thinks that x and y or z isnt particularly pythonic and has no interest whatsoever in making similar expressions any easier or more.
24995 	X	aahz aahz at pythoncraft com http www pythoncraft com.
24996 	X	register for pycon now http www python org pycon reg html.
24997 	X	erik max francis max at alcyone com writes.
24998 	X	its even implies in latex i.
24999 	X	is often used to denote a.
25000 	X	using to mean equivalence would be daft notation even by mathematical.
25001 	X	i have seen used to mean evaluates to but generally in a computer.
25002 	X	every now and then google doesnt throw up what i need so i start checking altavista yahoo.
25003 	X	in almost every single case i am brutally reminded why i use google in the first.
25004 	X	just adding an expr production expr if expr would not allow for f if a b else c you would be required to write f if a b else c.
25005 	X	its all light hearted and fun but you do try and avoid were on the receiving.
25006 	X	dale strickland clark riverhall systems ltd.
25007 	X	interesting new tid bit of style one i never heard of.
25008 	X	i find trailing commas most useful in cases where im initializing a list or.
25009 	X	if the list is non trivial it usually improves readability and aids maintainability to stack the elements.
25010 	X	always including a trailing comma allows elements to be inserted and deleted with impunity having eliminated the need to specially treat the last.
25011 	X	same argument as with long list applies to those rare argument lists that happen to have many.
25012 	X	def bigfun aalksjf alskfjas aslkfjasdlfjasdfl alsdfjalsdjlkjsa aslkfjsladfjklsaf asdlfjasldjjksadf.
25013 	X	such lattitude in syntax also is very much appreciated by programs that generated source.
25014 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
25015 	X	i didnt think i had been away from the newsgroup long enough for messages to accumulate in the ordinary course of.
25016 	X	im neutral on this and will therefore not be.
25017 	X	i seldom use the construct in languages which have it now and then its really handy and i use.
25018 	X	if its approved i would expect to use it the same if not ill keep on not using.
25019 	X	at least we dont have to worry about whether expressions evaluation winds up in the upper or the lower.
25020 	X	my preference for an immediate if operator is the traditional from c.
25021 	X	yes this form is familiar only to c programmers but there are a lot of.
25022 	X	yes it is one more use of the operator but guido admits it is not.
25023 	X	it also allows compact expressions of the form.
25024 	X	if this is not acceptable my second choice is a functional form iif cond expr expr.
25025 	X	this is not a function it is a built in.
25026 	X	eru seems to have got the same idea as i.
25027 	X	i like this as it it is very similar to the if statement and so has very little extra baggage for newbiew to.
25028 	X	i also think that the order of condition then true expr followed by false expression scans.
25029 	X	i would go further and suggest that the else clause be allowed to be left.
25030 	X	if the condition is false then the expression should then return.
25031 	X	so an if to the right of an equals sign is the ternary.
25032 	X	the ordering is fine but the use of a comma to separate syntactic structures seems like a bad idea given its multiple uses.
25033 	X	it looks like youre maybe making a.
25034 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote yes im learning from falling hard lessons lamya bosskey net quake iii arena http www bosskey net qa a personal guide to quake iii.
25035 	X	this is a real question not rhetorical and maybe naive and maybe one thats already been asked.
25036 	X	when cond then exp else exp.
25037 	X	def when cond exp exp if cond return exp else return exp.
25038 	X	x when a b c if when a b c else.
25039 	X	and if nobody has a regular habit of adding this function to every module they write why is the need for a ternary operator pressing.
25040 	X	i used to be in the habit of adding.
25041 	X	to the top of everything so the new boolean stuff actually saves me time and saves me when i forget to add the above.
25042 	X	i guess id lean towards wanting to see the same kind of reason for adding a ternary.
25043 	X	im not sure which side of the argument im on but i am curious about both questions.
25044 	X	i use the c ternary operators a lot and missed them in python a little at first but never enough to write a function to replace.
25045 	X	my only other contribution caused by misreading someone elses post is to suggest the syntax.
25046 	X	im not really serious but it is kind of.
25047 	X	stephen i dont see things that.
25048 	X	i have more of a functional view stephen of.
25049 	X	in general i think i shouldnt need to worry stephen about the order of evaluation only about the meaning and stephen the.
25050 	X	in expressions evaluation order only makes stephen a difference to the meaning if there are side effects except stephen in that lazy evaluation can ignore subexpressions which are stephen not needed but which might otherwise trigger errors.
25051 	X	having stephen functions with side effects is often considered bad style stephen partly for this exact.
25052 	X	side effects are not the only reason that order of evaluation.
25053 	X	even in a purely functional world consider the following expression.
25054 	X	here f and g are partial functions over x and all possible values of x are in union dom f dom g.
25055 	X	however not all possible values of x are in intersection dom f dom g.
25056 	X	in particular when e x is true x is in dom f but not necessarily in dom g and when e x is false x is in dom g but not necessarily in dom f.
25057 	X	now in order to evaluate this expression it is necessary to evaluate f x only if e x is true and to evaluate g x only if e x is.
25058 	X	andrew koenig ark at research att com http www research att com info ark.
25059 	X	holger im presuming that english isnt your primary language so maybe you dont know this but you silly is an idiom which is quite frankly very playful and is not at all what id call unfriendly unprofessional maybe.
25060 	X	so and so they are in a way playfully.
25061 	X	the tone may not be right but i dont think it has quite the negative connotations that youre perceiving from.
25062 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote there i was there i was splitting atoms with my desire lamya computer science http www alcyone com max reference compsci a computer science.
25063 	X	its not ambiguous in the parser.
25064 	X	since what immediately follows the if keyword in an if statement is an expression the second if clearly starts a conditional operator not another if statement i mean how could it.
25065 	X	its only ambiguous in the sense of were deliberately obtuse that someone would use a conditional operator in the conditional expression of an if statement say that three times fast.
25066 	X	the same is true in any language with conditional operators crappy code is crappy.
25067 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote she glanced at her watch it was.
25068 	X	james clavell bosskey net quake iii arena http www bosskey net qa a personal guide to quake iii.
25069 	X	as i dont think these discussions will stop even if pep gets rejected how about moving them to a seperate.
25070 	X	on fri feb m a lemburg mal at lemburg com.
25071 	X	it sounds like the old sufficiency argument for example you shouldnt have a subtract operator because addition and negation are sufficient.
25072 	X	what makes mathematics powerful is not the same as what makes complex programs readable and.
25073 	X	if you ask the average person which they are least able to follow they will typically say algebra or calculus rather than english for.
25074 	X	in english i can say if you want something buy it otherwise dont syntactically a little different to the standard python if but clearly an imperative if structure with equivalent.
25075 	X	but i can also say add sugar either two if you want it sweet else just.
25076 	X	that is not an imperative if statement it is equivalent to the pep suggestions it selects from two values not two.
25077 	X	readable and maintainable programs express each abstraction in its most natural form not obscuring it by forcing it into some unnatural form just because it is sufficient to express.
25078 	X	the penalty for poor expressing things in an unnatural way may be small in a program of a few hundred lines or less but in larger programs they cause major.
25079 	X	im not sure about the various syntax proposals and i wouldnt be that worried if pep was dropped either despite the above argument there are issues that have much bigger impact on readability and maintainability the old oo buzzwords of encapsulation data hiding etc spring to mind.
25080 	X	the fact that the arguments are lazy evaluated is not in my mind a sufficient reason for claiming it isnt a.
25081 	X	filter map and reduce are also slightly unconventional in that they take functions as parameters but just because a function uses functional language rather than imperative language ideas it doesnt mean that it isnt a.
25082 	X	lazy evaluation also does not mean it is a macro or inline functional languages which support lazy evaluation dont even understand the idea of a macro or.
25083 	X	spreadsheets such as excel provide a built in function like.
25084 	X	the idea of then as an assertion that triggers backtracking on failure and else as an operator that can trap backtracking and provide an alternative is interesting but probably just too obscure as well as a pain to implement the relative popularity of icon and python make that.
25085 	X	personally i could be very enthusiastic if offered a built in if function that used lazy evaluation for its.
25086 	X	if an operator based form was to be used id like a prefix to the syntax to tell me that a conditional expression is coming because despite many years of c and c programming i still hate the ternary operator leading to something.
25087 	X	print either x y if y.
25088 	X	i wouldnt want to overuse it but that applies to any.
25089 	X	steve at ninereeds dot fsnet dot co dot uk.
25090 	X	on the contrary the question is whether to replace the current idiom with new syntax.
25091 	X	not adopting new syntax does not stand in the way of declaring the and or idiom to be bad form and standardizing on a new idiom or.
25092 	X	the resulting idioms may not be to your liking too verbose perhaps but the above is a false.
25093 	X	hey im a swing voter cool.
25094 	X	me id also like it to be general enough to pick of n cases not just of but somebody else included the further hard constraint that in the of cases the when true value must come before the when false one and that makes the only proposal i liked selector when when when.
25095 	X	if theres more than one way to do it is a bad philosophy then theres more than one meaning for something is equally.
25096 	X	is it a conditional statement or operator in an expression.
25097 	X	conditional statements drive execution of code operators return.
25098 	X	with this proposal if becomes a little of.
25099 	X	for the person trying to learn something new i e programming the big hurdle is were able to.
25100 	X	if a given keyword has a dual life sometimes its a statement sometimes its an operator its difficult to make.
25101 	X	or worse you make the wrong.
25102 	X	if i can write x y if y no why not.
25103 	X	why does if have a dual role but not the other keywords.
25104 	X	well you could do something else you will wish you had if a silly conditional expression gets in you could do some usability tests.
25105 	X	serious are you still in contact with teachers teaching python.
25106 	X	if so could you pull off another of your guido convincing things and get those teachers to do a little usability study with respect to the readability of the conditional expression.
25107 	X	samuele pedroni pedronis at bluewin ch writes.
25108 	X	this is an eye opener for me people really do write.
25109 	X	i dont know whether im more surprised or.
25110 	X	learn to love the return key ly yrs m.
25111 	X	zaphod listen three eyes dont try to outwierd me i get stranger things than you free with my breakfast.
25112 	X	nah if that was the case then useful stuff like this wont work reliably.
25113 	X	if s in hello goodbye do something.
25114 	X	the language designers felt that testing logical equivalence was more important than testing object sameness is so thats what the operator in.
25115 	X	i happen to agree with this i use far more often than i use.
25116 	X	this can be misleading to some people who understand the difference between and is because the phrase a is in b suggests to many speakers including myself that a is the same object as an object in b amazingly python has survived this minor malapropism something you wouldnt expect based on the pep discussion.
25117 	X	nevertheless testing a list for a certain object is useful enough to warrant a method imo especially since this can be done very easily and efficiently in c.
25118 	X	a simple quick workaround to this is to use.
25119 	X	andrew koenig ark at research att com writes.
25120 	X	frankly i think the proposed syntax is.
25121 	X	every time ive seen an example in a posting ive needed to read it a couple of times to comprehend.
25122 	X	and if i analyze my reasons id say its the evaluation.
25123 	X	cs cond trueval falseval seems understandable whereas trueval cond falseval.
25124 	X	this is the most telling comment ive seen.
25125 	X	i have little or no interest in lambda but i use list comprehensions.
25126 	X	on the other hand ive never missed conditional expressions while doing.
25127 	X	but when i see examples of list comprehensions using conditional expressions i cant immediately think of a better way of writing.
25128 	X	maybe ive just evolved a coding style which avoids the.
25129 	X	while these facts shouldnt be ignored its also important to consider if maybe the answers to such requests shouldnt be considered.
25130 	X	earlier in the thread was a discussion of using conditional expressions to make.
25131 	X	there are two ways to address.
25132 	X	the first is to offer other ways in python to add an s if the count is not.
25133 	X	this fairly quickly proves the point that pythons alternatives arent as readable convenient.
25134 	X	the second way is to point out that the algorithm doesnt work for a significant number of cases not all relating to in consider sheep or baby.
25135 	X	then suggesting the use of a function makes much more.
25136 	X	even if you never talk about mice in your application at the moment the cost is minor compared to the pain when the cheese consuming mammal extension comes along in version.
25137 	X	x is the result of this computation oh except if this is true otherwise its this.
25138 	X	i agree completely what everything michael said in this note so i wont quote it.
25139 	X	i do however want to augment a few minor points.
25140 	X	michael if you meant any of these.
25141 	X	michael x condition and a or b.
25142 	X	michael x condition and lambda a or lambda b.
25143 	X	michael return f michael return f michael x ternary condition lambda a lambda b.
25144 	X	michael then you should be ashamed of yourself try explaining any michael one of them to a.
25145 	X	and anyway python is known for michael its readability and tricky to understand workarounds michael should not be our standard approach to.
25146 	X	and anyway the last example is wrong it should say.
25147 	X	x ternary condition lambda a lambda b.
25148 	X	michael ambiguity with if statement could make it hard to read michael ambiguity with if statement makes it impossible for michael pythons parser.
25149 	X	i would think it sufficient to distinguish an if as the first token of a statement from all.
25150 	X	michael quit changing python i liked it as a small language.
25151 	X	michael if you compare the introduction of a ternary operator to michael recent changes its a much smaller change than the michael introduction of list comprehensions or introducing.
25152 	X	michael it wont break any code like fixing division.
25153 	X	it is not michael a deep and powerful change like nested scopes or new style michael.
25154 	X	about the only change its comparable to is the michael introduction of.
25155 	X	theres no new conceptual michael overhead not a deep or confusing idea like metaclasses michael i understand why some might like to slow the changes to michael python but this is not the right change to object.
25156 	X	perhaps this is why theres so much debate seriously it often seems that the smallest changes generate the most.
25157 	X	andrew koenig ark at research att com http www research att com info ark.
25158 	X	in article bb ih at panix panix com aahz at pythoncraft com aahz.
25159 	X	join should have been a method of lists and maybe tuples.
25160 	X	x y for x in list for y in z for z in spam if x y.
25161 	X	the nested lc in there is redundant this is equivalent to.
25162 	X	x y for x in list for y in spam if x y.
25163 	X	im not sure but it may even be a theorem that any nested lc can be re written as a non nested lc by pulling all the loops out to the top level and combining the target expressions.
25164 	X	greg ewing computer science dept university of canterbury christchurch new zealand http www cosc canterbury ac nz greg.
25165 	X	i fail to see how adding something to python can turn it into a dumbed down language unsuitable for serious programming no matter how oversimplified or verbose or primitive or otherwise horrible the addition.
25166 	X	all those serious programs already written in python will go on working just fine if any of the proposed conditional expression forms is.
25167 	X	gareth mccaughan gareth mccaughan at pobox com sig under construc.
25168 	X	this is the first ternary proposal that i actually like rather than actively.
25169 	X	its a shame that short circuiting is considered a requirement im happy for people to do it the hard way in the few cases where it matters and it would allow this proposal which is just a simple method of.
25170 	X	very easy to implement very easy to explain and very easy to document and to find in the documentation just look for ifelse in the index.
25171 	X	bengt richter bokr at oz net wrote in message news becou at notation it might be false.
25172 	X	one implementation would be to add an internal truth wrapper object and modify or to unwrap its return value if the return value is a truth.
25173 	X	it could perhaps be done more simply than.
25174 	X	this goes on my list of acceptable till shot down.
25175 	X	this is just the sort of minimal fix i was also trying to think.
25176 	X	sincerely yours roman suzi rnd at onego ru my ai powered by linux redhat.
25177 	X	id say this is not worth doing the benefits dont outweigh the.
25178 	X	as someone else in the thread said he programmed in c for years before seeing.
25179 	X	from what ive seen of people using.
25180 	X	its either so trivial that it frankly isnt saving anyone anything a b or so complicated nested ternary operators anyone.
25181 	X	that the user ought to be stripped of their license to.
25182 	X	because its use is so rare it is a frequent an impediment to understanding code to people who have never or only rarely seen it.
25183 	X	in addition i find it often surprisingly challenging to follow the order of operations in such cases if the.
25184 	X	isnt enclosed by just because there isnt a clear natural order to evaluate expressions with ternary operators in.
25185 	X	finally and perhaps most controversially istm that people asking for.
25186 	X	are with perhaps a few exceptions new users of python who expect it to be just like the last or even only language they.
25187 	X	if they want it that bad in my experience its probably because theyre abusing it anyhow most programmers go a very very long time without using it even in languages that have.
25188 	X	one of pythons strengths is its stubborn refusal to let people hang themselves with it unless they really insist.
25189 	X	to me obj if callable obj makes sense without the.
25190 	X	its like a function that implicitly returns none or the get method on dictionaries without the second argument.
25191 	X	though admittedly i did not recognize this behavior when i first learned python and it was only later that i started depending on none were returned.
25192 	X	ian bicking ianb at colorstudy com http colorstudy com n talman chicago il there is no flag large enough to cover the shame of killing innocent people howard zinn.
25193 	X	the python dev incarnation is specifically about whether anyone is going to do the work to follow up on guidos willingness to fold.
25194 	X	at this point id rather not and instead wait for an implementation of ibms proposed standard at.
25195 	X	http www hursley ibm com decimal.
25196 	X	that doesnt appear to be possible for.
25197 	X	i expect i could implement that fully within a week but dont even have an hour for.
25198 	X	aahz got a good start but also seems to lack sufficient time to finish.
25199 	X	whether to incorporate the specific module in question into is more a topic for python dev though given that it was discussed approved on c l py last.
25200 	X	discussion is mostly useless regardless if nobody can make time to do the.
25201 	X	is ibms proposal enough for you.
25202 	X	if yes discussion over if no youre unreasonable wink.
25203 	X	if there are character sets with mixed case digits im sure the debate will never.
25204 	X	apart from that there are thorny issues regarding at least literal notation threads i o and coercions among the other numeric types which would need to be resolved for a truly smooth integration into.
25205 	X	the biggest advantage of the sf library is that its just another library module and python doesnt know anything about its internals that cuts off tons of potential.
25206 	X	which is to say it does not do what some people think it.
25207 	X	i guess we should get rid of most language constructs if this is the criterion by which they are to be.
25208 	X	there are kinds of people those who understand binary and those who do.
25209 	X	gerrit holl gerrit at nl linux org writes.
25210 	X	yeah but c doesnt have exception.
25211 	X	if you think this is an unrelated remark go look at how goto is used in the python source.
25212 	X	ah so you knew that but python is not c so arguing from that point of view is slightly.
25213 	X	all parts should go together without.
25214 	X	you must remember that the parts you are reassembling were disassembled by.
25215 	X	therefore if you cant get them together again there must be a.
25216 	X	by all means do not use a.
25217 	X	for the silly example above z.
25218 	X	william park open geometry consulting opengeometry at yahoo ca linux solution for data management and.
25219 	X	i do like iif c x y.
25220 	X	better in the light of pep.
25221 	X	sincerely yours roman a suzi petrozavodsk karelia russia mailto rnd at onego ru.
25222 	X	holger you are not targeting the real problem i.
25223 	X	quoting from holger python grammar grammar.
25224 	X	holger stmt simple stmt compound stmt.
25225 	X	holger compound stmt if stmt while stmt for stmt.
25226 	X	holger simple stmt small stmt small stmt newline.
25227 	X	holger small stmt expr stmt print stmt del stmt.
25228 	X	i propose to change the grammar as follows.
25229 	X	expr stmt testlist augassign testlist testlist.
25230 	X	test and test or and test lambdef.
25231 	X	expr stmt utestlist augassign testlist testlist.
25232 	X	test uncond test if test test elif test else test.
25233 	X	uncond test and test or and test lambdef.
25234 	X	in other words for the various possibilities for test which is currently the most general kind of expression im want to add an if else.
25235 	X	the former test becomes uncond test.
25236 	X	a new grammar production utestlist represents a nonempty list of tests in which the first test is not an if then else.
25237 	X	an expr statement is then a utestlist rather than a.
25238 	X	i dont know for sure that this grammar is correct but i do know that pgen accepted it without.
25239 	X	all of the proposals below seem to be ringing the changes on a few basic.
25240 	X	id prefer to vote on the basic concepts we see as important and leave the details to.
25241 	X	so heres the list i see.
25242 	X	adding new reserved words or special characters how important is it to match what c does something in the front of the construct include an elif in the result include a functional.
25243 	X	chermside michael mchermside at ingdirect com wrote in message news.
25244 	X	python list at python on python dev we have the following exchange.
25245 	X	so aahz is going to give us a couple of days to stew and think things over now that the active discussion is beginning to die down before he starts the.
25246 	X	meanwhile erik provides us with the following list great work.
25247 	X	note that i have re numbered to give each proposal a unique number.
25248 	X	when aahz gets back hes going to have to conduct some kind of a vote and the above is obviously way too many.
25249 	X	so i am volunteering to help aahz out by making it easier for him to tell what are the important syntaxes which belong on the.
25250 	X	i will collect seconds just write to me letting me know which of the syntaxes you believe are important enough that they belong on the ballot.
25251 	X	ill keep a count and let aahz know the.
25252 	X	theres no sense stuffing the ballot box i dont even know if aahz will pay any attention to the.
25253 	X	but it seemed like he might find this helpful if i summarize it all for.
25254 	X	so if youre not sure dont care object to all proposals or are getting sick of this just ignore this the real vote will come.
25255 	X	if you do want to chime in email me at the following address.
25256 	X	and include the text pep in your subject.
25257 	X	in the body of your message simply list the numbers from the list above to indicate which of the proposals off eriks list you believe ought to be on the.
25258 	X	for instance you might simply write to indicate that guidos original proposal and c syntax are the only forms you think we should.
25259 	X	you may also add any additional comments you.
25260 	X	results will be sent to aahz this weekend or whenever he requests.
25261 	X	okay now i better go ask for an increase in my mailbox diskspace lly.
25262 	X	andrew koenig ark at research att com ha scritto nel messaggio news yuywolquw fsf at europa research att.
25263 	X	let me put it this way a ternary cond op for me should belong to the and or op family not mimick.
25264 	X	is mostly ok but the order is.
25265 	X	again my target would be something like.
25266 	X	if the plan would be to find expression forms corresponding to all statements then the criteria would be.
25267 	X	yes the notion of a special form is necessary in lisp because everything in lisp looks like a function.
25268 	X	this is not so in python so the term isnt as.
25269 	X	not yet at least and lets hope it stays that way.
25270 	X	greg ewing computer science dept university of canterbury christchurch new zealand http www cosc canterbury ac nz greg.
25271 	X	sheila king usenet at thinkspot net wrote in message news bqm at kserver.
25272 	X	in python is the symbol for bitwise.
25273 	X	when paired with with the meaning is further.
25274 	X	because new keyword proposals are doomed bending old keywords creates ambiguity punctuation operators work well in.
25275 	X	who except a cobol programmer would want plus times reading through the provided live code examples it is much clearer than keyword alternatives.
25276 	X	i spent an afternoon finding the least cryptic form of punctuation i could think.
25277 	X	the only close alternative was x cond val val i felt was better because colons were already so heavily.
25278 	X	i really dont see any advantage only were something else to learn for.
25279 	X	i even dont like allowing the following on one line if condition else expression which you intimate yourself i believe in page http www python org doc essays ppt regrets pythonregrets pdf.
25280 	X	in article e at news bluewin ch.
25281 	X	if the ternary becomes part of python any group that i have any control over would use neither of the sys exit versions and the more i look at the conditional in the middle the more i abhor.
25282 	X	aahz aahz at pythoncraft com http www pythoncraft com.
25283 	X	register for pycon now http www python org pycon reg html.
25284 	X	andrew koenig ark at research att com ha scritto nel messaggio news yukcap fsf at europa research att.
25285 	X	as you might know the cutest my take general solution to the problem in current python performance aside is posted by gerald s williams to python dev.
25286 	X	z ife cond and x or y.
25287 	X	if python had had a ternary cond op i would never have seen that sniff.
25288 	X	oh okay then i withdraw my.
25289 	X	note that when as an alternative to if in the original x if c else y form was one of the first additional alternative.
25290 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote man is preceded by forest followed by.
25291 	X	graffiti written during french student revolt computer science http www alcyone com max reference compsci a computer science.
25292 	X	i do not remember who said that beauty is our perception of unknown things or subjects are beautiful because they aim at some goal the goal not necessary known to.
25293 	X	this sense of hidden goal we understand as.
25294 	X	for example leafs of a tree are beautiful because their positions are optimal for receiving sun.
25295 	X	predators are beautiful because they are designed to be good.
25296 	X	snakes are beautiful too but fear blinds peoples perception of.
25297 	X	cheap toys arent beautiful because their goal is external to them.
25298 	X	perception of beauty is subjective because not everyone sees it at.
25299 	X	right now python is beautiful language which main goal is simplicity it is designed to be good complexity hunter and its constructs are arranged so developer has optimal palette of.
25300 	X	sincerely yours roman suzi rnd at onego ru my ai powered by linux redhat.
25301 	X	im probably going to hate myself in the morning but im forced to admit that in some ways the long winded way which ive been advocating is.
25302 	X	im a fan of refactoring but not a zealot in the xp ish refactor mercilessly sense.
25303 	X	its temping to want to factor the result out of the above and end up with result ternary involving x y x and y.
25304 	X	theres both a cognitive advantage you only have to read and understand it once and a coding advantage if you only type it once theres no chance of introducing inconsistancy.
25305 	X	i have never been asked to do or been tasked with doing any.
25306 	X	id be happy to do it but nobody including me has ever suggested or claimed that i was going to be conducting any.
25307 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote being in love for real it aint like a movie screen india arie bosskey net aliens predator http www bosskey net avp a personal guide to aliens predator.
25308 	X	dennis satanic counsel and and or are technically dennis isolated to the evaluation of a condition and not to the dennis processing of alternatives if any selected by the result of dennis the.
25309 	X	in normal languages which offer dennis short circuiting the result of the condition is strictly a dennis boolean it is only because of the python semantics which dennis result in returning the actual object which was last evaluated dennis rather than true false which even made the work around dennis.
25310 	X	therefore there is no valid precedent for using dennis late binding lazy evaluation of the branches selected by a dennis.
25311 	X	dennis okay can someone help me off this picket fence.
25312 	X	python is not the only language in which the result of an and or or is one of its operands rather than a.
25313 	X	icon the work of ralph griswold and friends at the university of arizona has similar.
25314 	X	in fact in icon every expression is a generator that can yield a sequence of.
25315 	X	the convention in icon is that an empty sequence indicates.
25316 	X	the following icon operations are relevant to this discussion.
25317 	X	x x fails if x fails otherwise yields x.
25318 	X	x x generator concatenation which has the effect of logical or if a null sequence indicates false.
25319 	X	if expr then expr else expr if expr is empty the result is expr otherwise the result is expr.
25320 	X	im not sure which way this example argues but think its worth pointing out in any.
25321 	X	andrew koenig ark at research att com http www research att com info ark.
25322 	X	myself i think casual maintainers and that is our target audience as real life programmers right.
25323 	X	will find sy d year if d month sy best.
25324 	X	cameron laird cameron at lairds com personal http phaseit net claird home html.
25325 	X	laura max are you telling me that if everybody voted their laura favourite one other and do nothing therefore making do laura nothing the top vote getter you would be pleased with the laura outcome and consider it fair.
25326 	X	laura me i think you have just shot your side in the.
25327 	X	the problem is that when there are multiple proposals a lot of people are going to prefer no change to at least some of those proposals and many of that people may mark no change.
25328 	X	on the other hand unless there is a near consensus on how to proceed perhaps that is the right.
25329 	X	that is after all what guido said he was going to do.
25330 	X	andrew koenig ark at research att com http www research att com info ark.
25331 	X	since i thought of this independently.
25332 	X	i posted this couple weeks ago it was deep inside a message about writing obfuscate reduce comprehensions and so went unnoticed besides before the pep the topic wasnt so hot.
25333 	X	i wanted to post it on sunday the moment i saw the pep but i wanted to be a good citizen and read the threads.
25334 	X	obviously i didnt get to post anything on monday and tuesday either.
25335 	X	now i got back to the newsgroup intending to post and what do i see.
25336 	X	the wonderful python time machine strikes again.
25337 	X	my idea is already well accepted even before i posted it wink.
25338 	X	obviously he deserves all the credit for he managed to read and write many a message while i failed.
25339 	X	and else ly yrs beni cherniavsky cben at tx technion ac il.
25340 	X	dan lines infile and open infile or sys stdin readlines dan lines infile if open infile else sys stdin readlines.
25341 	X	in the old version if infile is nonempty and open infile ever returns none it will call sys stdin.
25342 	X	i dont know if that condition is intentional or even possible because open x raises an exception if x doesnt exist but its a potential.
25343 	X	even if open infile never returns none the rewrite is wrong it should be.
25344 	X	lines open infile if infile else sys stdin readlines.
25345 	X	andrew koenig ark at research att com http www research att com info ark.
25346 	X	when used properly applies to almost every.
25347 	X	one of pythonss strengths was to make it easy to write readably programs and difficult not.
25348 	X	it is loosing this strength a little.
25349 	X	conditional expressions are the next consequent step into that.
25350 	X	how is my thinking part of the problem please.
25351 	X	the problem does not exist it is were raised over and over again by people who have enough time to ask for new constructs which add more to learn but rather small or no new.
25352 	X	how does this make a difference.
25353 	X	is thinking of choice any better.
25354 	X	real choice would be extensible to many choices and this is clearly not achieved and impossible with the proposed.
25355 	X	not enough it also imposes the need to remember new.
25356 	X	so you propose to replace by.
25357 	X	it is clear that pure left to right evaluation would forbid any infix.
25358 	X	in the append case everything is fine you append a single tuple which happens to be created.
25359 	X	this was one of the reasons to replace the string module by methods which turned bulks of execution ordering braces into rather linear sequences of method.
25360 	X	but would you like to read true statement if condition else false statement or something like that.
25361 	X	i still prefer to read from left to right from top to bottom and to do as few lookaheads as.
25362 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
25363 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
25364 	X	andrew dalke adalke at mindspring com writes.
25365 	X	andrew i keep wondering why you post these.
25366 	X	i gather the low frequency of conditional expressions ces in code that you examine is supposed to be some kind of evidence that theyre not useful all that.
25367 	X	however empirically whether theyre useful frequently or not theyre useful often enough that people keep asking about them and we get these endless.
25368 	X	on the other hand the most valid answer to the argument well lets add them to the language and if you dont like them then just dont use them and stop bothering those of us who do is that we have to read code written by others as well as write code.
25369 	X	and we might be concerned that frequent use of ces will lead to a lot of code were confusing and hard to.
25370 	X	in that context your statistics about low usage frequency seem to say that adding ces will both satisfy the people asking for them and rarely bother those who dont like them since they occur so seldom in c programs.
25371 	X	but if thats the situation why are you making such a big deal about the issue.
25372 	X	there seem to be three camps here.
25373 	X	those who like ces and want to use them in their own code as a matter of stylistic preference.
25374 	X	those who dont like ces and are concerned about getting confused by seeing them in other peoples code and.
25375 	X	your own posts which seem to statistically argue that seeing ces in other peoples code will be a rare occurence yet seem desperate regardless to keep ces out of the.
25376 	X	i thus have to ask if ces are so rare then why does the subject matter to you.
25377 	X	you wont be required to use them in your own code if theyre.
25378 	X	and according to your own statistics youll very seldom have to deal with them in other peoples code.
25379 	X	so im sorry but it really sounds like youre trying to impose your stylistic preferences on other people without any practical.
25380 	X	the other ce opponents posts dont give that impression nearly as.
25381 	X	does your channeling reveal any taste for chainable forms that could be the basis for switch like or cond a la lisp like effects.
25382 	X	it seems like we have parallel efforts going trying to achieve functionality simple ternary or generalizable short circuiting guarded expr chains an expression version of if elif else etc newbie friendly menmonics minimalist friendly syntax.
25383 	X	if its simple ternary are we just trying to find a spelling of cs ternary that looks ok.
25384 	X	if the ternary is a special case of something more general should we a forget the general for the moment but try not to select a ternary that paints it out b adopt generalizability as a goal c decide that it is not a goal and concentrate on a minimal ternary.
25385 	X	whoops i think i had another idea.
25386 	X	the old short circuiting c and x or y could also work if we had a notation that said treat this as true without changing its value even though it might be false.
25387 	X	e suppose x meant treat x as true in the context of a logical.
25388 	X	theres no confusion with a dict literal since theres no bare.
25389 	X	i x would be ok and the expression c and x or x.
25390 	X	could have the value e g if x.
25391 	X	since this is my idea of course i like it best.
25392 	X	an html attachment was url http mail python org pipermail python list attachments ec attachment html.
25393 	X	sign x and or x and or none of the s really necessary.
25394 	X	just grabbing an opportunity for comparing.
25395 	X	grabbing the opportunity for comparison with my latest greatest where x means treat x as true in a logical expression but dont change the.
25396 	X	thus the ternary is c and x or y or optionally for style symmetry c and x or y.
25397 	X	x y and sqrt y or.
25398 	X	ext is html text and html or txt not really necessary since html is guar true.
25399 	X	print widget s loaded num and s or not necessary.
25400 	X	ext is html bytes and html or is mpeg bytes and mpg or is jpeg bytes and jpg or txt none of the were really necessary in the above.
25401 	X	andrew koenig ark at research att com writes.
25402 	X	im missing something x and y both get evaluated in that example so its only a partial work around.
25403 	X	the benefit of the decay to a binary operator carries no weight with me its still.
25404 	X	if anything that is more of a turn off it means that the entire meaning changes based on whether the else is there or.
25405 	X	not a very good idea in a language where explicit is better than.
25406 	X	i only mentioned it because it was one of the alternatives mentioned in the.
25407 	X	the objection to it seemed to be the if keyword so the obvious compromise is c then x else y with which i would be satisfied.
25408 	X	i still believe the full if c x else y is the best alternative but i would be satisfied with any of these.
25409 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote you cannot step into the same river.
25410 	X	cratylus python chess module http www alcyone com pyos chess a chess game adjudicator in.
25411 	X	in article yuofmaikk fsf at europa research att com.
25412 	X	actually i think of functions also were methods and operator overloading as decreasing pythons stylistic diversity in many.
25413 	X	they simplify the language and increase.
25414 	X	aahz aahz at pythoncraft com http www pythoncraft com.
25415 	X	register for pycon now http www python org pycon reg html.
25416 	X	andrew at acooke org andrew cooke wrote in message news.
25417 	X	someone did see pep http www python org peps pep html.
25418 	X	i think you are wrong on this mathematics logical calculus engineering et all use abstract.
25419 	X	it improves communication amongst those in the.
25420 	X	people seem to have little difficulty in picking up such.
25421 	X	if we rigorously adopted your approach then a y would have to be replaced by a add y or.
25422 	X	it may be that poor dumb programmers cant hack symbols if so were in real.
25423 	X	as to your point about experience i would argue that non english speakers are in much the same position wrt if then etc as you claim most are wrt new.
25424 	X	again i think there is a logic especially for left to right top down.
25425 	X	my logic says read left to right seems to imply evaluate left to.
25426 	X	the decision has to be made before evaluating the alternatives modern speculative compilers notwithstanding.
25427 	X	i think your point about the were confusing is possibly.
25428 	X	c x y further discussion robin becker.
25429 	X	robin in a math text i dont have a great deal of trouble with it despite robin were an engineer.
25430 	X	andrew koenig ark at research att com http www research att com info ark.
25431 	X	erik max francis max at alcyone com wrote in message news.
25432 	X	i am pretty sure i prefer this to the pep proposal which seems backwards to.
25433 	X	it does support andrews claim that programmers less skilled than you attempting to use the and or idiom are likely to make a.
25434 	X	and arent most programmers in question less skilled than you.
25435 	X	of course the fact that over half the examples posted in this thread contained clear errors is a stronger.
25436 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
25437 	X	yes we got you the first three times wink.
25438 	X	doesnt give any indication that the expression is a selection i e the same as x and y or b.
25439 	X	introduces random symbols that give simple expressions new and surprising i e just like.
25440 	X	special cases arent special enough to break the.
25441 	X	sure why not use perl then.
25442 	X	now i wonder what you might deem not to be.
25443 	X	i guess that the design prinicples of python in.
25444 	X	thats ok but i like them.
25445 	X	while the idiom might work its by no means readable except to people who are already familiar with the idiom.
25446 	X	imagine showing it to a non programmer or a beginning programmer or even to a programmer with years of experience but who had never seen this particular idiom.
25447 	X	one of the reasons why i want a conditional operator is so i will stop encountering clever tricks like and or in place of readable.
25448 	X	except as i said hoping to forestall this very misunderstanding i is live at the end of this code so you cant skip its.
25449 	X	so what you meant to say would be.
25450 	X	j n field s start i.
25451 	X	btw the false and true are given backwards in your.
25452 	X	wink on that ordering on the form with corrected.
25453 	X	the parentheses are okay the question mark is obvious but the comma is too nearly invisble to please.
25454 	X	yeah now lets try writing it with readable spaces.
25455 	X	it makes it much harder to see what is actually different between the two.
25456 	X	of course thats equally true no matter what form the ternary.
25457 	X	page is ripped out of playbook long.
25458 	X	on the form without parentheses and with comma.
25459 	X	i think the rest are pretty much just more of the.
25460 	X	of course i cotton to the form in general ive written way too much c and c over the years.
25461 	X	the comma really doesnt seem adequate to the role you give it maybe thats for the same.
25462 	X	didnt really use the ternary op all that often then.
25463 	X	its one of those things you can live without but its sure handy to have it.
25464 	X	ive been trying to think of something in uncontroversial python that feels about the same and the best match ive come up with is well its a bit of an.
25465 	X	but you know now that we have iterators well for some values of us theres really no need for the while statement.
25466 	X	its redundant just syntactic sugar to replace.
25467 	X	for dummy in infinite iterator if inverted condition break body of loop here.
25468 	X	firstly because while it is clear to you that if x will be none if x is false it isnt necessarily clear to someone who is new to python or who never uses conditional.
25469 	X	secondly parse this for me assuming that those who object to mandatory parentheses win.
25470 	X	x if c e elif c if c e else e.
25471 	X	x if c e elif c if c e else none else e.
25472 	X	you wouldnt write it without clarifying parens.
25473 	X	my point is that if guido is going to agree to add this controversial new feature to python the result should be absolutely no thought required readable and.
25474 	X	nothing optional apart from the inherent n way optionality of the elif.
25475 	X	i do know that i spend several hours of research and.
25476 	X	to justify calling and or conditional selection operators i defined conditional and selection.
25477 	X	i compared them to the logic versions which they generalize and too which they reduce in certain.
25478 	X	i discovered and included two new to me and i suspect to the list.
25479 	X	the and or idiom has a dual or and version with a different failure.
25480 	X	the two idioms can be combined in either order to produce more complicated forms that work.
25481 	X	i had initially thought this to be.
25482 	X	i spent some time trying to be terse without were cryptic and removed some aside.
25483 	X	in an attempt to keep attention on the main points i removed some expressions of opinion and anything that i thought would be distractingly.
25484 	X	i seem to have failed in the very first.
25485 	X	writing introductions is hard at least for.
25486 	X	actually by the definitions of extended domain and conditional execution that i gave in my essay my sentence above is.
25487 	X	to me purely boolean is a synonym for strict logic which i defined as mapping bool x bool.
25488 	X	however c and map all scalers including pointers and floats and not just boolean values to its boolean int.
25489 	X	if purely includes this domain extension then the contrast implied by actually seems non.
25490 	X	so this strikes me as another distractive.
25491 	X	i agree that this or something like it would have been a better way to.
25492 	X	i wish i had been able to get this suggestion before.
25493 	X	i have saved it and as promised will use it to revise before re releasing the essay or some new.
25494 	X	again every argument against pep applies to pep this time you used you can already do this with current syntax if you.
25495 	X	pep suggests the addition of a short circuiting operator in general.
25496 	X	also i dont see how the subsequent stuff challenges my assertion that every argument against applies to.
25497 	X	again purely syntactic sugar applies equally strongly to x if c else y and everything else none of this is new.
25498 	X	brevity since thats the whole point of.
25499 	X	if its so important its worth adding a new operator its importent enough to add something actually flexible enough to be.
25500 	X	if its not a sufficient justification for its even less of a justification for which doesnt even have the virtue of were.
25501 	X	i elsewhere but towards the end of a longish post pointed out that i will frequently write.
25502 	X	x none if s find spam x spammity spam.
25503 	X	the quick rewrite of this to the.
25504 	X	x none if s find spam spammity spam.
25505 	X	which is wrong and gets things exactly.
25506 	X	i believe a few people will get it wrong because of this either translating to or from a if else.
25507 	X	not to mention that not guarantees or.
25508 	X	i think i have an answer.
25509 	X	result cond and true value or false value.
25510 	X	where x means x is treated as true in logical expression context but its value is preserved for the expression.
25511 	X	result cond and true value or false value.
25512 	X	carlos ribeiro cribeiro at mail inet com br writes.
25513 	X	fwiw my background is c and i like the ternary operator in c i often instinctively want to code ternary operations in python.
25514 	X	but in practice i never need to and usually the alternative feels better in some indefinable way.
25515 	X	in fact i think the c derived arguments for the ternary operator are fairly weak when translated to.
25516 	X	arguments deriving from the functional programming school of thought are much harder to refute basically because python has some support for functional style programming but its not complete and conditional expressions would fill one of the gaps but im not sure it would fill all of them.
25517 	X	otherwise tell us what is is the correct answer of the time.
25518 	X	how often are list comprehensions needed.
25519 	X	python already wisely recognizes the need for short circuit within.
25520 	X	but and or is not powerful.
25521 	X	thats the only reason to consider conditional.
25522 	X	not true as i and others have explained at length.
25523 	X	readability and maintainability are served by factoring out common sub expressions from the more verbose forms.
25524 	X	if condition if condition targetvar result else targetvarl result hidden bug else targetvar result.
25525 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
25526 	X	the parentheses and else clause are.
25527 	X	leave them off and you get a.
25528 	X	the conditions and expressions appear in natural order the same order as in an if statement and the order in which they will be evaluated short circuiting aside.
25529 	X	the syntax is utterly familiar and easy to remember since it is just like the if statement but in an expression.
25530 	X	this is proposed in the past see http groups google com groupsthreadm.
25531 	X	python list python org and i cant find any specific objections to it other than someone uncomfortable with the idea of mandatory.
25532 	X	after youre used to it any idiom is.
25533 	X	the issue is whether its incomprehensible idiom to begin.
25534 	X	in that respect c and x else y is no less idiomatic than c and x or y despite the fact of course that c and x else y has the possibility of working when x is false.
25535 	X	oh youll get used to it by repetition doesnt seem to be a very strong argument in favor of a particular.
25536 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote when you love somebody youre always in.
25537 	X	sherman potter a simple python opengl rendering.
25538 	X	piet van oostrum piet at cs uu nl wrote in message news wzfzqlfw fsf at nono cs uu nl.
25539 	X	yes good point i think this rules out making bool choose do lazy evaluation its too much of a special.
25540 	X	a non lazy version would still be useful in my opinion people can always use lambda if they really need to short circuit or perhaps a general form of lazy evaluation should be invented.
25541 	X	i did not want an official vote i wanted a pre screening because i fear there is a large number of people who would say no to any.
25542 	X	of course if the situation is situation.
25543 	X	then it is relevant to discuss a good new proposal such to convince that.
25544 	X	however if the situation is situation.
25545 	X	then there is no point to spend weeks in trying to convince people who have already.
25546 	X	i have no idea if we are in situation or situation because of the silent majority that doesnt.
25547 	X	thats way i would like to see a.
25548 	X	i hate the idea of spending the next week sending postings to convince people than when is better than if if already the majority doesnt want the ternary operator in any form and maybe this is the case or maybe not i dont know.
25549 	X	michele simionato of physics and astronomy allen hall pittsburgh pa u s a home page http www phyast pitt edu micheles.
25550 	X	dear gerd i have been thinking the same while i liked a then form better but didnt.
25551 	X	after sleeping over it several times i found out that i now totally.
25552 	X	this is a very elegant cure to a very bad.
25553 	X	we have become used to use and or in python when we dont mean.
25554 	X	this is wrong from the beginning since if written correctly all the phrases used to spell if then else are an abuse of the logical.
25555 	X	in the proposed ternary operator and does not in any way really mean and and this is absolutely.
25556 	X	tricks to achieve an effect are locally ok but modifying the language to eternalize the tricks is not doing any good to us and.
25557 	X	so now im saying if there is an and it should mean and and not then.
25558 	X	we should not invent new escapes to trick and into behaving like then by cheating the right operand or by doing magic to and by a ternary operator.
25559 	X	the word and is abused and so are all who have to read the.
25560 	X	havig that said im not against a ternary.
25561 	X	if we want to need conditional expressions with else parts a ternary is not.
25562 	X	given the syntactic gymnastics from the latest pep version i believe the bdfl just gives us something nasty enough to disagree with which i hereby do whole.
25563 	X	getting nothing is better than getting worse chris.
25564 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
25565 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
25566 	X	this is obviously a judgement call so we can agree to.
25567 	X	chained conditional expressions in whatever language arent the end of the world but in my opinion theyre a case of taking a shortened syntax too.
25568 	X	the benefit of a conditional expression again in whatever language is in my opinion the ability to do a very simple else switch as an expression not a statement in a place where the emphasis is not on that switch and in a manner that is fairly.
25569 	X	so youd want conditional expressions in things like example in c.
25570 	X	printf i have d s s n count noun count.
25571 	X	heres an example where i want to do an else but that is really a minor point the big.
25572 	X	the else is necessary but it isnt the main.
25573 	X	when youre doing a lot of output youll often find this kind of thing going on a great.
25574 	X	if you end up with an expression that consists of a huge chain of conditional expressions your example was simply an assignment that begs the question of what the crux of the purpose of that statement obviously the repeated else else is whats paramount and so using the shortened syntax seems to me a priori less.
25575 	X	indentation in c can make that more readable but it can in python too after all this is an expression were talking about here there are no indentation requirements.
25576 	X	or surrounding it in parentheses or putting the indentation elsewhere or whatever variation you.
25577 	X	we can get into discussions about which formof indentation will look better for pythons conditional operator but thats not my crucial point here my point is you can indent python conditional expressions for readability just as well as you can indent c.
25578 	X	i just find that in the case where i find chained conditional expression in c or c its usually more obfuscated than its worth for a simple assignment certainly one immediately wonders why you didnt just use a repeated else.
25579 	X	this really isnt of much concern to me since right away if youre chaining conditional expressions youre winding down the readability index of your.
25580 	X	all thats important is that the expressions chain properly that is.
25581 	X	as it does in the current proposal beyond that if you really want to use the construct in order to obfuscate rather than simplify thats every programmers.
25582 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote the doors of heaven and hell are adjacent and.
25583 	X	nikos kazantzakis bosskey net return to wolfenstein http www bosskey net rtcw a personal guide to return to castle.
25584 	X	tim just noting that if the proposal is accepted we can get rid of tim those pesky and and or operators.
25585 	X	tim x and y same as y if x else x tim x or y same as x if x else y.
25586 	X	tim removing two things each time a new one is added is an effective tim way to keep the language small wink.
25587 	X	no theyre not the same because in each case the ones on the right might evaluate x twice and the ones on the left never.
25588 	X	andrew koenig ark at research att com http www research att com info ark.
25589 	X	david eppstein eppstein at ics uci edu wrote in message news eppstein.
25590 	X	he did admit on py dev that it was a slightly machiavellian.
25591 	X	i think he was at least half sure that we could never agree on any one.
25592 	X	i am not at all sure we.
25593 	X	actually we did something like in the early s by giving students some c programs to read and some questions to answer afterwards.
25594 	X	we timed how quickly they started answering questions among other.
25595 	X	but i dont have access to a lab set up like this any.
25596 	X	paul rubin http phr cx at nospam invalid writes.
25597 	X	are you just trying to crack a joke or are you saying that those of us who claim to not like and or use it when noone is looking.
25598 	X	if design space werent so vast and the good solutions so small a portion of it programming would be a lot.
25599 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote if you cant fight and you cant flee.
25600 	X	robert elliot physics reference http www alcyone com max reference physics a physics.
25601 	X	thats better but still doesnt eliminate the special form which is explicitly rejected as an option in the.
25602 	X	if i didnt knew the quality of your postings i would think your are.
25603 	X	if optarg is none optarg default value.
25604 	X	because this is not only a common idiom e g when you need default arguments to be lists or dicts but it also parses to me in an.
25605 	X	self someval optarg when optarg is not none else default value.
25606 	X	would ever begin to have the same ring with.
25607 	X	i see no reason to contribute to pep as i am convinced inline if doesnt belong to python as all proposed forms are much less than.
25608 	X	next hope for inline if is lazy evaluation if it ever to be added to python then everybody will be able to add if as a function treating its arguments.
25609 	X	but i do not believe bdfl will ever add such function to python as it means more.
25610 	X	even more likely implicit lambda proposal.
25611 	X	will not probably be anybody up to the pep.
25612 	X	sincerely yours roman suzi rnd at onego ru my ai powered by linux redhat.
25613 	X	couple of significant typos fixing the worst one.
25614 	X	conditional was supposed to be colon.
25615 	X	anansi spaceworks http www anansispaceworks com.
25616 	X	in article bffp vsf at slb atl mindspring net.
25617 	X	and because of the syntactic support provided by the brackets in addition to the fact that the append becomes completely implicit its much.
25618 	X	aahz aahz at pythoncraft com http www pythoncraft com.
25619 	X	register for pycon now http www python org pycon reg html.
25620 	X	the above binds y to the value distinguishing logical from non logical values something like y and x.
25621 	X	the above is and expr and true.
25622 	X	where expr is x and y or z.
25623 	X	which has the same effect as x and y or z.
25624 	X	the truth wrapper is peeled off when you evaluate the expression sort of like quote x so if x is true and y is false expr is true and y or z.
25625 	X	which evaluates to y without so we have and y and true.
25626 	X	whose value is the terminating false value of y which could be none etc.
25627 	X	yeah but there is a method to the madness otoh i do see the need for something easier to.
25628 	X	i just enjoy exploring the edges of a problem up to a point.
25629 	X	i had that thought too and as your smiley may have presaged theres too many ambiguities as erik was quick to point out.
25630 	X	your c v c v true vdefault is looking better and better i may seem fickle but my allegiance is to the pursuit of ideals not particular approximations along the way so i try not to get too attached to my own stuff even in the midst of championing it.
25631 	X	why should and and or compound expressions be short circuited but not if expressions.
25632 	X	it should be short circuiting for consistencys sake not to mention were more.
25633 	X	if the functionality can be exactly emulated with a function then the utility of the new feature pretty much drops to zero and my vote would swing from to.
25634 	X	the very fact that people dont just write a little function something far easier and less time consuming than say arguing in favor of this pep is at least some indication that its judged to be worthwhile even if how worthwhile cant be quanitifed with hard numbers or even if its not very worthwhile to.
25635 	X	also the usefulness of short circuiting is shown in several realistic examples already so theres little point in repeating them again and again to you they just dont seem important or youre simply ignoring.
25636 	X	for example early on michael chermside gave one example you gave a broken counter example and tim corrected you but point of michaels example was still valid even though you never continued the thread it was a case where you want to call a method of an object but you have to check for none first.
25637 	X	to me it is important because i have run into and continue to run into this same scenario and i find that without a conditional operator the language is getting in the way because the code i have to write doesnt synch up very well with what i mean because what i mean is more accurately conveyed by a conditional expression.
25638 	X	because it is unprecedented in the language and only serves to complicate issues.
25639 	X	it opens the door to more general special forms which now makes you look at everything with function calls and wonder if theyre going to get lazily evaluated behind your.
25640 	X	its mentioned in the pep as an alternative at any rate so its candidacy has already been.
25641 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote you win the victory when you yield to.
25642 	X	sophocles bosskey net quake iii arena http www bosskey net qa a personal guide to quake iii.
25643 	X	the problem with this is that its already a perfectly legal statement the part after is a tuple also were a tuple it doesnt do shortcut.
25644 	X	i suppose this would need to be specialcased by the compiler else it might break a bunch of code or subtly change tuple or if.
25645 	X	because of its need to switch if s semantics.
25646 	X	c c and some others return.
25647 	X	lisp long ago defined and and or in a python like fashion where the argument was returned instead of a boolean.
25648 	X	lisp also defined a cond operator which was much like the present if elif else expression proposal kicking.
25649 	X	if i understand what youre saying lisp established such a precedent like years.
25650 	X	if you meant to say there is no precedence for evaluating both terms of a conditional expression operator i think that might be closer to the.
25651 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
25652 	X	well sure i wouldnt go nuts over the chained syntax either but its the logical extension and if you accent the basic syntax its the right way to make it multiway instead of simply two.
25653 	X	if c x elif d y else z.
25654 	X	the else if is screaming change me to an.
25655 	X	granted if you dont like the if c x else y approach in the first place then this is going to be even less.
25656 	X	thats a logical fallacy known as the slippery slope.
25657 	X	im not seeing the slippery slope here i dont see people clamoring for except statements to be bound up in.
25658 	X	besides does it offend you that.
25659 	X	it seems that was the first step down the slippery slope if indeed there was one which i dont think there is.
25660 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote no man quite believes in any other.
25661 	X	h l mencken alcyone systems san jose.
25662 	X	whats an instance method as opposed to a class method.
25663 	X	what i was trying to say is that i think instead of.
25664 	X	it should have been breakfastitems join.
25665 	X	and hes saying its okay that thats a.
25666 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote no man quite believes in any other.
25667 	X	h l mencken alcyone systems san jose.
25668 	X	cocoa nspopupbuttons indexofselecteditem method doesnt return non numeric.
25669 	X	not that i make any claim of having polished this to jewel like perfection but here it.
25670 	X	its part of the controller for the find dialog in a table editing.
25671 	X	the input data structures are self doc columns a list of strings used as dict keys self doc rows a list of dicts keyed by the columns contains beginswith endswith exactmatch localized string compare routines self table the controller for the table display self column self match self text components of the find dialog note that self match and self columns are both pop up buttons but accessed differently because one is static and the other has to be updated when the self doc columns.
25672 	X	def search self row increment def matches row if col is not none return match row get col target for c in cols if match row get c target return return.
25673 	X	cols self doc columns col self column indexofselecteditem if col col none else col cols col.
25674 	X	match self match selecteditem tag match contains beginswith endswith exactmatch match target self text stringvalue rows self doc rows while row increment if row or row len rows return if matches rows row self table setselectedline row return.
25675 	X	looking at it again it is possible to simplify this in a way that gets rid of the implicit ternary allowing the subroutine to be more easily folded into the main routine.
25676 	X	def search self row increment cols self doc columns col self column indexofselecteditem if col cols cols col match self match selecteditem tag match contains beginswith endswith exactmatch match target self text stringvalue rows self doc rows while row increment if row or row len rows return for c in cols if match rows row get c target self table setselectedline row return.
25677 	X	but clearly the existence or nonexistence of a ternary operator had nothing to do with my ability to find this simplification i already had working code for this problem so had little motivation to work harder on simplifying it until you asked me to post.
25678 	X	david eppstein uc irvine of information computer science eppstein at ics uci edu http www ics uci edu eppstein.
25679 	X	their use is already too well entrenched to want to do something like.
25680 	X	they just do their logical by returning one of the objects rather than a strict.
25681 	X	other languages do this like lisp theres nothing inherently wrong with.
25682 	X	its also way too entrenched to change.
25683 	X	its an example of a feature that i dont often rely on but even i a champion of the booleans pep wouldnt think to change their behavior.
25684 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote the average dog is a nicer person than the average.
25685 	X	andrew a rooney python chess module http www alcyone com pyos chess a chess game adjudicator in.
25686 	X	there is a beautiful irony here while demonstrating how easy it is to get the c and x or y idiom wrong you actually got it.
25687 	X	x y and x or y.
25688 	X	gives the wrong answer zero if x is and y is.
25689 	X	actually in that case what you get is this.
25690 	X	x y and x or y true and or true value.
25691 	X	x or y or true value.
25692 	X	so the result of the expression in the case where x and y say is.
25693 	X	but the expression was supposed to find the larger of x and y which would have been.
25694 	X	yes the c and x or y idiom is indeed far too confusing and should therefore be avoided for practical.
25695 	X	robin munn rmunn at pobox com http www rmunn com pgp key id xafb ff cffb a f d acfd afb.
25696 	X	holger krekel pyth at devel trillke net writes.
25697 	X	well guido gave the impression that he would go with the majority verdict which im not sure ive seen him say.
25698 	X	im sure hes really reserved his right to ignore the outcome of the current c l py shindig but i think it could be a worrying.
25699 	X	iow i think guido gets decisions right more often than i do so i certainly think he beats a newsgroup.
25700 	X	its sunday afternoon i could do my work or i could do a fourier analysis of my computers fan.
25701 	X	on thu feb greg ewing using news cis dfn de.
25702 	X	i think that the c syntax for the ternary is very poor mostly because there is nothing intuitively obvious about.
25703 	X	is a bad syntax in general but particularly for python because imho.
25704 	X	it uses symbols rather than keywords which are meaningless unless the reader is already familiar with the construct from another programming language since they have no obvious analogue in mathematics or some natural language.
25705 	X	this makes it an especially poor choice for python which has important applications as a teaching i e first.
25706 	X	it is arbitrary in that nothing about the syntax would suggest that the truevalue should precede the colon i e c falsevalue truevalue is equally logical since a more natural order might be false true.
25707 	X	the problem is that the symbols used to form the ternary are not suggestive enough to convey a clear meaning admittedly the question mark is barely ok.
25708 	X	arbitrary language features are harder to remember and make the language more difficult to use.
25709 	X	it is confusing since using the colon to separate alternatives would conflict with the established meaning of that symbol in.
25710 	X	in python the is generally used to signal the beginning of a conditional block similar to keywords like then and do in other languages or represent some type of.
25711 	X	a comma or semicolon would be a more pythonic symbol to use as a separator for a sequence of.
25712 	X	it is somewhat illogical to have the condition appear at the beginning of the expression since it is one of the two values that gets assigned to the.
25713 	X	python arithmetic expressions normally use infix operators with the type of the result often were the same similar to the value that begins the.
25714 	X	while there are of course many exceptions to this a better syntax would be one which at least suggests the result type to the reader just by looking at the beginning of the ternary.
25715 	X	for similar reasons it would be equally bad to begin the ternary expression with a keyword result.
25716 	X	while the c language does have some good points its not exactly a model of clear and elegant.
25717 	X	one of the reasons i prefer to program in python is because it uses a largely keyword based syntax rather than thoughtlessly apeing the mistakes made in the design of c c too bad about the screwy assignment and equality symbols but i guess even python cant be perfect i think that adopting c like syntax for the ternary would be a very bad.
25718 	X	after reading the hundreds of postings on this topic i still feel that the syntax shown in the original version of the pep x if c else y is the only one with any real.
25719 	X	keyword based with an obvious and unambiguous meaning even to someone unfamiliar with the ternary.
25720 	X	common result appears at the beginning of the expression making it easy to determine the likely result type and.
25721 	X	reuses existing keywords if else unlike similar proposals like x when c else y which convey precisely the same meaning in a verbose and non backwards compatible.
25722 	X	adding an entirely new reserved word solely for the benefit of a rarely used construct seems like an especially bad.
25723 	X	uses the if keyword in a novel ordering that avoids confusion with the use of if in the context of a conditional statement this is a feature not a bug.
25724 	X	the current proposal for example if c x else y requires surrounding parentheses partly to avoid this.
25725 	X	avoids lots of extraneous symbols parens colons that are needed in other formats to achieve.
25726 	X	provides a simple elegant and obvious way of achieving an n way selection without requiring additional keywords parens x if c else y if c else z.
25727 	X	the objections to the x if c else y syntax have all been very weak.
25728 	X	most people who have criticised the proposal have done little more than to point out that the condition appears in the middle of the expression unlike c which presumably does things the right way.
25729 	X	of course this is no argument at all its merely restating what the proposed syntax is without explaining why theres a problem with doing it that.
25730 	X	i think the real problem is that these critics are familiar with how the ternary is represented in c and similar languages so having the test in the middle looks unnatural at first.
25731 	X	some people have claimed that you cant read it either ltr or rtl but i really cant understand this argument at all how do you read lunch pizza if hungry else salad if not left to right.
25732 	X	id bet that x if c else y will look perfectly natural to experienced programmers within a month if it gets adopted and would look natural right now to those who have never used the ternary in other languages well then all be wondering why c has such a brain damaged ternary syntax.
25733 	X	to me x if c else y looks perfectly natural i dont often code in c and has the elegance that i expect in the design of.
25734 	X	my vote on pep if anyone cares is.
25735 	X	x if c else y no ternary if c x else y all other proposals.
25736 	X	please reinstate x if c else y as the recommended syntax for pep.
25737 	X	i think the point wasnt the order the operands are evaluated in but the order the operations are done.
25738 	X	you already have to think out of order to understand arithmetic expressions so out of order thinking in conditional expressions wouldnt be a big.
25739 	X	greg ewing computer science dept university of canterbury christchurch new zealand http www cosc canterbury ac nz greg.
25740 	X	paul paterson hamonlypaulpaterson at houston rr com wrote in message news.
25741 	X	i think the problem is not with the ternary operator but with the abuse of if.
25742 	X	if when callable obj obj else default.
25743 	X	i think introducing a ternary operator is worthwhile but one needs a new keyword to avoid confusion with the if.
25744 	X	and programmers skilled enough to get their code admitted into the standard.
25745 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote there i was there i was splitting atoms with my desire lamya computer science http www alcyone com max reference compsci a computer science.
25746 	X	did you ask her how easily she understood if c z x else z y.
25747 	X	in fact thats exactly why whenever i use in c i always use it with.
25748 	X	i imagine that in python i would probably do the same.
25749 	X	so i would have written that as.
25750 	X	print x x getdisplaystring if x else none.
25751 	X	because its unambiguous even without knowledge of the precedence.
25752 	X	the only reason i didnt is that i was trying to simplify as much as possible for the.
25753 	X	shouldnt simplify to the point of confusion lly yours.
25754 	X	despite some ridiculous attempts to sound funny this is not.
25755 	X	im going to open a serious flame war a flame war that has no.
25756 	X	i never was pro and will probably never.
25757 	X	but now there is this incredible cond expr.
25758 	X	it has its own existence in its own.
25759 	X	but if it tries to lean on further syntax which is living on a small surface since lc had some postfix if for existance already since if that reasoning is now used to convince myriads of newcomers that the new syntax s pythonic syntax then i will put any and all of my power into dissing lcs as well.
25760 	X	i do not want lcs to introduce a new direction of obfuscated.
25761 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
25762 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
25763 	X	most pythonistas will never abuse the damn.
25764 	X	some have vowed ahead of time sight unseen that theyll never even use the feature in any.
25765 	X	a few users from time to time will screw up commit the grave error of writing a more complicated snipped than absolutely.
25766 	X	for the vast majority of them the only person theyll hurt will be themselves as nobody else is ever gonna read their code in the first.
25767 	X	others of you who are in a position of leadership or power can suggest or demand that people under your influence to use whatever style you think.
25768 	X	after all that what are the odds that you will be confronted with one if these evil forms.
25769 	X	maybe never since the people around you will be.
25770 	X	i think a more meaningful statistic would be for you to go to all your non programmer clients have them study the pep without a lot of coaching by you then and ask them if they have trouble understanding the.
25771 	X	frankly i suspect that some of them would actually be insulted the way you carry on about what a hardship this trivial extension would present for them how much trouble they would necessarily get into trying to use it and by implication how weak their computer programming skills must actually.
25772 	X	after all there are thousands of ways to abuse python as it.
25773 	X	in this case perhaps all thats needed are a few additional guidelines in pep to steer people away from the worst pit.
25774 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
25775 	X	your own analysis of python and linux here also is.
25776 	X	in both cases you you neglected to include the thousands of files nested deeper than or levels of sub.
25777 	X	you also neglect to include h files which normally are a large source of.
25778 	X	usages though in this particular case there may not be very many.
25779 	X	i dont know or care by how much this perturbs your.
25780 	X	it may be a big change or it may be a minor.
25781 	X	hard to predict since there was a factor of difference in the two code.
25782 	X	anyway it invalidates all the work you did thus far on this ridiculously trivial.
25783 	X	and imo your first order carelessness on these minor points casts some suspicion on your other analysis to.
25784 	X	and what did your analysis prove after all in this case.
25785 	X	the poor francis expresses an opinion using the common terms occasionally and rare.
25786 	X	you pounce on him but after the dust clears his statement is entirely consistent with your results which range as low as parts per million for his specific.
25787 	X	if anything his description actually exaggerates the significance of the given.
25788 	X	even if we accept your higher figure of ppm in k one would still have to agree with eriks characterization that entire issue is essentially irrelevant.
25789 	X	to look at it from another angle you predict one of these heinous errors in every k loc of python which already is sounding pretty friggin irrelevant.
25790 	X	i measure around k lines of python code and modules in the lib.
25791 	X	so this would translate to a grand total of errors in the entire library or one error on average in every.
25792 	X	so this clearly is angels on the head of a pin.
25793 	X	its even more pointless in this example the real number more likely would be zero since people working on the library likely would be more conservative than the code base you drew.
25794 	X	so what good are your predictions in the first place.
25795 	X	more importantly i disagree with both of you that this particular bogeyman is such a heinous sin in the first.
25796 	X	nested conditionals are so extremely common to almost not be worth talking.
25797 	X	the fact that a conditional expression might be nested within an if statement its no big deal hardly of more consequence than using and or or or a nested.
25798 	X	but i think your examples show the usage has some.
25799 	X	it may take some getting used to but it does not present the rubic cube puzzle some of you make it out to.
25800 	X	to be sure your complaint here may be further argument that the c style operator form would be less confusing overall than the if else keyword.
25801 	X	but either way once people learn the construct its not going to present a major hardship for.
25802 	X	besides if a programmer in his judgment feels its the right thing to do in a given circumstance who the heck are you to say hes a bad person.
25803 	X	sure youre entitled to your opinion and in your shop you can enforce any rules you.
25804 	X	but the obsession you show about imposing every minuscule detail of your personal taste on the rest of the world is disturbingly reminiscent of the moral majority.
25805 	X	this is a glaring inconsistency with your past.
25806 	X	here youre talking about bad examples of the construct so naturally its convenient for you to assume they carry over to from c to.
25807 	X	just about everywhere else when the subject was good examples you went to great lengths before hand to disqualify as many instances as.
25808 	X	now its hard to say if your bigger error was excluding too many in the good case or not excluding enough in the bad case but the fact that you do it differently and always do it biased towards your own foregone conclusion is practically the opposite of were.
25809 	X	its bad enough to introduce bias consistently one way but to change your assumptions on the fly like this is.
25810 	X	your analysis would be more credible and i think intellectually more honest if you reversed these assumptions were generous about admitting possible good usages and stingy with the bad.
25811 	X	then if you came up with some otherwise credible scary statistics your conclusion would be very.
25812 	X	of course the problem with the intellectually honest route is you probably dont end up with an analysis that suits your.
25813 	X	since you instead skew the data with assumptions that support your own bias your elaborate analyses are arguably little more than than an unnecessarily complicated expression of your own opinion which we all knew to begin.
25814 	X	given the arbitrary choices you have made in building up your analysis your own pronouncements seem to have little more than the illusion of rigor if.
25815 	X	i address this in a little more detail in my previous.
25816 	X	this is why we all should be constantly on guard about lies damned lies and then.
25817 	X	exactly erik is correct despite the lack of a pointless attempt to quantify rare.
25818 	X	what level would indicate a sufficiently high level of misuse to warrant its exclusion from a future python.
25819 	X	personally the i think the chance of misuse of pep should be pretty friggin high for it to be.
25820 	X	then pep will be used in bad form about of the.
25821 	X	frankly i think trying to analyze the probability of abuse by looking at code is of dubious value to begin.
25822 	X	i think youve been barking up the wrong tree all.
25823 	X	it isnt about heavily massaged code stats its about.
25824 	X	and then of course theres always var sqrt x else imag if x.
25825 	X	im not preoccupied with it i just think it impairs.
25826 	X	if youve also been reading these threads youd see that this was a wide reaching objection penetrating both pro and anti pep.
25827 	X	lots of people objected to it not just.
25828 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote no one should have to dance backward all their.
25829 	X	jill ruckelshaus url scanner maintainer and validator in.
25830 	X	indeed im surprised someone would suggest i meant.
25831 	X	lisp doesnt need such a construct since its if special form already acts as both the if statement and a conditional operator in python since lisp is functional theres no distinction so theyre one and the same.
25832 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote if a thing is worth doing then it is worth doing.
25833 	X	g k chesterton a lambda calculus explorer in.
25834 	X	i disagree in the strongest possible.
25835 	X	a majority might well vote against the pep as stands.
25836 	X	in the absence of the best possible syntax voting no might be the right.
25837 	X	but many people have indicated by their posts that they dont fully understand the.
25838 	X	sheesh emails into the discussion people were still indicating that they didnt get that the construct short circuits and thus cannot be defined as an ordinary function.
25839 	X	now some messages later i sense that weve made some progress since guidios original post in narrowing the field of alternatives and killing off some dead.
25840 	X	but were far from consensus and seems theres plenty more to be.
25841 	X	anyway per the pep on peps discussing and revising the pep is a normal part of the process before voting.
25842 	X	building consensus is an express part of the.
25843 	X	thus i view motions to vote prematurely as an underhanded attempt to kill the proposal by bypassing the normal.
25844 	X	we have plenty of time to work this.
25845 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
25846 	X	for the times ive needed such a construct.
25847 	X	skip cond and expr or expr.
25848 	X	except that this construct has a subtle pitfall if cond is true and expr is false the result is expr instead of expr.
25849 	X	to get around it you have to write something like.
25850 	X	andrew koenig ark at research att com http www research att com info ark.
25851 	X	on fri feb peter hansen peter at engcorp com wrote in comp lang python in article.
25852 	X	i really prefer wordy psuedo code like constructions that feel at least to me more like.
25853 	X	regardless of how many python programmers are familiar with c like.
25854 	X	true expr when cond expr else false expr.
25855 	X	over all else that is suggested although the original suggestion by guido is also.
25856 	X	words preferable to punctuation characters in all.
25857 	X	havent had much time to read the voluminous amounts of discussion on this.
25858 	X	sheila king http www thinkspot net sheila http www kgroups org.
25859 	X	gerrit holl gerrit at nl linux org wrote in message news.
25860 	X	sometimes punctuation isnt such a bad thing.
25861 	X	would reducing the abllot from to items make that much difference.
25862 	X	i happen to think the division into groups rather.
25863 	X	why not put all the options to the community and see how it.
25864 	X	erik max francis max at alcyone com wrote in message news.
25865 	X	right to left would already be ugly but i dont understand why guido is proposing a syntax which reads from the center to the.
25866 	X	maybe it already got proposed earlier in the thread but i guess that.
25867 	X	it stands out more than the if form when youre reading the expression it reads left to right you cant confuse it with the if statement.
25868 	X	there have been many cases where i would have used such a construct and it annoyed me that it was not.
25869 	X	for the obfuscated contest rewrite this peace of code using.
25870 	X	preferably with a lot of s and s.
25871 	X	i am using this to draw an arrow pointing to.
25872 	X	the direction is given by x y and the arrow should obviously point to that.
25873 	X	asperger syndroom een persoonlijke benadering http people nl linux org gerrit het zijn tijden om je zelf met politiek te bemoeien http www sp nl.
25874 	X	its unfair to ascribe that position to eric or to other than a small minority of posters that i can.
25875 	X	my sense of the many hundreds of posts is that most of the people who dont care what the construct looks like also dont care much if it gets in or.
25876 	X	the trouble is beauty is largely subjective and in this context generally simply boils down to a opinion about personal.
25877 	X	that were said i count myself both in the beauty party and the pro.
25878 	X	i intend to vote against any proposal that is the least bit.
25879 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
25880 	X	andrew koenig ark at research att com writes.
25881 	X	that particular example can be taken care of with.
25882 	X	y sqrt max z for z in x.
25883 	X	erik max francis max at alcyone com wrote in message news.
25884 	X	this would me acceptable to me even if it is not the most elegant proposal i have.
25885 	X	too many parenthesis and colons for my taste but it has the advantage of requiring no new notation at.
25886 	X	carlos ribeiro cribeiro at mail inet com br wrote in message news.
25887 	X	i think the people against the ternary operator should write down a summary of their objections wherea the people favorable to the ternary operator should decide which form they.
25888 	X	i would like people to be able to choose their field between different categories such as.
25889 	X	i am against in any case i dont care i am neutral i am pro only if this or that form is used i am fine with guidos proposal.
25890 	X	i would like to see a statistics to have an idea of the feelings of the.
25891 	X	i can not judge from the current threads the.
25892 	X	maybe somebody could set up a web page to perform the.
25893 	X	then if enough people are pro which i am not sure will be the case we should choose which proposal is the good one for everybody and i am not sure we can reach an agreement.
25894 	X	michael hudson mwh at python net writes.
25895 	X	think of how you actually call get arg.
25896 	X	in order to read that line you have to actually go check the definition of get.
25897 	X	the conditional expression maybe simplifies your code not by shortening the get arg function but by eliminating.
25898 	X	a self arg if self arg is not none else.
25899 	X	maybe that syntax is clumsy but it still seems preferable to having to scroll to some method definition several screens away in order to find a line function definition that needs lines of documentation to explain what its.
25900 	X	note that i do not say that we should change and and or ignore my words about future deprecation.
25901 	X	instead we should not abuse them in a way that has nothing to do with an and like the a and b or c tricks or the proposed.
25902 	X	these are tricks to make them behave.
25903 	X	i only propose to make these uses explicit by using then and else.
25904 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
25905 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
25906 	X	at the moment i consider this the best proposal so far and would probably vote for.
25907 	X	it seems little known that guido implemented conditional expressions for python about two years ago.
25908 	X	one of his patch comments there.
25909 	X	its hairier than expected because im trying to require you to put parentheses around it in some cases but not in.
25910 	X	go look at perl and look at some perl code and then look at some other perl code by a different.
25911 	X	if you still dont understand the statement then i guess our opinions differ and thats.
25912 	X	i know that what hes talking about is true though because i deal with it every.
25913 	X	im working on a code base with four or five other perl programmers and i can tell with absolute certainty exactly who wrote what part because the coding styles are that much.
25914 	X	not comment styles not control flow styles actual line for line.
25915 	X	only one guy uses the implicit assignment of pieces of a regex match to for instance to name one thing that drives me nuts every time i see.
25916 	X	because you cant go searching for where was assigned and it can propogate a surprising distance from the original regex if code is carefully oh and theres no good way to search for the last regex either unless youre lucky enough for the previous programmer to always stick to the delimiter which fortunately is another marker of that.
25917 	X	no is preferred because gvr did a good job designing.
25918 	X	it reads like a natural language sentence which is nice but wont scale to more complex.
25919 	X	is intended to be understood through familiarity with python however your test subjects are very little familiar with.
25920 	X	i wonder how they would resolve the ambiguity in a b a if a else.
25921 	X	id expect that reading it as a statement in natural language they would come up with b and the possibility of a different interpretation where b would not even cross their.
25922 	X	i presume he means something like with s as the sequence d as the string delimiter.
25923 	X	problem is type unification came long after string methods so that wouldnt have been.
25924 	X	if you really find the join method offensive you can always just use the string module.
25925 	X	the problem is that by logical extension now every sequence including user defined ones has to implement a join method which turns things on their head since joining is a string specific operation not a sequence specific.
25926 	X	it should be on the onus of strings to implement it not every other sequence in.
25927 	X	to me having the join string method seemed the only sensible way to do it so i consider it highly.
25928 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote he who knows how to be poor knows.
25929 	X	jules michelet rules for buh http www alcyone com max projects cards buh html the official rules to the betting card game.
25930 	X	you assume i wasnt just writing an alternative to s startswith spam.
25931 	X	yeah i saw that problem and im really really happy that spam in s is supported in.
25932 	X	who says i dont like change.
25933 	X	it sounds at this point that it is not likely that this is the way the vote will be taken it sounds more like people are settling on a single vote with all the proposals as well as an additional entry for no change and an obvious choice for abstain.
25934 	X	whats going back and forth now is the precise way to do that with a single choice a ranking approval voting where you effectively vote yes no to each one or aahz suggested form where you vote yes no abstain to each one.
25935 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote you cannot step into the same river.
25936 	X	cratylus python chess module http www alcyone com pyos chess a chess game adjudicator in.
25937 	X	w and x and y else z.
25938 	X	w and x and y else z else a.
25939 	X	christian tismer mailto tismer at tismer com mission impossible oftware have a break.
25940 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
25941 	X	that its justifiable to turn python into a pseudo c pseudo perl kind of language just because at least of us know them.
25942 	X	python has a beautiful syntax utterly wonderful to read in that its just like skimming pseudo code i believe it would be terrible to lose that just because its easier to type.
25943 	X	instead of stopping what youre doing and thinking long and hard on what kind of syntax to use for this particular language a new construct which wont contaminate the current syntax with imported idioms that arent truly part of the python we.
25944 	X	it should be an extension of python not an import from c perl.
25945 	X	sometimes we gotta stop what were doing and think long and hard on a problem in order to find the best.
25946 	X	i think that finding the correct syntax for pythons ternary operator is one of those problems because its use is going to spread veru fast so theres no taking it back nor changing it to something else.
25947 	X	i dont envy guido one bit hes got his work cut out for.
25948 	X	so maybe he should sit on whats come out of this little experiment and think for a while the best implementation is gonna come to.
25949 	X	in the end i hope its some wordy scheme and not one based on line noise like.
25950 	X	because python is a wordy language and the ternary operator is more like a compact if then else than a or so imo it should follow that.
25951 	X	sean ross sross at connectmail carleton ca wrote in message news.
25952 	X	i think somebody pointed out that.
25953 	X	could be implemented without making when a reserved keyword and i would prefer when to if.
25954 	X	evan simpson evan at am com wrote in message news.
25955 	X	cannot in the sense such a confusion for the reader not for the grammar cannot be allowed in python which is intended to be a language easy to read.
25956 	X	the problem is not with this specific example but with the concept that statements can be magically transformed in expressions with a simple.
25957 	X	grouping expressions is not the same that converting statement to.
25958 	X	is wrong now since a b is a.
25959 	X	it would be inconsistent that in the if case parens convert statements in expressions and not in other cases like.
25960 	X	people would ask this to return the last computed value i think ruby has something similar.
25961 	X	not because the fact that tuple are denoted by parens is decided from the beginning more that years ago and there is no possibility of.
25962 	X	besides tuple are expressions not statements i have nothing against parens in.
25963 	X	if there is a precedent in the topic of converting statement to expressions how to stop people asking for other conversions.
25964 	X	who is going to use then as a variable name i checked that in the full python library lines then is never used as as an.
25965 	X	he could well be made a reserved keyword if you prefer.
25966 	X	i think the harm of having a then keyword is much much smaller than the harm of having statement expression.
25967 	X	holger i have seen worse effects of buggy code than.
25968 	X	holger besides in a pep world you would certainly find the like of.
25969 	X	holger self stream writeln ran d test s in.
25970 	X	holger getting things messed up with ternary ops whichever is easy.
25971 	X	holger that doesnt imply we have to introduce a new.
25972 	X	thats part of the reason i now favor.
25973 	X	self stream writeln ran d test s in.
25974 	X	because it doesnt look like anything.
25975 	X	anyway the point that i consider important is that python programmers including the authors of the python library consider an if then else construct to be useful enough that they fake.
25976 	X	moreover they do so in ways that are somtimes just plain.
25977 	X	i think that if having a way to write an if then else expression is a bad idea then the and or idiom is an even worse idea because its.
25978 	X	really six years ago i developed apl interpreter just for fun under.
25979 	X	it was not complete one but i had added advanced features i needed to it mainly some new indexing i needed for my math diploma work.
25980 	X	python is a crystal of glass practicality beats purity.
25981 	X	and glass is really a liquid guido started with.
25982 	X	so probably python direction is toward.
25983 	X	sincerely yours roman suzi rnd at onego ru my ai powered by linux redhat.
25984 	X	id vote for indexerror unless we permit an else.
25985 	X	aahz aahz at pythoncraft com http www pythoncraft com.
25986 	X	register for pycon now http www python org pycon reg html.
25987 	X	just to inject a bit of history this is fortrans computed goto wrapped up as an.
25988 	X	i think this is a lot more than just.
25989 	X	to those not familiar with the idiom c and x or y is downright.
25990 	X	he may prefer it because it is a few characters shorter and only a few at that but it is only clear if you already know the.
25991 	X	furthermore as is said over and over again its broken if x is false.
25992 	X	the latter is more explicit and is immediately understandable by extension to anyone who has seen the else statement in the language which is well everyone.
25993 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote she glanced at her watch it was.
25994 	X	james clavell bosskey net quake iii arena http www bosskey net qa a personal guide to quake iii.
25995 	X	stephen horne intentionally at blank co uk wrote in message news huvrvsbcvgtrhqmhvgvelkvigh at ax.
25996 	X	i was wondering about this too but i cant think of any operator other than conditional selection that requires short circuit.
25997 	X	that said the chaining of conditional selection operations qualifies as a higher than ternary.
25998 	X	im still of the opinion that an operator akin to the c ternary operator which is available in all of the commonly used and taught languages c c java c javascript is the way to.
25999 	X	the bdfl shot down the straight parentheses not required version in the.
26000 	X	perhaps requiring the parentheses that i would have used anyway will mend.
26001 	X	just trying to force my preferred style down everybodys throat ly yrs anders.
26002 	X	the pgen program evidently cannot produce james unambigous tables from the if else expression form without james surrounding.
26003 	X	i already posted a grammar change that does.
26004 	X	andrew koenig ark at research att com http www research att com info ark.
26005 	X	paul paterson hamonlypaulpaterson at houston rr com wrote in message news.
26006 	X	oops this doesnt work of course since might mean less than minus.
26007 	X	trueval else falseval if condition false when condition true then trueval else falseval.
26008 	X	no need to refute an opinion by taking it to an extreme and making it absurd reduction to absurdum.
26009 	X	after all norman isnt talking about eliminating operators but expressing his opinion on why he believes that the conditional ternary operator should be in the form true if cond else false instead of cond.
26010 	X	better argue the benefits of cond.
26011 	X	true false instead of absurdizing true if cond else false.
26012 	X	as i said on another pep related thread wordy syntax constructions are more pythonic because they read like pseudo code similar to normal python.
26013 	X	in my opinion using parens just for clarity.
26014 	X	from deja at alandaniels com alan daniels wrote in message news.
26015 	X	this is equivalent to add a new keyword punctuation to python in this case.
26016 	X	x when y yep else nope.
26017 	X	or even especially for use in list comprehension.
26018 	X	x yep when y else nope.
26019 	X	for some reason my mind has some problem with if that i associate to a statement not to an.
26020 	X	anyway i am on the conditional operator but i would prefer a new keyword punctuation instead of.
26021 	X	holger i think its insane to make up such special cases just to get holger some syntax.
26022 	X	for starters you would break quixote web holger application framework because they compile python so that an holger expression as a statement gets send to some.
26023 	X	breaking holger uniformity needs to be avoided as much as.
26024 	X	holger especially if the real need for the whole construct is holger.
26025 	X	its a question of what is.
26026 	X	im not proposing to break anything because im not proposing to disallow any code that is presently.
26027 	X	when i have a concrete grammar proposal which shouldnt be long youll see what i.
26028 	X	and then other variations with this same edge case.
26029 	X	sure its ugly but this really is a serious edge.
26030 	X	i cant recall ever seeing the conditional operator were used simply in an if statement a la.
26031 	X	so i really dont know how much usefulness this is example of how ugly an edge case can get.
26032 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote men live by forgetting women live on.
26033 	X	t s eliot get your own customized newsfeed online in realtime for free.
26034 	X	this was exactly what i hoped for when i asked avoiding the special cased index and constructing the list of all columns or just with one item from the.
26035 	X	thus you adapt the cocoa semantic right where you invoked it and doesnt let it interfere with python.
26036 	X	a would you have reimplemented it with pep syntax.
26037 	X	b it doesnt exactly disprove my point that ternary operators can often be avoided for great justice.
26038 	X	whats wrong with it looking like a function if the docs specify it as a special form.
26039 	X	cond test expr test expr test expr true e could work too which could be built from if test then else.
26040 	X	you could even do the cond in python once you have a syntax and expander system just hide the system from the user so they dont change the.
26041 	X	this is a concise ternary based on a larger concept from lisp via paul moore with my twist.
26042 	X	the concept was c v c v c v true vdefault i evaluate cis until you find one thats true then evaluate its companion v my twist is to drop the brackets and supstitute instead of.
26043 	X	thus c v c v c v true vdefault.
26044 	X	with a single condition you have c v true vdefault.
26045 	X	and by making the final condition introducer and its condition true optional you get c v vdefault.
26046 	X	which expresses the ternary nicely without.
26047 	X	so e in x and y you want the internals of and not to call x nonzero instead you want it to proceed as if it had been called and returned.
26048 	X	if this is so the braces do not change the meaning of the expression they enclose but the meaning of any logical operator that has the braced expression as an.
26049 	X	if this is so i continue to feel that the braces give a very misleading impression of operating on or containing the enclosed.
26050 	X	there are instances in mathematics where contextual definitions of this sort are used effectively russells theory of descriptions is the one that comes to mind though if memory serves he was inspired by something in differential.
26051 	X	but i cant think of a good use of such things in programming.
26052 	X	certainly not in ones with a recursive model of expression.
26053 	X	steven taschuk staschuk at telusplanet net o pleiosaur.
26054 	X	christian tismer tismer at tismer com wrote in message news.
26055 	X	i prefer then also but do not know how much negative guido attaches to new keyword or.
26056 	X	i also do not know what difference it would make in.
26057 	X	i find either more acceptible than all other.
26058 	X	please get your attributions right and take the time to understand my argument before arguing against a point i didnt.
26059 	X	dale strickland clark riverhall systems ltd.
26060 	X	pp christian tismer tismer at tismer com wrote in message pp news.
26061 	X	pp i still like the minimalism of.
26062 	X	pp x or y if c.
26063 	X	pp val sqrt x or imaginary if x.
26064 	X	but as but would be a new keyword except may be better.
26065 	X	val sqrt x except imaginary if x.
26066 	X	still i dont like it as the order isnt.
26067 	X	when there is a normal case and an exceptional case ok but if the true and false cases are more or less equally ocurring the if should be.
26068 	X	piet van oostrum piet at cs uu nl private email p van oostrum at hccnet nl.
26069 	X	in article at nwrddc gnilink net.
26070 	X	im not sure its worth worrying about particularly if we use yes no.
26071 	X	remember that this is a poll not a strict vote and guido will have full access to the raw.
26072 	X	i believe that most people who are not strongly opposed to any form of conditional expression will vote abstain on no change.
26073 	X	aahz aahz at pythoncraft com http www pythoncraft com.
26074 	X	register for pycon now http www python org pycon reg html.
26075 	X	because the extra punctuation calls out more clearly.
26076 	X	also i like the meaning or.
26077 	X	aahz aahz at pythoncraft com http www pythoncraft com.
26078 	X	register for pycon now http www python org pycon reg html.
26079 	X	your claim was that side effects dont enter into the picture i disagree.
26080 	X	saying your program is incorrect doesnt tell me.
26081 	X	gh the above defines two binary operators then and else and a ternary gh operator else.
26082 	X	the question which occurred to me is since gh the ternary operator is formed by what looks like two binary gh operators can the action of the ternary operator be defined in terms gh of the actions of the two binary.
26083 	X	in other words does the gh expression.
26084 	X	gh a then b else c the ternary operator.
26085 	X	gh a then b else c two binary operators.
26086 	X	gh a then b else c two binary operators.
26087 	X	gh the answer is no all three expressions evaluate to different gh.
26088 	X	gh now we are used to disambiguating expressions with multiple binary gh operators by considering the precedence and left or right gh associativity of the operators.
26089 	X	that is a b c evaluates as gh a b c and a b c evaluates as a b c.
26090 	X	however in this gh else expression something which looks like and could be gh legitimately parsed as two binary operations in fact cannot be gh disambiguated by either application of parentheses and must be treated gh as a ternary.
26091 	X	you can define them as binary operators if you use a little different.
26092 	X	supposing then has higher precedence then else parentheses added for clarity.
26093 	X	def then ab if a return b else return false.
26094 	X	of course you must imagine the.
26095 	X	even with else having higher precedence then then it is possible but you will loose laziness.
26096 	X	def then ab return b not a.
26097 	X	and the laziness could even be added if the compiler would do something like.
26098 	X	def then ab return b not a.
26099 	X	piet van oostrum piet at cs uu nl private email p van oostrum at hccnet nl.
26100 	X	what about just indexing a list of tuples.
26101 	X	i think that the target audience for c is different from the target audience for.
26102 	X	most c programmers i suspect are professional programmers whose brains have been trained to parse complex.
26103 	X	in fact i only posted it because i thought it would be nice to throw something other than pep for discussion here and also because even knowing that the idea seems to be weird it still may be valid in some situations for example when the data set is so large as to make a deterministic algorithm not.
26104 	X	depending on the data set the risk may be very high or very small.
26105 	X	and while the math for a full analysis seems to be hairy a simple analysis may still be.
26106 	X	ill take the risk to burn my tongue here im no statiscian and statistics is known to be a perversely cruel form of.
26107 	X	but it seems to me that if we have a sufficiently big collection of urls and if we have a reasonably big window for the short term cache then the filter will do ok in most situations kind of law of big numbers.
26108 	X	the most complicated scenario seems to be when one have relatively few urls in the original log file with a short memory window then it may happen that a good candidate for the top n is discarded because the short term cache was full starting from zero when it appears.
26109 	X	but i think that for real files with lots of data this is not the most probable case anyway thats why i feel that this approach may be.
26110 	X	thats why i had originally discarded this idea from my previous.
26111 	X	i just brought it up again because it was very interesting and it didnt deserved to die without some.
26112 	X	at least we can spend a little time far from pep.
26113 	X	carlos ribeiro cribeiro at mail inet com br.
26114 	X	forgot an important case function calls f ab then c else de.
26115 	X	i gather that would be equivalent to f a b then c else d e.
26116 	X	aahz aahz at pythoncraft com http www pythoncraft com.
26117 	X	register for pycon now http www python org pycon reg html.
26118 	X	actually the meaning of moot were used here was of no practical importance irrelevant meaning that while it could be debated the debate would serve no purpose since the bdfl has already made a firm.
26119 	X	robin munn rmunn at pobox com http www rmunn com pgp key id xafb ff cffb a f d acfd afb.
26120 	X	andrew koenig ark at research att com ha scritto nel messaggio news yukcooli fsf at europa research att.
26121 	X	i could live with something of the form.
26122 	X	cond keyw to pick true expr else false expr.
26123 	X	skip montanaro skip at pobox com wrote in message news.
26124 	X	i find it difficult to imagine a situation where the short circuit behavior actually.
26125 	X	theoretically an ifelse function doesnt do the same thing but practically it does whenever ive used ternary ops there werent any side effects to evaluating both.
26126 	X	can someone give me a real world example of its usefulness.
26127 	X	alan daniels from usenet at alandaniels com writes.
26128 	X	i dont think thats the whole.
26129 	X	yes so you can pass it as a function arg or.
26130 	X	when youre done explaining metaclasses to new users tell me if you still think conditional expressions will confuse them too.
26131 	X	you might have to use backslashes to escape the ends of the lines just like you sometimes have to do in long statements.
26132 	X	id still like to start with an algorithm i know how to analyze for example looking at each incoming url with a probability of if the dataset is times as large as i can.
26133 	X	i know just enough statistics to have ended up as the target of a friendly but firm rebuke in an article in american statistician which explained how i had misanalyzed error estimators in my articles on the bridge world ending up with error estimators over times larger than warranted i e my results were much more precise than i thought.
26134 	X	my amateur statistician handwaving was enough to fool the editor a mathematician and an old hand at statistics but still not a full time but fortunately there are professional statisticians in the.
26135 	X	now id rather not give american statistician material for another article pointing out how subtly one can trip oneself up with this stuff.
26136 	X	if your short term cache is large enough no problem but thats just begging the.
26137 	X	real data sets are surprising more often than not if i ever met one that wasnt then id be surprised.
26138 	X	bunching of url appearances in dense bursts in particular would not surprise me at all and it can cause just the issue you.
26139 	X	thats why i want to sample the incoming data if theres too much to process them all sampling theory i know about its right there in the statistics for dummies.
26140 	X	and the sampling must be at random not systematically every tenth incoming url say else you run into other potential anomalies if there are repetitive waves in the incoming data due to underlying processes you dont know.
26141 	X	if i can afford two passes on the data timewise ill do a first sampling pass to identify candidates then another one to count the exact number of occurrences of each.
26142 	X	its still possible that a candidate worth of inclusion in the top has dropped out but i can quantify the risk and it does not depend on subtle dynamics of the dataset that i can neither rule out nor fully.
26143 	X	if two passes are prohibitively expensive ill use the counts from the sampling not happily but again i can quantify the risks of errors if i get my maths.
26144 	X	it is conceivable that digests while helping cant help by enough when the incoming dataset is truly huge for.
26145 	X	of course auxiliary storage can also help in such.
26146 	X	i wrote up an elegant generators based mergesort using auxiliary external storage http www strakt com docs eup itgen alex pdf part of a tutorial on iterators and generators it could easily be adapted to perform counting of occurrences based on some external storage.
26147 	X	but heres a simpler tapes idea.
26148 	X	say you have enough memory to process internally a million urls at a time and unlimited external storage it must be sequentially accessible two infinite tapes will do just fine.
26149 	X	slurp in a million urls sort them emit a first file with counts and urls sorted in url.
26150 	X	now for n times when the incoming dataset has n million urls you do slurp in a million urls and sort them rewind tape a for reading tape b for over writing merge records from tape a and from the sorted list in memory writing old new or updated records as needed to keep things sorted by url onto tape b logically swap the roles of tapes a and b and repeat these steps if there are more incoming.
26151 	X	you do these steps o len incoming data times and they take time proportional to o number different urls in the incoming data each time you do them so if the number of different urls is proportional to the length of incoming data its o input length squared no magic.
26152 	X	still its simple deterministic and has good proportionality constants so the situation may not be truly.
26153 	X	andrew koenig ark at research att com ha scritto nel messaggio news yudmbw fsf at europa research att.
26154 	X	if you repeat this argument another time im gonna.
26155 	X	if we could accurately predict the future life would be so.
26156 	X	then too the join syntax is but one small stumbling block in the overall string methods change just a nit really which suggests says the change overall was a net step.
26157 	X	thats why i actually like the idea that we have a free for all discussion and then ultimately whatever we come up with gets vetted by guido and perhaps a few trusted advisors.
26158 	X	on the one hand i sincerely believe the old chinese saying three tailors can outwit the smartest general so i am suspicious of guido were able to make the right decision in every single case his spectacular track record.
26159 	X	but otoh i am even more fearful that a committee especially a committee of the whole may do more damage than.
26160 	X	its unfortunate that guido himself is.
26161 	X	also its kind of awkward that the pep is sitting out there without a real.
26162 	X	my comments about beauty were purely subjective notwithstanding perl is virtually the antithesis of beauty.
26163 	X	furthermore i believe there are many objective arguments why perl is ugly.
26164 	X	i know people who were in that development community early on and larry walls claims notwithstanding theyre a bunch of hackers without any language design.
26165 	X	they started hacking iirc c shell and some other utilities and never looked.
26166 	X	those fools actually revel in all the cutsie punctuation puns and other line noise that is very hard for normal people to learn use and later to.
26167 	X	the pervasive fundamental notion of scalar vector context is profoundly brain.
26168 	X	in fact perl clearly is so incredibly bad that its really an amazing to me that anybody still uses it given better alternatives like.
26169 	X	one thing thats great about python is its proof that you dont need all the perl gobbledygook to get the.
26170 	X	even if we disagree on some points please dont mistake me for someone who doesnt care about the elegance of the language or who simply wants to glom on features for no good.
26171 	X	even if you yourself happen to think that theres no good reason o.
26172 	X	i certainly dont doubt your or most others sincerity on this.
26173 	X	in the extreme i will stipulate that this is a valid.
26174 	X	if major non backwards compatible changes were made say forcing people to rewrite their code that would be.
26175 	X	e say we decide to put in front of all.
26176 	X	i frankly cant think of more a realistic example but ill stipulate there may be some hypothetical major future mod that would force people to run.
26177 	X	where i have a problem is that i think many pythonistas exaggerate this theoretical threat way out of.
26178 	X	while you are entitled to oppose pep on nothing more a whim its simply mistaken to imagine or to argue that such a trivial change in the scheme of things would send people away in.
26179 	X	the language is great and its hard to imagine small upward compatible changes at the margin having any impact at all to its.
26180 	X	too python and its development process is so far removed from perl that i think its really overly paranoid to fear that python could ever possibly fall anywhere near that.
26181 	X	good rhetoric but not a realistic.
26182 	X	on the other hand i know a number of developers who originally learned perl and like it for the same reasons people like python because its so much more powerful than alternatives like c or c.
26183 	X	beauty aside python and perl are fairly similar in overall.
26184 	X	i try to convince them that python is better but python is more beautiful does not outweigh its something new and substantial to learn for unspecified gain.
26185 	X	for that audience the absence of trivial familiar and widely understood constructs like cond if is absurd and actually constitute a major barrier to adopting python in the first.
26186 	X	i know there are a lot of c haters on the list but like it or not c does happen to be one of the more widely known and used languages.
26187 	X	its really not a bad model for some small things like.
26188 	X	so while i respect and agree with your theoretical concern i think many pythonistas are overly paranoid and are wrong to apply it in this and certain other.
26189 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
26190 	X	if were going to add another keyboard id prefer the full.
26191 	X	if p then x else y.
26192 	X	syntax perhaps with required parenthesization im ambivalent on that latter point.
26193 	X	so far only two objections have struct any kind of chord with me despite were staunchly in favor of a conditional operator in whatever form i can get it.
26194 	X	the proposed syntax overrides the meaning of if.
26195 	X	the proposed x if p else y syntax reads neither left to right nor right to.
26196 	X	the first seems to me a bit of a red herring but i see the.
26197 	X	the replacement if if with when does indeed address this concern but it does seem rather a secondary objection since the use of if is already overloaded e in list.
26198 	X	so instead of it polluting our precious if theres already.
26199 	X	the second objection is really the only one i can sympathize with which is why im not for the proposal as it stands even though im for the addition of some form of a conditional operator ill takes what i can gets.
26200 	X	in pure name collision likelihood it seems more likely that people will have preexisting code using the name when rather than code using the name.
26201 	X	so it seems to me that the real clincher is if you want to let in a new keyword then id say go with then and admit the if p then x else y syntax killing two birds with one.
26202 	X	whatever the syntax the three expressions should be separated by something concrete and not a.
26203 	X	the when p x else y and worse yet when p x else y syntaxes are too.
26204 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote men live by forgetting women live on.
26205 	X	t s eliot get your own customized newsfeed online in realtime for free.
26206 	X	i agree with your arguments but not your.
26207 	X	the thing is conditional expressions support a functional coding style which is a good.
26208 	X	much as i love your very funny and very powerful quality of vandalism argument it doesnt apply.
26209 	X	choose a unicode character and require that people who want to use the operator must use unicode aware.
26210 	X	andrew koenig schreef op zondag februari om.
26211 	X	i disagree because maybe both x and y are in all cases a bad way to write it so that its not necessary to enlarge the language so that x can be written as y if z is still.
26212 	X	asperger syndroom een persoonlijke benadering http people nl linux org gerrit het zijn tijden om je zelf met politiek te bemoeien http www sp nl.
26213 	X	i believe it is were proposed that in the former the list would be special and evaluated.
26214 	X	its t t union t t.
26215 	X	andrew koenig ark at research att com http www research att com info ark.
26216 	X	thats what you replied to by saying how non standard lisp.
26217 	X	the precedent here is the precedent for having pythonic and or in the first place not for adding them now since as you say we already have.
26218 	X	eriks article did not imply that lisp defines a standard others have to.
26219 	X	i cannot imagine why you think it.
26220 	X	he explicitly said that theres no such thing as the standard versions and id have thought the for example was a dead giveaway that he wasnt claiming that everyone has to do what lisp.
26221 	X	but no one was proposing in the least that python should follow lisp syntax.
26222 	X	actually thats not particularly why lisp syntax is the way it is and rightly or wrongly many lisp programmers consider lisps eccentric syntax one of its greatest strengths because it makes lisps macro system certainly one of its greatest strengths.
26223 	X	but this is a digression within a.
26224 	X	no one uses anything remotely like the and or idiom in lisp because it has proper conditional.
26225 	X	what exactly are you saying made sense in lisp but can be improved upon in python.
26226 	X	not the selective and and or themselves since you say youd never suggest taking them.
26227 	X	not the and or trick used to mimic a conditional operator in python since it doesnt make the slightest sense in.
26228 	X	using the word standard is itself a value.
26229 	X	im not sure what counts as a non internet related role nor why what dominates in such roles is particularly.
26230 	X	i honestly have no idea why this is supposed to be.
26231 	X	you didnt think did you that erik was saying that lisp uses c and x or y to do conditionals.
26232 	X	im quite sure he wasnt but if by some chance he was then he was completely.
26233 	X	did you think i was arguing in favour of c and x or y or against adding a conditional operator to python.
26234 	X	as it happens both erik and i are in favour of adding.
26235 	X	im saying that smalltalks boolean operators are like pythons in the sense thats relevant.
26236 	X	to method names or to what common lisp calls generic functions.
26237 	X	when you send an instance of foo the bar message it responds by executing the foo bar.
26238 	X	snip stephens observation that smalltalk and javascript both have proper conditional expressions.
26239 	X	i dont know what i said that makes you think id disagree with that but i certainly.
26240 	X	python should have conditional expressions and c and x or y is an ugly workaround for their.
26241 	X	whatever lack of readability lisp suffers is due to factors that have nothing whatever to do with this.
26242 	X	no ones been proposing to structure python programs with nested parentheses instead of nested.
26243 	X	one thing that makes lisp hard to read especially for newcomers is its tendency to use positional information to distinguish between the different parts of a.
26244 	X	thus you say if c x y instead of if c then x else y dolist i items stuff instead of dolist for i in items do stuff and so.
26245 	X	that may have been a bad decision in lisp it would certainly be bad to copy it anywhere in.
26246 	X	which is why i think for instance that proposals like if c xy are.
26247 	X	it is common to see judgement in others words and pure objective fact in ones.
26248 	X	the way it looks to me is terry made a value judgement objecting to pythons and or because theyre not the standard versions erik disputed the notion of standard were used by terry and observed that in any case theres precedent for them citing lisp as one example you said but lisp is non standard and unreadable and unintuitive with i thought at least some implication that following anything lisp has done is likely to be.
26249 	X	your description of lisp used the words quirky doesnt even fit obsessed infuriatingly stupid.
26250 	X	are you quite sure you were only interested in providing the objective facts.
26251 	X	gareth mccaughan gareth mccaughan at pobox com sig under construc.
26252 	X	warning most of this is about lisp rather than about.
26253 	X	perhaps we should take it to e.
26254 	X	more precisely it allows you to program in oo style like c and python its a multiparadigm language and doesnt force oo on those who dont want.
26255 	X	early versions of common lisp didnt include clos the common lisp object system.
26256 	X	xlisp is a subset of early cl plus an object system not clos.
26257 	X	i didnt think you were attacking.
26258 	X	i thought you were saying silly things about.
26259 	X	such as for instance that the statement pythons conditional operations are non standard because they dont always return booleans isnt weakened by the fact that lisps corresponding operations dont always return booleans either because lisp isnt standard.
26260 	X	im not sure where adding comes.
26261 	X	terry reedy said that pythons term standard versions and observed that pythons and or operators behave just like lisps for example and lisp is around a very long time.
26262 	X	and ive noted elsewhere so no need to followup on this thread that from that snippet it appear that the person who wrote this has more exprience in using other languages hence the strange use of writeln than python so that this is perhaps not the best indicator of an apropriate python.
26263 	X	on the other hand it suggests that an if else expression would make for fewer mistakes caused by people with experience in if else from other.
26264 	X	my other comments stand so i am now convinced that a true if else short circuiting operator is not needed only about once every lines or so while an iff like builtin function is much more likely to be appropriate for most.
26265 	X	i am about for iff and about for the if else.
26266 	X	why do you consider this to be a problem.
26267 	X	function calls and defs require parens tuple parens are optional class bases require.
26268 	X	where is the consistency that is were violated and what cost do you imagine that breaking it would impose.
26269 	X	do you also hate f x to pass a one tuple to a function.
26270 	X	this isnt too bad if it can be made to.
26271 	X	having a magical non keyword in the middle of an expression is hardly consistent with the rest of python.
26272 	X	between that and chaining we can construct.
26273 	X	print now or then then then then then else now else never.
26274 	X	in the spirit of your first objection above we also have.
26275 	X	c then print x else print y.
26276 	X	this seems like a very elegant and pythonic.
26277 	X	it does however suffer from two problems.
26278 	X	as such it could not be an alternative for pep which specifies short circuiting.
26279 	X	cant use if as a method.
26280 	X	i would seriously encourage you to write up a pep for this.
26281 	X	this is the only ternary proposal i have seen yet that i would.
26282 	X	there are two aspects to my proposed.
26283 	X	first of all guido said in pep if this pep is approved with a clear majority it will be implemented in python.
26284 	X	to me clear majority implies supermajority but guido will ultimately make that.
26285 	X	im just going to publish the.
26286 	X	secondly many people in favor of conditional expressions hate one or more of the.
26287 	X	the two stage approach ameliorates guidos threat to forever banish conditional expressions by permitting people to vote in favor of conditional expressions in.
26288 	X	laura creighton in private e mail suggested that i ought to reverse the procedure and hold the vote on which flavor.
26289 	X	two reasons why not its more work for me if theres insufficient interest across the community in general and because i believe a passing vote would mobilize more people in the python community to think seriously about which form they.
26290 	X	i think that on balance im bending over backwards to be fair to both.
26291 	X	aahz aahz at pythoncraft com http www pythoncraft com.
26292 	X	register for pycon now http www python org pycon reg html.
26293 	X	erik max francis max at alcyone com wrote in message news.
26294 	X	since does then i presume that does.
26295 	X	many of these forms have had elif versions also.
26296 	X	i dont have a list but i think it applies to just about all of the ones that use word symbols and mostly not to the ones that use special.
26297 	X	claird at lairds com cameron laird writes.
26298 	X	anyone want to claim that this is preferable for some if d month sy d year else sy d year.
26299 	X	i cringe at the duplication of d year but ive been teaching scheme recently and noticed that students seem very comfortable saying if this is the case then the answer is this instead of always do this and then if whatever modify the.
26300 	X	im not sure how i feel about.
26301 	X	it introduces a special form that looks like a function call something totally unprecedented in.
26302 	X	in fact the lack of special forms is one of pythons strengths in my opinion when i see code that looks like a function call i know exactly whats going on and what to.
26303 	X	add this and that assurance goes out the.
26304 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote have you ever loved somebody who didnt know zhane polly wanna cracka.
26305 	X	http www pollywannacracka com the internet resource for interracial.
26306 	X	quoth laura creighton lac at strakt com andrew koenig laura this other project you have where a ternary would be very laura useful would that be the icon like snoball like parser you laura mentioned earlier.
26307 	X	im hoping to be able to give a talk on the subject at the accu.
26308 	X	well no wonder you are hot for this.
26309 	X	parsing a language where each line has a true false branch condition which i assume is what you are doing is an absolute natural for such a.
26310 	X	he only posted about messages over the weekend which means his ardor must have flagged at times in favor of meals and.
26311 	X	donn cave donn at u washington edu.
26312 	X	erik max francis max at alcyone com ha scritto nel messaggio news ed dbb at alcyone.
26313 	X	the context was editor accident hk.
26314 	X	personally i would prefer an exception thats what i would expect pythonically just as if the lhs was indexing the.
26315 	X	erik max francis max at alcyone com writes.
26316 	X	i dont remember ever seeing then as a variable name in any real program but if a keyword is so objectionable and is too c like then another symbol i favor can be used c x else y.
26317 	X	alex martelli aleax at aleax it writes.
26318 	X	how about changing the selection operator instead of the paren type.
26319 	X	selector when when when selector whentrue whenfalse.
26320 	X	specious arguments that short circuiting is not needed or seldom needed are thinly disguised restatements that cond if is not.
26321 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
26322 	X	different expressions are better in different contexts the and version clearly works better as an if condition but i think the ternary version works better in an.
26323 	X	if a programmer is intent on using a ternary in an if id at least prefer something like your example above that stands out as were unstylish and in need of.
26324 	X	consider the alternative a programmer intending a ternary who writes it as if hasattr obj method and obj method or some default value it would be much harder to notice that this is buggy in the case where obj method returns false but some default value is true because of the naturality of finding ands and ors in an if.
26325 	X	david eppstein uc irvine of information computer science eppstein at ics uci edu http www ics uci edu eppstein.
26326 	X	funny that you off topically mention.
26327 	X	recently i couldnt hold myself from drawing some parallels between heated debates on pep and the ones over here in europe old and new regarding going to dubious prevention.
26328 	X	so far at least the pep discussions have managed to avoid needless escalation which i highly.
26329 	X	both debates focus on a lot of details and there are a lot of good and bad.
26330 	X	but imho both are distracting from the the real.
26331 	X	plenty of bugs peps and python developments to deal with and plenty of immediate problems with india pakistan israel paelestina north korea and afghanistan where hardly even kabul is under control.
26332 	X	its not obvious how pep and the iraqi crisis deserve this much.
26333 	X	at least there are not ten thousands of people dying from pep i.
26334 	X	in article qcavihpcbifteinfuqp at ax com.
26335 	X	and i think youd be more comfortable with.
26336 	X	so where does namecalling get us.
26337 	X	please try to stick with argument and.
26338 	X	aahz aahz at pythoncraft com http www pythoncraft com.
26339 	X	register for pycon now http www python org pycon reg html.
26340 	X	i dont mind x if c else y in which case you could have x if c else y for x y in pairs though i think parentheses often look like they might be optional when in this case we might be proposing that they be.
26341 	X	and then there was the other idea i threw out namely x if c else y which would allow for x if c else y for xy in pairs this would certainly distinguish the if expression from a list comprehension and it would catch a persons attention more forcefully than regular.
26342 	X	still i dont much care for.
26343 	X	i think regular parentheses or none are more likely to be.
26344 	X	and then theres always when c x else y for x y in pairs sean.
26345 	X	there are other syntaxes that id be happy with e g.
26346 	X	result if c then a else b.
26347 	X	but i reject the argument if its c its bad.
26348 	X	philip hunt philh at cabalamat uklinux net memes are a hoax pass it on.
26349 	X	evan i am baffled by this.
26350 	X	do you seriously think that anyone evan will have any difficulty telling the difference in practice.
26351 	X	please look for my message with corner case solved in its subject elsewhere in this.
26352 	X	andrew koenig ark at research att com http www research att com info ark.
26353 	X	i sort of thought the target was still jumping around a bit much for there to be a vote on it.
26354 	X	i hope there will be a concrete and specific thing or things to vote.
26355 	X	likely response summary keyword verbose colon.
26356 	X	heres yaasp just to keep things chaotic.
26357 	X	how about this as i suggested elsewhere in this thread.
26358 	X	t if spam in s if eggs in s vikings waitress customer.
26359 	X	t if spam not in s customer eggs in s vikings waitress.
26360 	X	i dont know this argument just doesnt really strike a chord with me.
26361 	X	you could make the same argument about the operator sometimes it means one thing sometimes it means.
26362 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote the doors of heaven and hell are adjacent and.
26363 	X	nikos kazantzakis bosskey net return to wolfenstein http www bosskey net rtcw a personal guide to return to castle.
26364 	X	so far very few perhaps im still thinking about it of the proposals feel like python to.
26365 	X	in fact im tempted to say only guidos original feels like python and i think im sitting on the fence between voting no to any change and yes only to the original in spite of my concern about the order of operands in the.
26366 	X	i like your reminder about python were executable pseudocode.
26367 	X	the original and maybe one of the new alternatives feel like that.
26368 	X	the c style ternary simply does.
26369 	X	actually true expr when cond expr else false expr is perhaps my favourite over even the original which i think bothers me more with its if in the.
26370 	X	im inclined to think at least some small bit of code uses when as a keyword mind.
26371 	X	dave brueck dave at pythonapocrypha com wrote in message news.
26372 	X	as i said in some other thread i want a clear distinction between the if statement and the conditional.
26373 	X	they cannot be distinguished by a parenthesis only.
26374 	X	if c print x else print y.
26375 	X	if c print x else print y.
26376 	X	i am quoting an example from another poster.
26377 	X	max m said and i agree with him.
26378 	X	i do like the ternary operator but strongly dislikes the above.
26379 	X	normally an if sentence has the form.
26380 	X	but now suddenly the if should act like some kind of function and return a value.
26381 	X	and what is this with parens that has to be there.
26382 	X	this is so inconsistent with how parens are used normally in.
26383 	X	normally they are only needed for tuples functions and multiline.
26384 	X	should there really be made an inconsistency like that for a marginal featue like this.
26385 	X	one of the great thing about the ternary operator is its.
26386 	X	that is completely gone with that.
26387 	X	moreover i hate to call a function with.
26388 	X	and i hate the next unavoidable step.
26389 	X	why to go over all this trouble when we have.
26390 	X	without parenthesis colons if and with then not a keyword.
26391 	X	show me any code youve ever written and ill show you how to change it so that it no longer works as you.
26392 	X	taking code that works and breaking it isnt a worthy.
26393 	X	not when it comes to breaking working code wink.
26394 	X	i saw errors in every spelling of conditionals so thats a.
26395 	X	otoh im at a loss to know where over half comes.
26396 	X	most examples were right regardless of spelling given what their authors claimed of.
26397 	X	the occasional honest to gosh error got repeated endlessly in followup posts.
26398 	X	greg ewing using news cis dfn de me at privacy net writes.
26399 	X	id like to put in a plea for re instatement of the original proposal x if c else y which i found to be particularly.
26400 	X	its concise it reads well it means just what it says it resonates with similar constructs in english and.
26401 	X	it slots nicely into the syntax without requiring any new reserved words else can be a pseudo keyword.
26402 	X	its meaning should be dead obvious even to someone whos never seen it.
26403 	X	i liked it best too but when guido seemed to give up on it then i did.
26404 	X	the one thing i dont like is that.
26405 	X	reads to me from my perl and ruby experience as.
26406 	X	to be required and the first statement to be parsed as the second and thus be syntax error although id prefer to leave out the parentheses in.
26407 	X	a func x if c else y.
26408 	X	a func arg x if c else y arg.
26409 	X	i havent taken the time to find out whether pythons list of operator precedence is ordered in such a way that that would be.
26410 	X	i think that python precedence rules should use a count of whitespace it would make life a lot.
26411 	X	ps the weight of tabs and escaped newlines in the precendence algorithm is left as an exercise for the.
26412 	X	i fear he simply wants to be able to say yall couldnt agree and close book on the.
26413 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
26414 	X	david eppstein eppstein at ics uci edu wrote in message news eppstein.
26415 	X	i cant find the specific example youre referring.
26416 	X	i must have missed one of the posts.
26417 	X	an out of bounds error in python.
26418 	X	the only equivalent i can think of is a dict lookup for a non existent.
26419 	X	and that would be done better with x dict get key default.
26420 	X	not very applicable examples but you see how it.
26421 	X	and of course it would be lazy short.
26422 	X	maybe its not pythonic enough but i wouldnt mind.
26423 	X	most of those look more like statements than.
26424 	X	i havent gave any input on pep so here goes.
26425 	X	really and what about lambdas which require a closure containing variables referenced from the enclosing scope rather like implicit parameters when the lambda definition was executed.
26426 	X	or what about generators where what looks like a function call is actually calling an already running block of code in a scheme that is somewhat like cooperative multitasking.
26427 	X	besides that what about all the things that are function calls but dont look like it such as the comparison operators when comparing class instances that have eq and similar member functions defined.
26428 	X	there is no one to one relationship between the conventional syntax of a function call and the conventional semantics of a function.
26429 	X	its pretty hard to think of a language where such an absolute mapping.
26430 	X	a call is always a call we specify the name of the function and its parameters and what to do with the.
26431 	X	the details of what the function does are in that functions declaration and definition or for built in functions in the.
26432 	X	that is the whole point of functions to re use semantics that were defined and implemented.
26433 	X	i dont see why the existence of lazy evaluation should be any different to any other aspect of the parameters such as type restrictions or the possible existence of default parameters or to any other aspect of the function such as whether it has side.
26434 	X	in fact if there was any feature of functions that needed an advance warning it would definitely be side.
26435 	X	if pythons history could be conveniently brushed aside i would quite cheerfully suggest a requirement that made it impossible for a function which returns a value to have side effects unless the declaration had a special.
26436 	X	but even for this id still use the same call.
26437 	X	and what i wouldnt give to be able to.
26438 	X	def if p cond lazy p true lazy p false if p cond return p true return p false.
26439 	X	steve at ninereeds dot fsnet dot co dot uk.
26440 	X	this is my second direct response to pep.
26441 	X	in my first response i stupidly missed the fact that these are expressions were talking about so the.
26442 	X	isnt a valid point of comparison since if doesnt return a.
26443 	X	im new here and i thank those who replied to me for were.
26444 	X	now having read most of the replies in this enormous thread well over now there were a good number of proposed alternatives each of which had its s and.
26445 	X	im going to add one more to the.
26446 	X	this is not a control flow construct you can only put one expression per.
26447 	X	notice that its about the same amount of typing excluding whitespace as.
26448 	X	to me it is in keeping with the classic feel of python consistent look and feel indentation preceded by rather than opening the door to squeezing impossibly complicated expressions onto a single.
26449 	X	generally the syntax including result would be.
26450 	X	if it falls of the end the result is.
26451 	X	there is no need for a default keyword just use or true.
26452 	X	you only have to refer to result.
26453 	X	cond s are evaluated one by one so short circuiting works a no else commas or brackets.
26454 	X	it adds an extra keyword case.
26455 	X	default isnt required just use or true these days.
26456 	X	bormotov bor at vb dn ua wrote in message news.
26457 	X	red meat for the anti cobol crowd.
26458 	X	the bdfl rejected this for several reasons on the first and this wont work for the second along with a section titled short circuit behavior which ends the bdfls position is that short circuit behavior is essential for an if then else construct to be added to the.
26459 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote being in love for real it aint like a movie screen india arie bosskey net aliens predator http www bosskey net avp a personal guide to aliens predator.
26460 	X	one problem with this is that it doesnt capture the original authors intent or.
26461 	X	some people like to have if cond x expr else x expr.
26462 	X	either because of clarity or because its easier to keep a smaller set of language constructs in ones head or any of the other reasons people have suggested.
26463 	X	thats why i analyzed code from a language which already has an if else ternary.
26464 	X	eg consider this example from pythons c implementation in cellobject c first one i found but i imagine there are plenty such examples.
26465 	X	if b ob ref null return return.
26466 	X	this could be written in c as.
26467 	X	to repeat just because the language supports a.
26468 	X	i believe it is used many fewer times than it can be.
26469 	X	thats a reasonable estimate of the number of times it could be.
26470 	X	it isnt a reasonable estimate of the number of times it will be.
26471 	X	i think its much lower closer to in times or even.
26472 	X	i used to buy that but im having a harder time.
26473 	X	i mean the by coincidence part not the if it breaks.
26474 	X	as i said there are over uses of and or in the standard library now all i looked at were obviously safe at a glance and i have yet to find real code in the library where something stronger than and or would actually.
26475 	X	the rub is that its overwhelmingly the case that the middle value is a literal or global constant with an obviously true.
26476 	X	its not the case that a string like yes just happens to be nonempty it cant be empty and still say yes wink.
26477 	X	i dont think its coincidence either that the usual outcome gets put in the middle position the first of the two possible positions for it or that the usual outcome is a non trivial.
26478 	X	its a fact that worry about the empty case is worry about a bug ive never seen in real life and recalling that python does have min max and abs builtin id never use and or for them.
26479 	X	idiom in the early s in a thread where steven majewski and i were idly wondering whether it was possible to emulate condx y exactly in a short one.
26480 	X	ive never used it and it occurs to me its not because its too ugly to bear although it is but because and or is the strongest thing i ever actually.
26481 	X	i am quite surprised at the number of people who have missed important points in this proposal and at the amount of prejudice against suggestions that have already appeared in other.
26482 	X	this is a proposal to extend expressions with a test to return one of two values as apposed to an alternative to program flow logic.
26483 	X	it is desirable to evaluate only the result expression and not the discarded.
26484 	X	there is also an implicit requirement to by pythonic something which im happy to ignore as it obviously means whatever the user of the term wants it to.
26485 	X	it is a smokescreen for appearing pro python while really just were anti.
26486 	X	i dont think anyone would describe list comprehension as pythonic yet this is perhaps the most useful recent addition to the.
26487 	X	the other consideration often raised and used as an excuse for an objection or a standpoint are thoughts for the poor.
26488 	X	the widespread use of c perl and tcl to pick a few at random is proof that beginners will persevere with anything that is of interest or benefit to.
26489 	X	it is arbitrary and self defeating to unnaturally constrict the enhancement of the language especially a feature you can take or leave because someone may not understand.
26490 	X	the people that like or want these syntactic frills will figure them.
26491 	X	that said i am as pro ellegance as the next.
26492 	X	as far as i can see there are still only two serious contenders.
26493 	X	b textual cond if exp else exp.
26494 	X	the others suggestions offered in response are ethier pointless they offer nothing not already in the proposal or have missed the.
26495 	X	a is criticised for were c like and b for were perl.
26496 	X	the fact that they have been used elsewhere is surely a point in their.
26497 	X	to invent a construct to meet a well understood need that hasnt appeared anywhere else is surely an argument against its.
26498 	X	i dont see anyone objecting to using as the multiply operator in spite of it were nothing like x which most beginners seem to.
26499 	X	i think we can ignore those who simply flatly vote against this.
26500 	X	they obviously dont use the language as much as the rest of us or have a problem with.
26501 	X	i also think we should disregard the form.
26502 	X	simply because it hasnt been used.
26503 	X	it is difference for its own.
26504 	X	because it is concise unambiguous and would look better in an.
26505 	X	however i would vote for if else if that was the only option.
26506 	X	dale strickland clark riverhall systems ltd.
26507 	X	aahz aahz at pythoncraft com ha scritto nel messaggio news bbl hd at panix panix.
26508 	X	any idea of when it could happen then.
26509 	X	good thing you only use and modify and share in house.
26510 	X	and work with people who have heard of the idea of a code style.
26511 	X	so i want guido to publish the style code implicitly in the.
26512 	X	for immediate release to psu members only unallowed restribution will result in complete elimination in any timestream.
26513 	X	it has puzzled a number of python secret underground members enough to write questioning emails to psu high command that the debate about pep still continues even after everything that couldve been possibly said about it is said five times and even misapprehensions have been repeated.
26514 	X	why is this terminally boring debate still dominating comp lang python they ask.
26515 	X	why not debate more important stuff like the need for single precision float support with arrogant c programmers.
26516 	X	the answer should be clear to those who followed the gnu debates debating ternary operator support extends the lifetime of the.
26517 	X	this goal is desirable to almost all participants of the universe including the psu but excluding the re engineered glomerates of star cluster.
26518 	X	a recent trip into the future in particular to the grey era of uncertainty just after the collapse of the first dawn federation resulted through classified need to know basis events in the realization that debating ternary operator issues is more effective in extending the lifetime of the universe than gnu wars by an order of.
26519 	X	since then the psu has tried to fire up ternary operator debates.
26520 	X	unknown to most of the world a proposal to remove the ternary operator from the c language has occupied half of microsoft for the last months.
26521 	X	this success has astounded even the psu and we have access to a time machine the total lifetime of the universe is extended by billion years at least as.
26522 	X	and that was before the debate spread spontaneously without any interference by the psu from microsoft to sun where the javasoft engineers have been so embroiled in this debate the last two months that they completely neglected making java actually work properly on the solaris.
26523 	X	and three weeks ago this spread to ibm though granted the psu helped things a bit.
26524 	X	if major software companies can be locked up in this debate so successfully the psu reasoned let alone the open source world the global nexus of endless nitpicking over details no outsider could care less.
26525 	X	and thus we attempted to influence matters close to home in the python.
26526 	X	through the timbot we influenced guido van rossum to post his proposals to comp lang.
26527 	X	the psu already had high expectations but then we were stunned again beyond our wildest dreams when guido all by himself added an utterly brilliant innovation to the mix that even the best psu bot cluster could not have improved.
26528 	X	the most recent estimates by astronomers is that the age of the universe is essentially.
26529 	X	maybe its been suggested before and its not popular for some reason but i think conceiving this as an operator might be the wrong direction to go we go there because c did not because its.
26530 	X	ive seen structures like that in several languages it seems to answer the need without adding new.
26531 	X	geoff gerrietts geoff at gerrietts dot net rw rw rw permissions of the beast.
26532 	X	well when i say it i mean the ternary operator which is under discussion and you know the one i mean so dont complain.
26533 	X	steven taschuk staschuk at telusplanet net wrote in message news.
26534 	X	python list at python the of b.
26535 	X	it is a possible problem because someone who does not know about or forgets about short cut execution might end up with a subtle.
26536 	X	my brain was boggled after i got as far as i.
26537 	X	i submit that this vetting has already been done by the authors of the pep as presently written and as possibly further revised before the vote.
26538 	X	although eriks list is interesting i see no reason to confuse the issue with random alternatives that did not get incorporated into the.
26539 	X	most were crap and some were.
26540 	X	the alternative if c t else f without enclosing parens is not a viable alternative specifically because pythons parser evidently cannot disambiguate it from the statement.
26541 	X	i for one predict humans similarly will be.
26542 	X	no matter how much people like it its not really an option so theres no reason to include it in the.
26543 	X	i havent seen it stated anywhere but my assumption is that we will be voting only on alternatives in the.
26544 	X	then too bdfl would be within his rights to call for just an up or down vote on the pep as is which states only a single actual.
26545 	X	as worded the other alternatives are all rejected for one reason or.
26546 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
26547 	X	then separate it into two decisions per voter.
26548 	X	pro con any form of if then else expression approval voting of proposed alterntives.
26549 	X	this would let me express the opinion that i am against any change but if more people are in favor of some kind of in the else expression the form if cond expr else expr is the one i find most.
26550 	X	i read this and i honestly dont understand which stance youre.
26551 	X	are you saying that x if a should be legal and mean the same as x if a else none.
26552 	X	you seem to invoke explicit is better than implicit arguments which dont seem relevant either way here to me anyway.
26553 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote shooters looters now i got a laptop computer ice cube keplers laws http www alcyone com max physics kepler a proof of keplers.
26554 	X	andrew koenig ark at research att com ha scritto nel messaggio news yubskoorj fsf at europa research att.
26555 	X	there are instances of that in the std lib code see tim peters post or the std lib directly is for all to.
26556 	X	obviously but if you come to rely on the idiom its easy to forget that it doesnt work properly if x is.
26557 	X	as weve seen from andrew koenigs example of an improper use of this construct in the standard.
26558 	X	the construct works in this specific case.
26559 	X	it does not work in the general case.
26560 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote ride ride this wave of mine res esperanto reference http www alcyone com max lang esperanto an esperanto reference for english.
26561 	X	based on discussion on python dev i believe the intent is to have a precedence just below that of.
26562 	X	in other words all operators bind tighter than the conditional expression other than lambda which is.
26563 	X	thus your examples above would be equivalent to the following.
26564 	X	a b then c else d a then b else c d a and b then c else d a then b else c and d a b then c else d a then b else c d lambda a then b else c.
26565 	X	of course anytime you think someone might get confused its good style though perhaps not syntactically required to add extra parentheses to.
26566 	X	someone else please correct me if im wrong on any of these.
26567 	X	this strikes me as somewhat smalltalkish.
26568 	X	if they change to when i would be.
26569 	X	you are forgetting a detail here and as well as or are not implemented as.
26570 	X	and are the boolean operators and these do return boolean.
26571 	X	note that you cant do true false and then get true as.
26572 	X	and and or are control structures which test for truth values and then branch accordingly leaving the true result on the.
26573 	X	constructs misusing and and or for the sake of inlining if then else should be reserved for those who know what theyre doing and can live with the consequences.
26574 	X	everybody else should really stick to the explicit.
26575 	X	value x a b if x value a else value b.
26576 	X	this is clean shows exactly what youre doing and doesnt hide the flow of control from the reader value a is only executed in case x is found.
26577 	X	in that case the value b branch is never entered.
26578 	X	as a result side effects in the value b branch do not take.
26579 	X	the tendency to let inling features creep into the language makes me a little.
26580 	X	the simplicity of python is losing big with each new way to put more information on one.
26581 	X	this can be compared to lossy compression of an image you can still grasp the general picture but the details become unsharp and.
26582 	X	complexity should be reserved to what you write not how you write.
26583 	X	the use of a conditional operator as the conditional expression in an if statement is bad style in any language that it would be obnoxious in python is simply an acknowledgement of that fact and has no conseqeuences on the argument of whether a conditional operator should be admitted to.
26584 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote ride ride this wave of mine res esperanto reference http www alcyone com max lang esperanto an esperanto reference for english.
26585 	X	and when that occurs the for if order is the same as in.
26586 	X	result for x in data if x result append x.
26587 	X	which is mapped almost directly as.
26588 	X	result x for x in data if x.
26589 	X	the term out of order is the append component not the.
26590 	X	then i wonder why do people think that the following snippet is pythonic in any reasonable way.
26591 	X	in what direction does it reads.
26592 	X	carlos ribeiro cribeiro at mail inet com br.
26593 	X	christian tismer tismer at tismer com writes.
26594 	X	i intensely dislike x and y else z.
26595 	X	explicit is better than implicit to me specifically means avoiding this type of cutesy.
26596 	X	x then y else z is ok with me as are x y else z x.
26597 	X	im not crazy about y if x else z but at least its.
26598 	X	the original process as stated required a supermajority to prevent a no confidence vote from.
26599 	X	lets say it was even the lower supermajority if say of the responders voted in favor of a conditional operator and voted opposed to it the vote would fail but the community would clearly be left in an undecided.
26600 	X	im just saying talking about the precise figure required to pass is substituting ones judgement for the.
26601 	X	take the vote give him the.
26602 	X	after all if there were clearly a tiny minority that wanted the operator then thats good reason to declare by fiat that it will never be in the.
26603 	X	if a huge majority want it then similarly its clear that it probably should be in the.
26604 	X	if youre around the range which i suspect we probably will be then theres active contention in the community and so itll be a judgement.
26605 	X	san jose ca usa n w tsftdotiote life is an effort that deserves a better.
26606 	X	karl kraus alcyone systems san jose.
26607 	X	john d schreef op maandag februari om.
26608 	X	take a glance at the pep discussions.
26609 	X	en lr ie utf oe utf safe off threadm znpmq fsf morpheus demon co uk rnum prev groups fhl den lr d ie dutf oe dutf safe doff q dfor breview bpep btng dgoogle bsearch meta dgroup dcomp lang.
26610 	X	en lr ie utf oe utf safe off q pep btng google search.
26611 	X	asperger syndroom een persoonlijke benadering http people nl linux org gerrit het zijn tijden om je zelf met politiek te bemoeien http www sp nl.
26612 	X	jerf at compy attbi com writes.
26613 	X	this whole thread is going to be a dull rehash of all the old arguments which wont convince anyone of anything.
26614 	X	all it will do is bore people so much that they tune out of the thread and miss the call for.
26615 	X	can we just vote now please.
26616 	X	ps i dont think im totally serious but im not.
26617 	X	well then it isnt pep alternative and so doesnt belong on the.
26618 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote whoever contends with the great sheds his own.
26619 	X	http www pollywannacracka com the internet resource for interracial.
26620 	X	but must confess that im growing more in favor of.
26621 	X	even though it looks like an if statement or perhaps because it looks like an if.
26622 	X	i dont think theres any real ambiguity from the compilers viewpoint because if denotes a statement only when it is the first token of the statement and an expressin.
26623 	X	i also dont think that theres any real ambiguity from the programmers viewpoint because the meaning is conceptually the same for expressions as for.
26624 	X	andrew koenig ark at research att com http www research att com info ark.
26625 	X	holger maybe roman suzi iirc has found one short circuiting.
26626 	X	holger which i am currently thinking.
26627 	X	im not thrilled about this example because if you cover up the cond part you get what looks like a tuple and tuples dont short.
26628 	X	others have said it better but ill reiterate python doesnt need this nor do any of the proposals seem pythonic in.
26629 	X	aahz aahz at pythoncraft com http www pythoncraft com.
26630 	X	register for pycon now http www python org pycon reg html.
26631 	X	in article rahfto fsf at morpheus demon co uk.
26632 	X	not by arguments no but by.
26633 	X	i believe that the swing voters are those who are mildly sympathetic to conditional expressions but who find one or all of the various proposals.
26634 	X	if someone can come up with a truly pythonic idiom for conditional expressions i believe itll.
26635 	X	i suspect that my criteria are similar to many other peoples.
26636 	X	must have clear left to right or right to left meaning.
26637 	X	must look vaguely readable even when abused as the conditional for if statements aahz aahz at pythoncraft com http www pythoncraft com.
26638 	X	register for pycon now http www python org pycon reg html.
26639 	X	alex martelli aleax at aleax it wrote in message news.
26640 	X	i wanted to say patterns as are intended in c books are not so important in python since in python they can often implemented as recipes.
26641 	X	i was sloppy since pep is taking a lot of time and i dropped the.
26642 	X	on one hand i think it is useful to have a common name for something which is often used such as a singleton visitor.
26643 	X	on the other hand as a matter of personal taste i dont like books spending hundreds of pages discussing doubtful.
26644 	X	i havent read the original one.
26645 	X	maybe it is better than the books i have.
26646 	X	anyway to the op i wanted to suggest that somebody entering in the oop field should not start with a theoretical book but with a practical.
26647 	X	piet van oostrum piet at cs uu nl wrote in message news wzvfzudrk fsf at nono cs uu nl.
26648 	X	i would accept this or the when.
26649 	X	but i am not sure if other pythonistas would like a new special symbol only used in the ternary.
26650 	X	maybe you should think of other case of use for.
26651 	X	this is the logical order for people like you who want a ternary conditional that they will take whatever they can get however.
26652 	X	the most important thing is getting it in as long as it is not.
26653 	X	it also is an order that suits the people who are opposed at any.
26654 	X	but it is hellish for the people who have a beauty threshhold for any new language.
26655 	X	i dont suspect they are a small.
26656 	X	indeed i think that it is quite plausible for them to hold the balance of votes and power in the.
26657 	X	like any other third party in a parliamentary procedure why shouldnt they hold out for concessions on the beautiful front.
26658 	X	of course it may be that they are not the third party but indeed one of the top.
26659 	X	i dont write a function because theres no good name for.
26660 	X	good name defined as something which isnt a dialect specific to my.
26661 	X	were there a suggestion for an ifelse builtin then there would be a good.
26662 	X	indeed and i have tried to point out that the frequency of that use is in actual code quite.
26663 	X	could you post say examples where you would use this in you code and provide broader context that would let us understand the usefulness of a short circuiting if else expression over say other existing python idioms or a still hypothetical ifelse function.
26664 	X	this would provide useful real world context for an if else expression to counter the numbers i found which suggest that a true short circuiting if else expression is only needed roughly once every lines of python code or.
26665 	X	i updated the pep for guido van.
26666 	X	if the cron job is doing its thing the results will be visible in a few.
26667 	X	the update reflects updated thinking based on the discussion to.
26668 	X	it also summarizes a few posts from comp lang.
26669 	X	hopefully it will serve to focus the discussion on the best of the ideas and arguments presented so.
26670 	X	out of order evaluation is out of.
26671 	X	so are ideas that do not provide for short.
26672 	X	if condition expression else condition is in.
26673 	X	condition expression expression is a new.
26674 	X	cond condition expression condition is viable if implemented as a keyword and has short circuit.
26675 	X	note the actual word is still an open.
26676 	X	added a summary of a few ideas from the last couple hundred posts from comp lang.
26677 	X	even if the pep is rejected before we get to the selected phase the information will still be.
26678 	X	real derision on which syntax should be chosen would likely queer the deal if it actually got as far as guido saying okay i give in well add a conditional operator now what should it look like.
26679 	X	and the pro community falls to.
26680 	X	im just trying to prepare a list so that if it gets that far we have something to talk.
26681 	X	indeed even if the pep fails before it gets to that point it would be instructive to have the list of proposed syntaxes in the pep itself so that future people who want it will have a basis to comment.
26682 	X	not that rejecting the pep will stop the frequently asked questions about conditional.
26683 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote whoever contends with the great sheds his own.
26684 	X	http www pollywannacracka com the internet resource for interracial.
26685 	X	i will of course explain why both are bad.
26686 	X	if the lowest common denominator is to dictate language complexity then wed better all give up.
26687 	X	to expect others to put up with a restricted language set so that a bunch of half interested non programmers dont have to put in too much effort to understand it is staggering.
26688 	X	if you dont like a feature dont use it but dont expect others to put up with your.
26689 	X	read a book for christs sake.
26690 	X	you have to put in a bit of effort to understand something.
26691 	X	you cant expect to pick up a new language without a bit of.
26692 	X	what do they do if they need some electronics built some plastic moulded or metal worked.
26693 	X	do they get an expert in or have a go at doing it themselves.
26694 	X	i am all for people were self sufficient and having a go but when things get too heavy for an amateur call in an expert and learn from him.
26695 	X	dale strickland clark riverhall systems ltd.
26696 	X	laura thus answering the question if we let it in will we get code that laura is hard to.
26697 	X	i want my control flow with indentation.
26698 	X	yes but in what direction does it argue.
26699 	X	in c i dont consider to be control flow any more than i consider or to be control.
26700 	X	in fact part of reason that conditional expressions appeal to me is that they permit some kinds of expressions to be written without control flow that otherwise would require.
26701 	X	james j besemer jb at cascade sys com wrote.
26702 	X	with c java background i also prefer.
26703 	X	and as we often want to make a ternary fit in one line.
26704 	X	could get confused though as often opens a block it doesnt here.
26705 	X	one option could be to use instead of.
26706 	X	it resembles e a little which could make it easier to read as short for else.
26707 	X	but then stands for at who knows what other more appropriate use it may find in the.
26708 	X	implementation def my if cond yes no if cond return yes else return no.
26709 	X	usage k my if cond lambda yes lambda no.
26710 	X	if we change lambda in to.
26711 	X	sincerely yours roman suzi rnd at onego ru my ai powered by linux redhat.
26712 	X	andrew koenig ark at research att com writes.
26713 	X	thats equally an argument in favour of keeping the surrounding context.
26714 	X	but arguing in these terms is too theoretical to be compelling either.
26715 	X	it want to me at first.
26716 	X	i find map and lambda pretty.
26717 	X	thats just personal preference but basically every argument about readability of conditional expressions is a personal preference.
26718 	X	lets rewrite in terms of a list comprehension for my.
26719 	X	val str x if x else str x for x in y.
26720 	X	the combination of ifs and fors is very hard to parse mentally i even went to the language spec to make sure that expr if expr missing the for clause wasnt a valid list.
26721 	X	thats got to be a bad sign.
26722 	X	i have to say that using unrealistic names like f x and y is an unfair way to make your.
26723 	X	in a real application there would be much more readable.
26724 	X	assuming were talking a financial application thats where id expect negative numbers to be displayed like this id call f something like display form then you have.
26725 	X	def display form value if value return value else return str value val map display form profits.
26726 	X	you may not like this any better but its a more honest representation of the argument for why conditional expressions are not.
26727 	X	and i dont believe that i am particularly good at choosing names for things someone with a better flair for this and a good thesaurus could probably come up with something even better.
26728 	X	yes you still need a temporary assuming it genuinely is temporary and you never need to perform this computation again.
26729 	X	but now its a temporary concept rather than just a temporary.
26730 	X	and understanding the concepts in a piece of code is important if you use named functions to express.
26731 	X	oddly the only argument i find even remotely compelling is the lines of code one which most people would say is the weakest.
26732 	X	less lines of code means more code visible at one time which means you have a better overall view of the control flow of a.
26733 	X	but ive never seen python code with functions long enough for that to matter in.
26734 	X	maybe it all boils down to how finely you decompose.
26735 	X	the more you do the less benefit there is to a conditional.
26736 	X	ok lets forget this and look at optimising the python function call sequence to be so fast we dont care any more.
26737 	X	iif x y this takes a second this takes an hour aval.
26738 	X	in your case both the functions will be executed.
26739 	X	the idea about the ternary operator is that only the selected function will be.
26740 	X	that is why a language construct is.
26741 	X	hilsen regards max m rasmussen denmark.
26742 	X	http www futureport dk fremtiden videnskab skeptiscisme og transhumanisme.
26743 	X	my biggest concern with it is that the right hand side looks just like a normal dictionary to do ternary operators correctly youd want some kind of lazy evaluation there but the laziness isnt apparent from the.
26744 	X	david eppstein uc irvine of information computer science eppstein at ics uci edu http www ics uci edu eppstein.
26745 	X	as pointed out the required parentheses make it less of an.
26746 	X	furthermore although i know youll disagree ill point out that your general complaint here also constitutes an argument for going with the operator based alternative.
26747 	X	as it couldnt possibly be confused with if else.
26748 	X	this has always been the case within.
26749 	X	i agree the insides of multi line expressions should usually be indented but here you have discovered yet another of the thousands of ways python code is subject to abuse by naive or sinister.
26750 	X	i respect your preference and im even willing to fight for your right to always have that.
26751 	X	i just wish youd be willing to be more flexible about other peoples opinion about.
26752 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
26753 	X	i am on the addition of a conditional.
26754 	X	i want conditional expressions and will take any form i can get but the condition in the middle does seem a little.
26755 	X	this is certainly the most sensible solution for chaining conditional expressions although chaining conditional expressions in whatever language not just python is usually a sign of.
26756 	X	still it should do the right thing even if obfuscation is what youre actively choosing and what is proposed abovce is the right.
26757 	X	these are all edge cases and dont bother.
26758 	X	particularly the latter two if youre going to be inlining tuples in conditional expressions it doesnt hurt to be forced to use parentheses to.
26759 	X	this would get higher ratings with me than the proposed syntax simply because it has the left to right evaluation and seems more.
26760 	X	id be willing to live with enforced.
26761 	X	but bottom line is ill take whatever i can.
26762 	X	i want a conditional expression in.
26763 	X	as for other peoples suggestions i think whatever the form it takes the else portion of the conditional should be.
26764 	X	no x if y or if y then x shortened versions explicit is better than implicit if you want none or something else in that else then you should write it.
26765 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote shooters looters now i got a laptop computer ice cube keplers laws http www alcyone com max physics kepler a proof of keplers.
26766 	X	i dislike complicated expressions and this will only encourage.
26767 	X	not to mention it just doesnt feel right.
26768 	X	hans hmm what if bools grew an if method.
26769 	X	we could then write hans z x y if whentrue whenfalse hans this strikes me as much more elegant than the other.
26770 	X	dan you joke but thats basically what smalltalk.
26771 	X	with one crucial difference smalltalk passes blocks rather than expression values so only one of the alternatives is really.
26772 	X	andrew koenig ark at research att com http www research att com info ark.
26773 	X	i like this proposal and also think the reverse condation expression in orginal proposal is horrible.
26774 	X	t o t f s h i m o f p h t s s w h n h i a o s o f o r o o a o i e e a r i p t o o p y m s t s d e h l b e e e t e s a d t r b h l i y n g.
26775 	X	but at least the two meanings are related.
26776 	X	i dont consider the ability to understand conditional expressions without reading the documentation a high.
26777 	X	aahz aahz at pythoncraft com http www pythoncraft com.
26778 	X	register for pycon now http www python org pycon reg html.
26779 	X	does anyone have an estimate of the proportion of python programmers who know at least one c syntax language.
26780 	X	my guess is that at least of us.
26781 	X	philip hunt philh at cabalamat uklinux net memes are a hoax pass it on.
26782 	X	holger krekel pyth at devel trillke net writes.
26783 	X	i find it very confusing and dont think id ever get used to.
26784 	X	i really dislike that type of cutesy ness that is sometimes found in python the string operator is another example.
26785 	X	in fact its not even obvious what it.
26786 	X	what should the value of and else be.
26787 	X	yep but not because people might vote twice but to allow them to switch camps and.
26788 	X	so remember the last vote undo it and count the new.
26789 	X	in that case my apologies for the inappropriately pedagogical tone of my previous.
26790 	X	i was confused because i thought you meant more idiomatic and unreadable as an undiluted criticism and to me more idiomatic is an.
26791 	X	the x thing is in my view not idiomatic at all since it is not in.
26792 	X	steven taschuk staschuk at telusplanet net o pleiosaur.
26793 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote he who knows how to be poor knows.
26794 	X	jules michelet rules for buh http www alcyone com max projects cards buh html the official rules to the betting card game.
26795 	X	although i am against a ternary operator here is yet another pep syntax.
26796 	X	test true case false case or a test.
26797 	X	asperger syndroom een persoonlijke benadering http people nl linux org gerrit het zijn tijden om je zelf met politiek te bemoeien http www sp nl.
26798 	X	he said that any change had to overcome a builtin prejudice against.
26799 	X	as far as why doesnt he take his download and leave well if he did that the community would be the poorer as hes one of the harder working members of the python dev.
26800 	X	aside from abuse what have you contributed to the community.
26801 	X	one of the beauties about python is that its growth and evolution is careful and.
26802 	X	if i wanted to use a language with everything and the kitchen sink thrown in id use perl or c.
26803 	X	do you have to resort to abuse in every post you make.
26804 	X	anthony baxter anthony at interlink com au its never too late to have a happy.
26805 	X	mis at pitt edu michele simionato wrote in news.
26806 	X	id prefer an other word as the condition and then part is swapped compared to other ifs as statement and in.
26807 	X	i think that the ternary operator completes listcomps and i like.
26808 	X	also i think its nice for initialiters.
26809 	X	class x def init self optarg none self someval optarg when optarg is not none else default value.
26810 	X	i think an expression is much better here than an if statement in this.
26811 	X	as for the new keyword when i dont see a.
26812 	X	the new syntax isnt backwards compatible anyway so that a new keyword does not make a differece for backwards.
26813 	X	erik max francis max at alcyone com writes.
26814 	X	looks more to me like some kind of pointer.
26815 	X	but either one is ok with me for.
26816 	X	aahz at pythoncraft com aahz writes.
26817 	X	this vote should be on whether to have conditional expressions rather than a ternary operator.
26818 	X	in particular it should be open to expressions using keywords n way expressions.
26819 	X	also a supermajority should not be.
26820 	X	im not even convinced a simple majority should be required list comprehensions never would have gotten one and they are a good feature but its hard to call anything a vote if a minority can pass.
26821 	X	alex martelli aleax at aleax it wrote in message news z at news tin clause.
26822 	X	you could view it that in one form boolean you are selecting and in the other integer you are indexing which would give.
26823 	X	the would imply lazy evaluation of the preceeding tuple this distinguishing it from.
26824 	X	heh my favourite retort to this kind of extremism when i hear it applied to python is to feign agreement and then ask whether theyd prefer python to forbid x or x.
26825 	X	yeah explicit or certainly should count but people who dont bother to express an opinion its unclear what significance to attach to.
26826 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
26827 	X	erik max francis max at alcyone com wrote in message news.
26828 	X	y or x if c as in val sqrt x or imag if x.
26829 	X	mind you im not sure im all that thrilled with my suggestion either i was merely putting it out for public.
26830 	X	i have no problem steering the direction as some others have suggested into a more general construct for multiway or lazy evaluation with the conditional operator as a degenerate.
26831 	X	so what did you think of the introduction of list comprehensions.
26832 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote always forgive your enemies nothing annoys them so.
26833 	X	oscar wilde bosskey net quake iii arena http www bosskey net qa a personal guide to quake iii.
26834 	X	which is short for cond val true val.
26835 	X	which is a two condition version of cond val cond val cond val true valdefault.
26836 	X	z x x getpref not specified.
26837 	X	that does not surprise me im using it sometimes.
26838 	X	tim peters tim one at comcast net wrote in news.
26839 	X	i was for a ternary op because such a thing would show the intent of a programmer more precise than c and t or f of course i can live with the later and i have to use it if i want to be compatible with the python in a tie version.
26840 	X	on the other hand what i see in this discussions is that i rather live forever with and or than having some of the ugly proposals in the language guidos is not bad but if t if cond else f doesnt look exactly good and such things will come up even if and or would be better placed here.
26841 	X	how about a ifte cond true v false v function in a functional.
26842 	X	that could also take a curry f args kwargs function and some other functional style.
26843 	X	and for those realy rare cases where lazy eval matters there is the and or solution or the form as a.
26844 	X	especialy if an expression has so drastical consequences that it must no be evalueted if the other is taken it should go in a ordinary if that is much clearer and you have space to put comments on why it is so important to take.
26845 	X	tim peters tim one at comcast net writes.
26846 	X	two can play at that game.
26847 	X	as i recall it i got tired of the debates and implemented and friends as pure syntactic.
26848 	X	then thomas wouters decided to do what was necessary to get them into the core i e resolving the issues you talk about and did.
26849 	X	so implementation and issue resolution went almost hand in.
26850 	X	basically what got augmented assignment into the core was a couple of people getting tired of the gassing about it and writing some code its possible this tactic is a bit too effective.
26851 	X	im not sure that would help the current debate much given that conditional exps hafve been implemented at least once.
26852 	X	id like to build an exhaustive or nearly so of forms of the conditional operator that have been made so far that people have thought had some merit i ones that were proposed and which someone other than the proponent indicated they thought might be a good idea and those which guido has not already absolutely dismissed such as c x y.
26853 	X	id like to do this both for my own edification in seeing them all in one place and for a potential second vote on the desired form should the process get that far of course.
26854 	X	im also putting aside for the moment the issue of the introduction of new keywords or punctuation or the appearance of chained conditional.
26855 	X	note this is not a vote of any kind the forms are listed in the very rough chronological order of them were suggested with no other implied weighting on their position in the.
26856 	X	here is the list i have so far c represents the conditional expression x the if true expression y the if false one.
26857 	X	x if c else y initial proposition in pep c x.
26858 	X	y mentioned in pep if c then x else y mentioned in pep x when c else y if c x else y c x else y c x else y c x y.
26859 	X	what else should be on this list.
26860 	X	you can reply by email if you.
26861 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote light more light.
26862 	X	the last words of goethe a personal guide to online multiplayer first person.
26863 	X	i have another objection to this form that i didnt mention in my earlier message beyond the choice of curly braces for a completely non dictionary like purpose.
26864 	X	the problem is that this doesnt change the fundamental issue of c and x or y even if it worked properly in the case where x is false is utterly idiomatic and is totally.
26865 	X	it isnt just not pretty the first time you see it will take you a few minutes to figure out what the syntax does in the particular instance you found it in and what the general intent of the pattern.
26866 	X	this just introduces a particularly strange form in my opinion but makes the and or syntax for a conditional expression even more idiomatic because now you have to remember the curly braces around the middle item or it doesnt.
26867 	X	further the suggestion of some syntax for this purpose seems really out of left field youre basically talking about something that will cause an expression to evaluate one way in one context and another in.
26868 	X	for the purposes of boolean testing as an argument in and it evalutes to true but when the and operator actually returns it as part of an expression it returns x.
26869 	X	that just boggles the mind in my opinion thats like patching a hole by making a bunch of much smaller.
26870 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote if you cant fight and you cant flee.
26871 	X	robert elliot physics reference http www alcyone com max reference physics a physics.
26872 	X	then how do you join a tuple.
26873 	X	or a sequence from an iterator.
26874 	X	i sometimes use this str join spam etc.
26875 	X	does that look better to you.
26876 	X	i doubt that anyone who hasnt used zope page templates extensively will find this persuasive but in that realm where python expressions are possible but statements are not there is a fair amount of pain suffered for lack of a short circuiting conditional.
26877 	X	zpts do provide a non short circuiting test cond t f function and when it is insufficient use of the ugly and or idiom is required since otherwise you end up having to write something like.
26878 	X	as i say though non zpter are unlikely to care.
26879 	X	andrew koenig ark at research att com writes.
26880 	X	all this proves is that people are getting too excited or the thread is getting too long and wearing to make their arguments well thought out and.
26881 	X	is there an official vote in progress or not.
26882 	X	i thought there was going to be a python announce ment about it.
26883 	X	i would suggest using one of these forms.
26884 	X	self stream writeln ran d test s in.
26885 	X	or self stream writeln ran d test s in.
26886 	X	i think the indexed one is a little.
26887 	X	do we really want to start seeing this.
26888 	X	self stream writeln ran d test s in.
26889 	X	steven taschuk provides some fascinating historical notes on the origins of certain.
26890 	X	its amazing what you can learn by reading c l.
26891 	X	many many thanks you put it much better than i did in my previous.
26892 	X	carlos ribeiro cribeiro at mail inet com br.
26893 	X	i am still wondering if there is a simple way to fix the current ternary op x and y or z.
26894 	X	everybody knows by now that this fails if y is a false.
26895 	X	otherwise it works ok and is used in todays code.
26896 	X	inspired by do the simplest thing that can possibly work i now think that.
26897 	X	might just do it and avoid the need for a new.
26898 	X	its a very minor change just for fixing the problem at.
26899 	X	it should be obvious what it.
26900 	X	if x is true then y is the.
26901 	X	yes it looks unusal but it is a simple non destructive change which the people who now dislike pep could probably live.
26902 	X	it has the positive side effect that explaining this ternary op variation goes hand in hand with explaining how and or works in.
26903 	X	and it acknowledges the fact that we almost have a ternary.
26904 	X	also it reads left to right and the alternatives y else z read.
26905 	X	then is not an existing python.
26906 	X	i fail to see why this is a benefit or youd consider the and or convention.
26907 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote god does not play dice with the.
26908 	X	still that approach instead of reversing the elements reverse the position of the operator seems.
26909 	X	maybe change the operators to and.
26910 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote he who knows how to be poor knows.
26911 	X	jules michelet rules for buh http www alcyone com max projects cards buh html the official rules to the betting card game.
26912 	X	holger krekel pyth at devel trillke net writes.
26913 	X	also the people in favour may know where they want to use conditional expressions but when challenged with alternative ways of expressing their code the response usually boils down to but i dont like that.
26914 	X	which is not an invalid response but it does emphasize the fact that neither side of the debate has any particularly killer.
26915 	X	its all a matter of personal.
26916 	X	just as long as were all clear here that both sides arguments are based on irrational feelings in this case.
26917 	X	its important not to turn this argument into some sort of license to tell other how to code for their own good.
26918 	X	but there is a significant point here whether you like it or not python is not about diversity for its own.
26919 	X	there should be one and preferably only one obvious way to do.
26920 	X	although that way may not be obvious at first unless youre.
26921 	X	the conditional expression does not add any new abilities to the.
26922 	X	so its never the only one obvious way.
26923 	X	but im not dutch so what do i know.
26924 	X	erik max francis max at alcyone com wrote in message news.
26925 	X	you can in effect vote it down by voting for a replacement that current users of the idiom will switch.
26926 	X	on the contrary as paul also said in his response the question is whether to replace the current idiom or let it.
26927 	X	so preference between the status quo and a proposed new situation is exactly to the.
26928 	X	a choice between the two is exactly what people will be voting.
26929 	X	james it might be possible to obtain the effects of the proposed james expression in a more general way by extending the semantics of james the following existing construct.
26930 	X	james html text is html msg.
26931 	X	this is the third message of this kind by three different authors i think that has the two alternatives swapped.
26932 	X	this fact by itself convinces me that this particular form is a bad.
26933 	X	it would be much better to write.
26934 	X	true html false text is html msg.
26935 	X	james the above expression provides the string html or text james depending upon the return value of the function is html.
26936 	X	james if a special case were to be recognized by the parser that of james a tuple literal followed immediately by an index selector james then only the tuple item selected by the calculation of the james index would need to be actually calculated a form of lazy james evaluation as in the following example.
26937 	X	james calc value r calc value r calc value r index val x.
26938 	X	james the selector index val x would be computed first then james depending upon the value of the index the appropriate james calc value or would be the only calc value to be james computed as the value of the.
26939 	X	but i dont like the idea because it would mean that the semantics of an expression would change based on the surrounding.
26940 	X	james such an approach might present difficulties in parsing but it james might have the advantage of were more general.
26941 	X	extending james to more than two possible selections and more.
26942 	X	james there would be a risk of breaking some current code that james depends upon such a construction and also depends upon james side effects depending upon executing all of the various james functions calc value however i suspect that few programmers james would intentionally write such.
26943 	X	whats funny is that i just finished posting a message about how ml handles this situation which is by defining an if statement as a special form of a case.
26944 	X	indeed your second example above translates naturally into ml as.
26945 	X	case index val x in calc value r calc value r calc value r.
26946 	X	because this is an expression not a statement ml does distinguish between expressions and statements and this really is an expression you could also factor it this way.
26947 	X	case index val x in calc value calc value calc value r.
26948 	X	also because ml does not require parentheses around function arguments you could even write it this way.
26949 	X	case index val x in calc value calc value calc value r.
26950 	X	you may think this looks really weird but as ive said in another thread i think weird is often just another way of saying.
26951 	X	andrew koenig ark at research att com http www research att com info ark.
26952 	X	as far as i am concerned the only relevance to this is in considering that there should be a ternary operator which i agree with if it can be done in a readable.
26953 	X	i would also say it is a good argument for not using say.
26954 	X	which would surely be annoying for people switching back and forth.
26955 	X	but that hasnt been proposed of.
26956 	X	i simply think that python should use words and not symbols for this concept which is neither directly derived from mathematical notation nor frequently enough used for the few keystrokes saved to be worth the loss in.
26957 	X	i would in fact use this structure quite a lot in zope web pages and perhaps or times in a typical line python module i might.
26958 	X	i would never expect to need to nest them more than deep or so at most and i would consider it bad style to go much beyond that.
26959 	X	so i simply cant see any practical reason not to use a keyword style whereas the symbolic styles are both harder to remember and to look.
26960 	X	anansi spaceworks http www anansispaceworks com.
26961 	X	aahz aahz at pythoncraft com http www pythoncraft com.
26962 	X	register for pycon now http www python org pycon reg html.
26963 	X	raymond hettinger python at rcn com ha scritto nel messaggio news.
26964 	X	carel fellinger experiments on shudder people.
26965 	X	thank you for sharing it i wont repeat it here but everyone do yourself a favor and read it.
26966 	X	guido is sensitive to this kind of stuff wink notoriously sensitive in fact.
26967 	X	i hope to see more of it.
26968 	X	the colon doesnt play an essential technical role in pythons grammar for statements the formal grammar almost never needs.
26969 	X	its there because usability studies in abc found that programming newbies had trouble with indentation alone denoting block structure but the troubles went away if the block opening statement grew a trailing.
26970 	X	carrying that into an embedded expression seems to make some kind of its the same as sense to python grownups but it couldnt be more removed from the original purpose of the.
26971 	X	tell merel that uncle timmy says shes a very smart person.
26972 	X	otoh she better not find dict displays confusing too or ill retract.
26973 	X	if they can make head or tail out of those trade in your children before the warranty expires wink.
26974 	X	its correctness is obvious to people who actually work on searchdialog py because they know what the code does arguments to mark set have to be location strings as tk defines that term and an empty string doesnt make sense in that.
26975 	X	well if you try to prove that a piece of code is correct when you dont understand what it does its going to be very easy indeed to find not obvious.
26976 	X	whats more surprising to me is that you found half the instances obvious despite not knowing the codes intent wink.
26977 	X	lexy zhitenev zhitenev at cs vsu ru wrote in message news biuvr un at serv vrn ru.
26978 	X	but ok only one keyword then added.
26979 	X	erik max francis max at alcyone com writes.
26980 	X	even with an order of magnitude uncertainty and id think one could do better the frequency doesnt look to impressive does it.
26981 	X	even without bothering to come up with some formal and quantifiable criterion of expressiveness couldnt we just reach the consensus that something that can be trivially and compactly rewritten with existing language constructs isnt all that expressive.
26982 	X	so whats wrong with arguing against polluting and complicating the language with a construct that seems to be both used infrequently and be easily replaceable in those rare instances were it is used.
26983 	X	do you have a better criterion to from the basis for debate maybe one with a more easily defined and empirically investigated metric.
26984 	X	btw although i dont think its immediately relevant here there are formal definitions of expressivness http citeseer nj nec com felleisenexpressive html.
26985 	X	id like to counter with my latest messsage access key correct key granted denied.
26986 	X	theres no confusing it with a.
26987 	X	ifelse is easy for newbies to search for in.
26988 	X	not looks like a function call but.
26989 	X	people might expect arguments not adds new.
26990 	X	got that too cond expr condn exprn true exprotherwise.
26991 	X	and final true is optional so cond expr condn exprn exprotherwise.
26992 	X	and the basic ternary becomes cond expr exprotherwise.
26993 	X	multiary cond expr cond expr expr.
26994 	X	where cond is an expr and its bool expr value is used to decide whether to evaluate the associated expr after the.
26995 	X	if appears next another cond is evaluated but if another appears instead the cond is treated as true and the immediately following expr is.
26996 	X	even if the size of x is close to zero for anyone who has bothered to learn the language.
26997 	X	or are you saying that learning is irrelevant.
26998 	X	sure but the python i know also tends to be about doing things the left to right way.
26999 	X	not me when used properly they really add to the readability of my.
27000 	X	thats part of the problem youre thinking of control flow in the assembly language sense and not in the python.
27001 	X	yes at the lowest levels this is a control flow operator test jump.
27002 	X	but in the higher level python sense this isnt a control flow operator but a choice operator and its much closer to logical operators like and and or.
27003 	X	it has no special characters because the keywords used have the saming meaning as always and its an expression not a.
27004 	X	why do reading and execution order match here.
27005 	X	if they did we would write it something like.
27006 	X	x y w x totuple applyto x append.
27007 	X	its useful markup yes but for what.
27008 	X	for denoting the start of a block and even then its only secondary to the.
27009 	X	iirc the colon was also in abc and some usability studies found that indentation the preceding colon were more readable than just the indentation but either way it is all about denoting the start of a block and has little to do with if.
27010 	X	this made me remember an informal practice with cs conditional operator often the test was such that the most likely case was true and listed first and the pep proposal allows this same practice to carry.
27011 	X	not sure if it matters much but to me the code.
27012 	X	z x foo if x else.
27013 	X	implies in my own code at least that i expect that under normal circumstances x will evaluate to true iow x foo is what i expect to happen most of the time while is more the exceptional.
27014 	X	given that i like the pep proposal more than the c way because the implication of what is expected is.
27015 	X	i like the similarity between these two.
27016 	X	z x foo z x foo if x else i expect z to get x foo most of the time.
27017 	X	after this x for x in range if is special x.
27018 	X	to have this ternary construct x if is special x else y.
27019 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote grab a club and join the chorus evolution is a state of mind oleta adams fauxident http www alcyone com pyos fauxident a faux ident daemon in.
27020 	X	christos tzotzioy georgiou dlnxpegfqveb at spammotel com writes.
27021 	X	i knew i should have read the whole thread before piping.
27022 	X	sigmask version feed this to your.
27023 	X	print reduce lambda xy x chr ord y ojdlwbshjti.
27024 	X	evan evan at am com wrote in message news.
27025 	X	for multiple choices one should use a.
27026 	X	i am favorable to a ternary operator but against a case.
27027 	X	yes you can as you admit.
27028 	X	sorely shorn soon shackled slave samson sighed silently scheming sightlessly seeking some savage spectacular.
27029 	X	up users load average a non text attachment was url http mail python org pipermail python list attachments fc attachment sig.
27030 	X	now however many tom programs that utilize the symbiosis of the new features cant be understood by objective c.
27031 	X	this is perhaps not a big problem when creating a new language but i think it would be a disaster for.
27032 	X	we should avoid the temptation to add syntax especially for infrequently used or esoteric.
27033 	X	that doesnt mean we shouldnt consider adding constructs that have proven themselves in other.
27034 	X	for everything else the best we can probably do is rely on guidos uncanny feel for what is pythonic unlike most of us me included hes got a proven track record wink.
27035 	X	in the above i think perhaps the list comp is causing too much to be done on one line i would probably code.
27036 	X	strs for i in ints strs append.
27037 	X	i dont see the conditional expression as a problem while i do think that some overzelous uses of list comps can be a problem for simple uses theyre a clear win though.
27038 	X	on pep as submitted on other enhancements to the proposal that have been posted on extending the if expr with elif.
27039 	X	for me it would be nice to get conditional expressions into the.
27040 	X	like it or not guidos proposal is probably the best chance at accomplishing.
27041 	X	it is not a bad proposal and all the improvements ive seen suggested have been mostly cosmetic and bickering about these kinds of details seem like a sure way to lose guidos.
27042 	X	for an other proposal to have any chance i would expect it to be obviously far superior to the.
27043 	X	sorry if this comes through as a little conditional expressions are all about concise expression of a simple.
27044 	X	if it isnt a simple choice i can see no purpose in making it concise except for obfuscating the.
27045 	X	as do however i feel obliged to bring up the programming language tom http www gerbil org tom.
27046 	X	it started out as objective c and then through an iterative process added distinct small self contained changes that by themselves were very.
27047 	X	why not have votetakers from both all sides so they can scrutinise each.
27048 	X	i think most people involved in the debate will know how to use cc in their.
27049 	X	the ethical problem can be avoided by having the votetakers vote before they see any.
27050 	X	everyone encrypts their vote and submits the ciphertext the ciphertexts are published via usenet or email everyone submits a key to verify their vote the keys are also published everything is out in the open and anyone can count check the result.
27051 	X	is an open ballot ok though.
27052 	X	i dont consider them good either in case you misunderstood that part.
27053 	X	i was just trying to propose a character fix to what is in.
27054 	X	does the bdfl plan to deprecate and and or then.
27055 	X	somebody liked it well enough to create it.
27056 	X	sure in those contexts it will act like true and x.
27057 	X	i take it think that pythons and or semantics was a design.
27058 	X	anders ah but i have a fix in store for that from the last time this was anders discussed require parens around the.
27059 	X	anders if comparison if expr else if expr anders expression.
27060 	X	anders and replace expression list with if expr list in parenth form and anders perhaps also in string conversion and subscription but not in anders assignment stmt return stmt yield stmt.
27061 	X	because this proposal is incomplete i dont know how to evaluate it but i think that if you fill in the details you will find it to be larger than.
27062 	X	using the grammar in the compiler i am proposing to change the following.
27063 	X	expr stmt testlist augassign testlist testlist test and test or and test lambdef.
27064 	X	expr stmt utestlist augassign testlist testlist test uncond test if test test elif test else test uncond test and test or and test lambdef utestlist uncond test test.
27065 	X	i think the differences between our suggestions would show as follows.
27066 	X	anders x if a b else c d perhaps legal or perhaps you need anders x if a b else c d legal.
27067 	X	anders print if a b else c perhaps legal.
27068 	X	anders f if a b else c d legal d is the second argument to f.
27069 	X	anders if if a b else c very illegal.
27070 	X	anders i think requiring parens like this would be a good idea with all anders syntaxes lest we want to see anders if a if b if c else d else e.
27071 	X	this example is obviously illegal on several counts not the least of which is the missing colons so im not.
27072 	X	andrew koenig ark at research att com http www research att com info ark.
27073 	X	i guess if the colon makes it look too much like a dictionary which i agree it probably does a question mark would probably be.
27074 	X	im not really for the idea it just doesnt offend.
27075 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote i always entertain great.
27076 	X	robert frost a personal guide to online multiplayer first person.
27077 	X	i was against inline if from the beginning however i hoped to see some nice appleaing syntax for it and even proposed some.
27078 	X	but now i see it is failing nobody came with good proposal.
27079 	X	sincerely yours roman a suzi petrozavodsk karelia russia mailto rnd at onego ru.
27080 	X	as ive said before im roughly on any proposal that meets my.
27081 	X	aahz aahz at pythoncraft com http www pythoncraft com.
27082 	X	register for pycon now http www python org pycon reg html.
27083 	X	while i object to requiring parentheses around all if then else expressions generally it would be easy to make the grammar require parentheses around nested.
27084 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
27085 	X	read more like a petty jab in protest of the pep thread rather than an uproariously hilarious.
27086 	X	i do like the unidentified people appreciated it rebuttal though very.
27087 	X	problem is i never said anything about mocking the bdfl so forgive me if i dont find this comeback particularly.
27088 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote no man quite believes in any other.
27089 	X	h l mencken bosskey net counter strike http www bosskey net cs a personal guide to counter.
27090 	X	dale strickland clark schreef op zaterdag februari om.
27091 	X	in natural language there will always be more than one way to do.
27092 	X	that is good because language would get boring.
27093 	X	in a programming language there is also always more than one way to do.
27094 	X	this is bad however because its not easy to read.
27095 	X	so the number of ways should be minimized should be more than however.
27096 	X	asperger syndroom een persoonlijke benadering http people nl linux org gerrit het zijn tijden om je zelf met politiek te bemoeien http www sp nl.
27097 	X	gerrit i disagree because maybe both x and y are in all cases a bad gerrit way to write it so that its not necessary to enlarge the gerrit language so that x can be written as y if z is still.
27098 	X	heres a different example that you may find more.
27099 	X	recall that many programs take file names as parameters and some of those use the convention that if the file name is the program should process the standard input instead of opening a.
27100 	X	suppose we want to print the identity of the file that we are about to.
27101 	X	in other words we want to print processing followed by either stdin or the file name depending on whether the file name is.
27102 	X	then i would like to be able to write this.
27103 	X	you might claim that it is better to write.
27104 	X	print processing if filename print stdin else print filename.
27105 	X	if filename printname stdin else printname filename print processing printname.
27106 	X	def printname filename if filename return stdin return filename print processing printname filename.
27107 	X	the time to factor out the concept of the printable version of a filename is when you know youre going to use it more than once and possibly more than twice.
27108 	X	of course i dont consider this argument to be.
27109 	X	there isnt going to be any proof in this discussion because the whole question is always about which of two equivalent forms to.
27110 	X	andrew koenig ark at research att com http www research att com info ark.
27111 	X	hmm what if bools grew an if method.
27112 	X	z x y if whentrue whenfalse.
27113 	X	this strikes me as much more elegant than the other.
27114 	X	hans base decodestring dvybxlazwfydghsawrlmlda decode for email address the pythonic quarter http www awaretek com nowak soon http zephyrfalcon org.
27115 	X	im not sure i like the idea but assuming i did i think it would be better to have an explicit else instead of the bare dangling default.
27116 	X	i think that to maintain readability we need to add a.
27117 	X	as when is surely less likely to be used as a variable name than yield could we not treat it in the same way as the introduction of generators and for one would need from future import ternary or similar.
27118 	X	this message is checked for all known viruses by the messagelabs virus scanning.
27119 	X	on the contrary common lisp was for instance the first object oriented language to have an ansi.
27120 	X	yes i know you dont really mean standard you mean average.
27121 	X	well if it comes to that python isnt standard.
27122 	X	its easy to write and easy to read for instance those characteristics arent standard.
27123 	X	ah yes providing the facilities needed to program in functional style when appropriate as well as those needed to program in imperative style when.
27124 	X	and of course a million miles away from anything in.
27125 	X	it wouldnt do to think about such a language in connection with python would it.
27126 	X	we shouldnt consider the semantics of lisp as any sort of precedent because it uses unusual.
27127 	X	yup that sure makes a lot of.
27128 	X	thats what happens in statically typed languages like c and pascal and.
27129 	X	its standard only in so far as static typing is standard.
27130 	X	python as you may have noticed is not a statically typed.
27131 	X	so whats standard in other dynamically typed languages.
27132 	X	by the way i mean that the examples werent chosen to produce the results i.
27133 	X	before i checked i thought smalltalks boolean operations were unlike pythons and i had no idea which way javascripts.
27134 	X	i chose the first four dynamically typed languages that occurred to.
27135 	X	in most of the lisp family and and or behave as they do in.
27136 	X	in perl and and or behave as and and or do in.
27137 	X	in smalltalk and and or are methods on boolean.
27138 	X	they behave as much like pythons and and or as they could given the fundamental differences in the languages in particular they short circuit and they may return a result of any.
27139 	X	in javascript and behave as and and or do in.
27140 	X	i think its clear whats standard in this.
27141 	X	gareth mccaughan gareth mccaughan at pobox com sig under construc.
27142 	X	on feb alloydflanagan at attbi com a lloyd flanagan wrote in comp lang python in article.
27143 	X	i agree also with a preference for the when over the.
27144 	X	from a readability standpoint it would certainly clue someone who was not familiar with that operator into the fact that it was a different construct that they should look up if they didnt just intuitively get it or wanted to get the official word on the matter.
27145 	X	however i can see good reasons for not introducing new key.
27146 	X	i do so dislike it when new features are introduced that break older.
27147 	X	and i do not have the experience in this area to really have a feel for whether the new keyword would break.
27148 	X	therefore i am more than happy to go along with either.
27149 	X	i think this tactic may help to prevent the vote from ever taking.
27150 	X	sheila king http www thinkspot net sheila http www kgroups org.
27151 	X	i like this except that it doesnt short circuit.
27152 	X	good questions although your prename cousin does have a.
27153 	X	othoh nobody questioned that its quite possible to mess up todays ternary op.
27154 	X	they are inherently messy imo and so would the bugs we encounter in a pep world.
27155 	X	lets stay binary or even unary as much as.
27156 	X	maybe the voting should be accompanied by pleadings titled andrew versus andrew.
27157 	X	as i stated on another thread damn i was trying not to get involved in this too much i have yet to read a ternary which relies on short circuiting without needing to think hard about.
27158 	X	anything which participates in a short circuiting expression should behave identically if the short circuiting were not.
27159 	X	short circuiting should be an optimisation.
27160 	X	you shouldnt have side effects in a short circuiting.
27161 	X	but add the condition that usually when asked it turns out the person who asked the question didnt realize there was another better answer which was available in python without using the ternary if else expression.
27162 	X	x if x y else y when min xy is available or.
27163 	X	hex c chr i if i else i when hex c abcdef i and hex c x i both.
27164 	X	therefore this proposal must take into account that people will use it incorrectly based eg on experiences in other langauges to the overall detriment of the.
27165 	X	as a cobol programmer i want.
27166 	X	if a less than thing elif less than thing elif some other thing else not appearing in the above code.
27167 	X	python does completely the wrong thing with.
27168 	X	and now back to the pep.
27169 	X	i would not call lambda syntax felicitous and its an heavyweight.
27170 	X	my benchmark for what i would live with is.
27171 	X	substitute and and or with something appropriate and.
27172 	X	again the ternary short circuiting cond op imo should belong to the and or.
27173 	X	well of course the final result is c and not c.
27174 	X	why well maybe its just me but ive got this impression that the ternary operator should have a very low precedence like or.
27175 	X	the result is obvious because you know that and binds stronger than or.
27176 	X	ternary operators are like a dual or so they should have aproximately the same.
27177 	X	this allows all expressions to resolve before attacking the if else.
27178 	X	andrew koenig ark at research att com ha scritto nel messaggio news yuisvqhbgg fsf at europa research att.
27179 	X	brilliant youve just made the problem worse.
27180 	X	this is true but theres more to booleans than just standardized.
27181 	X	we all could live with false true but their introduction makes them a full fledged.
27182 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote whoever contends with the great sheds his own.
27183 	X	http www pollywannacracka com the internet resource for interracial.
27184 	X	i read the following with interest and started considering some.
27185 	X	the above defines two binary operators then and else and a ternary operator else.
27186 	X	the question which occurred to me is since the ternary operator is formed by what looks like two binary operators can the action of the ternary operator be defined in terms of the actions of the two binary.
27187 	X	in other words does the expression.
27188 	X	a then b else c the ternary operator.
27189 	X	a then b else c two binary operators.
27190 	X	a then b else c two binary operators.
27191 	X	the answer is no all three expressions evaluate to different.
27192 	X	now we are used to disambiguating expressions with multiple binary operators by considering the precedence and left or right associativity of the operators.
27193 	X	that is a b c evaluates as a b c and a b c evaluates as a b c.
27194 	X	however in this else expression something which looks like and could be legitimately parsed as two binary operations in fact cannot be disambiguated by either application of parentheses and must be treated as a ternary.
27195 	X	these rules whatever thay may turn out to be would probably be more complex than id like to see in.
27196 	X	here is a truth table for the three.
27197 	X	the table not only tells the truth value of the result but shows in parentheses which term is returned to express that truth.
27198 	X	note that the three columns r s and t all differ for at least some set if input.
27199 	X	a b c r s t f f f f c f a f c f f t t c f a t c f t f f c f a f c f t t t c f a t c t f f f b f c f c t f t f b t c t c t t f t b t b t b t t t t b t b t b.
27200 	X	r a then b else c s a then b else c t a then b else c.
27201 	X	gary herron gherron at islandtraining com.
27202 	X	i kind of like it but the then word is not ideal.
27203 	X	to express conditional evaluation i the short circuit aspect perhaps a little change.
27204 	X	or a picks b else c.
27205 	X	skipping other stuff for the moment.
27206 	X	i am currently proposing a multi condition expression whose ternary form would be spelled.
27207 	X	targetvar condition condition result result result.
27208 	X	targetvar condition condition result result result.
27209 	X	the full deal is c v c v c v true vdefault.
27210 	X	but true is optional as a tail condition spec resulting in the simple c vtrue vfalse ternary.
27211 	X	samuele pedroni pedronis at bluewin ch writes.
27212 	X	i see that as evidence that a conditional expression is really needed if the std lib is so full of kludgy workarounds for its.
27213 	X	erik max francis max at alcyone com wrote in message news ec cadaa at alcyone.
27214 	X	you are correct i did spell the x and y differently but more.
27215 	X	the form above is spelt slightly different to most because the c is the reverse of most other.
27216 	X	x if c else y x is the norm and is selected if c is true.
27217 	X	in my form above x is still the norm in cases where that has a meaning but the condition c selects the abnormal case y.
27218 	X	the most common case of reading code is to get the overall meaning hence the normal case goes first.
27219 	X	when reading the code to see why the alternate path is taken you are interested in the cause for the alternate path so the alternate path condition is stated in the ve and goes at the end of the line where it is visible when reading code to see the possible paths values you want to see the alternative values close together hence the x or y bit.
27220 	X	point above is very interesting to.
27221 	X	b val sqrt x or imag if x.
27222 	X	now when i read these bits of code i think ok val is getting set to sqrt x.
27223 	X	wait things are more complex val might get set to something.
27224 	X	now in form a and analogous ones i see the condition x and in order to see the problem were avoided i have to invert the condition ah if x then the sqrt will blow up whereas in form b the condition is already in the right form to see the cases you want to.
27225 	X	i guess what i am asserting is that conditionals are usually used to select an alternate value when the normal value wont work for some.
27226 	X	the most common question you have when reading the code is what is the reason.
27227 	X	in the a form i have the additional burden of reversing the condition to get at the.
27228 	X	in my view almost all conditional forms are easy to write and easy to think of while you.
27229 	X	the big difference between forms is how they seem when you read then from the different perspectives.
27230 	X	yes this form is the reverse of most other suggestions although it parallels the selection pattern x y index but that doesnt matter in and of itself since only one form at most will ever be.
27231 	X	i would think we will see them all by the end.
27232 	X	splitting an expression so its spread over your code is a very good way of introducing inefficiencies and.
27233 	X	and now the reader has to hunt around looking for the function to understand whats going.
27234 	X	dale strickland clark riverhall systems ltd.
27235 	X	were this written as an if else statement the needless code would more likely have been cleaned up i think because the decision point stands out.
27236 	X	i also observed places where the.
27237 	X	idiom in c does not naturally fit a if else expression in python because python is a different language than c as in the following assume the precondition that i.
27238 	X	if i hex c chr i else hex c chr i.
27239 	X	which in an pep world will likely be written as.
27240 	X	hex c chr i if i else i.
27241 	X	i find this to be less readable than the first case and even less readable than the more pythonic imho.
27242 	X	and i and others pointed out places where an if else expression could be used but shouldnt because the code was less.
27243 	X	in that case i assigned a somewhat low probability i think that the less readable option would be.
27244 	X	were there low chance of misuse i would not be too.
27245 	X	however it is this high likelihood of misuse which causes me to be against this syntax and to keep posting these.
27246 	X	i generated two sets of statistics use of if else statements if else expression short circuiting if else expression likelihood of misuse of the if else expression given more appropriate python idioms.
27247 	X	the later numbers suggest that whe i do deal with them in other peoples code then there is somewhere between a to that it will be be used in place of more appropriate python.
27248 	X	this is based on observing the misuse of in existing c code as in the following translated into python.
27249 	X	n obj count if obj is not none else skip a few lines print obj name.
27250 	X	i understand what youre saying but this is far from the first time this is.
27251 	X	this may be the canonical discussion but i seriously doubt any truly new information will be.
27252 	X	i think id prefer an explicit radio button set for each alternative to be voted.
27253 	X	in this thread we just developed.
27254 	X	there it was andrew dalke i.
27255 	X	i think good real world examples and some statistics cant hurt for sorting out the situation.
27256 	X	anyway i try to step back from further pep discussions for the time beeing second try.
27257 	X	i just go to sleep that should.
27258 	X	this discussion has helped me on several accounts and especially recognizing that i like python to not be an expression oriented.
27259 	X	let nice statements and indentation do the job so we dont regularly have to stop parsing some super clever expressions.
27260 	X	frequency of usage is not a good.
27261 	X	what counts is having the right tool for the job when you happen to need.
27262 	X	just for a funny counter example in my standard installation of mandrake on usr lib python i got the following counts.
27263 	X	lines of code occurrences of continue occurrences of break occurrences of.
27264 	X	does any of the above mean that continue break or pass arent worth to be part of the language.
27265 	X	seriously its too easy to get confused with.
27266 	X	carlos ribeiro cribeiro at mail inet com br.
27267 	X	steve holden sholden at holdenweb com writes.
27268 	X	after a brief initial flurry of interest in this topic i decided that there was too much heat and not enough light and dropped.
27269 	X	i intend to stay out but id just like to add my support for normans.
27270 	X	its very eloquent and well thought.
27271 	X	the only thing i differ over is the vote at the.
27272 	X	i personally dont feel that a consitional operator is that important and i loathe the if c x else y.
27273 	X	so my votes would be something like.
27274 	X	no conditional operator x if c else y any other proposal.
27275 	X	furthermore explicit is better than implicit if you want a none default then write it.
27276 	X	how much extra typing is else none.
27277 	X	worse than that to a perl programmer it looks like the statement.
27278 	X	that is it has no effect on the creation of activity if hungry is.
27279 	X	allowing the else clause to be optional just increases confusion for a tiny benefit in reduced.
27280 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote life is an effort that deserves a better.
27281 	X	karl kraus alcyone systems san jose.
27282 	X	erik max francis max at alcyone com writes.
27283 	X	my general impression is that the first vote will be about.
27284 	X	but if of people want a conditional operator thats an awful.
27285 	X	yeah but if of people think that the conditional operator is so terrible that theyre not even willing to allow other people to use it thats an awful lot.
27286 	X	i am sorry to observe that brain storm on good suggestion for inline if.
27287 	X	this clearly says that time has not come for inline.
27288 	X	sincerely yours roman suzi rnd at onego ru my ai powered by linux redhat.
27289 	X	the only issue i see here parser wise is that if someones wacky enough to use the expression as a standalone statement as mentioned in the pep itself albeit with the if c then x else y form not the if c x else y form were talking about here itd take a bit of lookahead to realize that what youve got is an expression not a.
27290 	X	requiring parentheses would eliminate that case faster without the lookahead since you damn sure cant have an if statement following an open.
27291 	X	as i mentioned i dont know enough about the parser internals to know whether that would really be a significant.
27292 	X	the more i look at it the more i like.
27293 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote patiently im still holding out until sandra victor a lambda calculus explorer in.
27294 	X	fact of the matter pep as written with the elif clause is an n ary.
27295 	X	james j besemer voice ne skidmore fax portland oregon mailto jb at cascade sys com http cascade sys com.
27296 	X	the best expression for this is y x.
27297 	X	math sqrt x so yes to condition.
27298 	X	william park open geometry consulting opengeometry at yahoo ca linux solution for data management and.
27299 	X	id like to put in a plea for re instatement of the original proposal.
27300 	X	which i found to be particularly.
27301 	X	its concise it reads well it means just what it says it resonates with similar constructs in english and.
27302 	X	it slots nicely into the syntax without requiring any new reserved words else can be a pseudo keyword.
27303 	X	its meaning should be dead obvious even to someone whos never seen it.
27304 	X	the main objection that the test is in the middle doesnt bother.
27305 	X	in fact its precisely that creative leap which makes it such a refreshingly elegant idea for.
27306 	X	it dares to be different and in the process neatly solves a.
27307 	X	on the other hand the current proposal.
27308 	X	while workable is rather dull and.
27309 	X	its also a lot less concise requiring extra characters all of which are rather intrusive looking.
27310 	X	it feels awkward and clumsy by.
27311 	X	right now i think im on the original form and on the current.
27312 	X	having said all that im willing to trust guidos intuition on this provided that he really is using his intuition and he hasnt just rejected the original form in order to appease those who didnt like the test in the.
27313 	X	so guido do you really feel that the current proposal is better than the original one.
27314 	X	if you can promise me that then ill consider voting for acceptance when the time.
27315 	X	greg ewing computer science dept university of canterbury christchurch new zealand http www cosc canterbury ac nz greg.
27316 	X	but if the above is more likely than this means it will happen much too.
27317 	X	and i argued that learning python in a pep world might have this effect because nobody cares for and or behaviour and just uses the well known ternary.
27318 	X	just because you and all the others in the thread that another idiom does not mean.
27319 	X	many were looking for ternary ops and then came to and or.
27320 	X	you are confusing bitwise orerations which.
27321 	X	boolean operations have the lowest priority of all python operations.
27322 	X	expression or test lambda form or test and test or test or and test and test not test and test and not test not test comparison not not test lambda form lambda parameter list expression.
27323 	X	hey did you realize what my message is about.
27324 	X	i am talking of a better alternative not and and or.
27325 	X	ciao chris christian tismer mailto tismer at tismer com mission impossible oftware have a break.
27326 	X	take a ride on pythons johannes niemeyer weg a starship http starship python net berlin pgp key http wwwkeys pgp net work home pager pgp xfbf fe d cff b cc ab f bf whom do you want to sponsor today.
27327 	X	you need to argue that not just claim.
27328 	X	aahz aahz at pythoncraft com http www pythoncraft com.
27329 	X	register for pycon now http www python org pycon reg html.
27330 	X	no now the functionality has changed from returning not specified to.
27331 	X	besides its not just a matter of if the same functionality can be produced using a different approach its also about expressing intent of the code and its.
27332 	X	for example if i were hunting for a bug in code that used your not x and example above realistically id slow down and review that piece over and over again each time as its not that obvious what is happening there to me at least.
27333 	X	right i think thats the difference between our two.
27334 	X	imo the conditional operator would supercede the simulated conditional.
27335 	X	so you dont end up with two valid possibilities you end up with the normal way to do it and the more hacky way to do.
27336 	X	see i regard the conditional operator as something that is missing from the language so by adding it a hole is filled so the workaround doesnt need to be used anymore yes old code will still have it but so what.
27337 	X	i still have old code laying around that imports the string module.
27338 	X	its the same as with any other feature that was once missing but gets.
27339 	X	i understand that both have the potential for abuse but to me the old way is an.
27340 	X	to me this is a readable and clear idiom.
27341 	X	but going beyond that in terms of complexity and relying on implicit precedence rules instead of grouping with parentheses is much less obvious and easier to screw.
27342 	X	been considering the latest syntax which as i understand it allows.
27343 	X	get the ple of names value and who owns it a the value can be cached or in the database if is cached.
27344 	X	get cache name else self connection fetch name get it from the database.
27345 	X	the ownership is stored in the database if the name starts with db or from the web service if x startswith db self connection get owner name else self webservice get owner by name name.
27346 	X	that is code which in the small looks like normal python if else statement is really an if else expression.
27347 	X	well since that was in fact how i wrote wink.
27348 	X	it reads the way we think at least in.
27349 	X	it takes years of experience to learn to think of it in mercilessly refactored until theres no redundancy left form and then more years to see the foolishness of pushing it that far in every.
27350 	X	btw i wanted to say somewhere in this thread that im not at all sure whether id choose to write any of these candidates using the ternary.
27351 	X	the sep example is probably the most likely one assuming it was actually written with only a single use of sep.
27352 	X	i suspect it used to be used at least twice in an earlier.
27353 	X	i know that this would be useful for lambdas but i seem to have rewritten all such uses or maybe overlooked them i wasnt specifically looking for that sort of thing alas.
27354 	X	thats one flaw in this survey its on a body of code that has mostly been rewritten well heavily refactored anyway at least by someone who loathes the existing kluges enough that i very likely tried them and got rid of probably back in august september when i was excited about some of that stuff from having just read the.
27355 	X	i know a fair number of lambdas vanished as list comprehensions came into vogue here.
27356 	X	i know i have had to write a function for things that would be trivial inline lambdas with the pep extension but theyre all gone.
27357 	X	so the candidates i found are probably all near misses int he first.
27358 	X	its not easy to find good existing examples for a language feature that doesnt exist.
27359 	X	andrew koenig ark at research att com wrote in message news yusmusakrf fsf at europa research att http www research att com info ark.
27360 	X	on feb rumours say that aahz at pythoncraft com aahz might have written.
27361 	X	your outlaw wedding is blessed otherwise you would get flamed on usenet.
27362 	X	holger krekel pyth at devel trillke net wrote in message news.
27363 	X	one of the most compelling one line counter arguments ive ever seen.
27364 	X	at nwrddc gnilink net i suggest cond val val.
27365 	X	aahz i still have yet to see a clear explanation of why aahz short circuit is.
27366 	X	because computing the unwanted branch might be expensive or might modify state or.
27367 	X	just imagine youre entering a state of the art car wash.
27368 	X	paul rubin phr nb at nospamnightsong com wrote in message news xcmyll fsf at ruckus brouhaha much dont but up.
27369 	X	when i first saw this i thought it was horrible you can hardly tell that the is.
27370 	X	about two hours later i thought wait a minute you dont really need to see that the is its mostly irrelevant except when you are particularly interested in the delayed evaluation.
27371 	X	lazy evaluation should be almost invisible because it is a semantic pass.
27372 	X	i await the next two hours with interest to see if i completely change my mind.
27373 	X	this makes the parsing process ambigous because an expression can also be a.
27374 	X	the parser would still have no idea at yep what it is dealing.
27375 	X	is the result of some editor accident.
27376 	X	in article eb at news bluewin ch.
27377 	X	david eppstein uc irvine of information computer science eppstein at ics uci edu http www ics uci edu eppstein.
27378 	X	i myself have specifically avoided it in my python code precisely because it looks like a.
27379 	X	i tend to eschew combinations of punctuation and a keyword but this has already been suggested in the form c x else y.
27380 	X	seems superior to me than simply because could more easily be confused with at first.
27381 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote do not seek.
27382 	X	dag hammarskjold esperanto reference http www alcyone com max lang esperanto an esperanto reference for english.
27383 	X	in my other posting to this thread i ended with.
27384 	X	i guess that the design prinicples of python in.
27385 	X	thats ok but i like them.
27386 	X	so i am not claiming that the cited reasons are objective but still they are good reasons because they are based on the commonly appreciated design principles.
27387 	X	some people even claim they have no problems reading perl.
27388 	X	i guess i appreciate it if other programmers are kindly enforced to use indentation to express their intention regarding conditional computations in an.
27389 	X	of course myself i would only use it.
27390 	X	still against the idea but what about.
27391 	X	reads in the right order the can be recognized by the parser else already exists and you can figure the context given any two terms that is cond true expr true expr else else false expr.
27392 	X	are all obviously part of an if else expression and nothing.
27393 	X	in article bdp gm at slb atl mindspring net.
27394 	X	except that you managed to both reverse the sense of the comparison and the sign of the value returned if the comparison is false.
27395 	X	not that i noticed that right away it took me a few moments to work through exactly what you wrote.
27396 	X	im not trying to pick on you just point out that the longer form written over three lines is easier to.
27397 	X	but id slap anybody who tried to bring something like that to a code review.
27398 	X	make that to cater for those who have no preference at all on a particular.
27399 	X	of course i wont be such a.
27400 	X	on having a ternary at all was but found an option i liked.
27401 	X	on having a short circuiting ternary ive yet to find something that relies on short circuiting in a ternary which didnt require me to think hard about what was going on control flow should be explicit.
27402 	X	on all syntax proposals which are not of the form test true result false result.
27403 	X	where if obviously needs to be replaced with something else e g.
27404 	X	which of course will not be an option in the voting because it doesnt short circuit.
27405 	X	carel fellinger carel fellinger at chello nl writes.
27406 	X	the following looks better even better were it to fit on one line else een westerse datum kind julian if self reform none or date self reform else gregorian self query append letop amerikaanse volgorde maand dag jaar cf dag calendar absolute from s d g d kind date date date reminded by examples in other postings in this thread i realize that kind julian gregorian self reform none or date self reform even looks better.
27407 	X	it may look better but it means the.
27408 	X	has anyone pointed out that your can do ternary operators using.
27409 	X	i dont expect this will be treated as a solution to this extensive debate but it is a.
27410 	X	ive been carefully recording the propositions but not who suggested them mostly because many of the forms are suggested independently and so proper and fair credit can be problematic.
27411 	X	if sean was indeed the one that suggested the when else syntax alternate to the initial if else proposition then all ive said is redundant and i hereby retract it.
27412 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote suffering is a journey which has an.
27413 	X	http www pollywannacracka com the internet resource for interracial.
27414 	X	yes cond or else yes cond or else no.
27415 	X	decision true value yes or false.
27416 	X	and operation or unwraps decision if it has true and returns no is it is.
27417 	X	decision true value yes or no gives yes.
27418 	X	sincerely yours roman suzi rnd at onego ru my ai powered by linux redhat.
27419 	X	jamie ah of course an expression returns a value duh.
27420 	X	i see the jamie motivation better.
27421 	X	still i can imagine that it would get jamie ab used in contexts where the result was ignored just as an jamie alternative conditional.
27422 	X	i guess its not much different from abusing lambda expressions in contexts where ordinary functions would be.
27423 	X	andrew koenig ark at research att com http www research att com info ark.
27424 	X	i really dont have much sympathy for that.
27425 	X	if you want to understand a language you will need to know.
27426 	X	you cant expect to pick up a few basic terms and hope to understand.
27427 	X	youd be criticising novellists next for using words that arent in your vocabulary or refusing to learn french because people will use words you havent learned.
27428 	X	will people grow up about this.
27429 	X	how hard is it to understand a bit of computer code.
27430 	X	dale strickland clark riverhall systems ltd.
27431 	X	in the portion you clipped i acknowledged that im sure that that syntax is used occasionally my point was just that it is so rare as to be totally irrelevant especially given that the guy i was pointing that out to was someone who favored frequency based arguments for rejecting a conditional.
27432 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote if you cant fight and you cant flee.
27433 	X	robert elliot physics reference http www alcyone com max reference physics a physics.
27434 	X	i am part of a team of very productive programmers who write a lot of python and a few other languages.
27435 	X	if a programmer threw a tantrum every time he came upon a construct he didnt understand wed never get anything.
27436 	X	you figure it out and get.
27437 	X	but were lucky we have access to the.
27438 	X	we can find solutions to most things.
27439 	X	some problems even require effort but we.
27440 	X	we take great pride in our code and there is a lot of peer code.
27441 	X	if your code doesnt stand up is ugly awkward poorly commented or buggy you get chastised.
27442 	X	dale strickland clark riverhall systems ltd.
27443 	X	agreed though guessing what x and y else z means is not exactly.
27444 	X	the goal with this idea is to fix the one problem with the current ternary op idiom not to introduce new clean.
27445 	X	i can understand that you generally dislike the behaviour of current and or expressions not returning.
27446 	X	but its there and its impossible to deprecate it even if we.
27447 	X	adding a new expression syntax of its own right and with its own set of pros and cons for a minor feature gvr just doesnt seem right to.
27448 	X	c is the conditional test x is the expression to evalute if it is true y is the one to evaluate if.
27449 	X	whether or not youre crazy about the choice of symbols that is utterly.
27450 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote if you cant fight and you cant flee.
27451 	X	robert elliot physics reference http www alcyone com max reference physics a physics.
27452 	X	raymond hettinger vzerxy at verizon net wrote in message news.
27453 	X	on the gripping hand ive already made two comments so i need a third hand i find i prefer.
27454 	X	if cond then exp elif exp else exp.
27455 	X	it gives a sentinel on the left that tells exactly whats coming if and it gets rid of the annoying.
27456 	X	it also adds in the elif.
27457 	X	in late when i was young and foolish note i still am i tried writing a pep for a ternary.
27458 	X	i attempted to get a consensus on c l py and then write up that consensus and of course i failed utterly to obtain any sort of consensus so it never got.
27459 	X	the only thing i really accomplished was to convince myself what should be done and the reasons.
27460 	X	i share that with you now in hopes that it will convince people that we should accept pep.
27461 	X	there are lots of arguments against having a ternary expression and i do not find them.
27462 	X	here i will list the main objections i heard last time around and respond to.
27463 	X	you can already achieve the same thing with an if statement.
27464 	X	and thats why any decent arguments in favor of a ternary expression must show why its good to have in addition to the if.
27465 	X	what workaround are you talking about.
27466 	X	x condition and a or b.
27467 	X	then it fails whenever bool a could be.
27468 	X	def ternary condition value value if condition return value else return value x ternary condition a b.
27469 	X	then it fails because it is not short circuiting both a and b are evaluated regardless of condition.
27470 	X	if you meant any of these.
27471 	X	x condition and a or b.
27472 	X	x condition and lambda a or lambda b.
27473 	X	def ternary condition f f if condition return f else return f x ternary condition lambda a lambda b.
27474 	X	then you should be ashamed of yourself try explaining any one of them to a.
27475 	X	and anyway python is known for its readability and tricky to understand workarounds should not be our standard approach to.
27476 	X	better spellings exist than val if condition else val.
27477 	X	in doing the pep last time i collected numerous proposed.
27478 	X	none were perfect here is each with its weaknesses.
27479 	X	same as c c and java not readable except to c java programmers uses punctuation in odd ways is already overused.
27480 	X	val still uses punctuation in odd ways still not readable.
27481 	X	c if condition then val else val readable probably requires new keyword perhaps soft keyword ambiguity with if statement could make it hard to read ambiguity with if statement makes it impossible for pythons parser.
27482 	X	d if condition val else val overuse of ambiguity with if statement could make it hard to read ambiguity with if statement makes it impossible for pythons parser.
27483 	X	e if condition val val overuse of already mean grouping and tuples thats enough already meaningful in pythons current syntax.
27484 	X	f val when condition else val reads like english new keyword condition evaluated first but is textually in middle.
27485 	X	g val if condition else val reads like english condition evaluated first but is textually in middle.
27486 	X	if you throw out the unparsable avoid innovative uses for punctuation that are difficult to read and dont want to introduce a new keyword youre left with g.
27487 	X	its only real flaw is that condition appears in the middle but nothings.
27488 	X	thats why guidos pep proposes g.
27489 	X	quit changing python i liked it as a small language.
27490 	X	if you compare the introduction of a ternary operator to recent changes its a much smaller change than the introduction of list comprehensions or introducing.
27491 	X	it wont break any code like fixing division.
27492 	X	it is not a deep and powerful change like nested scopes or new style.
27493 	X	about the only change its comparable to is the introduction of.
27494 	X	theres no new conceptual overhead not a deep or confusing idea like metaclasses i understand why some might like to slow the changes to python but this is not the right change to object.
27495 	X	my answer is still that i would prefer neither and i can tell them no that isnt very good code and you shouldnt do it either way.
27496 	X	but thats okay because option requires too much thought for most people to write.
27497 	X	i honestly havent seen any code in my domain which mis used and or in this.
27498 	X	and rarely seen it in code outside my.
27499 	X	andrew my scan of the linux source suggests that most uses of.
27500 	X	are of this andrew sort eg andrew could be written in python as andrew en dis mode wanted.
27501 	X	yes they could be but in the process of translating the code you inverted the condition.
27502 	X	the original yields en if mode wanted is true and the rewrite yields en if mode wanted is.
27503 	X	to me that fact is a strong argument in favor of pep.
27504 	X	andrew koenig ark at research att com http www research att com info ark.
27505 	X	now that you mention it yeah it does alert the reader that something is going.
27506 	X	i suppose its just the repitition of if i dont care.
27507 	X	if when c then x else y do.
27508 	X	someone suggested the latter formulation would cause difficulties in lists and its tough to think of something that would satisfy everyone isnt it.
27509 	X	i dont like that either and if true x false y c do as someone else suggested doesnt appeal to me although it does address your first.
27510 	X	for what meaning of the word straightforward.
27511 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote if you cant fight and you cant flee.
27512 	X	robert elliot physics reference http www alcyone com max reference physics a physics.
27513 	X	a can of worms is good for fishing why load prejudice so heavily against general capability.
27514 	X	imo if a particular ternary syntax generalizes well into an n ary form that is a strength that ought to be considered when.
27515 	X	but theres no way to see that as the minimal ternary form of.
27516 	X	that the single condition plus default of.
27517 	X	given true as an implicit final condition if omitted before the.
27518 	X	imo if a particular syntax forcloses on the possibility of a reasonable readable n ary generalization in a future pep that is a disadvantage that ought to be made apparent to voters even if the pep does not currently go beyond a simple.
27519 	X	also simple ternaries can be compounded legally and imo how the syntax looks and reads compounded ought to be shown to voters not just left to guido to explore and evaluate for himself though thank goodness i am sure he can be trusted to look into those things.
27520 	X	i would welcome a list that shows both ternary and n ary versions as two or three lines per version e.
27521 	X	c x y c expr c expr c expr true exprdefault.
27522 	X	alex martelli aleax at aleax it wrote in news.
27523 	X	or wed reverse the order in the rhs.
27524 	X	i think that it would not be good to change the order depending on two or more elements especialy as true and false.
27525 	X	using it in reverse order also makes it more distinct to false true cond which will be brought up by anyone that has not understand that the solution is short curcuiting or lazy evaluated in this case the later is the better term.
27526 	X	as for parantheses id probably allow both as in the result unpacking already suported as in ab ab ab indexerror for out of bounds indices and i would allow a tuple or a list as variable in the rhs y cond my list.
27527 	X	andrew dalke adalke at mindspring com wrote in message news bdr bv at slb atl mindspring.
27528 	X	as per a different thread where i did the reverse and searched the python code in the python standard library assorted packages on my.
27529 	X	candidates where the conditional expression could be used to replace an assignment lines of code.
27530 	X	so as a rough estimate we get one use per lines of.
27531 	X	the actual usage is probably a lot more common that this as i only looked for the assignment pattern but i would say the in lines is a fairly reasonable.
27532 	X	do you seriously think that anyone will have any difficulty telling the difference in practice.
27533 	X	can you give me a concrete example of what you mean.
27534 	X	i honestly cant imagine what problems you.
27535 	X	one of the reasons ive settled on lobbying for this syntax is that unlike all the others i expect it to be almost trivially comprehensible to anyone who knows the if statements.
27536 	X	instead of training harder youd break the knee caps of a sprinter so you could keep.
27537 	X	dale strickland clark riverhall systems ltd.
27538 	X	andrew koenig ark at research att com writes.
27539 	X	interestingly maybe your example from another post.
27540 	X	didnt need only one of the results to be.
27541 	X	id be interested to know how many real cases would actually rely on short circuit.
27542 	X	and those that dont can quite happily be handled with.
27543 	X	oh and this function is short enough and i expect its use to be rare enough that i see no need for it to be builtin.
27544 	X	but i do agree that if anything justifies the need for conditional expressions its use in lambda and list.
27545 	X	personally i dont see enough of a need to be worth it.
27546 	X	i dont think that the code above is much clearer than the one liner with the ternary.
27547 	X	what i see is that you may be used to sequential programming and so specifying every step seems to be the right way of doing it for.
27548 	X	in my opinion the only thing that the code above buys you is the ability to follow it step by step but that does not mean its much clearer only that it works a few abstraction layers below the one liner with the ternary.
27549 	X	in my opinion the best thing to do right now is to wait a few days for things to settle.
27550 	X	im sure that many people that reacted against it today will get used to the idea fairly quickly specially if we come up with a slightly better idiom this one is quite good but some good candidates for improvement have appeared today and more will come.
27551 	X	sometimes we get used to the new stuff so fast that we cant even understand why did we react first.
27552 	X	carlos ribeiro cribeiro at mail inet com br.
27553 	X	sorry bout that but i thought this tack was different from all the others since it just puts a truth wrapper on an arbitrary term for purposes of logical.
27554 	X	it doesnt otherwise alter any syntax or introduce new forms.
27555 	X	perhaps you saw it as yet another specialized ternary.
27556 	X	x would be a valid expression anywhere just guaranteeing that bool x true but were its normal value in any expression that wasnt testing its logical.
27557 	X	this happens to fix the hole in old ternary idiom but it is not introducing a new ternary form or other complex context dependent.
27558 	X	if x and y or b.
27559 	X	is understandable why not the much simpler logical true wrapper in.
27560 	X	if you understand x and y or b.
27561 	X	i would think x and y or b.
27562 	X	would make you think y would be selected if true whatever y.
27563 	X	if you had read the updated docs on logical expressions and short circuit evaluation you would.
27564 	X	if you hadnt you might post a question on c l p.
27565 	X	on the contrary they are chosen to be a minimal syntax change to define a wrapping operation that happens make the old idiom.
27566 	X	strangely in my programming career ive actually had to read other peoples code.
27567 	X	its freaky i know and obviously im just strange after all you did tell me id be happier with cobol right.
27568 	X	one of the reasons i try to make sure people im working with code in python rather than perl is that i can be sure that pretty much everyone can read each others code without having to worry about strange little pieces of syntactical.
27569 	X	but that must be just my cobol loving.
27570 	X	why do you quote the bad old hack and leave out the better alternative i was proposing and which was the point.
27571 	X	i if x and y or b.
27572 	X	is understandable why not the much simpler logical true wrapper in.
27573 	X	is not readable assuming youre familiar with the old idiom.
27574 	X	newbie obvious no but how long would it take you to learn to use it.
27575 	X	especially since you could just use it and ignore fine points about what would happen if a bare y was logically a false.
27576 	X	this isnt an all statements are expressions language yet.
27577 	X	actually both could be implemented without interfering and we could see how it got used.
27578 	X	yulmrecln fsf europa research att com.
27579 	X	thus answering the question if we let it in will we get code that is hard to.
27580 	X	i want my control flow with indentation.
27581 	X	an html attachment was url http mail python org pipermail python list attachments fac attachment html.
27582 	X	because the and or technique doesnt quite.
27583 	X	instead of rehashing this topic again id recommend you check out the pep on the conditional operator which goes through all the details.
27584 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote she glanced at her watch it was.
27585 	X	aahz aahz at pythoncraft com http www pythoncraft com.
27586 	X	not everything in life has a clue in front of jms.
27587 	X	bobs phrasing of it was obviously overly confrontational but i do find it at least a little unfortunate that the final decision on pep only came indirectly meaning not as any form of widespread public announcement but rather as a side point in a presentation at a local conference and many months after the voting processes was resolved which was in february if i recall correctly.
27588 	X	even the pep on the subject hasnt been updated and only those who attended his particular presentation in a particular conference have found out this decision which of course they communicated to us just now.
27589 	X	mind you after months of silence about the issue its not like the decision should at all be a surprise to.
27590 	X	there isnt a problem that peps and such voting processes are worthless obviously the bdfl has the final say but perhaps it would have been a little nicer to get an official position on the subject.
27591 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote i am a gentlemen i live by robbing the.
27592 	X	best way to answer this is to just read pep.
27593 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote to be adult is to be.
27594 	X	im sorry i was going to let this slide by but this comment made it.
27595 	X	how the hell do you figure europython the biggest python conference in europe and largely equivalent to the size of pycon is a local conference.
27596 	X	by and large i think europython holds half the heritage of the venerable ipcs were way more international than.
27597 	X	announcements of new developments are often done at conferences especially the larger.
27598 	X	it is said multiple times that guido is likely to make an announcement in europython and it was pretty easy to get the answer out on c l py soon.
27599 	X	while the pep will eventually be updated i am glad guido thought it was a higher priority to get out the door in the little time he had between ep and.
27600 	X	guido said that he wanted to let the discussion simmer down before he made an official.
27601 	X	he also did consider the vote if you remember there were a few.
27602 	X	guido chose the one who enforced condorset sp semantics on the results an arguably sane position considering other free software projects use this voting.
27603 	X	according to this interpretation the vote resulted in dont change.
27604 	X	buffy i dont like you hanging out with someone.
27605 	X	riley yeah a lot of young people nowadays are experimenting with.
27606 	X	agile programming language http www python org.
27607 	X	ed avis ed at membled com wrote in message news lwugjime fsf at budvar future i.
27608 	X	as far as i know this is.
27609 	X	lambda expressions are syntactic sugar that allow the embedding of what would otherwise be a def statement within some other statement which would be illegal if not for the sugar.
27610 	X	as a side effect they result in the function getting the default definition name lambda which otherwise would be illegal as a.
27611 	X	aside from this the code and function objects resulting from for example def f x return x and lambda x x are i believe.
27612 	X	many syntactic constructs can be used for more than intended or thought about by the.
27613 	X	syntactically the difference between expression and statement is basic for.
27614 	X	but yes the choice of which program functions appear as expressions and which appear as statements is somewhat arbitrary though not senseless.
27615 	X	if print had been made a function rather that a statement which choice guido did think about then print would be legal in a lambda instead of.
27616 	X	having side effects is not a grammatical category and could not practically be part of a syntactic rule for.
27617 	X	in response to your further comments the choice for python is no lambda which some would prefer partly of the discussion and complaints it engengers and a restricted.
27618 	X	extending lambda to embed even simple statements within expressions is problematical if it were not there would hardly be a need for lambda since that difficulty is its reason for.
27619 	X	a multiline lambda that was fully equivalent to def even if syntactically possible would hardly have any point since a multiline construct would be better pulled out as a separate def.
27620 	X	this conditional selection expression which i have used works as a substitute for part of certain if else statements if and only if bool if expression true which is often true or can be chosen to be.
27621 	X	this was the subject of a thousand posts last february or so final outcome not yet.
27622 	X	for more see pep and c l p discussions.
27623 	X	will this syntax be pursued separately if it does not become the lead nomination for pep.
27624 	X	i wouldnt mind seeing both this switch case syntax in addition to what ive already selected in the pep.
27625 	X	the new netscape browser is now.
27626 	X	upgrade now http channels netscape com ns browsers download jsp.
27627 	X	get your own free personal netscape mail account today at http webmail netscape com.
27628 	X	on tue mar dennis lee bieber.
27629 	X	i saw that as this is worse than no change but not as bad as the.
27630 	X	operator as a way to trade horizontal screen realestate for vertical space as this rationale is in direct opposition to the fundamental principle of.
27631 	X	how does c op b op c when performing a conditional selection operation violate the fundamental principle of readibility whatever that is any more than any other five token expression such as a b c or a b c.
27632 	X	in general python code tends to naturally use less an columns due to its use of line breaks and indentation to indicate.
27633 	X	as a result python tends to be a bit hoizontally slim compared to most languages and i feel this enhances.
27634 	X	for example the if else statement structure requires at least one line per.
27635 	X	in contrast when a line goes past columns in violation of the python style guide it is usually the result of a complex.
27636 	X	and unlike the other operators out there this conditional expression is quite complicated due to is branching.
27637 	X	therefore i would expect that usage of a single line ternary operator would on average increase the fatness of python code and on average increase the insidents of column.
27638 	X	so while i agree we need a construct which allows for conditional logic within an expression i disagree that such a construct should be a one.
27639 	X	i also think that a bulk of the opposition on this list to a ternary expression is somehow related to this stylistic argument perhaps.
27640 	X	and as such id rather not have the baby a conditional expression thrown out with the bathwater one line expressions.
27641 	X	i on autopilot retyped what you wrote but i understood what you were.
27642 	X	as i said it is really beyond the scope of pep it should be in another.
27643 	X	a natural extension of this syntax is to allow one or more elif parts.
27644 	X	if cond expr elif cond expr else exprn.
27645 	X	this will be implemented if the proposal is.
27646 	X	its something that could degenerate to a ternary or trinary but not terinary operator but it in and of itself is a more generalized construct and so is not appropriate for a pep.
27647 	X	if you want to suggest a generalized select when or whatever you want to call it and propose that thats fine but it would be for another.
27648 	X	take people who wanted to implement ternary operators in terms of a special syntax for zero argument lambdas and a new builtin this degenerates to a ternary or can be used as one but really deserved to be suggested under another pep and indeed it.
27649 	X	yes but this isnt a separate.
27650 	X	it requires that each part of the conditional be on its own line and properly.
27651 	X	if cond expr elif cond expr else exprn.
27652 	X	select when cond expr when cond expr else exprn.
27653 	X	this aspect follows from the current python style which favors new lines and indentation to determine.
27654 	X	it provides a defaulting mechanism so that the variable tested lhs doesnt have to be duplicated again and.
27655 	X	rhs expr else exprn this construct is similar to sqls case select and a minor but essentail improvement on the syntax for the case where lhs is duplicated again and.
27656 	X	neither of these differences make it a different pep.
27657 	X	terry erik thank you for taking the time to read the proposal and.
27658 	X	just trying to get some attention i didnt mean to trash the ternary proposal in fact id like to see a conditional expression make it into.
27659 	X	no one has ever disputed that as its painfully.
27660 	X	you can reformulate every conditional operator into a statement or a more convoluted expression the and or tricks with single element lists or lambdas.
27661 	X	the question is if a conditional operator is warranted on its own merits not whether its presence is required to have a turing complete.
27662 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote age aint nothing but a number aaliyah a counter strike server log file monitor in.
27663 	X	its irrelevant what the best voting system would have.
27664 	X	the problem is that second third or sixth votes are not going to change.
27665 	X	only the first vote however flawed one might feel it was.
27666 	X	if one wanted to do follow up votes for ones own edification it would have much been much more advisable to wait until the first vote was complete so that there would be no question of confusion or contention in an already highly contentious and fairly confused.
27667 	X	as it stands multiple concurrent votes where only one counts only leads to.
27668 	X	even if you really think the one vote that counts was poorly.
27669 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote its a mans world and you men can have.
27670 	X	katherine anne porter the laws list http www alcyone com max physics laws laws rules principles effects paradoxes in.
27671 	X	on mar pepvote at hotmail com raymond edit.
27672 	X	i think it is too bad a nested example wasnt.
27673 	X	if the ternary operator is added and python continues relentless world domination i will probably have to puzzle out somebodys unfortunate nested ternary operator at least once in my.
27674 	X	this might give even the most rabid supporter.
27675 	X	it is also too bad that examples of how to helpfully reject all ternary operator forms were not.
27676 	X	there would be cases of rejecting the ternary operator.
27677 	X	horrified but still able to rank in order of least.
27678 	X	these would be people who have been steeled by voting in recent us presidential.
27679 	X	these voters could follow the format of lines through but be spared typing the.
27680 	X	horrified and reduced to lovecraftian psychic jelly by all ternary operator.
27681 	X	these voters could compose obscene ascii art to express the full measure of their contempt and.
27682 	X	or use the single word reject perhaps punctuated by writing the examples in proper old fasioned.
27683 	X	raymond hettinger must not be from.
27684 	X	on tue mar gmt tim hochberg tim hochberg at ieee org.
27685 	X	over any particular syntax yes raymonds choice of words may have been.
27686 	X	overall more people are pro some change than against any.
27687 	X	of those who are pro some change the current pep syntax seems to be the first choice.
27688 	X	it seems that the vote has the worst possible type of outcome it could be interpreted as favoring either factions.
27689 	X	either it supports no change as the no change vote is more popular than any single syntax or it supports making a change as if the particular syntax is considered a less important detail the total votes for change outweigh the total votes against.
27690 	X	the alternative might have involved suicide bombers.
27691 	X	i suppose choose eval could be special cased to take implicit arguments of the locals and globals of the calling.
27692 	X	steven taschuk o staschuk at telusplanet net o.
27693 	X	jack d hammer thisisabogusemail at bogus thisisabogusdomain com wrote in message news.
27694 	X	a vote for no change is a vote for no change for the status quo for limiting choices for conditional selection expresssions to what is currently available such as c and a or b among.
27695 	X	anyone who thinks that c then a or b for instance and my favorite etc is less readable should indeed vote for no.
27696 	X	no problem we just indulge in a bit of listcomp abuse.
27697 	X	a k if k in a else y for y in x if operator setitem a k y or.
27698 	X	greg ewing computer science dept university of canterbury christchurch new zealand http www cosc canterbury ac nz greg.
27699 	X	i saw theres a debate over it and decided to read.
27700 	X	i didnt read much but what i can understand is that it proposes an if then.
27701 	X	so how is it different from whats there already.
27702 	X	if a abs g print a abs str g else print zlib compress str locals.
27703 	X	most examples look good as one liners with short.
27704 	X	they do not look so good with longer.
27705 	X	here is an example z of useful length if abs z of useful length.
27706 	X	else z of useful length the above long name can be expressed in current python in nearly the same number of characters as if abs z of useful length.
27707 	X	z of useful length else z of useful length much more.
27708 	X	but i think you are throwing out the baby with the bathwater.
27709 	X	what is useful about the terinary operator is that for assignments it is clear that the lhs is.
27710 	X	z of useful length select abs z of useful length case.
27711 	X	in this case it is clear that you are making an assignment with two.
27712 	X	this syntax also extends nicely to facilitate more than one.
27713 	X	a python newbie asked me a question about interpreting some code i believe it was some code he ran somewhere to run the coins out of a bag probability problem he didnt say which variant.
27714 	X	he came across a list comprehension which was made even harder to understand since it it involved generating a list of lists he hadnt even been familiar with the operator used to concatenate lists.
27715 	X	when i explained to him what it meant i then showed him the general form of what it can do then showed him some more readable examples like.
27716 	X	name x name for x in people.
27717 	X	at first he remarked how strange that was within a few minutes he was impressed by its power and then by the end of the discussion he said well thats one more reason for me to prefer python to.
27718 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote that it will never come again is what makes life so.
27719 	X	emily dickinson url scanner maintainer and validator in.
27720 	X	probably the principle that if somethings worth doing its worth doing right.
27721 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote the basis of optimism is sheer.
27722 	X	oscar wilde the best hard science web sites that the web has to.
27723 	X	the assignment is spread across lines and the comparison is on lines.
27724 	X	i dont see the baby which is thrown out.
27725 	X	i think my example based on existing syntax is still more.
27726 	X	existing syntax allowing for single lhs is.
27727 	X	def ternary in z if abs in z.
27728 	X	z of useful length ternary z of useful length.
27729 	X	dennisr at dair com http www dair com.
27730 	X	yes i am not exactly impressed with peoples real world demonstrations of how to lie with.
27731 	X	tweak it until you get what you.
27732 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote there is nothing wrong with sobriety in.
27733 	X	john ciardi physics reference http www alcyone com max reference physics a physics.
27734 	X	q accept c and x or y q accept c and x or y sheila king x door quantity and s or data hasattr s open and s readlines or s split z abs z.
27735 	X	and or z t v index t and t or sigma t return len s and linsort s or qsort s.
27736 	X	james kew schreef op zondag maart om.
27737 	X	although its true that if one rejects all its strange to have to do.
27738 	X	asperger syndroom een persoonlijke benadering http people nl linux org gerrit het zijn tijden om je zelf met politiek te bemoeien http www sp nl.
27739 	X	paul moore gustav at morpheus demon co uk writes.
27740 	X	yeah i had the feeling when i saw that that it was proposed just as a way of killing the whole idea.
27741 	X	dave abrahams boost consulting www boost consulting com.
27742 	X	in article slrnbdud kle philh at cabalamat uklinux net.
27743 	X	figuring out how to do a properly nuanced vote with condorcet isnt.
27744 	X	the mechanism for voting is the same as stv and ive seen too many people screw up in not understanding that the way to vote against something is to not rank.
27745 	X	aahz aahz at pythoncraft com http www pythoncraft com.
27746 	X	register for pycon now http www python org pycon reg html.
27747 	X	roman suzi rnd at onego ru wrote in message news.
27748 	X	i was aware of that when i made my.
27749 	X	pep is about removing keywords or more precisely making them optional in some cases where it is not grammatically ambiguous i was not suggesting.
27750 	X	i was suggesting do over fn.
27751 	X	i didnt care for that so i suggested do mostly because it was not an abbreviation but also because it is used in ruby to delimit.
27752 	X	nothing more than that idle speculation what ifs that sort of i if you were going to change the keyword lambda and not make it optionally implicit then i think do would be a better replacement than fn.
27753 	X	i rather enjoyed reading the pep.
27754 	X	i find the idea of language design to be very interesting and i found the discussions and differences of opinions over a single feature.
27755 	X	perhaps if i had to implement this language i would be more concerned by idle speculations that include keyword introductions but for the moment ill just enjoy playing with the syntax to see if there is a better.
27756 	X	or at least a way that id prefer were i to implement a.
27757 	X	in general this is my point of view when i post syntax alteration.
27758 	X	seeing if one way is better than another or more.
27759 	X	if they were more than that i should write a or a language.
27760 	X	personally i have no problem with lambda but i can see where it could be.
27761 	X	and given my preference i would have chosen do but we wont go there at the moment imo the problems with pep are twofold it favors implicit over explicit and it introduces inconsistent syntax two possible lambda forms without arguments and one form with.
27762 	X	i could argue that my objection to is not strictly correct since in the new form expression the colon in certain unambiguous cases and once we have learned the new idiom explicitly signifies that we are dealing with an anonymous.
27763 	X	i dont find that its level of explicitness matches my taste but either way does not concern me greatly in this particular.
27764 	X	none of them concern me greatly but its a nice turn of moving.
27765 	X	however if you prefer consistent syntax which i do then i should think that would be of more.
27766 	X	of course the new syntax is optional so if consistency is your bugaboo you can still use the lambda for argumentless anonymous functions if you want to but others may not and youll have to remain aware of each.
27767 	X	its not like anyones going to rush out and add it to the.
27768 	X	gareth mccaughan gareth mccaughan at pobox com sig under construc.
27769 	X	donn cave donn at drizzle com schreef in bericht news at.
27770 	X	heres mine begin of voting message q rejected line q rejected line q rejected line gerrit muller line line line line line line.
27771 	X	i have never experienced the need for a ternary operator so i would not make the language any more bloated heavy by adding it even if the addition is.
27772 	X	www extra research philips com natlab sysarch.
27773 	X	however this does not change the fact that python already provides more than enough tools for this.
27774 	X	in those presumably rare cases where performance matters one could just use the if.
27775 	X	in all other cases choose or choose eval will be more.
27776 	X	indeed the only knock on the present if statement is that it is a bit.
27777 	X	but that is a very minor inconvenience when serious performance issues are at.
27778 	X	this is merely my opinion and i wont be distressed if it is ignored particularly since none of the other options will interfere with choose or choose.
27779 	X	otoh i think the three options choose choose eval and if would be quite good enough if they were documented in the usual.
27780 	X	edward leo http personalpages tds net edream front html.
27781 	X	i do not see how i could possibly have been more clear about which vote is official for those of you who might be confused it isnt.
27782 	X	i honestly see no reason to believe that any one will be confused by this additional.
27783 	X	each of the posted ballots has its own self contained and consistent procedure for.
27784 	X	whichever ballot the voter uses they will generally just forward the message via email to the specified address filling in the ballot and removing the directions before sending.
27785 	X	there hasnt been any confusion so far in the or so ballots ive.
27786 	X	i dont think we need to worry about that particular slippery slope organizing a vote like this is a fair amount of work so i do not foresee another half dozen people deciding to conduct their own polls any time.
27787 	X	i clearly stated in my ballot message that i will not be posting the results of my vote until after the voting period for the official vote is.
27788 	X	i have no wish to bias the outcome of the official vote in any way by prematurely releasing.
27789 	X	i posted it to usenet and had thought that the message would be routed to the mailing list as well but it seems that something went.
27790 	X	i now cannot find the message in the mailing list archives or anywhere on the web.
27791 	X	maybe thats why the response to the nomination period wasnt very good or maybe its because people felt that choices was more than.
27792 	X	the strange thing is that i did receive one early response via email on march rd so at least some people must have received this message.
27793 	X	announce complementary vote re pep ternary proposal sun mar.
27794 	X	i can only suppose that the message was cancelled by someone although i cant understand why it was long about lines but ive seen messages double that.
27795 	X	is there some limit on message size that i violated.
27796 	X	im a beginner when it comes to usenet.
27797 	X	anyway the subject of my vote and the reasons for it were explained in that message so i will resend some or all of it tomorrow so that people have the necessary background.
27798 	X	the unofficial vote will continue as planned in any case too late to turn back now even if i wanted.
27799 	X	i wouldnt disagree with that in the.
27800 	X	that was exactly what i was expressing in my question about its.
27801 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote that it will never come again is what makes life so.
27802 	X	emily dickinson url scanner maintainer and validator in.
27803 	X	the oft misquoted python precept isnt theres only one way to do it its more like theres usually only one right way to do.
27804 	X	there is always more than one way to do something in any general powerful expressive programming language and python is no.
27805 	X	the addition of a conditional operator to python would resolve the issue of which is the right way to do it conditional evaluation within an expression with short circuiting so on the contrary its addition would not only be not un pythonic but highly.
27806 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote there i was there i was splitting atoms with my desire lamya a counter strike server log file monitor in.
27807 	X	i think that holding this vote as well as properly tallying and analyzing the results was very important otherwise i wouldnt have gone to the trouble of doing.
27808 	X	my point was that the status quo option which a majority clearly prefers to every other alternative wont necessarily be the most useful piece of information for.
27809 	X	if this was a democratic decision then yeah the single winner result should be.
27810 	X	gvr isnt known as the benevolent dictator for life for nothing.
27811 	X	only guido can decide how much support is needed for the ternary to justify adding it to the language and he can set the bar wherever he.
27812 	X	however if he is hostile to the idea of a ternary he might require a supermajority as some of the opponents of the ternary expected when voting methods were were.
27813 	X	on the other hand he may decide that adding a feature that would be useful to a large minority of users is a good enough reason to add it only guido.
27814 	X	personally id be perfectly happy if guido decides to accept the majority decision and not implement the ternary since the ternary syntax proposals with the most community support are worse than the status quo.
27815 	X	if you look at my ballot youll see that the only proposal that i think would make python a better language is.
27816 	X	which came in th in the collective rankings a strong showing but clearly one with many.
27817 	X	the most likely alternative for implementation based on the vote is.
27818 	X	which is clumsy and inelegant but at least.
27819 	X	id prefer not to see this in.
27820 	X	it wont appear in my code and id rather not have to read other peoples code that uses.
27821 	X	if too much of this c style syntax garbage gets added to python ill be looking elsewhere for a language.
27822 	X	therefore youll find no sour grapes.
27823 	X	of course the social ranking like the single winner are only a guide guido may freely choose to implement any all or none of the syntax proposals regardless of their level of support within the programmer.
27824 	X	maybe hell reveal himself as the mdfl mad dictator for life and decide to implement.
27825 	X	this proposal gives you the power of the mapping idiom without the.
27826 	X	it expresses the intent of the construct in a very human readable manner using whitespace.
27827 	X	while the above is good it assumes an equality.
27828 	X	so that the structure is more generic his proposal allows an optional operator a function taking or more value and returning a boolean immediately following the case label.
27829 	X	case else sigma t note that the examples given in the proposal are thus very easily expressed using this notion.
27830 	X	data select hasattr sopen case true s readlines else s split.
27831 	X	t v index select t case t else sigma t.
27832 	X	return select len s case linsort s else qsort s.
27833 	X	the operator need not be binary one could for example provide a terinary operator such as def between cmprhslhs return cmp rhs and cmp lhs.
27834 	X	score select die case case case between case case else raise invalid die roll d roll.
27835 	X	the proposal thus creates a flexible mechanism for avoiding the excessive duplication of assignment and equality fragments within a conditional assignment nest it does so through a new expression structure which like the rest of python uses indentation for.
27836 	X	this proposal thus provides the pratical benefit of a terinary operator while at the same time opening the door to a rich and quite readable conditional assignment.
27837 	X	in particular this proposal rejects the rationale for terinary operator as a way to trade horizontal screen realestate for vertical space as this rationale is in direct opposition to the fundamental principle of.
27838 	X	and as such the proposal explicitly does not include a way to include multiple case labels on the same.
27839 	X	alex martelli for validating the elimination of needless duplication of code as the primary goal for the construct and.
27840 	X	carel fellinger for presenting the idea of a plugable predicate operator.
27841 	X	raymond hettinger for asking me to write this up more or less formally.
27842 	X	after some encouragement by raymond id like to add one more item to the survey if you like what follows perhaps you can even change your vote raymond to include.
27843 	X	q accept switch case z deny everything else.
27844 	X	to those who hate the terinary operator beacuse it isnt.
27845 	X	after looking over much of my python source code i found that where i thought i needed a terinary operator i ended up taking one of two paths.
27846 	X	if quantity exit no exit elif quantity exit a door else exit s doors quantity or the more concise mapping idiom.
27847 	X	the latter construct has two advantages over the if else statement level solution.
27848 	X	its clear that im making an assignment to exit in effect the exit isnt duplicated and this aids in authoring maintenance.
27849 	X	the ugly quantity isnt duplicated for each line once again improving.
27850 	X	however the mapping idiom has three problems.
27851 	X	the conditional switch isnt exactly obvious here unless youre a python vetran this hurts in the maintenance arena besides the else case is.
27852 	X	it doesnt short circut cleanly to do a short circut you need to use ick further it results in the construction of a mapping which may not really help out.
27853 	X	it really doesnt facilitate the use whitespace indentation to re inforce a visual representation of the programs.
27854 	X	the whole rationale for this construct is to reduce data duplication both the assignments and conditional tests to increase.
27855 	X	the goal is not to save on vertical screen realistate by enabling multi line constructs to be jumbled into a single.
27856 	X	it seems that many people are asking for the terinary option for the.
27857 	X	instead this proposal seeks to engage pythons unique approach to syntax by using whitespace to enhance the visual representation of the programs.
27858 	X	many python converts are here exactly beacuse python is very readable and thus.
27859 	X	this proposal is here soley to re enforce this pythonic approach to.
27860 	X	the proposal introduces a select or switch keyword which creates an indented expression.
27861 	X	exit select quantity case no exit case a door else s doors quantity.
27862 	X	today i had an illumination on how to implement both pep and in current.
27863 	X	i think i will share the idea even if i would not recommend to use such a dirty trick in production.
27864 	X	notice that instead of the proposed colon notation for pep x as a shortcut for lambda x i use a tilde notation.
27865 	X	x as a shortcut for lambda x.
27866 	X	this means that i am changing the semantics of the unary operator which is a bad thing but as i said this is dirty trick.
27867 	X	this is simply a proof of.
27868 	X	here there is an example of usage.
27869 	X	example py will not work from the interpreter.
27870 	X	from ternary import if recognizesimplicitlambdas from math import sqrt.
27871 	X	class c recognizesimplicitlambdas def safesqrt selfx return if x sqrt x short circuiting ternary operator.
27872 	X	c c print c safesqrt c safesqrt.
27873 	X	the output of this script is and therefore if x sqrt x is short circuiting as.
27874 	X	here there is the ternary module.
27875 	X	pep and implemented via a metaclass powered dirty trick.
27876 	X	def if condfg short circuiting ternary operator implemented via callable expressions if cond return f else return g.
27877 	X	def dedent block dedent a block of code if need there is lines block splitlines firstline lines spaces len firstline len firstline lstrip if not spaces return block return n join line spaces for line in lines.
27878 	X	class dirtytrick type cooperative metaclass that looks at the source code of its instances and replaces the string with lambda before the class creation def new metanamebasesdic for attr in dic values if inspect isfunction attr code inspect getsource attr if code find continue no found skip code code replace lambda code dedent code n exec code in main.
27879 	X	dict dic modifies dic return super dirtytrickmeta.
27880 	X	class recognizesimplicitlambdas children of this class do recognize implicit lambdas metaclass dirtytrick.
27881 	X	i am aware of the limitation of this approach still it is quite cool notice that the metaclass changes the source code on the fly before the class creation and automagically will be invoked for any subclass of.
27882 	X	of course changing the semantics of the language is never a good idea still it is impressive that it is a so easy to perform such a black.
27883 	X	skipping the comments the ternary module is only lines long.
27884 	X	python is not as simple as you could imagine ly yours.
27885 	X	michele simionato of physics and astronomy allen hall pittsburgh pa u s a home page http www phyast pitt edu micheles.
27886 	X	not on a par with italian electoral laws which you may have already blissfully forgotten from your pennsylvania home as far as i but yes pretty bad i.
27887 	X	i on autopilot retyped what you wrote but i understood what you were.
27888 	X	as i said it is really beyond the scope of pep it should be in another.
27889 	X	its something that could degenerate to a ternary or trinary but not terinary operator but it in and of itself is a more generalized construct and so is not appropriate for a pep.
27890 	X	if you want to suggest a generalized select when or whatever you want to call it and propose that thats fine but it would be for another.
27891 	X	take people who wanted to implement ternary operators in terms of a special syntax for zero argument lambdas and a new builtin this degenerates to a ternary or can be used as one but really deserved to be suggested under another pep and indeed it.
27892 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote i like young.
27893 	X	thomas mcguane cranks crackpots kooks loons on the.
27894 	X	if anyones collecting potential use cases for conditional expressions heres.
27895 	X	greg ewing computer science dept university of canterbury christchurch new zealand http www cosc canterbury ac nz greg.
27896 	X	python makes a distinction between expressions and.
27897 	X	are illegal since assignment is a statement and not an.
27898 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote life is an effort that deserves a better.
27899 	X	karl kraus the laws list http www alcyone com max physics laws laws rules principles effects paradoxes in.
27900 	X	i tried to do the short summary thing and fouled it.
27901 	X	it seems to me that with the to me anyway overly confusing voting process all thats really possible to say from the voting results was some people like.
27902 	X	a similar sized group of people dont like it for various values of it and a generous value of the word similar to mean around the same a bit more or a bit less.
27903 	X	at the end of the day it doesnt feel like the voting process gave us much new.
27904 	X	but with the voting results as they are pretty much everyone can pick n choose their results this would be.
27905 	X	the votes happened punt the whole lot to guido dont try to specify this way or that way to interpret the results to give a chosen.
27906 	X	im comfortable hell make a decision thatll be something we can live.
27907 	X	nobody mention the lambda ly yrs anthony.
27908 	X	edward k ream edream at tds net wrote in message news.
27909 	X	the double quoting in your example is a result of repring a repr since the interactive read eval print loop will repr the results of any expression including the results of a repr.
27910 	X	by explicitly printing the results we avoid this.
27911 	X	peter hansen schreef op dinsdag maart om.
27912 	X	interestingly i think hes right regardless what he decides.
27913 	X	asperger syndroom een persoonlijke benadering http people nl linux org gerrit het zijn tijden om je zelf met politiek te bemoeien http www sp nl.
27914 	X	we could continue this debate for a while but steven taschucks posting is the end of my not quite so brilliant.
27915 	X	in short doing nothing isnt as good as i.
27916 	X	edward leo http personalpages tds net edream front html.
27917 	X	no as that does not support short.
27918 	X	the conditional operator is not equivalent to a three arg.
27919 	X	i know i know this is discussed to death but many of the no votes have appeared to be from the you can simply do that with a function camp which is unfortunate because those are sort of false no votes since its based at least in part on a.
27920 	X	also the you can do this another way vote is unfortunate because imo it misses the.
27921 	X	the language is turing complete so pretty much all features at this point can be done another.
27922 	X	obviously many people feel that the conditional operator is not powerful expressive useful whatever enough to warrant adding it to the language and thats fine but please dont simply vote against it because its not.
27923 	X	select c r c r r select s v r v r r select sa sb va vb r va vb r r s stands for switch.
27924 	X	but i think when adds readability and you dont need a separate case for your third.
27925 	X	a select when c r when c r else r b select s when v r when v r else r c select sasb when va vb r when va vb r else r.
27926 	X	a select when c r when c r else r.
27927 	X	b select s when v r when v r else r.
27928 	X	c select sasb when va vb r.
27929 	X	switch values could even support special syntaxes such as relative operator prefixes etc or perhaps a or to notation for ranges though the non switch first form might be.
27930 	X	id call it select and not switch the switch expression in c is a statement level operation while this proposal seems still to be an.
27931 	X	and yes i like the operator prefixes.
27932 	X	select s when huge when big when medium when respectable when small else tiny.
27933 	X	select x when rhs select y when up upper right when down lower right else center right when lhs select y when up upper left when down lower left else center left else select y when up upper middle when down lower middle else center middle.
27934 	X	it supports the switch case functionality as a simple extension but unlike the earlier proposal does not have to be split over multiple lines unless clarity genuinely demands.
27935 	X	i dont mind were able to add a to make it a one line construct if it is.
27936 	X	the use of punctuation keeps it succinct while the initial keyword makes it clear what is happening easy to look up in documentation etc.
27937 	X	the initial and the use of and in the parentheses makes it clear that this is not a function for those who see function call notation as implying no.
27938 	X	i wouldnt really complain that much about this example my point is mainly about the validity of the.
27939 	X	after all a conditional doesnt need to get all that complex and you need multiple lines.
27940 	X	the reason i dislike this has nothing to do with parentheses its keeping a part of the old and or paradigm and in particular it keeps the main bug in the and or paradigm i e.
27941 	X	its an improvement in that it reads better than the and or paradigm but imo its not enough of an.
27942 	X	but getting back to the point just because youve used the or operator to express the else part does not change the fact that youve put each conditional on a single.
27943 	X	youve spelled it differently but youve structured and formatted it exactly the same way that i did.
27944 	X	id personally keep your div but replace the rest.
27945 	X	temp ab cd gh reduce operator add div xy for xy in temp.
27946 	X	creating lists of tuples purely to exploit list comprehensions can easily distract from the real intention of the.
27947 	X	it could depend on how those variables are related for instance or where they came.
27948 	X	and of course i wouldnt necessarily want to apply the same operator on the lhs of each line it could just easily have.
27949 	X	then a b else if d.
27950 	X	then c d else if h.
27951 	X	steve at ninereeds dot fsnet dot co dot uk.
27952 	X	raymond hettinger schreef op zondag maart om.
27953 	X	couldnt a real address be registered.
27954 	X	i assume those are the e mail headers the rest is content.
27955 	X	what happens on a syntax format error.
27956 	X	can i still select a non seconded choice.
27957 	X	above c was capitalized is a lowercase c accpepted.
27958 	X	but am i notified if i make a format or syntax mistake.
27959 	X	asperger syndroom een persoonlijke benadering http people nl linux org gerrit het zijn tijden om je zelf met politiek te bemoeien http www sp nl.
27960 	X	tetsuo member at dbforums com wrote in message news.
27961 	X	if cond a tval else a fval.
27962 	X	is one of the voting options going to be abandon pep no further action.
27963 	X	stephen horne intentionally at blank co uk wrote in message news vsuvkrqlfjnihektdigphac at ax com.
27964 	X	i use config files for a program of mine that are basically the repr of a data structure that is evaled when the program.
27965 	X	having a bool type makes those config files much more readable and human editable than not since its much easier to understand the intented of locked true than locked.
27966 	X	thats reason enough for having a bool type imo in fact ive even been using guidos python proof of concept bool class in my application since true and false are just names for integers in python.
27967 	X	i would like to have done so but due to circumstances beyond my control i was without news access during the week following the announcement of this vote and i only found out about it after the deadline had.
27968 	X	also i see that this is were referred to as the official.
27969 	X	does that mean guido has officially blessed this particular vote and given raymond the authority to administer it.
27970 	X	i dont remember seeing any announcement about that although i may have missed it amongst all the other pep.
27971 	X	greg ewing computer science dept university of canterbury christchurch new zealand http www cosc canterbury ac nz greg.
27972 	X	the whole pep debate seems to reveal a secret desire in the community to have more than one way of doing the ternary operator thing after all there wouldnt have been so many creative suggestions if this were not.
27973 	X	so my question is after the voting procedure and following decision on pep will all the different syntaxes be donated to the perl community.
27974 	X	first thanks for taking on this difficult task youve just put a huge target on your ive read ahead before replying and i think there are some serious problems with the ballot as.
27975 	X	i believe the ballot should have a couple of places to vote before we have to select or reject specific styles.
27976 	X	proposed the addition of a short circuiting ternary operator to python in favor in favor with reservations neutral opposed with reservations opposed.
27977 	X	should the ternary operator be nestable.
27978 	X	must the conditional precede both consequents.
27979 	X	for myself im neutral as to whether a ternary operator is introduced but im opposed unless the condition precedes the two.
27980 	X	in other words i oppose the form x if c else y and all.
27981 	X	i am okay with c then x else y and.
27982 	X	x y variants in that i dont believe complex punctuation syntax is pythonic.
27983 	X	its confusing that i can list three syntax options and either accept or reject.
27984 	X	so should i be a positivist and vote in favor of all the c then x else y variants.
27985 	X	should i be negativist and vote against the forms i dislike.
27986 	X	finally im not sure that one week is enough time for everyone who might have a valid opinion to chime.
27987 	X	for example i was taking a course last week and fully participating in the decision process would have been quite a bit more difficult if this call for votes had come a week.
27988 	X	sigmask py version feed this to your.
27989 	X	print reduce lambda xy x chr ord y ojdlwbshjti.
27990 	X	james kew james kew at btinternet com.
27991 	X	seriously it is much better to conduct a debate or vote in terms of what you like than in terms of what you.
27992 	X	the things you hate the most tend to be the things where you are the most in conflict with yourself things that you might have almost liked but for some reason chose not.
27993 	X	decidedly bad things do not evoke such strong.
27994 	X	the ternary operator would definitely be a more intuitive way to get the same behaviour as get albeit longer but were not perlistas are we.
27995 	X	a k if k in a else x.
27996 	X	now how would we express setdefault using the ternary operator thoughi dont think it is legal to have multiple statements in a single line if else contruct in python.
27997 	X	a k if k in a else a k x x.
27998 	X	a k if k in a else a k x return x.
27999 	X	ive been putting off making my vote because i wasnt fully happy with any.
28000 	X	i finally came up with a new choice its late i know but here is my late attempt to drum up.
28001 	X	the syntax would have variants such.
28002 	X	select c r c r r select s v r v r r select sa sb va vb r va vb r r.
28003 	X	switch values could even support special syntaxes such as relative operator prefixes etc or perhaps a or to notation for ranges though the non switch first form might be.
28004 	X	it supports the switch case functionality as a simple extension but unlike the earlier proposal does not have to be split over multiple lines unless clarity genuinely demands.
28005 	X	the use of punctuation keeps it succinct while the initial keyword makes it clear what is happening easy to look up in documentation etc.
28006 	X	the initial and the use of and in the parentheses makes it clear that this is not a function for those who see function call notation as implying no.
28007 	X	steve at ninereeds dot fsnet dot co dot uk.
28008 	X	if you are worried about the totalling list what you think the totals should be and.
28009 	X	if your version has merit im sure it will get.
28010 	X	its one of the benefits of an open.
28011 	X	on mar pepvote at hotmail com raymond.
28012 	X	funny that this differs so much from the complimentary.
28013 	X	obviously fewer people voted on that but im wondering if there was some self selection biassing process going on in one or both votes e g maybe the no change crowd care more on average and were therefore more willing to put time into a second vote.
28014 	X	on mar sabbyxtabby at yahoo com sabby and tabby wrote in comp lang python in article.
28015 	X	no the below is not my.
28016 	X	id certainly rather you hadnt put my name in such a bogus example as who knows what people will make of it at a later time on.
28017 	X	ive removed my name from the quoted example.
28018 	X	sheila king http www thinkspot net sheila http www kgroups org.
28019 	X	cummingscs at netscape net steven cummings wrote in message news.
28020 	X	it seems to me that a good select statement not some crippled one like cs switch could be very.
28021 	X	i dont see the suggested syntax as a particulary good solution for pep type problems but for other.
28022 	X	both of these are attempts to deal with some of the ugliness of if elif else.
28023 	X	is there some better general solution out there.
28024 	X	i think condorcet is the best voting system to use for this.
28025 	X	if the original vote had used it there would be no need for a second.
28026 	X	philip hunt philh at cabalamat org memes are a hoax pass it on.
28027 	X	mis at pitt edu michele simionato writes.
28028 	X	i have now voted and no longer really care but yes i agree that this was the most annoying aspect of the voting.
28029 	X	not were able to say how much i loathe.
28030 	X	and its a shame because i think its useful information a syntax which people either love or hate with no middle ground may be less preferable than one which evokes no such strong opinions.
28031 	X	as opposed to just suicides when bdfl makes his decision whichever way that is.
28032 	X	thomas wouters thomas at xsall net.
28033 	X	copy me into your signature file to help me spread.
28034 	X	tim hochberg tim hochberg at ieee org ha scritto nel messaggio news.
28035 	X	i agree wholeheartedly if thats not the interpretation that the vote should receive then the vote was.
28036 	X	anders hammarquist iko at cd chalmers se physics student chalmers university of technology hem gteborg.
28037 	X	in article btfqc p at newshost accu uu nl.
28038 	X	hmm there was the q option fill in.
28039 	X	so if nothing else you can always come up with randomly horrendous syntaxes and then reject those.
28040 	X	of course you also have to just how horrendous you syntax.
28041 	X	of course you are absolutely correct but i think norman was perfectly clear in his subject line condorcet analysis of official pep ballots.
28042 	X	he had the code written already from his complementary vote and then performed the analysis on the raw official votes after doing a straightforward translation of the official votes into a condorcet like.
28043 	X	so the methods of condorcet voting were simply used as an analysis technique and i think he tried to make that.
28044 	X	state the top three preferences and mark whether each should be preferred to no.
28045 	X	guido is smart enough to interpret the.
28046 	X	if over a hundred posts werent sufficient to express an opinion by all means submit a vote in any format and ill attach it to the.
28047 	X	there is no need to leave anyone feeling angry and.
28048 	X	after all it is basically an opinion survey so guido can get a sense of how the community is.
28049 	X	that person sufferred much negativity here and no longer has the time or inclination so he passed the torch to.
28050 	X	im volunteering the time to tally the results and then guido will make the.
28051 	X	q reject none q reject none q reject none dennis reinhardt n a n a n a n a n a.
28052 	X	most examples look good as one liners with short.
28053 	X	they do not look so good with longer.
28054 	X	z of useful length if abs z of useful length.
28055 	X	the above long name can be expressed in current python in nearly the same number of characters as.
28056 	X	if abs z of useful length.
28057 	X	z of useful length else z of useful length.
28058 	X	dennis reinhardt http www spamai com.
28059 	X	edward k ream edream at tds net wrote in message news.
28060 	X	how is your quote proposal significantly different in effect from lambda izing and then calling the arguments which can also be done today as has already been discussed.
28061 	X	def choose cond a b if cond return a else return b.
28062 	X	choose y lambda x y lambda bignum.
28063 	X	using lambda gets expression parsed and syntax error checked as compile.
28064 	X	a vote was held a majority said no change and suddenly now youre claiming that obviously a vote isnt the important thing.
28065 	X	for what its worth i ended up not voting after all was said and done i ended up not caring whether it goes in or.
28066 	X	but to turn around after the vote with this sort of comment well not everything that went into python would have won a vote thats not the important thing seems like sour grapes of the worst.
28067 	X	anthony baxter anthony at interlink com au its never too late to have a happy.
28068 	X	if the deal was that eval s quote s then whats the problem.
28069 	X	if theyre not used and can be wrong what on earth are they for.
28070 	X	it seems to me this serves no good purpose except making voting more difficult than it needs to be particularly for no to any form of ternary.
28071 	X	my apologies if this has already been well discussed i did not have the stamina to follow the pep threads after the first few days of.
28072 	X	but i really did expect voting to be simpler and more direct than this.
28073 	X	james kew james kew at btinternet com.
28074 	X	i sincerely hope guido takes the fundamentally flawed nature of this voting process into account when he makes his.
28075 	X	i find it interesting that people involved in this pep debate have begun to resort to tactics similar to those used by spammers to try to squeeze their messages past peoples spam procmail outlook whatever.
28076 	X	a limbo dancing contest to be held at pycon the winner deciding the fate of pep.
28077 	X	yeah i can see makes about as much sense as the rest of this wink.
28078 	X	i tried to get him to speak his mind before the psf board irc meeting last tuesday but alas he evaded the question quite skillfully leaving nothing sure except that which we already knew that were he is neither against nor in favour.
28079 	X	i would have pressed on but his comments about loaded dice and hostile community reactions reminded me that i still had to vote and i had minutes till polls closed and the meeting.
28080 	X	and im talking about the dutch provincial election last tuesday not about some hidden vote on pep.
28081 	X	however i am reminded of the following passage of the book of peps chapter section one paragraph one in which he spake.
28082 	X	if the community cant decide the bdfl will reject the.
28083 	X	can anyone honestly say the community has decided on anything but the controversy of the other camps procedures and analyses.
28084 	X	but then im biased were a luddite and a readist so please dont take my word for the interpretation or its.
28085 	X	i mean the conclusions i draw from.
28086 	X	or he did speak his mind who.
28087 	X	thomas wouters thomas at xsall net.
28088 	X	copy me into your signature file to help me spread.
28089 	X	in the case of python the addition of booleans as a unique type that simply express intent this value is going to be either true or false stands on its.
28090 	X	if youre looking through a program and see a return true you know exactly what that part of the program is doing and what its communicating to another part of the.
28091 	X	with booleans youd see return which wouldnt communicate the information as easily is it any positive integer.
28092 	X	any non negative integer a tristate value like that returned by cmp or a boolean.
28093 	X	booleans in python just assist with writing self documenting code which is always a.
28094 	X	because of pythons history of backward compatibility getting them into the language means they have to be degenerate integers otherwise too much code would.
28095 	X	this is a common compromise in languages which are not created with a distinct boolean type and the objections to it are purely theoretical it would be better to have a pure boolean type that needs to be explicitly converted whenever encountered but you simply cant have that if backward compatibility is important.
28096 	X	furthermore people are already using booleans by definining true false true false or true false so standardizing the spelling by making it part of the standard library has a positive benefit the first point andrew made.
28097 	X	and yes you can overload on the boolean type in python second point although it isnt considereed good style to explicitly overload by type in.
28098 	X	so yes both arguments that worked for c still apply in some sense to python but they werent the primary.
28099 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote mona lisa come to discover i am your daughter lamya fauxident http www alcyone com pyos fauxident a faux ident daemon in.
28100 	X	to indicate for the reader a conditional.
28101 	X	certainly this is possible but it isnt that easy to read.
28102 	X	however the idea of moving the else part onto the st line is where it gets ugly and where i cry.
28103 	X	here are the examples with mandatory parens and new.
28104 	X	t v index if t t else sigma t.
28105 	X	i think that these are probably more clear than the traditional if else.
28106 	X	that said i like the previous select case proposal.
28107 	X	i think martijn raised some serious.
28108 	X	the vote announcment should indeed contain no literal.
28109 	X	like others i only noticed it by coincident having hit ctrl d already.
28110 	X	and the vote absolutely needs a clean obvious simple no ternary needed.
28111 	X	the vote announcement should be re posted with these two bugs.
28112 	X	the official vote is the only one he endorses implicitly or explicitly as a part of the.
28113 	X	as ive clarified about four times by.
28114 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote people are taught to be.
28115 	X	jose abad max pandaemonium http www maxpandaemonium com a sampling of max pandameoniums.
28116 	X	the results shown below are for the complementary unofficial vote on the issue of adding a ternary operator to python pep.
28117 	X	these results will probably be a bit different from the official results which are were tabulated by raymond hettinger using a different technique and a different set of.
28118 	X	both sets of results are non binding and intended only to advise the bdfl about the python communitys wishes regarding the implementation of.
28119 	X	hopefully this supplemental vote will provide guido van rossum with additional insight into the wishes of python.
28120 	X	this complementary vote used a ranked ballot and condorcets method to determine a.
28121 	X	for background information about how this method works see.
28122 	X	http www electionmethods org condorcetex htm.
28123 	X	the results shown below are based on ballots received over a one week period march.
28124 	X	the ballots themselves may be viewed here.
28125 	X	gnu gpl licensed voting software written in python is available to verify these.
28126 	X	it could also be used again in future votes if the python community wishes to use condorcets method to advise the bdfl on other.
28127 	X	you can download a package containing this software as well as all the data used for this vote from.
28128 	X	this software was written and tested using python running on red hat linux.
28129 	X	use on other platforms may require some.
28130 	X	the condorcet winner is no ternary.
28131 	X	c t else f when c t else f.
28132 	X	c t else f case c t else f ifelse c t else f select c t else f cond c t f c t f.
28133 	X	c and t else f if c then t else f t if c else f.
28134 	X	option no ternary beats option if c then t else f beats option if c t else f beats option c t f beats option if c t else f beats option t if c else f beats option c then t else f beats option t when c else f beats option c t.
28135 	X	f beats option c t f beats option c t else f beats option when c t else f beats option c t else f beats option case c t else f beats option ifelse c t else f beats option select c t else f beats option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
28136 	X	option if c then t else f beats option if c t else f beats option c t f beats option if c t else f beats option t if c else f beats option c then t else f beats option t when c else f beats option c t.
28137 	X	f beats option c t f beats option c t else f beats option when c t else f beats option c t else f beats option case c t else f beats option ifelse c t else f beats option select c t else f beats option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
28138 	X	option if c t else f beats option c t f beats option if c t else f beats option t if c else f beats option c then t else f beats option t when c else f beats option c t.
28139 	X	f beats option c t f beats option c t else f beats option when c t else f beats option c t else f beats option case c t else f beats option ifelse c t else f beats option select c t else f beats option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
28140 	X	option c t f beats option if c t else f beats option t if c else f beats option c then t else f beats option t when c else f beats option c t.
28141 	X	f beats option c t f beats option c t else f beats option when c t else f beats option c t else f beats option case c t else f beats option ifelse c t else f beats option select c t else f beats option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
28142 	X	option if c t else f beats option t if c else f beats option c then t else f beats option t when c else f beats option c t.
28143 	X	f beats option c t f beats option c t else f beats option when c t else f beats option c t else f beats option case c t else f beats option ifelse c t else f beats option select c t else f beats option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
28144 	X	option t if c else f beats option c then t else f beats option t when c else f beats option c t.
28145 	X	f beats option c t f beats option c t else f beats option when c t else f beats option c t else f beats option case c t else f beats option ifelse c t else f beats option select c t else f beats option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
28146 	X	option c then t else f beats option t when c else f beats option c t.
28147 	X	f beats option c t f beats option c t else f beats option when c t else f beats option c t else f beats option case c t else f beats option ifelse c t else f beats option select c t else f beats option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
28148 	X	option t when c else f beats option c t.
28149 	X	f beats option c t f beats option c t else f beats option when c t else f beats option c t else f beats option case c t else f beats option ifelse c t else f beats option select c t else f beats option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
28150 	X	f beats option c t f beats option c t else f beats option when c t else f beats option c t else f beats option case c t else f beats option ifelse c t else f beats option select c t else f beats option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
28151 	X	option c t f beats option c t else f beats option when c t else f beats option c t else f beats option case c t else f beats option ifelse c t else f beats option select c t else f beats option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
28152 	X	option c t else f beats option when c t else f beats option c t else f beats option case c t else f beats option ifelse c t else f beats option select c t else f beats option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
28153 	X	option when c t else f beats option c t else f beats option case c t else f beats option ifelse c t else f beats option select c t else f beats option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
28154 	X	option c t else f beats option case c t else f beats option ifelse c t else f beats option select c t else f loses to option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
28155 	X	option case c t else f ties option ifelse c t else f ties option select c t else f beats option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
28156 	X	option ifelse c t else f beats option select c t else f ties option cond c t f loses to option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
28157 	X	option select c t else f beats option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
28158 	X	option cond c t f beats option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
28159 	X	option c t f beats option c and t else f beats option if c then t else f beats option t if c else f.
28160 	X	option c and t else f beats option if c then t else f beats option t if c else f.
28161 	X	option if c then t else f beats option t if c else f.
28162 	X	on mon feb erik max francis max at alcyone com.
28163 	X	in c bool true and false are pretty.
28164 	X	the reason were in c true and false cast implicitly to from.
28165 	X	given this behaviour the keywords true and false are no more useful than library definitions such as define true.
28166 	X	the weak typing due to the implicit conversion destroys most if not all benefits of a separate.
28167 	X	if you want integer equivalents you need to ask for.
28168 	X	the boolean type is therefore a strong declaration of intent that the compiler uses for error checking use an integer where a boolean is expected or visa versa and you get an error.
28169 	X	historically the c situation happened because c inherited from c at a time when c did not have a boolean type and c basic types are pretty weak from the c heritage again.
28170 	X	ada had booleans from the start so it did not need an implicit integer equivalence and is strongly.
28171 	X	add on the additional problem of c programmers who think their programs are c just because they have a cpp extension and a few comments and the bool type is really not that.
28172 	X	the most common effect of using bool in visual c for instance is that you constantly get warned that casts from integer types to bool are inefficient because the compiler forces the value to rather than just non zero though strictly it doesnt need to it should only do this on casting bool to int when the source bool is from an uncertain source really.
28173 	X	i suspect the python history is too close to the c history for comfort the boolean type cannot be a strong type because of backwards compatibility.
28174 	X	im not clear on what the benefit now from adding a separate type is except for the standard spelling and the declaration of intent useful to human readers only inherent in using that.
28175 	X	steve at ninereeds dot fsnet dot co dot uk.
28176 	X	i assumed it lets you do something new and cool thats why i was.
28177 	X	the pep says that usually the ternary is emulated in some ugly ways which dont include the if then.
28178 	X	i apologise for having expressed myself.
28179 	X	condorcet requries a full ranking and the official ballot results are not full rankings so you cant find the condorcet.
28180 	X	only if you add an assumption about what the missing ballots said then you can find the condorcet result under those.
28181 	X	the assumption that i gather you made is that all voters ranked the remaining entries.
28182 	X	another interesting possibility is to find the condorcet results that would hold regardless of what the missing ballots.
28183 	X	i suspect that no change and c are possible condorcet winners but none of the others.
28184 	X	quoth m faassen at vet uu nl martijn faassen laura please help those of us who do not particularly want a ternary operator in python and do not want to be educated in that respect and still want to put in a vote if only they could figure out a sensible way to do.
28185 	X	x reject whatever y reject whatever z reject whatever donn cave n a.
28186 	X	id be more concerned that no one is paying attention by.
28187 	X	the debate over which solution is better for this non problem is so thoroughly uninteresting that some have probably explicitly filtered it along with one or two of the most prolific posters and the rest of us have gotten used to seeing pep as background.
28188 	X	donn cave donn at drizzle com.
28189 	X	on sun mar lulu of the lotus eaters.
28190 	X	i think you should probably make the effort to fill in the examples using existing methods to show you understand the consequences of your vote you may have difficulty with the single line constraint if you want your examples to be readable but no doubt a blank line separator for multiline examples would be accepted if.
28191 	X	of course it would be nice if a single keyword could magically work out what is wanted lets enhance that proposal to the point where the single keyword abracadabra will magically work out what the user wants done and do it for him.
28192 	X	oh hang on id end up redundant so lets.
28193 	X	steve at ninereeds dot fsnet dot co dot uk.
28194 	X	attributeerror mystringio instance has no attribute split.
28195 	X	the second case with the and always returns z as in.
28196 	X	if linsort returns none or some other false value then the third case also my call qsort eg when len s.
28197 	X	the and or mechanism is not a general catch all for a ternary if else.
28198 	X	it should be used judiciously if at.
28199 	X	how are these advantages related to python if at all certainly the second is not unless you are using type checking which you rarely should.
28200 	X	maybe the first is relevant i cant see exactly.
28201 	X	i realize that you were talking about c im just curious.
28202 	X	given in the early pep threads both sides made their pleas quite strongly i dont think continued strength in a plea should carry much.
28203 	X	both sides both extreme ends anyway felt.
28204 	X	it probably should be left at.
28205 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote oh what lies there are in.
28206 	X	http www pollywannacracka com the internet resource for interracial.
28207 	X	raymond hettinger vzerxy at verizon net wrote in message news.
28208 	X	i want to express that i dont want a ternary operator but if i get stuck with one id like to have some influence on what it.
28209 	X	if i reject all syntaxes but still rank my preferences as in the original vote format will that seem any less forceful than using the short way.
28210 	X	lynx none at of your business writes.
28211 	X	and yet no butterfly jokes so.
28212 	X	sigmask py version feed this to your.
28213 	X	print reduce lambda xy x chr ord y ojdlwbshjti.
28214 	X	option no ternary beats option if c x else y beats option c x y beats option x if c else y beats option if c then x else y beats option c then x else y beats option x when c else y beats option cond c x y beats option any write in vote beats option c x else y beats option c x.
28215 	X	y beats option x if c else y beats option c x y beats option if c then x else y beats option c and x else y beats option c x else y beats option ifelse c x else y beats option c x y.
28216 	X	option if c x else y beats option c x y beats option x if c else y beats option if c then x else y beats option c then x else y beats option x when c else y beats option cond c x y beats option any write in vote beats option c x else y beats option c x.
28217 	X	y beats option x if c else y beats option c x y beats option if c then x else y beats option c and x else y beats option c x else y beats option ifelse c x else y beats option c x y.
28218 	X	option c x y beats option x if c else y beats option if c then x else y beats option c then x else y beats option x when c else y beats option cond c x y beats option any write in vote beats option c x else y beats option c x.
28219 	X	y beats option x if c else y beats option c x y beats option if c then x else y beats option c and x else y beats option c x else y beats option ifelse c x else y beats option c x y.
28220 	X	option x if c else y beats option if c then x else y beats option c then x else y beats option x when c else y beats option cond c x y beats option any write in vote beats option c x else y beats option c x.
28221 	X	y beats option x if c else y beats option c x y beats option if c then x else y beats option c and x else y beats option c x else y beats option ifelse c x else y beats option c x y.
28222 	X	option if c then x else y beats option c then x else y beats option x when c else y beats option cond c x y beats option any write in vote beats option c x else y beats option c x.
28223 	X	y beats option x if c else y beats option c x y beats option if c then x else y beats option c and x else y beats option c x else y beats option ifelse c x else y beats option c x y.
28224 	X	option c then x else y beats option x when c else y beats option cond c x y beats option any write in vote beats option c x else y beats option c x.
28225 	X	y beats option x if c else y beats option c x y beats option if c then x else y beats option c and x else y beats option c x else y beats option ifelse c x else y beats option c x y.
28226 	X	option x when c else y beats option cond c x y beats option any write in vote beats option c x else y beats option c x.
28227 	X	y beats option x if c else y beats option c x y beats option if c then x else y beats option c and x else y beats option c x else y beats option ifelse c x else y beats option c x y.
28228 	X	option cond c x y beats option any write in vote beats option c x else y beats option c x.
28229 	X	y beats option x if c else y beats option c x y beats option if c then x else y beats option c and x else y beats option c x else y beats option ifelse c x else y beats option c x y.
28230 	X	option any write in vote beats option c x else y beats option c x.
28231 	X	y beats option x if c else y beats option c x y beats option if c then x else y beats option c and x else y beats option c x else y beats option ifelse c x else y beats option c x y.
28232 	X	option c x else y beats option c x.
28233 	X	y beats option x if c else y beats option c x y beats option if c then x else y beats option c and x else y beats option c x else y beats option ifelse c x else y beats option c x y.
28234 	X	y beats option x if c else y beats option c x y beats option if c then x else y beats option c and x else y beats option c x else y beats option ifelse c x else y beats option c x y.
28235 	X	option x if c else y beats option c x y beats option if c then x else y beats option c and x else y beats option c x else y beats option ifelse c x else y beats option c x y.
28236 	X	option c x y beats option if c then x else y beats option c and x else y beats option c x else y beats option ifelse c x else y beats option c x y.
28237 	X	option if c then x else y beats option c and x else y beats option c x else y beats option ifelse c x else y beats option c x y.
28238 	X	option c and x else y beats option c x else y beats option ifelse c x else y beats option c x y.
28239 	X	option c x else y beats option ifelse c x else y beats option c x y.
28240 	X	option ifelse c x else y beats option c x y.
28241 	X	on sunday i posted the results of the complementary vote on pep which was based on about ranked ballots that i received between march rd and march.
28242 	X	those results can be viewed here.
28243 	X	today raymond hettinger published the ballots from the official vote and it occurred to me that this data can be converted to a ranked ballot by noting that an accept option is one that the voter prefers to the status quo no ternary and a reject option regardless of its rank position is considered by the voter to be worse ranked lower than the status.
28244 	X	a accept x if c else y i reject x when c else y.
28245 	X	is equivalent to the following ranked ballot.
28246 	X	x if c else y no ternary if c x else y x when c else y all other options truncated.
28247 	X	by converting the ballots in this way i was able to tally them using the script i wrote for the complementary vote thereby allowing the two sets of results to be.
28248 	X	these converted ballots may be viewed here.
28249 	X	the condorcet results for this set of ballots are shown at the end of this.
28250 	X	one obvious advantage of the official data is that it contains over.
28251 	X	this makes the results much more representative of the python communitys wishes than the ballots from the complementary vote which had lower.
28252 	X	however the limited rankings allowed by the official ballot biases the result in favour of the status quo since voters are only allowed to accept up to options even if they would accept many more than.
28253 	X	with limited rankings the more alternatives that are listed the less likely it is that any change will be.
28254 	X	this can be seen by comparing the pairwise results for the top ranked alternatives in each vote.
28255 	X	option no ternary beats option if c then t else f beats option if c t else f beats option c t f.
28256 	X	option no ternary beats option if c x else y beats option c x y beats option x if c else y.
28257 	X	in both cases the preferred option is the status quo but in the complementary vote the no ternary option has about a lead over the top ranked ternary.
28258 	X	in the official vote this lead increases to about.
28259 	X	of course the fact that the status quo is clearly preferred by a majority in both votes does not necessarily mean that the ternary should not be.
28260 	X	it is likely that many features that have been added to python would not have received the support of a majority when they were first.
28261 	X	for this reason the social ranking is probably a much more useful result than the single winner when trying to decide how to resolve this.
28262 	X	the condorcet winner is no ternary.
28263 	X	c x y if c then x else y.
28264 	X	on mar norman petry npetry at accesscomm ca.
28265 	X	hmmm now theres an idea different condition expression syntaxes in the same.
28266 	X	from alternate future import conditional from alternate future import conditional from alternate future import conditional.
28267 	X	sorry thats only three forms but well i had to keep it sane.
28268 	X	the ballot information contained in this message is for the complementary unofficial vote on the issue of adding a ternary operator to python pep.
28269 	X	it is not the data that will be used to determine the official results which are were tabulated by raymond.
28270 	X	this complementary vote uses a different type of ballot as well as a different method of tallying them condorcets method which should provide additional insight into the preferences of the python community regarding.
28271 	X	if you voted in this complementary vote please check the list below to determine that your ballot was counted.
28272 	X	results from this vote vote will be posted in a followup message entitled results complementary pep ternary vote.
28273 	X	no ternary t if c else f if c then t else f if c t else f if c t else f c t f c t.
28274 	X	f cond c t f c t f c then t else f t when c else f c t else f c t else f c t f t if c else f ifelse c t else f select c t else f when c t else f case c t else f if c then t else f c and t else f.
28275 	X	voter name email address pygs at qfs de xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx gyromapygnetic at excite com hopyward at eegsoftware com mstopyne at ugcs caltech edu ppyaul at svensson org xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx prpyen lexen at fastmail fm alan haffner yaipypa at yahoo com xxxxxxxxxxxxxx alex martelli aleaxpy at aleax it xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx amos latteier ampyos at aracnet com anders hammarquist ipyko at cd chalmers se xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx andrew dalke adapylke at mindspring com xxxxxxxxxxxxxxxxxxxxxxxx andrew hamilton apynd hamilton at yahoo com andrew reid andrew pyreid at nist gov andrew sterian steripyana at claymore engineer gvsu edu barry a warsaw bapyrry at python org beni cherniavsky cbenpy at techunix technion ac il berthold iso qh fllmann.
28276 	X	bhopyel at web de carl banks peppy at aerojockey com chermside michael mchpyermside at ingdirect com colin dewey cndeweypy at yahoo com david schnepper davidpysch at verity com david stegbauer dspytegbauer at post cz davide di blasi davide di blasipy at st com xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx denis s otkidach pyods at strana ru xxxxxxxxxxxxxxxxxxxxxxxx dennis lee bieber wlfrpyaed at ix netcom com xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx donnal walter dpyonnal at donnal net xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx doug henderson djpyhender at telusplanet net xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx douglas savitsky dsavitskpy at mail e coli net xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx dwelch dwelpych at attbi com egbert bouwman egbert lpyist at hccnet nl elron a yellin pyelronayellin at attbi com eric pettersen ppyett at cgl ucsf edu evan simpson evpyan at am com xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx felix beer pyf beer at indec at xxxxxxxxxxxxxxxx fernando perez fppyerez at colorado edu gareth mccaughan gareth mccaughanpy at pobox com xxxxxxxxxxxxxxxxxxxxxxxxxx geoff gerrietts gepyoff at homegain com george young pygry at ll mit edu xxxxxxxxxxxxxx gerd woetzel gerd pywoetzel at fit fraunhofer de xxxxxxxxxxxx gerhard kirchmann gerhapyrd kirchmann at nexgo de giovanni bajo giovpyannibajo at libero it xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx gordon williams g wpyill at cyberus ca xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx greg krohn pygreg at capra us greg mcfarlane pygregm at iname com xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx guido goldstein pepvotepy at a nugget de harvey thomas hspyt at empolis co uk ian bicking ianbpy at colorstudy com xxxxxxxxxxxxxxxxxxxxxxxxxx ian douglas bollinger escovpyan at myrealbox com jakob schiotz spychiotz at fysik dtu dk xxxxxxxxxxxxxxxxxxxxxxxxxx jens iso qj frgen.
28277 	X	mortensen jjpym at tiscali dk xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx jim fulton jimpy at zope com xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx john grosspietsch jpyohnkg at earthlink net john hazen ppyython list at hazen net john j smith jpyohnjsmith at rediffmail com john williams pyjrw at pobox com jp calderone exarkunpy at intarweb us xxxxxxxxxxxxxxxxxxxxxxxxxxxx kirill simonov kirill simonpyov at mail ru xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx korolkov dmitry korolkopyv at lcard ru xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx l e druker ledrukerpy at rogers com luis p caamano lcaamanopy at mindspring com xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx lutz schroeer lschpyroeer at elektroelch de magnus lycka mapygnus at thinkware se xxxxxxxxxxxxxxxxxxxxxxxxxx manuel m garcia mpygarcia at cole switches com xxxxxxxxxxxxxxxxxxxxxxxxxx matthew dixon cowles mattpy at mondoinfo com xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx michael gleicher glepyicher at cs wisc edu mike howard mikpye at clove com xxxxxxxxxxxxxxxxxxxxxxxxxxxx mike rovner pymrovner at hotmail com nick coghlan ncoghpylan at email com xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx nick efford ndepy at comp leeds ac uk norman petry npepytry at accesscomm ca oleg broytmann ppyhd at phd pp ru oliver schaefer schapyeferffm at gmx de parzival herzog pyparz at shaw ca xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx paul paterson paulpaterspyon at houston rr com xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx paul sidorsky paupylsid at shaw ca xxxxxxxxxxxxxxxx peter maxwell maxwepyll at biolateral com au xxxxxxxx phil hunt philhpy at cabalamat org piers lauder pierpys at cs su oz au xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx rafal smotrzyk rsmotrpyzyk at mikroplan com pl xxxxxxxxxxxxxxxxxxxxxxxxxx ralph corderoy pyralph at inputplus co uk randolph brown rgbpy at panix com xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx richard emslie rxpye at ukshells co uk xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx richard jones richardjpyones at optushome com au robin munn rmpyunn at pobox com xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx rod haper rhapyper at houston rr com xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx russell e owen rpyowen at cesmail net xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx sean ross seanpydavidross at hotmail com shane holloway ieee pyshane holloway at ieee org xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx stephan deibel sdeibpyel at wingide com stephen a langer stepyphen langer at nist gov ted horst tedpy horst at ubsw com xxxxxxxxxxxxxxxxxxxxxxxxxxxx terry reedy tjrepyedy at udel edu xxxxxxxxxxxxxxxxxxxxxxxxxxxx thomas wouters thompyas at xsall net xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx tim evans t evanspy at paradise net nz xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx tom culliton culpyliton at io com xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx tony j ibbs tibs pytony at lsl co uk treutwein guido guido treutweinpy at siemens com xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx vladimir pastukhov pyvlpast at mail ru xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx walter moreira walterpym at parque homelinux net werner schiendl pyws news at gmx at xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx william dode wpyilk at flibuste net remove py from voter email addresses before sending.
28278 	X	oops i forgot to change the first.
28279 	X	after some encouragement by raymond id like to add one more item to the survey if you like what follows perhaps you can even change your vote raymond to include q accept switch case select when my bad z deny everything else.
28280 	X	i think its a tad late for.
28281 	X	first of all a case expression isnt even at issue for pep that should be reserved for antoher.
28282 	X	a switch case statement isnt at issue for pep and i was incorrect to label this proposal as such switch case is a block level construct which contains.
28283 	X	this proposal is for a select when expression which is simply a generalization of a terinary operator and equivalent to some of the elif like options on the.
28284 	X	so this proposal fits right in with the spirit of the.
28285 	X	the voting process is confused enough as it.
28286 	X	amending it at this late date to add another option doesnt seem like a very good idea at.
28287 	X	for one thing how many people who have already voted are going to bother scrutinizing updates to the voting process.
28288 	X	well id like to see what people think i guess guido can take the late comer status into.
28289 	X	sorry for picking the wrong words.
28290 	X	in article slrnbc gju philh at cabalamat uklinux net.
28291 	X	from my pov an expanded approval vote makes much more sense for this specific.
28292 	X	by expanded i mean that each item to be voted on can be marked as yes no.
28293 	X	while in some sense that would be less robust than condorcet the increase in simplicity and raw data would be well worth.
28294 	X	but since i abandoned running the vote in favor of dealing with pycon i dont get a.
28295 	X	aahz aahz at pythoncraft com http www pythoncraft com.
28296 	X	register for pycon now http www python org pycon reg html.
28297 	X	interesting but unfortunately the premise for the condorcet method is not.
28298 	X	since voters havent ranked the candidates in order of preference you cannot really say to have found the condorcet.
28299 	X	while quote might be nice to have on its own steven taschuck has shown that choose eval doesnt really.
28300 	X	edward leo http personalpages tds net edream front html.
28301 	X	pepvote at hotmail com raymond hettinger writes.
28302 	X	resulting in you have opened door.
28303 	X	so maybe that should be quantity.
28304 	X	also what if you change door to a word where adding a traling s doesnt make the plural or translate to a language where it never does.
28305 	X	yes im nit picking ly yours tim evans.
28306 	X	on sun mar anders j munch andersjm at inbound dk wrote in comp lang python in article.
28307 	X	however i never said the list.
28308 	X	example you showed looked like a nested for.
28309 	X	i just said it effectively in essence was.
28310 	X	maybe the list comprehensions have always felt natural to me because of my mathematical.
28311 	X	sheila king http www thinkspot net sheila http www kgroups org.
28312 	X	that problem may be fixed with the following addition to edwards code.
28313 	X	import inspect def choose eval cond a b globalns globals localns inspect currentframe f locals if cond return eval a globalns localns else return eval b globalns localns.
28314 	X	but the main point surely is the efficiency if this is used in a.
28315 	X	walter moreira centro de matematica universidad de la republica email walterm at cmat edu uy home page http www cmat edu uy walterm pgp xfe bcd ba a eed c d b be f e pgp key www keyserver net.
28316 	X	i suggest you study dylan which has multiple dispatch and a slightly different approach that is however reminescent in some respects of what i think youre discussing you will probably find it rather.
28317 	X	i think dylans lack of success is due to other factors apples ups and downs with it the presence of an extremely powerful macro system etc etc and id hope the lessons it suggests are not entirely.
28318 	X	multiple dispatch in particular is an idea well worth preserving.
28319 	X	on sun mar terry reedy tjreedy at udel edu wrote in comp lang python in article xhadnyqedupv jxtwcq at comcast com.
28320 	X	i actually decided to reject all preferences after trying them.
28321 	X	reason i might actually have to read someones code with that nonsense in it some.
28322 	X	sheila king http www thinkspot net sheila http www kgroups org.
28323 	X	you can get c l p announce via mail as python announce list at python org and you can browse the archives online as well.
28324 	X	http mail python org mailman listinfo python announce list.
28325 	X	thomas wouters thomas at xsall net.
28326 	X	copy me into your signature file to help me spread.
28327 	X	philip hunt philh at cabalamat org memes are a hoax pass it on.
28328 	X	in fact just in the unlikely case that he is feeling some angst about the whole thing id like to say that i think he should just apply his usual judgment to the affair and decide what he thinks without further concern for the community and make his decision as.
28329 	X	im confident that whatever choice he makes will be accepted quickly and without much controversy whether its do nothing the original elegantly backwards proposal the lets clone c approach or that funny thing with the.
28330 	X	in fact if there were a vote on the issue i suspect most of us would now vote for the time machine to be put into action just to prevent the whole discussion from ever happening so we dont have to have wasted time reading that massive thread.
28331 	X	on tue feb delaney timothy c timothy.
28332 	X	that argument actually makes a lot of sense to.
28333 	X	actually ive come to realise recently that the object function notation is a bit of a kludge in general whatever language its written in.
28334 	X	the object method notation exists for the following.
28335 	X	because the method belongs to the class object for encapsulation and data hiding.
28336 	X	because the polymorphism of the class object is resolved using that one.
28337 	X	if it wasnt for these issues the object should just be written in the call as a normal.
28338 	X	the first of these does not really apply to the same degree in python and that is a good.
28339 	X	this is in my view a bug in the object oriented.
28340 	X	classes are not in my view the natural scope for encapsulation and data.
28341 	X	interacting components including objects are often inherently tightly.
28342 	X	encapsulating too much within a class often comes back to haunt you when your requirements change and you need to handle more dependencies between data that you hid in different.
28343 	X	this is one reason why we now have books on refactoring and tools that automate refactoring we have to refactor because we hid our data too well when we wrote the first.
28344 	X	the natural scope for encapsulation and data hiding is a subsystem package or.
28345 	X	there are exceptions so the python way of using name has its uses but i prefer the python system of not advertising the private identifiers in a.
28346 	X	this is actually closer to the wider engineering.
28347 	X	for example the gear wheels in a clock are designed to fit together and to work together to achieve a.
28348 	X	they are not designed or maintained independently from each.
28349 	X	one gear wheel is not a black box from the perspective of another they are tightly coupled.
28350 	X	only when you look at particular assemblies or at the clock as a whole do the individual gear wheels become private.
28351 	X	you could say the same about a gear box in a car the gear ratios it supports are tightly coupled to the capabilities of the engine even though at the level of abstraction where engine and gear box are seen as discrete components you no longer care about the smaller components that make up the gear.
28352 	X	in short the components that make up a system are almost always tightly.
28353 	X	fighting against that just makes life.
28354 	X	the classes and functions in a particular module are written to work together and theres no reason why they shouldnt have access to each others private.
28355 	X	what might be useful is a way of nesting small modules within a larger module file like ada packages modula modules or perhaps a bit like c namespaces but with private declarations supported but not like current python packages which solve a different problem.
28356 	X	all class members should be private but private to the module not just the.
28357 	X	resolving polymorphism is therefore the main reason for having an object method syntax but this isnt as compelling as it seems.
28358 	X	it is an artifact of the single dispatch mechanism ie resolving the polymorphism based on precisely one parameter self or this.
28359 	X	using a language which supports multiple dispatch the simplest notation would be to fall back on a simple function call with an explicit specification of which parameters are used to resolve.
28360 	X	you could then set up something.
28361 	X	system test declare the class heirarchy class c base pass.
28362 	X	class c derived c base pass.
28363 	X	class c derived c base pass.
28364 	X	declare the call prototype calls refer to this rather than any of the specialised.
28365 	X	declare name late c base a late c base b c.
28366 	X	declare the implementations to call once the polymorphism is.
28367 	X	def name late c derived a late c derived b c pass.
28368 	X	def name late c derived a late c derived b c pass.
28369 	X	choose not to have different versions based on b if a is of type c derived def name late c derived a late c base b c pass.
28370 	X	in the above code the hypothetical late keyword refers to late binding and the typenames are only intended to be specified for late binding.
28371 	X	this is of course for illustration of an idea not a.
28372 	X	it is also less than ideal like c it forces the programmer to anticipate the need for polymorphism rather than allowing anything to be overridden unless declared final or whatever on.
28373 	X	ive thought about it this approach quite a bit and once a range of knock on effects are considered the overall approach seems almost like a new paradigm perhaps system oriented rather than object.
28374 	X	back to the original point though using a method like this you could keep the ability to override methods using polymorphism and do so more flexibly in general yet you dont have to single out one parameter of each function as were.
28375 	X	steve at ninereeds dot fsnet dot co dot uk.
28376 	X	voters have been allowed to provide limited rankings on the official ballot so its not correct to say that voters havent ranked the candidates in order of preference they clearly.
28377 	X	unfortunately a lot of voter preference information was lost due to the limit placed on the number of options that could be ranked.
28378 	X	condorcets method depends on finding the majority opinion in separate two way races between every possible pair of.
28379 	X	if a fully ranked ballot like the one used for the complementary vote is used it is possible but not necessary for voters to participate in all possible.
28380 	X	this allows the true condorcet winner to be.
28381 	X	reusing the ballots from the official vote is equivalent to a condorcet election with a lot of forced.
28382 	X	imagine that there is a separate ballot box for each of these.
28383 	X	in the complementary vote voters are given a complete set of ballot papers in the official vote they are only allowed to choose ballot papers from this set before.
28384 	X	this makes the condorcet result derived from these ballots less reliable than if full preferences had been.
28385 	X	on the other hand a large number of voters compensates for this problem to a large.
28386 	X	the condorcet results for the official vote confirm those obtained from the complementary vote which had better data gathering but lower.
28387 	X	please understand that i regard this vote of mine as a complement rather than a substitute for the one were organised by raymond.
28388 	X	his vote uses a very different type of ballot and will therefore capture different information than.
28389 	X	therefore both sets of results when viewed together should be more useful to the bdfl than either one would be.
28390 	X	as i mentioned previously the form of the ballot for the official vote biases the result in favour of the status quo since it only allows for limited.
28391 	X	when limited rankings are used a problem called vote splitting often arises a large united minority faction will win against a majority faction whose support is divided among multiple.
28392 	X	the most egregious form of this problem is found with plurality first past the post voting where effectively only one option may be ranked but any system of limited rankings will cause the same problem to some.
28393 	X	given that there were syntax proposals for the ternary and that many voters didnt want the ternary in any form a limited rank ballot for pep will tend to favour the status.
28394 	X	if the supporters of pep felt that there was majority support for adding a ternary to python it would be quite easy to blame the outcome on the form of the official.
28395 	X	fortunately the results of the complementary vote which didnt suffer from vote splitting problems prove useful in that they confirm the official result a majority of python users or at least those who voted have rejected pep the no ternary option was preferred in both.
28396 	X	and that cant happen until weve voted on what the voting procedure should be.
28397 	X	steve at ninereeds dot fsnet dot co dot uk.
28398 	X	norman petry npetry at accesscomm ca.
28399 	X	paul the whole pep debate seems to reveal a secret desire in the paul community to have more than one way of doing the ternary paul operator thing after all there wouldnt have been so many paul creative suggestions if this were not.
28400 	X	i think the pep debate reveals a desire in the community to have more than zero convenient ways of doing the ternary operator thing correctly noting that at present there is one convenient way of doing it incorrectly and several inconvenient ways of doing it correctly.
28401 	X	andrew koenig ark at research att com http www research att com info ark.
28402 	X	q accept switch case q accept multi line if else z reject all single line cases clark evans.
28403 	X	data select hasattr sopen case true s readlines else s split.
28404 	X	t v index select t case t else sigma t.
28405 	X	return select len s case linsort s else qsort s.
28406 	X	t v index if t t else sigma t.
28407 	X	given the amount of discussion that took place i pretty much expected a contentious.
28408 	X	obviously no matter what happened with the vote it was guidos final decision but this just shows that theres enough support to favor pretty much any position he wishes to.
28409 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote experience is the name everyone gives to their.
28410 	X	oscar wilde bosskey net quake iii arena http www bosskey net qa a personal guide to quake iii.
28411 	X	i rarely use them in other.
28412 	X	so i just dont see the.
28413 	X	one of the good things that i see about python is its.
28414 	X	i think that this decreases the.
28415 	X	youre right i should have done.
28416 	X	if theres a next time ill remember to do.
28417 	X	first off raymond thanks for going to the work of putting together this.
28418 	X	this certainly isnt how i would interpret.
28419 	X	options that i didnt rank i considered as.
28420 	X	i suppose that might be arguable in the case where someone ranked three options and accepted all three in that case an argument could be made that they might have accepted some other syntaxes given the opportunity but in cases where at least one syntax was rejected and for example syntax c was not ranked i would consider it.
28421 	X	so my initial reading of this without crunching the numbers to get the fuzzy votes is that option c was closer to accepting and.
28422 	X	alternatively i think the fuzzy votes come to so if we just throw those out the most accurate thing i can think of given the constraints of the vote one has accepting to.
28423 	X	i cant recall the details for the complimentary vote but perhaps the two werent so far off after.
28424 	X	the results seems to slightly leaning toward some ternary syntax but no change seems to be preferred almost or if you toss the fuzzy votes over any particular.
28425 	X	i certainly wouldnt characterize that as leaning towards accepting the pep as.
28426 	X	first off raymond thanks for going to the work of putting together this.
28427 	X	this certainly isnt how i would interpret.
28428 	X	options that i didnt rank i considered as.
28429 	X	i suppose that might be arguable in the case where someone ranked three options and accepted all three in that case an argument could be made that they might have accepted some other syntaxes given the opportunity but in cases where at least one syntax was rejected and for example syntax c was not ranked i would consider it.
28430 	X	so my initial reading of this without crunching the numbers to get the fuzzy votes is that option c was closer to accepting and.
28431 	X	alternatively i think the fuzzy votes come to so if we just throw those out the most accurate thing i can think of given the constraints of the vote one has accepting to.
28432 	X	i cant recall the details for the complimentary vote but perhaps the two werent so far off after.
28433 	X	the results seems to slightly leaning toward some ternary syntax but no change seems to be preferred almost or if you toss the fuzzy votes over any particular.
28434 	X	i certainly wouldnt characterize that as leaning towards accepting the pep as.
28435 	X	first off raymond thanks for going to the work of putting together this.
28436 	X	this certainly isnt how i would interpret.
28437 	X	options that i didnt rank i considered as.
28438 	X	i suppose that might be arguable in the case where someone ranked three options and accepted all three in that case an argument could be made that they might have accepted some other syntaxes given the opportunity but in cases where at least one syntax was rejected and for example syntax c was not ranked i would consider it.
28439 	X	so my initial reading of this without crunching the numbers to get the fuzzy votes is that option c was closer to accepting and.
28440 	X	alternatively i think the fuzzy votes come to so if we just throw those out the most accurate thing i can think of given the constraints of the vote one has accepting to.
28441 	X	i cant recall the details for the complimentary vote but perhaps the two werent so far off after.
28442 	X	the results seems to slightly leaning toward some ternary syntax but no change seems to be preferred almost or if you toss the fuzzy votes over any particular.
28443 	X	i certainly wouldnt characterize that as leaning towards accepting the pep as.
28444 	X	at this time ive been quite.
28445 	X	and im not so sure that it is appropriate since the teachers i would survey would be for the most part not users of.
28446 	X	in fact id even fear that theyd be half in favor of the cond.
28447 	X	true false form since most of them teach c.
28448 	X	sheila king http www thinkspot net sheila http www kgroups org.
28449 	X	well i do run a mailing list for ap computer science.
28450 	X	it is not a very active.
28451 	X	see http www thinkspot net sheila computers apcslistinfo html.
28452 	X	the college board has an official list that gets many times the traffic of.
28453 	X	the ap comp sci teachers do not really teach.
28454 	X	most of them teach c and are getting ready to teach java beginning next.
28455 	X	i have not been very visible in the community as ive not been teaching computer science nor teaching at the high school level for the last two.
28456 	X	currently part time math lecturer at a california state.
28457 	X	and doing full time computer tech support for a web hosting.
28458 	X	so im not sure i could really get a turn out if i tried to do a.
28459 	X	last time i did one i was very visible and active in the.
28460 	X	remove the braces and add an indent and you get something that you can actually run at the interpreter prompt to print four values.
28461 	X	syntax that looks like a for loop to illustrate that python list comprehensions do not look like for.
28462 	X	for loops have the repeated stuff to the right or below the for x in v part list comprehensions.
28463 	X	i have not run in to a case where it is needed.
28464 	X	i dont think that there is any reason to make reading code more.
28465 	X	if the user really want to do this then they can always define their own function that takes three.
28466 	X	def foo a foo sometest condition condition.
28467 	X	i dont like a line serving two purposes which a ternary would.
28468 	X	troy melhase troy at gci net wrote in message news vclnlld at corp supernews voting.
28469 	X	i trust guido on something like this which is why im wondering what all the fuss is.
28470 	X	i just found something funny in pythons.
28471 	X	mapping types you can find the following.
28472 	X	k x a k if k in a else x a setdefault k x a k if k in a else x also setting it.
28473 	X	it looks very similar to the original proposalof pep but its the explanation of get and setdefault.
28474 	X	i actually switched my top two preferences after trying them.
28475 	X	being a db oriented person i use sql standard conditional constructs both if and case expressions on daily.
28476 	X	it is definitely not rocket science support.
28477 	X	but itd sure help some people maintain routine stuff in business app most specifically people who try to use python as a server script engine.
28478 	X	any feedback from the psp and al user.
28479 	X	on sun mar gmt andrew koenig ark at research att com.
28480 	X	the trouble is these advantages rarely apply in reality at least in c.
28481 	X	you do have to worry about combining libraries that use different conventions for boolean types because so many libraries are written without using the bool type the bool type is just one convention among.
28482 	X	there is no real compulsion to use bool so this really doesnt seem to be getting better over.
28483 	X	you cant safely overload based on it because so many boolean results are actually.
28484 	X	miss an explicit cast and you get the wrong function and a very had to find error because it still looks like it should call the right function to a human reader who knows the boolean semantics of the result.
28485 	X	overloading a function name to accept either a bool or an int parameter is begging for bugs unless the functions are semantically equivalent in which case the overloading is.
28486 	X	of course both of these problems go away in certain contexts when you are not swamped in old code c style code win api calls etc but as i never seem to experience these contexts well at least my prejudice has some justification.
28487 	X	whether these arguments apply in python is yet to be determined experience will.
28488 	X	i have to admit i hadnt thought about possible advantages with repr and eval as jeremy fincher described in c you can get similar advantages according to the overloading principle but it rarely.
28489 	X	in borland c still my everyday compiler sadly the following.
28490 	X	i really dont know if the c standard says this is wrong but if python does better this is definitely an.
28491 	X	even if a cast is needed it still avoids the need for an x then true else false or whatever we finally get from pep which we cant even write yet.
28492 	X	there may also be introspection advantages though i suspect that this can lead to similar situations to the overloading issue in c.
28493 	X	that said python is not statically typed so you dont declare the type of intermediate results most boolean results come from boolean expressions and these will naturally acquire the boolean type by using the appropriate python.
28494 	X	whether rare problems are better than frequent problems is debatable of course rare problems tend to be more difficult to find and understand so the mere quantity of typing issue to fix the problem is not always as.
28495 	X	that said i wish i hadnt mentioned it.
28496 	X	i wanted to counter eriks point because i find aahz point about standard spellings compelling but eriks point about full fledged types much less.
28497 	X	but a full fledged boolean type is in no way harmfull and given that it is now part of python there is no point getting into a big debate about its relative.
28498 	X	having a standard spelling however it is implemented is certainly a good thing.
28499 	X	if there are benefits to having a full fledged type which stand the test of time then respect to the people who had the vision and put in the work to add.
28500 	X	in fact either way respect to them for giving the full fledged type the.
28501 	X	my doubts are not intended as.
28502 	X	steve at ninereeds dot fsnet dot co dot uk.
28503 	X	on wed mar gmt alex martelli aleax at aleax it.
28504 	X	thanks for the suggestion ive heard of dylan but know nothing about.
28505 	X	steve at ninereeds dot fsnet dot co dot uk.
28506 	X	norman petry npetry at accesscomm ca wrote in message news.
28507 	X	fwiw i voted for a ternary operator but then saw pep simple implicit lambda.
28508 	X	now i prefer that as a more general and powerful.
28509 	X	it wasnt an option in the.
28510 	X	um wasnt there general agreement on both sides that purposes would be best served by voting on each alternative separately including an option for no change.
28511 	X	the debate seemed to be about whether the process should involve yes no voting for each entry or yes no.
28512 	X	for instance there are more than three forms id accept in terms of were willing to tolerate but there are fewer than three id affirmatively vote for and there are more than three id decidedly vote.
28513 	X	if one has to pick only three and vote to accept or decline them this doesnt give the opportunity to really express ones opinion of each choice these id like these id tolerate these i wouldnt like.
28514 	X	is this vote blessed by guido or is it a unilateral action.
28515 	X	someone else was claiming that they were going to be holding the vote up tp this.
28516 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote virtue has never been as respectable as.
28517 	X	mark twain python chess module http www alcyone com pyos chess a chess game adjudicator in.
28518 	X	i dont think theres any reason to think cancellation was.
28519 	X	it strikes me as very sensationalistic to even bring it up without any evidence or inclination that it in fact.
28520 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote its a mans world and you men can have.
28521 	X	katherine anne porter the laws list http www alcyone com max physics laws laws rules principles effects paradoxes in.
28522 	X	it was a stark and iffy plight the email fell in torrents except at occasional intervals when it was checked by a peppy gust from guido for it is on comp lang python that our scene lies rattling along the syntax and fiercely agitating the scanty flame of facts that struggled against the dark competing.
28523 	X	my apologies for the timing of.
28524 	X	i havent yet figured out how to encourage bathtub.
28525 	X	taking more baths doesnt seem to help.
28526 	X	reading guidos summary of pep at http www python org peps pep html i am struck by.
28527 	X	a guidos thoroughness and fairness and b by the sense that none of the alternatives are very.
28528 	X	indeed if any of the alternatives was actually good rather than just better than the rest the choice would have been.
28529 	X	whenever i have been faced with a similar situation i try to do something completely different that solves the problem from a different.
28530 	X	i have had several ideas for something completely different regarding and on writing them up discovered they were horribly.
28531 	X	up until now you have been.
28532 	X	sitting in the tub this afternoon i somehow started thinking about if expressions one more.
28533 	X	here is the code i use as a workaround guaranteed unretouched photo.
28534 	X	def choose cond a b warning evaluates all arguments.
28535 	X	naturally this isnt very good or pep wouldnt.
28536 	X	my grand insight in the tub was simply that once could define another version of this code.
28537 	X	def choose eval cond a b warning evals all arguments.
28538 	X	heavy duty stuff by my present bathtub.
28539 	X	so to delay the evaluation of an argument just quote.
28540 	X	choose eval a b foo a spam b.
28541 	X	yes i know this is absolutely trivial stuff but hey it was news to.
28542 	X	what if one of the arguments to choose eval should evaluate to a string.
28543 	X	one has to do something like.
28544 	X	choose eval a b less meaningof.
28545 	X	so i think doing nothing is almost good enough provided.
28546 	X	we reveal the secret embodied in the definition of choose eval above and i considered patenting it while the bathwater drained.
28547 	X	we add a string method say quote that quotes any string such that eval s quote evaluates to s for any string s.
28548 	X	then the second example above could be written as.
28549 	X	choose eval a b less quote meaningof.
28550 	X	to be clear i am not suggesting anything be added to the global.
28551 	X	i am suggesting that pythons documentation need only discuss the two kinds of conditional functions shown.
28552 	X	it will then be up to the user to choose two names that will work for the task at.
28553 	X	if standard names need to be chosen that could be dealt with in pep.
28554 	X	in spite of my lighthearted tone i believe that it is important to put this issue to rest one way or the.
28555 	X	that is why the grand secret tm must be discussed in the official python docs and why a quote string method would be a good.
28556 	X	s all criticisms of this brilliant proposal are obviously impertinent even if.
28557 	X	ekr leo http personalpages tds net edream front html.
28558 	X	im guessing it will allow you to do things like you can in c.
28559 	X	in x bool b printf the value of b is s n b.
28560 	X	now if this is good coding style is up for debate but im not gonna go.
28561 	X	i suspect there is a strong selection effect taking place here i know i didnt bother voting on the unofficial.
28562 	X	it may well that people who were in favor of the pep didnt bother voting in the second one simply because they felt that they had invested enough time selecting their favored forms in the first vote that it wasnt worth the effort to repeat it again whereas more people against the pep were willing to vote again because it required little effort and they felt so.
28563 	X	but ill bet some wise guys solution to the discrepancy will be to suggest another.
28564 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote oh what lies there are in.
28565 	X	http www pollywannacracka com the internet resource for interracial.
28566 	X	i kind of agree with this i think the results should be posted and the decision left to our bdfl whatever the stats turn out to.
28567 	X	but i dont think there should be an inherent weve decided to put it off clause beyond our specific preferences we should avoid pushing guido into any particular.
28568 	X	for instance purely hypothetically if vote for one particular option for a second and for various other options with none individually getting more than the option would probably be worth choosing rather than delaying everything for a year and if all the voters for the winner had missed some fundamental problem then the second or third or whatever choice might still be better than.
28569 	X	the ability to make a decision in unclear cases rather than endlessly putting it off is one of the advantages of individual judgement and a major one at.
28570 	X	i somehow doubt that well get an absolutely clear.
28571 	X	as long as something new is more popular than keep the existing hacks perhaps the bush scenario is sufficient though thinking about it like that i suddenly have doubts.
28572 	X	steve at ninereeds dot fsnet dot co dot uk.
28573 	X	this message is to remind you that tomorrow saturday is the last day to vote in the complementary unofficial vote on adding a ternary operator to python pep.
28574 	X	response is good so far but the more people that participate the more useful the results will.
28575 	X	please participate if you have the.
28576 	X	a copy of the ballot and instructions on how to vote are included below in case you missed the first.
28577 	X	more information about this additional vote and why it was organized will be found here.
28578 	X	this is not a ballot for the official pep vote were run by raymond.
28579 	X	it is for a different vote that is intended to complement the results of the official vote by using a different type of ballot and a different method of tallying the results condorcets method for those who may be.
28580 	X	if enough people choose to participate it will provide a high quality source of additional information about the preferences of the python community regarding the ternary.
28581 	X	this vote is not intended to compete with or substitute for the official.
28582 	X	please participate in both votes if you have the time but be sure to vote in the official one if you care about the outcome of pep.
28583 	X	see the explanations in my posting to comp lang python two days ago for more information about the reasons for this supplemental vote on pep announce complementary vote re pep ternary proposal sun mar.
28584 	X	the two day nomination period for additional syntax proposals has now.
28585 	X	no additional nominations were received so the ballot is as follows.
28586 	X	xx no ternary xx t if c else f xx if c then t else f xx c t.
28587 	X	f xx cond c t f xx c t f xx c then t else f xx t when c else f xx c t else f xx c t else f xx c t f xx t if c else f xx if c then t else f xx c and t else f.
28588 	X	voting is a simple matter of ranking the alternatives of interest by replacing the xx that precedes each option with a digit.
28589 	X	for example you would use for your favourite highest ranked option and greater numbers for lower ranked.
28590 	X	you may re order the options on the.
28591 	X	it is often easier when there are many options to reorder them manually from best to worst and then assign.
28592 	X	note though that you must still assign a rank number to each option since it is always the number that determines the rank not the.
28593 	X	you may assign the same rank to multiple options if you consider them to be equally good.
28594 	X	doing this is equivalent to abstaining from participation in any decision between these equally ranked.
28595 	X	to simplify voting you may truncate your ballot by leaving certain options unranked for any options you consider to be so bad and unwinnable as to not be worth considering.
28596 	X	if you wish to do this either a leave xx in front of the unwanted option s in your submitted ballot rather than replacing it with a rank number or b delete the line s of the ballot that contain the unwanted.
28597 	X	you can also use a combination of both.
28598 	X	in either case these truncated options will be interpreted the same as if they had been ranked equally and lower than all explicitly ranked.
28599 	X	while truncation and equal rankings provide convenience ranking many options even those you dislike is a good.
28600 	X	see the strategy tips section below for reasons.
28601 	X	note that the status quo option of no ternary simply appears as one of the available options and every other proposed syntax appears as a separate option on the.
28602 	X	by placing no ternary somewhere within the middle of your ranking you can express the desire to have a ternary operator added to python only if certain forms of syntax are used and reject alternatives that you dislike while still expressing preferences among these bad alternatives in case one or more of them proves to be winnable.
28603 	X	the status quo option can of course also be ranked first or last if you feel either that a no ternary is acceptable in any form or alternately b should be added to the language at any.
28604 	X	a sample completed ballot might look like.
28605 	X	if c t else f t if c else f no ternary xx if c then t else f if c t else f.
28606 	X	here the voters favourite option is t if c else f.
28607 	X	the th option is unranked and could have instead been deleted to indicate the same.
28608 	X	surrounding lines of hyphens marking the beginning and end of the ballot are appreciated for clarity but not.
28609 	X	you may vote by submitting your email ballot to.
28610 	X	your final vote must be received within hours days.
28611 	X	wed sat of the time this message first appears on comp lang python and or comp lang python announce for it to be counted in the final.
28612 	X	a confirmation message will be returned for each ballot that is received identifying any.
28613 	X	unconfirmed ballots will not appear in the results so if you dont receive a reply within a few hours you may wish to send your ballot again im confirming votes manually so the response will not be immediate.
28614 	X	if you decide to change your vote just send a revised ballot containing your new.
28615 	X	the last confirmed ballot for each email address will be the one that appears in the final.
28616 	X	results will be published on sunday march th but not before the voting period of the official vote has ended noon est.
28617 	X	published results will be sent to comp lang python and comp lang python.
28618 	X	results will include among other things a list containing each voters name email address munged and completed ballot to allow for independent.
28619 	X	therefore if you do not want any or all of this information about you made public do not vote please refer to the previous message announcing this vote for details about what types of information will appear in the.
28620 	X	you may be unfamiliar with condorcets method the system of voting used here unless you happen to be a member of the debian project.
28621 	X	although completing a ranked ballot is technically very easy if you wish to know how to maximise the chances of getting the outcome you want you should read following information before completing your ballot.
28622 	X	condorcets method of counting ranked ballots is very different from other systems stv av irv borda that also use a ranked.
28623 	X	therefore it is a bad idea to attempt to vote strategically based on what you know or think you know about how those systems.
28624 	X	the best strategies for one method of voting will usually fail very badly when applied in another even if the form of the ballot is.
28625 	X	you should not assume that ranking any unacceptable options will harm the chances of electing your preferred option s.
28626 	X	condorcets method is a system of pairwise voting where the overall result is determined by finding the majority winners of a series of two way races between every possible pair of.
28627 	X	not ranking truncating some options or assigning the same rank to a group of options is therefore equivalent to abstaining from participation in any decision between those equally ranked.
28628 	X	therefore if the final choice in the election is between two options both of which you dislike but not equally you may later regret not having participated in that.
28629 	X	you should also not vote for what you believe to be an acceptable popular choice the lesser evil compromise ahead of your true favourite s in the belief that this will somehow help to prevent the election of a popular disliked alternative the greater evil.
28630 	X	this type of strategy is often necessary in plurality first past the post voting but is ineffective and unnecessary with condorcets.
28631 	X	condorcets method finds the best compromise automatically if one is needed so doing this will simply harm the chances of electing your true.
28632 	X	see http www electionmethods org condorcet htm for a detailed explanation of.
28633 	X	with condorcets method you will maximise the power and effectiveness of your ballot by providing a complete and sincere expression of your true.
28634 	X	you should only rank options equally if you genuinely consider them to be equally good or bad.
28635 	X	more importantly what is the benefit.
28636 	X	lars w lw at hot shot com wrote in message news bmcsf bf at lenny tc umn.
28637 	X	without attempting to channel guido i expect that there are a number of.
28638 	X	python tends toward minimalism there is usually lots of resistance to adding constructs when there isnt a real clear use case and there are real clear and useful.
28639 	X	see the debate aka flame war over pep.
28640 	X	in this connection the break statement will handle the case where you actually want the loop condition at the end at the expense of less than a half dozen additional.
28641 	X	python tends toward stating things clearly that is up.
28642 	X	putting the loop condition at the end is nowhere near as clear as putting it up.
28643 	X	many of the actual use cases for a decision at the end loop are also served by the for statement generators and.
28644 	X	the whole point of condorcet is that it allows you to do.
28645 	X	the only official vote is the one the bdfl.
28646 	X	its one person one vote and hes the one.
28647 	X	philip hunt philh at cabalamat org memes are a hoax pass it on.
28648 	X	on thu feb anders j munch andersjm at inbound dk wrote in comp lang python in article.
28649 	X	was your intent that it should be clear and obvious.
28650 	X	or was your intent to show how this type of thing could be confusing.
28651 	X	i looked at it and thought there could be a couple of different ways of interpreting it but i didnt know what to make of the syntax as this is not analagous to anything currently available in the.
28652 	X	sheila king http www thinkspot net sheila http www kgroups org.
28653 	X	y f cond c x y o if c then x else y.
28654 	X	iow vote for ones you know guido wouldnt accept on his most feverish.
28655 	X	if everyone who wants no change did that and there are a lot of them guido will conclude that the community is hopeless and give up in disgust wink.
28656 	X	lulu of the lotus eaters mertz at gnosis cx wrote in message news.
28657 	X	the real danger though is that a ternary operator will end up were added and your voice as far as your preference for which ternary operator add if one must be added will be.
28658 	X	well i can agree with that principle which is why ive been on vacation from this absurd brouhaha for a.
28659 	X	im happy to say that ive been too busy to argue about how to vote on the method for a vote thats just an overhyped popularity contest to pay any attention to.
28660 	X	ive even put some of the time i saved into actually working on using python to do what needs.
28661 	X	other bits have alas been squandered on shovelling.
28662 	X	its been very nice reminded me of why i fell into this time sink in the first.
28663 	X	im afraid its also why i will likely be dropping it from the news spool.
28664 	X	talking about my favorite langauge is a wonderful thoroughly enjoyable pastime but ultimately i enjoy getting work done even.
28665 	X	now if i can just pull myself must.
28666 	X	anyway my basic point remains ive seen a bunch of creative answers on how to just vote against any such operator but i think ive seen different ones and i dont think one should need to be that persistent and creative just in order to vote.
28667 	X	martijn no www could we be going in the right direction.
28668 	X	there is only one vote that counts and his name is.
28669 	X	not that i didnt vote against on both ballots making sure the paper was punched through clearly completely and all the.
28670 	X	thomas wouters thomas at xsall net.
28671 	X	copy me into your signature file to help me spread.
28672 	X	i found out it had already started by accidentally clicking on a message in the later thread that described how to do an all no vote which luckily is what i wanted.
28673 	X	i had like most people just been binning the hundreds of messages with pep in the title and never noticed the messages describing voting procedure in that flurry.
28674 	X	the complementary vote thread had the advantage of coming somewhat later and really obviously describing an active in process.
28675 	X	it also had the advantage of not having a huge what type of vote shall we use thread surrounding its root post.
28676 	X	of course involved voting process kept me from actually voting in it.
28677 	X	oh well hopefully guido will reveal that the whole pep thing was one of his wonderful april fools tricks.
28678 	X	though its not even close to the whole parrot thing as of.
28679 	X	there are still naive people who believe theres a parrot virtual machine going to come out for python and perl i think the people who are keeping that alive after all this time are just sick.
28680 	X	if not well have to foment another revolution mike.
28681 	X	mike c fletcher designer vr plumber coder http members rogers com mcfletch.
28682 	X	id guess that many people who werent interested in debating the issue and quite probably didnt want the feature didnt realise the official vote was going.
28683 	X	and for what its worth i think your choice of voting process is better than the official one and i think a modified alternative vote would have been even.
28684 	X	gareth mccaughan gareth mccaughan at pobox com sig under construc.
28685 	X	on wed mar thomas wouters thomas at xsall net.
28686 	X	nope you can add whitespace anywhere not just after a.
28687 	X	if the semicolon is there you know the statement has.
28688 	X	not really it means you can spell end of statement three ways a semicolon on its own a newline on its own or a semicolon followed by a.
28689 	X	its optional in the sense that there are other.
28690 	X	the last of those three choices is pretty pointless of course but it does no.
28691 	X	though this is irrelevant as you have no separator or terminator and no one was proposing that the compiler should mind read to separate one statement from.
28692 	X	when i was saying that optionalness of the semicolon makes the difference between separation and termination i was saying that forgive me if my pascal is rusty the following are equally.
28693 	X	example termination begin a b c d end.
28694 	X	example separation begin a b c d end.
28695 	X	note that there is always a semicolon between the a b and the c d because this is how pascal knows it is dealing with two separate statements but when the end terminates the block the semicolon can depending on the language be considered.
28696 	X	the trouble with this is that the semicolon is often deliberately used to terminate a block structure early like.
28697 	X	not with if but often with while or.
28698 	X	a fairly common would be something.
28699 	X	void strcpy alike char p dest char p src while p dest p src.
28700 	X	anyway newbies can see things like this and start thinking that the while condition is a kind of statement in itself and think it always needs a semicolon and the compiler is of course perfectly happy with this.
28701 	X	but at the end of the day source code is for people to read and.
28702 	X	i see i think i mentioned having a library for manipulating source and preserving intended semantics in another post somewhere so this does make sense to.
28703 	X	in my mindset i like unary prefix or postfix and binary infix.
28704 	X	outside of that i start getting nervous i prefer more function like syntaxes even if there is shortcircuiting and i certainly want a leading keyword to tell me that a conditional operator is.
28705 	X	the c ternary operator always seemed somehow wrong to me.
28706 	X	i still havent voted on pep because im having some trouble.
28707 	X	if c then x else y.
28708 	X	though that still falls foul of the no more than binary.
28709 	X	select c x c y z.
28710 	X	but i dont think any of those is an official option anyway so theyre very unlikely to.
28711 	X	ive seen languages where no operators could shortcircuit and ive seen plenty of languages where functions use lazy.
28712 	X	in python id be surprised if the expression x was shortcircuited even though it uses an operator and the right hand side is.
28713 	X	therefore in my view the idea that function calls imply no shortcircuiting whereas operators imply shortcircuiting is simply.
28714 	X	but yes you are right even the options that i like feel strange in one way or.
28715 	X	only the if function seems completely natural because ive used it so much in spreadsheets mainly and yes they shortcircuit it but that annoys quite a few.
28716 	X	steve at ninereeds dot fsnet dot co dot uk.
28717 	X	martijn faassen m faassen at vet uu nl ha scritto nel messaggio news btteo ti at newshost accu uu.
28718 	X	the votes can be easely intepreted this way.
28719 	X	x reject y reject z reject.
28720 	X	prefer no change over x which is preferred over y which is preferred over z over anything else.
28721 	X	x accept y reject z reject.
28722 	X	prefer x over no change over y over z over anything else.
28723 	X	x accept y accept y reject.
28724 	X	prefer x over y over no change over z over anything else.
28725 	X	the problematic kind of vote is.
28726 	X	x accept y accept z accept.
28727 	X	because you cant infer their opinion wrt weird different from xyz and no.
28728 	X	do they want a ternary so badly such that weird is preferred over no change.
28729 	X	perhaps it will show up on my news server later today or.
28730 	X	the odd thing is that all of the relatively short messages ive sent were transferred quickly and reliably whether i posted them to the list or to comp lang.
28731 	X	i really dont want to have to send out my message a paragraph at a time just so people on comp lang python can read it.
28732 	X	on wed mar terry reedy tjreedy at udel edu.
28733 	X	i for one dont care how bad someones spelling is as long as i can read.
28734 	X	here i absolutely agree with you i see no reason to force linebreaks in expressions readability is best served by human judgement not absolute.
28735 	X	if i want to write for.
28736 	X	then a b else if d.
28737 	X	then c d else if h.
28738 	X	then readability is best served by keeping each conditional on a single line so that vertical alignment can emphasize the.
28739 	X	that said i think that some form of select could have merit but as an alternative to rather than a replacement for a simpler conditional expression.
28740 	X	steve at ninereeds dot fsnet dot co dot uk.
28741 	X	stephen horne intentionally at blank co uk wrote in message news fkvgrlbdknnghuhmqvlhqqa at ax.
28742 	X	since guido is going to make up his own mind and its already known that hes not going to be bound by the vote however it comes out argueing over the fairness of the voting procedure is.
28743 	X	gerrit holl gerrit at nl linux org wrote previously although its true that if one rejects all its strange to have to do.
28744 	X	perhaps raymond will specify otherwise but it seems to me that if you wish to vote to reject the introduction of any ternary operator you could fill out the following.
28745 	X	q reject none q reject none q reject none voter name none.
28746 	X	that seems to meet all the.
28747 	X	of course i guess this leaves the danger that a new ternary expression spelled none for every c x y will be added to python.
28748 	X	i must have been thinking of ge then which has the unusual property of were a ge reserved word in most other languages in which ge if is also a reserved word but not in.
28749 	X	not in c c java perl i think.
28750 	X	piet van oostrum piet at cs uu nl private email p van oostrum at hccnet nl.
28751 	X	this is not a ballot for the official pep vote were run by raymond.
28752 	X	it is for a different vote that is intended to complement the results of the official vote by using a different type of ballot and a different method of tallying the results condorcets method for those who may be.
28753 	X	if enough people choose to participate it will provide a high quality source of additional information about the preferences of the python community regarding the ternary.
28754 	X	this vote is not intended to compete with or substitute for the official.
28755 	X	please participate in both votes if you have the time but be sure to vote in the official one if you care about the outcome of pep.
28756 	X	see the explanations in my posting to comp lang python two days ago for more information about the reasons for this supplemental vote on pep announce complementary vote re pep ternary proposal sun mar.
28757 	X	the two day nomination period for additional syntax proposals has now.
28758 	X	no additional nominations were received so the ballot is as follows.
28759 	X	xx no ternary xx t if c else f xx if c then t else f xx c t.
28760 	X	f xx cond c t f xx c t f xx c then t else f xx t when c else f xx c t else f xx c t else f xx c t f xx t if c else f xx if c then t else f xx c and t else f.
28761 	X	voting is a simple matter of ranking the alternatives of interest by replacing the xx that precedes each option with a digit.
28762 	X	for example you would use for your favourite highest ranked option and greater numbers for lower ranked.
28763 	X	you may re order the options on the.
28764 	X	it is often easier when there are many options to reorder them manually from best to worst and then assign.
28765 	X	note though that you must still assign a rank number to each option since it is always the number that determines the rank not the.
28766 	X	you may assign the same rank to multiple options if you consider them to be equally good.
28767 	X	doing this is equivalent to abstaining from participation in any decision between these equally ranked.
28768 	X	to simplify voting you may truncate your ballot by leaving certain options unranked for any options you consider to be so bad and unwinnable as to not be worth considering.
28769 	X	if you wish to do this either a leave xx in front of the unwanted option s in your submitted ballot rather than replacing it with a rank number or b delete the line s of the ballot that contain the unwanted.
28770 	X	you can also use a combination of both.
28771 	X	in either case these truncated options will be interpreted the same as if they had been ranked equally and lower than all explicitly ranked.
28772 	X	while truncation and equal rankings provide convenience ranking many options even those you dislike is a good.
28773 	X	see the strategy tips section below for reasons.
28774 	X	note that the status quo option of no ternary simply appears as one of the available options and every other proposed syntax appears as a separate option on the.
28775 	X	by placing no ternary somewhere within the middle of your ranking you can express the desire to have a ternary operator added to python only if certain forms of syntax are used and reject alternatives that you dislike while still expressing preferences among these bad alternatives in case one or more of them proves to be winnable.
28776 	X	the status quo option can of course also be ranked first or last if you feel either that a no ternary is acceptable in any form or alternately b should be added to the language at any.
28777 	X	a sample completed ballot might look like.
28778 	X	if c t else f t if c else f no ternary xx if c then t else f if c t else f.
28779 	X	here the voters favourite option is t if c else f.
28780 	X	the th option is unranked and could have instead been deleted to indicate the same.
28781 	X	surrounding lines of hyphens marking the beginning and end of the ballot are appreciated for clarity but not.
28782 	X	you may vote by submitting your email ballot to.
28783 	X	your final vote must be received within hours days.
28784 	X	wed sat of the time this message appears on comp lang python and or comp lang python announce for it to be counted in the final.
28785 	X	a confirmation message will be returned for each ballot that is received identifying any.
28786 	X	unconfirmed ballots will not appear in the results so if you dont receive a reply within a few hours you may wish to send your ballot again im confirming votes manually so the response will not be immediate.
28787 	X	if you decide to change your vote just send a revised ballot containing your new.
28788 	X	the last confirmed ballot for each email address will be the one that appears in the final.
28789 	X	results will be published on sunday march th but not before the voting period of the official vote has ended noon est.
28790 	X	published results will be sent to comp lang python and comp lang python.
28791 	X	results will include among other things a list containing each voters name email address munged and completed ballot to allow for independent.
28792 	X	therefore if you do not want any or all of this information about you made public do not vote please refer to the previous message announcing this vote for details about what types of information will appear in the.
28793 	X	you may be unfamiliar with condorcets method the system of voting used here unless you happen to be a member of the debian project.
28794 	X	although completing a ranked ballot is technically very easy if you wish to know how to maximise the chances of getting the outcome you want you should read following information before completing your ballot.
28795 	X	condorcets method of counting ranked ballots is very different from other systems stv av irv borda that also use a ranked.
28796 	X	therefore it is a bad idea to attempt to vote strategically based on what you know or think you know about how those systems.
28797 	X	the best strategies for one method of voting will usually fail very badly when applied in another even if the form of the ballot is.
28798 	X	you should not assume that ranking any unacceptable options will harm the chances of electing your preferred option s.
28799 	X	condorcets method is a system of pairwise voting where the overall result is determined by finding the majority winners of a series of two way races between every possible pair of.
28800 	X	not ranking truncating some options or assigning the same rank to a group of options is therefore equivalent to abstaining from participation in any decision between those equally ranked.
28801 	X	therefore if the final choice in the election is between two options both of which you dislike but not equally you may later regret not having participated in that.
28802 	X	you should also not vote for what you believe to be an acceptable popular choice the lesser evil compromise ahead of your true favourite s in the belief that this will somehow help to prevent the election of a popular disliked alternative the greater evil.
28803 	X	this type of strategy is often necessary in plurality first past the post voting but is ineffective and unnecessary with condorcets.
28804 	X	condorcets method finds the best compromise automatically if one is needed so doing this will simply harm the chances of electing your true.
28805 	X	see http www electionmethods org condorcet htm for a detailed explanation of.
28806 	X	with condorcets method you will maximise the power and effectiveness of your ballot by providing a complete and sincere expression of your true.
28807 	X	you should only rank options equally if you genuinely consider them to be equally good or bad.
28808 	X	yeah but now were talking seriously.
28809 	X	it is i why should be.
28810 	X	edward leo http personalpages tds net edream front html.
28811 	X	based on my experience and previous research i have selected what i consider to be the best available methods to gather voter opinions and arrive at an optimal social.
28812 	X	it is unlikely that any discussion that might take place here would persuade me.
28813 	X	for those interested in the subject of voting i recommend that you begin by reviewing the materials at.
28814 	X	should you then wish to do further research the archives of the election methods mailing list contains a great deal of useful information and a lot of junk.
28815 	X	it is available in various formats at this location.
28816 	X	http www eskimo com robla em.
28817 	X	if you wish to participate in ongoing discussions of voting systems theory the election methods list itself is highly.
28818 	X	instructions for subscribing are available at the above.
28819 	X	revised ann re complementary pep ternary vote.
28820 	X	what follows is a message that i originally posted to comp lang python on march nd shortly after raymond hettingers announcement of an official vote for.
28821 	X	unfortunately the message disappeared somehow perhaps it was cancelled due to length.
28822 	X	i know at least some people on usenet must have received the first announcement but perhaps not.
28823 	X	therefore i have revised the original article for clarity and removed some material that is no longer relevant nomination period details.
28824 	X	ive posted this message to the mailing list rather than usenet in the hope that this message will stick it contains some important background information about the unofficial complementary pep.
28825 	X	the ballot for this supplemental vote was sent to the list yesterday see ann ballot for complementary pep ternary vote mar.
28826 	X	last sunday raymond hettinger announced that an official vote on pep would be taking place between march nd and march th see vote on pep ternary operator mar for details.
28827 	X	it is regrettable that aahz did not announce his intention not to proceed with a vote on pep as i would have welcomed the opportunity to volunteer to run the official vote on behalf of comp lang.
28828 	X	had i known about this decision i would have spoken up.
28829 	X	becoming frustrated with the lack of an official vote announcement i began to plan an unofficial vote myself and had spent several hours preparing it before receiving raymonds announcement earlier.
28830 	X	after receiving the official announcement i had to decide if to proceed with my unofficial vote or abandon.
28831 	X	after looking over raymond hettingers plan i decided that there would still be some value to be gained by offering my own supplemental vote as the two plans use very different types of ballots.
28832 	X	the official ballot allows a limited ranking of choices rather than a full ranking to be.
28833 	X	the official ballot tries to gather approval information about each.
28834 	X	the official ballot has an educational component in that voters must create specified examples in their preferred.
28835 	X	my vote uses a brief nomination period to add options whereas the official ballot allows for write ins my vote specifies a method of aggregating preferences to determine a winner whereas in the official vote the method that will be used is.
28836 	X	slightly different sets of proposals are.
28837 	X	all of these factors may greatly affect the.
28838 	X	therefore it seemed to me that there would still be value in presenting my own unofficial vote proposal to comp lang python in case anyone is interested in participating using this alternate.
28839 	X	one of my motivations for leading a vote of my own was to ensure that a high quality result would be.
28840 	X	without knowing what aggregation method will be used i am uncertain as to whether the official vote will yield.
28841 	X	the form of the official ballot suggests that some type of approval ranked voting hybrid is were.
28842 	X	unlike condorcet ordinary approval voting requires the use of strategy to maximize the effectiveness of ones.
28843 	X	it is difficult for me to know how to choose where to draw the line between acceptable and unacceptable alternatives without knowing the specifics of how my ballot will be.
28844 	X	i personally do care about the outcome of pep so this matters to.
28845 	X	another motivation for me in arranging this vote was the desire to be able to demonstrate the effectiveness of a particular method of voting while at the same time contributing to the solution of a real.
28846 	X	there have been between and unique proposals for adding a ternary to python and several hundred arguments presented advocating different.
28847 	X	this makes it very difficult to find a reliable way of determining the opinion of the community of users who must choose one of these.
28848 	X	very few people are aware of condorcets method of voting yet it is ideal as a means of finding the best option from even a very large number of.
28849 	X	the vote i am offering should still be able to demonstrate this even though it is not the official one and i hope that it leads to wider adoption of the.
28850 	X	please understand that i regard this vote of mine as a complement rather than a substitute for the one were organised by raymond.
28851 	X	his vote uses a very different type of ballot and will therefore capture different information than.
28852 	X	therefore both sets of results when viewed together should be more useful to the bdfl than either one would be.
28853 	X	i have no wish to undermine the official vote by drawing away participants from.
28854 	X	it may be that gvr will only consider the results of the official vote.
28855 	X	therefore please make a point of voting in raymond hettingers vote regardless of if you decide to also participate in.
28856 	X	please read on for additional information about this complementary.
28857 	X	after careful consideration i have decided to personally organize an unofficial vote on the various proposals to provide a ternary operator for python pep.
28858 	X	details regarding nomination and voting procedures and the justification for holding this vote are provided.
28859 	X	any interested person may participate in this.
28860 	X	nominations hour day nomination period which ended with the publication of the ballot on mar.
28861 	X	voting once the nominations period had passed a ballot was posted on comp lang python and comp lang python announce ann ballot for complementary pep ternary vote.
28862 	X	this posting began a hour day voting period during which email ballots may be.
28863 	X	tallying when the voting period expires a notice will be posted to the python.
28864 	X	this will mark the start of a tallying period that should last not more than.
28865 	X	results the results of the vote will be published as soon as tallying is complete but not before the voting period of the official vote has ended noon est sunday march.
28866 	X	they will be posted to comp lang python and comp lang python announce as well as were sent directly to guido van.
28867 	X	these time periods expressed as weekdays for the period of march are roughly.
28868 	X	may not be accurate depending on where you live in the world.
28869 	X	i realise that many c l p particpants may have doubts about my qualifications for organising this.
28870 	X	for one thing although i do use python regularly in my own work i am not a recognised member of the python community this is only the rd message i have ever posted to comp lang python.
28871 	X	also i do not pretend to be impartial with regard to the outcome of pep in my two previous postings to the newsgroup i stated my preferences quite.
28872 	X	the reasons why i feel qualified to lead this process are.
28873 	X	i have a personal interest in social choice theory and have studied voting systems for the past several years so i am quite familiar with a range of single winner methods that are appropriate for this type of.
28874 	X	i have been a long time participant on the election methods mailing list http www eskimo com robla em which discusses these.
28875 	X	as part of that involvement i have carried out simulations of a variety of voting methods using software i wrote in.
28876 	X	therefore i have already implemented the algorithms needed to do election tallies using variants of condorcets method.
28877 	X	for a few months in i chaired a joint committee of members of the debian project http www debian org and the election methods list looking at ways of improving their voting method and processes see http lists debian org debian vote debian vote msg html for an introduction.
28878 	X	during that committee work i arranged several email votes on particular issues using the same voting method that i plan to use.
28879 	X	i therefore have some experience doing this type of thing as well as the tools reporting software needed to produce results for comp lang.
28880 	X	while i hope that you will trust me to carry out the vote fairly i do not expect you to rely on my.
28881 	X	the published results of the vote will include sufficient information to allow anyone to verify them independently see below for details.
28882 	X	deleted as the details are no longer relevant.
28883 	X	when a single selection must be made from among a large number of alternatives a high quality single winner voting method must be used to produce meaningful.
28884 	X	therefore a variant of condorcets method that is sometimes referred to as cloneproof ssd will be used for this.
28885 	X	a brief description of this method can be found here http www electionmethods org condorcetex htm in this system a ranked ballot is used to collect preferences from.
28886 	X	there will be no multi stage process for either reducing the number of initial choices or for deciding separately whether to adopt the ternary in principle and leave the question of syntax to a later.
28887 	X	condorcets method doesnt suffer a loss of accuracy when there are a large number of alternatives and multi stage processes are both needlessly complicated and time consuming for.
28888 	X	they also tend to bias the outcome in favour of particular alternatives and lead to certain types of strategic insincere.
28889 	X	there will also be no supermajority requirements of any kind both because they are undemocratic effectively giving the supporters of certain options multiple votes and because they are.
28890 	X	when the results are published the bdfl can easily decide for himself what sort of supermajority if any he requires to decide that a particular syntax proposal has sufficient support to make the addition of the ternary to python.
28891 	X	pairwise voting methods like cloneproof ssd make this sort of determination easy since the relative support for every possible pair of options is published with the.
28892 	X	once tallying is complete the results of the vote will be published on march th not before the voting period of the official vote has ended and will include the following items.
28893 	X	a list of the ballots that were received with each entry consisting of the voters name their email address and their completed.
28894 	X	note from this that the vote is using an open ballot not a secret.
28895 	X	this is necessary to allow participants to verify their own ballot in the results as well as make ballot stuffing by unrecognised individuals more difficult see item below for additional uses.
28896 	X	therefore if you do not want any or all of this information about you made public do not vote.
28897 	X	i will munge the published email addresses a bit to try to counter the harmful effects of spambots but you may wish to use a throwaway email account if you are concerned about.
28898 	X	a human readable version of the pairwise matrix which is a type of intermediate result that is used to determine the winner in pairwise voting.
28899 	X	it provides a kind of summary that is very useful for interpreting the results of the election and assessing the strength of support for each.
28900 	X	an example of this type of thing can be seen here http www debian org vote howto result.
28901 	X	a calculation of the single winner as determined by the tallying rules of the cloneproof ssd variant of condorcets method http www electionmethods org condorcetex htm.
28902 	X	a calculation of the social ranking of the options using a tallying method sometimes known as ranked pairs wv or tidemans method wv.
28903 	X	the social ranking is useful because in addition to identifying the single winner st rank it also orders the remaining options based on the strength of their.
28904 	X	this will allow the bdfl to easily identify other well liked alternatives if he does not wish to implement the single.
28905 	X	gpl licensed python source code that can be used by anyone to verify the algorithms and or the published.
28906 	X	this code may be immediately useful to the bdfl as he may wish to use only a subset of the published ballots people whose opinion he trusts for example and determine the winner based on those votes.
28907 	X	also if additional votes from other communities of python programmers are received after march th they could easily be added to the published ballots to determine a revised.
28908 	X	although i will attempt to answer questions about the voting process described here i will not participate in any debate on this topic nor will i consider changes to the timetable or process described.
28909 	X	participation in this vote is optional and the results are only advisory so if you find the process or voting method objectionable the simplest solution is to not.
28910 	X	those who favour other methods of voting that depend on ranked ballots stv irv borda will have access to the raw ballot data once voting is complete and are welcome to generate and publish their own results using their preferred method s.
28911 	X	while the topic of voting systems is of interest to me i havent the time to discuss it this.
28912 	X	there are quite literally an infinite number of possible ways to aggregate voter preferences so such discussions can take a lot of time.
28913 	X	furthermore i do not consider comp lang python to be an appropriate forum for this type of.
28914 	X	x spam status no hits required tests signature short dense spam phrase subj all capsuser agent pine.
28915 	X	because it was nearly impossible to understand when vote actually.
28916 	X	sincerely yours roman a suzi petrozavodsk karelia russia mailto rnd at onego ru.
28917 	X	read what i said again particularly taking note of the smiley and you might notice that it was a.
28918 	X	did you really think i was suggesting we should vote on what voting procedure to use.
28919 	X	and perhaps first vote on what voting procedure to use for the voting procedure vote.
28920 	X	and perhaps before even that we should vote on what voting procedure to use for the voting procedure voting procedure vote.
28921 	X	if my joke said anything about the vote it was suggesting we dont need to make quite so much fuss over it which seems to be your point.
28922 	X	steve at ninereeds dot fsnet dot co dot uk.
28923 	X	clark c evans cce at clarkevans com wrote in message news.
28924 	X	if you are going to trash something i like with name calling opinions masqueraded as fact please at least spell it.
28925 	X	but i guess you do not want me to read your.
28926 	X	how does c op b op c when performing a conditional selection operation violate the fundamental principle of readibility whatever that is any more than any other five token expression such as a b c or a b c.
28927 	X	this is an old post either me or agent just had a fit please.
28928 	X	steve at ninereeds dot fsnet dot co dot uk.
28929 	X	but theres only one vote that is mandated by the pep and theres only one vote thats were conducted with the implicit or explicit blessing of guido.
28930 	X	additional votes running concurrently only muddy the waters and create confusion in an already muddy and confusing.
28931 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote the basis of optimism is sheer.
28932 	X	oscar wilde the best hard science web sites that the web has to.
28933 	X	i should really check who im replying to i seem to be repeating the same things to the same person quite a.
28934 	X	steve at ninereeds dot fsnet dot co dot uk.
28935 	X	my newsserver has stopped c l p announce so i couldnt even get to vote.
28936 	X	hilsen regards max m rasmussen denmark.
28937 	X	http www futureport dk fremtiden videnskab skeptiscisme og transhumanisme.
28938 	X	i reckon i could explain it in a paragraph.
28939 	X	rank all the items in order of preferences marking a number against them with as your most prefered choice as your next most prefered choice.
28940 	X	if you give two or more items the same number you are saying you like them as much as each.
28941 	X	any items that you do not rank are allocated preferences equal to each other and lower than all the items you have.
28942 	X	or to rank everything else above.
28943 	X	philip hunt philh at cabalamat org memes are a hoax pass it on.
28944 	X	dennis lee bieber wlfraed at ix netcom com writes.
28945 	X	that just backs up my original proposition the ballot is.
28946 	X	sigmask py version feed this to your.
28947 	X	print reduce lambda xy x chr ord y ojdlwbshjti.
28948 	X	giovanni bajo noway at sorry com wrote in message news.
28949 	X	remember that python plain integers are always signed bit.
28950 	X	anything that wont fit in that has to be a long integer which can be any.
28951 	X	currently the interpreter fits a hex constant into a plain integer if it can even if it means changing.
28952 	X	youre not the first to suggest this is a bad.
28953 	X	as of python xffffffff will in fact be a positive long.
28954 	X	for versions you have to write xffffffffl to force the constant to interpreted as a.
28955 	X	i think youd have to do if x x xffffffffl x.
28956 	X	or if pep gets adopted something like x if x else xffffffffl x.
28957 	X	the inclusion of your name is so obviously wrong in.
28958 	X	on mar norman petry npetry at accesscomm ca edit.
28959 	X	your message may have been canceled because it was misinterpreted as an attempt to disrupt the.
28960 	X	your intentions are obviously good obvious to me but every element of the pep voting has led to heated discussions and there is the possibility of someone trying to derail the.
28961 	X	your post should not have been deleted but i would like to be charitable and think it that person who did it had good intentions.
28962 	X	i am not even sure who might have the power to delete the post if.
28963 	X	if it was only a usenet glitch it would not be the first.
28964 	X	i agree with phil hunt that the condorcet voting method should have been used on the official vote if for no other reason than the condorcet system is studied and debugged by voting experts and full analysis of all the special cases.
28965 	X	a programmer who wasnt an expert shouldnt attempt to create his own ad hoc encryption.
28966 	X	for the same reason i would use an existing voting method before trying to come up with one of my.
28967 	X	happily all this is trumped by the fact that this vote is not decisive and the person who will make the actual choice is also the person with the most at.
28968 	X	guido wouldnt let python suffer a deficiency or grow a.
28969 	X	thanks for going to all the trouble raymond.
28970 	X	magnus how are these advantages related to python if at all magnus certainly the second is not unless you are using type magnus checking which you rarely should.
28971 	X	maybe the first is magnus relevant i cant see exactly.
28972 	X	magnus i realize that you were talking about c im just curious magnus.
28973 	X	if i remember right part of the motivation for bool in python was that people were rolling their own in diverse.
28974 	X	also although python doesnt overload functions based on types i can still imagine contexts in which it would be useful for the default output format for boolean values to be something other than or.
28975 	X	andrew koenig ark at research att com http www research att com info ark.
28976 	X	sheila king usenet at thinkspot net wrote in message news at kserver.
28977 	X	me too i started to type in my prefered syntax and i hated.
28978 	X	but i cant figure out how to vote no ternary please.
28979 	X	in years of python zope ive only had a few places where i could use it anyway.
28980 	X	pepvote at hotmail com raymond hettinger writes.
28981 	X	im in favour of no ternary and i cant think of options id be willing to have if one was forced on me so i cant fill in lines i can do lines but not a third.
28982 	X	i dont feel this is unreasonable if a ternary was introduced i simply wouldnt use it at all my votes of reject mean that i might be willing to use or at least maintain code which used these forms in certain circumstances.
28983 	X	can we allow less than vote lines please.
28984 	X	or have some other way of not were forced to pick.
28985 	X	as i dont have a preferred syntax this was an interesting exercise trying to write these using my least disliked syntax it confirmed to me that id write all of the examples as something other than onel.
28986 	X	in which case how are the votes going to be summarised for him.
28987 	X	i assume youre not going to ask him to read all of the voting mails and work out the implications himself.
28988 	X	i cant see how this will work can you explain how the summarising will be done.
28989 	X	sorry i have little experience with multiple choice voting schemes like this.
28990 	X	for now ive submitted a vote with a deliberately invalid line ill submit a correction if when you clarify how to not express a rd place fallback.
28991 	X	sean ross sross at connectmail carleton ca writes.
28992 	X	maybe if we used the term condition comprehensions instead of ternary something they would be easier to.
28993 	X	x if c else y no change x when c else y the other proposals.
28994 	X	the pep vote is summarized at http tinyurl com f.
28995 	X	here are some of the highlights.
28996 	X	of these used a rejectall ballot and used the original.
28997 	X	had a preferred syntax they found acceptable while found no acceptable.
28998 	X	for the second ranked syntax the ratio dropped to in favor of a.
28999 	X	this means that people found only one syntax to be.
29000 	X	for the third ranked syntax the ratio dropped to.
29001 	X	this indicates that over half of the voters would prefer no change if they cant have one of their first two.
29002 	X	if the rejectall votes are attributed entirely to that syntax the ratio becomes favoring to.
29003 	X	the individual votes were highly expressive and are worth reviewing.
29004 	X	http tinyurl com z http tinyurl com z.
29005 	X	the write in votes had more accepts than rejects but had no clustering of syntax.
29006 	X	the downfall of all voting systems is not in the data collection rather it is in the way the rankings are.
29007 	X	i avoid this issue by not declaring a.
29008 	X	instead guido is were given a straight tally and a copy of all of the individual.
29009 	X	this works especially well because his vote outweighs all of the.
29010 	X	though the results lean towards accepting the pep as proposed it is not.
29011 	X	some of the no change votes included strong.
29012 	X	there were three or four ballots received after this summary was prepared but before it was.
29013 	X	ill include them for guido in a separate.
29014 	X	the pep vote is summarized at http tinyurl com f.
29015 	X	here are some of the highlights.
29016 	X	of these used a rejectall ballot and used the original.
29017 	X	had a preferred syntax they found acceptable while found no acceptable.
29018 	X	for the second ranked syntax the ratio dropped to in favor of a.
29019 	X	this means that people found only one syntax to be.
29020 	X	for the third ranked syntax the ratio dropped to.
29021 	X	this indicates that over half of the voters would prefer no change if they cant have one of their first two.
29022 	X	if the rejectall votes are attributed entirely to that syntax the ratio becomes favoring to.
29023 	X	the individual votes were highly expressive and are worth reviewing.
29024 	X	http tinyurl com z http tinyurl com z.
29025 	X	the write in votes had more accepts than rejects but had no clustering of syntax.
29026 	X	the downfall of all voting systems is not in the data collection rather it is in the way the rankings are.
29027 	X	i avoid this issue by not declaring a.
29028 	X	instead guido is were given a straight tally and a copy of all of the individual.
29029 	X	this works especially well because his vote outweighs all of the.
29030 	X	though the results leans toward accepting the pep as proposed it is not.
29031 	X	some of the no change votes included strong.
29032 	X	there were three or four ballots received after this summary was prepared but before it was.
29033 	X	ill include them for guido in a separate.
29034 	X	i do however see a lot of work were done on something that ought to be.
29035 	X	so everyone who doesnt wants no ternary operator and has no opinion on the ones offered for consideration has to figure out somehow that this is the way to vote.
29036 	X	the whole procedure seems set up to get a tally on which is the better solution not on whether we need a solution at all and its positive discouraging to actually figure out how to vote for.
29037 	X	rejecting the ones you like best is still pretty weird to or rejecting non existent.
29038 	X	this one only caught me by coincidence and also because id been watching out for an actual start of voting but not everybody will do.
29039 	X	and of course the newsgroup is already a very self selecting audience but thats who guido consulted.
29040 	X	martijn no www could we be going in the right direction.
29041 	X	jeremy fincher tweedgeezer at hotmail com wrote in message several people have requested a short way.
29042 	X	no rank ordering the preferences and then rejecting them is still the clearest and most complete message you can.
29043 	X	john roth johnroth at ameritech net ha scritto nel messaggio news vubeianta at news supernews.
29044 	X	sure when requesting additions we are not discussing about turing.
29045 	X	there are many ways you can do things in.
29046 	X	i understand that e g list comprehension is a rather new addition to the.
29047 	X	while i like them its just syntactic.
29048 	X	do while constructs is a clear use case there are many situations where you want your loop to execute at least once and have your exit condition checked at the.
29049 	X	then why do we have a loop condition at the start.
29050 	X	it would have sufficed to have a while true construct only and use breaks to evaluate conditions wherever you.
29051 	X	actually the only reason i can see that exaplains why do while is missing is that python does not have any block closing statement it uses indentation for that so there would be no obvious place to put your final condition test unless you consider this readable.
29052 	X	while check at the end t.
29053 	X	if its a post condition there is no way you can put it.
29054 	X	and anyway a clean loop construct would be cleaner than.
29055 	X	while true look im lying you if a here is the loop condition.
29056 	X	of course this is probably a good enough compromise so nobody really.
29057 	X	i dont want to implement an iterator so that i can use a for loop when just a do while loop would suffice or whiletrue break.
29058 	X	i reply to email saying that the vote needs to be.
29059 	X	q is there in case your favorite isnt on the.
29060 	X	i think its a tad late for.
29061 	X	first of all a case expression isnt even at issue for pep that should be reserved for antoher.
29062 	X	the voting process is confused enough as it.
29063 	X	amending it at this late date to add another option doesnt seem like a very good idea at.
29064 	X	for one thing how many people who have already voted are going to bother scrutinizing updates to the voting process.
29065 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote and your daddy died for you and ill do the same india arie bosskey net counter strike http www bosskey net cs a personal guide to counter.
29066 	X	i must have been thinking of then which has the unusual property of were a reserved word in most other languages in which if is also a reserved word but not in.
29067 	X	and it features in some of the pep.
29068 	X	greg ewing computer science dept university of canterbury christchurch new zealand http www cosc canterbury ac nz greg.
29069 	X	lets try this approach the vote was not.
29070 	X	that could be a reason to call it not the most important thing thought i cant find those words or the ones you quoted in normans posting.
29071 	X	not only that but even if a majority said no change werent there a larger number collectively asking for a change but not agreeing on the specifics.
29072 	X	if thats so and since the decision is entirely up to guido he could well conclude from the results that there should be a change but that it should be for example his original proposal as its elegant and clean and easily.
29073 	X	and while there may be some uh discussion of this it would be the right thing since he is after all the.
29074 	X	we wouldnt have python without guidos excellent judgment in the past and its time for him to exercise it again regardless of the specific outcome of the vote but taken it into account perhaps.
29075 	X	and theres yet another sense in which obviously a vote isnt the most important thing i e guidos decision is.
29076 	X	this voting procedure forces me to write what i like the best even in the reject case i must check the last hated expression.
29077 	X	i have no way to express what i dislike the.
29078 	X	of all thosse i dislike the most if c x else y.
29079 	X	but i cannot write reject if c x else y meaning i prefer no change over if c x else y otherwise this would be interpreted as if a change if forced the one i dislike the less is if c x else y.
29080 	X	this means that writing reject if c x else y i would actually favor this idiom.
29081 	X	this is a very confusing votation system.
29082 	X	i think people can easily get confused as i was and actually favor what they dislike the.
29083 	X	just to point out again the shortcomings of this strange idea of rejecting the most loved alternative.
29084 	X	michele simionato of physics and astronomy allen hall pittsburgh pa u s a home page http www phyast pitt edu micheles.
29085 	X	yes although plenty of things in the language are syntactic sugar in the sense of not were strictly required to make the language turing complete that doesnt mean that they should be in the.
29086 	X	yes the conditional operator can be emulated in several ways which are either concise but wrong or correct but.
29087 	X	people in the field are doing this as weve seen through the course of these threads so there is at least some demand for a conditional operator.
29088 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote the love we give away is the only love we.
29089 	X	elbert hubbard keplers laws http www alcyone com max physics kepler a proof of keplers.
29090 	X	hilsen regards max m rasmussen denmark.
29091 	X	http www futureport dk fremtiden videnskab skeptiscisme og transhumanisme.
29092 	X	you and only you keep repeating this claim which i regard as.
29093 	X	clearly you know which vote is which and ive detected no symptoms of confusion in the odd responses ive received so.
29094 	X	perhaps you should give the participants of comp lang python a bit more credit.
29095 	X	one is explicitly blessed by guido as a means of determining the communities reaction the pep had always indicated that the decision would be put to a.
29096 	X	no one disputes that its ultimately guidos decision but one vote is most definitely official and all the others are.
29097 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote and your daddy died for you and ill do the same india arie bosskey net counter strike http www bosskey net cs a personal guide to counter.
29098 	X	if the first vote shows the python community shows massive acceptance of say c a else b but other unofficial votes with the same order of responses clearly state otherwise he isnt going to blindly go with the first.
29099 	X	or if he is hes finally gone mad.
29100 	X	this isnt a matter of life and.
29101 	X	worst case its a minor wart that gets added to.
29102 	X	its not like its about electing the president of one of the most powerful countries in the world.
29103 	X	of course i will stop using python if pep gets added wink ly yrs thomas wouters thomas at xsall net.
29104 	X	copy me into your signature file to help me spread.
29105 	X	if i want to write for a if b.
29106 	X	then a b else if d.
29107 	X	then c d else if h.
29108 	X	then g h else then readability is best served by keeping each conditional on a single line so that vertical alignment can emphasize the.
29109 	X	however if you assume that in the select when proposal a missing else clause causes non matches to evaluate to none you.
29110 	X	i guess this is one extra level of but then again the if then proposal could be limited to such a scope not having an else.
29111 	X	that said i think that some form of select could have merit but as an alternative to rather than a replacement for a simpler conditional expression.
29112 	X	as soon as you add else to the if clause i think it should be time to consider how to make it more.
29113 	X	def sum lst res for itm in lst res itm return res def div numerator denominator ifzero none if denominator.
29114 	X	a sum div xy for xy in ab cd gh.
29115 	X	i really didnt want to be caught up with this meta meta discussion but i do not think this voting procedure takes people like me into.
29116 	X	anyway why it turned out this way is very.
29117 	X	the people who liked the debates about ternary operators and liked to weigh them against each other are the ones who designed the voting procedure as they.
29118 	X	this results in an overly complicated procedure that those who dont care about ternary operators wont understand very.
29119 	X	this voting procedure is is designed by those with an interest in the adoption of a ternary.
29120 	X	people who do not care about a ternary operator will still have to examine ternary operators to pick their.
29121 	X	they still have to understand this rather complicated voting procedure and list.
29122 	X	they need to understand that if they reject something they need to reject their most favored choice even though they dont favor any of.
29123 	X	im not sure what this all.
29124 	X	anyway this is not an election for representatives where i need a representative at.
29125 	X	in that case the option none of the above makes less sense though should still be supplied as it can indicate a message about the whole system.
29126 	X	in this case its however perfectly feasible to be happy without a ternary operator and to say i just plain dont want to consider any.
29127 	X	people like me who did not bother to follow the discussion much as they did not care about a ternary operator and did not want to consider it much are faced with a rather complicated set of procedures to go to in order to vote against any change in this regard at.
29128 	X	i still dont really know what i should.
29129 	X	should i really need to figure out which of the options i dislike least and then give examples of them.
29130 	X	why do i need to put in all that effort when i just dont want any of them.
29131 	X	perhaps some people were rather focused on the pep discussions and thinks everybody voting wants to be caught up in them as well.
29132 	X	now i basically have to end up picking some from a list of ternary operator candidates and then reject them right.
29133 	X	how are people who dont bother to spend this much time trying to figure it out going to figure it out.
29134 	X	laura please help those of us who do not particularly want a ternary operator in python and do not want to be educated in that respect and still want to put in a vote if only they could figure out a sensible way to do.
29135 	X	though i hope im just missing something.
29136 	X	martijn no www could we be going in the right direction.
29137 	X	will this syntax be pursued separately if it does not become the lead nomination for pep.
29138 	X	i wouldnt mind seeing both this switch case syntax in addition to what ive already selected in the pep.
29139 	X	i dont intend to prusue this much further someone else is welcome to pick up the.
29140 	X	i just started the option beacuse i didnt like the path that the terinary expression options were.
29141 	X	rather than poo poo the option i was just looking for an alternate suggestion that would make me.
29142 	X	a good solution to this problem will.
29143 	X	a maintain pythons indentation for displaying scope in other words just beacuse it is an expression and not a block construct doesnt mean it cant use indentation wisely and.
29144 	X	b facilitate greater code maintenance by allowing the compiler to fill in redundant code intelligently and.
29145 	X	c provide general conditional logic through an expression instead of a statement so that i an stop abusing.
29146 	X	all of the options on the table may do c and some of b but most fail at a since they allow for the entire exprssion to be jammed into a single.
29147 	X	just doing my best to avoid column python code.
29148 	X	this was actually brought up during the pep.
29149 	X	the problem with it is that it doesnt do the whole tokenization and compilation phase at the same time it holds some off until.
29150 	X	this is a potential performance problemi f the choose eval code appears in a loop which it likely will find itself at some.
29151 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote there are defeats more triumphant than.
29152 	X	montaigne max pandaemonium http www maxpandaemonium com a sampling of max pandameoniums.
29153 	X	philip hunt philh at cabalamat org memes are a hoax pass it on.
29154 	X	i thought it was clear from context that when i was referring to a full fledged type i was referring to a type of boolean which is incompatible between integers without explicit.
29155 	X	such a thing is what many purists demand when they talk about a distinct boolean type but such a thing is totally impractical as an addition a preexisting language without a boolean type when backward compatibility is an important factor such as for.
29156 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote custom reconciles us to.
29157 	X	edmund burke computer science http www alcyone com max reference compsci a computer science.
29158 	X	i agree at the very least there should be been some feedback on each and every form including a no change option whether affirmative negative or affirmative indifferent.
29159 	X	im somewhat disappointed with the choice of voting procedures for such a highly contentious issue particularly when the discussion about the procedures seems to have had no impact but the official vote is the official vote and thats.
29160 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote its a mans world and you men can have.
29161 	X	katherine anne porter the laws list http www alcyone com max physics laws laws rules principles effects paradoxes in.
29162 	X	in my opinion this is a very bad.
29163 	X	all a second concurrent vote is going to do is create more confusion about which vote is official whether people have already voted.
29164 	X	whether one is satisfied with the current official voting process which many people are not if you want to conduct additional add on voting processes for your own edification at least wait until the current one is finished to eliminate.
29165 	X	saying this is not the official vote and this is a different vote is all well and good but conducting the vote at all is going to great more confusion than it is going to be.
29166 	X	imagine five or six people getting the same idea and concurrently conducting their own unofficial votes all while were still waiting for the results on the official one the only one which counts.
29167 	X	uh i never even read about any nomination period beginning.
29168 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w tsftdotiote and your daddy died for you and ill do the same india arie bosskey net counter strike http www bosskey net cs a personal guide to counter.
29169 	X	usenet sucks almost as bad as smtp if you expect reliable and reliably reproduceable.
29170 	X	even if the mail news gateway works there are many hops involved in delivering the message to any given nntp server and any one of them can go.
29171 	X	or they can take a little longer than.
29172 	X	but i dont read the newsgroup i read the.
29173 	X	maybe a few newsgroup readers can see if they got either.
29174 	X	thomas wouters thomas at xsall net.
29175 	X	copy me into your signature file to help me spread.
29176 	X	well im not sure whats going.
29177 	X	i re posted the message id sent on sunday but this time sent it to the mailing list rather than via.
29178 	X	this time it does appear that my message showed up on the mailing list at.
29179 	X	the mail news gateway should be forwarding this shouldnt it.
29180 	X	from what i can tell this message still hasnt shown up on comp lang python and i sent it several hours.
29181 	X	i would like to believe that it is getting dropped because it is too long lines except that there are currently messages on comp lang python that are twice that length and ive seen some with over.
29182 	X	any better theories about whats happening here would be.
29183 	X	tweedgeezer at hotmail com jeremy fincher wrote in message news.
29184 	X	the voting procedure seems to insist that to have a say in the matter one really has to have a positive preference in order to make a real difference one cant say i reject all this armchair language design and await the day when i can read comp lang python without having to filter out messages about frivolous wishlist items.
29185 	X	in order to represent the wishes of those rendered silent i suggest the appointment of the four horsemen of the apocalypse as.
29186 	X	upon completion of the voting procedure the community will await the arrival of the four horsemen possibly arriving straight from a well deserved skiing trip in hell who will then judge the most popular ternary forms on the basis of whole community momentum before delivering their recommendation to the.
29187 	X	you cant directly do the one with the.
29188 	X	the thing that is missing from the voting procedure is an explicit way to vote for no.
29189 	X	i guess if we could all read guidos mind your way might acheive the same effect but i would prefer that some explicit and unambiguous way to vote for no change i no ternary expression syntax addition be built into the voting.
29190 	X	weve seen several methods illustrated in postings but it isnt clear at least to me that any of them are assured to not be reject as invalid votes or if accepted as valid votes that the intended effect is.
29191 	X	a q reject anything a q reject anything a q reject anything rod haper gack.
29192 	X	so how about it raymond and laura.
29193 	X	is my ballot a valid vote for no addition of a ternay expression syntax.
29194 	X	if not whats the approved solution.
29195 	X	there is a better way lap linux ada python.
29196 	X	x lambda begin cases x text if lambda is an eigenvalue x text if lambda is an eigenvalue text.
29197 	X	http www math harvard edu texman node html section.
29198 	X	as long as you keep the tex flavour its still unacceptably.
29199 	X	oops wait thats not that bad.
29200 	X	the cases keyword can be omitted and the braces should perhaps become.
29201 	X	to make it horrendously unaceptable but readable after all im mimicing math notation lets do ascii art.
29202 	X	x l x if eigenvalue l x if eigenvalue otherwise.
29203 	X	there is variable number of lines you cant go lower than two options since then the construct is redudant.
29204 	X	beni cherniavsky cben at tx technion ac il.
29205 	X	true elegance has negative overhead so it isnt subject to.
29206 	X	basics vote by email no later than noon est on sunday march.
29207 	X	line letter of most preferred format accept or reject format line letter of second best format accept or reject format line letter of third best format accept or reject format line example.
29208 	X	the published results will only include lines and note that means your name is.
29209 	X	you can use a fake name but a real name is.
29210 	X	the email address is used for assuring only one vote per.
29211 	X	resolving any questions that arise about the vote.
29212 	X	write out these five examples using your most preferred syntax x door if quantity s else data if hasattr s open s readlines else s split z if abs z.
29213 	X	else z t v index if t t else sigma t return if len s insertsort s else quicksort s note the examples are required but will not be.
29214 	X	try to get them right but it is okay if they are.
29215 	X	marking accept means that you prefer this format over no.
29216 	X	marking reject means that you prefer no change but if there is one then the marked choice would be the best.
29217 	X	choices taken from erik max franciss posting of seconded choices a x if c else y b if c then x else y e c x.
29218 	X	note all of these options have short circuit.
29219 	X	that means that cond cxy would be a special.
29220 	X	if the pep notes that a proposal had been rejected at some point then consider it.
29221 	X	sample ballot h reject c then a else b john jones x door if quantity s else data if hasattr s open s readlines else s split z if abs z.
29222 	X	else z t v index if t t else sigma t return if len s linsort s else qsort s.
29223 	X	rationale and process in the end only guidos vote.
29224 	X	the purpose of the voting is to provide him with information about how the community.
29225 	X	the goal of collecting preferences along with accept rejects is to allow everyone including those who prefer the status quo to also be able to express which syntax they find least.
29226 	X	the end result is that guido will know which is the most preferred syntax and the how much it is preferred to the status.
29227 	X	the purpose of publishing both names and the votes is to provide assurance that the process is.
29228 	X	also i think that people are more careful in their voting if they publicly take a.
29229 	X	however if someone wants to vote in secret they are welcome to use a pseudonym at least they will see their chosen name on the tally and know their vote was.
29230 	X	the purpose of the examples section is voter.
29231 	X	this provides some assurance that each voter has at least tried their own preferred.
29232 	X	exception handling if there is a dispute ill ask laura creighton to resolve.
29233 	X	if i messed up the ballot i will repost a.
29234 	X	if the email account fails i will open a new one and extend the voting by a.
29235 	X	if you make a mistake or change your mind you may re submit your vote and the previous vote will be thrown.
29236 	X	if there are any questions or discussion please use the.
29237 	X	the email address listed above is only for.
29238 	X	after a side discussion it seems that this construct is were confused with cs switch.
29239 	X	it is quite different than switch case since it is an expression has a value rather than a block construct containing.
29240 	X	its actually more like sqls case when which btw has two forms.
29241 	X	case when value then zero when value then one else unknown end.
29242 	X	case value when then zero when then one else unknown end.
29243 	X	so i was thinking about three modifications to the proposal.
29244 	X	change case to when so that confusion with switch case is harder to.
29245 	X	allow the select keyword to be missing so that the when items can be plain old boolean expressions like the st case.
29246 	X	make it clear in the motivation that this is an expression with a value not a block structure as a result this greatly improves the power of lambda functions which as i understand cant contain statements and thus cant do if then sorts of.
29247 	X	after some encouragement by raymond id like to add one more item to the survey if you like what follows perhaps you can even change your vote raymond to include.
29248 	X	q accept select when z deny everything else.
29249 	X	to those who hate the terinary operator beacuse it isnt.
29250 	X	after looking over much of my python source code i found that where i thought i needed a terinary operator i ended up taking one of two paths.
29251 	X	if quantity exit no exit elif quantity exit a door else exit s doors quantity or the more concise mapping idiom.
29252 	X	the latter construct has two advantages over the if else statement level solution.
29253 	X	its clear that im making an assignment to exit in effect the exit isnt duplicated and this aids in authoring maintenance.
29254 	X	the ugly quantity isnt duplicated for each line once again improving.
29255 	X	however the mapping idiom has three problems.
29256 	X	the conditional switch isnt exactly obvious here unless youre a python vetran this hurts in the maintenance arena besides the else case is.
29257 	X	it doesnt short circut cleanly to do a short circut you need to use ick further it results in the construction of a mapping which may not really help out.
29258 	X	it really doesnt facilitate the use whitespace indentation to re inforce a visual representation of the programs.
29259 	X	the whole rationale for this construct is to introduce a conditional expression construct and further to provide this construct in such a way as to reduce duplication of both assignment and conditional fragments to increase.
29260 	X	the goal is not to save on vertical screen realistate by enabling multi line constructs to be jumbled into a single.
29261 	X	it seems that many people are asking for the terinary option for the.
29262 	X	instead this proposal seeks to engage pythons unique approach to syntax by using whitespace to enhance the visual representation of the programs.
29263 	X	many python converts are here exactly beacuse python is very readable and thus.
29264 	X	this proposal is here soley to re enforce this pythonic approach to.
29265 	X	the proposal introduces a select or switch keyword which creates an indented expression.
29266 	X	exit select quantity when no exit when a door else s doors quantity.
29267 	X	this proposal gives you the power of the mapping idiom without the.
29268 	X	it expresses the intent of the construct in a very human readable manner using whitespace.
29269 	X	while the above is good it assumes an equality.
29270 	X	so that the structure is more generic his proposal allows an optional operator a function taking or more value and returning a boolean immediately following the case label.
29271 	X	z select abs z when when else sigma t note that the examples given in the proposal are thus very easily expressed using this notion.
29272 	X	data select hasattr sopen when true s readlines else s split.
29273 	X	z select abs z when else z.
29274 	X	t v index select t when t else sigma t.
29275 	X	return select len s when linsort s else qsort s.
29276 	X	the operator need not be binary one could for example provide a terinary operator such as def between cmprhslhs return cmp rhs and cmp lhs.
29277 	X	score select die when when when between when when else raise invalid die roll d roll.
29278 	X	as a further quite optional enhancement allow select keyword to be absent and in this case the when statement is evaulated as a boolean.
29279 	X	the proposal thus creates a flexible mechanism for avoiding the excessive duplication of assignment and equality fragments within a conditional assignment nest it does so through a new expression structure which like the rest of python uses indentation for.
29280 	X	this proposal thus provides the pratical benefit of a terinary operator while at the same time opening the door to a rich and quite readable conditional assignment.
29281 	X	as a side effect it could make lambda functions more.
29282 	X	in particular this proposal rejects the rationale for terinary operator as a way to trade horizontal screen realestate for vertical space as this rationale is in direct opposition to the fundamental principle of.
29283 	X	and as such the proposal explicitly does not include a way to include multiple case labels on the same.
29284 	X	alex martelli for validating the elimination of needless duplication of code as the primary goal for the construct and.
29285 	X	carel fellinger for presenting the idea of a plugable predicate operator.
29286 	X	raymond hettinger for asking me to write this up more or less formally.
29287 	X	may be you should use lisp.
29288 	X	at least you can express exactly what you.
29289 	X	setq exit if quantity door doors or formatted setq exit if quantity door doors snip.
29290 	X	several people have requested a short way to express that they do not want any ternary.
29291 	X	send a email to pepvote at hotmail com with a subject of pep line your full name.
29292 	X	that is simple and is easily.
29293 	X	you may of course stick with the original.
29294 	X	im not sure if i get a vote in matters like these but ive never let such details stop me from running my mouth i happen to really like the ternary operator in those languages i know that has it and i wouldnt mind seeing some form of it in python if it could be added without confusing the syntax and readability of the language as a.
29295 	X	i dont like it enough to ask for anything thatd just end up unreadably messy or that would stand out like a sore thumb looking nothing like the rest of the.
29296 	X	im already leery of using list comprehensions simply because the aesthetics of that syntax in my subjective view dont look like python enough for my tastes they remind me of inline assembly or sql in c or.
29297 	X	oh and your proposed ballot is too confusing and complicated for me to figure.
29298 	X	i could perhaps write a voting front end for it but that doesnt seem worth the effort so ill just post a rambling commentary to the net instead im more familiar with.
29299 	X	sortof reminds me of perls reverted if unless.
29300 	X	i could deal with it but too much turning the usual order of the conditional and consequent inside out takes mental effort to.
29301 	X	if parenthesizing the conditional and possible consequents turns out to be necessary i wouldnt mind that.
29302 	X	much the same as b only.
29303 	X	maybe just a bit too terse the previous form seems more explicit about what it is and what it.
29304 	X	variations on the standard c or perl style.
29305 	X	i dont mind this style at all in a language where all the code looks like that in python this would stand out at least to my aesthetic.
29306 	X	shades of reduce map or similar functional ish.
29307 	X	i dont mind having those in the language but i dont use them much.
29308 	X	id probably use this but maybe not as frequently as i might other.
29309 	X	all the disadvantages of options d and e without their advantage in.
29310 	X	i had to read that one twice to see what it.
29311 	X	something tells me id keep on having to do that so no.
29312 	X	more of the inside out logic of h and a.
29313 	X	i find it mildly confusing but this form still isnt too.
29314 	X	maybe i could live with it but imao this isnt the best.
29315 	X	and these just get ever weirder and how would you tell m apart from a regular list comprehension and introducing a new meaning for angle brackets like o would well it just somehow upsets.
29316 	X	ah one i could get to like this would be my runner up candidate if option b didnt make it id have a hard time deciding between this and f but likely id go for.
29317 	X	again if parenthesizing the conditional and or consequents is necessary id be fine with.
29318 	X	i cant think of anything that would be markedly better or worse than whats been presented so ill shut up.
29319 	X	pgp gnupg key id d acbd available from keyservers everywhere key fingerprint fad ea edc b bc c aee cd ac bd if you can fill the unforgiving minute with sixty seconds worth of distance.
29320 	X	the behavior of shelfs in regard to changes is explored and.
29321 	X	gydmzzu fsf at pikespeak metacarta com pickling generators remains a challenge a few solutions are available.
29322 	X	boudewijn rempt explains whats interesting about python.
29323 	X	http www informit com isapi product id ae ef daa daaec session id fbdb bd de f aaedcdfd content index asp.
29324 	X	allows python to be better integrated with web.
29325 	X	discord is a tool for converting dates from gregorian to.
29326 	X	http www alcyone com pyos discord.
29327 	X	pyrexdoc is an html doc generator for pyrexx.
29328 	X	http www cosc canterbury ac nz greg python pyrex tools pyrexdoc.
29329 	X	the things included in boost are too numerous to be listed individually and too eclectic to be summarised.
29330 	X	everything you want is probably one or two clicks away in these pages.
29331 	X	python orgs python language website is the traditional center of pythonia http www python org notice especially the master faq.
29332 	X	pythonware complements the digest youre reading with the daily python url http www pythonware com daily mygale is a news gathering webcrawler that specializes in new world wide web articles related to.
29333 	X	while cosmetically similar mygale and the daily python url are utterly different in their technologies and generally in their.
29334 	X	comp lang python announce announces new python.
29335 	X	be sure to scan this newly revitalized newsgroup at least.
29336 	X	djq as ugroup comp lang python announce.
29337 	X	brett cannon continues the marvelous tradition established by andrew kuchling and michael hudson of summarizing action on the python dev mailing list once every other.
29338 	X	http www python org dev summary.
29339 	X	the somewhat older vaults of parnassus ambitiously collects references to all sorts of python.
29340 	X	http www vex net x parnassus.
29341 	X	much of pythons real work takes place on special interest group mailing lists http www python org sigs.
29342 	X	the python business forum further s the interests of companies that base their business on.
29343 	X	http www python in business org.
29344 	X	the python software foundation has replaced the python consortium as an independent nexus of activity http www python org psf.
29345 	X	cetus does much of the same.
29346 	X	python faqts http python faqts com.
29347 	X	the old python to do list now lives principally in a sourceforge.
29348 	X	http sourceforge net tracker atid group id func browse the online python journal is posted at pythonjournal cognizor.
29349 	X	editor at pythonjournal com and editor at pythonjournal cognizor com welcome submission of material that helps peoples understanding of python use and offer web presentation of your.
29350 	X	py the journal of the python language http www pyzine com.
29351 	X	tenth international python conference http www python org.
29352 	X	archive probing tricks of the trade http groups google com groupsoi.
29353 	X	djq as ugroup comp lang python num http groups google com groupsmeta.
29354 	X	previous u se the r esource l uke messages are listed here http www ddj com topics pythonurl http purl org thecliff python url html dormant or http groups google com groupsoi.
29355 	X	djq as q python url as ugroup comp lang python.
29356 	X	suggestions corrections for next weeks posting are always.
29357 	X	e mail to python url at phaseit net should get.
29358 	X	to receive a new issue of this posting in e mail each monday morning approximately ask claird at phaseit net to.
29359 	X	dobbs journal http www ddj com is pleased to participate in and sponsor the python url.
29360 	X	qotw if you want to soak yourself in gasoline go right.
29361 	X	but if you do and then insist on lighting matches well dont come crying to me sean ross.
29362 	X	god its amazing that python can even raise ones telepathic.
29363 	X	last weeks python url posting leads to a discussion of the irrational and the.
29364 	X	michele simionato shows how to implement pep and thus pep using current python.
29365 	X	a complaint about not were able to compare complex numbers to other numbers turns into complaints about were able to compare incomparable.
29366 	X	oxford will host the uk python conference on wednesday april nd and thursday.
29367 	X	note that the conference website includes an interesting.
29368 	X	personally i think there should be two.
29369 	X	one to decide if a conditional expression should even be included in the first.
29370 	X	then if the decision is yes decide what operator to.
29371 	X	i suppose this could still be one ballot although its two.
29372 	X	ie yes no neutral to pep and then your top x.
29373 	X	x seems fine and the could be weighted in the order theyre listed if you like.
29374 	X	alex martelli aleax at aleax it wrote in message news.
29375 	X	well im just relying on the bdfl to simply not put any of these abominations into the l anguage we.
29376 	X	regards steve holden http www holdenweb com python web programming http pydish holdenweb com pwp register for pycon now http www python org pycon reg html.
29377 	X	what if the choices are conditional form a and conditional form b.
29378 	X	you like form a and prefer it to no.
29379 	X	you dislike form b and would rather have no form than have.
29380 	X	with your suggested voting system there is no way you can express your true.
29381 	X	philip hunt philh at cabalamat org memes are a hoax pass it on.
29382 	X	in c bool true and false stephen are pretty.
29383 	X	the ada equivalents however are stephen.
29384 	X	the reason were in c true and false cast stephen implicitly to from.
29385 	X	stephen given this behaviour the keywords true and false are no stephen more useful than library definitions such as define true stephen.
29386 	X	the weak typing due to the implicit conversion destroys stephen most if not all benefits of a separate.
29387 	X	i really dont want to get into a debate on this so i will just say that this issue was discussed extensively in the c standards committee and mostly they didnt agree with.
29388 	X	in particular despite the disadvantages of allowing implicit conversions to and from bool the type has two substantial advantages.
29389 	X	you dont have to worry about combining libraries that use different conventions for representing boolean you can overload based on.
29390 	X	these two advantages particularly the first were deemed to be sufficient by themselves to justify introducing a new.
29391 	X	andrew koenig ark at research att com http www research att com info ark.
29392 	X	thomas wouters thomas at xsall net wrote in message news.
29393 	X	after we solve the pep question well debate the iraq.
29394 	X	be interesting to see which happens first.
29395 	X	we resolve it the un resolves it the human race goes extinct were replaced by advanced genetically engineered descendant species and or intelligent but malevolent.
29396 	X	that should be if we solve.
29397 	X	my understanding was that the results of the vote were somewhat confusing depending on exactly how you interpreted.
29398 	X	indeed guido has not yet commented but hes been hard at work on which is obviously higher priority and is currently on.
29399 	X	im sure hell get back to this topic once hes had a.
29400 	X	but itll be nothing short of miraculous if hes able to pull a single sensible answer out of the whole messy discussion and.
29401 	X	then again thats why weve got a bdfl lly.
29402 	X	curtis w rendon mithra at bga com www realtime net mithra uce at ftc gov a long memory is the most subversive idea in.
29403 	X	gcs d s a c ub p l e w n o k w o m v ps pe y pgp x r tv b di d g e h r y s at h at.
29404 	X	http www newsfeed com the newsgroup service in the world.
29405 	X	see pep and google for pep on google groups for background.
29406 	X	why do you want to obscure youre own code.
29407 	X	he may sell field garden and house to a merchant royal agents or to any other public official the buyer holding field house and garden for its.
29408 	X	asperger syndroom een persoonlijke benadering http people nl linux org gerrit kom in verzet tegen dit kabinet http www sp nl.
29409 	X	its amazing how many different solutions are possible in.
29410 	X	among all such a solution by a function is most readable to me and i can well imagine such a function a.
29411 	X	i have been teaching course in c to beginners and made the experience that well chosen conditional expression are not.
29412 	X	one can misuse any feature of a language to write obscure.
29413 	X	especially for the expression of a return statement a conditional expression might be a good.
29414 	X	so its a pity that pep is rejected since nobody is forced to use such a construct if he she doesnt like.
29415 	X	helmut jarausch rwth aachen university germany.
29416 	X	and if and when that happens you can always remold any obscure and or unsafe construct to use instead the one obvious way to do it if else without any compulsion at all to keep them both on the same.
29417 	X	changing code thats obviously bad to code thats obviously good is one of the most typical actions during.
29418 	X	for example you notice a snippet.
29419 	X	sigh if that and turn it into the one obviously right form.
29420 	X	removing the redundant parentheses violating pep as well as collapsing the redundantly baroque.
29421 	X	as long as the language does provide one obvious way to do it its a minor issue that other not so obvious ways are almost inevitably going to be there too in practice you get no objections about moving from non obvious to obvious except from deliberately bloody minded people who are only out to annoy but dont judge the proportion of such people from traffic on usenet theyre much rarer in real life.
29422 	X	but if the language goes out of its way to take the trouble to add a specific construct for a task youre guaranteed that some people in the group will want to use that construct and in fact will bitterly object to any attempt to remold it away or negotiate its non use in coding.
29423 	X	and of course such construct lovers have a point if the language has adopted the construct you cannot any more argue that the construct should always be avoided if its in the language there must be occasions in which the construct is the best way to express something assuming you do accept the language rather than design a subset of it in coding conventions.
29424 	X	therefore it is disingenuous to claim as helmut does.
29425 	X	nobody is forced to use such a construct if he she doesnt like.
29426 	X	this is false everybody who programs in a group is likely to be forced to use read maintain such a construct whether they like it or.
29427 	X	the obvious single idiom is the if else statement and objections to it come mostly from people who idolize one liners see the subject of this thread.
29428 	X	passing pep would not outlaw the if else statement of.
29429 	X	weve been through it in the recent past with such innocuous language additions as suddenly the obvious to anybody code.
29430 	X	was not any more the one obvious way to do it and the equivalent.
29431 	X	so be it maybe that addition was worthwhile and its far too late to undo it.
29432 	X	but far from giving obvious benefits for maintaining other peoples code such additions of features give problems in this.
29433 	X	re read the huge threads of the time and try to divine everybodys reasons for voting the way they did im not any better placed for reading into others mind than you.
29434 	X	but claiming as a non argument the line of reasoning i dont want to use it the only way ill be able to not use it in a situation where groups of people cooperate is if its not in the language so it should not be in the language is.
29435 	X	as for recognizing in other peoples code the goofy and obscure constructions they will often employ thats a matter of skill and experience in software reading and maintenance after a while you get to make good guesses about what programming languages certain people had previously been exposed to just from exactly what malapropisms theyre most prone.
29436 	X	but if their obscure and goofy anti idioms can be shown to be in definite violation of the languages style and idioms you get to take them out and change them into the simple readable forms you.
29437 	X	if the language blesses their usage youre stuck with it in most situations of practical.
29438 	X	this is no doubt a factor each new feature needs to fully carry its weight and then.
29439 	X	but against this you often hear people defending a new proposed feature in terms of and if you dont like it you dont have to use it just as is were attempted here its important to understand that this defense is totally fallacious and.
29440 	X	of course it gets worse exponentially fast with the number of dont have to use it features if there are ten such features then you dont have one language any more you have a bit more than a thousand dialects to the th power defined by the subsets of the too big language that one is allowed encouraged to use in any given group of.
29441 	X	avoiding such fragmentation of the language community is part of why there is social pressure to use in appropriate ways those features that are in the language to keep us all using the same language rather than partially overlapping subsets.
29442 	X	but the root of the problem is with each single feature that gets added and the dont have to use it fallacious and mendacious argument can often lull some people into accepting that each single feature which is why it is so important to show it up as being mendacious fallacious misleading just plain.
29443 	X	i could have lived with python plus ternary though im a bit happier with plain good old.
29444 	X	but i have less tolerance for this erroneous and destructive line of reasoning.
29445 	X	its amazing how many different solutions are possible in.
29446 	X	among all such a solution by a function is most readable to me and i can well imagine such a function a.
29447 	X	i have been teaching course in c to beginners and made the experience that well chosen conditional expression are not.
29448 	X	one can misuse any feature of a language to write obscure.
29449 	X	especially for the expression of a return statement a conditional expression might be a good.
29450 	X	so its a pity that pep is rejected since nobody is forced to use such a construct if he she doesnt like.
29451 	X	helmut jarausch rwth aachen university germany.
29452 	X	and the sourceforge bug patch trackers.
29453 	X	http sourceforge net bugs group id http sourceforge net patch group id.
29454 	X	and failing all else try searching the comp lang python archives.
29455 	X	for this particular expression see pep which is rejected.
29456 	X	im not sure what this is meant to mean but i suspect pep would provide what youre.
29457 	X	see the second proposed solution in pep which is still listed as open but guido doesnt seem keen on the idea.
29458 	X	besides this particular example is probably better written as try x int math log a except overflowerror valueerror x.
29459 	X	anybody programming as a part of a group can be forced to use a construct when maintaining others code that uses it or pair programming with another who does and similarly for anybody who consults for that group or teaches python to people who need to join such a group or writes books which are meant to teach or at least entirely cover the language and so.
29460 	X	only in a hypothetical world where each programmer owns his or her code exclusively and never shows those sources to anybody else would your contention about nobody is forced hold.
29461 	X	in a world where groups of people cooperate courses are taught books are written and so on it.
29462 	X	each feature added to a language carries weight for everybody who uses that language except for the hypothetical isolated programmer so isolated he never even downloads code from the net to adapt it for his or her purposes quite hypothetical nowadays.
29463 	X	alex martelli aleax at aleax it wrote in message news.
29464 	X	that i would have thought was one of the best arguments for.
29465 	X	ie since people want this construct they will write it in all kinds of ways some unsafe.
29466 	X	against this was proposing that one obvious way to do it be adopted with obvious benefits for maintaining other peoples.
29467 	X	of course the adoption of a single idiom would accomplish this as.
29468 	X	correct me if im wrong but the way i understand it the reason did not gain favour wasnt on the basis of i dont wanna use it so nobody should have it which is an non argument nor of when im maintaining someone elses code i dont want to be confronted with a single easily recognised construct which is an anti argument.
29469 	X	rather it was felt that the necessity for this construct was not sufficient to justify the feature creep.
29470 	X	given the imperative to keep the language simple and against the many requests for new features the ternary operator just didnt cut.
29471 	X	michael geary mike at deletethis geary com wrote in message news vlodsje at corp supernews.
29472 	X	in fact i thought that as soon as the voting style was.
29473 	X	i dont believe that was the case.
29474 	X	i think the idea of enumerating suggestions and having a vote came.
29475 	X	in other words there was a super majority to get something.
29476 	X	in fact unless the syntax was truely awful id have voted for it whatever it.
29477 	X	i dont regard myself as a language.
29478 	X	i wouldnt cast the blame on.
29479 	X	its quite clear that he doesnt like the notion but i dont get the impression that hes got the kind of devious mind that would think this was the way to resolve.
29480 	X	on the contrary he seems to be a quite straightforward fellow in most.
29481 	X	the whole notion of one and only chance is astonishingly.
29482 	X	there is no way that the vote on pep is going to keep people from bring up the idea and having the opponents refer to it as the community decision when the vote was clearly in favor of having the feature added to the language will simply drive people away from the.
29483 	X	very true and i certainly didnt mean to imply that guido or anyone else deliberately set up the voting in a devious.
29484 	X	yes that was what troubled me when i read the.
29485 	X	my first reaction on reading this statement in the introduction was that it seemed disingenuous but im sure it was not intentionally so.
29486 	X	following the discussion a vote was.
29487 	X	while there was an overall interest in having some form of if then else expressions no one format was able to draw majority.
29488 	X	accordingly the pep was rejected due to the lack of an overwhelming majority for.
29489 	X	otoh in a different context i might be all for this approach.
29490 	X	sacramento october while the recall of gray davis passed by a wide margin none of the replacement candidates was able to draw a majority of the.
29491 	X	gray davis fans im just kidding around with you ok.
29492 	X	joshua ginsberg joshg at brainstorminternet net writes.
29493 	X	read pep and note that this was probably the largest flamewar in python history well before the still ongoing decorators.
29494 	X	like a wild horse fun to.
29495 	X	also prone to throwing you and stamping you into the ground because it doesnt like your.
29496 	X	jims pedigree of operating systems asr.
29497 	X	mark bottjer mark bottjer at hotmail com wrote in message news ebe at nntp zianet.
29498 	X	since i wrote that i managed to read the new improved and rewritten pep and discovered that the new syntax doesnt allow.
29499 	X	so it cant be used as a replacement for the property built in function and it therefore also cant be used for the dbc.
29500 	X	as delivered its strictly a replacement for the classmethod and staticmethod builtin functions and any other module or builtins that take one parameter of.
29501 	X	guidos stated reasoning was that he had a bad feeling about allowing more general.
29502 	X	so do i than syntactic i think that there are a number of very different desires on the table and its not at all clear either what they are or how they.
29503 	X	but people are still chasing after parameterized decorators which is why i included the.
29504 	X	personally i think that we will never have a one size fits all solution here other than the one we already.
29505 	X	when doing something truly unusual i see nothing wrong with using the existing foo bar foo baz syntax to do.
29506 	X	syntactic sugar is about making common cases easier not about providing everything for.
29507 	X	along the same lines i read a post elsewhere which reminded us that we can always relax the restrictions later once we understand what we actually.
29508 	X	the construct is atrocious and very.
29509 	X	i would choose no changes at all over implementing the.
29510 	X	list after def is much much much.
29511 	X	greg krohn i feel more strongly about this than i did do about pep.
29512 	X	but of course a pep were an official pep does not mean there cant be any more changes to.
29513 	X	so the question is at what point does a pre pep become a pep.
29514 	X	some peps have a revision after.
29515 	X	if any one take money from a merchant and give the merchant a field tillable for corn or sesame and order him to plant corn or sesame in the field and to harvest the crop if the cultivator plant corn or sesame in the field at the harvest the corn or sesame that is in the field shall belong to the owner of the field and he shall pay corn as rent for the money he received from the merchant and the livelihood of the cultivator shall he give to the.
29516 	X	prepep builtin path type aspergers syndrome a personal approach http people nl linux org gerrit english.
29517 	X	i think there are still a lot of.
29518 	X	i think letting settle things down at first is.
29519 	X	and then present a pep where many even better all contributors.
29520 	X	i didnt like the result of pep very much.
29521 	X	in additions there are still good points in the older discussions and existing modules that should be integrated you linked in the prepep.
29522 	X	moreover id like to extend the pre pep and pep pep xxx new path module because there is more than just the path class baseclasses exceptions helper functions.
29523 	X	the interpreter cant really optimize if elif as a dictionary lookup because what if there is a and or or clause or if the object has defined a cmp method with side effects.
29524 	X	could use a break like in c or not cleaner.
29525 	X	add a switch case statement which can return a.
29526 	X	problem you need a new keyword for that which is a bad and it starts to look like.
29527 	X	i think the ternary operator is a half baked solution to a more general problem it is useful as a little shortcut like x.
29528 	X	yes no but doing more with it leads to.
29529 	X	still something lacks in just like the break n.
29530 	X	pep to introduce a ternary operator like idiom is rejected see http www sourcekeg co uk www python org peps pep html but you can emulate it.
29531 	X	bool false s this is false true bool print s this is false.
29532 	X	in this case bool evaluates to and false is at index of the tuple false true.
29533 	X	a common idiom with a ternary in java is value test null.
29534 	X	that doesnt happen as often in python but choosing between different methods depending on a flag happens more.
29535 	X	at least theres a consistent and easy way to do.
29536 	X	use exceptions or extract your inner loops into a method and return when you want to break out.
29537 	X	spontaneous deliquescence is now a protected condition under the americans with disabilities.
29538 	X	john j reilly cthuluism and the cold war.
29539 	X	pierre frdric caillaud peufeu at free fr wrote on mon jul.
29540 	X	simpler version that already works colornames red blue print colornames get color colorblind.
29541 	X	its more for selecting between function calls than for.
29542 	X	this doesnt simulate the conditional operator it doesnt do short.
29543 	X	see pep this kind of construct was explicitly rejected but then so is the whole pep.
29544 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w aim erikmaxfrancis forever we infinitely.
29545 	X	delaney timothy c timothy tdelaney at avaya com wrote in message news.
29546 	X	i wish pep had passed a ternary operator would be much preferable to the ugly hacks that get used to emulate the ternary.
29547 	X	would anyone like to comment on the following idea.
29548 	X	i was just going to offer it as a new pep until it was suggested that i post it here for comment consideration against pep.
29549 	X	im far from were a language internist on python or anything else so go easy on me if this is stupid it just seemed quite elegant to me as a relative newbie in town.
29550 	X	i also havent got a clue whether this would be easy or even possible to implement even if it was deemed a reasonable.
29551 	X	implement c like conditional expressions but in a more flexible and python like.
29552 	X	the lack of conditional expressions combined with the lack of a switch statement in python tends to result in lots of if elif lines which often arent needed and which make code more verbose and sometimes where there are a lot of them harder to follow and more prone to mistakes than it needs to.
29553 	X	this pep attempts to address that by proposing a pythonesque conditional expressions language feature which fits well with existing language features and the way that conditional expressions are often simulated in current python code by using temporary tuples lists or.
29554 	X	it is currently possible to simulate conditional expressions in python using constructs with temporary tuples lists such as.
29555 	X	scolorname black white color color white.
29556 	X	this works but has two disadvantages.
29557 	X	i it involves packing and unpacking of a temporary tuple.
29558 	X	black white in the above which has performance implications.
29559 	X	ii this in turn means that all of the possible final values have to be valid not just the one which will be actually selected which is often not the case in a more real world example eg.
29560 	X	r default result database results index isvalid index.
29561 	X	in the above database results index isnt defined to be valid if the index value isnt which means that this technique cant be.
29562 	X	i therefore suggest a variation on the above syntax such as.
29563 	X	where the identifies the immediately following tuple as a conditional tuple in which the tuple is not actually fully evaluated.
29564 	X	instead only the element specified by the immediately following index expression is evaluated and must be.
29565 	X	this syntax could also apply to other sequence types for example dictionaries.
29566 	X	color red red color green green colorvalue.
29567 	X	again the conditional sequence is not fully evaluated stored so it doesnt matter if it is large and or has members which arent evaluated given an index value which doesnt actually select.
29568 	X	obviously the above are just simple.
29569 	X	while that may be true of the examples given here its not true of all.
29570 	X	the one possible real advantage of a conditional expression as i see it is.
29571 	X	in cases where the conditionally executed code has side effects it can be important to ensure that only one branch is evaluated creating an actual dictionary whether permanent or temporary will execute all.
29572 	X	for example using neblackcats proposed syntax even though im not fond of it.
29573 	X	in this case since reading a line from a file advances the filepointer executing both will result in a line were lost from the non selected.
29574 	X	i realize that in this specific example one could use the conditional to select a file object and call readline on the result of the conditional i could also construct examples in which entirely different operations with side effects are performed on each branch so that refactoring in that way isnt practical or one branch is a string literal and the other has some side effect or.
29575 	X	note that while i do think its important to be aware of this distinction im not advocating the proposed syntax im rather leery of using punctuation like that as peter hansen mentions or even necessarily advocating for a conditional expression at.
29576 	X	i remain unconvinced of the need for an expression to do what can already be done with statements a conditional expression may be more concise but conciseness more often hampers readability than helps it and readability is very.
29577 	X	ive heard the arguments that using a multiline if else construct in order to set up parameters for a function call is ugly but i personally find that to be no worse than the ugliness of conditional.
29578 	X	seems that every one of the examples can be done with a.
29579 	X	scolorname black white color color white.
29580 	X	colornamedict color white white color black black scolorname colornamedict color.
29581 	X	color red red color green green colorvalue.
29582 	X	colornamedict color red red color green green.
29583 	X	you can also handle the default undefined case as.
29584 	X	colornamedict color red red color green green.
29585 	X	colornamedict color red red color green green unknown unknown.
29586 	X	scolorname colornamedict get colorvalue colornamedict unknown.
29587 	X	since these dictionaries should be defined once and never inside a loop i dont believe that performance is an.
29588 	X	you can also simulate a switch statement as follows.
29589 	X	def foo args print in foo.
29590 	X	def bar args print in bar.
29591 	X	def hee args print in hee.
29592 	X	def unknown args print in unknown.
29593 	X	again you get excellent performance because dictionary lookups are blazingly.
29594 	X	switchdict is only evaluated a single time or should be and is easily extendable by simply adding more switch values as.
29595 	X	neblackcat neblackcat at yahoo com au wrote in message news.
29596 	X	colin j williams cjw at sympatico ca wrote on fri jul.
29597 	X	this works only as long as the results of the true false choices both evaluate true.
29598 	X	print eval foo return eval bar bar eval foo eval bar bar.
29599 	X	not only does it evaluate both causing who knows what side effects it returns the wrong.
29600 	X	your python nuclear missile launch program goes out of.
29601 	X	this is why we do actually need a.
29602 	X	its not that the language lacks tools for choosing now but that this behavior is so very easy to get wrong and leads to very subtle.
29603 	X	the pep vote showed that at least of the python users wanted a.
29604 	X	a second vote between the four major choices would have obviously ended us up with the if cond expr elif cond unambiguous as you can.
29605 	X	at the time my opinion was that i didnt need a ternary often enough to.
29606 	X	sometimes i want to modify some math depending on a boolean and in that case i can just treat it as or.
29607 	X	and the rest of the time its easy if tedious to just write.
29608 	X	however the ease of doing the or and versions wrong and how unbelievably ugly the latter is have changed my mind from this is not important to this is something python really does need after all.
29609 	X	the void breathed hard on my heart turning its illusions to ice shattering.
29610 	X	was reborn then free to scrawl own design on this morally blank.
29611 	X	alan moore watchmen the abyss gazes also.
29612 	X	evaluation of the expressions could be deferred by using callables like so.
29613 	X	next lambda fileone readline lambda filetwo readline which.
29614 	X	or since in this example both sides of the tuple are already callables.
29615 	X	next fileone readline filetwo readline which.
29616 	X	if which next fileone readline else next filetwo readline.
29617 	X	i was inclined to support pep but now wonder whether its really.
29618 	X	scolorname black white color color white.
29619 	X	scolorname color color white and black or white.
29620 	X	which takes avantantage of the short circuit evaluation.
29621 	X	scolorname color colorwhite and white or garbage.
29622 	X	this gives the correct result when only the first case needs to be.
29623 	X	funky uses of punctuation are about as non pythonic as you can get so i doubt this idea would make it past the.
29624 	X	all the solutions you propose dont work except the long form.
29625 	X	def iif cond expr expr if cond return expr return expr def foo x return iif x x foo foo.
29626 	X	the answer to that using current syntax depends upon the use.
29627 	X	short answer dont use lambdas for that use a full.
29628 	X	im not sure what it is that is a special case.
29629 	X	have you read pep by the way.
29630 	X	http www python org peps pep html youll notice that the community doesnt lack for syntax proposals to implement ternary.
29631 	X	many of those have patches ready to.
29632 	X	the sticking point is currently more social than.
29633 	X	robert brewer amor ministries fumanchu at amor org.
29634 	X	and with list comprehension if x for x in liste if x red.
29635 	X	nicolas fleury nid oizo at yahoo com remove the a crit dans le message news.
29636 	X	the third half of the problem was the people got wound up about details in the voting.
29637 	X	details that would have been relevant in a winner takes all vote but were less than interesting in a bdfl guidance.
29638 	X	anders j munch andersjm at inbound dk wrote in message news c edfadbf at dread news tele.
29639 	X	i dont remember that at all although it may have taken place on the deveopers list which i dont read.
29640 	X	what i remember is a simple statement of how the vote would be.
29641 	X	of course i could simply have skipped that debate as were.
29642 	X	i spent a while hanging out on the election methods mailing list after the last us election and discovered it was basically a big condorcet vs irv flame.
29643 	X	theres a good summary of lots of methods at http electionmethods org although its pretty biased towards.
29644 	X	the crux of the flamewar is that condorcet tends to elect compromise candidates who are few peoples favourite but palatable to most while irv is more likely to elect people that are the first choice of a large block but hated by.
29645 	X	which is preferable is a matter of.
29646 	X	its at the end of http www python org peps pep.
29647 	X	i havent looked at it in detail but it looks.
29648 	X	its not possible to reconstruct the original ballots from that i dont.
29649 	X	ive now looked at it in detail it is.
29650 	X	michele simionato michele simionato at poste it wrote in message news.
29651 	X	at posting google news dund fsf at lehtori cc tut fi guidos.
29652 	X	half of the problem was because guido wasnt willing to make a.
29653 	X	the other half was the voting method.
29654 	X	it irked me at the time but i didnt have the background to do a rational critique i just knew up front that the specified conditions would kill the.
29655 	X	see the article in scientific american march edition if you run the algorithm to generate the whole list rather than just the top entry and regard cycles as ties then its got the very pleasant attribute that if a candidate is placed above another a majority of the votes case did in fact put those two candidates in that.
29656 	X	cycles are of course a problem with that method you just have to do something else to break the.
29657 	X	almost anything will do if you filter the ballots to just include the issues candidates involved in the.
29658 	X	ville vainio ville at spammers com wrote in message news dund fsf at lehtori cc tut fi.
29659 	X	ick having passed through pep i just prefer directly agree with guidos decision without any votation at all.
29660 	X	joe mason joe at notcharles ca wrote in message news.
29661 	X	a large part of the sa article is a revised version of this with the recent french election added as another example and with a few relatively minor.
29662 	X	the section on why the concordet paradox is of relatively minor concern is.
29663 	X	since it involves the effects of ideology and passion it might be worth looking at from a theoretical.
29664 	X	if its a yes no vote on one syntax i agree theres not much.
29665 	X	my concern was not getting into another pep mess due to a poor choice of voting.
29666 	X	your comments indicate youre probably much more in touch with voting method theory than i am.
29667 	X	my take on it is that it needs to be done using availible data that is the original.
29668 	X	i dont know if the original data on pep is still.
29669 	X	it would be interesting although it might just be throwing fuel on a fire that should be allowed to die down to reanalyze it and i dont know if im volunteering to do it or not.
29670 	X	btw is there ever going to exist the promised summary of the reasons the pep was rejected despite a vote favoring it.
29671 	X	it was a fine bit of sophistry for the bdfl or whoever ran the thing to split the supporting votes so that it looked like there was a lack of consensus on substantial issues rather than the superficial difference of taste that actually made the discussion.
29672 	X	ive been wondering ever since how that would be spun in the final.
29673 	X	the dualist evades the frame problem but only because dualism draws the veil of mystery and obfuscation over all the tough how questions daniel c dennett.
29674 	X	it seems the debate over pep if then else expression occurred prior to the arrival of generator.
29675 	X	mightnt this new latter syntax be the ticket to a one obvious way to write a ternary expression in python.
29676 	X	and since generator expressions have nothing to do with ternary expressions it is not a reason to re do the.
29677 	X	there are literally thousands of messages in the archives including sub threads discussing exactly this.
29678 	X	by the time youve re read them all well be way beyond python.
29679 	X	weather in twenthe netherlands broken clouds mostly cloudy wind m s s m above nap gerrit holl nd year student of applied physics twente university.
29680 	X	nl http topjaklont student utwente nl.
29681 	X	z i i for i in range.
29682 	X	in general the expression t if c is true or f if c is false can be written as f t bool c.
29683 	X	if you know that c will always be either or as is the case here the bool is.
29684 	X	unless of course either f or t has side.
29685 	X	for a side effect free expression you can use c and t or f or one of the many other ternary operator.
29686 	X	after looking the two suggestions over a couple of times im still undecided as to which one is more readable for.
29687 	X	the problem is not the list comprehensions which i love and use extensively.
29688 	X	the problem is the odd syntax that has to be used for an if then else expression in.
29689 	X	i think i would have less trouble reading something like.
29690 	X	z i if i then else for i in range.
29691 	X	but of course adding a if then else expression to python is unlikely to ever happen see the rejected pep.
29692 	X	http www python org peps pep html.
29693 	X	op serge orlov schreef serge orlov at gmail com.
29694 	X	i was just illustrating that using that is unpythonic isnt really an argument because things that were thought unpythonic before are now accepted as the pythonic.
29695 	X	there were people who annouced these features in this newsgroup for version with a rather clear titles and those from the dev list that frequent this newsgroup didnt.
29696 	X	among the peps i see that at least pep is.
29697 	X	so although it may not be implemented for version a ternary operator is now an accepted as were.
29698 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
29699 	X	the python software foundation is the non profit organization that holds the intellectual property for.
29700 	X	youd have to write something like.
29701 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
29702 	X	the in development version of the documentation for python can be found at http www python org dev doc devel and should be used when looking up any documentation for new code otherwise use the current documentation as found at http docs python org.
29703 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
29704 	X	any unfamiliar punctuation is probably markup for rest otherwise it is probably regular expression syntax or a typo you can safely ignore.
29705 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
29706 	X	http mail python org pipermail python dev september html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
29707 	X	it also tries to advance the development and use of.
29708 	X	def f arg x y arg print x y.
29709 	X	to comment on anything mentioned here just post to comp lang python or email python list at python org which is a gateway to the newsgroup with a subject line mentioning what you are.
29710 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
29711 	X	peps python enhancement proposals are located at http www python org peps.
29712 	X	evaluating iterators in a boolean context.
29713 	X	we do suggest learning rest though its simple and is accepted for pep markup and can be turned into many different formats like html and.
29714 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
29715 	X	if you find the python dev summary helpful please consider making a.
29716 	X	brett with help from guido motivated this removal for python by a few factors.
29717 	X	all python dev members are interested in seeing ideas discussed by the community so dont hesitate to take a stance on.
29718 	X	in general people were undecided on this.
29719 	X	to view files in the python cvs online go to http cvs sourceforge net cgi bin viewcvs cgi python.
29720 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
29721 	X	unfortunately even though rest is standardized the wonders of programs that like to reformat text do not allow us to guarantee you will be able to run the text version of this summary through docutils as is unless it is from the original text file.
29722 	X	testing for none http www python org peps pep html testing for none.
29723 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
29724 	X	you can make a donation at http python org psf donations html.
29725 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
29726 	X	and if all of this really interests you then get involved and join python dev.
29727 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
29728 	X	reported bugs and suggested patches can be found at the sourceforge project.
29729 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
29730 	X	comp lang python pep markup http www python org peps pep html.
29731 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and http mail python org pipermail python dev september html.
29732 	X	def f x y print x y.
29733 	X	every penny helps so even a small donation with a credit card check or by paypal.
29734 	X	guido the feature can be difficult to read for some.
29735 	X	no decision had been made at the time of the.
29736 	X	please note that this summary is written using restructuredtext.
29737 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
29738 	X	docutils http docutils sf net rest restructuredtext http docutils sf net rst html psf python software foundation http python org psf.
29739 	X	properties that only call the getter function once.
29740 	X	youd have to write something like.
29741 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
29742 	X	the in development version of the documentation for python can be found at http www python org dev doc devel and should be used when looking up any documentation for new code otherwise use the current documentation as found at http docs python org.
29743 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
29744 	X	any unfamiliar punctuation is probably markup for rest otherwise it is probably regular expression syntax or a typo you can safely ignore.
29745 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
29746 	X	the html version of this summary will be available at http www python org dev summary html.
29747 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
29748 	X	def f arg x y arg print x y.
29749 	X	to comment on anything mentioned here just post to comp lang python or email python list at python org which is a gateway to the newsgroup with a subject line mentioning what you are.
29750 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
29751 	X	peps python enhancement proposals are located at http www python org peps.
29752 	X	evaluating iterators in a boolean context.
29753 	X	we do suggest learning rest though its simple and is accepted for pep markup and can be turned into many different formats like html and.
29754 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
29755 	X	brett with help from guido motivated this removal for python by a few factors.
29756 	X	all python dev members are interested in seeing ideas discussed by the community so dont hesitate to take a stance on.
29757 	X	in general people were undecided on this.
29758 	X	to view files in the python cvs online go to http cvs sourceforge net cgi bin viewcvs cgi python.
29759 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
29760 	X	unfortunately even though rest is standardized the wonders of programs that like to reformat text do not allow us to guarantee you will be able to run the text version of this summary through docutils as is unless it is from the original text file.
29761 	X	testing for none http www python org peps pep html testing for none.
29762 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
29763 	X	def eggs self expensive computation of eggs.
29764 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
29765 	X	and if all of this really interests you then get involved and join python dev.
29766 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
29767 	X	reported bugs and suggested patches can be found at the sourceforge project.
29768 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
29769 	X	comp lang python pep markup http www python org peps pep html.
29770 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and http mail python org pipermail python dev september html.
29771 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
29772 	X	guido the feature can be difficult to read for some.
29773 	X	no decision had been made at the time of the.
29774 	X	please note that this summary is written using restructuredtext.
29775 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
29776 	X	docutils http docutils sf net rest restructuredtext http docutils sf net rst html psf python software foundation http python org psf.
29777 	X	properties that only call the getter function once.
29778 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
29779 	X	would only do the eggs computation.
29780 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
29781 	X	the in development version of the documentation for python can be found at http www python org dev doc devel and should be used when looking up any documentation for new code otherwise use the current documentation as found at http docs python org.
29782 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
29783 	X	any unfamiliar punctuation is probably markup for rest otherwise it is probably regular expression syntax or a typo you can safely ignore.
29784 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
29785 	X	the html version of this summary will be available at http www python org dev summary html.
29786 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
29787 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
29788 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
29789 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
29790 	X	peps python enhancement proposals are located at http www python org peps.
29791 	X	evaluating iterators in a boolean context.
29792 	X	we do suggest learning rest though its simple and is accepted for pep markup and can be turned into many different formats like html and.
29793 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
29794 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
29795 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
29796 	X	in general people were undecided on this.
29797 	X	to view files in the python cvs online go to http cvs sourceforge net cgi bin viewcvs cgi python.
29798 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
29799 	X	unfortunately even though rest is standardized the wonders of programs that like to reformat text do not allow us to guarantee you will be able to run the text version of this summary through docutils as is unless it is from the original text file.
29800 	X	testing for none http www python org peps pep html testing for none.
29801 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
29802 	X	def eggs self expensive computation of eggs.
29803 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
29804 	X	rfc readproperty http mail python org pipermail python dev september html.
29805 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
29806 	X	reported bugs and suggested patches can be found at the sourceforge project.
29807 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
29808 	X	comp lang python pep markup http www python org peps pep html.
29809 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and http mail python org pipermail python dev september html.
29810 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
29811 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
29812 	X	no decision had been made at the time of the.
29813 	X	please note that this summary is written using restructuredtext.
29814 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
29815 	X	docutils http docutils sf net rest restructuredtext http docutils sf net rst html psf python software foundation http python org psf.
29816 	X	properties that only call the getter function once.
29817 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
29818 	X	would only do the eggs computation.
29819 	X	we need to leave the syntax to.
29820 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
29821 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
29822 	X	any unfamiliar punctuation is probably markup for rest otherwise it is probably regular expression syntax or a typo you can safely ignore.
29823 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
29824 	X	the html version of this summary will be available at http www python org dev summary html.
29825 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
29826 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
29827 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
29828 	X	weve already proved that we cant as a community agree on a.
29829 	X	some suggestions were made many of which micah integrated into the.
29830 	X	evaluating iterators in a boolean context.
29831 	X	we do suggest learning rest though its simple and is accepted for pep markup and can be turned into many different formats like html and.
29832 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
29833 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
29834 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
29835 	X	thats what we have a bdfl.
29836 	X	the suggestion was made that an implementation should precede approval of the.
29837 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
29838 	X	unfortunately even though rest is standardized the wonders of programs that like to reformat text do not allow us to guarantee you will be able to run the text version of this summary through docutils as is unless it is from the original text file.
29839 	X	testing for none http www python org peps pep html testing for none.
29840 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
29841 	X	def eggs self expensive computation of eggs.
29842 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
29843 	X	rfc readproperty http mail python org pipermail python dev september html.
29844 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
29845 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
29846 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
29847 	X	comp lang python pep markup http www python org peps pep html.
29848 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and http mail python org pipermail python dev september html.
29849 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
29850 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
29851 	X	codetags pep http python org peps pep html.
29852 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
29853 	X	docutils http docutils sf net rest restructuredtext http docutils sf net rst html psf python software foundation http python org psf.
29854 	X	properties that only call the getter function once.
29855 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
29856 	X	would only do the eggs computation.
29857 	X	we need to leave the syntax to.
29858 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
29859 	X	martin v lwis discovered that a little more than a mib could be saved in the size of python installer by using lzx instead of the standard mszip when compressing the cab.
29860 	X	pep codetags http mail python org pipermail python dev september html.
29861 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
29862 	X	the html version of this summary will be available at http www python org dev summary html.
29863 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
29864 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
29865 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
29866 	X	weve already proved that we cant as a community agree on a.
29867 	X	some suggestions were made many of which micah integrated into the.
29868 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
29869 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
29870 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
29871 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
29872 	X	thats what we have a bdfl.
29873 	X	the suggestion was made that an implementation should precede approval of the.
29874 	X	mib http en wikipedia org wiki mibibyte.
29875 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
29876 	X	testing for none http www python org peps pep html testing for none.
29877 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
29878 	X	def eggs self expensive computation of eggs.
29879 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
29880 	X	rfc readproperty http mail python org pipermail python dev september html.
29881 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
29882 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
29883 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and http mail python org pipermail python dev september html.
29884 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
29885 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
29886 	X	codetags pep http python org peps pep html.
29887 	X	http mail python org pipermail python dev september html.
29888 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
29889 	X	properties that only call the getter function once.
29890 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
29891 	X	would only do the eggs computation.
29892 	X	we need to leave the syntax to.
29893 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
29894 	X	martin v lwis discovered that a little more than a mib could be saved in the size of python installer by using lzx instead of the standard mszip when compressing the cab.
29895 	X	pep codetags http mail python org pipermail python dev september html.
29896 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and response guido suggested that that the conditional expression discussion of pep be.
29897 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivated from the key and its current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
29898 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
29899 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
29900 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
29901 	X	weve already proved that we cant as a community agree on a.
29902 	X	some suggestions were made many of which micah integrated into the.
29903 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
29904 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
29905 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
29906 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
29907 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
29908 	X	thats what we have a bdfl.
29909 	X	the suggestion was made that an implementation should precede approval of the.
29910 	X	mib http en wikipedia org wiki mibibyte.
29911 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
29912 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
29913 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
29914 	X	def eggs self expensive computation of eggs.
29915 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
29916 	X	rfc readproperty http mail python org pipermail python dev september html.
29917 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
29918 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
29919 	X	although it has not been implemented yet the plan is for it to appear in python.
29920 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
29921 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
29922 	X	codetags pep http python org peps pep html.
29923 	X	http mail python org pipermail python dev september html.
29924 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
29925 	X	pep http www python org peps pep html.
29926 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
29927 	X	would only do the eggs computation.
29928 	X	we need to leave the syntax to.
29929 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
29930 	X	martin v lwis discovered that a little more than a mib could be saved in the size of python installer by using lzx instead of the standard mszip when compressing the cab.
29931 	X	pep codetags http mail python org pipermail python dev september html.
29932 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and response guido suggested that that the conditional expression discussion of pep be.
29933 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivated from the key and its current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
29934 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
29935 	X	experimenting with this http pitrou net python sets.
29936 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
29937 	X	weve already proved that we cant as a community agree on a.
29938 	X	some suggestions were made many of which micah integrated into the.
29939 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
29940 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
29941 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
29942 	X	c coding experiment http mail python org pipermail python dev september html.
29943 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
29944 	X	thats what we have a bdfl.
29945 	X	the suggestion was made that an implementation should precede approval of the.
29946 	X	mib http en wikipedia org wiki mibibyte.
29947 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
29948 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
29949 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
29950 	X	once again the subject of removing the global interpreter lock gil came.
29951 	X	nathan bullock suggested a relpath path a path b addition to os paththat returns a relative path from path a to path b.
29952 	X	rfc readproperty http mail python org pipermail python dev september html.
29953 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
29954 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
29955 	X	although it has not been implemented yet the plan is for it to appear in python.
29956 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
29957 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
29958 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
29959 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
29960 	X	codetags pep http python org peps pep html.
29961 	X	http mail python org pipermail python dev september html.
29962 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
29963 	X	pep http www python org peps pep html.
29964 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
29965 	X	this kicked off several long threads about multi processor.
29966 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
29967 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
29968 	X	martin v lwis discovered that a little more than a mib could be saved in the size of python installer by using lzx instead of the standard mszip when compressing the cab.
29969 	X	pep codetags http mail python org pipermail python dev september html.
29970 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and response guido suggested that that the conditional expression discussion of pep be.
29971 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivated from the key and its current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
29972 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
29973 	X	experimenting with this http pitrou net python sets.
29974 	X	a long time ago circa python greg stein experimented with free threading which did yield around a times speedup on a dual processor.
29975 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
29976 	X	some suggestions were made many of which micah integrated into the.
29977 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
29978 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
29979 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
29980 	X	c coding experiment http mail python org pipermail python dev september html.
29981 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
29982 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
29983 	X	the suggestion was made that an implementation should precede approval of the.
29984 	X	mib http en wikipedia org wiki mibibyte.
29985 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
29986 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
29987 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
29988 	X	once again the subject of removing the global interpreter lock gil came.
29989 	X	nathan bullock suggested a relpath path a path b addition to os paththat returns a relative path from path a to path b.
29990 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
29991 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
29992 	X	although it has not been implemented yet the plan is for it to appear in python.
29993 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
29994 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
29995 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
29996 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
29997 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
29998 	X	codetags pep http python org peps pep html.
29999 	X	http mail python org pipermail python dev september html.
30000 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
30001 	X	pep http www python org peps pep html.
30002 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
30003 	X	this kicked off several long threads about multi processor.
30004 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
30005 	X	with the threaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
30006 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
30007 	X	pep codetags http mail python org pipermail python dev september html.
30008 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and response guido suggested that that the conditional expression discussion of pep be.
30009 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivated from the key and its current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
30010 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
30011 	X	experimenting with this http pitrou net python sets.
30012 	X	a long time ago circa python greg stein experimented with free threading which did yield around a times speedup on a dual processor.
30013 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
30014 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
30015 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
30016 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
30017 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
30018 	X	c coding experiment http mail python org pipermail python dev september html.
30019 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
30020 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
30021 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
30022 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
30023 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
30024 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
30025 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
30026 	X	once again the subject of removing the global interpreter lock gil came.
30027 	X	nathan bullock suggested a relpath path a path b addition to os paththat returns a relative path from path a to path b.
30028 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
30029 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
30030 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
30031 	X	although it has not been implemented yet the plan is for it to appear in python.
30032 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
30033 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
30034 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
30035 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
30036 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
30037 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
30038 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
30039 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
30040 	X	pep http www python org peps pep html.
30041 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
30042 	X	this kicked off several long threads about multi processor.
30043 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
30044 	X	with the threaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
30045 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
30046 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
30047 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
30048 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivated from the key and its current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
30049 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
30050 	X	experimenting with this http pitrou net python sets.
30051 	X	a long time ago circa python greg stein experimented with free threading which did yield around a times speedup on a dual processor.
30052 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
30053 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
30054 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
30055 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
30056 	X	comp lang python thread patch http sourceforge net tracker index phpfunc detail aid group id atid.
30057 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
30058 	X	c coding experiment http mail python org pipermail python dev september html.
30059 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
30060 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
30061 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
30062 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
30063 	X	these all favour multi processing over multi.
30064 	X	vendor packages directory http mail python org pipermail python dev september html.
30065 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
30066 	X	once again the subject of removing the global interpreter lock gil came.
30067 	X	nathan bullock suggested a relpath path a path b addition to os paththat returns a relative path from path a to path b.
30068 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
30069 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
30070 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
30071 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
30072 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
30073 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
30074 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
30075 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
30076 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
30077 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
30078 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
30079 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
30080 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
30081 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
30082 	X	this kicked off several long threads about multi processor.
30083 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
30084 	X	with the threaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
30085 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
30086 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
30087 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
30088 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
30089 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
30090 	X	experimenting with this http pitrou net python sets.
30091 	X	a long time ago circa python greg stein experimented with free threading which did yield around a times speedup on a dual processor.
30092 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
30093 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
30094 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
30095 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
30096 	X	comp lang python thread patch http sourceforge net tracker index phpfunc detail aid group id atid.
30097 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
30098 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
30099 	X	c coding experiment http mail python org pipermail python dev september html.
30100 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
30101 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
30102 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
30103 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
30104 	X	these all favour multi processing over multi.
30105 	X	vendor packages directory http mail python org pipermail python dev september html.
30106 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
30107 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
30108 	X	nathan bullock suggested a relpath path a path b addition to os paththat returns a relative path from path a to path b.
30109 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
30110 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
30111 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
30112 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
30113 	X	the idea of a multiprocess module gained a reasonable amount of.
30114 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
30115 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
30116 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
30117 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
30118 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
30119 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
30120 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
30121 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
30122 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
30123 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
30124 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
30125 	X	with the threaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
30126 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
30127 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
30128 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
30129 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
30130 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
30131 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
30132 	X	python ast branch and pep and http mail python org pipermail python dev september html.
30133 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
30134 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
30135 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
30136 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
30137 	X	comp lang python thread patch http sourceforge net tracker index phpfunc detail aid group id atid.
30138 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
30139 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
30140 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
30141 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
30142 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
30143 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
30144 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
30145 	X	these all favour multi processing over multi.
30146 	X	vendor packages directory http mail python org pipermail python dev september html.
30147 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
30148 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
30149 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
30150 	X	http mail python org pipermail python dev september html.
30151 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
30152 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
30153 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
30154 	X	the idea of a multiprocess module gained a reasonable amount of.
30155 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
30156 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
30157 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
30158 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
30159 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
30160 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
30161 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
30162 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
30163 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
30164 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
30165 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
30166 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
30167 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
30168 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
30169 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
30170 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
30171 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
30172 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
30173 	X	python ast branch and pep and http mail python org pipermail python dev september html.
30174 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
30175 	X	this is a summary of traffic on the python dev mailing list from september through september.
30176 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
30177 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
30178 	X	comp lang python thread patch http sourceforge net tracker index phpfunc detail aid group id atid.
30179 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
30180 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
30181 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
30182 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
30183 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
30184 	X	it is intended to inform the wider python community of on going developments on the list on a semi monthly.
30185 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
30186 	X	these all favour multi processing over multi.
30187 	X	vendor packages directory http mail python org pipermail python dev september html.
30188 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
30189 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
30190 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
30191 	X	http mail python org pipermail python dev september html.
30192 	X	he pointed out that an implementation would really be needed to prove.
30193 	X	an archive of previous summaries is available.
30194 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
30195 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
30196 	X	the idea of a multiprocess module gained a reasonable amount of.
30197 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
30198 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
30199 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
30200 	X	phillip and martin pointed out that preventing any other interaction other than enqueued messages is the difficult part each active object would for example have to have its own sys.
30201 	X	an rss feed of the titles of the summaries is.
30202 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
30203 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
30204 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
30205 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
30206 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
30207 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
30208 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
30209 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
30210 	X	you can also watch comp lang python or comp lang python announce for new summaries or through their email gateways of python list or python announce respectively as found at http mail python org.
30211 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
30212 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
30213 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
30214 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
30215 	X	python ast branch and pep and http mail python org pipermail python dev september html.
30216 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
30217 	X	this is a summary of traffic on the python dev mailing list from september through september.
30218 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
30219 	X	this is the th summary written by the python dev summary duo of steve bethard and tony meyer i feel like the white rabbit in.
30220 	X	comp lang python thread patch http sourceforge net tracker index phpfunc detail aid group id atid.
30221 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
30222 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
30223 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
30224 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
30225 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
30226 	X	it is intended to inform the wider python community of on going developments on the list on a semi monthly.
30227 	X	items on the list were discussed further with some disagreement about what was.
30228 	X	to contact us please send email.
30229 	X	vendor packages directory http mail python org pipermail python dev september html.
30230 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
30231 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
30232 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
30233 	X	http mail python org pipermail python dev september html.
30234 	X	he pointed out that an implementation would really be needed to prove.
30235 	X	an archive of previous summaries is available.
30236 	X	steve bethard steven bethard at gmail com http gmail com tony meyer tony meyer at gmail com http gmail com.
30237 	X	the idea of a multiprocess module gained a reasonable amount of.
30238 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
30239 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
30240 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
30241 	X	phillip and martin pointed out that preventing any other interaction other than enqueued messages is the difficult part each active object would for example have to have its own sys.
30242 	X	an rss feed of the titles of the summaries is.
30243 	X	do not post to comp lang python if you wish to reach.
30244 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
30245 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
30246 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
30247 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
30248 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
30249 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
30250 	X	you can also watch comp lang python or comp lang python announce for new summaries or through their email gateways of python list or python announce respectively as found at http mail python org.
30251 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
30252 	X	the python software foundation is the non profit organization that holds the intellectual property for.
30253 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
30254 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
30255 	X	python ast branch and pep and http mail python org pipermail python dev september html.
30256 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
30257 	X	this is a summary of traffic on the python dev mailing list from september through september.
30258 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
30259 	X	this is the th summary written by the python dev summary duo of steve bethard and tony meyer i feel like the white rabbit in.
30260 	X	http mail python org pipermail python dev september html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
30261 	X	it also tries to advance the development and use of.
30262 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
30263 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
30264 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
30265 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
30266 	X	it is intended to inform the wider python community of on going developments on the list on a semi monthly.
30267 	X	items on the list were discussed further with some disagreement about what was.
30268 	X	to contact us please send email.
30269 	X	if you find the python dev summary helpful please consider making a.
30270 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
30271 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
30272 	X	http mail python org pipermail python dev september html.
30273 	X	he pointed out that an implementation would really be needed to prove.
30274 	X	an archive of previous summaries is available.
30275 	X	steve bethard steven bethard at gmail com http gmail com tony meyer tony meyer at gmail com http gmail com.
30276 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
30277 	X	you can make a donation at http python org psf donations html.
30278 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
30279 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
30280 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
30281 	X	phillip and martin pointed out that preventing any other interaction other than enqueued messages is the difficult part each active object would for example have to have its own sys.
30282 	X	an rss feed of the titles of the summaries is.
30283 	X	do not post to comp lang python if you wish to reach.
30284 	X	def f x y print x y.
30285 	X	every penny helps so even a small donation with a credit card check or by paypal.
30286 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
30287 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
30288 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
30289 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
30290 	X	you can also watch comp lang python or comp lang python announce for new summaries or through their email gateways of python list or python announce respectively as found at http mail python org.
30291 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
30292 	X	the python software foundation is the non profit organization that holds the intellectual property for.
30293 	X	youd have to write something like.
30294 	X	python ast branch and pep and http mail python org pipermail python dev september html.
30295 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
30296 	X	this is a summary of traffic on the python dev mailing list from september through september.
30297 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
30298 	X	this is the th summary written by the python dev summary duo of steve bethard and tony meyer i feel like the white rabbit in.
30299 	X	http mail python org pipermail python dev september html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
30300 	X	it also tries to advance the development and use of.
30301 	X	def f arg x y arg print x y.
30302 	X	to comment on anything mentioned here just post to comp lang python or email python list at python org which is a gateway to the newsgroup with a subject line mentioning what you are.
30303 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
30304 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
30305 	X	it is intended to inform the wider python community of on going developments on the list on a semi monthly.
30306 	X	items on the list were discussed further with some disagreement about what was.
30307 	X	to contact us please send email.
30308 	X	if you find the python dev summary helpful please consider making a.
30309 	X	brett with help from guido motivated this removal for python by a few factors.
30310 	X	all python dev members are interested in seeing ideas discussed by the community so dont hesitate to take a stance on.
30311 	X	http mail python org pipermail python dev september html.
30312 	X	he pointed out that an implementation would really be needed to prove.
30313 	X	an archive of previous summaries is available.
30314 	X	steve bethard steven bethard at gmail com http gmail com tony meyer tony meyer at gmail com http gmail com.
30315 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
30316 	X	you can make a donation at http python org psf donations html.
30317 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
30318 	X	and if all of this really interests you then get involved and join python dev.
30319 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
30320 	X	phillip and martin pointed out that preventing any other interaction other than enqueued messages is the difficult part each active object would for example have to have its own sys.
30321 	X	an rss feed of the titles of the summaries is.
30322 	X	do not post to comp lang python if you wish to reach.
30323 	X	def f x y print x y.
30324 	X	every penny helps so even a small donation with a credit card check or by paypal.
30325 	X	guido the feature can be difficult to read for some.
30326 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
30327 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
30328 	X	you can also watch comp lang python or comp lang python announce for new summaries or through their email gateways of python list or python announce respectively as found at http mail python org.
30329 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
30330 	X	the python software foundation is the non profit organization that holds the intellectual property for.
30331 	X	youd have to write something like.
30332 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
30333 	X	the in development version of the documentation for python can be found at http www python org dev doc devel and should be used when looking up any documentation for new code otherwise use the current documentation as found at http docs python org.
30334 	X	this is a summary of traffic on the python dev mailing list from september through september.
30335 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
30336 	X	this is the th summary written by the python dev summary duo of steve bethard and tony meyer i feel like the white rabbit in.
30337 	X	http mail python org pipermail python dev september html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
30338 	X	it also tries to advance the development and use of.
30339 	X	def f arg x y arg print x y.
30340 	X	to comment on anything mentioned here just post to comp lang python or email python list at python org which is a gateway to the newsgroup with a subject line mentioning what you are.
30341 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
30342 	X	peps python enhancement proposals are located at http www python org peps.
30343 	X	it is intended to inform the wider python community of on going developments on the list on a semi monthly.
30344 	X	items on the list were discussed further with some disagreement about what was.
30345 	X	to contact us please send email.
30346 	X	if you find the python dev summary helpful please consider making a.
30347 	X	brett with help from guido motivated this removal for python by a few factors.
30348 	X	all python dev members are interested in seeing ideas discussed by the community so dont hesitate to take a stance on.
30349 	X	in general people were undecided on this.
30350 	X	to view files in the python cvs online go to http cvs sourceforge net cgi bin viewcvs cgi python.
30351 	X	an archive of previous summaries is available.
30352 	X	steve bethard steven bethard at gmail com http gmail com tony meyer tony meyer at gmail com http gmail com.
30353 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
30354 	X	you can make a donation at http python org psf donations html.
30355 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
30356 	X	and if all of this really interests you then get involved and join python dev.
30357 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
30358 	X	reported bugs and suggested patches can be found at the sourceforge project.
30359 	X	an rss feed of the titles of the summaries is.
30360 	X	do not post to comp lang python if you wish to reach.
30361 	X	def f x y print x y.
30362 	X	every penny helps so even a small donation with a credit card check or by paypal.
30363 	X	guido the feature can be difficult to read for some.
30364 	X	no decision had been made at the time of the.
30365 	X	please note that this summary is written using restructuredtext.
30366 	X	you can also watch comp lang python or comp lang python announce for new summaries or through their email gateways of python list or python announce respectively as found at http mail python org.
30367 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
30368 	X	the python software foundation is the non profit organization that holds the intellectual property for.
30369 	X	youd have to write something like.
30370 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
30371 	X	the in development version of the documentation for python can be found at http www python org dev doc devel and should be used when looking up any documentation for new code otherwise use the current documentation as found at http docs python org.
30372 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
30373 	X	any unfamiliar punctuation is probably markup for rest otherwise it is probably regular expression syntax or a typo you can safely ignore.
30374 	X	this is the th summary written by the python dev summary duo of steve bethard and tony meyer i feel like the white rabbit in.
30375 	X	http mail python org pipermail python dev september html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
30376 	X	it also tries to advance the development and use of.
30377 	X	def f arg x y arg print x y.
30378 	X	to comment on anything mentioned here just post to comp lang python or email python list at python org which is a gateway to the newsgroup with a subject line mentioning what you are.
30379 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
30380 	X	peps python enhancement proposals are located at http www python org peps.
30381 	X	evaluating iterators in a boolean context.
30382 	X	we do suggest learning rest though its simple and is accepted for pep markup and can be turned into many different formats like html and.
30383 	X	to contact us please send email.
30384 	X	if you find the python dev summary helpful please consider making a.
30385 	X	brett with help from guido motivated this removal for python by a few factors.
30386 	X	all python dev members are interested in seeing ideas discussed by the community so dont hesitate to take a stance on.
30387 	X	in general people were undecided on this.
30388 	X	to view files in the python cvs online go to http cvs sourceforge net cgi bin viewcvs cgi python.
30389 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
30390 	X	unfortunately even though rest is standardized the wonders of programs that like to reformat text do not allow us to guarantee you will be able to run the text version of this summary through docutils as is unless it is from the original text file.
30391 	X	steve bethard steven bethard at gmail com http gmail com tony meyer tony meyer at gmail com http gmail com.
30392 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
30393 	X	you can make a donation at http python org psf donations html.
30394 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
30395 	X	and if all of this really interests you then get involved and join python dev.
30396 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
30397 	X	reported bugs and suggested patches can be found at the sourceforge project.
30398 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
30399 	X	comp lang python pep markup http www python org peps pep html.
30400 	X	do not post to comp lang python if you wish to reach.
30401 	X	def f x y print x y.
30402 	X	every penny helps so even a small donation with a credit card check or by paypal.
30403 	X	guido the feature can be difficult to read for some.
30404 	X	no decision had been made at the time of the.
30405 	X	please note that this summary is written using restructuredtext.
30406 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
30407 	X	docutils http docutils sf net rest restructuredtext http docutils sf net rst html psf python software foundation http python org psf.
30408 	X	the python software foundation is the non profit organization that holds the intellectual property for.
30409 	X	youd have to write something like.
30410 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
30411 	X	the in development version of the documentation for python can be found at http www python org dev doc devel and should be used when looking up any documentation for new code otherwise use the current documentation as found at http docs python org.
30412 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
30413 	X	any unfamiliar punctuation is probably markup for rest otherwise it is probably regular expression syntax or a typo you can safely ignore.
30414 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
30415 	X	it also tries to advance the development and use of.
30416 	X	def f arg x y arg print x y.
30417 	X	to comment on anything mentioned here just post to comp lang python or email python list at python org which is a gateway to the newsgroup with a subject line mentioning what you are.
30418 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
30419 	X	peps python enhancement proposals are located at http www python org peps.
30420 	X	evaluating iterators in a boolean context.
30421 	X	we do suggest learning rest though its simple and is accepted for pep markup and can be turned into many different formats like html and.
30422 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
30423 	X	if you find the python dev summary helpful please consider making a.
30424 	X	brett with help from guido motivated this removal for python by a few factors.
30425 	X	all python dev members are interested in seeing ideas discussed by the community so dont hesitate to take a stance on.
30426 	X	in general people were undecided on this.
30427 	X	to view files in the python cvs online go to http cvs sourceforge net cgi bin viewcvs cgi python.
30428 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
30429 	X	unfortunately even though rest is standardized the wonders of programs that like to reformat text do not allow us to guarantee you will be able to run the text version of this summary through docutils as is unless it is from the original text file.
30430 	X	testing for none http www python org peps pep html testing for none.
30431 	X	you can make a donation at http python org psf donations html.
30432 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
30433 	X	and if all of this really interests you then get involved and join python dev.
30434 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
30435 	X	reported bugs and suggested patches can be found at the sourceforge project.
30436 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
30437 	X	comp lang python pep markup http www python org peps pep html.
30438 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and http mail python org pipermail python dev september html.
30439 	X	every penny helps so even a small donation with a credit card check or by paypal.
30440 	X	guido the feature can be difficult to read for some.
30441 	X	no decision had been made at the time of the.
30442 	X	please note that this summary is written using restructuredtext.
30443 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
30444 	X	docutils http docutils sf net rest restructuredtext http docutils sf net rst html psf python software foundation http python org psf.
30445 	X	properties that only call the getter function once.
30446 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
30447 	X	the in development version of the documentation for python can be found at http www python org dev doc devel and should be used when looking up any documentation for new code otherwise use the current documentation as found at http docs python org.
30448 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
30449 	X	any unfamiliar punctuation is probably markup for rest otherwise it is probably regular expression syntax or a typo you can safely ignore.
30450 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
30451 	X	the html version of this summary will be available at http www python org dev summary html.
30452 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
30453 	X	to comment on anything mentioned here just post to comp lang python or email python list at python org which is a gateway to the newsgroup with a subject line mentioning what you are.
30454 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
30455 	X	peps python enhancement proposals are located at http www python org peps.
30456 	X	evaluating iterators in a boolean context.
30457 	X	we do suggest learning rest though its simple and is accepted for pep markup and can be turned into many different formats like html and.
30458 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
30459 	X	all python dev members are interested in seeing ideas discussed by the community so dont hesitate to take a stance on.
30460 	X	in general people were undecided on this.
30461 	X	to view files in the python cvs online go to http cvs sourceforge net cgi bin viewcvs cgi python.
30462 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
30463 	X	unfortunately even though rest is standardized the wonders of programs that like to reformat text do not allow us to guarantee you will be able to run the text version of this summary through docutils as is unless it is from the original text file.
30464 	X	testing for none http www python org peps pep html testing for none.
30465 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
30466 	X	def eggs self expensive computation of eggs.
30467 	X	and if all of this really interests you then get involved and join python dev.
30468 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
30469 	X	reported bugs and suggested patches can be found at the sourceforge project.
30470 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
30471 	X	comp lang python pep markup http www python org peps pep html.
30472 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and http mail python org pipermail python dev september html.
30473 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
30474 	X	no decision had been made at the time of the.
30475 	X	please note that this summary is written using restructuredtext.
30476 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
30477 	X	docutils http docutils sf net rest restructuredtext http docutils sf net rst html psf python software foundation http python org psf.
30478 	X	properties that only call the getter function once.
30479 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
30480 	X	would only do the eggs computation.
30481 	X	the in development version of the documentation for python can be found at http www python org dev doc devel and should be used when looking up any documentation for new code otherwise use the current documentation as found at http docs python org.
30482 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
30483 	X	any unfamiliar punctuation is probably markup for rest otherwise it is probably regular expression syntax or a typo you can safely ignore.
30484 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
30485 	X	the html version of this summary will be available at http www python org dev summary html.
30486 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
30487 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
30488 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
30489 	X	peps python enhancement proposals are located at http www python org peps.
30490 	X	evaluating iterators in a boolean context.
30491 	X	we do suggest learning rest though its simple and is accepted for pep markup and can be turned into many different formats like html and.
30492 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
30493 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
30494 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
30495 	X	to view files in the python cvs online go to http cvs sourceforge net cgi bin viewcvs cgi python.
30496 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
30497 	X	unfortunately even though rest is standardized the wonders of programs that like to reformat text do not allow us to guarantee you will be able to run the text version of this summary through docutils as is unless it is from the original text file.
30498 	X	testing for none http www python org peps pep html testing for none.
30499 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
30500 	X	def eggs self expensive computation of eggs.
30501 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
30502 	X	rfc readproperty http mail python org pipermail python dev september html.
30503 	X	reported bugs and suggested patches can be found at the sourceforge project.
30504 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
30505 	X	comp lang python pep markup http www python org peps pep html.
30506 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and http mail python org pipermail python dev september html.
30507 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
30508 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
30509 	X	please note that this summary is written using restructuredtext.
30510 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
30511 	X	docutils http docutils sf net rest restructuredtext http docutils sf net rst html psf python software foundation http python org psf.
30512 	X	properties that only call the getter function once.
30513 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
30514 	X	would only do the eggs computation.
30515 	X	we need to leave the syntax to.
30516 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
30517 	X	any unfamiliar punctuation is probably markup for rest otherwise it is probably regular expression syntax or a typo you can safely ignore.
30518 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
30519 	X	the html version of this summary will be available at http www python org dev summary html.
30520 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
30521 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
30522 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
30523 	X	weve already proved that we cant as a community agree on a.
30524 	X	some suggestions were made many of which micah integrated into the.
30525 	X	we do suggest learning rest though its simple and is accepted for pep markup and can be turned into many different formats like html and.
30526 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
30527 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
30528 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
30529 	X	thats what we have a bdfl.
30530 	X	the suggestion was made that an implementation should precede approval of the.
30531 	X	unfortunately even though rest is standardized the wonders of programs that like to reformat text do not allow us to guarantee you will be able to run the text version of this summary through docutils as is unless it is from the original text file.
30532 	X	testing for none http www python org peps pep html testing for none.
30533 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
30534 	X	def eggs self expensive computation of eggs.
30535 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
30536 	X	rfc readproperty http mail python org pipermail python dev september html.
30537 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
30538 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
30539 	X	comp lang python pep markup http www python org peps pep html.
30540 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and http mail python org pipermail python dev september html.
30541 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
30542 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
30543 	X	codetags pep http python org peps pep html.
30544 	X	docutils http docutils sf net rest restructuredtext http docutils sf net rst html psf python software foundation http python org psf.
30545 	X	properties that only call the getter function once.
30546 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
30547 	X	would only do the eggs computation.
30548 	X	we need to leave the syntax to.
30549 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
30550 	X	martin v lwis discovered that a little more than a mib could be saved in the size of python installer by using lzx instead of the standard mszip when compressing the cab.
30551 	X	pep codetags http mail python org pipermail python dev september html.
30552 	X	the html version of this summary will be available at http www python org dev summary html.
30553 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
30554 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
30555 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
30556 	X	weve already proved that we cant as a community agree on a.
30557 	X	some suggestions were made many of which micah integrated into the.
30558 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
30559 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
30560 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
30561 	X	thats what we have a bdfl.
30562 	X	the suggestion was made that an implementation should precede approval of the.
30563 	X	mib http en wikipedia org wiki mibibyte.
30564 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
30565 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
30566 	X	def eggs self expensive computation of eggs.
30567 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
30568 	X	rfc readproperty http mail python org pipermail python dev september html.
30569 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
30570 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
30571 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
30572 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
30573 	X	codetags pep http python org peps pep html.
30574 	X	http mail python org pipermail python dev september html.
30575 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
30576 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
30577 	X	would only do the eggs computation.
30578 	X	we need to leave the syntax to.
30579 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
30580 	X	martin v lwis discovered that a little more than a mib could be saved in the size of python installer by using lzx instead of the standard mszip when compressing the cab.
30581 	X	pep codetags http mail python org pipermail python dev september html.
30582 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and response guido suggested that that the conditional expression discussion of pep be.
30583 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivated from the key and its current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
30584 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
30585 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
30586 	X	weve already proved that we cant as a community agree on a.
30587 	X	some suggestions were made many of which micah integrated into the.
30588 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
30589 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
30590 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
30591 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
30592 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
30593 	X	thats what we have a bdfl.
30594 	X	the suggestion was made that an implementation should precede approval of the.
30595 	X	mib http en wikipedia org wiki mibibyte.
30596 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
30597 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
30598 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
30599 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
30600 	X	rfc readproperty http mail python org pipermail python dev september html.
30601 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
30602 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
30603 	X	although it has not been implemented yet the plan is for it to appear in python.
30604 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
30605 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
30606 	X	codetags pep http python org peps pep html.
30607 	X	http mail python org pipermail python dev september html.
30608 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
30609 	X	pep http www python org peps pep html.
30610 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
30611 	X	we need to leave the syntax to.
30612 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
30613 	X	martin v lwis discovered that a little more than a mib could be saved in the size of python installer by using lzx instead of the standard mszip when compressing the cab.
30614 	X	pep codetags http mail python org pipermail python dev september html.
30615 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and response guido suggested that that the conditional expression discussion of pep be.
30616 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivated from the key and its current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
30617 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
30618 	X	experimenting with this http pitrou net python sets.
30619 	X	weve already proved that we cant as a community agree on a.
30620 	X	some suggestions were made many of which micah integrated into the.
30621 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
30622 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
30623 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
30624 	X	c coding experiment http mail python org pipermail python dev september html.
30625 	X	thats what we have a bdfl.
30626 	X	the suggestion was made that an implementation should precede approval of the.
30627 	X	mib http en wikipedia org wiki mibibyte.
30628 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
30629 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
30630 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
30631 	X	once again the subject of removing the global interpreter lock gil came.
30632 	X	nathan bullock suggested a relpath path a path b addition to os paththat returns a relative path from path a to path b.
30633 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
30634 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
30635 	X	although it has not been implemented yet the plan is for it to appear in python.
30636 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
30637 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
30638 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
30639 	X	codetags pep http python org peps pep html.
30640 	X	http mail python org pipermail python dev september html.
30641 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
30642 	X	pep http www python org peps pep html.
30643 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
30644 	X	this kicked off several long threads about multi processor.
30645 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
30646 	X	martin v lwis discovered that a little more than a mib could be saved in the size of python installer by using lzx instead of the standard mszip when compressing the cab.
30647 	X	pep codetags http mail python org pipermail python dev september html.
30648 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and response guido suggested that that the conditional expression discussion of pep be.
30649 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivated from the key and its current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
30650 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
30651 	X	experimenting with this http pitrou net python sets.
30652 	X	a long time ago circa python greg stein experimented with free threading which did yield around a times speedup on a dual processor.
30653 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
30654 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
30655 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
30656 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
30657 	X	c coding experiment http mail python org pipermail python dev september html.
30658 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
30659 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
30660 	X	mib http en wikipedia org wiki mibibyte.
30661 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
30662 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
30663 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
30664 	X	once again the subject of removing the global interpreter lock gil came.
30665 	X	nathan bullock suggested a relpath path a path b addition to os paththat returns a relative path from path a to path b.
30666 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
30667 	X	although it has not been implemented yet the plan is for it to appear in python.
30668 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
30669 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
30670 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
30671 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
30672 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
30673 	X	http mail python org pipermail python dev september html.
30674 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
30675 	X	pep http www python org peps pep html.
30676 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
30677 	X	this kicked off several long threads about multi processor.
30678 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
30679 	X	with the threaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
30680 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
30681 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and response guido suggested that that the conditional expression discussion of pep be.
30682 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivated from the key and its current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
30683 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
30684 	X	experimenting with this http pitrou net python sets.
30685 	X	a long time ago circa python greg stein experimented with free threading which did yield around a times speedup on a dual processor.
30686 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
30687 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
30688 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
30689 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
30690 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
30691 	X	c coding experiment http mail python org pipermail python dev september html.
30692 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
30693 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
30694 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
30695 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
30696 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
30697 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
30698 	X	once again the subject of removing the global interpreter lock gil came.
30699 	X	nathan bullock suggested a relpath path a path b addition to os paththat returns a relative path from path a to path b.
30700 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
30701 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
30702 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
30703 	X	although it has not been implemented yet the plan is for it to appear in python.
30704 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
30705 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
30706 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
30707 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
30708 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
30709 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
30710 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
30711 	X	pep http www python org peps pep html.
30712 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
30713 	X	this kicked off several long threads about multi processor.
30714 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
30715 	X	with the threaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
30716 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
30717 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
30718 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
30719 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
30720 	X	experimenting with this http pitrou net python sets.
30721 	X	a long time ago circa python greg stein experimented with free threading which did yield around a times speedup on a dual processor.
30722 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
30723 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
30724 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
30725 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
30726 	X	comp lang python thread patch http sourceforge net tracker index phpfunc detail aid group id atid.
30727 	X	c coding experiment http mail python org pipermail python dev september html.
30728 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
30729 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
30730 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
30731 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
30732 	X	these all favour multi processing over multi.
30733 	X	vendor packages directory http mail python org pipermail python dev september html.
30734 	X	once again the subject of removing the global interpreter lock gil came.
30735 	X	nathan bullock suggested a relpath path a path b addition to os paththat returns a relative path from path a to path b.
30736 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
30737 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
30738 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
30739 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
30740 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
30741 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
30742 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
30743 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
30744 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
30745 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
30746 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
30747 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
30748 	X	this kicked off several long threads about multi processor.
30749 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
30750 	X	with the threaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
30751 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
30752 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
30753 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
30754 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
30755 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
30756 	X	a long time ago circa python greg stein experimented with free threading which did yield around a times speedup on a dual processor.
30757 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
30758 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
30759 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
30760 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
30761 	X	comp lang python thread patch http sourceforge net tracker index phpfunc detail aid group id atid.
30762 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
30763 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
30764 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
30765 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
30766 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
30767 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
30768 	X	these all favour multi processing over multi.
30769 	X	vendor packages directory http mail python org pipermail python dev september html.
30770 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
30771 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
30772 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
30773 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
30774 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
30775 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
30776 	X	the idea of a multiprocess module gained a reasonable amount of.
30777 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
30778 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
30779 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
30780 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
30781 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
30782 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
30783 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
30784 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
30785 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
30786 	X	with the threaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
30787 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
30788 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
30789 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
30790 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
30791 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
30792 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
30793 	X	python ast branch and pep and http mail python org pipermail python dev september html.
30794 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
30795 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
30796 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
30797 	X	comp lang python thread patch http sourceforge net tracker index phpfunc detail aid group id atid.
30798 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
30799 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
30800 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
30801 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
30802 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
30803 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
30804 	X	these all favour multi processing over multi.
30805 	X	vendor packages directory http mail python org pipermail python dev september html.
30806 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
30807 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
30808 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
30809 	X	http mail python org pipermail python dev september html.
30810 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
30811 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
30812 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
30813 	X	the idea of a multiprocess module gained a reasonable amount of.
30814 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
30815 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
30816 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
30817 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
30818 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
30819 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
30820 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
30821 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
30822 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
30823 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
30824 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
30825 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
30826 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
30827 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
30828 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
30829 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
30830 	X	python ast branch and pep and http mail python org pipermail python dev september html.
30831 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
30832 	X	this is a summary of traffic on the python dev mailing list from september through september.
30833 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
30834 	X	comp lang python thread patch http sourceforge net tracker index phpfunc detail aid group id atid.
30835 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
30836 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
30837 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
30838 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
30839 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
30840 	X	it is intended to inform the wider python community of on going developments on the list on a semi monthly.
30841 	X	these all favour multi processing over multi.
30842 	X	vendor packages directory http mail python org pipermail python dev september html.
30843 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
30844 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
30845 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
30846 	X	http mail python org pipermail python dev september html.
30847 	X	he pointed out that an implementation would really be needed to prove.
30848 	X	an archive of previous summaries is available.
30849 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
30850 	X	the idea of a multiprocess module gained a reasonable amount of.
30851 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
30852 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
30853 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
30854 	X	phillip and martin pointed out that preventing any other interaction other than enqueued messages is the difficult part each active object would for example have to have its own sys.
30855 	X	an rss feed of the titles of the summaries is.
30856 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
30857 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
30858 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
30859 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
30860 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
30861 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
30862 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
30863 	X	you can also watch comp lang python or comp lang python announce for new summaries or through their email gateways of python list or python announce respectively as found at http mail python org.
30864 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
30865 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
30866 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
30867 	X	python ast branch and pep and http mail python org pipermail python dev september html.
30868 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
30869 	X	this is a summary of traffic on the python dev mailing list from september through september.
30870 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
30871 	X	this is the th summary written by the python dev summary duo of steve bethard and tony meyer i feel like the white rabbit in.
30872 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
30873 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
30874 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
30875 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
30876 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
30877 	X	it is intended to inform the wider python community of on going developments on the list on a semi monthly.
30878 	X	items on the list were discussed further with some disagreement about what was.
30879 	X	to contact us please send email.
30880 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
30881 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
30882 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
30883 	X	http mail python org pipermail python dev september html.
30884 	X	he pointed out that an implementation would really be needed to prove.
30885 	X	an archive of previous summaries is available.
30886 	X	steve bethard steven bethard at gmail com http gmail com tony meyer tony meyer at gmail com http gmail com.
30887 	X	the idea of a multiprocess module gained a reasonable amount of.
30888 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
30889 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
30890 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
30891 	X	phillip and martin pointed out that preventing any other interaction other than enqueued messages is the difficult part each active object would for example have to have its own sys.
30892 	X	an rss feed of the titles of the summaries is.
30893 	X	do not post to comp lang python if you wish to reach.
30894 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
30895 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
30896 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
30897 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
30898 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
30899 	X	you can also watch comp lang python or comp lang python announce for new summaries or through their email gateways of python list or python announce respectively as found at http mail python org.
30900 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
30901 	X	the python software foundation is the non profit organization that holds the intellectual property for.
30902 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
30903 	X	python ast branch and pep and http mail python org pipermail python dev september html.
30904 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
30905 	X	this is a summary of traffic on the python dev mailing list from september through september.
30906 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
30907 	X	this is the th summary written by the python dev summary duo of steve bethard and tony meyer i feel like the white rabbit in.
30908 	X	http mail python org pipermail python dev september html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
30909 	X	it also tries to advance the development and use of.
30910 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
30911 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
30912 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
30913 	X	it is intended to inform the wider python community of on going developments on the list on a semi monthly.
30914 	X	items on the list were discussed further with some disagreement about what was.
30915 	X	to contact us please send email.
30916 	X	if you find the python dev summary helpful please consider making a.
30917 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
30918 	X	http mail python org pipermail python dev september html.
30919 	X	he pointed out that an implementation would really be needed to prove.
30920 	X	an archive of previous summaries is available.
30921 	X	steve bethard steven bethard at gmail com http gmail com tony meyer tony meyer at gmail com http gmail com.
30922 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
30923 	X	you can make a donation at http python org psf donations html.
30924 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
30925 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
30926 	X	phillip and martin pointed out that preventing any other interaction other than enqueued messages is the difficult part each active object would for example have to have its own sys.
30927 	X	an rss feed of the titles of the summaries is.
30928 	X	do not post to comp lang python if you wish to reach.
30929 	X	def f x y print x y.
30930 	X	every penny helps so even a small donation with a credit card check or by paypal.
30931 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
30932 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
30933 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
30934 	X	you can also watch comp lang python or comp lang python announce for new summaries or through their email gateways of python list or python announce respectively as found at http mail python org.
30935 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
30936 	X	the python software foundation is the non profit organization that holds the intellectual property for.
30937 	X	youd have to write something like.
30938 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
30939 	X	this is a summary of traffic on the python dev mailing list from september through september.
30940 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
30941 	X	this is the th summary written by the python dev summary duo of steve bethard and tony meyer i feel like the white rabbit in.
30942 	X	http mail python org pipermail python dev september html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
30943 	X	it also tries to advance the development and use of.
30944 	X	def f arg x y arg print x y.
30945 	X	to comment on anything mentioned here just post to comp lang python or email python list at python org which is a gateway to the newsgroup with a subject line mentioning what you are.
30946 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
30947 	X	it is intended to inform the wider python community of on going developments on the list on a semi monthly.
30948 	X	items on the list were discussed further with some disagreement about what was.
30949 	X	to contact us please send email.
30950 	X	if you find the python dev summary helpful please consider making a.
30951 	X	brett with help from guido motivated this removal for python by a few factors.
30952 	X	all python dev members are interested in seeing ideas discussed by the community so dont hesitate to take a stance on.
30953 	X	he pointed out that an implementation would really be needed to prove.
30954 	X	an archive of previous summaries is available.
30955 	X	steve bethard steven bethard at gmail com http gmail com tony meyer tony meyer at gmail com http gmail com.
30956 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
30957 	X	you can make a donation at http python org psf donations html.
30958 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
30959 	X	and if all of this really interests you then get involved and join python dev.
30960 	X	phillip and martin pointed out that preventing any other interaction other than enqueued messages is the difficult part each active object would for example have to have its own sys.
30961 	X	an rss feed of the titles of the summaries is.
30962 	X	do not post to comp lang python if you wish to reach.
30963 	X	def f x y print x y.
30964 	X	every penny helps so even a small donation with a credit card check or by paypal.
30965 	X	guido the feature can be difficult to read for some.
30966 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
30967 	X	you can also watch comp lang python or comp lang python announce for new summaries or through their email gateways of python list or python announce respectively as found at http mail python org.
30968 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
30969 	X	the python software foundation is the non profit organization that holds the intellectual property for.
30970 	X	youd have to write something like.
30971 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
30972 	X	the in development version of the documentation for python can be found at http www python org dev doc devel and should be used when looking up any documentation for new code otherwise use the current documentation as found at http docs python org.
30973 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
30974 	X	this is the th summary written by the python dev summary duo of steve bethard and tony meyer i feel like the white rabbit in.
30975 	X	http mail python org pipermail python dev september html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
30976 	X	it also tries to advance the development and use of.
30977 	X	def f arg x y arg print x y.
30978 	X	to comment on anything mentioned here just post to comp lang python or email python list at python org which is a gateway to the newsgroup with a subject line mentioning what you are.
30979 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
30980 	X	peps python enhancement proposals are located at http www python org peps.
30981 	X	items on the list were discussed further with some disagreement about what was.
30982 	X	to contact us please send email.
30983 	X	if you find the python dev summary helpful please consider making a.
30984 	X	brett with help from guido motivated this removal for python by a few factors.
30985 	X	all python dev members are interested in seeing ideas discussed by the community so dont hesitate to take a stance on.
30986 	X	in general people were undecided on this.
30987 	X	to view files in the python cvs online go to http cvs sourceforge net cgi bin viewcvs cgi python.
30988 	X	steve bethard steven bethard at gmail com http gmail com tony meyer tony meyer at gmail com http gmail com.
30989 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
30990 	X	you can make a donation at http python org psf donations html.
30991 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
30992 	X	and if all of this really interests you then get involved and join python dev.
30993 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
30994 	X	reported bugs and suggested patches can be found at the sourceforge project.
30995 	X	do not post to comp lang python if you wish to reach.
30996 	X	def f x y print x y.
30997 	X	every penny helps so even a small donation with a credit card check or by paypal.
30998 	X	guido the feature can be difficult to read for some.
30999 	X	no decision had been made at the time of the.
31000 	X	please note that this summary is written using restructuredtext.
31001 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
31002 	X	the python software foundation is the non profit organization that holds the intellectual property for.
31003 	X	youd have to write something like.
31004 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
31005 	X	the in development version of the documentation for python can be found at http www python org dev doc devel and should be used when looking up any documentation for new code otherwise use the current documentation as found at http docs python org.
31006 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
31007 	X	any unfamiliar punctuation is probably markup for rest otherwise it is probably regular expression syntax or a typo you can safely ignore.
31008 	X	http mail python org pipermail python dev september html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
31009 	X	it also tries to advance the development and use of.
31010 	X	def f arg x y arg print x y.
31011 	X	to comment on anything mentioned here just post to comp lang python or email python list at python org which is a gateway to the newsgroup with a subject line mentioning what you are.
31012 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
31013 	X	peps python enhancement proposals are located at http www python org peps.
31014 	X	evaluating iterators in a boolean context.
31015 	X	we do suggest learning rest though its simple and is accepted for pep markup and can be turned into many different formats like html and.
31016 	X	if you find the python dev summary helpful please consider making a.
31017 	X	brett with help from guido motivated this removal for python by a few factors.
31018 	X	all python dev members are interested in seeing ideas discussed by the community so dont hesitate to take a stance on.
31019 	X	in general people were undecided on this.
31020 	X	to view files in the python cvs online go to http cvs sourceforge net cgi bin viewcvs cgi python.
31021 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
31022 	X	unfortunately even though rest is standardized the wonders of programs that like to reformat text do not allow us to guarantee you will be able to run the text version of this summary through docutils as is unless it is from the original text file.
31023 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
31024 	X	you can make a donation at http python org psf donations html.
31025 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
31026 	X	and if all of this really interests you then get involved and join python dev.
31027 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
31028 	X	reported bugs and suggested patches can be found at the sourceforge project.
31029 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
31030 	X	comp lang python pep markup http www python org peps pep html.
31031 	X	def f x y print x y.
31032 	X	every penny helps so even a small donation with a credit card check or by paypal.
31033 	X	guido the feature can be difficult to read for some.
31034 	X	no decision had been made at the time of the.
31035 	X	please note that this summary is written using restructuredtext.
31036 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
31037 	X	docutils http docutils sf net rest restructuredtext http docutils sf net rst html psf python software foundation http python org psf.
31038 	X	youd have to write something like.
31039 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
31040 	X	the in development version of the documentation for python can be found at http www python org dev doc devel and should be used when looking up any documentation for new code otherwise use the current documentation as found at http docs python org.
31041 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
31042 	X	any unfamiliar punctuation is probably markup for rest otherwise it is probably regular expression syntax or a typo you can safely ignore.
31043 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
31044 	X	the html version of this summary will be available at http www python org dev summary html.
31045 	X	def f arg x y arg print x y.
31046 	X	to comment on anything mentioned here just post to comp lang python or email python list at python org which is a gateway to the newsgroup with a subject line mentioning what you are.
31047 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
31048 	X	peps python enhancement proposals are located at http www python org peps.
31049 	X	evaluating iterators in a boolean context.
31050 	X	we do suggest learning rest though its simple and is accepted for pep markup and can be turned into many different formats like html and.
31051 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
31052 	X	brett with help from guido motivated this removal for python by a few factors.
31053 	X	all python dev members are interested in seeing ideas discussed by the community so dont hesitate to take a stance on.
31054 	X	in general people were undecided on this.
31055 	X	to view files in the python cvs online go to http cvs sourceforge net cgi bin viewcvs cgi python.
31056 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
31057 	X	unfortunately even though rest is standardized the wonders of programs that like to reformat text do not allow us to guarantee you will be able to run the text version of this summary through docutils as is unless it is from the original text file.
31058 	X	testing for none http www python org peps pep html testing for none.
31059 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
31060 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
31061 	X	and if all of this really interests you then get involved and join python dev.
31062 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
31063 	X	reported bugs and suggested patches can be found at the sourceforge project.
31064 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
31065 	X	comp lang python pep markup http www python org peps pep html.
31066 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and http mail python org pipermail python dev september html.
31067 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
31068 	X	guido the feature can be difficult to read for some.
31069 	X	no decision had been made at the time of the.
31070 	X	please note that this summary is written using restructuredtext.
31071 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
31072 	X	docutils http docutils sf net rest restructuredtext http docutils sf net rst html psf python software foundation http python org psf.
31073 	X	properties that only call the getter function once.
31074 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
31075 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
31076 	X	the in development version of the documentation for python can be found at http www python org dev doc devel and should be used when looking up any documentation for new code otherwise use the current documentation as found at http docs python org.
31077 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
31078 	X	any unfamiliar punctuation is probably markup for rest otherwise it is probably regular expression syntax or a typo you can safely ignore.
31079 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
31080 	X	the html version of this summary will be available at http www python org dev summary html.
31081 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
31082 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
31083 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
31084 	X	peps python enhancement proposals are located at http www python org peps.
31085 	X	evaluating iterators in a boolean context.
31086 	X	we do suggest learning rest though its simple and is accepted for pep markup and can be turned into many different formats like html and.
31087 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
31088 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
31089 	X	in general people were undecided on this.
31090 	X	to view files in the python cvs online go to http cvs sourceforge net cgi bin viewcvs cgi python.
31091 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
31092 	X	unfortunately even though rest is standardized the wonders of programs that like to reformat text do not allow us to guarantee you will be able to run the text version of this summary through docutils as is unless it is from the original text file.
31093 	X	testing for none http www python org peps pep html testing for none.
31094 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
31095 	X	def eggs self expensive computation of eggs.
31096 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
31097 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
31098 	X	reported bugs and suggested patches can be found at the sourceforge project.
31099 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
31100 	X	comp lang python pep markup http www python org peps pep html.
31101 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and http mail python org pipermail python dev september html.
31102 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
31103 	X	no decision had been made at the time of the.
31104 	X	please note that this summary is written using restructuredtext.
31105 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
31106 	X	docutils http docutils sf net rest restructuredtext http docutils sf net rst html psf python software foundation http python org psf.
31107 	X	properties that only call the getter function once.
31108 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
31109 	X	would only do the eggs computation.
31110 	X	we need to leave the syntax to.
31111 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
31112 	X	any unfamiliar punctuation is probably markup for rest otherwise it is probably regular expression syntax or a typo you can safely ignore.
31113 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
31114 	X	the html version of this summary will be available at http www python org dev summary html.
31115 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
31116 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
31117 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
31118 	X	weve already proved that we cant as a community agree on a.
31119 	X	evaluating iterators in a boolean context.
31120 	X	we do suggest learning rest though its simple and is accepted for pep markup and can be turned into many different formats like html and.
31121 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
31122 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
31123 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
31124 	X	thats what we have a bdfl.
31125 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
31126 	X	unfortunately even though rest is standardized the wonders of programs that like to reformat text do not allow us to guarantee you will be able to run the text version of this summary through docutils as is unless it is from the original text file.
31127 	X	testing for none http www python org peps pep html testing for none.
31128 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
31129 	X	def eggs self expensive computation of eggs.
31130 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
31131 	X	rfc readproperty http mail python org pipermail python dev september html.
31132 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
31133 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
31134 	X	comp lang python pep markup http www python org peps pep html.
31135 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and http mail python org pipermail python dev september html.
31136 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
31137 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
31138 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
31139 	X	docutils http docutils sf net rest restructuredtext http docutils sf net rst html psf python software foundation http python org psf.
31140 	X	properties that only call the getter function once.
31141 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
31142 	X	would only do the eggs computation.
31143 	X	we need to leave the syntax to.
31144 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
31145 	X	martin v lwis discovered that a little more than a mib could be saved in the size of python installer by using lzx instead of the standard mszip when compressing the cab.
31146 	X	however guido felt strongly that iterators should not supply len methods as this would lead to some people writing code expecting this method which would then break when it received an iterator which could not determine its own.
31147 	X	the html version of this summary will be available at http www python org dev summary html.
31148 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
31149 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
31150 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
31151 	X	weve already proved that we cant as a community agree on a.
31152 	X	some suggestions were made many of which micah integrated into the.
31153 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
31154 	X	the feature will be rolled back in python and raymond will likely move the len methods to private methods in order to maintain the performance.
31155 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
31156 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
31157 	X	thats what we have a bdfl.
31158 	X	the suggestion was made that an implementation should precede approval of the.
31159 	X	mib http en wikipedia org wiki mibibyte.
31160 	X	testing for none http www python org peps pep html testing for none.
31161 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
31162 	X	def eggs self expensive computation of eggs.
31163 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
31164 	X	rfc readproperty http mail python org pipermail python dev september html.
31165 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
31166 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
31167 	X	bool iter changed between and http mail python org pipermail python dev september html bool container was bool iter changed between and http mail python org pipermail python dev september html.
31168 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
31169 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
31170 	X	codetags pep http python org peps pep html.
31171 	X	http mail python org pipermail python dev september html.
31172 	X	properties that only call the getter function once.
31173 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
31174 	X	would only do the eggs computation.
31175 	X	we need to leave the syntax to.
31176 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
31177 	X	martin v lwis discovered that a little more than a mib could be saved in the size of python installer by using lzx instead of the standard mszip when compressing the cab.
31178 	X	pep codetags http mail python org pipermail python dev september html.
31179 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and response guido suggested that that the conditional expression discussion of pep be.
31180 	X	the html version of this summary will be available at http www python org dev summary html.
31181 	X	jim fulton proposed adding a new builtin for a property like descriptor that would only call the getter method once so that something like.
31182 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
31183 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
31184 	X	weve already proved that we cant as a community agree on a.
31185 	X	some suggestions were made many of which micah integrated into the.
31186 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
31187 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
31188 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
31189 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
31190 	X	thats what we have a bdfl.
31191 	X	the suggestion was made that an implementation should precede approval of the.
31192 	X	mib http en wikipedia org wiki mibibyte.
31193 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
31194 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
31195 	X	we have two quotes this week one each from the two biggest threads of this fortnight concurrency and conditional.
31196 	X	def eggs self expensive computation of eggs.
31197 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
31198 	X	rfc readproperty http mail python org pipermail python dev september html.
31199 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
31200 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
31201 	X	although it has not been implemented yet the plan is for it to appear in python.
31202 	X	the first quote from donovan barda puts pythons approach to threading into perspective.
31203 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
31204 	X	codetags pep http python org peps pep html.
31205 	X	http mail python org pipermail python dev september html.
31206 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
31207 	X	pep http www python org peps pep html.
31208 	X	the reality is threads were invented as a low overhead way of easily implementing concurrent on a single.
31209 	X	would only do the eggs computation.
31210 	X	we need to leave the syntax to.
31211 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
31212 	X	martin v lwis discovered that a little more than a mib could be saved in the size of python installer by using lzx instead of the standard mszip when compressing the cab.
31213 	X	pep codetags http mail python org pipermail python dev september html.
31214 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and response guido suggested that that the conditional expression discussion of pep be.
31215 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivated from the key and its current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
31216 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
31217 	X	taking into account threadings limitations and objectives pythons gil is the best way to support.
31218 	X	currently you cant do this with a property because the self eggs result statement tries to call the propertys fset method instead of replacing the property with the result of the eggs.
31219 	X	weve already proved that we cant as a community agree on a.
31220 	X	some suggestions were made many of which micah integrated into the.
31221 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
31222 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
31223 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
31224 	X	when hardware seriously moves to multiple processors other concurrency models will start to.
31225 	X	a few other people commented that theyd needed similar functionality at times and guido seemed moderately interested in the idea but there was no final.
31226 	X	thats what we have a bdfl.
31227 	X	the suggestion was made that an implementation should precede approval of the.
31228 	X	mib http en wikipedia org wiki mibibyte.
31229 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
31230 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
31231 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
31232 	X	once again the subject of removing the global interpreter lock gil came.
31233 	X	our second qotf by yours truly hey who could refuse a nomination from guido is a not so subtle reminder to leave syntax decisions to guido.
31234 	X	rfc readproperty http mail python org pipermail python dev september html.
31235 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
31236 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
31237 	X	although it has not been implemented yet the plan is for it to appear in python.
31238 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
31239 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
31240 	X	micah elliott submitted his codetags pep after revisions following the comp lang python discussion to python dev for.
31241 	X	codetags pep http python org peps pep html.
31242 	X	http mail python org pipermail python dev september html.
31243 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
31244 	X	pep http www python org peps pep html.
31245 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
31246 	X	this kicked off several long threads about multi processor.
31247 	X	we need to leave the syntax to.
31248 	X	a common feeling was that this particularly synonyms was over engineering guido pointed out that he only uses xxx and this is certainly the most common although not only example in the python source.
31249 	X	martin v lwis discovered that a little more than a mib could be saved in the size of python installer by using lzx instead of the standard mszip when compressing the cab.
31250 	X	pep codetags http mail python org pipermail python dev september html.
31251 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and response guido suggested that that the conditional expression discussion of pep be.
31252 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivated from the key and its current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
31253 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
31254 	X	experimenting with this http pitrou net python sets.
31255 	X	a long time ago circa python greg stein experimented with free threading which did yield around a times speedup on a dual processor.
31256 	X	weve already proved that we cant as a community agree on a.
31257 	X	some suggestions were made many of which micah integrated into the.
31258 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
31259 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
31260 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
31261 	X	c coding experiment http mail python org pipermail python dev september html.
31262 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
31263 	X	thats what we have a bdfl.
31264 	X	the suggestion was made that an implementation should precede approval of the.
31265 	X	mib http en wikipedia org wiki mibibyte.
31266 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
31267 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
31268 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
31269 	X	once again the subject of removing the global interpreter lock gil came.
31270 	X	nathan bullock suggested a relpath path a path b addition to os paththat returns a relative path from path a to path b.
31271 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
31272 	X	gil python and mp up http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html.
31273 	X	micah indicated that he would continue development on the tools and that he encourages anyone interested in using a standard set of codetages to give these a.
31274 	X	although it has not been implemented yet the plan is for it to appear in python.
31275 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
31276 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
31277 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
31278 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
31279 	X	codetags pep http python org peps pep html.
31280 	X	http mail python org pipermail python dev september html.
31281 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
31282 	X	pep http www python org peps pep html.
31283 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
31284 	X	this kicked off several long threads about multi processor.
31285 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
31286 	X	with the threaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
31287 	X	martin v lwis discovered that a little more than a mib could be saved in the size of python installer by using lzx instead of the standard mszip when compressing the cab.
31288 	X	pep codetags http mail python org pipermail python dev september html.
31289 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and response guido suggested that that the conditional expression discussion of pep be.
31290 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivated from the key and its current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
31291 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
31292 	X	experimenting with this http pitrou net python sets.
31293 	X	a long time ago circa python greg stein experimented with free threading which did yield around a times speedup on a dual processor.
31294 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
31295 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
31296 	X	after confirmation from several testers that the new format worked the change for python and beyond was.
31297 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
31298 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
31299 	X	c coding experiment http mail python org pipermail python dev september html.
31300 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
31301 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
31302 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
31303 	X	mib http en wikipedia org wiki mibibyte.
31304 	X	raymond hettinger suggested a small but interesting c project to determine whether the setobject c implementation would be improved by recoding the set lookkey function to optimize key insertion order using brents variation of algorithm d c f knuth.
31305 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
31306 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
31307 	X	once again the subject of removing the global interpreter lock gil came.
31308 	X	nathan bullock suggested a relpath path a path b addition to os paththat returns a relative path from path a to path b.
31309 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
31310 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
31311 	X	although it has not been implemented yet the plan is for it to appear in python.
31312 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
31313 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
31314 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
31315 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
31316 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
31317 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
31318 	X	http mail python org pipermail python dev september html.
31319 	X	it has the potential to boost performance for uniquification applications with duplicate keys were identified more quickly and possibly also more frequent retirement of dummy entires during insertion.
31320 	X	pep http www python org peps pep html.
31321 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
31322 	X	this kicked off several long threads about multi processor.
31323 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
31324 	X	with the threaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
31325 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
31326 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
31327 	X	raymond hettinger proposed that the and and or operators be modified in python to produce only booleans instead of producing objects motivating this proposal in part by the common mis use of cond and response guido suggested that that the conditional expression discussion of pep be.
31328 	X	andrew durdin pointed out that brents variation depends on the next probe position for a key were derivated from the key and its current position which is incompatible with the current perturbation system raymond replaced perturbation with a secondary hash with linear.
31329 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
31330 	X	experimenting with this http pitrou net python sets.
31331 	X	a long time ago circa python greg stein experimented with free threading which did yield around a times speedup on a dual processor.
31332 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
31333 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
31334 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
31335 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
31336 	X	this time around people seemed almost unanimously in support of adding a conditional expression though as before they disagreed on.
31337 	X	antoine pitrou did some experimenting with this resulting in a to speedup with various.
31338 	X	c coding experiment http mail python org pipermail python dev september html.
31339 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
31340 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
31341 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
31342 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
31343 	X	these all favour multi processing over multi.
31344 	X	fortunately this time guido cut the discussion short and pronounced a new syntax true expr if cond else false expr.
31345 	X	raymond has also been experimenting with a simpler approach whenever there are more than three probes always swap the new key into the first position and then unconditionally re insert the swapped out.
31346 	X	once again the subject of removing the global interpreter lock gil came.
31347 	X	nathan bullock suggested a relpath path a path b addition to os paththat returns a relative path from path a to path b.
31348 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
31349 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
31350 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
31351 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
31352 	X	although it has not been implemented yet the plan is for it to appear in python.
31353 	X	he reported that most of the time this gives an improvement and it doesnt require changing the perturbation.
31354 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
31355 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
31356 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
31357 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
31358 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
31359 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
31360 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
31361 	X	pep http www python org peps pep html.
31362 	X	this simpler approach is cheap to implement but the benefits are also smaller with it improving only the worse.
31363 	X	this kicked off several long threads about multi processor.
31364 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
31365 	X	with the threaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
31366 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
31367 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
31368 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
31369 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
31370 	X	and and or operators in http mail python org pipermail python dev september html adding a conditional expression in http mail python org pipermail python dev september html conditional expression resolution http mail python org pipermail python dev september html.
31371 	X	experimenting with this http pitrou net python sets.
31372 	X	a long time ago circa python greg stein experimented with free threading which did yield around a times speedup on a dual processor.
31373 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
31374 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
31375 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
31376 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
31377 	X	comp lang python thread patch http sourceforge net tracker index phpfunc detail aid group id atid.
31378 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
31379 	X	c coding experiment http mail python org pipermail python dev september html.
31380 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
31381 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
31382 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
31383 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
31384 	X	these all favour multi processing over multi.
31385 	X	vendor packages directory http mail python org pipermail python dev september html.
31386 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
31387 	X	once again the subject of removing the global interpreter lock gil came.
31388 	X	nathan bullock suggested a relpath path a path b addition to os paththat returns a relative path from path a to path b.
31389 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
31390 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
31391 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
31392 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
31393 	X	the idea of a multiprocess module gained a reasonable amount of.
31394 	X	sokolov yura suggested that the gil be replaced with a system where there are thread local gils that cooperate to share writing martin v lwis suggested that he try to implement his ideas and predicted that he would find that doing so would be a lot of work would require changes to all extension modules likely to introduce new bugs particularly race conditions and possibly decrease.
31395 	X	trent mick pointed out that there are a couple of recipes for this as well as jason orendorffs path module.
31396 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
31397 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
31398 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
31399 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
31400 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
31401 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
31402 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
31403 	X	this kicked off several long threads about multi processor.
31404 	X	several people supported this idea and hopefully either nathan or one of the recipe authors will submit a patch with this.
31405 	X	with the threaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
31406 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
31407 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
31408 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
31409 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
31410 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
31411 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
31412 	X	a long time ago circa python greg stein experimented with free threading which did yield around a times speedup on a dual processor.
31413 	X	couple of http aspn activestate com aspn cookbook python recipe recipes for this http aspn activestate com aspn cookbook python recipe jason orendorffs path module http www jorendorff com articles python path.
31414 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
31415 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
31416 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
31417 	X	comp lang python thread patch http sourceforge net tracker index phpfunc detail aid group id atid.
31418 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
31419 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
31420 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
31421 	X	to avoid the overhead of multi processor locking on a uniprocessor machine a separate binary could be.
31422 	X	os path diff path path http mail python org pipermail python dev september html os path diff path path and a first post http mail python org pipermail python dev september html.
31423 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
31424 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
31425 	X	these all favour multi processing over multi.
31426 	X	vendor packages directory http mail python org pipermail python dev september html.
31427 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
31428 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
31429 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
31430 	X	some of the code apparently did make it into python but the issue died off because no one provided working code or a strategy for what to do with existing extension.
31431 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
31432 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
31433 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
31434 	X	the idea of a multiprocess module gained a reasonable amount of.
31435 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
31436 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
31437 	X	guido pointed out that it is not clear at this time how multiple processors will be used as they become the.
31438 	X	rich burridge followed up a comp lang python thread about a vendor packages directory for python by submitting a patch and asking for comments about the proposal on python.
31439 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
31440 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
31441 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
31442 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
31443 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
31444 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
31445 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
31446 	X	with the threaded programming model e g in java there are problems with concurrent modification errors without locking or deadlocks and livelocks with locking.
31447 	X	general consensus was that the proposal needed a better rationale explaining why this improved on simply adding a pth file to the site packages.
31448 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
31449 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
31450 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
31451 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
31452 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
31453 	X	python ast branch and pep and http mail python org pipermail python dev september html.
31454 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
31455 	X	guidos hunch and mine fwiw is that instead of writing massively parallel applications we will continue to write single threaded applications that are tied together at the process level rather than at the thread.
31456 	X	rich explained that the rationale is that python files supplied by the vendor sun apple redhat microsoft with their operating system software should go in a separate base directory to differentiate them from python files installed specifically at the.
31457 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
31458 	X	comp lang python thread patch http sourceforge net tracker index phpfunc detail aid group id atid.
31459 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
31460 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
31461 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
31462 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
31463 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
31464 	X	he also pointed out that its likely that most problems get little benefit out of multiple.
31465 	X	however bob ippolito pointed out that as of os x tiger apple already does this via a pth file extras pth which points to system library frameworks python framework versions extras lib python and includes wxpython by.
31466 	X	these all favour multi processing over multi.
31467 	X	vendor packages directory http mail python org pipermail python dev september html.
31468 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
31469 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
31470 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
31471 	X	http mail python org pipermail python dev september html.
31472 	X	he pointed out that an implementation would really be needed to prove.
31473 	X	guido threw down the gauntlet rather than the endless discussion about this topic someone should come up with a gil free python not necessarily cpython and demonstrate its.
31474 	X	bob also pointed out that such a vendor packages pth should look like import site site addsitedir usr lib.
31475 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
31476 	X	the idea of a multiprocess module gained a reasonable amount of.
31477 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
31478 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
31479 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
31480 	X	phillip and martin pointed out that preventing any other interaction other than enqueued messages is the difficult part each active object would for example have to have its own sys.
31481 	X	phillip j eby reminded everyone that jython ironpython and pypy exist and that someone could for example create a multiprocessor friendly backend for.
31482 	X	vendor packages so that packages like numeric pil and pyobjc which take advantage of pth files themselves work when installed to the vendor packages.
31483 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
31484 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
31485 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
31486 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
31487 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
31488 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
31489 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
31490 	X	guido also pointed out that fast threading benefits from fast context switches which benefits from small register sets and that the current trend in chips is towards larger register.
31491 	X	phillip j eby pointed out that it would be good to have a document for python distributors that explained these kind of things and suggested that perhaps a volunteer or two could be found within the distutils sig to do.
31492 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
31493 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
31494 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
31495 	X	python ast branch and pep and http mail python org pipermail python dev september html.
31496 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
31497 	X	this is a summary of traffic on the python dev mailing list from september through september.
31498 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
31499 	X	in addition multiple processors with shared memory dont scale all that well multiple processors with explicit interprocess communication ipc channels scale much better.
31500 	X	comp lang python thread patch http sourceforge net tracker index phpfunc detail aid group id atid.
31501 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
31502 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
31503 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
31504 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
31505 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
31506 	X	it is intended to inform the wider python community of on going developments on the list on a semi monthly.
31507 	X	items on the list were discussed further with some disagreement about what was.
31508 	X	these all favour multi processing over multi.
31509 	X	vendor packages directory http mail python org pipermail python dev september html.
31510 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
31511 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
31512 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
31513 	X	http mail python org pipermail python dev september html.
31514 	X	he pointed out that an implementation would really be needed to prove.
31515 	X	an archive of previous summaries is available.
31516 	X	donovan baarda went so far as to say a qotf as above that pythons gil is the best way to support threads which are for single processor use and that when multiple processor platforms have matured more other concurrency models will likewise.
31517 	X	the idea of a multiprocess module gained a reasonable amount of.
31518 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
31519 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
31520 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
31521 	X	phillip and martin pointed out that preventing any other interaction other than enqueued messages is the difficult part each active object would for example have to have its own sys.
31522 	X	an rss feed of the titles of the summaries is.
31523 	X	otoh bob ippolito pointed out that in many operating systems there isnt a lot of difference between threads and processes and that threads can typically still use.
31524 	X	guido asked if platform system alias could be improved on os x by mapping unames darwin x y to os x x.
31525 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
31526 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
31527 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
31528 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
31529 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
31530 	X	you can also watch comp lang python or comp lang python announce for new summaries or through their email gateways of python list or python announce respectively as found at http mail python org.
31531 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
31532 	X	bob argued that the biggest argument for threading is that lots of existing c c code uses.
31533 	X	bob ippolito and others pointed out that this was not a good idea because uname only reports on the kernel version number and not the cocoa api which is really what os x x y refers.
31534 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
31535 	X	python ast branch and pep and http mail python org pipermail python dev september html.
31536 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
31537 	X	this is a summary of traffic on the python dev mailing list from september through september.
31538 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
31539 	X	this is the th summary written by the python dev summary duo of steve bethard and tony meyer i feel like the white rabbit in.
31540 	X	http mail python org pipermail python dev september html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
31541 	X	simon percivall argued that the problem is that python offers out of the box some support for multi threaded programming but little for multi process programming beyond the basics e g data sharing communication control over running processes dealing out tasks to be handled.
31542 	X	he pointed out that the correct way to do it using a public api is to used gestalt which is what platform mac ver.
31543 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
31544 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
31545 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
31546 	X	it is intended to inform the wider python community of on going developments on the list on a semi monthly.
31547 	X	items on the list were discussed further with some disagreement about what was.
31548 	X	to contact us please send email.
31549 	X	simon suggested that the best way to stop people complaining about the gil is to provide solid standardized support for multi process.
31550 	X	on further inspection it was discovered that parsing the system library coreservices systemversion plist property list is also a supported api and would not rely on access to the carbon api.
31551 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
31552 	X	http mail python org pipermail python dev september html.
31553 	X	he pointed out that an implementation would really be needed to prove.
31554 	X	an archive of previous summaries is available.
31555 	X	steve bethard steven bethard at gmail com http gmail com tony meyer tony meyer at gmail com http gmail com.
31556 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
31557 	X	the idea of a multiprocess module gained a reasonable amount of.
31558 	X	bob and wilfredo snchez vega provided sample code that would parse this plist marc andre lemburg suggested that a patch be written for system alias that would use this method if possible for mac.
31559 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
31560 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
31561 	X	phillip and martin pointed out that preventing any other interaction other than enqueued messages is the difficult part each active object would for example have to have its own sys.
31562 	X	an rss feed of the titles of the summaries is.
31563 	X	do not post to comp lang python if you wish to reach.
31564 	X	def f x y print x y.
31565 	X	phillip j eby outlined an idea he is considering pepifying in which one could switch all context variables such as the decimal context and the.
31566 	X	mapping darwin to mac os x in platform py http mail python org pipermail python dev september html.
31567 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
31568 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
31569 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
31570 	X	you can also watch comp lang python or comp lang python announce for new summaries or through their email gateways of python list or python announce respectively as found at http mail python org.
31571 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
31572 	X	the python software foundation is the non profit organization that holds the intellectual property for.
31573 	X	youd have to write something like.
31574 	X	variables simulaneously and instantaneously when changing execution contexts like switching between coroutines.
31575 	X	python ast branch and pep and http mail python org pipermail python dev september html.
31576 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
31577 	X	this is a summary of traffic on the python dev mailing list from september through september.
31578 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
31579 	X	this is the th summary written by the python dev summary duo of steve bethard and tony meyer i feel like the white rabbit in.
31580 	X	http mail python org pipermail python dev september html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
31581 	X	it also tries to advance the development and use of.
31582 	X	def f arg x y arg print x y.
31583 	X	he has a prototype implementation of the basic idea which is less than lines of python and very.
31584 	X	visibility scope for for while if statements http mail python org pipermail python dev september html inplace operators and setitem http mail python org pipermail python dev september html repository for python developers http mail python org pipermail python dev september html for while if statements comprehension generator expressions unification http mail python org pipermail python dev september html list splicing http mail python org pipermail python dev september html compatibility between python x and python x http mail python org pipermail python dev september html python optimization http mail python org pipermail python dev september html test locale on mac os x http mail python org pipermail python dev september html possible memory leak on windows valgrind report http mail python org pipermail python dev september html.
31585 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
31586 	X	it is intended to inform the wider python community of on going developments on the list on a semi monthly.
31587 	X	items on the list were discussed further with some disagreement about what was.
31588 	X	to contact us please send email.
31589 	X	if you find the python dev summary helpful please consider making a.
31590 	X	brett with help from guido motivated this removal for python by a few factors.
31591 	X	however he pointed out that its not completely pep ready at this point and he needs to continue considering various parts of the.
31592 	X	http mail python org pipermail python dev september html.
31593 	X	he pointed out that an implementation would really be needed to prove.
31594 	X	an archive of previous summaries is available.
31595 	X	steve bethard steven bethard at gmail com http gmail com tony meyer tony meyer at gmail com http gmail com.
31596 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
31597 	X	you can make a donation at http python org psf donations html.
31598 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
31599 	X	bruce eckel joined the thread and suggested that low level threads people are only now catching up to objects but as far as concurrency goes their brains still think in terms of threads so they naturally apply thread concepts to.
31600 	X	fails test unicode on hp ux ia http mail python org pipermail python dev september html.
31601 	X	phillip and martin pointed out that preventing any other interaction other than enqueued messages is the difficult part each active object would for example have to have its own sys.
31602 	X	an rss feed of the titles of the summaries is.
31603 	X	do not post to comp lang python if you wish to reach.
31604 	X	def f x y print x y.
31605 	X	every penny helps so even a small donation with a credit card check or by paypal.
31606 	X	guido the feature can be difficult to read for some.
31607 	X	he believes that pthread style thinking is two steps backwards you effectively throw open the innards of the object that you just spent time decoupling from the rest of your system and the coupling is not.
31608 	X	test macfs failing on tiger mac os x http mail python org pipermail python dev september html test ossaudiodev hangs http mail python org pipermail python dev september html unintentional and unsafe use of realpath http mail python org pipermail python dev september html alternative name for str partition http mail python org pipermail python dev september html weekly python patch bug summary http mail python org pipermail python dev september html possible bug in urllib urljoin http mail python org pipermail python dev september html trasvesal thought on syntax features http mail python org pipermail python dev september html fixing pty spawn http mail python org pipermail python dev september html bit bytecode compatibility was re peak ez setup on bit linux problem http mail python org pipermail python dev september html c api doc fix http mail python org pipermail python dev september html david mertz on ca state e voting panel http mail python org pipermail python dev september html patch bug segmentation fault in xml dom minidom parse http mail python org pipermail python dev september html linecache problem http mail python org pipermail python dev september html.
31609 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
31610 	X	you can also watch comp lang python or comp lang python announce for new summaries or through their email gateways of python list or python announce respectively as found at http mail python org.
31611 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
31612 	X	the python software foundation is the non profit organization that holds the intellectual property for.
31613 	X	youd have to write something like.
31614 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
31615 	X	bruce and guido had discussed offlist active objects defining a class as active would install a worker thread and concurrent queue in each object of that class automatically turn method calls into tasks and enqueue them and prevent any other interaction other than enqueued.
31616 	X	this is a summary of traffic on the python dev mailing list from september through september.
31617 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
31618 	X	this is the th summary written by the python dev summary duo of steve bethard and tony meyer i feel like the white rabbit in.
31619 	X	http mail python org pipermail python dev september html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
31620 	X	it also tries to advance the development and use of.
31621 	X	def f arg x y arg print x y.
31622 	X	to comment on anything mentioned here just post to comp lang python or email python list at python org which is a gateway to the newsgroup with a subject line mentioning what you are.
31623 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
31624 	X	guido felt that if multiple active objects could co exist in the same process but be prevented by the language implementation from sharing data except via channels and dynamic reallocation of active objects across multiple cpus were possible then this might be a.
31625 	X	it is intended to inform the wider python community of on going developments on the list on a semi monthly.
31626 	X	items on the list were discussed further with some disagreement about what was.
31627 	X	to contact us please send email.
31628 	X	if you find the python dev summary helpful please consider making a.
31629 	X	brett with help from guido motivated this removal for python by a few factors.
31630 	X	all python dev members are interested in seeing ideas discussed by the community so dont hesitate to take a stance on.
31631 	X	in general people were undecided on this.
31632 	X	he pointed out that an implementation would really be needed to prove.
31633 	X	an archive of previous summaries is available.
31634 	X	steve bethard steven bethard at gmail com http gmail com tony meyer tony meyer at gmail com http gmail com.
31635 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
31636 	X	you can make a donation at http python org psf donations html.
31637 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
31638 	X	and if all of this really interests you then get involved and join python dev.
31639 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
31640 	X	phillip and martin pointed out that preventing any other interaction other than enqueued messages is the difficult part each active object would for example have to have its own sys.
31641 	X	an rss feed of the titles of the summaries is.
31642 	X	do not post to comp lang python if you wish to reach.
31643 	X	def f x y print x y.
31644 	X	every penny helps so even a small donation with a credit card check or by paypal.
31645 	X	guido the feature can be difficult to read for some.
31646 	X	no decision had been made at the time of the.
31647 	X	phillip felt that such a solution which bruce posed as a solution not the solution wouldnt help with gil removal but would help with effective use of multiprocessor machines on platforms where fork is available if the api works across processes as well as.
31648 	X	you can also watch comp lang python or comp lang python announce for new summaries or through their email gateways of python list or python announce respectively as found at http mail python org.
31649 	X	http mail python org pipermail python dev september html gil python and mp up was re variant of removing.
31650 	X	the python software foundation is the non profit organization that holds the intellectual property for.
31651 	X	youd have to write something like.
31652 	X	the feature doesnt add any power to the language the above functions emit essentially the same byte.
31653 	X	the in development version of the documentation for python can be found at http www python org dev doc devel and should be used when looking up any documentation for new code otherwise use the current documentation as found at http docs python org.
31654 	X	removing nested tuple function parameters http mail python org pipermail python dev september html.
31655 	X	bruce then restarted the discussion putting forth eight criteria that he felt would be necessary for the pythonic solution to.
31656 	X	this is the th summary written by the python dev summary duo of steve bethard and tony meyer i feel like the white rabbit in.
31657 	X	http mail python org pipermail python dev september html gil python and mp up http mail python org pipermail python dev september html active objects in python http mail python org pipermail python dev september html pythonic concurrency http mail python org pipermail python dev september html pythonic concurrency cooperative mt http mail python org pipermail python dev september html.
31658 	X	it also tries to advance the development and use of.
31659 	X	def f arg x y arg print x y.
31660 	X	to comment on anything mentioned here just post to comp lang python or email python list at python org which is a gateway to the newsgroup with a subject line mentioning what you are.
31661 	X	the feature makes function parameter introspection difficult because tuple unpacking information is not stored in the function.
31662 	X	peps python enhancement proposals are located at http www python org peps.
31663 	X	evaluating iterators in a boolean context.
31664 	X	items on the list were discussed further with some disagreement about what was.
31665 	X	to contact us please send email.
31666 	X	if you find the python dev summary helpful please consider making a.
31667 	X	brett with help from guido motivated this removal for python by a few factors.
31668 	X	all python dev members are interested in seeing ideas discussed by the community so dont hesitate to take a stance on.
31669 	X	in general people were undecided on this.
31670 	X	to view files in the python cvs online go to http cvs sourceforge net cgi bin viewcvs cgi python.
31671 	X	in python some builtin iterators gained len methods when the number of remaining items could be made.
31672 	X	steve bethard steven bethard at gmail com http gmail com tony meyer tony meyer at gmail com http gmail com.
31673 	X	brett cannon proposed removing support for nested function parameters so that instead of were able to write.
31674 	X	you can make a donation at http python org psf donations html.
31675 	X	the feature has low visibility for every user who is fond of them there are probably ten who have never even heard of.
31676 	X	and if all of this really interests you then get involved and join python dev.
31677 	X	while a number of people said they used the feature and would miss it many of them also said that their code wouldnt suffer that much if the feature was.
31678 	X	reported bugs and suggested patches can be found at the sourceforge project.
31679 	X	this broke some of guidos code that tested iterators for their boolean value to distinguish them from none.
31680 	X	do not post to comp lang python if you wish to reach.
31681 	X	def f x y print x y.
31682 	X	every penny helps so even a small donation with a credit card check or by paypal.
31683 	X	guido the feature can be difficult to read for some.
31684 	X	no decision had been made at the time of the.
31685 	X	please note that this summary is written using restructuredtext.
31686 	X	raymond hettinger who supplied the original patch argued that testing for none using boolean tests was in general a bad idea and that knowing the length of an iterator when possible had a number of use cases and allowed for some performance.
31687 	X	and basic and fortran and lisp and just about any programming language you care to name including python if condition affirmative else negative.
31688 	X	not to mention that the sequence is identical to execution.
31689 	X	its just plain goofy to have to scan to the middle of an expression to find out what happens first then depending on the result of that skipping back over what you just.
31690 	X	its an operator just like or or.
31691 	X	i can understand how you might find the terseness confusing.
31692 	X	fwiw in over years of c programming i use it pretty rarely too though i never had to look it up after i first saw it in k r it only very rarely holds any advantage over a simple if else statement especially in modern.
31693 	X	its most useful in macros which python doesnt even.
31694 	X	easy to read out loud but complex to understand with all the back and forth scanning.
31695 	X	the whole idea of a ternary operator is somewhat.
31696 	X	i guess i agree thoug i would have preferred to see something like r c then yes else no.
31697 	X	i guess i disagree that its consistent at least with the way i see.
31698 	X	im inexperienced enough to keep beazleys book at my elbow when writing my own code though reading others code is usually.
31699 	X	until things like metaclass and classmethod start showing.
31700 	X	dave change is inevitable progress is.
31701 	X	on thu oct piet van oostrum piet at cs uu nl.
31702 	X	oh agreed most assuredly except that we didnt include me not that that would have made any difference but i missed most of the discussion.
31703 	X	i was merely responding to your assertion that using if c then a else b could cause parsing.
31704 	X	im not convinced python even needs a ternary.
31705 	X	i just wish the syntax chosen by the bdfl made more.
31706 	X	even if i dont use it ill likely have to read.
31707 	X	dave change is inevitable progress is.
31708 	X	as a native python speaker i find that argument were remarkably.
31709 	X	things i write in python should make sense in python not in some other.
31710 	X	besides we already have way too many languages designed by self proclaimed linguists.
31711 	X	peter hansen peter at engcorp com wrote in message news rmdnwad pyaddenzdnuvz sudnzd at powergate.
31712 	X	i think that part of the argument for the a if c else b syntax is that then is not currently a reserved.
31713 	X	on wed oct piet van oostrum piet at cs uu nl.
31714 	X	r c then a else b.
31715 	X	i dont think python uses the question mark for.
31716 	X	throw that in if it makes parsing easier.
31717 	X	dave change is inevitable progress is.
31718 	X	it actually is an expression whereas your example shows a statement so this could not be accomplished with what you showed.
31719 	X	thats also my opinion but otoh guidos syntax is more close to the syntax of list.
31720 	X	volker grabsch frac left vartheta times ell kappa in re right sqrt g gamma alpha cdot mathcal b left oint c hbar right.
31721 	X	raymond hettinger proposed to change the behavior of and or to return one of their arguments because he had been bitten by the common trap of c and x or y when x is.
31722 	X	people were positive about it but said that then a conditional would have to be.
31723 	X	he says himself that the greatest problem last time was that no consensus over syntax was reached and he solved the problem this time by deciding.
31724 	X	return the answer is yes if x else no.
31725 	X	ive long since given up trying to remember operator precedence except for the most basic like multiplication is stronger than addition and use parens with wild.
31726 	X	it would be nice in my opinion if this were the way it was going to.
31727 	X	having one of the two results come first makes that result seem somehow of primary importance while the conditional which in my mind is far more important than either result comes hidden in the middle.
31728 	X	c then a else b makes the conditional stand out.
31729 	X	a if c else b suggests that a is more important than b and hides c.
31730 	X	but i can live with whichever it not that i have any.
31731 	X	just about any conditional is better than no.
31732 	X	i dont understand why there is a new expression if this could be accomplished with.
31733 	X	what is the advantage with the new expression.
31734 	X	web sin popups ni spyware usa firefox en lugar de internet explorer a.
31735 	X	yes thats the best way to make it readable and.
31736 	X	so what made him change his mind.
31737 	X	when the debates raged over pep he seemed pretty dead set against it at least by proxy.
31738 	X	erik max francis max at alcyone com http www alcyone com max san jose ca usa n w aim erikmaxfrancis the great artist is the.
31739 	X	first thing that comes to my mind is that it is more c ish read cryptic than pythonic read elegant and understandable.
31740 	X	now that the syntax is settled i wonder if further discussion on the contextual behavior could be done.
31741 	X	or maybe it was already done off line or in private email.
31742 	X	to me the advantage of a if b else c form is the easy chaining to build up a sum of conditional parts where each next part is dependent on the previous.
31743 	X	the advantage of the nested form is it can be used in place of an if elif else.
31744 	X	but i think the a if b else c syntax doesnt match that behavior very well so i was expecting the default behavior to be the sequential chaining and not nested.
31745 	X	but of course by explicitly placing parentheses you can do.
31746 	X	after guidos pronouncement yesterday in one of the next versions of python there will be a conditional expression with the following syntax x if c else y.
31747 	X	sebastian i dont understand why there is a new expression if sebastian this could be accomplished with.
31748 	X	sebastian what is the advantage with the new expression.
31749 	X	one very frequent use case is building a.
31750 	X	if x filler yes else filler no return the answer is s filler.
31751 	X	what i really want to do is take four lines of conditional and put them into one as well as blow off dealing with a filler variable.
31752 	X	return the answer is yes if x else no.
31753 	X	or whatever the final release syntax.
31754 	X	conditional expressions are a nice way to shim something in place on an acute.
31755 	X	chronic use of them could lead to a full on plate of spaghetti where you really wanted.
31756 	X	whenever im dealing with them in c c i always line the the and the characters vertically which may seem a bit excessive in terms of whitespace but provides a nice hieroglyph over on the right side of the screen to make things.
31757 	X	the condition is tested first so it should appear.
31758 	X	i can think of no other language besides perl where that is not the.
31759 	X	admittedly i dont know every other or even a large number of other.
31760 	X	conformity id agree with backwards capatibility i strongly.
31761 	X	breaking existing programs is a bad thing tm.
31762 	X	all the code i wrote for python still seems to work in.
31763 	X	dave change is inevitable progress is.
31764 	X	i suspect it is because if c then a else b gives problems in the parser because it would have difficulty to distinguish this in time from the if.
31765 	X	this is because the parser doesnt use a very strong.
31766 	X	i think language design should prevail over parsing problems but in this case it is probably a pragmatic argument that.
31767 	X	piet van oostrum piet at cs uu nl url http www cs uu nl piet pgp daebec private email piet at vanoostrum org.
31768 	X	perls foo if bar is very different to this one you should know about.
31769 	X	for a conditional syntax must be found and the tradition of python design is not to use punctuation for something that can be solved with.
31770 	X	the syntax is fine but the semantics might not be what you.
31771 	X	if i understand it correctly you need.
31772 	X	return the answer is yes if x else no.
31773 	X	simon b simon at brunningonline net http www brunningonline net simon blog.
31774 	X	ever cared to check what committees can do to a language.
31775 	X	block delimiters curly braces if fi begin end are also in just about any language but this didnt stop python using indentation instead so whats your point.
31776 	X	conformity and backwards compatibility should not be top priorities in language design fortunately for python theyre.
31777 	X	well since this is adopted as the python grammar then i guess it will make sense in python too wont it.
31778 	X	but english grammar is already strongly represented in pythons choices so its entirely consistent to do it here too otherwise explain not in.
31779 	X	terry hancock hancock at anansispaceworks com anansi spaceworks http www anansispaceworks com.
31780 	X	whats wrong with c x y.
31781 	X	a non text attachment was url http mail python org pipermail python list attachments ecef attachment sig.
31782 	X	maybe guidos done some perl programming on the side.
31783 	X	when ive been doing perl programming ive quite liked the if construct however on occasion its been desirable to have an else.
31784 	X	by having an else there it means you dont need the.
31785 	X	syntax and can just have one.
31786 	X	on the flipside people with different mother tongues often have a different way of using.
31787 	X	eg lots of non native english speakers speaking better english than those with english as their mother tongue and sometimes that different way can be better.
31788 	X	direct translation of german grammatical form for example resulting in something looking like yoda personally i like this form.
31789 	X	actually you dont need to know operator precedence here because the notation isnt ambiguous in those.
31790 	X	of course it takes some time to understand the thing but it has more to do with the excessive amount of logic in one line than with the.
31791 	X	in general if and else bind less tight than everything except.
31792 	X	s siona at chiark greenend org uk http www chaos org uk sion frankly i have no feelings towards penguins one way or the other x arthur c clarke her nu become.
31793 	X	se bera eadward ofdun hlddre heafdes bce bump bump bump.
31794 	X	for fans of terry pratchetts discworld series there is.
31795 	X	vimes had once discussed the ephebian idea of democracy with carrot and had been rather interested in the idea that everyone had a vote until he found out that while he vimes would have a vote there was no way in the rules that anyone could prevent nobby nobbs from having one as.
31796 	X	vimes could see the flaw there straight.
31797 	X	reinhold birkenfeld reinhold birkenfeld nospam at wolke net writes.
31798 	X	yeah if c then a else b is a ancient tradition stretching from algol to ocaml and who knows what all else in.
31799 	X	im not sure what guido saw in the a if c else b syntax but its not a big.
31800 	X	i think you need to parenthesize but also note that using lambda does not always grab the currently executing scope x or y so i think the list container idiom may be better to show the semantics of the new expression.
31801 	X	gvrs syntax has the advantage of making grammatical sense in english i e reading it as written pretty much makes sense.
31802 	X	terry hancock hancock at anansispaceworks com anansi spaceworks http www anansispaceworks com.
31803 	X	the happy slaves eat and are contented ly yrs robin becker.
31804 	X	so this evaluates as if there are parentheses around each hmm.
31805 	X	the first if divided the expr then each succeeding if divides the sub expressions.
31806 	X	a if b else c x y.
31807 	X	a if b else c x y.
31808 	X	value x y a if b else c.
31809 	X	value x y a if b else c.
31810 	X	value x y a if b else c.
31811 	X	i think im going to make it a habit to put parentheses around these things just as if they were.
31812 	X	however it does slow people down which increases the chances of misconception which is why id be in favour of bracketing these expressions.
31813 	X	whereas the natural order of condition affirmative negative is natural for what reason.
31814 	X	that it is so in c.
31815 	X	i dont find that so compelling either.
31816 	X	why should it really matter in the end.
31817 	X	ive always found cs order and punctuation confusing i have to look it up practically everytime i use it or have to read it which correlates to it were used very rarely with causality in both directions.
31818 	X	given that situation choosing a form which is easy to read is surely an advantage and since it is the way that python has handled logic in the past it makes sense to continue doing.
31819 	X	no doubt any choice of ternary operator for python will be criticized and no doubt any choice would nevertheless be.
31820 	X	otoh i think this choice is consistent with the rest of pythons.
31821 	X	the general choice to use keyword operators for logic and symbolic operators for math is retained and so long as were describing the logic in words it makes sense for the wording to sound.
31822 	X	consistency certainly does make it easier for me to.
31823 	X	pythons main advantage over other languages for me is that it makes me run to the manual a lot less and i generally dont get confused trying to follow other peoples.
31824 	X	terry hancock hancock at anansispaceworks com anansi spaceworks http www anansispaceworks com.
31825 	X	it was just an enormous waste of resources that could have been employed much better.
31826 	X	fwiw i think terrys recollection is pretty close to the historical truth.
31827 	X	guido could have decided two years ago sparing us the pep.
31828 	X	so i am happy that at the end we will have a conditional operator but i am not happy of how the process worked.
31829 	X	and foo if bar is perl ish yet even perl has the.
31830 	X	a non text attachment was url http mail python org pipermail python list attachments c attachment sig.
31831 	X	what i really want to do is take four lines of conditional and put them into one as well as blow off dealing with a filler variable return the answer is yes if x else no or whatever the final release syntax.
31832 	X	duncan the syntax is fine but the semantics might not be what duncan you.
31833 	X	if i understand it correctly you need.
31834 	X	duncan return the answer is yes if x else no.
31835 	X	in general if and else bind less tight than everything except.
31836 	X	i say with the utmost arrogance that i wont neglect the parens more than say.
31837 	X	as mentioned earlier only a dictator can make such decisions and of course as with many dictatorships the wrong decision is often.
31838 	X	theres no such thing as a benevolent.
31839 	X	we have already had this discussion several.
31840 	X	i dont think it is going to add anything new to.
31841 	X	besides after the bdfl has decided it is.
31842 	X	piet van oostrum piet at cs uu nl url http www cs uu nl piet pgp daebec private email piet at vanoostrum org.
31843 	X	a non text attachment was url http mail python org pipermail python list attachments eab attachment sig.
31844 	X	op sam schreef sam at email scan com.
31845 	X	but what you show doesnt require choice of which to evaluate since you are merely choosing between immutable constants and there is no side effect or computation overhead to avoid by not evaluating the unselected.
31846 	X	the answer is no yes x.
31847 	X	as is pointed out though legal there is some doubt as to whether you meant what you wrote.
31848 	X	michele simionato michele simionato at gmail com writes.
31849 	X	seems thats what guido thinks too.
31850 	X	if theres one thing ive learned from the pep vote it is that votes for language dont.
31851 	X	i prefer some discussion on python dev after which i pick.
31852 	X	i think he said at the time that it was an.
31853 	X	dave benjamin ramen at lackingtalent com.
31854 	X	i understand that this has become the local politically correct view but as a participant in the discussion i know it not true and actively.
31855 	X	the community was prevented from coming to a.
31856 	X	there was a primary vote with an incumbent challengers and several write.
31857 	X	as recorded in http www python org peps pep html the incumbent proposal guidos favorite from beginning to end x if c else y was tied for st in rejections and was only th in acceptances were beaten by if c x else y which was also first in rejections c x y if c then x else y among the other proposals also about ths had the order c x y.
31858 	X	i think if nothing else the vote showed that the community pretty strongly preferred the order c x y to x c y.
31859 	X	i am pretty sure that a vote then and probably now on that specific issue would have favored the.
31860 	X	but that idea along with any runoff among the best exemplars of each order was rejected along with notice that unofficial votes conducted by community members would be.
31861 	X	the discussion and decision process was also inhibited by the lack of any ground rules as to what would be an acceptible.
31862 	X	so there was lots of confusion and lots of time wasted on favorite son candidates that had no chance of winning much as there once was on the first round of voting at american presidential nominating conventions.
31863 	X	there was also that i knew of no definition of success nor a process aimed at.
31864 	X	i doubt that many actually expected the obviously preliminary vote to reach a definitive.
31865 	X	even in the recent py dev discussion guido declined when i specifically asked to reveal his ballot of alternatives he was.
31866 	X	so what were we actually supposed to discuss.
31867 	X	naturally there followed irrelevant noise posts on impossible alternatives and peripheral.
31868 	X	and this became a reason for guido to just decide on his original favorite no explanation.
31869 	X	the lesson for me is to spend much less time on python discussion and much more on unfinished.
31870 	X	so even if i never use the new syntax i will have gained something.
31871 	X	the correct answer should be the person who wrote it would get told off for writing code that a person reading would have no idea what the code was doing without understanding the precedence.
31872 	X	whilst its good to have clear understandable well defined rules for these things thats no excuse for having unreadable code that other people cant read and understand without having to remember obscure.
31873 	X	personally id hope that any code linting tools would flag such expressions as potentially bad because theyre not.
31874 	X	whereas bracketed expressions instantly help here.
31875 	X	i know lets re write python to make it more like cobol.
31876 	X	thats bound to be a winner.
31877 	X	email zen at zen dot co dot uk.
31878 	X	same time span and i used it zillions of times.
31879 	X	perhaps hes preparing python for the eventual absorption into.
31880 	X	william park opengeometry at yahoo ca toronto canada thinflash linux thin client on usb key flash drive bashdiff super bash shell http freshmeat net projects bashdiff.
31881 	X	op terry hancock schreef hancock at anansispaceworks com.
31882 	X	personnaly i would think some consistency between conditional expressions and conditional statements would have been a good.
31883 	X	i havent seen a discussion where the following kind of if statement was.
31884 	X	agreed i think having it is more important than what form it comes.
31885 	X	my preference has more to do with consistency with the.
31886 	X	i think that a consistency within the language would have made more sense than consistency with someones mother.
31887 	X	when i program i program in python or some other programming.
31888 	X	not in english dutch french or some other natural.
31889 	X	but for me this is just style.
31890 	X	i dont care that much for style im more concerned with functionality and im glad this functionality will become.
31891 	X	op duncan booth schreef duncan booth at invalid invalid.
31892 	X	if the same procedure would have been followed concerning the decorator syntax it would have been rejected too for the same.
31893 	X	imo this is worded in a misleading.
31894 	X	it wasnt that there was lack of an overwhelming majority for.
31895 	X	supported at least one of the options and only rejected all.
31896 	X	so it seems voters out of supported the introduction of a ternary.
31897 	X	yes no format was able to draw majority support but that is hardly suprising since there where formats to choose.
31898 	X	i find the fact that people were unable to choose one clear winner out of formats in one vote were worded as lack of an overwhelming majority for change at the least not very accurate and probably misleading or.
31899 	X	hopefully only one of y or x is actually evaluated.
31900 	X	hopefully only if x is true isnt in fact a limitation of x if c else y.
31901 	X	snip comment that the natural order is c x y and that programmers that care about readable code will probably want to be extremely careful with this new feature.
31902 	X	after years of arguing over which syntax to use and finally giving up since nobody could agree the benevolent dictator did what only a dictator can do and just made a damn decision.
31903 	X	cough yes sorry its not the.
31904 	X	c and lambda x or lambda y.
31905 	X	yes that was my comment too but ill not demonize it before i have used.
31906 	X	richie hindle rjh at cyberscience com writes.
31907 	X	wow i thought this was a prank at.
31908 	X	i think the introduction of list and sequence comprehensions made the absence of a conditional construct felt even more strongly than before for those of us who program in this.
31909 	X	the idea has already been discussed to.
31910 	X	read pep to see what was proposed discussed and why the pep was eventually rejected.
31911 	X	http www python org peps pep html.
31912 	X	from guidos announcement at http mail python org pipermail python dev september html.
31913 	X	richie hindle richie at entrian com.
31914 	X	quote the priorities will be such that you can write.
31915 	X	x a if c else b x lambda a if c else b x a if c else b if d else e.
31916 	X	if a if c else b x for x in seq if a if c else b a if x if c else y else b a if c else b if d else e.
31917 	X	note that all these are intentionally.
31918 	X	after guidos pronouncement yesterday in one of the next versions of python there will be a conditional expression with the following syntax.
31919 	X	which is the same as todays.
31920 	X	c and x or y only if x is true.
31921 	X	that is what would happen with the following constructs.
31922 	X	the first one is the tricky bit it could be either.
31923 	X	a if b else c if d else f or a if b else c if d else f.
31924 	X	id expect the former from left right semantics but reading the unparenthesized form id see a if b else note that b is true and conclude the expression evaluated to a which would be wrong if d is false.
31925 	X	thomas wouters checked in a patch for pep so python now has the long awaited conditional expressions.
31926 	X	pep http www python org dev peps pep.
31927 	X	pep http mail python org pipermail python dev february html.
31928 	X	pep conditional expressions is accepted for python im pretty sure implementation hasnt even started.
31929 	X	http www python org dev peps pep.
31930 	X	do we have the conditional expressions in python.
31931 	X	no afaik theyll be in for.
31932 	X	in the meanwhile there are sometime tricky.
31933 	X	ways to get the same result.
31934 	X	a and yes or no a no yes.
31935 	X	bruno desthuilliers python c print join join w for w in p split for p in onurb at xiludom gro split.
31936 	X	it would be helpful if the rules of the game were spelled out more.
31937 	X	the conditional expression is defined as x if c else y.
31938 	X	we dont know the precedence of the if.
31939 	X	from the little test below it seem to have a lower precedence than or.
31940 	X	thus it is desirable for the user to put the conditional expression in.
31941 	X	condexpr py pep defines a conditional expression as x if c else y but we dont know exactly what x is supposed to.
31942 	X	it doesnt seem to be spelled out in the.
31943 	X	def main names abc def ghi jkl mno pqrs res for w in names res res w if w.
31944 	X	res for w in names res res w if w.
31945 	X	result dbg res pqrs res abcdefjklpqrs.
31946 	X	pro it puts paid to the python doesnt have a ternary operator and and or.
31947 	X	the rules are specified in the python reference manual.
31948 	X	but to give them credit though in whats new in python pep they do mention that as a matter of style you should parenthesise the if expression and the example given consistes of just a simple assignment of the if expr to a.
31949 	X	the ternary operator is a step.
31950 	X	i was trying to make the point that the parentheses are necessary if x is more than a simple.
31951 	X	its a pity that one finds this out by experiment rather than.
31952 	X	could you submit a documentation patch.
31953 	X	http sourceforge net tracker group id atid.
31954 	X	it doesnt need to be in.
31955 	X	just indicate in what document you think text should be.
31956 	X	while refactoring some code i ran across an opportunity to use a conditional.
31957 	X	if total p base excessblk block total p base srccol carry button suppress true else excessblk none.
31958 	X	is there any consensus on how to format a conditional expression that is too long for one line.
31959 	X	excessblk block total p base srccol carry button suppress true if total p base else none.
31960 	X	the above format separates the values from the if then else.
31961 	X	would it be better to line up if and else vertically.
31962 	X	excessblk block total p base srccol carry button suppress true if total p base else none.
31963 	X	jean michel pichavant at sequans com.
31964 	X	i agree with this to some.
31965 	X	after all python conditional expressions were eventually introduced in response to buggy uses of the a and b or c.
31966 	X	in my own code im finding myself increasingly using conditional expressions where i would once have used and or or.
31967 	X	daysinadvance int inputvar if inputvar is not none else.
31968 	X	using and is indeed bug prone when used in combination with or to achieve a ternary conditional op as was done the pre pep days eg val cond and a or b because of the possibility that a was itself not true thus requiring the ugly val cond and a or b.
31969 	X	but no such bug could occur with this particular.
31970 	X	what could possibly go wrong here.
31971 	X	that were said i agree with previous posters that if cond fn wins in terms of.
31972 	X	there was a lot of discussion about.
31973 	X	interesting in the historical section we see.
31974 	X	the original version of this pep proposed the following syntax.
31975 	X	the out of order arrangement was found to be too uncomfortable for many of participants in the discussion especially when expression is long its easy to miss the conditional while.
31976 	X	but apparently those objections were either unknown or disregarded when the syntax was later.
31977 	X	peter seebach usenet nospam at seebs net http www seebs net log lawsuits religion and funny pictures http en wikipedia org wiki fair game scientology get educated.
31978 	X	i am not speaking for my employer although they do rent some of my.
31979 	X	some of us have the impression that guido deliberatly chose an ugly format for the ternary.
31980 	X	guido has alwasys been against a ternary operator but the requests kept.
31981 	X	but the impression is that he chose an ugly format in the hope of discouraging people to use.
31982 	X	i very much like the format of the python ternary operator but ive never actually used it myself.
31983 	X	bugs item was opened at message generated for change comment added made by twouters you can respond by visiting https sourceforge net tracker func detail atid aid group id.
31984 	X	please note that this message will contain a full copy of the comment thread including the initial issue submission for this request not just the latest.
31985 	X	the attached syn py gives a syntaxerror in and.
31986 	X	whittled down from real life zope.
31987 	X	def d dir return fn for fn in os listdir dir if fn if fn.
31988 	X	yeah this is definately caused by the pep patch so i guess the error is mine but dont tell.
31989 	X	unless someone beats me to it ill fix it and add a test tomorrow but please dont fix it without checking in some.
31990 	X	list if if test list iter.
31991 	X	list if if old test list iter.
31992 	X	conditionals must then be enclosed in.
31993 	X	the second if is seen as the beginning of a conditional expression so.
31994 	X	return fn for fn in os listdir dir if fn if fn else fn.
31995 	X	comment by tim peters tim one.
31996 	X	the whittled down version looks ridiculous but the original wasnt quite such an affront to beauty its really no stranger than allowing pure if statements to nest and it would be more painful to contort the grammar to disallow it i havent looked at the parser but it was very surprising to me that it didnt allow it.
31997 	X	is including two if clauses with a single for clause really meant to be legal.
31998 	X	goes and looks at language reference.
31999 	X	what a strange way to write and.
32000 	X	you can respond by visiting https sourceforge net tracker func detail atid aid group id.
32001 	X	is including two if clauses with a single for clause really meant to be legal.
32002 	X	goes and looks at language reference.
32003 	X	what a strange way to write and.
32004 	X	you can respond by visiting https sourceforge net tracker func detail atid aid group id.
32005 	X	bugs item was opened at message generated for change comment added made by twouters you can respond by visiting https sourceforge net tracker func detail atid aid group id.
32006 	X	please note that this message will contain a full copy of the comment thread including the initial issue submission for this request not just the latest.
32007 	X	the attached syn py gives a syntaxerror in and.
32008 	X	whittled down from real life zope.
32009 	X	def d dir return fn for fn in os listdir dir if fn if fn.
32010 	X	yeah this is definately caused by the pep patch so i guess the error is mine but dont tell.
32011 	X	unless someone beats me to it ill fix it and add a test tomorrow but please dont fix it without checking in some.
32012 	X	list if if test list iter.
32013 	X	list if if old test list iter.
32014 	X	conditionals must then be enclosed in.
32015 	X	the second if is seen as the beginning of a conditional expression so.
32016 	X	return fn for fn in os listdir dir if fn if fn else fn.
32017 	X	comment by tim peters tim one.
32018 	X	the whittled down version looks ridiculous but the original wasnt quite such an affront to beauty its really no stranger than allowing pure if statements to nest and it would be more painful to contort the grammar to disallow it i havent looked at the parser but it was very surprising to me that it didnt allow it.
32019 	X	eric smith eric at trueblade com added the comment.
32020 	X	for what its worth these are properly called conditional expressions.
32021 	X	see pep for the gory details including figuring out what the precedence.
32022 	X	it was news to me that the allowed syntax is slightly different in x and x.
32023 	X	python tracker report at bugs python org.
32024 	X	new submission from terry j reedy.
32025 	X	the documentation for conditional expressions c exps http docs python org reference expressions html conditional expressions and the later sections on evaluation order and operator precedence have inconsistencies with each.
32026 	X	i believe the latter the context of the title were not properly adjusted with the addition of the former to match the exceptional behavior of c.
32027 	X	associativily grouping i believe the grammar line conditional expression or test if or test else expression makes c exps group right to left as in c something like conditional expression expression if or test else or test would have the opposite.
32028 	X	the following examples posted on python list by candide illustrate and.
32029 	X	this sentence in the operator precedence section http docs python org reference expressions html operator precedence.
32030 	X	operators in the same box group left to right except for comparisons including tests which all have the same precedence and chain from left to right see section comparisons and exponentiation which groups from right to left.
32031 	X	should have the last part revised to.
32032 	X	and exponentiation and conditional expressions which group from right to left.
32033 	X	perhaps a sentence and example should also be added to the c e section.
32034 	X	evaluation order condition expressions evaluate the middle subexpession first making python evaluates expressions from left to.
32035 	X	http docs python org reference expressions html evaluation order wrong as is without noting the exception of c.
32036 	X	i think except for conditional expressions python evaluates expressions from left to.
32037 	X	gives too much weight to the.
32038 	X	python evaluates expressions from left to right except for conditional expressions is a bit more awkward but appropriately makes the exception more like a.
32039 	X	precedence conditional expressions sometimes called a ternary operator.
32040 	X	have the lowest priority of all python.
32041 	X	versus the table which lists lambda as lowest.
32042 	X	should except for lambda be added to the end of the sentence.
32043 	X	should the top two lines of the table be reversed.
32044 	X	i do not know which is true or perhaps.
32045 	X	i get the impression from the grammar and the discussion in pep that there are sort of at the same.
32046 	X	raymond i add you as a pep author particularly for this.
32047 	X	messages nosy rhettinger terry reedy priority normal severity normal stage needs patch status open title context of documentation for conditional expressions type behavior versions python python python.
32048 	X	python tracker report at bugs python org.
32049 	X	i actually have half a patch for this and the keyword only argument thing and some other generalizations of seq and mapping lying.
32050 	X	since it isnt going in before anyway i wasnt planning on doing anything with it until is well and.
32051 	X	i mostly started it to get to know the ast pep and have since done the.
32052 	X	i dunno if i count as an old timer but im sure i can convince some of you real old fogies that its a good.
32053 	X	the ietf requires working implementations before accepting an.
32054 	X	absolutely a good idea and also how ive generally done it in the past.
32055 	X	besides code is easy a pep is a heck of a lot of.
32056 	X	it still has to be done it just wont have to be wasted so.
32057 	X	thomas wouters thomas at python org.
32058 	X	copy me into your signature file to help me spread.
32059 	X	an html attachment was url http mail python org pipermail python attachments f attachment html.
