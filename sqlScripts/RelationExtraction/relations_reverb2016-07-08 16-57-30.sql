Select arg1, relation, arg2, sentence from peps.relations_reverb
USE peps;

CREATE TABLE `relations_reverb` (
  `arg1` text,
  `relation` text,
  `arg2` text,
  `sentence` text
) ENGINE=InnoDB DEFAULT CHARSET=latin1;


insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('I','proposed eliminating','the concept','null Over on the import-sig I proposed eliminating the concept of .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('some * optimization','took','place','pyo files since they only signify that * some * optimization took place , not * what * optimizations took place .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('optimizations','took','place','pyo files since they only signify that * some * optimization took place , not * what * optimizations took place .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('the SIG','was positive with','the idea','Everyone on the SIG was positive with the idea so I wrote a PEP , got positive feedback from the SIG again , and so now I present to you PEP 488 for discussion . .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('I','wrote','a PEP','Everyone on the SIG was positive with the idea so I wrote a PEP , got positive feedback from the SIG again , and so now I present to you PEP 488 for discussion . .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('I','got positive feedback from','the SIG','Everyone on the SIG was positive with the idea so I wrote a PEP , got positive feedback from the SIG again , and so now I present to you PEP 488 for discussion . .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('I','present to','you','Everyone on the SIG was positive with the idea so I wrote a PEP , got positive feedback from the SIG again , and so now I present to you PEP 488 for discussion . .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('this','is not','a complicated change','There is no patch yet , but this is not a complicated change and I could get it done at the sprints at PyCon if necessary -LRB- I suspect updating the test suite will take the most work -RRB- . .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('I','could get','it','There is no patch yet , but this is not a complicated change and I could get it done at the sprints at PyCon if necessary -LRB- I suspect updating the test suite will take the most work -RRB- . .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('the test suite','will take','the most work -RRB-','There is no patch yet , but this is not a complicated change and I could get it done at the sprints at PyCon if necessary -LRB- I suspect updating the test suite will take the most work -RRB- . .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('one','is purely a bikeshed topic on','formatting of file names','There are currently two open issues , although one is purely a bikeshed topic on formatting of file names so I do nt really consider it open for change from what is proposed in the PEP without Guido saying he hates my preference or someone having a really good argument for some alternative .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('I','do nt really consider','it','There are currently two open issues , although one is purely a bikeshed topic on formatting of file names so I do nt really consider it open for change from what is proposed in the PEP without Guido saying he hates my preference or someone having a really good argument for some alternative .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('change','is proposed in','the PEP','There are currently two open issues , although one is purely a bikeshed topic on formatting of file names so I do nt really consider it open for change from what is proposed in the PEP without Guido saying he hates my preference or someone having a really good argument for some alternative .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('he','hates','my preference','There are currently two open issues , although one is purely a bikeshed topic on formatting of file names so I do nt really consider it open for change from what is proposed in the PEP without Guido saying he hates my preference or someone having a really good argument for some alternative .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('the common case file name','is','something','The second open issue on the common case file name is something to reasonably debate and come to consensus on . .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('something','come to','consensus','The second open issue on the common case file name is something to reasonably debate and come to consensus on . .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('This PEP','proposes eliminating','the concept of PYO files','This PEP proposes eliminating the concept of PYO files from Python .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('this PEP','proposes extending','the PYC file name','To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in bytecode repository directory -LRB- i.e. , the `` __ pycache __ `` directory -RRB- . .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('bytecode files','come in','two flavors','As of today , bytecode files come in two flavors : PYC and PYO .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('A PYC file','is','the bytecode file','A PYC file is the bytecode file generated and read from when no optimization level is specified at interpreter startup -LRB- i.e. , `` - O `` is not specified -RRB- .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('no optimization level','is specified at','interpreter startup','A PYC file is the bytecode file generated and read from when no optimization level is specified at interpreter startup -LRB- i.e. , `` - O `` is not specified -RRB- .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('A PYO file','represents','the bytecode file','A PYO file represents the bytecode file that is readwritten when ** any ** optimization level is specified -LRB- i.e. , when `` - O `` is specified , including `` - OO `` -RRB- .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('the same','is not true for','PYO files','This means that while PYC files clearly delineate the optimization level used when they were generated -- namely no optimizations beyond the peepholer -- the same is not true for PYO files .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('no clear way','was used to generate','the bytecode file','pyo `` file extension for both level 1 and 2 optimizations means that there is no clear way to tell what optimization level was used to generate the bytecode file .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('this','can lead to','an interpreter','In terms of reading PYO files , this can lead to an interpreter using a mixture of optimization levels with its code if the user was not careful to make sure all PYO files were generated using the same optimization level -LRB- typically done by blindly deleting all PYO files and then using the ` compileall ` module to compile all-new PYO files -LRB- 1 -RRB- _ -RRB- .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('all PYO files','were generated using','the same optimization level','In terms of reading PYO files , this can lead to an interpreter using a mixture of optimization levels with its code if the user was not careful to make sure all PYO files were generated using the same optimization level -LRB- typically done by blindly deleting all PYO files and then using the ` compileall ` module to compile all-new PYO files -LRB- 1 -RRB- _ -RRB- .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('people','optimize','Python code','This issue is only compounded when people optimize Python code beyond what the interpreter natively supports , e.g. , using the astoptimizer project -LRB- 2 -RRB- _ . .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('one','changes','the optimization level','In terms of writing PYO files , the need to delete all PYO files every time one either changes the optimization level they want to use or are unsure of what optimization was used the last time PYO files were generated leads to unnecessary file churn .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('they','was used','the last time','In terms of writing PYO files , the need to delete all PYO files every time one either changes the optimization level they want to use or are unsure of what optimization was used the last time PYO files were generated leads to unnecessary file churn .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('PYO files','were generated leads to','unnecessary file churn','In terms of writing PYO files , the need to delete all PYO files every time one either changes the optimization level they want to use or are unsure of what optimization was used the last time PYO files were generated leads to unnecessary file churn .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('this PEP','also allows for','**','The change proposed by this PEP also allows for ** all ** optimization levels to be pre-compiled for bytecode files ahead of time , something that is currently impossible thanks to the reuse of the `` .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('something','is currently impossible thanks to','the reuse of the ``','The change proposed by this PEP also allows for ** all ** optimization levels to be pre-compiled for bytecode files ahead of time , something that is currently impossible thanks to the reuse of the `` .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('files','is unnecessary for','the common use-case of code obfuscation','pyo `` files is unnecessary for the common use-case of code obfuscation and smaller file deployments . .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('this PEP','proposes eliminating','the concept of PYO files','To eliminate the ambiguity that PYO files present , this PEP proposes eliminating the concept of PYO files and their accompanying `` .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('a PYC file','will be incorporated into','the bytecode file name','To allow for the optimization level to be unambiguous as well as to avoid having to regenerate optimized bytecode files needlessly in the ` __ pycache __ ` directory , the optimization level used to generate a PYC file will be incorporated into the bytecode file name .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('This PEP','proposes to change','the expression','This PEP proposes to change the expression to : : . ');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('I','proposed eliminating','the concept','null Over on the import-sig I proposed eliminating the concept of .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('I','proposed eliminating','the concept','null Over on the import-sig I proposed eliminating the concept of .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('some * optimization','took','place','pyo files since they only signify that * some * optimization took place , not * what * optimizations took place .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('optimizations','took','place','pyo files since they only signify that * some * optimization took place , not * what * optimizations took place .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('the SIG','was positive with','the idea','Everyone on the SIG was positive with the idea so I wrote a PEP , got positive feedback from the SIG again , and so now I present to you PEP 488 for discussion . .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('I','wrote','a PEP','Everyone on the SIG was positive with the idea so I wrote a PEP , got positive feedback from the SIG again , and so now I present to you PEP 488 for discussion . .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('I','got positive feedback from','the SIG','Everyone on the SIG was positive with the idea so I wrote a PEP , got positive feedback from the SIG again , and so now I present to you PEP 488 for discussion . .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('I','present to','you','Everyone on the SIG was positive with the idea so I wrote a PEP , got positive feedback from the SIG again , and so now I present to you PEP 488 for discussion . .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('this','is not','a complicated change','There is no patch yet , but this is not a complicated change and I could get it done at the sprints at PyCon if necessary -LRB- I suspect updating the test suite will take the most work -RRB- . .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('I','could get','it','There is no patch yet , but this is not a complicated change and I could get it done at the sprints at PyCon if necessary -LRB- I suspect updating the test suite will take the most work -RRB- . .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('the test suite','will take','the most work -RRB-','There is no patch yet , but this is not a complicated change and I could get it done at the sprints at PyCon if necessary -LRB- I suspect updating the test suite will take the most work -RRB- . .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('one','is purely a bikeshed topic on','formatting of file names','There are currently two open issues , although one is purely a bikeshed topic on formatting of file names so I do nt really consider it open for change from what is proposed in the PEP without Guido saying he hates my preference or someone having a really good argument for some alternative .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('I','do nt really consider','it','There are currently two open issues , although one is purely a bikeshed topic on formatting of file names so I do nt really consider it open for change from what is proposed in the PEP without Guido saying he hates my preference or someone having a really good argument for some alternative .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('change','is proposed in','the PEP','There are currently two open issues , although one is purely a bikeshed topic on formatting of file names so I do nt really consider it open for change from what is proposed in the PEP without Guido saying he hates my preference or someone having a really good argument for some alternative .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('he','hates','my preference','There are currently two open issues , although one is purely a bikeshed topic on formatting of file names so I do nt really consider it open for change from what is proposed in the PEP without Guido saying he hates my preference or someone having a really good argument for some alternative .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('the common case file name','is','something','The second open issue on the common case file name is something to reasonably debate and come to consensus on . .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('something','come to','consensus','The second open issue on the common case file name is something to reasonably debate and come to consensus on . .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('This PEP','proposes eliminating','the concept of PYO files','This PEP proposes eliminating the concept of PYO files from Python .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('this PEP','proposes extending','the PYC file name','To continue the support of the separation of bytecode files based on their optimization level , this PEP proposes extending the PYC file name to include the optimization level in bytecode repository directory -LRB- i.e. , the `` __ pycache __ `` directory -RRB- . .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('bytecode files','come in','two flavors','As of today , bytecode files come in two flavors : PYC and PYO .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('A PYC file','is','the bytecode file','A PYC file is the bytecode file generated and read from when no optimization level is specified at interpreter startup -LRB- i.e. , `` - O `` is not specified -RRB- .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('no optimization level','is specified at','interpreter startup','A PYC file is the bytecode file generated and read from when no optimization level is specified at interpreter startup -LRB- i.e. , `` - O `` is not specified -RRB- .');
insert into `peps`.`relations_reverb`(`arg1`,`relation`,`arg2`,`sentence`) values ('A PYO file','represents','the bytecode file','A PYO file represents the bytecode file that is readwritten when ** any ** optimization level is specified -LRB- i.e. , when `` - O `` is specified , including `` - OO `` -RRB- .');
