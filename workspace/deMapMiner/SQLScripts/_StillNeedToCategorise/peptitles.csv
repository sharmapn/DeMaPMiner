"title"
" PEP Purpose and Guidelines"
" Procedure for Adding New Modules"
" Guidelines for Handling Bug Reports"
" Deprecation of Standard Modules"
" Guidelines for Language Evolution"
" Bug Fix Releases"
" Style Guide for C Code"
" Style Guide for Python Code"
" Sample Plaintext PEP Template"
" Voting Guidelines"
" Removing support for little used platforms"
" Sample reStructuredText PEP Template"
" The Zen of Python"
" Feature Requests"
" Python Unicode Integration"
" Doing Python Releases 101"
" Doing Python Micro Releases"
" Collecting information about git"
" Python 1.6 Release Schedule"
" Python 2.0 Release Schedule"
" Lockstep Iteration"
" List Comprehensions"
" Augmented Assignments"
" Range Literals"
" Weak References"
" Python Advanced Library"
" Rich Comparisons"
" Reworking the Coercion Model"
" Multi-dimensional Arrays"
" Decoupling the Interpreter Loop"
" Adding A New Outer Product Operator"
" Loop Counter Iteration"
" Attribute Access Handlers"
" Extended Print Statement"
" String Interpolation"
" Docstring Format"
" Display Hook for Interactive Use"
" Adding a Built-In Set Object Type"
" Stackless Python"
" Coroutines, Generators, Continuations"
" Import As"
" Web Library Enhancements"
" Change the Meaning of ``\x`` Escapes"
" Attribute Docstrings"
" Elementwise/Objectwise Operators"
" Python 2.1 Release Schedule"
" Statically Nested Scopes"
" Reworking Python&#39;s Numeric Model"
" Using Distutils to Build Python"
" Warning Framework"
" __findattr__()"
" Function Attributes"
" Python Online Help"
" Iterators"
" Import on Case-Insensitive Platforms"
" Back to the __future__"
" Unifying Long Integers and Integers"
" Changing the Division Operator"
" Adding a Rational Type to Python"
" Adding a Rational Literal to Python"
" Metadata for Python Software Packages"
" Numeric Kinds"
" Module Repository Upload Mechanism"
" The ``directive`` statement"
" Python Interface Syntax"
" Object Adaptation"
" API for Cryptographic Hash Functions"
" Python Database API Specification v1.0"
" Python Database API Specification v2.0"
" Using site-packages on Windows"
" Python 2.2 Release Schedule"
" Making Types Look More Like Classes"
" Subtyping Built-in Types"
" Making Classes Look More Like Types"
" Simple Generators"
" Docstring Processing System Framework"
" Docstring Conventions"
" Docutils Design Specification"
" Omit printing newline after newline"
" Simplify xrange()"
" Support for &quot;wide&quot; Unicode characters"
" A Database of Installed Python Packages"
" Defining Python Source Code Encodings"
" Future statements in simulated shells"
" Sorting Dictionaries by Value"
" Optimizing Global Variable/Attribute Access"
" Optimized Access to Module Namespaces"
" Extended HTTP functionality and WebDAV"
" Pgen Module for Python"
" uniq method for list objects"
" Prefixing sys.path by command line option"
" API for Block Encryption Algorithms v1.0"
" Import Modules from Zip Archives"
" Dict Comprehensions"
" Switching on Multiple Values"
" Simple Iterator for ints"
" Unicode file name support for Windows NT"
" Universal Newline Support"
" The enumerate() built-in function"
" Optimizing access to globals"
" Loop Counter Iteration with range and xrange"
" A Logging System"
" Python 2.3 Release Schedule"
" Integer for-loops"
" Adding a bool type"
" Enhanced Argument Tuples"
" reStructuredText Docstring Format"
" Generators Attributes and Exceptions"
" Generator Expressions"
" Code Migration and Modernization"
" Backward Compatibility for the Python 2 Standard Library"
" Simpler String Substitutions"
" Codec Error Handling Callbacks"
" Type Names in the types Module"
" Interpretation of multiline string constants"
" Adding a bytes Object Type"
" Support for System Upgrades"
" The Locked Buffer Interface"
" Special __main__() function in modules"
" Package Index and Metadata for Distutils"
" New Import Hooks"
" Extend divmod() for Multiple Divisors"
" Controlling Generation of Bytecode Files"
" CSV File API"
" How to Change Python&#39;s Grammar"
" Extensions to the pickle protocol"
" Conditional Expressions"
" Partial Function Application"
" Reliable Acquisition/Release Pairs"
" Simplified Global Interpreter Lock Acquisition for Extensions"
" Simple Implicit Lambda"
" Adding Roman Numeral Literals to Python"
" Metadata for Python Software Packages v1.1"
" Enhanced While Loop"
" Programming by Contract for Python"
" Eliminate Implicit Exception Instantiation"
" Decorators for Functions and Methods"
" Python Synchronize/Asynchronize Block"
" Python 2.4 Release Schedule"
" Date/Time Parsing and Formatting"
" Reverse Iteration"
" Copyable Iterators"
" subprocess - New process module"
" Resource-Release Support for Generators"
" A Case for Top and Bottom Values"
" Decimal Data Type"
" Imports: Multi-Line and Absolute/Relative"
" Treating Builtins as Constants in the Standard Library"
" Python Bytecode Verification"
" Locale-Independent Float/String Conversions"
" Byte vectors and String/Unicode Unification"
" Python Web Server Gateway Interface v1.0"
" Simple Coroutines via SuspendIteration"
" Overloadable Boolean Operators"
" Make None Callable"
" Logging Usage in the Standard Library"
" Executing modules as scripts"
" Design of the CPython Compiler"
" Anonymous Block Statements"
" Unifying try-except and try-finally"
" Coroutines via Enhanced Generators"
" The &quot;with&quot; Statement"
" Exception Chaining and Embedded Tracebacks"
" Metadata for Python Software Packages 1.2"
" User Defined (&quot;``with``&quot;) Statements"
" Migrating the Python CVS to Subversion"
" Exception Reorganization for Python 3.0"
" Allow str() to return unicode strings"
" Codetags"
" The freeze protocol"
" Required Superclass for Exceptions"
" Using ssize_t as the index type"
"          Enumerations in Python"
" Path - Object oriented filesystem paths"
" Python 2.5 Release Schedule"
" Allowing Any Object to be Used for Slicing"
" The &quot;bytes&quot; Object"
" The &quot;make&quot; Statement"
" Externally Maintained Packages"
" Python 2.6 and 3.0 Release Schedule"
" Function Signature Object"
" Syntax For Dynamic Attribute Access"
" Transitioning to the Py3K Standard Library"
" Adding the pkg_resources module"
" Main module explicit relative imports"
" New Super"
" Standard image protocol and class"
" Post import hooks"
" Per user site-packages directory"
" Addition of the multiprocessing package to the standard library"
" Adding an ordered dictionary to collections"
" Python 2.7 Release Schedule"
" Choosing a distributed VCS for the Python project"
" Python 3.1 Release Schedule"
" Database of Installed Python Distributions"
" Allow __enter__() methods to skip the statement body"
" Format Specifier for Thousands Separator"
" Adding an Assignment Expression"
" Syntax for Delegating to a Subgenerator"
" Mirroring infrastructure for PyPI"
" Namespace Packages"
" Non-decodable Bytes in System Character Interfaces"
" Defining a Stable ABI"
" Migrating from Subversion to Mercurial"
" Changing the version comparison module in Distutils"
" Backwards Compatibility Policy"
" argparse - New Command Line Parsing Module"
" Static metadata for Distutils"
" Dictionary-Based Configuration For Logging"
" Python 3.2 Release Schedule"
" Flexible String Representation"
" The &quot;python&quot; Command on Unix-Like Systems"
" Qualified Names for Modules"
" Module Version Numbers"
" Python launcher for Windows"
" Python 3.3 Release Schedule"
" Pure Python/C Accelerator Module Compatibility Requirements"
" Deprecate codecs.StreamReader and codecs.StreamWriter"
" BDFL Retirement"
" Simplified Package Layout and Partitioning"
" General purpose decorator clause (aka &quot;@in&quot; clause)"
" Python 2.8 Un-release Schedule"
" Python Virtual Environments"
" Improved Encapsulation of Import State"
" New release cycle and introducing long-term support versions"
" Standard library __preview__ package"
" Suppressing exception context"
" Use decimal.Decimal type for timestamps"
" Provisional packages in the Python standard library"
" Key-Sharing Dictionary"
" Faster evolution of the Python Standard Library"
" Explicit Unicode Literal for Python 3.3"
" Implement context suppression with exception attributes"
" Add a frozendict builtin type"
" Including mock in the Standard Library"
" Add monotonic time, performance counter, and process time functions"
" Protecting cleanup statements from interruptions"
" Implicit Namespace Packages"
" Adding sys.implementation"
" Simpler customisation of class creation"
" Naming conventions and recipes related to packaging"
" A method for exposing a length hint"
" Compatibility Tags for Built Distributions"
" Metadata for Python Software Packages 2.0"
" The Wheel Binary Package Format 1.0"
" The pathlib module -- object-oriented filesystem paths"
" Python 3.4 Release Schedule"
" Migrating to Python 3 as the default online documentation"
" Time zone support improvements"
" Restructuring the CPython startup sequence"
" Easier suppression of file descriptor inheritance"
" IDLE Enhancement Exception for All Branches"
" Adding an Enum type to the Python standard library"
" The Argument Clinic DSL"
" A DSL for specifying signatures, annotations and argument converters"
" Transitioning to release-file hosting on PyPI"
" Inclusion of implicit pip bootstrap in Python installation"
" Version Identification and Dependency Specification"
" Improving Python ZIP Application Support"
" Safe object finalization"
" Single-dispatch generic functions"
" Python Web3 Interface"
" Add new APIs to customize Python memory allocators"
" Make newly created file descriptors non-inheritable"
" Add __getdescriptor__ method to metaclass"
" Additional Unpacking Generalizations"
" Removal of the PyPI Mirror Auto Discovery and Naming Scheme"
" Adding A Statistics Module To The Standard Library"
" A ModuleSpec Type for the Import System"
" API for Cryptographic Hash Functions v2.0"
" Explicit bootstrapping of pip in Python installations"
" Add a new tracemalloc module to trace Python memory allocations"
" Adding a key-transforming dictionary to collections"
" Secure and interchangeable hash algorithm"
" Syntax For Positional-Only Parameters"
" Surviving a Compromise of PyPI"
" Standard Metadata Extensions for Python Software Packages"
" Add binary interpolation and formatting"
" Adding % formatting to bytes and bytearray"
" Core development workflow automation for CPython"
" Exception-catching expressions"
" Removal of the PyPI Mirror Authenticity API"
" A dedicated infix operator for matrix multiplication"
" Network Security Enhancements for Python 2.7.x"
" Minor API improvements for binary sequences"
" Preserving the order of \*\*kwargs in a function."
" Migration of dict iteration code to Python 3"
" Removing External Hosting Support on PyPI"
" os.scandir() function -- a better and faster directory iterator"
" Support for indexing with keyword arguments"
" Adding structured data to built-in exceptions"
" Creating forge.python.org"
" Retry system calls failing with EINTR"
" Enabling certificate verification by default for stdlib http clients"
" Backport ensurepip (PEP 453) to Python 2.7"
" Python 3.5 Release Schedule"
" Change StopIteration handling inside generators"
" Surviving a Compromise of PyPI: The Maximum Security Model"
" Migrate CPython to Git, Github, and Phabricator"
" Literature Overview for Type Hints"
" The Theory of Type Hints"
" Type Hints"
" A Function for testing approximate equality"
" Make the Python Launcher aware of virtual environments"
" Elimination of PYO files"
" Multi-phase extension module initialization"
" Chain exceptions at C level"
" The Wheel Binary Package Format 1.9"
" Coroutines with async and await syntax"
" HTTPS verification migration tools for Python 2.7"
" Python 3.6 Release Schedule"
" Local Time Disambiguation"
" Environment Markers"
" A standard mechanism for backward compatibility"
" Literal String Interpolation"
" ``python -m foo`` should bind ``sys.modules[&#39;foo&#39;]`` in addition to ``sys.modules[&#39;__main__&#39;]``"
" A protocol for delegating datetime methods to their"
" General purpose string interpolation"
" String Interpolation - Extended Discussion"
" Simple Repository API"
" Using the System RNG by default"
" None-aware operators"
" Adding A Secrets Module To The Standard Library"
" Migrate CPython to Git and GitLab"
" Dependency specification for Python Software Packages"
" Add a private version to dict"
" Specialize functions with guards"
" API for code transformers"
" Migrating from hg.python.org to GitHub"
" A Platform Tag for Portable Linux Built Distributions"
" Python registration in the Windows registry"
" Underscores in Numeric Literals"
" Build system abstraction for pip/conda etc"
" A build-system independent format for source trees"
" Specifying Minimum Build System Requirements for Python Projects"
" Preserving Class Attribute Definition Order"
" Managing global context via &#39;with&#39; blocks in generators and coroutines"
" Allow BlockingIOError in security sensitive APIs"
" Adding a frame evaluation API to CPython"
" Make os.urandom() blocking on Linux"
" Asynchronous Generators"
" Asynchronous Comprehensions"
" Existence checking operators"
" A circuit breaking protocol and binary operators"
" Deterministic cleanup for iterators"
" Distributing a Subset of the Standard Library"
" Rich comparison chaining"
" Final Grammar for Literal String Interpolation"
" Python 3.7 Release Schedule"
" Coercing the legacy C locale to C.UTF-8"
" A New C-API for Thread-Local Storage in CPython"
" Add a new UTF-8 mode"
" Package Index Name Retention"
" Dot Notation Assignment In Function Header"
" Add ``math.tau``"
" Reject Foolish Indentation"
" IEEE 754 Floating Point Special Values"
" Python 3000"
" Procedure for reviewing and improving standard library modules"
" Procedure for Backwards-Incompatible Changes"
" Python Language Moratorium"
" Things that will Not Change in Python 3000"
" Miscellaneous Python 3.0 Plans"
" Advanced String Formatting"
" Keyword-Only Arguments"
" A Switch/Case Statement"
" Access to Names in Outer Scopes"
" Make print a function"
" Revamping dict.keys(), .values() and .items()"
" Function Annotations"
" Standard Library Reorganization"
" Raising Exceptions in Python 3000"
" Catching Exceptions in Python 3000"
" Simple input built-in in Python 3000"
" Bytes literals in Python 3000"
" Removal of Tuple Parameter Unpacking"
" Renaming iterator.next() to iterator.__next__()"
" Metaclasses in Python 3000"
" New I/O"
" Postfix type declarations"
" Revising the buffer protocol"
" Introducing Abstract Base Classes"
" Using UTF-8 as the default source encoding"
" Extension Module Initialization and Finalization"
" Delineation of the main module"
" Making PyObject_HEAD conform to standard C"
" Overloading, Generic Functions, Interfaces, and Adaptation"
" Remove Backslash Continuation"
" Remove Implicit String Concatenation"
" Integer Literal Support and Syntax"
" BList: A Faster List-like Type"
" Class Decorators"
" Access to Current Module/Class/Function"
" Supporting Non-ASCII Identifiers"
" Extended Iterable Unpacking"
" Introducing Roles"
" Exception Chaining and Embedded Tracebacks"
" New Super"
" Labeled break and continue"
" Immutable Bytes and Mutable Buffer"
" String representation in Python 3000"
" Cleaning out sys and the &quot;interpreter&quot; module"
" str(container) should call str(item), not repr(item)"
" A Type Hierarchy for Numbers"
" Add a &quot;while&quot; clause to generator expressions"
"Standard daemon process library"
" IP Address Manipulation Library for the Python Standard Library"
" Asynchronous I/O For subprocess.Popen"
" Merging Unladen Swallow into CPython"
" PYC Repository Directories"
"             futures - execute computations asynchronously"
" ABI version tagged .so files"
" Statement local namespaces (aka &quot;given&quot; clause)"
" Reworking the OS and IO exception hierarchy"
" Cofunctions"
" Asynchronous IO support"
" Pickle protocol version 4"
" Qualified name for classes and functions"
" Asynchronous IO Support Rebooted: the &quot;asyncio&quot; Module"
" Python Web Server Gateway Interface v1.0.1"
